<Type Name="IDebugVsaScriptCodeItem" FullName="Microsoft.JScript.IDebugVsaScriptCodeItem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bc35a2bcccfdc73e32fef9ba38b81d4cf64ac29e" /><Meta Name="ms.sourcegitcommit" Value="d8bd5d494445ce3fcad1321267cb87548d23a45b" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="12/15/2018" /><Meta Name="ms.locfileid" Value="53448044" /></Metadata><TypeSignature Language="C#" Value="public interface IDebugVsaScriptCodeItem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDebugVsaScriptCodeItem" />
  <TypeSignature Language="DocId" Value="T:Microsoft.JScript.IDebugVsaScriptCodeItem" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDebugVsaScriptCodeItem" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDebugVsaScriptCodeItem" />
  <TypeSignature Language="F#" Value="type IDebugVsaScriptCodeItem = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.JScript</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("6DFE759A-CB8B-4ca0-A973-1D04E0BF0B53")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Définit des méthodes qui évaluent des expressions et analysent des chaînes. Cette interface est généralement implémentée par un objet qui représente un bloc de code et appelée par un débogueur. Cette interface fournit des fonctionnalités supplémentaires requises par un hôte IActiveScript.</summary>
    <remarks>To be added.</remarks>
    <forInternalUseOnly />
  </Docs>
  <Members>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public object Evaluate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Evaluate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate" />
      <MemberSignature Language="VB.NET" Value="Public Function Evaluate () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Evaluate();" />
      <MemberSignature Language="F#" Value="abstract member Evaluate : unit -&gt; obj" Usage="iDebugVsaScriptCodeItem.Evaluate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas d'implémentation dans une classe, évalue le bloc, l'expression ou l'instruction représenté par l'élément de code et retourne la valeur. Cette méthode est généralement appelée par un débogueur qui doit évaluer une expression (dans une fenêtre Espion, par exemple). Pour les expressions, la valeur est le résultat de l'expression. Pour les blocs et les instructions, l'expression résultante est la dernière expression calculée par le bloc ou l'instruction.</summary>
        <returns>Valeur qui représente l’évaluation de l’instruction, de l’expression ou du bloc.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Notez que le <xref:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate%2A> méthode est fonctionnellement identique à la <xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A> (méthode). Seuls les attributs de marshaling diffèrent. Cette version de l’interface permet à un débogueur non managé d’obtenir la valeur de retour comme un `IUnknown` pointeur au lieu d’un `VARIANT`.  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="ParseNamedBreakPoint">
      <MemberSignature Language="C#" Value="public bool ParseNamedBreakPoint (string input, out string functionName, out int nargs, out string arguments, out string returnType, out ulong offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ParseNamedBreakPoint(string input, [out] string&amp; functionName, [out] int32&amp; nargs, [out] string&amp; arguments, [out] string&amp; returnType, [out] unsigned int64&amp; offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ParseNamedBreakPoint (input As String, ByRef functionName As String, ByRef nargs As Integer, ByRef arguments As String, ByRef returnType As String, ByRef offset As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ParseNamedBreakPoint(System::String ^ input, [Runtime::InteropServices::Out] System::String ^ % functionName, [Runtime::InteropServices::Out] int % nargs, [Runtime::InteropServices::Out] System::String ^ % arguments, [Runtime::InteropServices::Out] System::String ^ % returnType, [Runtime::InteropServices::Out] System::UInt64 % offset);" />
      <MemberSignature Language="F#" Value="abstract member ParseNamedBreakPoint : string *  *  *  *  *  -&gt; bool" Usage="iDebugVsaScriptCodeItem.ParseNamedBreakPoint (input, functionName, nargs, arguments, returnType, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="functionName" Type="System.String" RefType="out" />
        <Parameter Name="nargs" Type="System.Int32" RefType="out" />
        <Parameter Name="arguments" Type="System.String" RefType="out" />
        <Parameter Name="returnType" Type="System.String" RefType="out" />
        <Parameter Name="offset" Type="System.UInt64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Une chaîne de point d'arrêt nommée de forme correcte qui donne une fonction, une liste d'arguments facultative et l'offset IL facultatif.</param>
        <param name="functionName">Paramètre out qui retourne le nom de la fonction analysée dans la chaîne d'entrée, ou la chaîne vide si la chaîne d'entrée n'est pas bien formée.</param>
        <param name="nargs">Paramètre out qui retourne le nombre d'arguments dans la liste d'arguments facultative. Retourne zéro s'il n'y a aucune liste d'argument ou si la chaîne n'est pas bien formée.</param>
        <param name="arguments">Paramètre out qui retourne une liste séparée par espace des noms des types de tous les arguments dans la liste des arguments, ou une chaîne vide si la liste des arguments est manquante ou la chaîne d'entrée n'a pas bien été formée.</param>
        <param name="returnType">Paramètre out qui retourne une chaîne qui contient le type de retour de la fonction nommée dans l'entrée, ou la chaîne vide si le type de retour est manquant ou la chaîne d'entrée n'a pas bien été formée.</param>
        <param name="offset">Entier long non signé qui donne l'offset IL depuis la chaîne d'entrée, ou zéro s'il n'y a aucun offset IL ou la chaîne n'a pas bien été formée.</param>
        <summary>En cas d'implémentation dans une classe, analyse des chaînes et retourne les informations analysées. Cette méthode est généralement appelée par un débogueur qui doit analyser des informations sur un point d'arrêt représenté comme <see langword="string" />. Le débogueur peut avoir un point d’arrêt entré par l’utilisateur au format *nomfonction-arguments-offsetIL*. Une chaîne de point d’arrêt nommée peut avoir un format complexe, par exemple, <c>F.B(C.D[], int, arg : double ) : C.Abc + 123.</c> La liste de paramètres est facultative, tout comme l’offset IL.</summary>
        <returns><see langword="true" /> si le point d’arrêt nommé est analysé correctement ; sinon, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>