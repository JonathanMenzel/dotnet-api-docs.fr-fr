<Type Name="IWorkflowCompilerOptionsService" FullName="System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bcd87cd4f5b340f2cd5f117cbea8a5b4f56b979d" />
    <Meta Name="ms.sourcegitcommit" Value="1b899505ed6d42225f2b3c9150bfdc080d0d1f9b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/28/2018" />
    <Meta Name="ms.locfileid" Value="32089963" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWorkflowCompilerOptionsService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWorkflowCompilerOptionsService" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWorkflowCompilerOptionsService" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWorkflowCompilerOptionsService" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Définit l’interface implémentée par l’environnement qui accueille le concepteur de workflow et le compilateur pour fournir des informations de compilation spécifiques à l’environnement au cours des processus de validation et de compilation.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CheckTypes">
      <MemberSignature Language="C#" Value="public bool CheckTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckTypes" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckTypes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckTypes { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si les types sont vérifiés.</summary>
        <value>
          <see langword="true" /> si les types sont vérifiés, sinon <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pendant la phase de validation de la compilation du flux de travail, un document de workflow source est rejeté si le <xref:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes%2A> propriété est `true` et le flux de travail ou les règles d’accompagnement fichier directement les références absent sur une liste de tous les types .NET Framework types autorisés. La liste de types autorisés est un document XML où chaque entrée indique un `Assembly`, un `Namespace`, un `TypeName`et un `Authorized` {`true` ou `false`} indicateur. Cette classe correspond à une entrée dans la liste. Notez également que les désignations de caractère générique sont autorisées, pour inclure ou exclure des espaces de noms complets. Par exemple, à l’aide de `Type="System.*"` inclut tous les types de <xref:System>, y compris les types contenus dans les espaces de noms enfants.  
  
 L’utilisation d’une liste de types autorisés est contrôlée par le <xref:System.Workflow.ComponentModel.Compiler.WorkflowCompiler> option **/checktypes** ou à l’aide de la <xref:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes%2A> propriété.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public string Language { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Language" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.Language" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Language As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Language { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le langage de programmation utilisé par l'environnement, tel que Visual Studio, lors de la compilation du workflow.</summary>
        <value>Nom du langage de programmation utilisé par l'environnement de développement.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple suivant illustre une implémentation de la propriété `Language`. Cet exemple provient de l'exemple du Kit de développement logiciel Tracking Profile Designer (SDK). Pour plus d’informations, consultez [exemple de Concepteur de profil de suivi](http://msdn.microsoft.com/library/a280199c-3000-4148-ac63-cb5aaeac07c8).  
  
 [!code-csharp[WF_Samples#123](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#123)]
 [!code-vb[WF_Samples#123](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#123)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootNamespace">
      <MemberSignature Language="C#" Value="public string RootNamespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RootNamespace" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.RootNamespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RootNamespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RootNamespace { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'espace de noms racine défini pour le projet.</summary>
        <value>Nom de l'espace de noms racine.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété est utilisée dans l'environnement de compilation Visual Basic pour passer l'espace de noms racine du projet au compilateur.  
  
   
  
## Examples  
 L'exemple suivant illustre une implémentation de la propriété `RootNamespace`. Cet exemple provient de l'exemple du Kit de développement logiciel Tracking Profile Designer (SDK). Pour plus d’informations, consultez [exemple de Concepteur de profil de suivi](http://msdn.microsoft.com/library/a280199c-3000-4148-ac63-cb5aaeac07c8).  
  
 [!code-csharp[Wf_samples#122](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#122)]
 [!code-vb[Wf_samples#122](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#122)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>