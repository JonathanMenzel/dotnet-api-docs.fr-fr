<Type Name="PrintQueue" FullName="System.Printing.PrintQueue">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ac6dd9a5f86b370d39fad479dedafb824dff4fb3" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51309180" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PrintQueue : System.Printing.PrintSystemObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi PrintQueue extends System.Printing.PrintSystemObject" />
  <TypeSignature Language="DocId" Value="T:System.Printing.PrintQueue" />
  <TypeSignature Language="VB.NET" Value="Public Class PrintQueue&#xA;Inherits PrintSystemObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class PrintQueue : System::Printing::PrintSystemObject" />
  <TypeSignature Language="F#" Value="type PrintQueue = class&#xA;    inherit PrintSystemObject" />
  <AssemblyInfo>
    <AssemblyName>System.Printing</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Printing.PrintSystemObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Gère des imprimantes et des travaux d'impression.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Certaines propriétés de la <xref:System.Printing.PrintQueue> représentent des caractéristiques de l’utilitaire de file d’impression qui s’exécute sur l’ordinateur de l’objet, mais d’autres représentent des fonctionnalités ou états de l’imprimante elle-même. Par exemple, <xref:System.Printing.PrintQueue.NumberOfJobs%2A> est une caractéristique de la file d’attente, mais <xref:System.Printing.PrintQueue.Location%2A> est une propriété de l’imprimante. La plupart des propriétés de l’imprimante, telles que déterminer s’il doit l’attention de l’utilisateur, doivent être transmis, par les moyens du <xref:System.Printing.PrintQueue.Refresh%2A> (méthode), à partir de l’imprimante elle-même à le <xref:System.Printing.PrintQueue> objet. Cela doit être effectuée avant la propriété correspondante (<xref:System.Printing.PrintQueue.NeedUserIntervention%2A>) est lu par votre programme. De même, lorsque votre programme modifie les valeurs d’une ou plusieurs propriétés d’un <xref:System.Printing.PrintQueue> de l’objet, la modification doit être écrite à l’utilitaire de file d’attente à l’impression réelle sur l’ordinateur. Cela avec la <xref:System.Printing.PrintQueue.Commit%2A> (méthode).  
  
> [!CAUTION]
>  Classes contenues dans le <xref:System.Printing> espace de noms ne sont pas pris en charge pour une utilisation dans un service de Windows ou application ASP.NET ou un service. Tente d’utiliser ces classes à partir d’un de ces types d’application peut générer des problèmes inattendus, tels que la diminution de service les exceptions de performances et d’exécution.  
  
 Si vous souhaitez imprimer à partir d’une application Windows Forms, consultez le <xref:System.Drawing.Printing> espace de noms.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Printing.PrintServer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Printing.PrintQueue" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="printServer">Serveur d'impression devant héberger la file d'attente à l'impression.</param>
        <param name="printQueueName">Nom de la file d'attente à l'impression.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Printing.PrintQueue" /> à l'aide du <see cref="T:System.Printing.PrintServer" />  et du nom de file d'attente spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> les constructeurs qui n’incluent pas un <xref:System.Printing.PrintSystemDesiredAccess> paramètre par défaut à <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> accès.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, int printSchemaVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, int32 printSchemaVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, int printSchemaVersion);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * int -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, printSchemaVersion)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="printSchemaVersion" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="printServer">Serveur d'impression qui héberge la file d'attente à l'impression.</param>
        <param name="printQueueName">Nom de la file d'attente à l'impression.</param>
        <param name="printSchemaVersion">Version du Schéma d'impression à utiliser.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Printing.PrintQueue" /> à l'aide du <see cref="T:System.Printing.PrintServer" />, du nom de la file d'attente et de la version du schéma d'impression spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> les constructeurs qui n’incluent pas un <xref:System.Printing.PrintSystemDesiredAccess> paramètre par défaut à <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> accès.  
  
 Le [schéma d’impression](http://go.microsoft.com/fwlink/?LinkId=186397) version publiée avec Windows Vista est « 1 ».  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintQueueIndexedProperty[] propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintQueueIndexedProperty[] propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintQueueIndexedProperty[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::Printing::PrintQueueIndexedProperty&gt; ^ propertyFilter);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * System.Printing.PrintQueueIndexedProperty[] -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, propertyFilter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.Printing.PrintQueueIndexedProperty[]" />
      </Parameters>
      <Docs>
        <param name="printServer">Serveur d'impression qui héberge la file d'attente à l'impression.</param>
        <param name="printQueueName">Nom de la file d'attente à l'impression.</param>
        <param name="propertyFilter">Tableau de valeurs <see cref="T:System.Printing.PrintQueueIndexedProperty" /> qui spécifie les valeurs des propriétés à initialiser.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Printing.PrintQueue" /> à l'aide du <see cref="T:System.Printing.PrintServer" />, du nom de la file d'attente et du tableau de valeurs <see cref="T:System.Printing.PrintQueueIndexedProperty" /> à initialiser spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> les constructeurs qui n’incluent pas un <xref:System.Printing.PrintSystemDesiredAccess> paramètre par défaut à <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> accès.  
  
 L’utilisation d’un constructeur avec le `propertyFilter` paramètre améliore les performances.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * System.Printing.PrintSystemDesiredAccess -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, desiredAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">Serveur d'impression qui héberge la file d'attente à l'impression.</param>
        <param name="printQueueName">Nom de la file d'attente à l'impression.</param>
        <param name="desiredAccess">L'une des valeurs <see cref="T:System.Printing.PrintSystemDesiredAccess" /> spécifiant le type d'accès à la file d'attente à l'impression dont votre programme a besoin.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Printing.PrintQueue" /> à l'aide du <see cref="T:System.Printing.PrintServer" />, du nom de file d'attente et de l'accès désiré spécifiés.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <paramref name="desiredAccess" /> est une valeur qui peut être appliquée uniquement à un objet <see cref="T:System.Printing.PrintServer" />, non pas à un objet <see cref="T:System.Printing.PrintQueue" />. Par exemple, <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::String ^&gt; ^ propertyFilter);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * string[] -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, propertyFilter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="printServer">Serveur d'impression qui héberge la file d'attente à l'impression.</param>
        <param name="printQueueName">Nom de la file d'attente à l'impression.</param>
        <param name="propertyFilter">Tableau des noms de propriétés à initialiser.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Printing.PrintQueue" /> à l'aide du <see cref="T:System.Printing.PrintServer" />, du nom de la file d'attente et du tableau de noms de propriétés à initialiser spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> les constructeurs qui n’incluent pas un <xref:System.Printing.PrintSystemDesiredAccess> paramètre par défaut à <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> accès.  
  
 L’utilisation d’un constructeur avec le `propertyFilter` paramètre améliore les performances.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, int printSchemaVersion, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, int32 printSchemaVersion, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Int32,System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, int printSchemaVersion, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * int * System.Printing.PrintSystemDesiredAccess -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, printSchemaVersion, desiredAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="printSchemaVersion" Type="System.Int32" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">Serveur d'impression qui héberge la file d'attente à l'impression.</param>
        <param name="printQueueName">Nom de la file d'attente à l'impression.</param>
        <param name="printSchemaVersion">Version du Schéma d'impression à utiliser.</param>
        <param name="desiredAccess">L'une des valeurs <see cref="T:System.Printing.PrintSystemDesiredAccess" /> spécifiant le type d'accès à la file d'attente à l'impression dont votre programme a besoin.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Printing.PrintQueue" /> à l'aide du <see cref="T:System.Printing.PrintServer" />, du nom de la file d'attente, de la version du schéma d'impression et de l'accès désiré spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le [schéma d’impression](http://go.microsoft.com/fwlink/?LinkId=186397) version publiée avec Windows Vista est « 1 ».  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <paramref name="desiredAccess" /> est une valeur qui peut être appliquée uniquement à un objet <see cref="T:System.Printing.PrintServer" />, non pas à un objet <see cref="T:System.Printing.PrintQueue" />. Par exemple, <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintQueueIndexedProperty[] propertyFilter, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintQueueIndexedProperty[] propertyFilter, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintQueueIndexedProperty[],System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::Printing::PrintQueueIndexedProperty&gt; ^ propertyFilter, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * System.Printing.PrintQueueIndexedProperty[] * System.Printing.PrintSystemDesiredAccess -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, propertyFilter, desiredAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.Printing.PrintQueueIndexedProperty[]" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">Serveur d'impression qui héberge la file d'attente à l'impression.</param>
        <param name="printQueueName">Nom de la file d'attente à l'impression.</param>
        <param name="propertyFilter">Tableau de valeurs <see cref="T:System.Printing.PrintQueueIndexedProperty" /> qui spécifie les propriétés à initialiser.</param>
        <param name="desiredAccess">L'une des valeurs <see cref="T:System.Printing.PrintSystemDesiredAccess" /> spécifiant le type d'accès à la file d'attente à l'impression dont votre programme a besoin.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Printing.PrintQueue" /> avec le <see cref="T:System.Printing.PrintServer" />, le nom de la file d'attente, le tableau de valeurs <see cref="T:System.Printing.PrintQueueIndexedProperty" /> à initialiser et l'accès désiré spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’utilisation d’un constructeur avec le `propertyFilter` paramètre améliore les performances.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <paramref name="desiredAccess" /> est une valeur qui peut être appliquée uniquement à un objet <see cref="T:System.Printing.PrintServer" />, non pas à un objet <see cref="T:System.Printing.PrintQueue" />. Par exemple, <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.String[],System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::String ^&gt; ^ propertyFilter, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * string[] * System.Printing.PrintSystemDesiredAccess -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, propertyFilter, desiredAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.String[]" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">Serveur d'impression qui héberge la file d'attente à l'impression.</param>
        <param name="printQueueName">Nom de la file d'attente à l'impression.</param>
        <param name="propertyFilter">Tableau des noms de propriétés à initialiser.</param>
        <param name="desiredAccess">L'une des valeurs <see cref="T:System.Printing.PrintSystemDesiredAccess" /> spécifiant le type d'accès à la file d'attente à l'impression dont votre programme a besoin.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Printing.PrintQueue" /> à l'aide du <see cref="T:System.Printing.PrintServer" />, du nom de la file d'attente, du filtre de propriétés, et de l'accès désiré spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’utilisation d’un constructeur avec le `propertyFilter` paramètre améliore les performances.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <paramref name="desiredAccess" /> est une valeur qui peut être appliquée uniquement à un objet <see cref="T:System.Printing.PrintServer" />, non pas à un objet <see cref="T:System.Printing.PrintQueue" />. Par exemple, <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddJob">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Insère un nouveau travail d'impression dans la file d'attente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À moins que la file d’attente est suspendu ou dans un état d’erreur, le travail imprime lorsqu’il atteint le haut de la file d’attente, c’est une fonction d’impression.  
  
 Autres manières d’imprimer dans [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] incluent le <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> (méthode), qui peut être utilisé avec ou sans ouvrir la boîte de dialogue et les nombreux <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> et <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> méthodes de la <xref:System.Windows.Xps.XpsDocumentWriter>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob" />
      <MemberSignature Language="VB.NET" Value="Public Function AddJob () As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob();" />
      <MemberSignature Language="F#" Value="member this.AddJob : unit -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.AddJob " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Insère, dans la file d'attente, un nouveau travail d'impression (appelé de façon générique) dont le contenu est un tableau <see cref="T:System.Byte" />.</summary>
        <returns>
          <see cref="T:System.Printing.PrintSystemJobInfo" /> représentant le travail d'impression et son état.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette méthode pour écrire des informations spécifiques d’appareil, dans un fichier d’attente, qui n’est pas inclus automatiquement par le [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] spouleur. Bien sûr, vous avez besoin de savoir si le fichier spouleur est [!INCLUDE[TLA#tla_emf](~/includes/tlasharptla-emf-md.md)] ou [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)]. Si vous préférez travailler avec le <xref:System.IO.Stream> [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)], vous pouvez utiliser la <xref:System.Printing.PrintQueueStream> classe au lieu de cette méthode.  
  
 Après le <xref:System.Printing.PrintQueue.AddJob%2A> méthode a été appelée, vous devez écrire un <xref:System.Byte> de tableau à la <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> propriété de la <xref:System.Printing.PrintSystemJobInfo> qui est retourné par <xref:System.Printing.PrintQueue.AddJob%2A> ou aucun travail d’impression n’est créé. Ce tableau est imprimé si l’imprimante fonctionne et qu’il n’est pas interrompue.  
  
> [!CAUTION]
>  Si le <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> n’est pas fermée avec <xref:System.IO.Stream.Close%2A> avant la fin du thread dans lequel <xref:System.Printing.PrintQueue.AddJob%2A> est appelée, puis un <xref:System.InvalidOperationException> est levée lorsque ce thread se termine parce que le thread de spouleur ne peut pas prendre le contrôle sur le <xref:System.IO.Stream> objet.  
  
 Dans la file d’attente à l’impression [!INCLUDE[TLA#tla_gui](~/includes/tlasharptla-gui-md.md)], le travail a le nom « Print System Document ». Pour donner un nom différent à la tâche, utilisez la <xref:System.Printing.PrintQueue.AddJob%28System.String%29> de surcharge.  
  
 Autres manières d’imprimer dans [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] incluent le <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> (méthode), qui peut être utilisé avec ou sans ouvrir la boîte de dialogue et les nombreux <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> et <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> méthodes de la <xref:System.Windows.Xps.XpsDocumentWriter>.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser <xref:System.Printing.PrintQueue.AddJob> pour envoyer un <xref:System.Byte> tableau à une file d’attente à l’impression. Ce code fonctionne uniquement avec les imprimantes qui peuvent détecter et imprimer du texte brut. Certaines d'entre elles ne peuvent pas.  
  
 [!code-csharp[WriteToSpoolFile#AddUnnamedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/WriteToSpoolFile/CSharp/Program.cs#addunnamedjob)]
 [!code-vb[WriteToSpoolFile#AddUnnamedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WriteToSpoolFile/visualbasic/program.vb#addunnamedjob)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddJob (jobName As String) As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName);" />
      <MemberSignature Language="F#" Value="member this.AddJob : string -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.AddJob jobName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="jobName">Nom du travail d'impression.</param>
        <summary>Insère un nouveau travail d'impression dont le contenu est un tableau <see cref="T:System.Byte" />, dans la file d'attente.</summary>
        <returns>
          <see cref="T:System.Printing.PrintSystemJobInfo" /> représentant le travail d'impression et son état.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette méthode pour écrire des informations spécifiques d’appareil, dans un fichier d’attente, qui n’est pas inclus automatiquement par le [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] spouleur. Bien sûr, vous avez besoin de savoir si le fichier spouleur est [!INCLUDE[TLA#tla_emf](~/includes/tlasharptla-emf-md.md)] ou [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)]. Si vous préférez travailler avec le <xref:System.IO.Stream> [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)], vous pouvez utiliser la <xref:System.Printing.PrintQueueStream> classe au lieu de cette méthode.  
  
 Après le <xref:System.Printing.PrintQueue.AddJob%2A> méthode a été appelée, vous devez écrire un <xref:System.Byte> de tableau à la <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> propriété de la <xref:System.Printing.PrintSystemJobInfo> qui est retourné par <xref:System.Printing.PrintQueue.AddJob%2A> ou aucun travail d’impression n’est créé. Ce tableau est imprimé si l’imprimante fonctionne et qu’il n’est pas interrompue.  
  
> [!CAUTION]
>  Si le <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> n’est pas fermée avec <xref:System.IO.Stream.Close%2A> avant la fin du thread dans lequel <xref:System.Printing.PrintQueue.AddJob%2A> est appelée, puis un <xref:System.InvalidOperationException> est levée lorsque ce thread se termine parce que le thread de spouleur ne peut pas prendre le contrôle sur le <xref:System.IO.Stream> objet.  
  
 Autres manières d’imprimer dans [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] incluent le <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> (méthode), qui peut être utilisé avec ou sans ouvrir la boîte de dialogue et les nombreux <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> et <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> méthodes de la <xref:System.Windows.Xps.XpsDocumentWriter>.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser <xref:System.Printing.PrintQueue.AddJob%28System.String%29> pour lire un fichier dans un <xref:System.Byte> de tableau et envoyer le tableau à une file d’attente à l’impression. Ce code suppose qu’il existe un fichier nommé test.txt dans la racine du lecteur C:. Ce code fonctionne uniquement avec les imprimantes qui peuvent détecter et imprimer du texte brut. Certaines d'entre elles ne peuvent pas.  
  
 [!code-csharp[WriteToSpoolFile#AddNamedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/WriteToSpoolFile/CSharp/Program.cs#addnamedjob)]
 [!code-vb[WriteToSpoolFile#AddNamedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WriteToSpoolFile/visualbasic/program.vb#addnamedjob)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName, System::Printing::PrintTicket ^ printTicket);" />
      <MemberSignature Language="F#" Value="member this.AddJob : string * System.Printing.PrintTicket -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.AddJob (jobName, printTicket)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="jobName">Chemin d'accès et nom du document en cours d'impression.</param>
        <param name="printTicket">Paramètres du travail d'impression.</param>
        <summary>Insère un nouveau travail d'impression d'un document [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] dans la file d'attente et lui affecte le nom et les paramètres spécifiés.</summary>
        <returns>
          <see cref="T:System.Printing.PrintSystemJobInfo" /> représentant le travail d'impression et son état.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d'informations, consultez <xref:System.Printing.PrintQueue.AddJob%28System.String%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, string documentPath, bool fastCopy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, string documentPath, bool fastCopy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddJob (jobName As String, documentPath As String, fastCopy As Boolean) As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName, System::String ^ documentPath, bool fastCopy);" />
      <MemberSignature Language="F#" Value="member this.AddJob : string * string * bool -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.AddJob (jobName, documentPath, fastCopy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
        <Parameter Name="documentPath" Type="System.String" />
        <Parameter Name="fastCopy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="jobName">Nom du travail d'impression.</param>
        <param name="documentPath">Chemin d'accès et nom du document en cours d'impression.</param>
        <param name="fastCopy">
          <see langword="true" /> pour mettre en attente rapidement sans commentaires de progression page par page et sans valider que le fichier est [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)] valide ; sinon, <see langword="false" />.</param>
        <summary>Insère dans la file d'attente un nouveau travail d'impression pour un document [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)], lui donne le nom spécifié et spécifie s'il doit être ou non validé.</summary>
        <returns>
          <see cref="T:System.Printing.PrintSystemJobInfo" /> représentant le travail d'impression et son état.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `fastCopy` est `true`, l’imprimante doit être un [vue d’ensemble de l’impression](~/docs/framework/wpf/advanced/printing-overview.md). Le cas contraire, le <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> méthode lève une exception.  
  
 Si `fastCopy` est `false`, il n’est pas nécessaire d’utiliser une imprimante XPSDrv. Le [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)] fichier ajouté à la file d’attente est converti en langage de description de page de l’imprimante, tel que PCL ou Postscript. Toutefois, ce type d’impression effectue un appel à [!INCLUDE[TLA#tla_com](~/includes/tlasharptla-com-md.md)]. L’appel à [!INCLUDE[TLA2#tla_com](~/includes/tla2sharptla-com-md.md)] nécessite que le thread appelant a un thread unique cloisonné (<xref:System.Threading.ApartmentState.STA>) au lieu d’un multithread cloisonné (<xref:System.Threading.ApartmentState.MTA>) qui est la valeur par défaut dans [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] 2.0 et versions ultérieures. (Pour plus d’informations sur les États de cloisonnement et de threading, consultez [Threading managé et non managé](http://msdn.microsoft.com/library/db425c20-4b2f-4433-bf96-76071c7881e5), et <xref:System.Threading.ApartmentState>.) Il existe deux façons de procéder :  
  
-   La façon la plus simple consiste à ajouter le <xref:System.STAThreadAttribute> (autrement dit, «`[System.STAThreadAttribute()]`») juste au-dessus de la première ligne de l’application `Main` (méthode) (généralement «`static void Main(string[] args)`»).  
  
-   Si vous avez besoin de votre `Main` état de cloisonnement du thread pour être <xref:System.Threading.ApartmentState.MTA>, vous pouvez héberger l’appel à <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> dans un thread distinct dont l’état de cloisonnement est défini à <xref:System.Threading.ApartmentState.STA> avec <xref:System.Threading.Thread.SetApartmentState%2A>. L’exemple ci-dessous illustre cette deuxième technique.  
  
> [!NOTE]
>  Vous ne pouvez pas appliquer le <xref:System.STAThreadAttribute> à toute méthode sauf `Main` et vous ne pouvez pas utiliser <xref:System.Threading.Thread.SetApartmentState%2A> pour le `Main` thread.  
  
 Autres manières d’imprimer dans [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] incluent le <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> (méthode), qui peut être utilisé avec ou sans ouvrir la boîte de dialogue et les nombreux <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> et <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> méthodes de la <xref:System.Windows.Xps.XpsDocumentWriter>.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> à imprimer en lot tous les [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] fichiers dans un répertoire.  
  
 [!code-csharp[BatchPrintXPSFiles#BatchPrintXPSFiles](~/samples/snippets/csharp/VS_Snippets_Wpf/BatchPrintXPSFiles/CSharp/Program.cs#batchprintxpsfiles)]
 [!code-vb[BatchPrintXPSFiles#BatchPrintXPSFiles](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BatchPrintXPSFiles/visualbasic/program.vb#batchprintxpsfiles)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.ApartmentState" />
        <altmember cref="T:System.STAThreadAttribute" />
        <related type="Article" href="http://msdn.microsoft.com/library/e78b14f1-e487-43cd-9c6d-1a07483f1730">Exposition de composants COM au .NET Framework</related>
        <related type="Article" href="http://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">isXPS Conformance Tool</related>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, string documentPath, bool fastCopy, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, string documentPath, bool fastCopy, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.String,System.Boolean,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName, System::String ^ documentPath, bool fastCopy, System::Printing::PrintTicket ^ printTicket);" />
      <MemberSignature Language="F#" Value="member this.AddJob : string * string * bool * System.Printing.PrintTicket -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.AddJob (jobName, documentPath, fastCopy, printTicket)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
        <Parameter Name="documentPath" Type="System.String" />
        <Parameter Name="fastCopy" Type="System.Boolean" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="jobName">Chemin d'accès et nom du document en cours d'impression.</param>
        <param name="documentPath">Chemin d'accès et nom du document en cours d'impression.</param>
        <param name="fastCopy">
          <see langword="true" /> pour mettre en attente rapidement sans commentaires de progression page par page et sans valider que le fichier est [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)] valide ; sinon, <see langword="false" />.</param>
        <param name="printTicket">Paramètres du travail d'impression.</param>
        <summary>Insère dans la file d'attente un nouveau travail d'impression pour un document [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)], lui donne le nom et les paramètres spécifiés et spécifie s'il doit être ou non validé.</summary>
        <returns>
          <see cref="T:System.Printing.PrintSystemJobInfo" /> représentant le travail d'impression et son état.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d'informations, consultez <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AveragePagesPerMinute">
      <MemberSignature Language="C#" Value="public virtual int AveragePagesPerMinute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AveragePagesPerMinute" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.AveragePagesPerMinute" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AveragePagesPerMinute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int AveragePagesPerMinute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AveragePagesPerMinute : int" Usage="System.Printing.PrintQueue.AveragePagesPerMinute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la vitesse de l'imprimante mesurée en pages par minute.</summary>
        <value>Moyenne du nombre de pages imprimées par minute par l'imprimante.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientPrintSchemaVersion">
      <MemberSignature Language="C#" Value="public int ClientPrintSchemaVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ClientPrintSchemaVersion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ClientPrintSchemaVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientPrintSchemaVersion As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ClientPrintSchemaVersion { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientPrintSchemaVersion : int" Usage="System.Printing.PrintQueue.ClientPrintSchemaVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la version du <see href="https://docs.microsoft.com/windows/desktop/printdocs/printschema">schéma d’impression</see>.</summary>
        <value>La version de la [schéma d’impression](http://go.microsoft.com/fwlink/?LinkId=186397) en cours d’utilisation.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le [schéma d’impression](http://go.microsoft.com/fwlink/?LinkId=186397) version publiée avec Windows Vista est 1.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="http://go.microsoft.com/fwlink/?LinkId=186397">Schéma d’impression</related>
      </Docs>
    </Member>
    <Member MemberName="Comment">
      <MemberSignature Language="C#" Value="public virtual string Comment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Comment" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Comment" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Comment As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Comment { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Comment : string with get, set" Usage="System.Printing.PrintQueue.Comment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un commentaire relatif à l'imprimante.</summary>
        <value>Commentaire relatif à l'imprimante.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le commentaire est visible par les utilisateurs dans la liste d’imprimante de Windows et sur la boîte de dialogue d’impression commune de Windows. Il peut fournir des informations non contenues dans le nom de l’imprimante, le modèle ou propriétés de l’emplacement, qui sont également visibles dans les mêmes emplacements ; par exemple, « réservé paie Dept entre 15 h et 16 h 00. » (Le <xref:System.Printing.PrintQueue.Description%2A> propriété vous permet de stocker des informations que les utilisateurs ne peuvent pas afficher, sauf si votre application rend visible.)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Commit();" />
      <MemberSignature Language="F#" Value="override this.Commit : unit -&gt; unit" Usage="printQueue.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Écrit les propriétés actuelles de l'objet <see cref="T:System.Printing.PrintQueue" /> dans la file d'attente sur le serveur d'impression.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les modifications apportées par votre programme pour les propriétés d’un <xref:System.Printing.PrintQueue> objet ne pas réellement en vigueur jusqu'à ce que le programme exécute le <xref:System.Printing.PrintQueue.Commit%2A> (méthode).  
  
 La méthode exige que le <xref:System.Printing.PrintQueue> objet créé avec <xref:System.Printing.PrintSystemDesiredAccess.AdministratePrinter> droits.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette méthode lors de la fusion de deux tickets d’impression.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">Impossible de valider certaines propriétés.</exception>
        <exception cref="T:System.Printing.PrintCommitAttributesException">Impossible de valider certaines propriétés.  
  
\- ou - 
L'objet <see cref="T:System.Printing.PrintQueue" /> n'a pas été créé avec des droits suffisants.</exception>
        <altmember cref="M:System.Printing.PrintQueue.Refresh" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateXpsDocumentWriter">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Elle crée un objet <see cref="T:System.Windows.Xps.XpsDocumentWriter" />.</summary>
        <related type="Article" href="http://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">isXPS Conformance Tool</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref System.Printing.PrintDocumentImageableArea documentImageableArea);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintDocumentImageableArea@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (ByRef documentImageableArea As PrintDocumentImageableArea) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::Printing::PrintDocumentImageableArea ^ % documentImageableArea);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter :  -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter documentImageableArea" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="documentImageableArea">Référence à un objet qui contient les dimensions de la surface de la page sur laquelle le périphérique peut procéder à l'impression. Étant donné que son type de données ne dispose d'aucun constructeur public, ce paramètre est passé sans être initialisé.</param>
        <summary>Crée un objet <see cref="T:System.Windows.Xps.XpsDocumentWriter" />, ouvre une boîte de dialogue d'impression commune de Windows et retourne un paramètre <see langword="ref" /> (<see langword="ByRef" /> dans Visual Basic) qui représente des informations sur la zone imageable et les dimensions du média.</summary>
        <returns>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> qui écrit les données XPS dans un flux. Il peut s’agir de <see langword="null" />. (Le paramètre <paramref name="documentImageableArea" /> est un paramètre <see langword="ref" /> [<see langword="ByRef" /> dans Visual Basic] qui est initialisé par la méthode ; il représente par conséquent un second élément retourné.)</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De nombreuses imprimantes requièrent jusqu'à un quart de pouce d’espace non imprimée autour des bords de chaque page pour saisir le papier et le déplacer dans l’imprimante. Sinon le toner serait mauvais le mécanisme de flux de papier. La zone qui peut être imprimée est la « zone imageable ».  
  
 Le type <xref:System.Printing.PrintDocumentImageableArea> n’a aucun constructeur public. Par conséquent, la variable `documentImageableArea` doit être déclaré et affecté à `null` puis passée à la méthode. Cette méthode affiche une <xref:System.Windows.Controls.PrintDialog> exigeant une saisie de l’utilisateur. Une fois que l’utilisateur a sélectionné une imprimante, le format du papier et l’orientation et fermé la boîte de dialogue, `documentImageableArea` pointe vers un objet réel et ses propriétés sont initialisées.  
  
 Si l’utilisateur annule ou ferme la boîte de dialogue, la valeur de retour est `null`. Par conséquent, la valeur de retour doit être vérifiée par `null` par votre application.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">isXPS Conformance Tool</related>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (System.Printing.PrintQueue printQueue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintQueue printQueue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintQueue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::Printing::PrintQueue ^ printQueue);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter : System.Printing.PrintQueue -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter printQueue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printQueue" Type="System.Printing.PrintQueue" />
      </Parameters>
      <Docs>
        <param name="printQueue">File d'attente à l'impression devant imprimer le document XPS.</param>
        <summary>Crée un objet <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> et l'associe à la file d'attente à l'impression spécifiée.</summary>
        <returns>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> qui écrit dans un flux de données XPS.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment utiliser cette méthode pour créer un <xref:System.Windows.Xps.XpsDocumentWriter>.  
  
 [!code-csharp[XpsPrint#PrintQueueSnip](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsPrint/CSharp/XpsPrintHelper.cs#printqueuesnip)]
 [!code-vb[XpsPrint#PrintQueueSnip](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsPrint/visualbasic/xpsprinthelper.vb#printqueuesnip)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">isXPS Conformance Tool</related>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref double width, ref double height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(float64&amp; width, float64&amp; height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Double@,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (ByRef width As Double, ByRef height As Double) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(double % width, double % height);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter :  *  -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Double" RefType="ref" />
        <Parameter Name="height" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="width">Largeur du document XPS.</param>
        <param name="height">Hauteur du document XPS.</param>
        <summary>Crée un objet <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> avec les dimensions spécifiées.</summary>
        <returns>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> qui écrit dans un flux de données XPS. Il peut s’agir de <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode affiche une <xref:System.Windows.Controls.PrintDialog> exigeant une saisie de l’utilisateur. Si l’utilisateur annule ou ferme la boîte de dialogue, la valeur de retour est `null`. Par conséquent, la valeur de retour doit être vérifiée par `null` par votre application.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">isXPS Conformance Tool</related>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (string jobDescription, ref System.Printing.PrintDocumentImageableArea documentImageableArea);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(string jobDescription, class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.String,System.Printing.PrintDocumentImageableArea@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (jobDescription As String, ByRef documentImageableArea As PrintDocumentImageableArea) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::String ^ jobDescription, System::Printing::PrintDocumentImageableArea ^ % documentImageableArea);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter : string *  -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter (jobDescription, documentImageableArea)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobDescription" Type="System.String" />
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="jobDescription">Nom du travail d'impression. Apparaît dans l'interface utilisateur d'impression Windows.</param>
        <param name="documentImageableArea">Référence à un objet qui contient les dimensions de la surface de la page sur laquelle le périphérique peut procéder à l'impression. Étant donné que son type de données ne dispose d'aucun constructeur public, ce paramètre est passé sans être initialisé.</param>
        <summary>Crée un objet <see cref="T:System.Windows.Xps.XpsDocumentWriter" />, ouvre une boîte de dialogue d'impression commune de Windows (et lui fournit une description du travail) et retourne un paramètre <see langword="ref" /> (<see langword="ByRef" /> dans Visual Basic) qui représente des informations sur la zone imageable et les dimensions du média.</summary>
        <returns>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> qui écrit les données XPS dans un flux. Il peut s’agir de <see langword="null" />. (Le paramètre <paramref name="documentImageableArea" /> est un paramètre <see langword="ref" /> [<see langword="ByRef" /> dans Visual Basic] qui est initialisé par la méthode ; il représente par conséquent un second élément retourné.)</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De nombreuses imprimantes requièrent jusqu'à un quart de pouce d’espace non imprimée autour des bords de chaque page pour saisir le papier et le déplacer dans l’imprimante. Sinon le toner serait mauvais le mécanisme de flux de papier. La zone qui peut être imprimée est la « zone imageable ».  
  
 Le type <xref:System.Printing.PrintDocumentImageableArea> n’a aucun constructeur public. Par conséquent, la variable `documentImageableArea` doit être déclaré et affecté à `null` puis passée à la méthode. Cette méthode affiche une <xref:System.Windows.Controls.PrintDialog> exigeant une saisie de l’utilisateur. Une fois que l’utilisateur a sélectionné une imprimante, le format du papier et l’orientation et fermé la boîte de dialogue, `documentImageableArea` pointe vers un objet réel et ses propriétés sont initialisées.  
  
 Si l’utilisateur annule ou ferme la boîte de dialogue, la valeur de retour est `null`. Par conséquent, la valeur de retour doit être vérifiée par `null` par votre application.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">isXPS Conformance Tool</related>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref System.Printing.PrintDocumentImageableArea documentImageableArea, ref System.Windows.Controls.PageRangeSelection pageRangeSelection, ref System.Windows.Controls.PageRange pageRange);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea, valuetype System.Windows.Controls.PageRangeSelection&amp; pageRangeSelection, valuetype System.Windows.Controls.PageRange&amp; pageRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintDocumentImageableArea@,System.Windows.Controls.PageRangeSelection@,System.Windows.Controls.PageRange@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (ByRef documentImageableArea As PrintDocumentImageableArea, ByRef pageRangeSelection As PageRangeSelection, ByRef pageRange As PageRange) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::Printing::PrintDocumentImageableArea ^ % documentImageableArea, System::Windows::Controls::PageRangeSelection % pageRangeSelection, System::Windows::Controls::PageRange % pageRange);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter :  *  *  -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter (documentImageableArea, pageRangeSelection, pageRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea" RefType="ref" />
        <Parameter Name="pageRangeSelection" Type="System.Windows.Controls.PageRangeSelection" RefType="ref" />
        <Parameter Name="pageRange" Type="System.Windows.Controls.PageRange" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="documentImageableArea">Référence à un objet qui contient les dimensions de la surface de la page sur laquelle le périphérique peut procéder à l'impression. Étant donné que son type de données ne dispose d'aucun constructeur public, ce paramètre est passé sans être initialisé.</param>
        <param name="pageRangeSelection">Valeur qui spécifie s'il faut imprimer toutes les pages ou uniquement une étendue de pages spécifiée par l'utilisateur.</param>
        <param name="pageRange">Étendue des pages en cours d'impression.</param>
        <summary>Crée un objet <see cref="T:System.Windows.Xps.XpsDocumentWriter" />, ouvre une boîte de dialogue d'impression commune de Windows, lui fournit l'étendue de pages et la description du travail d'impression, et retourne un paramètre <see langword="ref" /> (<see langword="ByRef" /> dans Visual Basic) qui représente des informations sur la zone imageable et les dimensions du média.</summary>
        <returns>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> qui écrit les données XPS dans un flux. Il peut s’agir de <see langword="null" />. (Les paramètres <paramref name="documentImageableArea" />, <paramref name="pageRangeSelection" /> et <paramref name="pageRange" /> sont tous des paramètres <see langword="ref" /> [<see langword="ByRef" /> dans Visual Basic] initialisés par l'utilisateur et retournés à la fermeture de la boîte de dialogue, ainsi chaque paramètre représente un élément retourné supplémentaire.)</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De nombreuses imprimantes requièrent jusqu'à un quart de pouce d’espace non imprimée autour des bords de chaque page pour saisir le papier et le déplacer dans l’imprimante. Sinon le toner serait mauvais le mécanisme de flux de papier. La zone qui peut être imprimée est la « zone imageable ».  
  
 Le type <xref:System.Printing.PrintDocumentImageableArea> n’a aucun constructeur public. Par conséquent, la variable `documentImageableArea` doit être déclaré et affecté à `null` puis passée à la méthode. Cette méthode affiche une <xref:System.Windows.Controls.PrintDialog> exigeant une saisie de l’utilisateur. L’utilisateur configure son travail d’impression dans la boîte de dialogue (y compris la sélection d’une imprimante, de papier, l’orientation et plage de pages). Lorsque la boîte de dialogue est fermée, `pageRangeSelection` et `pageRange` ont des valeurs, et `documentImageableArea` pointe vers un objet réel dont les propriétés sont initialisées.  
  
 Si l’utilisateur annule ou ferme la boîte de dialogue, la valeur de retour est `null`. Par conséquent, la valeur de retour doit être vérifiée par `null` par votre application.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">isXPS Conformance Tool</related>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (string jobDescription, ref System.Printing.PrintDocumentImageableArea documentImageableArea, ref System.Windows.Controls.PageRangeSelection pageRangeSelection, ref System.Windows.Controls.PageRange pageRange);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(string jobDescription, class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea, valuetype System.Windows.Controls.PageRangeSelection&amp; pageRangeSelection, valuetype System.Windows.Controls.PageRange&amp; pageRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.String,System.Printing.PrintDocumentImageableArea@,System.Windows.Controls.PageRangeSelection@,System.Windows.Controls.PageRange@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (jobDescription As String, ByRef documentImageableArea As PrintDocumentImageableArea, ByRef pageRangeSelection As PageRangeSelection, ByRef pageRange As PageRange) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::String ^ jobDescription, System::Printing::PrintDocumentImageableArea ^ % documentImageableArea, System::Windows::Controls::PageRangeSelection % pageRangeSelection, System::Windows::Controls::PageRange % pageRange);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter : string *  *  *  -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter (jobDescription, documentImageableArea, pageRangeSelection, pageRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobDescription" Type="System.String" />
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea" RefType="ref" />
        <Parameter Name="pageRangeSelection" Type="System.Windows.Controls.PageRangeSelection" RefType="ref" />
        <Parameter Name="pageRange" Type="System.Windows.Controls.PageRange" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="jobDescription">Nom du travail d'impression. Apparaît dans l'interface utilisateur d'impression Windows.</param>
        <param name="documentImageableArea">Référence à un objet qui contient les dimensions de la surface de la page sur laquelle le périphérique peut procéder à l'impression. Étant donné que son type de données ne dispose d'aucun constructeur public, ce paramètre est passé sans être initialisé.</param>
        <param name="pageRangeSelection">Valeur qui spécifie s'il faut imprimer toutes les pages ou uniquement une étendue de pages spécifiée par l'utilisateur.</param>
        <param name="pageRange">Étendue des pages en cours d'impression.</param>
        <summary>Crée un objet <see cref="T:System.Windows.Xps.XpsDocumentWriter" />, ouvre une boîte de dialogue d'impression commune de Windows, lui fournit une étendue de pages, et retourne un paramètre <see langword="ref" /> (<see langword="ByRef" /> dans Visual Basic) qui représente des informations sur la zone imageable et les dimensions du média.</summary>
        <returns>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> qui écrit les données XPS dans un flux. Il peut s’agir de <see langword="null" />. (Les paramètres <paramref name="documentImageableArea" />, <paramref name="pageRangeSelection" /> et <paramref name="pageRange" /> sont tous des paramètres <see langword="ref" /> [<see langword="ByRef" /> dans Visual Basic] initialisés par l'utilisateur et retournés à la fermeture de la boîte de dialogue, ainsi chaque paramètre représente un élément retourné supplémentaire.)</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De nombreuses imprimantes requièrent jusqu'à un quart de pouce d’espace non imprimée autour des bords de chaque page pour saisir le papier et le déplacer dans l’imprimante. Sinon le toner serait mauvais le mécanisme de flux de papier. La zone qui peut être imprimée est la « zone imageable ».  
  
 Le type <xref:System.Printing.PrintDocumentImageableArea> n’a aucun constructeur public. Par conséquent, la variable `documentImageableArea` doit être déclaré et affecté à `null` puis passée à la méthode. Cette méthode affiche une <xref:System.Windows.Controls.PrintDialog> exigeant une saisie de l’utilisateur. L’utilisateur configure son travail d’impression dans la boîte de dialogue (y compris la sélection d’une imprimante, de papier, l’orientation et plage de pages). Lorsque la boîte de dialogue est fermée, `pageRangeSelection` et `pageRange` ont des valeurs, et `documentImageableArea` pointe vers un objet réel dont les propriétés sont initialisées.  
  
 Si l’utilisateur annule ou ferme la boîte de dialogue, la valeur de retour est `null`. Par conséquent, la valeur de retour doit être vérifiée par `null` par votre application.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">isXPS Conformance Tool</related>
      </Docs>
    </Member>
    <Member MemberName="CurrentJobSettings">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobSettings CurrentJobSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintJobSettings CurrentJobSettings" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.CurrentJobSettings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentJobSettings As PrintJobSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintJobSettings ^ CurrentJobSettings { System::Printing::PrintJobSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentJobSettings : System.Printing.PrintJobSettings" Usage="System.Printing.PrintQueue.CurrentJobSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet qui contient les paramètres de configuration pour le travail d'impression en cours.</summary>
        <value>Valeur <see cref="T:System.Printing.PrintJobSettings" /> qui maintient les paramètres du travail d'impression en cours. Ces paramètres incluent une description du travail et une référence au <see cref="T:System.Printing.PrintTicket" />du travail.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Printing.PrintTicket" />
      </Docs>
    </Member>
    <Member MemberName="DefaultPrintTicket">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintTicket DefaultPrintTicket { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintTicket DefaultPrintTicket" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.DefaultPrintTicket" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DefaultPrintTicket As PrintTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintTicket ^ DefaultPrintTicket { System::Printing::PrintTicket ^ get(); void set(System::Printing::PrintTicket ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultPrintTicket : System.Printing.PrintTicket with get, set" Usage="System.Printing.PrintQueue.DefaultPrintTicket" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintTicket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit les options par défaut de l'imprimante associées avec ce <see cref="T:System.Printing.PrintQueue" />.</summary>
        <value>
          <see cref="T:System.Printing.PrintTicket" /> par défaut pour la file d'attente à l'impression ; ou <see langword="null" /> si une erreur s'est produite dans la file d'attente à l'impression.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur par défaut <xref:System.Printing.PrintTicket> spécifie les options de travail d’impression tel que <xref:System.Printing.PrintTicket.CopyCount%2A>, <xref:System.Printing.PrintTicket.PageOrientation%2A>, <xref:System.Printing.PrintTicket.Duplexing%2A>, <xref:System.Printing.PrintTicket.Stapling%2A>et d’autres.  
  
 Chaque <xref:System.Printing.PrintQueue> conserve son propre <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A>.  
  
 En fonctionnement normal du <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> propriété retourne un <xref:System.Printing.PrintTicket>.  Si le <xref:System.Printing.PrintQueue> détecte un état non valide, <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> retourne `null`.  Si <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> retourne `null`, l’application doit afficher une boîte de dialogue d’information utilisateur une erreur s’est produite sur cette file d’attente à l’impression, et que le travail d’impression doit être redémarré avec la sortie dirigée vers une autre file d’impression.  
  
 Obtenir ou définir le <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> propriété ne valide pas le <xref:System.Printing.PrintTicket>.  Le <xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A> méthode peut être utilisée pour valider un <xref:System.Printing.PrintTicket>.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété quand vous testez les fonctionnalités d’une imprimante et configuration d’un travail d’impression pour tirer parti d’eux.  
  
 [!code-cpp[XpsCreate#PrinterCapabilities](~/samples/snippets/cpp/VS_Snippets_Wpf/XpsCreate/CPP/XpsCreate.cpp#printercapabilities)]
 [!code-csharp[XpsCreate#PrinterCapabilities](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsCreate/CSharp/XpsCreate.cs#printercapabilities)]
 [!code-vb[XpsCreate#PrinterCapabilities](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsCreate/visualbasic/xpscreate.vb#printercapabilities)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintQueue.UserPrintTicket" />
        <altmember cref="P:System.Printing.PrintQueue.DefaultPriority" />
      </Docs>
    </Member>
    <Member MemberName="DefaultPriority">
      <MemberSignature Language="C#" Value="public virtual int DefaultPriority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DefaultPriority" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.DefaultPriority" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DefaultPriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int DefaultPriority { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultPriority : int with get, set" Usage="System.Printing.PrintQueue.DefaultPriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la priorité par défaut attribuée à chaque nouveau travail d'impression ajouté à la file d'attente.</summary>
        <value>Priorité par défaut pour les travaux d'impression ajoutés à la file d'attente. L'étendue de valeurs possibles va de 1 à 99. La valeur par défaut est 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Priorité d’un travail d’impression peut être modifiée par les utilisateurs une fois celle-ci entre dans la file d’attente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public virtual string Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Description" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Description { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Description : string" Usage="System.Printing.PrintQueue.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une description de la file d'attente à l'impression.</summary>
        <value>Description de la file d'attente à l'impression.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque la file d’attente est créée, la description par défaut est une chaîne de trois parties comprenant le nom de la file d’attente, le modèle et l’emplacement séparées par des virgules. Contraste le <xref:System.Printing.PrintQueue.Description%2A> propriété avec le <xref:System.Printing.PrintQueue.Comment%2A> propriété qui est visible aux utilisateurs dans la boîte de dialogue d’impression commune et la liste des imprimantes et télécopieurs.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.FullName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Printing.PrintQueue.FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom complet de la file d'attente.</summary>
        <value>Nom complet de la file d'attente à l'impression.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour les files d’attente sur le serveur d’impression local, la valeur de cette propriété est identique à <xref:System.Printing.PrintQueue.Name%2A>, sinon, elle inclut le nom complet UNC (Universal Naming Convention).  
  
 Le <xref:System.Printing.PrintQueue> objet a également accessible en écriture <xref:System.Printing.PrintQueue.Name%2A> et <xref:System.Printing.PrintQueue.ShareName%2A> propriétés.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété lors de la fusion de deux tickets d’impression.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo GetJob (int jobId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo GetJob(int32 jobId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetJob(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetJob (jobId As Integer) As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ GetJob(int jobId);" />
      <MemberSignature Language="F#" Value="member this.GetJob : int -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.GetJob jobId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="jobId">Numéro du travail dans la file d'attente.</param>
        <summary>Obtient le travail d'impression avec le numéro d'identification spécifié.</summary>
        <returns>
          <see cref="T:System.Printing.PrintSystemJobInfo" /> qui spécifie les propriétés du travail et son état.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez également utiliser le <xref:System.Printing.PrintSystemJobInfo.Get%2A?displayProperty=nameWithType> méthode dans le même but.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette méthode pour diagnostiquer un problème avec un travail d’impression.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Get(System.Printing.PrintQueue,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPrintCapabilities">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.Printing.PrintCapabilities" /> qui identifie les fonctionnalités de l'imprimante ou du périphérique, telles que l'impression en couleur ou la fonction d'impression recto-verso.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPrintCapabilities">
      <MemberSignature Language="C#" Value="public System.Printing.PrintCapabilities GetPrintCapabilities ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintCapabilities GetPrintCapabilities() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilities" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrintCapabilities () As PrintCapabilities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintCapabilities ^ GetPrintCapabilities();" />
      <MemberSignature Language="F#" Value="member this.GetPrintCapabilities : unit -&gt; System.Printing.PrintCapabilities" Usage="printQueue.GetPrintCapabilities " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintCapabilities</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient un objet <see cref="T:System.Printing.PrintCapabilities" /> qui identifie les fonctionnalités de l'imprimante.</summary>
        <returns>Objet <see cref="T:System.Printing.PrintCapabilities" /> qui spécifie ce que l'imprimante peut et ne peut pas faire, tel que la copie recto-verso ou l'agrafage automatique.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment utiliser cette méthode lors de la fusion de deux tickets d’impression.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">Un objet <see cref="T:System.Printing.PrintCapabilities" /> n'a pas pu être récupéré.</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">pour l’autorisation obtenir des fonctionnalités de l’imprimante. Énumération associée : <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintCapabilities">
      <MemberSignature Language="C#" Value="public System.Printing.PrintCapabilities GetPrintCapabilities (System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintCapabilities GetPrintCapabilities(class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilities(System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintCapabilities ^ GetPrintCapabilities(System::Printing::PrintTicket ^ printTicket);" />
      <MemberSignature Language="F#" Value="member this.GetPrintCapabilities : System.Printing.PrintTicket -&gt; System.Printing.PrintCapabilities" Usage="printQueue.GetPrintCapabilities printTicket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintCapabilities</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="printTicket">Ticket d'impression qui fournit la base sur laquelle les fonctionnalités de l'imprimante sont signalées.</param>
        <summary>Obtient un objet <see cref="T:System.Printing.PrintCapabilities" /> qui identifie les fonctionnalités de l'imprimante.</summary>
        <returns>Objet <see cref="T:System.Printing.PrintCapabilities" /> qui spécifie ce que l'imprimante peut et ne peut pas faire, tel que la copie recto-verso ou l'agrafage automatique.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Printing.PrintTicket> paramètre est utilisé comme base sur lequel construire le <xref:System.Printing.PrintCapabilities> objet. Par exemple, supposons que l’imprimante pris en charge uniquement les types de média A et B à partir d’un bac d’entrée 1 et seulement le type de média C à partir d’un bac d’entrée 2. Si le `printTicket` paramètre spécifie le bac d’entrée 1, puis le <xref:System.Printing.PrintCapabilities> objet renvoyé inclut tous les trois types de média, mais signale les types C en tant que « limité ». Si le `printTicket` paramètre spécifie le bac d’entrée 2, puis le <xref:System.Printing.PrintCapabilities> objet renvoyé inclut tous les trois types de média, mais signale les types A et B comme « limité ». Consultez le [schéma d’impression](http://go.microsoft.com/fwlink/?LinkId=186397) pour plus d’informations sur les contraintes.  
  
 Si `printTicket` est `null`, le <xref:System.Printing.PrintQueue.UserPrintTicket%2A> est utilisé.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">Un objet <see cref="T:System.Printing.PrintCapabilities" /> n'a pas pu être récupéré.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="printTicket" /> n'est pas de forme correcte.</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">pour l’autorisation obtenir des fonctionnalités de l’imprimante. Énumération associée : <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPrintCapabilitiesAsXml">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.IO.MemoryStream" /> qui spécifie les fonctionnalités de l’imprimante sous la forme d’un flux XML conforme au [schéma d’impression](http://go.microsoft.com/fwlink/?LinkId=186397).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le schéma XML utilisé est appelé « PrintCapabilities », une partie de la [schéma d’impression](http://go.microsoft.com/fwlink/?LinkId=186397) système.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPrintCapabilitiesAsXml">
      <MemberSignature Language="C#" Value="public System.IO.MemoryStream GetPrintCapabilitiesAsXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.MemoryStream GetPrintCapabilitiesAsXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilitiesAsXml" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrintCapabilitiesAsXml () As MemoryStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::MemoryStream ^ GetPrintCapabilitiesAsXml();" />
      <MemberSignature Language="F#" Value="member this.GetPrintCapabilitiesAsXml : unit -&gt; System.IO.MemoryStream" Usage="printQueue.GetPrintCapabilitiesAsXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.MemoryStream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient un objet <see cref="T:System.IO.MemoryStream" /> qui spécifie les fonctionnalités de l’imprimante sous la forme d’un flux XML conforme au [schéma d’impression](http://go.microsoft.com/fwlink/?LinkId=186397).</summary>
        <returns>
          <see cref="T:System.IO.MemoryStream" /> qui spécifie les fonctionnalités de l’imprimante à l’aide du schéma XML "PrintCapabilities", une partie du système de <see href="https://docs.microsoft.com/windows/desktop/printdocs/printschema">schéma d’impression</see>.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintQueueException">Impossible de récupérer les fonctionnalités de l'imprimante.</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">pour l’autorisation obtenir des fonctionnalités de l’imprimante. Énumération associée : <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintCapabilitiesAsXml">
      <MemberSignature Language="C#" Value="public System.IO.MemoryStream GetPrintCapabilitiesAsXml (System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.MemoryStream GetPrintCapabilitiesAsXml(class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilitiesAsXml(System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::MemoryStream ^ GetPrintCapabilitiesAsXml(System::Printing::PrintTicket ^ printTicket);" />
      <MemberSignature Language="F#" Value="member this.GetPrintCapabilitiesAsXml : System.Printing.PrintTicket -&gt; System.IO.MemoryStream" Usage="printQueue.GetPrintCapabilitiesAsXml printTicket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.MemoryStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="printTicket">Ticket d'impression qui fournit la base sur laquelle les fonctionnalités de l'imprimante sont signalées.</param>
        <summary>Obtient un objet <see cref="T:System.IO.MemoryStream" /> qui spécifie les fonctionnalités de l’imprimante au format XML conforme au [schéma d’impression](http://go.microsoft.com/fwlink/?LinkId=186397).</summary>
        <returns>
          <see cref="T:System.IO.MemoryStream" /> qui spécifie les fonctionnalités de l’imprimante à l’aide du schéma XML "PrintCapabilities", une partie du système de <see href="https://docs.microsoft.com/windows/desktop/printdocs/printschema">schéma d’impression</see>.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Printing.PrintTicket> paramètre est utilisé comme base sur lequel construire les fonctionnalités XML de l’imprimante. Par exemple, supposons que l’imprimante pris en charge uniquement les types de média A et B à partir d’un bac d’entrée 1 et seulement le type de média C à partir d’un bac d’entrée 2. Si le `printTicket` paramètre spécifie le bac d’entrée 1, puis les fonctionnalités d’impression XML qui est retournée inclut tous les trois types de média, mais signale les types C en tant que « limité ». Si le `printTicket` paramètre spécifie le bac d’entrée 2, puis les fonctionnalités d’impression XML qui est retournée inclut tous les trois types de média, mais signale les types A et B comme « limité ». Consultez le [schéma d’impression](http://go.microsoft.com/fwlink/?LinkId=186397) pour plus d’informations sur les contraintes.  
  
 Si `printTicket` est `null`, le <xref:System.Printing.PrintQueue.UserPrintTicket%2A> est utilisé.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">Impossible de récupérer les fonctionnalités de l'imprimante.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="printTicket" /> n'est pas de forme correcte.</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">pour l’autorisation obtenir des fonctionnalités de l’imprimante. Énumération associée : <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintJobInfoCollection">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobInfoCollection GetPrintJobInfoCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintJobInfoCollection GetPrintJobInfoCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintJobInfoCollection" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrintJobInfoCollection () As PrintJobInfoCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintJobInfoCollection ^ GetPrintJobInfoCollection();" />
      <MemberSignature Language="F#" Value="member this.GetPrintJobInfoCollection : unit -&gt; System.Printing.PrintJobInfoCollection" Usage="printQueue.GetPrintJobInfoCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobInfoCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée une collection qui contient un objet <see cref="T:System.Printing.PrintSystemJobInfo" /> pour chaque travail dans la file d'attente.</summary>
        <returns>Retourne une <see cref="T:System.Printing.PrintJobInfoCollection" /> d'objets <see cref="T:System.Printing.PrintSystemJobInfo" />. Il y en une pour chaque travail dans la file d'attente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment utiliser cette méthode lorsque vous effectuez la même action sur chaque travail dans une file d’attente.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPaperProblem">
      <MemberSignature Language="C#" Value="public bool HasPaperProblem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasPaperProblem" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HasPaperProblem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasPaperProblem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasPaperProblem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasPaperProblem : bool" Usage="System.Printing.PrintQueue.HasPaperProblem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'imprimante a un problème non spécifié avec le papier.</summary>
        <value>
          <see langword="true" /> s'il y a un problème non spécifié de papier ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
 Le <xref:System.Printing.PrintQueue> objet a également <xref:System.Printing.PrintQueue.IsPaperJammed%2A> et <xref:System.Printing.PrintQueue.IsOutOfPaper%2A> propriétés.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété dans le cadre d’une enquête de toutes les imprimantes pour l’état d’erreur éventuel.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasToner">
      <MemberSignature Language="C#" Value="public bool HasToner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasToner" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HasToner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasToner As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasToner { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasToner : bool" Usage="System.Printing.PrintQueue.HasToner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'imprimante a du toner.</summary>
        <value>
          <see langword="true" /> si l'imprimante active a du toner ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Certains fabricants d’imprimantes peuvent utiliser ce signal pour indiquer que toner n’est pas faible. D’autres peuvent l’utiliser pour indiquer que la cartouche est présente et insérée correctement lors de l’utilisation <xref:System.Printing.PrintQueue.IsTonerLow%2A> pour indiquer que toner est faible.  
  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété dans le cadre d’une enquête de toutes les imprimantes pour l’état d’erreur éventuel.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostingPrintServer">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintServer HostingPrintServer { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintServer HostingPrintServer" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HostingPrintServer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HostingPrintServer As PrintServer" />
      <MemberSignature Language="C++ CLI" Value="public:  virtual property System::Printing::PrintServer ^ HostingPrintServer {  public:&#xA;System::Printing::PrintServer ^ get(); protected:&#xA; void set(System::Printing::PrintServer ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HostingPrintServer : System.Printing.PrintServer with get, set" Usage="System.Printing.PrintQueue.HostingPrintServer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintServer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit (protégé) le serveur d'impression qui contrôle la file d'attente à l'impression.</summary>
        <value>Le nom et d'autres propriétés du <see cref="T:System.Printing.PrintServer" /> qui héberge la file d'attente à l'impression.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété peut être définie uniquement par une classe qui dérive de <xref:System.Printing.PrintQueue> , car la méthode setter de la propriété est `protected`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InPartialTrust">
      <MemberSignature Language="C#" Value="public bool InPartialTrust { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InPartialTrust" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.InPartialTrust" />
      <MemberSignature Language="VB.NET" Value="Public Property InPartialTrust As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InPartialTrust { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.InPartialTrust : bool with get, set" Usage="System.Printing.PrintQueue.InPartialTrust" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si la file d'attente fonctionne en un mode de confiance partielle ou élevée.</summary>
        <value>
          <see langword="true" /> si la file d'attente fonctionne dans un mode de confiance partielle ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque le <xref:System.Printing.PrintQueue.InPartialTrust%2A> propriété est `true`, votre programme ne peut pas créer un <xref:System.Printing.PrintQueue> objet qui représente cette imprimante, sauf si l’utilisateur dispose des autorisations d’impression pour l’imprimante.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalDispose">
      <MemberSignature Language="C#" Value="protected override sealed void InternalDispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InternalDispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.InternalDispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub InternalDispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InternalDispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.InternalDispose : bool -&gt; unit" Usage="printQueue.InternalDispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</param>
        <summary>Libère les ressources non managées utilisées par <see cref="T:System.Printing.PrintQueue" /> et libère éventuellement les ressources managées.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBidiEnabled">
      <MemberSignature Language="C#" Value="public bool IsBidiEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBidiEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsBidiEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBidiEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBidiEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBidiEnabled : bool" Usage="System.Printing.PrintQueue.IsBidiEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si la communication bidirectionnelle avec l'imprimante est activée.</summary>
        <value>
          <see langword="true" /> si la communication bidirectionnelle avec l'imprimante est activée ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsBusy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBusy As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBusy { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBusy : bool" Usage="System.Printing.PrintQueue.IsBusy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si le dispositif d'impression est occupé.</summary>
        <value>
          <see langword="true" /> si le périphérique est occupé ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Occupé ne signifie pas nécessairement qu’il traite un travail d’impression. Si l’appareil est un combinaison imprimante/télécopieur/copieur, puis il peut être télécopie ou de copie. Comparer avec la <xref:System.Printing.PrintQueue.IsProcessing%2A> propriété.  
  
 Si l’appareil ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDevQueryEnabled">
      <MemberSignature Language="C#" Value="public bool IsDevQueryEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDevQueryEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDevQueryEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDevQueryEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDevQueryEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDevQueryEnabled : bool" Usage="System.Printing.PrintQueue.IsDevQueryEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si la file d'attente maintient des documents lorsque le document et les configurations d'imprimante ne correspondent pas.</summary>
        <value>
          <see langword="true" /> si la file d'attente maintient des configurations qui ne correspondent pas ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirect">
      <MemberSignature Language="C#" Value="public bool IsDirect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirect" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDirect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirect { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirect : bool" Usage="System.Printing.PrintQueue.IsDirect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si la file d'attente imprime directement sur l'imprimante ou met d'abord les documents en file d'attente avant de les imprimer.</summary>
        <value>
          <see langword="true" /> si la file d'attente imprime directement sur l'imprimante ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété peut être définie uniquement par le biais de la boîte de dialogue d’impression commune de Windows.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDoorOpened">
      <MemberSignature Language="C#" Value="public bool IsDoorOpened { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDoorOpened" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDoorOpened" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDoorOpened As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDoorOpened { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDoorOpened : bool" Usage="System.Printing.PrintQueue.IsDoorOpened" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si une des portes de l'imprimante est ouverte.</summary>
        <value>
          <see langword="true" /> si une porte est ouverte ; sinon <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété dans le cadre d’une enquête de toutes les imprimantes pour l’état d’erreur éventuel.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHidden">
      <MemberSignature Language="C#" Value="public bool IsHidden { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHidden" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsHidden" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHidden As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHidden { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHidden : bool" Usage="System.Printing.PrintQueue.IsHidden" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si la file d'attente à l'impression est masquée dans l'interface utilisateur de votre application.</summary>
        <value>
          <see langword="true" /> si la file d'attente à l'impression est masquée dans l'interface utilisateur Windows ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous ne pas automatiquement les masquer la file d’attente lorsque vous définissez cette propriété sur `true`. Votre programme toujours des étapes pour vous assurer qu’il n’apparaît pas dans n’importe quelle liste de files d’attente dans l’interface du programme.  
  
 Files d’attente ne peuvent pas être masqués dans l’interface utilisateur de Windows, telles que la liste d’imprimantes et télécopieurs.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInError">
      <MemberSignature Language="C#" Value="public bool IsInError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInError" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsInError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInError { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInError : bool" Usage="System.Printing.PrintQueue.IsInError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'imprimante ou le périphérique est en état d'erreur.</summary>
        <value>
          <see langword="true" /> si le périphérique est en état d'erreur ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété dans le cadre d’une enquête de toutes les imprimantes pour l’état d’erreur éventuel.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitializing">
      <MemberSignature Language="C#" Value="public bool IsInitializing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitializing" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsInitializing" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitializing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitializing { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitializing : bool" Usage="System.Printing.PrintQueue.IsInitializing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'imprimante s'initialise d'elle-même.</summary>
        <value>
          <see langword="true" /> si l'imprimante s'initialise ; sinon <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIOActive">
      <MemberSignature Language="C#" Value="public bool IsIOActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIOActive" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsIOActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIOActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIOActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsIOActive : bool" Usage="System.Printing.PrintQueue.IsIOActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'imprimante reçoit ou envoie des données ou des signaux.</summary>
        <value>
          <see langword="true" /> si l'imprimante reçoit ou envoie ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManualFeedRequired">
      <MemberSignature Language="C#" Value="public bool IsManualFeedRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManualFeedRequired" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsManualFeedRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsManualFeedRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsManualFeedRequired { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsManualFeedRequired : bool" Usage="System.Printing.PrintQueue.IsManualFeedRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'imprimante doit être alimentée manuellement en papier pour le travail d'impression en cours.</summary>
        <value>
          <see langword="true" /> si l'imprimante doit être alimentée manuellement en papier ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotAvailable">
      <MemberSignature Language="C#" Value="public bool IsNotAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsNotAvailable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNotAvailable : bool" Usage="System.Printing.PrintQueue.IsNotAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'imprimante est disponible.</summary>
        <value>
          <see langword="true" /> si l'imprimante est disponible ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété dans le cadre d’une enquête de toutes les imprimantes pour l’état d’erreur éventuel.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOffline">
      <MemberSignature Language="C#" Value="public bool IsOffline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOffline" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOffline" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOffline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOffline { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOffline : bool" Usage="System.Printing.PrintQueue.IsOffline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'imprimante n'est pas connectée.</summary>
        <value>
          <see langword="true" /> si l'imprimante n'est pas connectée ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété dans le cadre d’une enquête de toutes les imprimantes pour l’état d’erreur éventuel.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutOfMemory">
      <MemberSignature Language="C#" Value="public bool IsOutOfMemory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutOfMemory" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutOfMemory" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOutOfMemory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOutOfMemory { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOutOfMemory : bool" Usage="System.Printing.PrintQueue.IsOutOfMemory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si la mémoire de l'imprimante est saturée.</summary>
        <value>
          <see langword="true" /> si la mémoire de l'imprimante est saturée ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété dans le cadre d’une enquête de toutes les imprimantes pour l’état d’erreur éventuel.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutOfPaper">
      <MemberSignature Language="C#" Value="public bool IsOutOfPaper { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutOfPaper" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutOfPaper" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOutOfPaper As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOutOfPaper { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOutOfPaper : bool" Usage="System.Printing.PrintQueue.IsOutOfPaper" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'imprimante doit être rechargée en papier de la taille requise pour le travail en cours.</summary>
        <value>
          <see langword="true" /> si l'imprimante doit être rechargée ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété dans le cadre d’une enquête de toutes les imprimantes pour l’état d’erreur éventuel.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutputBinFull">
      <MemberSignature Language="C#" Value="public bool IsOutputBinFull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutputBinFull" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutputBinFull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOutputBinFull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOutputBinFull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOutputBinFull : bool" Usage="System.Printing.PrintQueue.IsOutputBinFull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si la zone de sortie de l'imprimante risque de déborder.</summary>
        <value>
          <see langword="true" /> si la zone de sortie de l'imprimante est pleine ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété dans le cadre d’une enquête de toutes les imprimantes pour l’état d’erreur éventuel.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaperJammed">
      <MemberSignature Language="C#" Value="public bool IsPaperJammed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaperJammed" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPaperJammed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPaperJammed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPaperJammed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPaperJammed : bool" Usage="System.Printing.PrintQueue.IsPaperJammed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si la feuille de papier en cours est coincée dans l'imprimante.</summary>
        <value>
          <see langword="true" /> si le papier est coincé ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété dans le cadre d’une enquête de toutes les imprimantes pour l’état d’erreur éventuel.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaused">
      <MemberSignature Language="C#" Value="public bool IsPaused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaused" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPaused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPaused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPaused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPaused : bool" Usage="System.Printing.PrintQueue.IsPaused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si la file d'attente à l'impression est en mode pause.</summary>
        <value>
          <see langword="true" /> si la file d'attente est en mode pause ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété dans le cadre d’une enquête de toutes les imprimantes pour l’état d’erreur éventuel.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPendingDeletion">
      <MemberSignature Language="C#" Value="public bool IsPendingDeletion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPendingDeletion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPendingDeletion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPendingDeletion As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPendingDeletion { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPendingDeletion : bool" Usage="System.Printing.PrintQueue.IsPendingDeletion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'imprimante est en train de supprimer un travail d'impression.</summary>
        <value>
          <see langword="true" /> si l'imprimante supprime un travail ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPowerSaveOn">
      <MemberSignature Language="C#" Value="public bool IsPowerSaveOn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPowerSaveOn" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPowerSaveOn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPowerSaveOn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPowerSaveOn { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPowerSaveOn : bool" Usage="System.Printing.PrintQueue.IsPowerSaveOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si l'imprimante est en mode veille.</summary>
        <value>
          <see langword="true" /> si l'imprimante est en mode veille ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrinting">
      <MemberSignature Language="C#" Value="public bool IsPrinting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrinting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPrinting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrinting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrinting { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrinting : bool" Usage="System.Printing.PrintQueue.IsPrinting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si  un travail d'impression est en cours.</summary>
        <value>
          <see langword="true" /> si  un travail d'impression est en cours ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsProcessing">
      <MemberSignature Language="C#" Value="public bool IsProcessing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsProcessing" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsProcessing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsProcessing { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsProcessing : bool" Usage="System.Printing.PrintQueue.IsProcessing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si un travail d'impression est en cours.</summary>
        <value>
          <see langword="true" /> si un travail d'impression est en cours ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Certains fabricants d’imprimante prennent en charge ce signal au lieu de la moins spécifique <xref:System.Printing.PrintQueue.IsBusy%2A>.  
  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublished">
      <MemberSignature Language="C#" Value="public bool IsPublished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublished" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPublished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublished { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublished : bool" Usage="System.Printing.PrintQueue.IsPublished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'imprimante est visible pour d'autres utilisateurs en réseau.</summary>
        <value>
          <see langword="true" /> si l'imprimante est visible pour d'autres utilisateurs en réseau ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsQueued">
      <MemberSignature Language="C#" Value="public bool IsQueued { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsQueued" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsQueued" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsQueued As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsQueued { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsQueued : bool" Usage="System.Printing.PrintQueue.IsQueued" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'imprimante peut prendre en charge une file d'attente comprenant plusieurs travaux d'impression.</summary>
        <value>
          <see langword="true" /> si l'imprimante peut prendre en charge une file d'attente comprenant plusieurs travaux d'impression ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRawOnlyEnabled">
      <MemberSignature Language="C#" Value="public bool IsRawOnlyEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRawOnlyEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsRawOnlyEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRawOnlyEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRawOnlyEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRawOnlyEnabled : bool" Usage="System.Printing.PrintQueue.IsRawOnlyEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si la file d'attente à l'impression peut utiliser un fichier EMF (métafichier amélioré) permettant d'activer un flux de données plus rapide entre l'application d'impression et le spouleur Windows.</summary>
        <value>
          <see langword="true" /> si l'imprimante ne peut pas utiliser l'impression EMF ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServerUnknown">
      <MemberSignature Language="C#" Value="public bool IsServerUnknown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServerUnknown" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsServerUnknown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsServerUnknown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsServerUnknown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsServerUnknown : bool" Usage="System.Printing.PrintQueue.IsServerUnknown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'imprimante est en état d'erreur.</summary>
        <value>
          <see langword="true" /> si l'imprimante est en état d'erreur ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsShared : bool" Usage="System.Printing.PrintQueue.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'imprimante est disponible pour d'autres ordinateurs sur le réseau.</summary>
        <value>
          <see langword="true" /> si l'imprimante est partagée ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété peut uniquement être définie avec la boîte de dialogue d’impression commune de Windows.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTonerLow">
      <MemberSignature Language="C#" Value="public bool IsTonerLow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTonerLow" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsTonerLow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTonerLow As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTonerLow { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTonerLow : bool" Usage="System.Printing.PrintQueue.IsTonerLow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'imprimante manque de toner.</summary>
        <value>
          <see langword="true" /> si l'imprimante manque de toner ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
 Le <xref:System.Printing.PrintQueue> objet a également un <xref:System.Printing.PrintQueue.HasToner%2A> propriété.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété dans le cadre d’une enquête de toutes les imprimantes pour l’état d’erreur éventuel.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWaiting">
      <MemberSignature Language="C#" Value="public bool IsWaiting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWaiting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsWaiting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWaiting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWaiting { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWaiting : bool" Usage="System.Printing.PrintQueue.IsWaiting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si la file d'attente attend qu'un travail soit ajouté.</summary>
        <value>
          <see langword="true" /> si la file d'attente attend un travail ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWarmingUp">
      <MemberSignature Language="C#" Value="public bool IsWarmingUp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWarmingUp" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsWarmingUp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWarmingUp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWarmingUp { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWarmingUp : bool" Usage="System.Printing.PrintQueue.IsWarmingUp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'imprimante est en mode allumage.</summary>
        <value>
          <see langword="true" /> si l'imprimante est en mode allumage ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsXpsDevice">
      <MemberSignature Language="C#" Value="public bool IsXpsDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsXpsDevice" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsXpsDevice" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsXpsDevice As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsXpsDevice { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsXpsDevice : bool" Usage="System.Printing.PrintQueue.IsXpsDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si le pilote de l’imprimante est créé à partir de la [vue d’ensemble de l’impression](~/docs/framework/wpf/advanced/printing-overview.md), auquel cas il utilise [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] comme langage de description de page (LDP).</summary>
        <value>
          <see langword="true" /> Si l’imprimante utilise le [vue d’ensemble de l’impression](~/docs/framework/wpf/advanced/printing-overview.md); sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepPrintedJobs">
      <MemberSignature Language="C#" Value="public bool KeepPrintedJobs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepPrintedJobs" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.KeepPrintedJobs" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeepPrintedJobs As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeepPrintedJobs { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.KeepPrintedJobs : bool" Usage="System.Printing.PrintQueue.KeepPrintedJobs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si la file d'attente enregistre ou supprime après impression le fichier de langue de l'imprimante.</summary>
        <value>
          <see langword="true" /> si la file d'attente enregistre le fichier de langue de l'imprimante ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public virtual string Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Location" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Location" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Location As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Location { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Location : string with get, set" Usage="System.Printing.PrintQueue.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'emplacement physique de l'imprimante.</summary>
        <value>Emplacement physique de l'imprimante.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété pour répertorier un sous-ensemble de files d’attente à l’impression disponibles.  
  
 [!code-cpp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CPP/Program.cpp#listsubsetofprintqueues)]
 [!code-csharp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CSharp/Program.cs#listsubsetofprintqueues)]
 [!code-vb[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/visualbasic/program.vb#listsubsetofprintqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPrintSchemaVersion">
      <MemberSignature Language="C#" Value="public static int MaxPrintSchemaVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxPrintSchemaVersion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.MaxPrintSchemaVersion" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxPrintSchemaVersion As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxPrintSchemaVersion { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxPrintSchemaVersion : int" Usage="System.Printing.PrintQueue.MaxPrintSchemaVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le numéro de version possible le plus récent du [schéma d’impression](http://go.microsoft.com/fwlink/?LinkId=186397) que la file d’attente peut utiliser.</summary>
        <value>Le numéro de version plus récente de la [schéma d’impression](http://go.microsoft.com/fwlink/?LinkId=186397) que la file d’attente peut utiliser.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La version de la [schéma d’impression](http://go.microsoft.com/fwlink/?LinkId=186397) disponible avec Windows Vista est 1.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="http://go.microsoft.com/fwlink/?LinkId=186397">Schéma d’impression</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="MergeAndValidatePrintTicket">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fusionne deux <see cref="T:System.Printing.PrintTicket" /> et garantit que le <see cref="T:System.Printing.PrintTicket" /> résultant est valide et ne demande pas de fonctionnalité d'impression non prise en charge par l'imprimante.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MergeAndValidatePrintTicket">
      <MemberSignature Language="C#" Value="public System.Printing.ValidationResult MergeAndValidatePrintTicket (System.Printing.PrintTicket basePrintTicket, System.Printing.PrintTicket deltaPrintTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Printing.ValidationResult MergeAndValidatePrintTicket(class System.Printing.PrintTicket basePrintTicket, class System.Printing.PrintTicket deltaPrintTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.MergeAndValidatePrintTicket(System.Printing.PrintTicket,System.Printing.PrintTicket)" />
      <MemberSignature Language="VB.NET" Value="Public Function MergeAndValidatePrintTicket (basePrintTicket As PrintTicket, deltaPrintTicket As PrintTicket) As ValidationResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::ValidationResult MergeAndValidatePrintTicket(System::Printing::PrintTicket ^ basePrintTicket, System::Printing::PrintTicket ^ deltaPrintTicket);" />
      <MemberSignature Language="F#" Value="member this.MergeAndValidatePrintTicket : System.Printing.PrintTicket * System.Printing.PrintTicket -&gt; System.Printing.ValidationResult" Usage="printQueue.MergeAndValidatePrintTicket (basePrintTicket, deltaPrintTicket)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.ValidationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basePrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="deltaPrintTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="basePrintTicket">Premier ticket d'impression.</param>
        <param name="deltaPrintTicket">Deuxième ticket d'impression. Il peut s’agir de <see langword="null" />.</param>
        <summary>Fusionne deux <see cref="T:System.Printing.PrintTicket" /> et garantit que le <see cref="T:System.Printing.PrintTicket" /> résultant est valide et ne demande pas de fonctionnalité d'impression non prise en charge par l'imprimante.</summary>
        <returns>
          <see cref="T:System.Printing.ValidationResult" /> qui inclut les <see cref="T:System.Printing.PrintTicket" /> fusionnés et une indication sur la nécessité d'avoir eu ou non à en modifier des paramètres pour en garantir la viabilité.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La méthode produit un ticket d’impression viable ; Autrement dit, un ticket qui ne demande pas de fonctionnalités d’impression que l’imprimante ne prend pas en charge. La méthode valide tout d’abord les deux tickets d’impression d’entrée par rapport à la [schéma d’impression](http://go.microsoft.com/fwlink/?LinkId=186397). Si n’est pas valide, une exception est levée.  
  
 Les deux tickets sont ensuite fusionnées. S’ils ont des valeurs différentes pour une propriété particulière le ticket fusionné résultant utilise initialement la valeur du ticket delta.  
  
 Le ticket fusionné est ensuite comparé aux fonctionnalités réelles de l’imprimante. Si les paramètres dans le ticket sont incompatibles avec les fonctionnalités de l’imprimante, puis le pilote d’imprimante modifie ces paramètres en utilisant la logique qu’il veut. En règle générale, il remplace l’utilisateur ou de l’imprimante valeur par défaut pour le paramètre. Il la source du pilote des valeurs de substitution n’est pas le même ticket que `basePrintTicket`, puis le ticket fusionné peut avoir des paramètres qui sont différents des deux tickets d’entrée. Si le pilote d’imprimante a modifier des paramètres, ce fait est signalé dans le <xref:System.Printing.ValidationResult.ConflictStatus%2A> propriété de la <xref:System.Printing.ValidationResult>.  
  
 Pour fusionner et valider en fonction des paramètres de valeur par défaut une file d’attente à l’impression, vous devez définir `basePrintTicket` à la <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> ou <xref:System.Printing.PrintQueue.UserPrintTicket%2A>.  
  
 Le `deltaPrintTicket` paramètre peut être `null`, auquel cas la `basePrintTicket` est validé, vérifié pour viabilité et retourné, éventuellement avec les modifications.  
  
 Avec cette surcharge de <xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>, à la fois le `deltaPrintTicket` et <xref:System.Printing.PrintTicket> dans le <xref:System.Printing.ValidationResult> retourné ont une portée large de travail. Pour spécifier une étendue différente utilisez l’autre surcharge de cette méthode.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette méthode pour fusionner deux tickets d’impression et de répondre à la <xref:System.Printing.ValidationResult> qui est retourné.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Au moins l'un des tickets d'impression d'entrée n'est pas valide.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="basePrintTicket" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Printing.PrintQueueException">Échec de la validation, de la fusion et de la vérification de la viabilité.</exception>
      </Docs>
    </Member>
    <Member MemberName="MergeAndValidatePrintTicket">
      <MemberSignature Language="C#" Value="public System.Printing.ValidationResult MergeAndValidatePrintTicket (System.Printing.PrintTicket basePrintTicket, System.Printing.PrintTicket deltaPrintTicket, System.Printing.PrintTicketScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Printing.ValidationResult MergeAndValidatePrintTicket(class System.Printing.PrintTicket basePrintTicket, class System.Printing.PrintTicket deltaPrintTicket, valuetype System.Printing.PrintTicketScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.MergeAndValidatePrintTicket(System.Printing.PrintTicket,System.Printing.PrintTicket,System.Printing.PrintTicketScope)" />
      <MemberSignature Language="VB.NET" Value="Public Function MergeAndValidatePrintTicket (basePrintTicket As PrintTicket, deltaPrintTicket As PrintTicket, scope As PrintTicketScope) As ValidationResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::ValidationResult MergeAndValidatePrintTicket(System::Printing::PrintTicket ^ basePrintTicket, System::Printing::PrintTicket ^ deltaPrintTicket, System::Printing::PrintTicketScope scope);" />
      <MemberSignature Language="F#" Value="member this.MergeAndValidatePrintTicket : System.Printing.PrintTicket * System.Printing.PrintTicket * System.Printing.PrintTicketScope -&gt; System.Printing.ValidationResult" Usage="printQueue.MergeAndValidatePrintTicket (basePrintTicket, deltaPrintTicket, scope)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.ValidationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basePrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="deltaPrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="scope" Type="System.Printing.PrintTicketScope" />
      </Parameters>
      <Docs>
        <param name="basePrintTicket">Premier ticket d'impression.</param>
        <param name="deltaPrintTicket">Deuxième ticket d'impression. Il peut s’agir de <see langword="null" />.</param>
        <param name="scope">Valeur qui indique si la portée du <c>deltaPrintTicket</c> et la portée du ticket d’impression retourné dans le <see cref="T:System.Printing.ValidationResult" /> sont une page, un document ou l’intégralité du travail.</param>
        <summary>Fusionne deux <see cref="T:System.Printing.PrintTicket" /> et garantit que le <see cref="T:System.Printing.PrintTicket" /> résultant est valide, ne demande pas de fonctionnalité d'impression non prise en charge par l'imprimante et se limite à la portée spécifiée.</summary>
        <returns>
          <see cref="T:System.Printing.ValidationResult" /> qui inclut les <see cref="T:System.Printing.PrintTicket" /> fusionnés et une indication sur la nécessité d'avoir eu ou non à en modifier des paramètres pour en garantir la viabilité.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La méthode produit un ticket d’impression viable ; Autrement dit, un ticket qui ne demande pas de fonctionnalités d’impression que l’imprimante ne prend pas en charge. La méthode valide tout d’abord les deux tickets d’impression d’entrée par rapport à la [schéma d’impression](http://go.microsoft.com/fwlink/?LinkId=186397). Si n’est pas valide, une exception est levée.  
  
 Les deux tickets sont ensuite fusionnées. S’ils ont des valeurs différentes pour une propriété particulière le ticket fusionné résultant utilise initialement la valeur du ticket delta.  
  
 Le ticket fusionné est ensuite comparé aux fonctionnalités réelles de l’imprimante. Si les paramètres dans le ticket sont incompatibles avec les fonctionnalités de l’imprimante, puis le pilote d’imprimante modifie ces paramètres en utilisant la logique qu’il veut. En règle générale, il remplace l’utilisateur ou de l’imprimante valeur par défaut pour le paramètre. Il la source du pilote des valeurs de substitution n’est pas le même ticket que `basePrintTicket`, puis le ticket fusionné peut avoir des paramètres qui sont différents des deux tickets d’entrée. Si le pilote d’imprimante a modifier des paramètres, ce fait est signalé dans le <xref:System.Printing.ValidationResult.ConflictStatus%2A> propriété de la <xref:System.Printing.ValidationResult>.  
  
 Pour fusionner et valider en fonction des paramètres de valeur par défaut une file d’attente à l’impression, vous devez définir `basePrintTicket` à la <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> ou <xref:System.Printing.PrintQueue.UserPrintTicket%2A>.  
  
 Le `deltaPrintTicket` paramètre peut être `null`, auquel cas la `basePrintTicket` est validé, vérifié pour viabilité et retourné, éventuellement avec les modifications.  
  
 Si le `scope` est un travail, puis le ticket d’impression retourné dans le <xref:System.Printing.ValidationResult> peut inclure [schéma d’impression](http://go.microsoft.com/fwlink/?LinkId=186397) paramètres avec des préfixes de travail, Document et Page. Si le `scope` est un document, alors que les paramètres pour chaque travail dans `deltaPrintTicket` sont ignorés et le ticket retourné peut inclure des paramètres avec le Document et les préfixes de Page. Si le `scope` est une page, puis les paramètres de projet par projet et les paramètres pour chaque document dans `deltaPrintTicket` sont ignorés, et le ticket retourné peut inclure des paramètres avec uniquement le préfixe de la Page.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Au moins l'un des tickets d'impression d'entrée n'est pas valide.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="basePrintTicket" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="scope" /> n'a pas une valeur <see cref="T:System.Printing.PrintTicketScope" /> valide.</exception>
        <exception cref="T:System.Printing.PrintQueueException">Échec de la validation, de la fusion et de la vérification de la viabilité.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override sealed string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Printing.PrintQueue.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de la file d'attente à l'impression.</summary>
        <value>Nom de la file d'attente à l'impression.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Printing.PrintQueue> objet a également une lecture seule <xref:System.Printing.PrintQueue.FullName%2A> propriété et un en écriture <xref:System.Printing.PrintQueue.ShareName%2A> propriété.  
  
 Pour les files d’attente sur le serveur d’impression local, <xref:System.Printing.PrintQueue.Name%2A> et <xref:System.Printing.PrintQueue.FullName%2A> sont les mêmes.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété pour répertorier un sous-ensemble de files d’attente à l’impression disponibles.  
  
 [!code-cpp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CPP/Program.cpp#listsubsetofprintqueues)]
 [!code-csharp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CSharp/Program.cs#listsubsetofprintqueues)]
 [!code-vb[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/visualbasic/program.vb#listsubsetofprintqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedUserIntervention">
      <MemberSignature Language="C#" Value="public bool NeedUserIntervention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NeedUserIntervention" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.NeedUserIntervention" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NeedUserIntervention As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NeedUserIntervention { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.NeedUserIntervention : bool" Usage="System.Printing.PrintQueue.NeedUserIntervention" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'imprimante a besoin de l'attention d'une personne.</summary>
        <value>
          <see langword="true" /> si l'imprimante a besoin de l'attention d'une personne ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété dans le cadre d’une enquête de toutes les imprimantes pour l’état d’erreur éventuel.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfJobs">
      <MemberSignature Language="C#" Value="public virtual int NumberOfJobs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberOfJobs" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.NumberOfJobs" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NumberOfJobs As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int NumberOfJobs { int get(); };" />
      <MemberSignature Language="F#" Value="member this.NumberOfJobs : int" Usage="System.Printing.PrintQueue.NumberOfJobs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre total de travaux placés dans la file d'attente à l'impression.</summary>
        <value>Nombre de travaux dans la file d'attente.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PagePunt">
      <MemberSignature Language="C#" Value="public bool PagePunt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PagePunt" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.PagePunt" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagePunt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PagePunt { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.PagePunt : bool" Usage="System.Printing.PrintQueue.PagePunt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'imprimante est incapable d'imprimer la page en cours.</summary>
        <value>
          <see langword="true" /> si l'imprimante est incapable d'imprimer la page en cours ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’imprimante ne prend pas en charge un signal avec cette signification, la propriété est toujours `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public virtual void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Pause();" />
      <MemberSignature Language="F#" Value="abstract member Pause : unit -&gt; unit&#xA;override this.Pause : unit -&gt; unit" Usage="printQueue.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pause la file d'attente à l'impression. Celle-ci reste en état de pause jusqu'à ce que <see cref="M:System.Printing.PrintQueue.Resume" /> soit exécuté.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintSystemException">Impossible de placer l'imprimante en mode pause.</exception>
        <altmember cref="M:System.Printing.PrintQueue.Resume" />
      </Docs>
    </Member>
    <Member MemberName="PrintingIsCancelled">
      <MemberSignature Language="C#" Value="public bool PrintingIsCancelled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PrintingIsCancelled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.PrintingIsCancelled" />
      <MemberSignature Language="VB.NET" Value="Public Property PrintingIsCancelled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PrintingIsCancelled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PrintingIsCancelled : bool with get, set" Usage="System.Printing.PrintQueue.PrintingIsCancelled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si le travail d'impression en cours est en train d'être annulé.</summary>
        <value>
          <see langword="true" /> si le travail d'impression en cours est en train d'être annulé ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public virtual int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Priority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Priority { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Priority : int with get, set" Usage="System.Printing.PrintQueue.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la priorité de la file d'attente à l'impression par rapport aux autres files d'attente hébergées par le même serveur d'impression et qui utilisent la même imprimante physique.</summary>
        <value>Priorité de la file d'attente à l'impression. L'étendue de valeurs possibles va de 1 à 99. La valeur par défaut est 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Comparez cette propriété avec le <xref:System.Printing.PrintQueue.DefaultPriority%2A> propriété ce qui concerne la priorité relative des travaux d’impression dans la file d’attente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public virtual void Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Purge" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Purge ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Purge();" />
      <MemberSignature Language="F#" Value="abstract member Purge : unit -&gt; unit&#xA;override this.Purge : unit -&gt; unit" Usage="printQueue.Purge " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Supprime tous les travaux dans la file d'attente à l'impression.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintSystemException">Impossible de supprimer certains travaux d'impression de la file d'attente.</exception>
      </Docs>
    </Member>
    <Member MemberName="QueueAttributes">
      <MemberSignature Language="C#" Value="public System.Printing.PrintQueueAttributes QueueAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintQueueAttributes QueueAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueueAttributes As PrintQueueAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintQueueAttributes QueueAttributes { System::Printing::PrintQueueAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.QueueAttributes : System.Printing.PrintQueueAttributes" Usage="System.Printing.PrintQueue.QueueAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintQueueAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les propriétés de la file d'attente.</summary>
        <value>Combinaison d'opérations de bits des valeurs d'énumération <see cref="T:System.Printing.PrintQueueAttributes" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueDriver">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintDriver QueueDriver { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintDriver QueueDriver" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueDriver" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property QueueDriver As PrintDriver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintDriver ^ QueueDriver { System::Printing::PrintDriver ^ get(); void set(System::Printing::PrintDriver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QueueDriver : System.Printing.PrintDriver with get, set" Usage="System.Printing.PrintQueue.QueueDriver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintDriver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le pilote d'impression pour la file d'attente.</summary>
        <value>
          <see cref="T:System.Printing.PrintDriver" /> qu'utilise la file d'attente.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuePort">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintPort QueuePort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintPort QueuePort" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueuePort" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property QueuePort As PrintPort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintPort ^ QueuePort { System::Printing::PrintPort ^ get(); void set(System::Printing::PrintPort ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QueuePort : System.Printing.PrintPort with get, set" Usage="System.Printing.PrintQueue.QueuePort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintPort</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le port que la file d'attente utilise.</summary>
        <value>
          <see cref="T:System.Printing.PrintPort" /> assigné à la file d'attente à l'impression.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuePrintProcessor">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintProcessor QueuePrintProcessor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintProcessor QueuePrintProcessor" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueuePrintProcessor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property QueuePrintProcessor As PrintProcessor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintProcessor ^ QueuePrintProcessor { System::Printing::PrintProcessor ^ get(); void set(System::Printing::PrintProcessor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QueuePrintProcessor : System.Printing.PrintProcessor with get, set" Usage="System.Printing.PrintQueue.QueuePrintProcessor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintProcessor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le processeur d'impression que la file d'attente utilise.</summary>
        <value>
          <see cref="T:System.Printing.PrintProcessor" /> que la file d'attente utilise, tel que WinPrint ou ModiPrint.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueStatus">
      <MemberSignature Language="C#" Value="public System.Printing.PrintQueueStatus QueueStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintQueueStatus QueueStatus" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueStatus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueueStatus As PrintQueueStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintQueueStatus QueueStatus { System::Printing::PrintQueueStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.QueueStatus : System.Printing.PrintQueueStatus" Usage="System.Printing.PrintQueue.QueueStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintQueueStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui représente l'état de l'imprimante. Ceux-ci comprennent « allumage »,  « initialisation »,  « impression », etc.</summary>
        <value>Valeur <see cref="T:System.Printing.PrintQueueStatus" /> en cours.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété dans le cadre d’une enquête de toutes les imprimantes pour l’état d’erreur éventuel.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueAttributes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueattributes)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueAttributes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueattributes)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueAttributes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueattributes)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public override void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Refresh();" />
      <MemberSignature Language="F#" Value="override this.Refresh : unit -&gt; unit" Usage="printQueue.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Met à jour les propriétés de l'objet <see cref="T:System.Printing.PrintQueue" /> avec les valeurs de l'imprimante et de l'utilitaire de file d'attente à l'impression qui s'exécutent sur l'ordinateur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modifications apportées par votre programme à un <xref:System.Printing.PrintQueue> propriétés de l’objet sont perdues lorsque <xref:System.Printing.PrintQueue.Refresh%2A> s’exécute, sauf si elles ont été écrits à l’imprimante et la file d’attente avec <xref:System.Printing.PrintQueue.Commit%2A>.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette méthode dans le cadre d’une enquête de toutes les imprimantes pour l’état d’erreur éventuel.  
  
 [!code-cpp[PrinterStatusSurvey#SurveyQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#surveyqueues)]
 [!code-csharp[PrinterStatusSurvey#SurveyQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#surveyqueues)]
 [!code-vb[PrinterStatusSurvey#SurveyQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#surveyqueues)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">Impossible d'actualiser certaines propriétés.</exception>
        <altmember cref="M:System.Printing.PrintQueue.Commit" />
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public virtual void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Resume();" />
      <MemberSignature Language="F#" Value="abstract member Resume : unit -&gt; unit&#xA;override this.Resume : unit -&gt; unit" Usage="printQueue.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Redémarre une file d'attente à l'impression qui avait été mise en mode pause.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment utiliser cette méthode pour reprendre une file d’attente à l’impression en pause.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#handlepausedjob)]
 [!code-csharp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#handlepausedjob)]
 [!code-vb[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#handlepausedjob)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">Impossible de redémarrer l'imprimante.</exception>
        <altmember cref="M:System.Printing.PrintQueue.Pause" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCompletedJobsFirst">
      <MemberSignature Language="C#" Value="public bool ScheduleCompletedJobsFirst { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScheduleCompletedJobsFirst" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ScheduleCompletedJobsFirst" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScheduleCompletedJobsFirst As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ScheduleCompletedJobsFirst { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ScheduleCompletedJobsFirst : bool" Usage="System.Printing.PrintQueue.ScheduleCompletedJobsFirst" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'imprimante imprime des travaux qui ont complété le processus de mise en file d'attente, avant des travaux qui n'ont pas été complètement mis en attente, même si ces derniers sont entrés en premier dans la file d'attente ou ont une priorité plus élevée.</summary>
        <value>
          <see langword="true" /> si l'imprimante imprime des travaux qui ont complété le processus de mise en file d'attente, avant des travaux qui n'ont pas été complètement mis en attente ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatorFile">
      <MemberSignature Language="C#" Value="public virtual string SeparatorFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SeparatorFile" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.SeparatorFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SeparatorFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SeparatorFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SeparatorFile : string with get, set" Usage="System.Printing.PrintQueue.SeparatorFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le chemin d'accès et le nom d'un fichier qui est inséré au début de chaque travail d'impression.</summary>
        <value>Chemin d'accès et nom du fichier séparateur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il s’agit normalement un fichier de page unique utilisé pour le rendre plus facile de séparer la sortie différents des travaux d’impression.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShareName">
      <MemberSignature Language="C#" Value="public virtual string ShareName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShareName" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ShareName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ShareName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ShareName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShareName : string with get, set" Usage="System.Printing.PrintQueue.ShareName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un nom pour l'imprimante qui est vu par les utilisateurs réseau lorsqu'elle est partagée.</summary>
        <value>Nom public d'une imprimante partagée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Printing.PrintQueue> objet a également une lecture seule <xref:System.Printing.PrintQueue.FullName%2A> propriété et un en écriture <xref:System.Printing.PrintQueue.Name%2A> propriété. Pour les files d’attente sur le serveur d’impression local, ces propriétés ont la même valeur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartTimeOfDay">
      <MemberSignature Language="C#" Value="public virtual int StartTimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StartTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.StartTimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property StartTimeOfDay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int StartTimeOfDay { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.StartTimeOfDay : int with get, set" Usage="System.Printing.PrintQueue.StartTimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la première heure de la journée à laquelle l'imprimante imprime un travail, heure exprimée en nombre de minutes à partir de minuit dans le temps universel coordonné (UTC) (également temps moyen de Greenwich appelé [GMT]).</summary>
        <value>Première heure de la journée à laquelle l'imprimante devient disponible, exprimée en nombre de minutes après minuit (UTC). La valeur maximale est 1439. Lorsqu'une imprimante est d'abord installée à l'aide de l'Assistant Ajout d'imprimante de [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)], l'imprimante est par défaut disponible tout le temps et cette propriété retourne 0 dans tous les fuseaux horaires.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous n’êtes pas dans le fuseau horaire UTC, vous devez ajouter ou soustraire des multiples de 60 pour définir ou obtenir l’heure correcte pour votre fuseau horaire. Par exemple, si vous êtes dans la Zone Pacifique d’Amérique du Nord et l’heure d’été heure d’été ne sont pas en vigueur, votre heure locale est de 8 heures en heure UTC. Pour définir <xref:System.Printing.PrintQueue.StartTimeOfDay%2A> à Minuit dans votre fuseau horaire, définissez-la à 8 h 00 UTC, ce qui est de 480 (= 8 * 60). Vous devez également vous rappeler que l’heure revient à zéro après 24 heures (c'est-à-dire après la 1439ème minute). Pour la définir à 18 h 00 dans votre fuseau horaire, définissez-la à 2 h 00 UTC, qui est de 120 (= 2 * 60). Consultez <xref:System.TimeZone>, <xref:System.TimeSpan>, et <xref:System.DateTime> classes utiles fuseau horaire des méthodes.  
  
 Si l’imprimante est toujours disponible, cette propriété retourne 0 dans tous les fuseaux horaires.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété pour déterminer si une imprimante est disponible à l’heure actuelle.  
  
 [!code-cpp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#usingstartanduntiltimes)]
 [!code-csharp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#usingstartanduntiltimes)]
 [!code-vb[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#usingstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.UntilTimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="UntilTimeOfDay">
      <MemberSignature Language="C#" Value="public virtual int UntilTimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UntilTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.UntilTimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UntilTimeOfDay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UntilTimeOfDay { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.UntilTimeOfDay : int with get, set" Usage="System.Printing.PrintQueue.UntilTimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la dernière heure de la journée à laquelle l'imprimante imprime un travail, heure exprimée en nombre de minutes à partir de minuit dans le temps universel coordonné (UTC) (également temps moyen de Greenwich appelé [GMT]).</summary>
        <value>Heure du jour à laquelle l'imprimante n'est plus disponible, exprimée en nombre de minutes après minuit (UTC). La valeur maximale est 1439. Lorsqu'une imprimante est d'abord installée à l'aide de l'Assistant Ajout d'imprimante de [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)], l'imprimante est par défaut disponible tout le temps et cette propriété retourne 0 dans tous les fuseaux horaires.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous n’êtes pas dans le fuseau horaire UTC, vous devez ajouter ou soustraire des multiples de 60 pour définir ou obtenir l’heure correcte pour votre fuseau horaire. Par exemple, si vous êtes dans la Zone Pacifique d’Amérique du Nord et l’heure d’été heure d’été ne sont pas en vigueur, votre heure locale est de 8 heures en heure UTC. Pour définir <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A> à Minuit dans votre fuseau horaire, définissez-la à 8 h 00 UTC, ce qui est de 480 (= 8 * 60). Vous devez également vous rappeler que l’heure revient à zéro après l’heure 24 (1439ème minute). Pour la définir à 18 h 00 dans votre fuseau horaire, définissez-la à 2 h 00 UTC, qui est de 120 (= 2 * 60). Consultez <xref:System.TimeZone>, <xref:System.TimeSpan>, et <xref:System.DateTime> classes utiles fuseau horaire des méthodes.  
  
 Si l’imprimante est toujours disponible, cette propriété retourne 0 dans tous les fuseaux horaires.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété pour déterminer si une imprimante est disponible à l’heure actuelle.  
  
 [!code-cpp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#usingstartanduntiltimes)]
 [!code-csharp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#usingstartanduntiltimes)]
 [!code-vb[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#usingstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.StartTimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="UserPrintTicket">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintTicket UserPrintTicket { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintTicket UserPrintTicket" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.UserPrintTicket" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UserPrintTicket As PrintTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintTicket ^ UserPrintTicket { System::Printing::PrintTicket ^ get(); void set(System::Printing::PrintTicket ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UserPrintTicket : System.Printing.PrintTicket with get, set" Usage="System.Printing.PrintQueue.UserPrintTicket" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintTicket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'objet <see cref="T:System.Printing.PrintTicket" /> par défaut de l'utilisateur actuel qui contient des informations détaillées sur le travail d'impression.</summary>
        <value>
          <see cref="T:System.Printing.PrintTicket" /> de l'utilisateur actuel, ou <see langword="null" /> si un <see cref="T:System.Printing.PrintTicket" /> n'a pas été spécifié pour l'utilisateur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chaque utilisateur peut avoir sa propre valeur par défaut <xref:System.Printing.PrintTicket>.  
  
 Cette propriété peut être `null`.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser cette propriété lors de la fusion de deux tickets d’impression.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintQueue.DefaultPrintTicket" />
      </Docs>
    </Member>
  </Members>
</Type>