<Type Name="Log" FullName="Microsoft.VisualBasic.Logging.Log">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7fff402c8466f2b7b1d17f50b5c0e890d5b3d773" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52201844" /></Metadata><TypeSignature Language="C#" Value="public class Log" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Log extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.Log" />
  <TypeSignature Language="VB.NET" Value="Public Class Log" />
  <TypeSignature Language="C++ CLI" Value="public ref class Log" />
  <TypeSignature Language="F#" Value="type Log = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit une propriété et des méthodes pour écrire les informations concernant les événements et exceptions dans les écouteurs de journalisation de l'application.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `My.Application.Log` objet fournit un point d’entrée simple à partir duquel accéder à la [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]services d’enregistrement. Le `WriteEntry` et `WriteException` méthodes écrivent des messages dans les écouteurs de journalisation de l’application. Les écouteurs peuvent être configurés par le fichier de configuration de l’application. Pour plus d’informations, consultez [procédure pas à pas : modification Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md) et [utilisation des journaux des applications](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Le `My.Application.Log` objet n’est disponible uniquement pour les applications clientes. Pour les applications Web, utilisez `My.Log`. Pour plus d'informations, consultez <xref:Microsoft.VisualBasic.Logging.AspLog>.  
  
 Le tableau suivant répertorie des exemples de tâches impliquant la `My.Application.Log` objet.  
  
|À|Voir|  
|--------|---------|  
|Écrire des informations sur les événements dans les écouteurs de journalisation de l’application|[Guide pratique : écrire des messages de journal](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Écrire des informations sur les exceptions dans les écouteurs de journalisation de l’application|[Guide pratique : enregistrer des exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Déterminer où `My.Application.Log` écrit les informations|[Procédure pas à pas : détermination de l’emplacement des informations My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
   
  
## Examples  
 Cet exemple montre comment utiliser la méthode `My.Application.Log.WriteEntry` pour enregistrer des informations de traçage. Pour plus d’informations, consultez [Comment : écrire des Messages de journal](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.VisualBasic.Logging.Log" />.</summary>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.VisualBasic.Logging.Log" />.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.Logging.Log : string -&gt; Microsoft.VisualBasic.Logging.Log" Usage="new Microsoft.VisualBasic.Logging.Log name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><see cref="T:System.String" />. Nom à donner à l'objet de propriété <see cref="P:Microsoft.VisualBasic.Logging.Log.TraceSource" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.VisualBasic.Logging.Log" />.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultFileLogWriter">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultFileLogWriter As FileLogTraceListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::FileLogTraceListener ^ DefaultFileLogWriter { Microsoft::VisualBasic::Logging::FileLogTraceListener ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultFileLogWriter : Microsoft.VisualBasic.Logging.FileLogTraceListener" Usage="Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.FileLogTraceListener</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'objet <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> sous-jacent de l'objet <see langword="Log" />.</summary>
        <value>Retourne l'objet <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> sous-jacent de l'objet <see langword="Log" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser cette propriété pour déterminer la configuration actuelle de la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> objet.  
  
 Dans les applications clientes, le `Log` objet est disponible via le `My.Application.Log` objet. Dans les applications Web, le `Log` objet est disponible via le `My.Log` objet.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ac6eb760-3d5d-461e-aedd-40599ee22e49">Dépannage : écouteurs de journalisation</related>
      </Docs>
    </Member>
    <Member MemberName="InitializeWithDefaultsSinceNoConfigExists">
      <MemberSignature Language="C#" Value="protected internal virtual void InitializeWithDefaultsSinceNoConfigExists ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblynewslot virtual instance void InitializeWithDefaultsSinceNoConfigExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub InitializeWithDefaultsSinceNoConfigExists ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void InitializeWithDefaultsSinceNoConfigExists();" />
      <MemberSignature Language="F#" Value="abstract member InitializeWithDefaultsSinceNoConfigExists : unit -&gt; unit&#xA;override this.InitializeWithDefaultsSinceNoConfigExists : unit -&gt; unit" Usage="log.InitializeWithDefaultsSinceNoConfigExists " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée un objet <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> et l'ajoute à la collection <see cref="P:System.Diagnostics.TraceSource.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode crée un nouveau <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>, définit son nom `FileLog`et le configure pour enregistrer les messages avec un niveau de gravité <xref:System.Diagnostics.SourceLevels.Information> et versions supérieures. La nouvelle <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> objet est ensuite ajouté à la <xref:System.Diagnostics.TraceSource.Listeners%2A> collection.  
  
 Le <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> appelle la méthode si le <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> propriété n’a pas été configurée. La source de suivi peut être configurée dans le fichier de configuration de l’application.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="TraceSource">
      <MemberSignature Language="C#" Value="public System.Diagnostics.TraceSource TraceSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.TraceSource TraceSource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TraceSource As TraceSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::TraceSource ^ TraceSource { System::Diagnostics::TraceSource ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TraceSource : System.Diagnostics.TraceSource" Usage="Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'objet <see cref="T:System.Diagnostics.TraceSource" /> sous-jacent de l'objet <see langword="Log" />.</summary>
        <value>Retourne l'objet <see cref="T:System.Diagnostics.TraceSource" /> sous-jacent de l'objet <see langword="Log" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser cette propriété pour déterminer la configuration actuelle de la `Log` objet.  
  
 Dans les applications clientes, le `Log` objet est disponible via le `My.Application.Log` objet. Dans les applications Web, le `Log` objet est disponible via le `My.Log` objet.  
  
 Il s’agit d’un membre avancé ; Il n’affiche pas dans IntelliSense, sauf si vous sélectionnez le **tous les** onglet.  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `TraceSource` propriété.  
  
|À|Voir|  
|--------|---------|  
|Obtenir des informations pour chacun de la `Log` écouteurs de journalisation de l’objet.|[Dépannage : écouteurs de journalisation](~/docs/visual-basic/developing-apps/programming/log-info/troubleshooting-log-listeners.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|------------------|---------------|  
|Application Windows|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|**Oui**|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceSource" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ac6eb760-3d5d-461e-aedd-40599ee22e49">Dépannage : écouteurs de journalisation</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteEntry">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Écrit un message dans les écouteurs de journalisation de l'application.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string -&gt; unit" Usage="log.WriteEntry message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Obligatoire. Message à consigner. Si <paramref name="message" /> est <see langword="Nothing" />, une chaîne vide est utilisée.</param>
        <summary>Écrit un message dans les écouteurs de journalisation de l'application.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `WriteEntry` méthode écrit un message dans les écouteurs de journalisation de l’événement de l’application.  
  
 Dans les applications clientes, le `Log` objet est disponible via le `My.Application.Log` objet. Dans les applications Web, le `Log` objet est disponible via le `My.Log` objet.  
  
 Pour en savoir plus le journal dans lequel les écouteurs reçoivent le `WriteEntry` messages de la méthode, consultez [procédure pas à pas : Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Vous pouvez modifier des écouteurs de journalisation par défaut. Pour plus d’informations, consultez [Utilisation des journaux d’application](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Pour les surcharges qui ne prennent pas le `id` argument, le `id` écrites dans le journal est défini par le tableau suivant.  
  
|`severity`|Par défaut `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 Le tableau suivant répertorie des exemples de tâches impliquant la `WriteEntry` (méthode).  
  
|À|Voir|  
|--------|---------|  
|Écrire des informations sur les événements dans les écouteurs de journalisation de l’application|[Guide pratique : écrire des messages de journal](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Déterminer où `Log` écrit les informations|[Procédure pas à pas : détermination de l’emplacement des informations My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|------------------|---------------|  
|Application Windows|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|**Oui**|  
  
   
  
## Examples  
 Cet exemple montre comment utiliser la méthode `My.Application.Log.WriteEntry` pour enregistrer des informations de traçage. Pour plus d’informations, consultez [Comment : écrire des Messages de journal](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Cet exemple de code peut s’exécuter uniquement dans une application cliente. Modification `My.Application.Log.WriteEntry` à `My.Log.WriteEntry` pour les applications Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Le code d'un niveau de confiance partiel appelle la méthode, mais effectue l'écriture dans un écouteur de journal des événements qui requiert une confiance totale.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Utilisation des journaux des applications dans Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">Comment : écrire des messages de journal</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Procédure pas à pas : détermination de l'emplacement des informations My.Application.Log</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.TraceEventType -&gt; unit" Usage="log.WriteEntry (message, severity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
      </Parameters>
      <Docs>
        <param name="message">Obligatoire. Message à consigner. Si <paramref name="message" /> est <see langword="Nothing" />, une chaîne vide est utilisée.</param>
        <param name="severity">Type de message. Par défaut, <see langword="TraceEventType.Information" />.</param>
        <summary>Écrit un message dans les écouteurs de journalisation de l'application.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `WriteEntry` méthode écrit un message dans les écouteurs de journalisation de l’événement de l’application.  
  
 Dans les applications clientes, le `Log` objet est disponible via le `My.Application.Log` objet. Dans les applications Web, le `Log` objet est disponible via le `My.Log` objet.  
  
 Pour en savoir plus le journal dans lequel les écouteurs reçoivent le `WriteEntry` messages de la méthode, consultez [procédure pas à pas : Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Vous pouvez modifier des écouteurs de journalisation par défaut. Pour plus d’informations, consultez [Utilisation des journaux d’application](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Pour les surcharges qui ne prennent pas le `id` argument, le `id` écrites dans le journal est défini par le tableau suivant.  
  
|`severity`|Par défaut `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 Le tableau suivant répertorie des exemples de tâches impliquant la `WriteEntry` (méthode).  
  
|À|Voir|  
|--------|---------|  
|Écrire des informations sur les événements dans les écouteurs de journalisation de l’application|[Guide pratique : écrire des messages de journal](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Déterminer où `Log` écrit les informations|[Procédure pas à pas : détermination de l’emplacement des informations My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|------------------|---------------|  
|Application Windows|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|**Oui**|  
  
   
  
## Examples  
 Cet exemple montre comment utiliser la méthode `My.Application.Log.WriteEntry` pour enregistrer des informations de traçage. Pour plus d’informations, consultez [Comment : écrire des Messages de journal](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Cet exemple de code peut s’exécuter uniquement dans une application cliente. Modification `My.Application.Log.WriteEntry` à `My.Log.WriteEntry` pour les applications Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Le type de message ne fait pas partie des valeurs de l'énumération <see cref="T:System.Diagnostics.TraceEventType" />.</exception>
        <exception cref="T:System.Security.SecurityException">Le code d'un niveau de confiance partiel appelle la méthode, mais effectue l'écriture dans un écouteur de journal des événements qui requiert une confiance totale.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Utilisation des journaux des applications dans Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">Comment : écrire des messages de journal</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Procédure pas à pas : détermination de l'emplacement des informations My.Application.Log</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity, int id);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.TraceEventType * int -&gt; unit" Usage="log.WriteEntry (message, severity, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Obligatoire. Message à consigner. Si <paramref name="message" /> est <see langword="Nothing" />, une chaîne vide est utilisée.</param>
        <param name="severity">Type de message. Par défaut, <see langword="TraceEventType.Information" />.</param>
        <param name="id">Identificateur de message, utilisé en général pour la corrélation. Par défaut, associé à <c>entryType</c> comme décrit dans le tableau.</param>
        <summary>Écrit un message dans les écouteurs de journalisation de l'application.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `WriteEntry` méthode écrit un message dans les écouteurs de journalisation de l’événement de l’application.  
  
 Dans les applications clientes, le `Log` objet est disponible via le `My.Application.Log` objet. Dans les applications Web, le `Log` objet est disponible via le `My.Log` objet.  
  
 Pour en savoir plus le journal dans lequel les écouteurs reçoivent le `WriteEntry` messages de la méthode, consultez [procédure pas à pas : Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Vous pouvez modifier des écouteurs de journalisation par défaut. Pour plus d’informations, consultez [Utilisation des journaux d’application](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Pour les surcharges qui ne prennent pas le `id` argument, le `id` écrites dans le journal est défini par le tableau suivant.  
  
|`severity`|Par défaut `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 Le tableau suivant répertorie des exemples de tâches impliquant la `WriteEntry` (méthode).  
  
|À|Voir|  
|--------|---------|  
|Écrire des informations sur les événements dans les écouteurs de journalisation de l’application|[Guide pratique : écrire des messages de journal](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Déterminer où `Log` écrit les informations|[Procédure pas à pas : détermination de l’emplacement des informations My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|------------------|---------------|  
|Application Windows|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|**Oui**|  
  
   
  
## Examples  
 Cet exemple montre comment utiliser la méthode `My.Application.Log.WriteEntry` pour enregistrer des informations de traçage. Pour plus d’informations, consultez [Comment : écrire des Messages de journal](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Cet exemple de code peut s’exécuter uniquement dans une application cliente. Modification `My.Application.Log.WriteEntry` à `My.Log.WriteEntry` pour les applications Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Le type de message ne fait pas partie des valeurs de l'énumération <see cref="T:System.Diagnostics.TraceEventType" />.</exception>
        <exception cref="T:System.Security.SecurityException">Le code d'un niveau de confiance partiel appelle la méthode, mais effectue l'écriture dans un écouteur de journal des événements qui requiert une confiance totale.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Utilisation des journaux des applications dans Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">Comment : écrire des messages de journal</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Procédure pas à pas : détermination de l'emplacement des informations My.Application.Log</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteException">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Écrit des informations sur les exceptions dans les écouteurs de journalisation de l'application.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception -&gt; unit" Usage="log.WriteException ex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="ex">Obligatoire. Exception à enregistrer.</param>
        <summary>Écrit des informations sur les exceptions dans les écouteurs de journalisation de l'application.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `WriteException` méthode écrit les informations contenues dans les écouteurs de journalisation de l’événement de l’application d’une exception.  
  
 Dans les applications clientes, le `Log` objet est disponible via le `My.Application.Log` objet. Dans les applications Web, le `Log` objet est disponible via le `My.Log` objet.  
  
 Pour en savoir plus le journal dans lequel les écouteurs reçoivent le `WriteException` messages de la méthode, consultez [procédure pas à pas : Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Vous pouvez modifier des écouteurs de journalisation par défaut. Pour plus d’informations, consultez [Utilisation des journaux d’application](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Pour les surcharges qui ne prennent pas le `id` argument, l’identificateur écrit dans le journal est défini par le tableau suivant.  
  
|`severity`|Par défaut `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 Le tableau suivant répertorie des exemples de tâches impliquant la `WriteException` (méthode).  
  
|À|Voir|  
|--------|---------|  
|Écrire des informations sur les exceptions dans les écouteurs de journalisation de l’événement de l’application.|[Guide pratique : enregistrer des exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Déterminer l’emplacement où `Log` écrit les informations.|[Procédure pas à pas : détermination de l’emplacement des informations My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|------------------|---------------|  
|Application Windows|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|**Oui**|  
  
   
  
## Examples  
 Cet exemple montre comment utiliser le `My.Application.Log.WriteException` méthode pour enregistrer les exceptions. Supprimez les commentaires des lignes `Dim` et `MsgBox` pour déclencher une exception <xref:System.NullReferenceException>. Pour plus d’informations, consultez [Comment : enregistrer des Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Cet exemple de code peut s’exécuter uniquement dans une application cliente. Modification `My.Application.Log.WriteException` à `My.Log.WriteException` pour les applications Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ex" /> a la valeur <see langword="Nothing" />.</exception>
        <exception cref="T:System.Security.SecurityException">Le code d'un niveau de confiance partiel appelle la méthode, mais effectue l'écriture dans un écouteur de journal des événements qui requiert une confiance totale.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Utilisation des journaux des applications dans Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">Guide pratique pour enregistrer des exceptions en Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Procédure pas à pas : détermination de l'emplacement des informations My.Application.Log</related>
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception * System.Diagnostics.TraceEventType * string -&gt; unit" Usage="log.WriteException (ex, severity, additionalInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ex">Obligatoire. Exception à enregistrer.</param>
        <param name="severity">Type de message. Par défaut, <see cref="F:System.Diagnostics.TraceEventType.Error" />.</param>
        <param name="additionalInfo">Chaîne à ajouter au message. Par défaut, cette chaîne est vide.</param>
        <summary>Écrit des informations sur les exceptions dans les écouteurs de journalisation de l'application.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `WriteException` méthode écrit les informations contenues dans les écouteurs de journalisation de l’événement de l’application d’une exception.  
  
 Dans les applications clientes, le `Log` objet est disponible via le `My.Application.Log` objet. Dans les applications Web, le `Log` objet est disponible via le `My.Log` objet.  
  
 Pour en savoir plus le journal dans lequel les écouteurs reçoivent le `WriteException` messages de la méthode, consultez [procédure pas à pas : Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Vous pouvez modifier des écouteurs de journalisation par défaut. Pour plus d’informations, consultez [Utilisation des journaux d’application](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Pour les surcharges qui ne prennent pas le `id` argument, l’identificateur écrit dans le journal est défini par le tableau suivant.  
  
|`severity`|Par défaut `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 Le tableau suivant répertorie des exemples de tâches impliquant la `WriteException` (méthode).  
  
|À|Voir|  
|--------|---------|  
|Écrire des informations sur les exceptions dans les écouteurs de journalisation de l’événement de l’application.|[Guide pratique : enregistrer des exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Déterminer l’emplacement où `Log` écrit les informations.|[Procédure pas à pas : détermination de l’emplacement des informations My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|------------------|---------------|  
|Application Windows|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|**Oui**|  
  
   
  
## Examples  
 Cet exemple montre comment utiliser le `My.Application.Log.WriteException` méthode pour enregistrer les exceptions. Supprimez les commentaires des lignes `Dim` et `MsgBox` pour déclencher une exception <xref:System.NullReferenceException>. Pour plus d’informations, consultez [Comment : enregistrer des Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Cet exemple de code peut s’exécuter uniquement dans une application cliente. Modification `My.Application.Log.WriteException` à `My.Log.WriteException` pour les applications Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ex" /> a la valeur <see langword="Nothing" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Le type de message ne fait pas partie des valeurs de l'énumération <see cref="T:System.Diagnostics.TraceEventType" />.</exception>
        <exception cref="T:System.Security.SecurityException">Le code d'un niveau de confiance partiel appelle la méthode, mais effectue l'écriture dans un écouteur de journal des événements qui requiert une confiance totale.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Utilisation des journaux des applications dans Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">Guide pratique pour enregistrer des exceptions en Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Procédure pas à pas : détermination de l'emplacement des informations My.Application.Log</related>
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo, int id);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception * System.Diagnostics.TraceEventType * string * int -&gt; unit" Usage="log.WriteException (ex, severity, additionalInfo, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ex">Obligatoire. Exception à enregistrer.</param>
        <param name="severity">Type de message. Par défaut, <see cref="F:System.Diagnostics.TraceEventType.Error" />.</param>
        <param name="additionalInfo">Chaîne à ajouter au message. Par défaut, cette chaîne est vide.</param>
        <param name="id">Identificateur de message, utilisé en général pour la corrélation. Il est associé par défaut à <c>entryType</c> comme décrit dans le tableau dans la section Notes.</param>
        <summary>Écrit des informations sur les exceptions dans les écouteurs de journalisation de l'application.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `WriteException` méthode écrit les informations contenues dans les écouteurs de journalisation de l’événement de l’application d’une exception.  
  
 Dans les applications clientes, le `Log` objet est disponible via le `My.Application.Log` objet. Dans les applications Web, le `Log` objet est disponible via le `My.Log` objet.  
  
 Pour en savoir plus le journal dans lequel les écouteurs reçoivent le `WriteException` messages de la méthode, consultez [procédure pas à pas : Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Vous pouvez modifier des écouteurs de journalisation par défaut. Pour plus d’informations, consultez [Utilisation des journaux d’application](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Pour les surcharges qui ne prennent pas le `id` argument, l’identificateur écrit dans le journal est défini par le tableau suivant.  
  
|`severity`|Par défaut `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 Le tableau suivant répertorie des exemples de tâches impliquant la `WriteException` (méthode).  
  
|À|Voir|  
|--------|---------|  
|Écrire des informations sur les exceptions dans les écouteurs de journalisation de l’événement de l’application.|[Guide pratique : enregistrer des exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Déterminer l’emplacement où `Log` écrit les informations.|[Procédure pas à pas : détermination de l’emplacement des informations My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|------------------|---------------|  
|Application Windows|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|**Oui**|  
  
   
  
## Examples  
 Cet exemple montre comment utiliser le `My.Application.Log.WriteException` méthode pour enregistrer les exceptions. Supprimez les commentaires des lignes `Dim` et `MsgBox` pour déclencher une exception <xref:System.NullReferenceException>. Pour plus d’informations, consultez [Comment : enregistrer des Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Cet exemple de code peut s’exécuter uniquement dans une application cliente. Modification `My.Application.Log.WriteException` à `My.Log.WriteException` pour les applications Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ex" /> a la valeur <see langword="Nothing" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Le type de message ne fait pas partie des valeurs de l'énumération <see cref="T:System.Diagnostics.TraceEventType" />.</exception>
        <exception cref="T:System.Security.SecurityException">Le code d'un niveau de confiance partiel appelle la méthode, mais effectue l'écriture dans un écouteur de journal des événements qui requiert une confiance totale.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Utilisation des journaux des applications dans Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">Guide pratique pour enregistrer des exceptions en Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Procédure pas à pas : détermination de l'emplacement des informations My.Application.Log</related>
      </Docs>
    </Member>
  </Members>
</Type>