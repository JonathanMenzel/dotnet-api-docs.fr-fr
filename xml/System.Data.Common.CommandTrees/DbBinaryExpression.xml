<Type Name="DbBinaryExpression" FullName="System.Data.Common.CommandTrees.DbBinaryExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6e69676de308cc3dc0b1c7048f28343cc68a73f7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30377823" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class DbBinaryExpression : System.Data.Common.CommandTrees.DbExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbBinaryExpression extends System.Data.Common.CommandTrees.DbExpression" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.CommandTrees.DbBinaryExpression" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbBinaryExpression&#xA;Inherits DbExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbBinaryExpression abstract : System::Data::Common::CommandTrees::DbExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.CommandTrees.DbExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Implémente la fonctionnalité de base requise par les expressions qui acceptent deux opérandes d'expression.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public System.Data.Common.CommandTrees.DbExpression Left { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.CommandTrees.DbExpression Left" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.CommandTrees.DbBinaryExpression.Left" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Left As DbExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::CommandTrees::DbExpression ^ Left { System::Data::Common::CommandTrees::DbExpression ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'objet <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> qui définit l'argument de gauche.</summary>
        <value>Objet <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> qui définit l'argument de gauche.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les types des expressions dérivées peuvent effectuer des vérifications de types plus strictes lorsque la propriété <xref:System.Data.Common.CommandTrees.DbBinaryExpression.Left%2A> est définie. Par exemple, <xref:System.Data.Common.CommandTrees.DbUnionAllExpression> exige que son expression de gauche ait un type de résultat collection, tandis que <xref:System.Data.Common.CommandTrees.DbAndExpression> exige un type de résultat Boolean. En règle générale, les types des expressions dérivées n'autorisent pas l'affectation à la propriété <xref:System.Data.Common.CommandTrees.DbBinaryExpression.Left%2A> d'une expression dont le type de résultat n'est pas égal au ou apte à être promu en type de résultat de la valeur actuelle.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L’expression est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">L'expression n'est pas associée à l'arborescence de commandes de l'objet <see cref="T:System.Data.Common.CommandTrees.DbBinaryExpression" />,  
  
 ou son type de résultat n’est pas égal ou ne peut être promu au type requis pour l’argument de gauche.</exception>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public System.Data.Common.CommandTrees.DbExpression Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.CommandTrees.DbExpression Right" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.CommandTrees.DbBinaryExpression.Right" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Right As DbExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::CommandTrees::DbExpression ^ Right { System::Data::Common::CommandTrees::DbExpression ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'objet <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> qui définit l'argument de droite.</summary>
        <value>Objet <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> qui définit l'argument de droite.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les types des expressions dérivées peuvent effectuer des vérifications de types plus strictes lorsque la propriété <xref:System.Data.Common.CommandTrees.DbBinaryExpression.Right%2A> est définie. Par exemple, <xref:System.Data.Common.CommandTrees.DbUnionAllExpression> exige que son expression de droite ait un type de résultat collection, tandis que <xref:System.Data.Common.CommandTrees.DbAndExpression> exige un type de résultat Boolean. En règle générale, les types des expressions dérivées n'autorisent pas l'affectation à la propriété <xref:System.Data.Common.CommandTrees.DbBinaryExpression.Right%2A> d'une expression dont le type de résultat n'est pas égal au ou apte à être promu en type de résultat de la valeur actuelle.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L’expression est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">L'expression n'est pas associée à l'arborescence de commandes de l'objet <see cref="T:System.Data.Common.CommandTrees.DbBinaryExpression" />,  
  
 ou son type de résultat n’est pas égal ou ne peut être promu au type requis pour l’argument de droite.</exception>
      </Docs>
    </Member>
  </Members>
</Type>