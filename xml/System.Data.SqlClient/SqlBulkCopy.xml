<Type Name="SqlBulkCopy" FullName="System.Data.SqlClient.SqlBulkCopy">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="913de004f355c8ec72b363a3a33c142db5cfa36d" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32038036" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlBulkCopy : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlBulkCopy extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlBulkCopy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlBulkCopy&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlBulkCopy sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Permet de charger en masse une table SQL Server avec des données d’une autre source.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft SQL Server inclut un utilitaire de ligne de commande connu nommé **bcp** pour transférer les données d’une table vers une autre, que ce soit sur un serveur unique, ou entre des serveurs. La <xref:System.Data.SqlClient.SqlBulkCopy> classe vous permet d’écrire des solutions de code managé qui fournissent des fonctionnalités similaires. Il existe autres façons de charger des données dans une table SQL Server (instructions INSERT, par exemple), mais <xref:System.Data.SqlClient.SqlBulkCopy> offre un avantage significative des performances.  
  
 La classe <xref:System.Data.SqlClient.SqlBulkCopy> permet d'écrire des données uniquement dans des tables SQL Server. Toutefois, la source de données n’est pas limitée à SQL Server ; n’importe quelle source de données peut être utilisé tant que les données puissent être chargées dans un <xref:System.Data.DataTable> de l’instance ou lues avec une <xref:System.Data.IDataReader> instance.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> échoue lorsque le chargement en masse un <xref:System.Data.DataTable> colonne de type <xref:System.Data.SqlTypes.SqlDateTime> dans un serveur SQL Server colonne dont le type est un des types de date et d’heure ajoutées dans SQL Server 2008.  
  
   
  
## Examples  
 L'application console suivante montre comment charger des données à l'aide de la classe <xref:System.Data.SqlClient.SqlBulkCopy>. Dans cet exemple, un <xref:System.Data.SqlClient.SqlDataReader> est utilisé pour copier des données à partir de la **Production.Product** table dans SQL Server **AdventureWorks** base de données dans une table semblable dans la même base de données.  
  
> [!IMPORTANT]
>  Cet exemple ne s’exécutera pas à moins que vous ayez créé les tables de travail comme décrit dans [configuration exemple de copie en bloc](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ce code est fourni pour illustrer la syntaxe pour l’utilisation de **SqlBulkCopy** uniquement. Si les tables source et de destination sont dans la même instance de SQL Server, il est plus facile et plus rapide d’utiliser Transact-SQL `INSERT … SELECT` instruction pour copier les données.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">Instance déjà ouverte de <see cref="T:System.Data.SqlClient.SqlConnection" /> qui sera utilisée pour effectuer l'opération de copie en bloc. Si votre chaîne de connexion n'utilise pas <see langword="Integrated Security = true" />, vous pouvez utiliser les <see cref="T:System.Data.SqlClient.SqlCredential" /> pour obtenir l'ID d'utilisateur et le mot de passe de façon plus sécurisée qu'en spécifiant l'ID d'utilisateur et le mot de passe sous forme de texte dans la chaîne de connexion.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> à l'aide de l'instance ouverte de <see cref="T:System.Data.SqlClient.SqlConnection" /> spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Étant donné que la connexion est déjà ouverte lorsque le <xref:System.Data.SqlClient.SqlBulkCopy> instance est initialisée, la connexion reste ouverte après le <xref:System.Data.SqlClient.SqlBulkCopy> instance est fermée.  
  
 Si le `connection` argument est null, un <xref:System.ArgumentNullException> est levée.  
  
   
  
## Examples  
 L’application console suivante montre comment en bloc des données de charge à l’aide d’une connexion qui est déjà ouverte. Dans cet exemple, un <xref:System.Data.SqlClient.SqlDataReader> est utilisé pour copier des données à partir de la **Production.Product** table dans SQL Server **AdventureWorks** base de données dans une table semblable dans la même base de données. L’exemple est uniquement fourni à des fins de démonstration. Vous n’utiliserez pas `SqlBulkCopy` pour déplacer les données d’une table vers une autre dans la même base de données dans une application de production. Notez que la source de données n’a pas à se trouver sur le serveur SQL Server ; Vous pouvez utiliser n’importe quelle source de données qui permettre être lues pour un <xref:System.Data.IDataReader> ou chargé dans un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Cet exemple ne s’exécutera pas à moins que vous ayez créé les tables de travail comme décrit dans [configuration exemple de copie en bloc](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ce code est fourni pour illustrer la syntaxe pour l’utilisation de **SqlBulkCopy** uniquement. Si les tables source et de destination sont dans la même instance de SQL Server, il est plus facile et plus rapide d’utiliser Transact-SQL `INSERT … SELECT` instruction pour copier les données.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Chaîne définissant la connexion qui sera ouverte afin d'être utilisée par l'instance de <see cref="T:System.Data.SqlClient.SqlBulkCopy" />. Si votre chaîne de connexion n'utilise pas <see langword="Integrated Security = true" />, vous pouvez utiliser la <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> ou la <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> et les <see cref="T:System.Data.SqlClient.SqlCredential" /> pour obtenir l'ID d'utilisateur et le mot de passe de façon plus sécurisée qu'en spécifiant l'ID d'utilisateur et le mot de passe sous forme de texte dans la chaîne de connexion.</param>
        <summary>Initialise et ouvre une nouvelle instance de <see cref="T:System.Data.SqlClient.SqlConnection" /> basée sur le <paramref name="connectionString" /> fourni. Ce constructeur utilise <see cref="T:System.Data.SqlClient.SqlConnection" /> pour initialiser une nouvelle instance de la classe <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La connexion est fermée automatiquement à la fin de l’opération de copie en bloc.  
  
 Si `connectionString` a la valeur null, un <xref:System.ArgumentNullException> est levée. Si `connectionString` est une chaîne vide, un <xref:System.ArgumentException> est levée.  
  
   
  
## Examples  
 L’application console suivante montre comment en bloc des données de charge à l’aide d’une connexion spécifiée en tant que chaîne. La connexion est fermée automatiquement lorsque le <xref:System.Data.SqlClient.SqlBulkCopy> instance est fermée.  
  
 Dans cet exemple, la source de données est tout d’abord en lecture à partir d’une table SQL Server à un <xref:System.Data.SqlClient.SqlDataReader> instance. La source de données ne dispose pas se trouver sur le serveur SQL Server ; Vous pouvez utiliser n’importe quelle source de données qui permettre être lues pour un <xref:System.Data.IDataReader> ou chargé dans un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Cet exemple ne s’exécutera pas à moins que vous ayez créé les tables de travail comme décrit dans [configuration exemple de copie en bloc](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ce code est fourni pour illustrer la syntaxe pour l’utilisation de **SqlBulkCopy** uniquement. Si les tables source et de destination sont dans la même instance de SQL Server, il est plus facile et plus rapide d’utiliser Transact-SQL `INSERT … SELECT` instruction pour copier les données.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, copyOptions As SqlBulkCopyOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString, System::Data::SqlClient::SqlBulkCopyOptions copyOptions);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">Chaîne définissant la connexion qui sera ouverte afin d'être utilisée par l'instance de <see cref="T:System.Data.SqlClient.SqlBulkCopy" />. Si votre chaîne de connexion n'utilise pas <see langword="Integrated Security = true" />, vous pouvez utiliser la <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> ou la <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> et les <see cref="T:System.Data.SqlClient.SqlCredential" /> pour obtenir l'ID d'utilisateur et le mot de passe de façon plus sécurisée qu'en spécifiant l'ID d'utilisateur et le mot de passe sous forme de texte dans la chaîne de connexion.</param>
        <param name="copyOptions">Combinaison de valeurs de l'énumération <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> qui détermine les lignes de la source de données qui sont copiées dans la table de destination.</param>
        <summary>Initialise et ouvre une nouvelle instance de <see cref="T:System.Data.SqlClient.SqlConnection" /> basée sur le <paramref name="connectionString" /> fourni. Ce constructeur utilise ce <see cref="T:System.Data.SqlClient.SqlConnection" /> pour initialiser une nouvelle instance de la classe <see cref="T:System.Data.SqlClient.SqlBulkCopy" />. L'instance de <see cref="T:System.Data.SqlClient.SqlConnection" /> se comporte conformément aux options fournies dans le paramètre <paramref name="copyOptions" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez obtenir des informations détaillées sur toutes les options de copie en bloc dans la <xref:System.Data.SqlClient.SqlBulkCopyOptions> rubrique.  
  
   
  
## Examples  
 L’application console suivante montre comment effectuer un chargement en masse à l’aide d’une connexion spécifiée en tant que chaîne. Une option est définie pour utiliser la valeur dans la colonne d’identité de la table source lors du chargement de la table de destination. Dans cet exemple, la source de données est tout d’abord en lecture à partir d’une table SQL Server à un <xref:System.Data.SqlClient.SqlDataReader> instance. La table source et table de destination incluent une colonne d’identité. Par défaut, une nouvelle valeur pour le **identité** colonne est générée dans la table de destination pour chaque ligne ajoutée. Dans cet exemple, une option est définie lorsque la connexion est ouverte qui oblige le processus de chargement en bloc à utiliser le **identité** à la place des valeurs de la table source. Pour voir comment l’option altère le fonctionnement du chargement en bloc, exécutez l’exemple avec le **dbo. BulkCopyDemoMatchingColumns** table vide. Chargement de toutes les lignes de la source. Réexécutez ensuite l’exemple sans vider la table. Une exception est levée et le code écrit un message dans la console vous notifiant que les lignes n’ont pas été ajoutées en raison de violations de contrainte de clé primaire.  
  
> [!IMPORTANT]
>  Cet exemple ne s’exécutera pas à moins que vous ayez créé les tables de travail comme décrit dans [configuration exemple de copie en bloc](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ce code est fourni pour illustrer la syntaxe pour l’utilisation de **SqlBulkCopy** uniquement. Si les tables source et de destination sont dans la même instance de SQL Server, il est plus facile et plus rapide d’utiliser Transact-SQL `INSERT … SELECT` instruction pour copier les données.  
  
 [!code-csharp[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions, class System.Data.SqlClient.SqlTransaction externalTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection, copyOptions As SqlBulkCopyOptions, externalTransaction As SqlTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlBulkCopyOptions copyOptions, System::Data::SqlClient::SqlTransaction ^ externalTransaction);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
        <Parameter Name="externalTransaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="connection">Instance déjà ouverte de <see cref="T:System.Data.SqlClient.SqlConnection" /> qui sera utilisée pour effectuer l'opération de copie en bloc. Si votre chaîne de connexion n'utilise pas <see langword="Integrated Security = true" />, vous pouvez utiliser les <see cref="T:System.Data.SqlClient.SqlCredential" /> pour obtenir l'ID d'utilisateur et le mot de passe de façon plus sécurisée qu'en spécifiant l'ID d'utilisateur et le mot de passe sous forme de texte dans la chaîne de connexion.</param>
        <param name="copyOptions">Combinaison de valeurs de l'énumération <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> qui détermine les lignes de la source de données qui sont copiées dans la table de destination.</param>
        <param name="externalTransaction">Instance de <see cref="T:System.Data.SqlClient.SqlTransaction" /> existante sous laquelle la copie en bloc aura lieu.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> à l'aide de l'instance ouverte existante de <see cref="T:System.Data.SqlClient.SqlConnection" /> fournie. L'instance de <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> se comporte conformément aux options fournies dans le paramètre <paramref name="copyOptions" />. Si un <see cref="T:System.Data.SqlClient.SqlTransaction" /> non null est fourni, les opérations de copie seront effectuées dans cette transaction.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si les options incluent `UseInternalTransaction` et `externalTransaction` argument n’est pas null, une **InvalidArgumentException** est levée.  
  
 Pour obtenir des exemples montrant comment utiliser `SqlBulkCopy` dans une transaction, consultez [Transaction et opérations de copie en bloc](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchSize">
      <MemberSignature Language="C#" Value="public int BatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Property BatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BatchSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Nombre de lignes dans chaque lot. À la fin de chaque lot, les lignes dans le lot sont envoyées au serveur.</summary>
        <value>Valeur entière de la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" /> ou zéro si aucune valeur n’a été définie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un lot est terminé lorsque <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> lignes ont été traitées ou il n’existe plus aucune ligne à envoyer à la source de données de destination.  
  
 Zéro (la valeur par défaut) indique que chaque <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> opération est un lot unique.  
  
 Si le <xref:System.Data.SqlClient.SqlBulkCopy> instance a été déclarée sans le <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> option en vigueur, les lignes sont envoyées au serveur <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> les lignes à une heure, mais aucune action relative à la transaction est effectuée. Si <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> est activée, chaque lot de lignes est inséré comme une transaction distincte.  
  
 Le <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> propriété peut être définie à tout moment. Si une copie en bloc est déjà en cours d’exécution, le lot actuel est dimensionné en fonction de la taille de lot précédente. Les lots suivants utilisent la nouvelle taille. Si le <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> est initialement égale à zéro et les modifications apportées lors de l’un <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> opération est déjà en cours d’exécution, cette opération charge les données comme un lot unique. Toute <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> opérations sur le même <xref:System.Data.SqlClient.SqlBulkCopy> instance utiliser la nouvelle <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.  
  
   
  
## Examples  
 L’application console suivante montre comment le chargement en masse données par lots de 50 lignes. Pour un exemple illustrant comment <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> avec une transaction, consultez [Transaction et opérations de copie en bloc](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  
  
 Dans cet exemple, la source de données est tout d’abord en lecture à partir d’une table SQL Server à un <xref:System.Data.SqlClient.SqlDataReader> instance. La source de données ne dispose pas se trouver sur le serveur SQL Server ; Vous pouvez utiliser n’importe quelle source de données qui permettre être lues pour un <xref:System.Data.IDataReader> ou chargé dans un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Cet exemple ne s’exécutera pas à moins que vous ayez créé les tables de travail comme décrit dans [configuration exemple de copie en bloc](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ce code est fourni pour illustrer la syntaxe pour l’utilisation de **SqlBulkCopy** uniquement. Si les tables source et de destination sont dans la même instance de SQL Server, il est plus facile et plus rapide d’utiliser Transact-SQL `INSERT … SELECT` instruction pour copier les données.  
  
 [!code-csharp[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BulkCopyTimeout">
      <MemberSignature Language="C#" Value="public int BulkCopyTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BulkCopyTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BulkCopyTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BulkCopyTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Nombre de secondes pour l’achèvement de l’opération avant qu’elle n’expire.</summary>
        <value>Valeur entière de la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />. La valeur par défaut est 30 secondes. La valeur 0 indique une absence de limite ; la copie en bloc attend indéfiniment.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’opération n’expire, la transaction n’est pas validée et toutes les lignes copiées sont supprimés de la table de destination.  
  
   
  
## Examples  
 L’application console suivante montre comment modifier le délai d’attente de 60 secondes lorsque les données de chargement en bloc.  
  
 Dans cet exemple, la source de données est tout d’abord en lecture à partir d’une table SQL Server à un <xref:System.Data.SqlClient.SqlDataReader> instance. La source de données ne dispose pas se trouver sur le serveur SQL Server ; Vous pouvez utiliser n’importe quelle source de données qui permettre être lues pour un <xref:System.Data.IDataReader> ou chargé dans un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Cet exemple ne s’exécutera pas à moins que vous ayez créé les tables de travail comme décrit dans [configuration exemple de copie en bloc](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ce code est fourni pour illustrer la syntaxe pour l’utilisation de **SqlBulkCopy** uniquement. Si les tables source et de destination sont dans la même instance de SQL Server, il est plus facile et plus rapide d’utiliser un [!INCLUDE[tsql](~/includes/tsql-md.md)] `INSERT … SELECT` instruction pour copier les données.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ferme l’instance <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Après avoir appelé une <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> sur la <xref:System.Data.SqlClient.SqlBulkCopy> de l’objet, aucune autre opération ne réussira. Les appels à la <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> méthode lève un <xref:System.InvalidOperationException>.  
  
 Appelant le <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> méthode à partir de la <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> événement entraîne un <xref:System.InvalidOperationException> levée.  
  
 Notez qui s’ouvrent <xref:System.Data.SqlClient.SqlBulkCopy> instances sont fermées implicitement à la fin d’un `using` bloc.  
  
   
  
## Examples  
 L’exemple suivant utilise la même <xref:System.Data.SqlClient.SqlBulkCopy> instance à ajouter des commandes et les détails associés à deux tables de destination. Étant donné que la **AdventureWorks** commande tables sont volumineuses, l’exemple lit uniquement les commandes passées par un certain nombre de compte et copie en bloc ces commandes et les détails pour les tables de destination. Le <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> méthode est utilisée uniquement après que les deux opérations de copie en bloc sont terminées.  
  
> [!IMPORTANT]
>  Cet exemple ne s’exécutera pas à moins que vous ayez créé les tables de travail comme décrit dans [configuration exemple de copie en bloc](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ce code est fourni pour illustrer la syntaxe pour l’utilisation de **SqlBulkCopy** uniquement. Si les tables source et de destination sont dans la même instance de SQL Server, il est plus facile et plus rapide d’utiliser Transact-SQL `INSERT … SELECT` instruction pour copier les données.  
  
 [!code-csharp[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnMappings">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnMappings As SqlBulkCopyColumnMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ ColumnMappings { System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlBulkCopyColumnMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retourne une collection d’éléments <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />. Les mappages de colonnes définissent les relations entre les colonnes de la source de données et les colonnes de la destination.</summary>
        <value>Collection de mappages de colonnes. Par défaut, cette collection est vide.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la source de données et la table de destination ont le même nombre de colonnes, et la position ordinale de chaque colonne source dans la source de données correspond à la position ordinale de la colonne de destination correspondante, la <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> collection n’est pas nécessaire. Toutefois, si le nombre de colonnes diffère ou que les positions ordinales ne sont pas cohérentes, vous devez utiliser <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> pour vous assurer que les données sont copiées dans les colonnes appropriées.  
  
 Pendant l’exécution d’une opération de copie en bloc, cette collection est accessible, mais il ne peut pas être modifié. Toute tentative de modification lèvera une <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
      </Docs>
    </Member>
    <Member MemberName="DestinationTableName">
      <MemberSignature Language="C#" Value="public string DestinationTableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DestinationTableName" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationTableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DestinationTableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Nom de la table de destination sur le serveur.</summary>
        <value>Valeur de chaîne de la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />, ou null si aucune valeur n’a été fournie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> n'a pas été défini lorsque <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> est appelée, un <xref:System.ArgumentNullException> est levée.  
  
 Si <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> est modifié pendant un <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> opération est en cours d’exécution, la modification n’affecte pas l’opération en cours. La nouvelle <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> valeur est utilisée lors du prochain un <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> méthode est appelée.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> est un nom en trois parties (`<database>.<owningschema>.<name>`). Vous pouvez qualifier le nom de la table avec sa base de données et son schéma propriétaire si vous choisissez. Toutefois, si le nom de la table utilise un trait de soulignement (« _ ») ou d’autres caractères spéciaux, vous devez isoler le nom à l’aide de la placer entre crochets comme dans (`[<database>.<owningschema>.<name_01>]`). Pour plus d’informations, consultez « Identificateurs » dans la documentation en ligne de SQL Server.  
  
 Vous pouvez copier en bloc des données dans une table temporaire à l’aide d’une valeur comme `tempdb..#table` ou `tempdb.<owner>.#table` pour le <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> propriété.  
  
   
  
## Examples  
 L’application console suivante montre comment en bloc des données de charge à l’aide d’une connexion qui est déjà ouverte. La table de destination est une table dans le **AdventureWorks** base de données.  
  
 Dans cet exemple, la connexion est tout d’abord utilisée pour lire les données d’une table SQL Server à un <xref:System.Data.SqlClient.SqlDataReader> instance. La source de données ne dispose pas se trouver sur le serveur SQL Server ; Vous pouvez utiliser n’importe quelle source de données qui permettre être lues pour un <xref:System.Data.IDataReader> ou chargé dans un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Cet exemple ne s’exécutera pas à moins que vous ayez créé les tables de travail comme décrit dans [configuration exemple de copie en bloc](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ce code est fourni pour illustrer la syntaxe pour l’utilisation de **SqlBulkCopy** uniquement. Si les tables source et de destination sont dans la même instance de SQL Server, il est plus facile et plus rapide d’utiliser Transact-SQL `INSERT … SELECT` instruction pour copier les données.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableStreaming">
      <MemberSignature Language="C#" Value="public bool EnableStreaming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableStreaming" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableStreaming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableStreaming { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Active ou désactive un objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> pour diffuser des données en continu à partir d’un objet <see cref="T:System.Data.IDataReader" />.</summary>
        <value>
          <see langword="true" /> si un objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> peut diffuser des données en continu à partir d’un objet <see cref="T:System.Data.IDataReader" /> ; sinon, false. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque <xref:System.Data.SqlClient.SqlBulkCopy.EnableStreaming%2A> est `true`, <xref:System.Data.SqlClient.SqlBulkCopy> lit à partir d’un <xref:System.Data.IDataReader> à l’aide de l’objet <xref:System.Data.CommandBehavior.SequentialAccess>, optimisation de l’utilisation de mémoire à l’aide de la <xref:System.Data.IDataReader> fonctionnalités de diffusion en continu. Lorsqu’elle est définie sur false, le <xref:System.Data.SqlClient.SqlBulkCopy> classe charge toutes les données retournées par la <xref:System.Data.IDataReader> objet en mémoire avant de l’envoyer à SQL Server ou SQL Azure.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyAfter">
      <MemberSignature Language="C#" Value="public int NotifyAfter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NotifyAfter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyAfter As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NotifyAfter { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Définit le nombre de lignes à traiter avant de générer un événement de notification.</summary>
        <value>Valeur entière de la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />, ou zéro si la propriété n'a pas été définie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété est conçue pour les composants d’interface utilisateur qui illustrent la progression d’une opération de copie en bloc. Il indique le nombre de lignes à traiter avant de générer un événement de notification. Le <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> propriété peut être définie à tout moment, même si une opération de copie en bloc est en cours d’exécution. Modifications apportées pendant une opération de copie en bloc prendront effet après la notification suivante. Le nouveau paramètre s’applique à toutes les opérations suivantes sur la même instance.  
  
 Si <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> est définie sur un nombre inférieur à zéro, un <xref:System.ArgumentOutOfRangeException> est levée.  
  
   
  
## Examples  
 L’application console suivante montre comment en bloc des données de charge à l’aide d’une connexion qui est déjà ouverte. Le <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> propriété est définie afin que le Gestionnaire d’événements est appelé une fois toutes les 50 lignes copiées dans la table.  
  
 Dans cet exemple, la connexion est tout d’abord utilisée pour lire les données d’une table SQL Server à un <xref:System.Data.SqlClient.SqlDataReader> instance. Ensuite, une deuxième connexion est ouvert pour copier les données en bloc. Notez que la source de données n’a pas à se trouver sur le serveur SQL Server ; Vous pouvez utiliser n’importe quelle source de données qui permettre être lues pour un <xref:System.Data.IDataReader> ou chargé dans un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Cet exemple ne s’exécutera pas à moins que vous ayez créé les tables de travail comme décrit dans [configuration exemple de copie en bloc](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ce code est fourni pour illustrer la syntaxe pour l’utilisation de **SqlBulkCopy** uniquement. Si les tables source et de destination sont dans la même instance de SQL Server, il est plus facile et plus rapide d’utiliser Transact-SQL `INSERT … SELECT` instruction pour copier les données.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SqlRowsCopied">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SqlRowsCopied As SqlRowsCopiedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlRowsCopiedEventHandler ^ SqlRowsCopied;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlRowsCopiedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit chaque fois que le nombre de lignes spécifié par la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> a été traité.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Notez que les paramètres de <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> et <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> sont indépendants. Réception d’un <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> événement n’implique pas que toutes les lignes ont été envoyées au serveur ou validées.  
  
 Vous ne pouvez pas appeler SqlBulkCopy.Close (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) ou SqlConnection.Close (<xref:System.Data.SqlClient.SqlConnection.Close%2A>) à partir de cet événement. Cette action provoquerait une <xref:System.InvalidOperationException> levée et la <xref:System.Data.SqlClient.SqlBulkCopy> état de l’objet ne change pas. Si l’utilisateur souhaite annuler l’opération à partir de l’événement, le <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> propriété de la <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> peut être utilisé. (Consultez [Transaction et opérations de copie en bloc](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md) pour obtenir des exemples qui utilisent la <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> propriété.)  
  
 Aucune action, tels que les activités de transaction, n’est pris en charge dans la connexion pendant l’exécution de l’opération de copie en bloc, et il est recommandé que vous N'utilisez pas la même connexion que celui utilisée lors de la <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> événement. Toutefois, vous pouvez ouvrir une autre connexion.  
  
   
  
## Examples  
 L’application console suivante montre comment en bloc des données de charge à l’aide d’une connexion qui est déjà ouverte. Le <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> propriété est définie afin que le Gestionnaire d’événements est appelé une fois toutes les 50 lignes copiées dans la table.  
  
 Dans cet exemple, la connexion est tout d’abord utilisée pour lire les données d’une table SQL Server à un <xref:System.Data.SqlClient.SqlDataReader> instance. Notez que la source de données n’a pas à se trouver sur le serveur SQL Server ; Vous pouvez utiliser n’importe quelle source de données qui permettre être lues pour un <xref:System.Data.IDataReader> ou chargé dans un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  Cet exemple ne s’exécutera pas à moins que vous ayez créé les tables de travail comme décrit dans [configuration exemple de copie en bloc](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ce code est fourni pour illustrer la syntaxe pour l’utilisation de **SqlBulkCopy** uniquement. Si les tables source et de destination sont dans la même instance de SQL Server, il est plus facile et plus rapide d’utiliser Transact-SQL `INSERT … SELECT` instruction pour copier les données.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez la méthode `Dispose` une fois que vous avez terminé d'utiliser <xref:System.Data.SqlClient.SqlBulkCopy>. La méthode `Dispose` rend le <xref:System.Data.SqlClient.SqlBulkCopy> inutilisable. Après avoir appelé `Dispose`, vous devez libérer toutes les références à la <xref:System.Data.SqlClient.SqlBulkCopy> pour que le garbage collector puisse récupérer la mémoire qui le <xref:System.Data.SqlClient.SqlBulkCopy> occupée.  
  
 Pour plus d’informations, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md) et [implémentant une méthode de suppression](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Appelez toujours `Dispose` avant de libérer votre dernière référence à <xref:System.Data.SqlClient.SqlBulkCopy>. Sinon, les ressources utilisées ne seront pas libérées tant que le garbage collector n'aura pas appelé la méthode <xref:System.Data.SqlClient.SqlBulkCopy> de l'objet `Finalize`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServer">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Copie toutes les lignes d'une source de données dans une table de destination spécifiée par la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> de l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si les ensembles de résultats actifs multiples (MARS) est désactivé, <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> établit la connexion occupée. Si MARS est activé, vous pouvez entrelacer les appels à <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> avec d’autres commandes dans la même connexion.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As DbDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::Common::DbDataReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Data.Common.DbDataReader" /> dont les lignes seront copiées dans la table de destination.</param>
        <summary>Copie toutes les lignes du tableau <see cref="T:System.Data.Common.DbDataReader" /> fourni dans une table de destination spécifiée par la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> de l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows">Tableau d'objets <see cref="T:System.Data.DataRow" /> qui seront copiés dans la table de destination.</param>
        <summary>Copie toutes les lignes du tableau <see cref="T:System.Data.DataRow" /> fourni dans une table de destination spécifiée par la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> de l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alors que l’opération de copie en bloc est en cours d’exécution, la destination associé <xref:System.Data.SqlClient.SqlConnection> est occupé à cette tâche, et aucune autre opération ne peut être effectuée sur la connexion.  
  
 Le <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> collection de mappages à partir de la <xref:System.Data.DataRow> colonnes dans la table de base de données de destination.  
  
   
  
## Examples  
 L’application console suivante montre comment charger des données à partir de bloc au format un <xref:System.Data.DataRow> tableau. La table de destination est une table dans le **AdventureWorks** base de données.  
  
 Dans cet exemple, un <xref:System.Data.DataTable> est créé au moment de l’exécution. Une seule ligne est sélectionnée dans le <xref:System.Data.DataTable> à copier dans la table de destination.  
  
> [!IMPORTANT]
>  Cet exemple ne s’exécutera pas à moins que vous ayez créé les tables de travail comme décrit dans [configuration exemple de copie en bloc](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ce code est fourni pour illustrer la syntaxe pour l’utilisation de **SqlBulkCopy** uniquement. Si les tables source et de destination sont dans la même instance de SQL Server, il est plus facile et plus rapide d’utiliser Transact-SQL `INSERT … SELECT` instruction pour copier les données.  
  
 [!code-csharp[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">
          <see cref="T:System.Data.DataTable" /> dont les lignes seront copiées dans la table de destination.</param>
        <summary>Copie toutes les lignes du <see cref="T:System.Data.DataTable" /> fourni dans une table de destination spécifiée par la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> de l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Toutes les lignes de la <xref:System.Data.DataTable> sont copiés dans la table de destination, à l’exception de ceux qui ont été supprimés.  
  
 Alors que l’opération de copie en bloc est en cours d’exécution, la destination associé <xref:System.Data.SqlClient.SqlConnection> est occupé à cette tâche, et aucune autre opération ne peut être effectuée sur la connexion.  
  
 Le <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> collection de mappages à partir de la <xref:System.Data.DataTable> colonnes dans la table de base de données de destination.  
  
   
  
## Examples  
 L’application Console suivante montre comment charger des données à partir de bloc au format un <xref:System.Data.DataTable>. La table de destination est une table dans le **AdventureWorks** base de données.  
  
 Dans cet exemple, un <xref:System.Data.DataTable> est créé au moment de l’exécution et est la source de la `SqlBulkCopy` opération.  
  
> [!IMPORTANT]
>  Cet exemple ne s’exécutera pas à moins que vous ayez créé les tables de travail comme décrit dans [configuration exemple de copie en bloc](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ce code est fourni pour illustrer la syntaxe pour l’utilisation de **SqlBulkCopy** uniquement. Si les tables source et de destination sont dans la même instance de SQL Server, il est plus facile et plus rapide d’utiliser Transact-SQL `INSERT … SELECT` instruction pour copier les données.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::IDataReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Data.IDataReader" /> dont les lignes seront copiées dans la table de destination.</param>
        <summary>Copie toutes les lignes du <see cref="T:System.Data.IDataReader" /> fourni dans une table de destination spécifiée par la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> de l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’opération de copie démarre à la ligne suivante dans le lecteur. La plupart du temps, le lecteur vient d’être retourné par <xref:System.Data.IDbCommand.ExecuteReader%2A> ou un appel semblable, par conséquent, la ligne suivante est la première ligne. Pour traiter plusieurs résultats, appelez <xref:System.Data.IDataReader.NextResult%2A> sur le lecteur de données et l’appel <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> à nouveau.  
  
 Notez que l’utilisation <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> modifie l’état du lecteur. Appelle la méthode <xref:System.Data.IDataReader.Read%2A> jusqu'à ce qu’elle retourne la valeur false, l’opération est abandonnée, ou une erreur se produit. Cela signifie que le lecteur de données sera dans un état différent, probablement à la fin du jeu de résultats, lorsque le <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> l’opération est terminée.  
  
 Alors que l’opération de copie en bloc est en cours d’exécution, la destination associé <xref:System.Data.SqlClient.SqlConnection> est occupé à cette tâche, et aucune autre opération ne peut être effectuée sur la connexion.  
  
 Le <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> collection mappe les colonnes du lecteur à partir des données dans la table de base de données de destination.  
  
   
  
## Examples  
 L’application console suivante montre comment charger des données à partir de bloc au format un <xref:System.Data.SqlClient.SqlDataReader>. La table de destination est une table dans le **AdventureWorks** base de données.  
  
> [!IMPORTANT]
>  Cet exemple ne s’exécutera pas à moins que vous ayez créé les tables de travail comme décrit dans [configuration exemple de copie en bloc](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ce code est fourni pour illustrer la syntaxe pour l’utilisation de **SqlBulkCopy** uniquement. Si les tables source et de destination sont dans la même instance de SQL Server, il est plus facile et plus rapide d’utiliser Transact-SQL `INSERT … SELECT` instruction pour copier les données.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable, rowState As DataRowState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="table">
          <see cref="T:System.Data.DataTable" /> dont les lignes seront copiées dans la table de destination.</param>
        <param name="rowState">Valeur de l'énumération <see cref="T:System.Data.DataRowState" />. Seules les lignes correspondant à l’état de ligne sont copiées vers la destination.</param>
        <summary>Copie uniquement les lignes qui correspondent à l'état de ligne fourni dans le <see cref="T:System.Data.DataTable" /> fourni dans une table de destination spécifiée par la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> de l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Seules les lignes de la <xref:System.Data.DataTable> qui se trouvent dans les états indiqués dans le `rowState` argument et n’ont pas été supprimés sont copiés dans la table de destination.  
  
> [!NOTE]
>  Si <xref:System.Data.DataRowState.Deleted> est spécifié, n’importe quel <xref:System.Data.DataRowState.Unchanged>, <xref:System.Data.DataRowState.Added>, et <xref:System.Data.DataRowState.Modified> les lignes doivent également être copiées sur le serveur. Aucune exception ne sera levée.  
  
 Alors que l’opération de copie en bloc est en cours d’exécution, la destination associé <xref:System.Data.SqlClient.SqlConnection> est occupé à cette tâche, et aucune autre opération ne peut être effectuée sur la connexion.  
  
 Le <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> collection de mappages à partir de la <xref:System.Data.DataTable> colonnes dans la table de base de données de destination.  
  
   
  
## Examples  
 L’application Console suivante montre comment en bloc charger uniquement les lignes dans un <xref:System.Data.DataTable> qui correspond à un état spécifié. Dans ce cas, seules les lignes inchangées sont ajoutées. La table de destination est une table dans le **AdventureWorks** base de données.  
  
 Dans cet exemple, un <xref:System.Data.DataTable> est créé au moment de l’exécution et trois lignes sont ajoutées à celui-ci. Avant du <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> méthode est exécutée, une des lignes est modifiée. Le <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> méthode est appelée avec un `DataRowState.Unchanged` `rowState` argument, ainsi que les deux lignes inchangées sont copiées en bloc vers la destination.  
  
> [!IMPORTANT]
>  Cet exemple ne s’exécutera pas à moins que vous ayez créé les tables de travail comme décrit dans [configuration exemple de copie en bloc](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Ce code est fourni pour illustrer la syntaxe pour l’utilisation de **SqlBulkCopy** uniquement. Si les tables source et de destination sont dans la même instance de SQL Server, il est plus facile et plus rapide d’utiliser Transact-SQL `INSERT … SELECT` instruction pour copier les données.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataRowState" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Version asynchrone de <see cref="Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer" />, qui copie toutes les lignes d'une source de données vers une table de destination spécifiée par la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> de l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si les ensembles de résultats actifs multiples (MARS) est désactivé, <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> établit la connexion occupée. Si MARS est activé, vous pouvez entrelacer les appels à <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> avec d’autres commandes dans la même connexion.  
  
 Le nombre de lignes qui sont restaurées au moment de l’échec de le dépend de plusieurs facteurs :  
  
-   Si <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> est spécifié.  
  
-   Si vous avez votre propre transaction.  
  
-   la valeur de la propriété <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> ;  
  
 Lorsqu’une erreur est survenue lors de l’envoi des données au serveur, le lot actuel (tel que spécifié par <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>) sera restaurée. Si <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> n’est pas spécifié et que vous avez votre propre transaction, toute la transaction sera restaurée précédent (qui inclut tous les lots précédentes).  
  
 Utilisez <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> pour savoir combien de lignes ont été copiés sur le serveur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As DbDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Data.Common.DbDataReader" /> dont les lignes seront copiées dans la table de destination.</param>
        <summary>Version asynchrone de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />, qui copie toutes les lignes du tableau <see cref="T:System.Data.Common.DbDataReader" /> dans une table de destination spécifiée par la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> de l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Tâche représentant l’opération asynchrone.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (rows As DataRow()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows">Tableau d'objets <see cref="T:System.Data.DataRow" /> qui seront copiés dans la table de destination.</param>
        <summary>Version asynchrone de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />, qui copie toutes les lignes du tableau <see cref="T:System.Data.DataRow" /> dans une table de destination spécifiée par la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> de l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Tâche représentant l’opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la programmation asynchrone dans le fournisseur de données .NET Framework pour SQL Server, consultez [de programmation asynchrone](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Appel de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> plusieurs fois pour la même instance avant l'achèvement de la tâche.  
  
 Appel de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> et <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> pour la même instance avant l'achèvement de la tâche.  
  
 La connexion est perdue ou fermée pendant l'exécution de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> .  
  
 Retourné dans l'objet de tâche, l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> a été fermé au cours de l'exécution de méthode.  
  
 Retourné dans l’objet de tâche en raison d’un délai d’attente du pool de connexions.  
  
 Retourné dans l'objet de tâche, l'objet <see cref="T:System.Data.SqlClient.SqlConnection" /> est fermé avant l'exécution de méthode.  
  
 <see langword="Context Connection=true" /> est spécifié dans la chaîne de connexion.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Retourné dans l’objet de tâche, toute erreur retournée par SQL Server qui s’est produite à l’ouverture de la connexion.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">
          <see cref="T:System.Data.DataTable" /> dont les lignes seront copiées dans la table de destination.</param>
        <summary>Version asynchrone de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />, qui copie toutes les lignes dans le tableau <see cref="T:System.Data.DataTable" /> dans une table de destination spécifiée par la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> de l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Tâche représentant l’opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la programmation asynchrone dans le fournisseur de données .NET Framework pour SQL Server, consultez [de programmation asynchrone](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Appel de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> plusieurs fois pour la même instance avant l'achèvement de la tâche.  
  
 Appel de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> et <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> pour la même instance avant l'achèvement de la tâche.  
  
 La connexion est perdue ou fermée pendant l'exécution de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> .  
  
 Retourné dans l'objet de tâche, l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> a été fermé au cours de l'exécution de méthode.  
  
 Retourné dans l’objet de tâche en raison d’un délai d’attente du pool de connexions.  
  
 Retourné dans l'objet de tâche, l'objet <see cref="T:System.Data.SqlClient.SqlConnection" /> est fermé avant l'exécution de méthode.  
  
 <see langword="Context Connection=true" /> est spécifié dans la chaîne de connexion.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Retourné dans l’objet de tâche, toute erreur retournée par SQL Server qui s’est produite à l’ouverture de la connexion.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As IDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Data.IDataReader" /> dont les lignes seront copiées dans la table de destination.</param>
        <summary>Version asynchrone de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />, qui copie toutes les lignes dans le tableau <see cref="T:System.Data.IDataReader" /> dans une table de destination spécifiée par la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> de l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Tâche représentant l’opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la programmation asynchrone dans le fournisseur de données .NET Framework pour SQL Server, consultez [de programmation asynchrone](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Appel de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> plusieurs fois pour la même instance avant l'achèvement de la tâche.  
  
 Appel de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> et <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> pour la même instance avant l'achèvement de la tâche.  
  
 La connexion est perdue ou fermée pendant l'exécution de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> .  
  
 Retourné dans l'objet de tâche, l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> a été fermé au cours de l'exécution de méthode.  
  
 Retourné dans l’objet de tâche en raison d’un délai d’attente du pool de connexions.  
  
 Retourné dans l'objet de tâche, l'objet <see cref="T:System.Data.SqlClient.SqlConnection" /> est fermé avant l'exécution de méthode.  
  
 <see cref="T:System.Data.IDataReader" /> a été fermé avant le retour du <see cref="T:System.Threading.Tasks.Task" /> terminé.  
  
 La connexion associée à <see cref="T:System.Data.IDataReader" /> a été fermée avant le retour du <see cref="T:System.Threading.Tasks.Task" /> terminé.  
  
 <see langword="Context Connection=true" /> est spécifié dans la chaîne de connexion.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Retourné dans l’objet de tâche, toute erreur retournée par SQL Server qui s’est produite à l’ouverture de la connexion.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Data.Common.DbDataReader" /> dont les lignes seront copiées dans la table de destination.</param>
        <param name="cancellationToken">Instruction d'annulation. Une valeur <see cref="P:System.Threading.CancellationToken.None" /> dans ce paramètre rend cette méthode équivalente à <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />.</param>
        <summary>Version asynchrone de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />, qui copie toutes les lignes du tableau <see cref="T:System.Data.Common.DbDataReader" /> dans une table de destination spécifiée par la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> de l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="rows">Tableau d'objets <see cref="T:System.Data.DataRow" /> qui seront copiés dans la table de destination.</param>
        <param name="cancellationToken">Instruction d'annulation. Une valeur <see cref="P:System.Threading.CancellationToken.None" /> dans ce paramètre rend cette méthode équivalente à <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Version asynchrone de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />, qui copie toutes les lignes du tableau <see cref="T:System.Data.DataRow" /> dans une table de destination spécifiée par la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> de l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.  
  
 Le jeton d'annulation peut être utilisé pour demander que l'opération soit abandonnée avant que le délai d'attente de commande s'écoule.  Les exceptions seront signalées via l’objet Task retourné.</summary>
        <returns>Tâche représentant l’opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la programmation asynchrone dans le fournisseur de données .NET Framework pour SQL Server, consultez [de programmation asynchrone](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Appel de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> plusieurs fois pour la même instance avant l'achèvement de la tâche.  
  
 Appel de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> et <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> pour la même instance avant l'achèvement de la tâche.  
  
 La connexion est perdue ou fermée pendant l'exécution de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> .  
  
 Retourné dans l'objet de tâche, l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> a été fermé au cours de l'exécution de méthode.  
  
 Retourné dans l’objet de tâche en raison d’un délai d’attente du pool de connexions.  
  
 Retourné dans l'objet de tâche, l'objet <see cref="T:System.Data.SqlClient.SqlConnection" /> est fermé avant l'exécution de méthode.  
  
 <see langword="Context Connection=true" /> est spécifié dans la chaîne de connexion.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Retourné dans l’objet de tâche, toute erreur retournée par SQL Server qui s’est produite à l’ouverture de la connexion.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable, rowState As DataRowState) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="table">
          <see cref="T:System.Data.DataTable" /> dont les lignes seront copiées dans la table de destination.</param>
        <param name="rowState">Valeur de l'énumération <see cref="T:System.Data.DataRowState" />. Seules les lignes correspondant à l’état de ligne sont copiées vers la destination.</param>
        <summary>Version asynchrone de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />, qui copie uniquement les lignes qui correspondent à l'état de ligne fourni dans le <see cref="T:System.Data.DataTable" /> fourni dans une table de destination spécifiée par la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> de l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Tâche représentant l’opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la programmation asynchrone dans le fournisseur de données .NET Framework pour SQL Server, consultez [de programmation asynchrone](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Appel de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> plusieurs fois pour la même instance avant l'achèvement de la tâche.  
  
 Appel de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> et <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> pour la même instance avant l'achèvement de la tâche.  
  
 La connexion est perdue ou fermée pendant l'exécution de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> .  
  
 Retourné dans l'objet de tâche, l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> a été fermé au cours de l'exécution de méthode.  
  
 Retourné dans l’objet de tâche en raison d’un délai d’attente du pool de connexions.  
  
 Retourné dans l'objet de tâche, l'objet <see cref="T:System.Data.SqlClient.SqlConnection" /> est fermé avant l'exécution de méthode.  
  
 <see langword="Context Connection=true" /> est spécifié dans la chaîne de connexion.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Retourné dans l’objet de tâche, toute erreur retournée par SQL Server qui s’est produite à l’ouverture de la connexion.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="table">
          <see cref="T:System.Data.DataTable" /> dont les lignes seront copiées dans la table de destination.</param>
        <param name="cancellationToken">Instruction d'annulation. Une valeur <see cref="P:System.Threading.CancellationToken.None" /> dans ce paramètre rend cette méthode équivalente à <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Version asynchrone de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />, qui copie toutes les lignes dans le tableau <see cref="T:System.Data.DataTable" /> dans une table de destination spécifiée par la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> de l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.  
  
 Le jeton d'annulation peut être utilisé pour demander que l'opération soit abandonnée avant que le délai d'attente de commande s'écoule.  Les exceptions seront signalées via l’objet Task retourné.</summary>
        <returns>Tâche représentant l’opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la programmation asynchrone dans le fournisseur de données .NET Framework pour SQL Server, consultez [de programmation asynchrone](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Appel de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> plusieurs fois pour la même instance avant l'achèvement de la tâche.  
  
 Appel de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> et <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> pour la même instance avant l'achèvement de la tâche.  
  
 La connexion est perdue ou fermée pendant l'exécution de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> .  
  
 Retourné dans l'objet de tâche, l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> a été fermé au cours de l'exécution de méthode.  
  
 Retourné dans l’objet de tâche en raison d’un délai d’attente du pool de connexions.  
  
 Retourné dans l'objet de tâche, l'objet <see cref="T:System.Data.SqlClient.SqlConnection" /> est fermé avant l'exécution de méthode.  
  
 <see langword="Context Connection=true" /> est spécifié dans la chaîne de connexion.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Retourné dans l’objet de tâche, toute erreur retournée par SQL Server qui s’est produite à l’ouverture de la connexion.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Data.IDataReader" /> dont les lignes seront copiées dans la table de destination.</param>
        <param name="cancellationToken">Instruction d'annulation. Une valeur <see cref="P:System.Threading.CancellationToken.None" /> dans ce paramètre rend cette méthode équivalente à <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Version asynchrone de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />, qui copie toutes les lignes dans le tableau <see cref="T:System.Data.IDataReader" /> dans une table de destination spécifiée par la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> de l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.  
  
 Le jeton d'annulation peut être utilisé pour demander que l'opération soit abandonnée avant que le délai d'attente de commande s'écoule.  Les exceptions seront signalées via l’objet Task retourné.</summary>
        <returns>Tâche représentant l’opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la programmation asynchrone dans le fournisseur de données .NET Framework pour SQL Server, consultez [de programmation asynchrone](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Appel de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> plusieurs fois pour la même instance avant l'achèvement de la tâche.  
  
 Appel de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> et <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> pour la même instance avant l'achèvement de la tâche.  
  
 La connexion est perdue ou fermée pendant l'exécution de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> .  
  
 Retourné dans l'objet de tâche, l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> a été fermé au cours de l'exécution de méthode.  
  
 Retourné dans l’objet de tâche en raison d’un délai d’attente du pool de connexions.  
  
 Retourné dans l'objet de tâche, l'objet <see cref="T:System.Data.SqlClient.SqlConnection" /> est fermé avant l'exécution de méthode.  
  
 <see cref="T:System.Data.IDataReader" /> a été fermé avant le retour du <see cref="T:System.Threading.Tasks.Task" /> terminé.  
  
 La connexion associée à <see cref="T:System.Data.IDataReader" /> a été fermée avant le retour du <see cref="T:System.Threading.Tasks.Task" /> terminé.  
  
 <see langword="Context Connection=true" /> est spécifié dans la chaîne de connexion.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Retourné dans l’objet de tâche, toute erreur retournée par SQL Server qui s’est produite à l’ouverture de la connexion.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="table">
          <see cref="T:System.Data.DataTable" /> dont les lignes seront copiées dans la table de destination.</param>
        <param name="rowState">Valeur de l'énumération <see cref="T:System.Data.DataRowState" />. Seules les lignes correspondant à l’état de ligne sont copiées vers la destination.</param>
        <param name="cancellationToken">Instruction d'annulation. Une valeur <see cref="P:System.Threading.CancellationToken.None" /> dans ce paramètre rend cette méthode équivalente à <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Version asynchrone de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />, qui copie uniquement les lignes qui correspondent à l'état de ligne fourni dans le <see cref="T:System.Data.DataTable" /> fourni dans une table de destination spécifiée par la propriété <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> de l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.  
  
 Le jeton d'annulation peut être utilisé pour demander que l'opération soit abandonnée avant que le délai d'attente de commande s'écoule.  Les exceptions seront signalées via l’objet Task retourné.</summary>
        <returns>Tâche représentant l’opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la programmation asynchrone dans le fournisseur de données .NET Framework pour SQL Server, consultez [de programmation asynchrone](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Appel de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> plusieurs fois pour la même instance avant l'achèvement de la tâche.  
  
 Appel de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> et <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> pour la même instance avant l'achèvement de la tâche.  
  
 La connexion est perdue ou fermée pendant l'exécution de <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> .  
  
 Retourné dans l'objet de tâche, l'objet <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> a été fermé au cours de l'exécution de méthode.  
  
 Retourné dans l’objet de tâche en raison d’un délai d’attente du pool de connexions.  
  
 Retourné dans l'objet de tâche, l'objet <see cref="T:System.Data.SqlClient.SqlConnection" /> est fermé avant l'exécution de méthode.  
  
 <see langword="Context Connection=true" /> est spécifié dans la chaîne de connexion.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Retourné dans l’objet de tâche, toute erreur retournée par SQL Server qui s’est produite à l’ouverture de la connexion.</exception>
      </Docs>
    </Member>
  </Members>
</Type>