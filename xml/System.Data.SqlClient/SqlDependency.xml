<Type Name="SqlDependency" FullName="System.Data.SqlClient.SqlDependency">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c5d605853d60b72cc579a044b61b343ee64f40f4" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32037600" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlDependency" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlDependency extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlDependency" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlDependency" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlDependency sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>L'objet <see cref="T:System.Data.SqlClient.SqlDependency" /> représente une dépendance de notification de requête entre une application et une instance SQL Server. Une application peut créer un objet <see cref="T:System.Data.SqlClient.SqlDependency" /> et l'enregistrer pour recevoir des notifications par le biais du gestionnaire d'événements <see cref="T:System.Data.SqlClient.OnChangeEventHandler" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlDependency> est idéal pour la mise en cache des scénarios, où votre application ASP.NET ou un service de couche intermédiaire doit conserver certaines informations mises en cache en mémoire. <xref:System.Data.SqlClient.SqlDependency> vous permet de recevoir des notifications lorsque les données d’origine dans la base de données changent afin que le cache peut être actualisé.  
  
 Pour définir une dépendance, vous devez associer un <xref:System.Data.SqlClient.SqlDependency> objet à un ou plusieurs <xref:System.Data.SqlClient.SqlCommand> objets. Pour recevoir des notifications, vous devez vous abonner à la <xref:System.Data.SqlClient.SqlDependency.OnChange> événement. Pour plus d’informations sur la configuration requise pour créer des requêtes pour les notifications, consultez « Création d’une requête pour Notification » dans la documentation en ligne de SQL Server.  
  
> [!NOTE]
>  <xref:System.Data.SqlClient.SqlDependency> a été conçu pour être utilisé dans ASP.NET ou services de couche intermédiaire où il existe un nombre relativement faible de serveurs ayant des dépendances par rapport à la base de données. Il n’a pas été conçu pour une utilisation dans les applications clientes, où des centaines, voire des milliers d’ordinateurs clients aurait <xref:System.Data.SqlClient.SqlDependency> objets défini pour un serveur de base de données unique. Si vous développez une application où vous avez besoin des notifications de seconde fiable lorsque les données modifiées, consultez les sections **planification d’une stratégie de Notifications de requête efficace** et **Alternatives à la requête Notifications** dans les [planification des Notifications](http://go.microsoft.com/fwlink/?LinkId=211984) rubrique dans la documentation en ligne de SQL Server.  
  
 Pour plus d’informations, consultez [des Notifications de requête dans SQL Server](~/docs/framework/data/adonet/sql/query-notifications-in-sql-server.md) et « Building Notification Solutions » dans la documentation en ligne de SQL Server.  
  
> [!NOTE]
>  Le <xref:System.Data.SqlClient.SqlDependency.OnChange> événement peut être généré sur un thread différent du thread qui a initié l’exécution de commande.  
  
 Les notifications de requête ne sont prises en charge que pour les instructions SELECT qui répondent à une liste d’exigences précises. Le tableau suivant présente des liens vers la documentation consacrée à Service Broker et aux notifications de requête dans la documentation en ligne de SQL Server.  
  
 **Documentation en ligne de SQL Server**  
  
-   [Création d’une requête de Notification](http://msdn.microsoft.com/library/ms181122.aspx)  
  
-   [Considérations sur la sécurité pour Service Broker](http://msdn.microsoft.com/library/ms166059.aspx)  
  
-   [Sécurité et Protection (Service Broker)](http://msdn.microsoft.com/library/bb522911.aspx)  
  
-   [Considérations de sécurité pour les Services de Notifications](http://msdn.microsoft.com/library/ms172604.aspx)  
  
-   [Autorisations associées aux notifications de requête](http://msdn.microsoft.com/library/ms188311.aspx)  
  
-   [Considérations internationales pour Service Broker](http://msdn.microsoft.com/library/ms166028.aspx)  
  
-   [Considérations de conception de solution (Service Broker)](http://msdn.microsoft.com/library/bb522899.aspx)  
  
-   [Centre d’informations du développeur Service Broker](http://msdn.microsoft.com/library/ms166100.aspx)  
  
-   [Guide du développeur (Service Broker)](http://msdn.microsoft.com/library/bb522908.aspx)  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crée une instance de la classe <see cref="T:System.Data.SqlClient.SqlDependency" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDependency ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDependency.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDependency();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Crée une nouvelle instance de la classe <see cref="T:System.Data.SqlClient.SqlDependency" /> avec les paramètres par défaut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le constructeur initialise la <xref:System.Data.SqlClient.SqlDependency> à l’aide du nom du service Service Broker par défaut et le délai d’attente de l’objet. À un moment donné après la construction, vous devez utiliser le <xref:System.Data.SqlClient.SqlDependency.AddCommandDependency%2A> méthode permet d’associer une ou plusieurs commandes à cet <xref:System.Data.SqlClient.SqlDependency> objet.  
  
 Les notifications de requête ne sont prises en charge que pour les instructions SELECT qui répondent à une liste d’exigences précises. Le tableau suivant présente des liens vers la documentation consacrée à Service Broker et aux notifications de requête dans la documentation en ligne de SQL Server.  
  
 **Documentation en ligne de SQL Server**  
  
-   [Création d’une requête de Notification](http://msdn.microsoft.com/library/ms181122.aspx)  
  
-   [Considérations sur la sécurité pour Service Broker](http://msdn.microsoft.com/library/ms166059.aspx)  
  
-   [Sécurité et Protection (Service Broker)](http://msdn.microsoft.com/library/bb522911.aspx)  
  
-   [Considérations de sécurité pour les Services de Notifications](http://msdn.microsoft.com/library/ms172604.aspx)  
  
-   [Autorisations associées aux notifications de requête](http://msdn.microsoft.com/library/ms188311.aspx)  
  
-   [Considérations internationales pour Service Broker](http://msdn.microsoft.com/library/ms166028.aspx)  
  
-   [Considérations de conception de solution (Service Broker)](http://msdn.microsoft.com/library/bb522899.aspx)  
  
-   [Centre d’informations du développeur Service Broker](http://msdn.microsoft.com/library/ms166100.aspx)  
  
-   [Guide du développeur (Service Broker)](http://msdn.microsoft.com/library/bb522908.aspx)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDependency (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDependency.#ctor(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDependency(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">Objet <see cref="T:System.Data.SqlClient.SqlCommand" /> à associer à cet objet <see cref="T:System.Data.SqlClient.SqlDependency" />. Le constructeur installe un objet <see cref="T:System.Data.Sql.SqlNotificationRequest" /> et le lie à la commande.</param>
        <summary>Crée une instance de la classe <see cref="T:System.Data.SqlClient.SqlDependency" /> et l'associe au paramètre <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En interne, ce constructeur crée une instance de la <xref:System.Data.Sql.SqlNotificationRequest> de classe et le lie à un <xref:System.Data.SqlClient.SqlCommand> objet.  
  
 Les notifications de requête ne sont prises en charge que pour les instructions SELECT qui répondent à une liste d’exigences précises. Le tableau suivant présente des liens vers la documentation consacrée à Service Broker et aux notifications de requête dans la documentation en ligne de SQL Server.  
  
 **Documentation en ligne de SQL Server**  
  
-   [Création d’une requête de Notification](http://msdn.microsoft.com/library/ms181122.aspx)  
  
-   [Considérations sur la sécurité pour Service Broker](http://msdn.microsoft.com/library/ms166059.aspx)  
  
-   [Sécurité et Protection (Service Broker)](http://msdn.microsoft.com/library/bb522911.aspx)  
  
-   [Considérations de sécurité pour les Services de Notifications](http://msdn.microsoft.com/library/ms172604.aspx)  
  
-   [Autorisations associées aux notifications de requête](http://msdn.microsoft.com/library/ms188311.aspx)  
  
-   [Considérations internationales pour Service Broker](http://msdn.microsoft.com/library/ms166028.aspx)  
  
-   [Considérations de conception de solution (Service Broker)](http://msdn.microsoft.com/library/bb522899.aspx)  
  
-   [Centre d’informations du développeur Service Broker](http://msdn.microsoft.com/library/ms166100.aspx)  
  
-   [Guide du développeur (Service Broker)](http://msdn.microsoft.com/library/bb522908.aspx)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="command" /> est NULL.</exception>
        <exception cref="T:System.InvalidOperationException">L'objet <see cref="T:System.Data.SqlClient.SqlCommand" /> a déjà un objet <see cref="T:System.Data.Sql.SqlNotificationRequest" /> assigné à sa propriété <see cref="P:System.Data.SqlClient.SqlCommand.Notification" />, et ce <see cref="T:System.Data.Sql.SqlNotificationRequest" /> n'est pas associé à cette dépendance.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDependency (System.Data.SqlClient.SqlCommand command, string options, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlCommand command, string options, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDependency.#ctor(System.Data.SqlClient.SqlCommand,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As SqlCommand, options As String, timeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDependency(System::Data::SqlClient::SqlCommand ^ command, System::String ^ options, int timeout);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
        <Parameter Name="options" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="command">Objet <see cref="T:System.Data.SqlClient.SqlCommand" /> à associer à cet objet <see cref="T:System.Data.SqlClient.SqlDependency" />. Le constructeur installe un objet <see cref="T:System.Data.Sql.SqlNotificationRequest" /> et le lie à la commande.</param>
        <param name="options">Options de demande de notification à utiliser par cette dépendance.  <c>null</c> pour utiliser le service par défaut.</param>
        <param name="timeout">Délai d'attente pour cette notification, en secondes. La valeur par défaut est 0, indiquant que le délai d'attente du serveur doit être utilisé.</param>
        <summary>Crée une instance de la classe <see cref="T:System.Data.SqlClient.SqlDependency" />, l'associe au paramètre <see cref="T:System.Data.SqlClient.SqlCommand" /> et spécifie des options de notification et une valeur de délai d'attente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les notifications de requête ne sont prises en charge que pour les instructions SELECT qui répondent à une liste d’exigences précises. Le tableau suivant présente des liens vers la documentation consacrée à Service Broker et aux notifications de requête dans la documentation en ligne de SQL Server.  
  
 **Documentation en ligne de SQL Server**  
  
-   [Création d’une requête de Notification](http://msdn.microsoft.com/library/ms181122.aspx)  
  
-   [Considérations sur la sécurité pour Service Broker](http://msdn.microsoft.com/library/ms166059.aspx)  
  
-   [Sécurité et Protection (Service Broker)](http://msdn.microsoft.com/library/bb522911.aspx)  
  
-   [Considérations de sécurité pour les Services de Notifications](http://msdn.microsoft.com/library/ms172604.aspx)  
  
-   [Autorisations associées aux notifications de requête](http://msdn.microsoft.com/library/ms188311.aspx)  
  
-   [Considérations internationales pour Service Broker](http://msdn.microsoft.com/library/ms166028.aspx)  
  
-   [Considérations de conception de solution (Service Broker)](http://msdn.microsoft.com/library/bb522899.aspx)  
  
-   [Centre d’informations du développeur Service Broker](http://msdn.microsoft.com/library/ms166100.aspx)  
  
-   [Guide du développeur (Service Broker)](http://msdn.microsoft.com/library/bb522908.aspx)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="command" /> est NULL.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Le délai d'attente est inférieur à zéro.</exception>
        <exception cref="T:System.InvalidOperationException">L'objet <see cref="T:System.Data.SqlClient.SqlCommand" /> a déjà un objet <see cref="T:System.Data.Sql.SqlNotificationRequest" /> assigné à sa propriété <see cref="P:System.Data.SqlClient.SqlCommand.Notification" />, et ce <see cref="T:System.Data.Sql.SqlNotificationRequest" /> n'est pas associé à cette dépendance.  
  
 Une tentative a été faite pour créer une instance de **SqlDependency** à partir de SQLCLR.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddCommandDependency">
      <MemberSignature Language="C#" Value="public void AddCommandDependency (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCommandDependency(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDependency.AddCommandDependency(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCommandDependency (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCommandDependency(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">Objet <see cref="T:System.Data.SqlClient.SqlCommand" /> contenant une instruction valide pour les notifications.</param>
        <summary>Associe un objet <see cref="T:System.Data.SqlClient.SqlCommand" /> à cette instance de <see cref="T:System.Data.SqlClient.SqlDependency" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les notifications de requête ne sont prises en charge que pour les instructions SELECT qui répondent à une liste d’exigences précises. Le tableau suivant présente des liens vers la documentation consacrée à Service Broker et aux notifications de requête dans la documentation en ligne de SQL Server.  
  
 **Documentation en ligne de SQL Server**  
  
-   [Création d’une requête de Notification](http://msdn.microsoft.com/library/ms181122.aspx)  
  
-   [Considérations sur la sécurité pour Service Broker](http://msdn.microsoft.com/library/ms166059.aspx)  
  
-   [Sécurité et Protection (Service Broker)](http://msdn.microsoft.com/library/bb522911.aspx)  
  
-   [Considérations de sécurité pour les Services de Notifications](http://msdn.microsoft.com/library/ms172604.aspx)  
  
-   [Autorisations associées aux notifications de requête](http://msdn.microsoft.com/library/ms188311.aspx)  
  
-   [Considérations internationales pour Service Broker](http://msdn.microsoft.com/library/ms166028.aspx)  
  
-   [Considérations de conception de solution (Service Broker)](http://msdn.microsoft.com/library/bb522899.aspx)  
  
-   [Centre d’informations du développeur Service Broker](http://msdn.microsoft.com/library/ms166100.aspx)  
  
-   [Guide du développeur (Service Broker)](http://msdn.microsoft.com/library/bb522908.aspx)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="command" /> est null.</exception>
        <exception cref="T:System.InvalidOperationException">L'objet <see cref="T:System.Data.SqlClient.SqlCommand" /> a déjà un objet <see cref="T:System.Data.Sql.SqlNotificationRequest" /> assigné à sa propriété <see cref="P:System.Data.SqlClient.SqlCommand.Notification" />, et ce <see cref="T:System.Data.Sql.SqlNotificationRequest" /> n'est pas associé à cette dépendance.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasChanges">
      <MemberSignature Language="C#" Value="public bool HasChanges { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanges" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlDependency.HasChanges" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanges As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanges { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'un des ensembles de résultats associés à la dépendance a changé.</summary>
        <value>Valeur booléenne indiquant si l'un des ensembles de résultats a changé.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous n’utilisez pas le <xref:System.Data.SqlClient.SqlDependency.OnChange> événement, vous pouvez vérifier le <xref:System.Data.SqlClient.SqlDependency.HasChanges%2A> propriété pour déterminer si les résultats de requête ont changé.  
  
 Le <xref:System.Data.SqlClient.SqlDependency.HasChanges%2A> propriété n’implique pas nécessairement une modification des données. Autres conditions, par exemple de délai d’attente a expiré, et Échec de définition de la demande de notification, génèrent également un événement de modification.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlDependency.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui identifie uniquement cette instance de la classe <see cref="T:System.Data.SqlClient.SqlDependency" />.</summary>
        <value>Représentation sous forme de chaîne d'une valeur GUID générée pour chaque instance de la classe <see cref="T:System.Data.SqlClient.SqlDependency" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Data.SqlClient.SqlDependency.Id%2A> propriété est utilisée pour identifier de manière unique une donnée <xref:System.Data.SqlClient.SqlDependency> instance.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChange">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.OnChangeEventHandler OnChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.OnChangeEventHandler OnChange" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlDependency.OnChange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event OnChange As OnChangeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::OnChangeEventHandler ^ OnChange;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.OnChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une notification est reçue pour les commandes associées à cet objet <see cref="T:System.Data.SqlClient.SqlDependency" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlDependency.OnChange> se produit lorsque les résultats de la commande associée changent. Si vous n’utilisez pas <xref:System.Data.SqlClient.SqlDependency.OnChange>, vous pouvez vérifier le <xref:System.Data.SqlClient.SqlDependency.HasChanges%2A> propriété pour déterminer si les résultats de requête ont changé.  
  
 Le <xref:System.Data.SqlClient.SqlDependency.OnChange> événement n’implique pas nécessairement une modification des données. Autres circonstances, telles que l’expiration de délai d’attente et Échec de définition de la demande de notification, génèrent également <xref:System.Data.SqlClient.SqlDependency.OnChange>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Démarre l'écouteur pour recevoir des notifications de modification de dépendance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Data.SqlClient.SqlDependency> écouteur redémarre lorsqu’une erreur se produit dans la connexion SQL Server.  
  
 Appels multiples à la <xref:System.Data.SqlClient.SqlDependency.Start%2A> méthode peut être établie, soumis aux restrictions suivantes :  
  
-   Les appels multiples avec des paramètres identiques (la même chaîne de connexion et les informations d’identification Windows dans le thread appelant) sont valides.  
  
-   Appels multiples avec des chaînes de connexion différentes sont valides tant que :  
  
    -   Chaque chaîne de connexion spécifie une autre base de données, ou  
  
    -   Chaque chaîne de connexion spécifie un autre utilisateur, ou  
  
    -   Les appels proviennent de différents domaines d’application.  
  
 Vous pouvez rendre le <xref:System.Data.SqlClient.SqlDependency> fonctionne correctement pour les applications qui utilisent plusieurs threads pour représenter d’autres informations d’identification sans donner le rôle dbo pour le groupe, étant donné que différents utilisateurs peuvent s’abonner et écouter (à l’aide de <xref:System.Web.Caching.SqlCacheDependency> ou <xref:System.Data.SqlClient.SqlCommand>) pour une file d’attente de notification créée par un administrateur. Lorsque le domaine d’application approprié démarre, appelez démarrer avec les informations d’identification (Windows) d’un utilisateur qui a l’autorisation pour initialiser un service/file d’attente (les autorisations créer une file d’attente et de créer un SERVICE pour la base de données). Assurez-vous que Démarrer est appelée une fois par AppDomain, sinon une exception de l’ambiguïté est levée.  Le thread d’utilisateur doit avoir l’autorisation de s’abonner à la notification (l’autorisation SUBSCRIBE QUERY NOTIFICATIONS pour la base de données). <xref:System.Data.SqlClient.SqlDependency> Associez la demande d’abonnement d’un utilisateur non-administrateur pour la file d’attente service/créé par l’administrateur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static bool Start (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Start(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDependency.Start(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (connectionString As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Start(System::String ^ connectionString);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Chaîne de connexion de l'instance SQL Server à partir de laquelle obtenir des notifications de modification.</param>
        <summary>Démarre l'écouteur pour recevoir des notifications de modification de dépendance à partir de l'instance SQL Server spécifiée par la chaîne de connexion.</summary>
        <returns>**true** si l’écouteur a été initialisé avec succès ; **false** si un écouteur compatible existe déjà.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode démarre l’écouteur pour le <xref:System.AppDomain> pour recevoir des notifications de dépendance de l’instance de SQL Server spécifiée par la `connectionString` paramètre. Cette méthode peut être appelée plusieurs fois avec différentes chaînes de connexion pour plusieurs serveurs.  
  
 Pour des remarques supplémentaires, consultez <xref:System.Data.SqlClient.SqlDependency.Start%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="connectionString" /> est NULL.</exception>
        <exception cref="T:System.InvalidOperationException">Le paramètre <paramref name="connectionString" /> est le même qu'un appel précédent à cette méthode, mais les paramètres sont différents.  
  
 La méthode a été appelée à partir du CLR.</exception>
        <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation de sécurité d'accès du code <see cref="T:System.Data.SqlClient.SqlClientPermission" /> requise.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Un appel suivant à la méthode a été effectué à l'aide d'un paramètre <paramref name="connectionString" /> équivalent avec un utilisateur différent, ou un utilisateur qui n'adopte pas par défaut le même schéma.  
  
 Également, toutes les exceptions **SqlClient** sous-jacentes.</exception>
        <altmember cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static bool Start (string connectionString, string queue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Start(string connectionString, string queue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDependency.Start(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (connectionString As String, queue As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Start(System::String ^ connectionString, System::String ^ queue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="queue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Chaîne de connexion de l'instance SQL Server à partir de laquelle obtenir des notifications de modification.</param>
        <param name="queue">File d'attente SQL Server Service Broker existante à utiliser. Si la valeur est <see langword="null" />, la file d'attente par défaut est utilisée.</param>
        <summary>Démarre l'écouteur pour recevoir des notifications de modification de dépendance de l'instance SQL Server spécifiée par la chaîne de connexion à l'aide de la file d'attente SQL Server Service Broker spécifiée.</summary>
        <returns>**true** si l’écouteur a été initialisé avec succès ; **false** si un écouteur compatible existe déjà.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode démarre l’écouteur pour le <xref:System.AppDomain> pour recevoir des notifications de dépendance de l’instance de SQL Server spécifiée par la `connectionString` paramètre. Cette méthode peut être appelée plusieurs fois avec différentes chaînes de connexion pour plusieurs serveurs.  
  
 Si aucun nom de file d’attente est spécifié, <xref:System.Data.SqlClient.SqlDependency> crée un service et file d’attente temporaire sur le serveur qui est utilisé pour l’ensemble du processus, même si le processus implique plusieurs <xref:System.AppDomain>. Le service de file d’attente et de fin sont supprimés automatiquement en cas d’arrêt de l’application.  
  
 Pour des remarques supplémentaires, consultez <xref:System.Data.SqlClient.SqlDependency.Start%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="connectionString" /> est NULL.</exception>
        <exception cref="T:System.InvalidOperationException">Le paramètre <paramref name="connectionString" /> est le même qu'un appel précédent à cette méthode, mais les paramètres sont différents.  
  
 La méthode a été appelée à partir du CLR.</exception>
        <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation de sécurité d'accès du code <see cref="T:System.Data.SqlClient.SqlClientPermission" /> requise.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Un appel suivant à la méthode a été effectué à l'aide d'un paramètre <paramref name="connectionString" /> équivalent mais avec un utilisateur différent, ou un utilisateur qui n'adopte pas par défaut le même schéma.  
  
 Également, toutes les exceptions **SqlClient** sous-jacentes.</exception>
        <altmember cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Stop">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Arrête un écouteur pour une connexion spécifiée dans un appel <see cref="Overload:System.Data.SqlClient.SqlDependency.Start" /> antérieur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Data.SqlClient.SqlDependency> écouteur redémarre lorsqu’une erreur se produit dans la connexion SQL Server.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public static bool Stop (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Stop(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDependency.Stop(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Stop (connectionString As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Stop(System::String ^ connectionString);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Chaîne de connexion de l'instance SQL Server utilisée dans un appel <see cref="M:System.Data.SqlClient.SqlDependency.Start(System.String)" /> précédent.</param>
        <summary>Arrête un écouteur pour une connexion spécifiée dans un appel <see cref="Overload:System.Data.SqlClient.SqlDependency.Start" /> antérieur.</summary>
        <returns>**true** si l’écouteur a été complètement arrêté ; **false** si <see cref="T:System.AppDomain" /> a été dissocié de l’écouteur, mais qu’au moins un autre <see cref="T:System.AppDomain" /> utilise le même écouteur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Data.SqlClient.SqlDependency.Stop%2A> méthode doit être appelée pour chaque <xref:System.Data.SqlClient.SqlDependency.Start%2A> appeler. Un écouteur donné n’arrête complètement lorsqu’il reçoit le même nombre de <xref:System.Data.SqlClient.SqlDependency.Stop%2A> demande <xref:System.Data.SqlClient.SqlDependency.Start%2A> demandes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="connectionString" /> est NULL.</exception>
        <exception cref="T:System.InvalidOperationException">La méthode a été appelée à partir de SQLCLR.</exception>
        <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation de sécurité d'accès du code <see cref="T:System.Data.SqlClient.SqlClientPermission" /> requise.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Une exception **SqlClient** sous-jacente s’est produite.</exception>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public static bool Stop (string connectionString, string queue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Stop(string connectionString, string queue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDependency.Stop(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Stop (connectionString As String, queue As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Stop(System::String ^ connectionString, System::String ^ queue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="queue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Chaîne de connexion de l'instance SQL Server utilisée dans un appel <see cref="M:System.Data.SqlClient.SqlDependency.Start(System.String,System.String)" /> précédent.</param>
        <param name="queue">File d'attente SQL Server Service Broker utilisée dans un appel <see cref="M:System.Data.SqlClient.SqlDependency.Start(System.String,System.String)" /> précédent.</param>
        <summary>Arrête un écouteur pour une connexion spécifiée dans un appel <see cref="Overload:System.Data.SqlClient.SqlDependency.Start" /> antérieur.</summary>
        <returns>**true** si l’écouteur a été complètement arrêté ; **false** si <see cref="T:System.AppDomain" /> a été dissocié de l’écouteur, mais qu’au moins un autre <see cref="T:System.AppDomain" /> utilise le même écouteur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Data.SqlClient.SqlDependency.Stop%2A> méthode doit être appelée pour chaque <xref:System.Data.SqlClient.SqlDependency.Start%2A> appeler. Un écouteur donné n’arrête complètement lorsqu’il reçoit le même nombre de <xref:System.Data.SqlClient.SqlDependency.Stop%2A> demande <xref:System.Data.SqlClient.SqlDependency.Start%2A> demandes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="connectionString" /> est NULL.</exception>
        <exception cref="T:System.InvalidOperationException">La méthode a été appelée à partir de SQLCLR.</exception>
        <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation de sécurité d'accès du code <see cref="T:System.Data.SqlClient.SqlClientPermission" /> requise.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Une exception **SqlClient** sous-jacente s’est produite.</exception>
      </Docs>
    </Member>
  </Members>
</Type>