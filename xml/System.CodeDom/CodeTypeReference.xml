<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CodeTypeReference.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52455b43fddb32549a443564aec8b89bb01619d72.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2455b43fddb32549a443564aec8b89bb01619d72</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.CodeDom.CodeTypeReference">
          <source>Represents a reference to a type.</source>
          <target state="translated">Représente une référence à un type.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>A <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> object is used to represent a type for CodeDOM objects.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objet est utilisé pour représenter un type pour les objets CodeDOM.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>When CodeDOM types have a <ph id="ph1">`Type`</ph> property, it is of type <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph>.</source>
          <target state="translated">Lorsque les types CodeDOM ont une <ph id="ph1">`Type`</ph> propriété, il est de type <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>For example, the <ph id="ph1">&lt;xref:System.CodeDom.CodeMemberField.Type%2A?displayProperty=nameWithType&gt;</ph> property is a <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> that represents a field's data type.</source>
          <target state="translated">Par exemple, le <ph id="ph1">&lt;xref:System.CodeDom.CodeMemberField.Type%2A?displayProperty=nameWithType&gt;</ph> propriété est un <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> qui représente le type de données d’un champ.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>A <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> can be initialized with a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object or a string.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> peut être initialisée avec un <ph id="ph2">&lt;xref:System.Type&gt;</ph> objet ou une chaîne.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>It is generally recommended to use a <ph id="ph1">&lt;xref:System.Type&gt;</ph> to do this, although it may not always be possible.</source>
          <target state="translated">Il est généralement recommandé d’utiliser un <ph id="ph1">&lt;xref:System.Type&gt;</ph> pour ce faire, bien qu’il n'est pas toujours possible.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>If initializing an instance of this class with a string, it is strongly recommended to always use fully qualified types, such as "System.Console" instead of just "Console", because not all languages support importing namespaces.</source>
          <target state="translated">Si une instance de cette classe avec une chaîne de l’initialisation, il est fortement recommandé de toujours utiliser des types qualifiés complets, tels que « System.Console » au lieu de simplement « Console », pas tous les langages prenant en charge l’importation des espaces de noms.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>Array types can be specified by either passing in a type object for an array or using one of the constructors that accept rank as a parameter.</source>
          <target state="translated">Types de tableau peuvent être spécifiés par en passant un objet de type pour un tableau ou à l’aide d’un des constructeurs qui acceptent comme paramètre.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property specifies the name of the type to reference.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> propriété spécifie le nom du type à référencer.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>For references to array types, the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.ArrayElementType%2A&gt;</ph> property indicates the type of the elements of the array, and the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt;</ph> property indicates the number of dimensions in the array.</source>
          <target state="translated">Pour les références aux types tableau, la <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.ArrayElementType%2A&gt;</ph> propriété indique le type des éléments du tableau et le <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt;</ph> propriété indique le nombre de dimensions dans le tableau.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeReference">
          <source>The following example demonstrates use of a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> to represent a reference to a type.</source>
          <target state="translated">L’exemple suivant montre l’utilisation d’un <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> pour représenter une référence à un type.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.CodeDom.CodeTypeReference">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified type.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> à l'aide du type spécifié.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor">
          <source>This constructor creates an empty <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> object.</source>
          <target state="translated">Ce constructeur crée un vide <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor">
          <source>If you use this constructor, set properties to establish the type reference.</source>
          <target state="translated">Si vous utilisez ce constructeur, définissez les propriétés pour établir la référence de type.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeParameter" /&gt;</ph> that represents the type of the type parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeParameter" /&gt;</ph> qui représente le type du paramètre de type.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified code type parameter.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> à l'aide du paramètre du type de code spécifié.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
          <source>The name of the type to reference.</source>
          <target state="translated">Nom du type à référencer.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified type name.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> à l'aide du nom du type spécifié.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
          <source>If the <ph id="ph1">`typeName`</ph> parameter references a generic type, it must follow the syntax conventions for generic types.</source>
          <target state="translated">Si le <ph id="ph1">`typeName`</ph> paramètre fait référence à un type générique, il doit respecter les conventions de syntaxe pour les types génériques.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
          <source>For example, the reflection signature for a <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> type, where <ph id="ph2">`K`</ph> is a string and <ph id="ph3">`V`</ph> is a <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of integers, is represented by reflection as the following (with the assembly information removed): <ph id="ph5">``System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]``</ph>.</source>
          <target state="translated">Par exemple, la signature de la réflexion pour un <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> type, où <ph id="ph2">`K`</ph> est une chaîne et <ph id="ph3">`V`</ph> est un <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> d’entiers, est représenté par réflexion comme suit (avec les informations d’assembly supprimées) : <ph id="ph5">``System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]``</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
          <source>You must use square brackets ([]) and not the C# angle brackets (&lt;&gt;) to delimit generic parameters.</source>
          <target state="translated">Vous devez utiliser des crochets ([]) et pas les c# les crochets pointus (&lt;&gt;) pour délimiter des paramètres génériques.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
          <source>To avoid the possibility of making a mistake in specifying the syntax, consider using the constructor that takes a type as a parameter instead of a string.</source>
          <target state="translated">Pour éviter la possibilité de rendre une erreur lors de la spécification de la syntaxe, envisagez d’utiliser le constructeur qui accepte un type en tant que paramètre au lieu d’une chaîne.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to reference.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> à référencer.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified type.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> à l'aide du type spécifié.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> that indicates the type of the array.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> qui indique le type de tableau.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
          <source>The number of dimensions in the array.</source>
          <target state="translated">Nombre de dimensions dans le tableau.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified array type and rank.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> avec le rang et le type de tableau spécifiés.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
          <source>This constructor can be used to construct arrays of arrays by nesting <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objects.</source>
          <target state="translated">Ce constructeur peut être utilisé pour construire des tableaux de tableaux en imbriquant <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objets.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
          <source>The name of the type to reference.</source>
          <target state="translated">Nom du type à référencer.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> values.</source>
          <target state="translated">Tableau de valeurs <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified type name and type arguments.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> à l'aide du nom de type et des arguments de type spécifiés.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
          <source>The name of the type to reference.</source>
          <target state="translated">Nom du type à référencer.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
          <source>The code type reference option, one of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceOptions" /&gt;</ph> values.</source>
          <target state="translated">Option de référence de type de code, une des valeurs <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified type name and code type reference option.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> à l'aide du nom de type spécifié et de l'option de référence de type de code.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
          <source>The name of the type of the elements of the array.</source>
          <target state="translated">Nom du type des éléments du tableau.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
          <source>The number of dimensions of the array.</source>
          <target state="translated">Nombre de dimensions du tableau.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified array type name and rank.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> avec le rang et le nom du type de tableau spécifiés.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> to reference.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> à référencer.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
          <source>The code type reference option, one of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceOptions" /&gt;</ph> values.</source>
          <target state="translated">Option de référence de type de code, une des valeurs <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> class using the specified type and code type reference.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> à l'aide du type spécifié et de la référence de type de code.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeReference.ArrayElementType">
          <source>Gets or sets the type of the elements in the array.</source>
          <target state="translated">Obtient ou définit le type des éléments du tableau.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.ArrayElementType">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> that indicates the type of the array elements.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> qui indique le type des éléments du tableau.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.ArrayElementType">
          <source>This is disregarded unless the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt;</ph> property is greater than or equal to 1.</source>
          <target state="translated">Cela est ignorée sauf si le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt;</ph> propriété est supérieur ou égal à 1.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeReference.ArrayRank">
          <source>Gets or sets the array rank of the array.</source>
          <target state="translated">Obtient ou définit le rang du tableau.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.ArrayRank">
          <source>The number of dimensions of the array.</source>
          <target state="translated">Nombre de dimensions du tableau.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>Gets or sets the name of the type being referenced.</source>
          <target state="translated">Obtient ou définit le nom du type référencé.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The name of the type being referenced.</source>
          <target state="translated">Nom du type référencé.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>This property contains the name of the type unless it is an array type, in which case it is the array element type.</source>
          <target state="translated">Cette propriété contient le nom du type, sauf si elle est un type tableau, auquel cas il est le type d’élément de tableau.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The name of the property may be misleading.</source>
          <target state="translated">Le nom de la propriété peut être trompeur.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>This property contains just the type name with any array adornments or generic type arguments removed, not the base or parent type as might be expected.</source>
          <target state="translated">Cette propriété contient uniquement le nom de type avec les ornements de tableau ou arguments de type générique supprimé, pas le type de base ou parent comme peut être prévu.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>For example, the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> value for <ph id="ph2">``System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]``</ph> is <ph id="ph3">``System.Collections.Generic.Dictionary`2``</ph>.</source>
          <target state="translated">Par exemple, le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> valeur <ph id="ph2">``System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]``</ph> est <ph id="ph3">``System.Collections.Generic.Dictionary`2``</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>Representation of Generic Types</source>
          <target state="translated">Représentation sous forme de Types génériques</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The information in this section is intended for CodeDom provider developers and only applies to CLS-compliant languages.</source>
          <target state="translated">Les informations contenues dans cette section sont destinées aux développeurs de fournisseur CodeDom et s’applique uniquement aux langages conformes CLS.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The return value can contain generic types.</source>
          <target state="translated">La valeur de retour peut contenir des types génériques.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>Generic types are formatted with the name of the type followed by a grave accent ("`") followed by a count of the generic type arguments.</source>
          <target state="translated">Types génériques sont mis en forme avec le nom du type suivi d’un accent grave (« ' ») suivi d’un nombre d’arguments de type générique.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The generic type arguments can be found in the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReferenceCollection&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> property.</source>
          <target state="translated">Les arguments de type générique peuvent être trouvés dans le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReferenceCollection&gt;</ph> retournée par le <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The values returned by <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> and the associated <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> contain the same content as the value of the type returned by reflection.</source>
          <target state="translated">Les valeurs retournées par <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> et associé <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> contiennent le même contenu que la valeur du type retourné par la réflexion.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>For example, a constructed <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> where <ph id="ph2">`K`</ph> is a string and <ph id="ph3">`V`</ph> is a constructed <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of integers is represented by reflection as the following (with the assembly information removed):</source>
          <target state="translated">Par exemple, construit <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> où <ph id="ph2">`K`</ph> est une chaîne et <ph id="ph3">`V`</ph> est un élément construit <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> d’entiers est représenté par réflexion comme suit (avec les informations d’assembly supprimées) :</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>Recursively parsing the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property from the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> for <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> yields the same strings as the reflection representation above:</source>
          <target state="translated">L’analyse de manière récursive la <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> propriété à partir de la <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> pour <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> génère les mêmes chaînes que la représentation de réflexion ci-dessus :</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property for the parent <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> returns the following:</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> propriété parent <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> retourne les éléments suivants :</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property for the first <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> object in the <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> collection returns the following:</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> propriété pour la première <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> de l’objet dans le <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> collection retourne les éléments suivants :</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property for the second <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> object in the <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> collection returns the following:</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> propriété pour la deuxième <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> de l’objet dans le <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> collection retourne les éléments suivants :</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> property in the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> object for <ph id="ph3">``System.Collections.Generic.List`1``</ph> returns the following:</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> propriété dans le <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> pour l’objet <ph id="ph3">``System.Collections.Generic.List`1``</ph> retourne les éléments suivants :</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The type argument count should be used when parsing the associated <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> values.</source>
          <target state="translated">Le nombre d’arguments de type doit être utilisé lors de l’analyse associé <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> valeurs.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>The common practice is to remove the type argument count from the generated code, but the practice is compiler specific.</source>
          <target state="translated">La pratique courante consiste à supprimer le nombre d’arguments de type à partir du code généré, mais la pratique est spécifique au compilateur.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>It is important to note that the type argument count can be found within a nested type name, in which case it is followed by a plus sign ("+").</source>
          <target state="translated">Il est important de noter que le nombre d’arguments de type peut être trouvé dans un nom de type imbriqué, auquel cas il est suivi par un signe plus (« + »).</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>When creating a generic <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph>, the recommended practice is to specify the type arguments as <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> objects or use the constructor that takes a <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">Lors de la création d’un type générique <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph>, la pratique recommandée consiste à spécifier les arguments de type en tant que <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> des objets ou utilisez le constructeur qui accepte un <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.BaseType">
          <source>Use of the constructor that creates a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> from a string can lead to undiscoverable type-argument errors.</source>
          <target state="translated">Utilisation du constructeur qui crée un <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> à partir d’une chaîne peut entraîner des erreurs de l’argument de type indétectables.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeReference.Options">
          <source>Gets or sets the code type reference option.</source>
          <target state="translated">Obtient ou définit l'option de référence de type de code.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.Options">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceOptions" /&gt;</ph> values.</source>
          <target state="translated">Combinaison d'opérations de bits des valeurs <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeReference.TypeArguments">
          <source>Gets the type arguments for the current generic type reference.</source>
          <target state="translated">Obtient les arguments de type pour la référence de type générique actuelle.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.TypeArguments">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceCollection" /&gt;</ph> containing the type arguments for the current <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceCollection" /&gt;</ph> qui contient les arguments de type pour l'objet <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> actuel.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.TypeArguments">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> property is a collection of type references to be substituted for the type parameter references of the current generic type.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</ph> propriété est une collection de références de types à substituer aux références de paramètre de type du type générique actuel.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.TypeArguments">
          <source>The collection contains all the type arguments for all nested types.</source>
          <target state="translated">La collection contient tous les arguments de type pour tous les types imbriqués.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeReference.TypeArguments">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> property.</source>
          <target state="translated">Pour obtenir un exemple, consultez le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</ph> propriété.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>