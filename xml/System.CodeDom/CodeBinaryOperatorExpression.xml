<Type Name="CodeBinaryOperatorExpression" FullName="System.CodeDom.CodeBinaryOperatorExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="315206703cd49a783aa43e2c6ee62f7f6153c560" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CodeBinaryOperatorExpression : System.CodeDom.CodeExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeBinaryOperatorExpression extends System.CodeDom.CodeExpression" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeBinaryOperatorExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeBinaryOperatorExpression&#xA;Inherits CodeExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeBinaryOperatorExpression : System::CodeDom::CodeExpression" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="f0b66-101">Représente une expression consistant en une opération binaire entre deux expressions.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f0b66-101">Represents an expression that consists of a binary operation between two expressions.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0b66-102"><xref:System.CodeDom.CodeBinaryOperatorExpression> peut être utilisé pour représenter des expressions de code qui comprennent un opérateur binaire.</span><span class="sxs-lookup"><span data-stu-id="f0b66-102"><xref:System.CodeDom.CodeBinaryOperatorExpression> can be used to represent code expressions that include a binary operator.</span></span> <span data-ttu-id="f0b66-103">Quelques exemples d’opérateurs binaires sont l’égalité (`==`), ajout (`+`) et au niveau du bit (`|`) les opérateurs.</span><span class="sxs-lookup"><span data-stu-id="f0b66-103">Some examples of binary operators are equality (`==`), addition (`+`), and bitwise (`|`) operators.</span></span> <span data-ttu-id="f0b66-104">Le <xref:System.CodeDom.CodeBinaryOperatorType> énumération représente un ensemble de base, utilisés couramment des opérateurs binaires sont pris en charge dans de nombreuses langues.</span><span class="sxs-lookup"><span data-stu-id="f0b66-104">The <xref:System.CodeDom.CodeBinaryOperatorType> enumeration represents a set of basic, commonly used binary operators that are supported in many languages.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f0b66-105">Cet exemple illustre l’utilisation d’un <xref:System.CodeDom.CodeBinaryOperatorExpression> pour additionner deux nombres.</span><span class="sxs-lookup"><span data-stu-id="f0b66-105">This example demonstrates use of a <xref:System.CodeDom.CodeBinaryOperatorExpression> to add two numbers together.</span></span>  
  
 [!code-cpp[CodeBinaryOperatorExpression#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeBinaryOperatorExpression/CPP/codebinaryoperatorexpressionexample.cpp#2)]
 [!code-csharp[CodeBinaryOperatorExpression#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeBinaryOperatorExpression/CS/codebinaryoperatorexpressionexample.cs#2)]
 [!code-vb[CodeBinaryOperatorExpression#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeBinaryOperatorExpression/VB/codebinaryoperatorexpressionexample.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.CodeDom.CodeExpression" />
    <altmember cref="T:System.CodeDom.CodeBinaryOperatorType" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f0b66-106">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f0b66-106">Initializes a new instance of the <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeBinaryOperatorExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeBinaryOperatorExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f0b66-107">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f0b66-107">Initializes a new instance of the <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.CodeBinaryOperatorType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeBinaryOperatorExpression (System.CodeDom.CodeExpression left, System.CodeDom.CodeBinaryOperatorType op, System.CodeDom.CodeExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeExpression left, valuetype System.CodeDom.CodeBinaryOperatorType op, class System.CodeDom.CodeExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (left As CodeExpression, op As CodeBinaryOperatorType, right As CodeExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeBinaryOperatorExpression(System::CodeDom::CodeExpression ^ left, System::CodeDom::CodeBinaryOperatorType op, System::CodeDom::CodeExpression ^ right);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="left" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="op" Type="System.CodeDom.CodeBinaryOperatorType" />
        <Parameter Name="right" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="f0b66-108">
            <see cref="T:System.CodeDom.CodeExpression" /> à gauche de l'opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f0b66-108">The <see cref="T:System.CodeDom.CodeExpression" /> on the left of the operator.</span>
          </span>
        </param>
        <param name="op">
          <span data-ttu-id="f0b66-109">
            <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> indiquant le type de l'opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f0b66-109">A <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> indicating the type of operator.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="f0b66-110">
            <see cref="T:System.CodeDom.CodeExpression" /> à droite de l'opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f0b66-110">The <see cref="T:System.CodeDom.CodeExpression" /> on the right of the operator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f0b66-111">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> en utilisant les paramètres spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f0b66-111">Initializes a new instance of the <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> class using the specified parameters.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression Left { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpression Left" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeBinaryOperatorExpression.Left" />
      <MemberSignature Language="VB.NET" Value="Public Property Left As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeExpression ^ Left { System::CodeDom::CodeExpression ^ get(); void set(System::CodeDom::CodeExpression ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f0b66-112">Obtient ou définit l'expression de code située à gauche de l'opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f0b66-112">Gets or sets the code expression on the left of the operator.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f0b66-113">
            <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'opérande de gauche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f0b66-113">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the left operand.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="Operator">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeBinaryOperatorType Operator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.CodeDom.CodeBinaryOperatorType Operator" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeBinaryOperatorExpression.Operator" />
      <MemberSignature Language="VB.NET" Value="Public Property Operator As CodeBinaryOperatorType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeBinaryOperatorType Operator { System::CodeDom::CodeBinaryOperatorType get(); void set(System::CodeDom::CodeBinaryOperatorType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeBinaryOperatorType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f0b66-114">Obtient ou définit l'opérateur dans l'expression d'opérateur binaire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f0b66-114">Gets or sets the operator in the binary operator expression.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f0b66-115">
            <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> indiquant le type de l'opérateur dans l'expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f0b66-115">A <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> that indicates the type of operator in the expression.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0b66-116">Un opérateur binaire effectue une évaluation sur les deux opérandes.</span><span class="sxs-lookup"><span data-stu-id="f0b66-116">A binary operator performs an evaluation on two operands.</span></span> <span data-ttu-id="f0b66-117">Quelques exemples d’opérateurs binaires sont l’égalité (`==`), ajout (`+`) et au niveau du bit (`|`) les opérateurs.</span><span class="sxs-lookup"><span data-stu-id="f0b66-117">Some examples of binary operators are equality (`==`), addition (`+`), and bitwise (`|`) operators.</span></span> <span data-ttu-id="f0b66-118">Vous trouverez de nombreux opérateurs binaires couramment utilisés dans le <xref:System.CodeDom.CodeBinaryOperatorType> énumération.</span><span class="sxs-lookup"><span data-stu-id="f0b66-118">Many commonly used binary operators can be found in the <xref:System.CodeDom.CodeBinaryOperatorType> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeBinaryOperatorType" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression Right { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpression Right" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeBinaryOperatorExpression.Right" />
      <MemberSignature Language="VB.NET" Value="Public Property Right As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeExpression ^ Right { System::CodeDom::CodeExpression ^ get(); void set(System::CodeDom::CodeExpression ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f0b66-119">Obtient ou définit l'expression de code située à droite de l'opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f0b66-119">Gets or sets the code expression on the right of the operator.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f0b66-120">
            <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'opérande de droite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f0b66-120">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the right operand.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
  </Members>
</Type>