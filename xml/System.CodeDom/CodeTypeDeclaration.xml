<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CodeTypeDeclaration.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac552c8bfcbe9527832064fa06fd15fae096ecb1cf0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52c8bfcbe9527832064fa06fd15fae096ecb1cf0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>Represents a type declaration for a class, structure, interface, or enumeration.</source>
          <target state="translated">Représente une déclaration de type pour une classe, une structure, une interface ou une énumération.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> can be used to represent code that declares a class, structure, interface, or enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> peut être utilisé pour représenter du code qui déclare une classe, une structure, une interface ou une énumération.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> can be used to declare a type that is nested within another type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> peut être utilisé pour déclarer un type qui est imbriqué dans un autre type.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</ph> property specifies the base type or base types of the type being declared.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</ph> propriété spécifie le type de base ou les types de base du type déclaré.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;</ph> property contains the type members, which can include methods, fields, properties, comments and other types.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;</ph> propriété contient les membres de type, qui peuvent inclure des méthodes, champs, propriétés, commentaires et autres types.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> property indicates the <ph id="ph2">&lt;xref:System.Reflection.TypeAttributes&gt;</ph> values for the type declaration, which indicate the type category of the type.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> propriété indique le <ph id="ph2">&lt;xref:System.Reflection.TypeAttributes&gt;</ph> des valeurs pour la déclaration de type, qui spécifie la catégorie du type.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt;</ph> methods indicate whether the type is a class, structure, enumeration, or interface type, respectively.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt;</ph>, et <ph id="ph4">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt;</ph> méthodes indiquent si le type est une classe, structure, énumération ou type d’interface, respectivement.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>Some programming languages only support the declaration of reference types, or classes.</source>
          <target state="translated">Certains langages de programmation prennent uniquement en charge la déclaration des types référence, ou des classes.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> method to test for the appropriate <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;</ph> flags.</source>
          <target state="translated">Pour vérifier un générateur de code spécifiques au langage CodeDOM pour la prise en charge pour la déclaration des interfaces, des énumérations ou des types valeur, appelez le <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> méthode pour tester les <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;</ph> indicateurs.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces&gt;</ph> indicates support for interfaces, <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums&gt;</ph> indicates support for enumerations, and <ph id="ph3">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes&gt;</ph> indicates support for value types such as structures.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces&gt;</ph> Indique la prise en charge pour les interfaces, <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums&gt;</ph> indique la prise en charge des énumérations, et <ph id="ph3">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes&gt;</ph> indique la prise en charge des types valeur tels que les structures.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>You can build a class or a structure implementation in one complete declaration, or spread the implementation across multiple declarations.</source>
          <target state="translated">Vous pouvez générer une classe ou une implémentation de la structure dans une déclaration complète ou étendre l’implémentation sur plusieurs déclarations.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property indicates whether the type declaration is complete or partial.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> propriété indique si la déclaration de type est complète ou partielle.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>Not all code generators support partial type declarations, so you should test for this support by calling the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> method with the flag <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes&gt;</ph>.</source>
          <target state="translated">Pas de tous les générateurs de code prenant en charge les déclarations de type partiel, vous devez tester cette prise en charge en appelant le <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> méthode avec l’indicateur <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>This example demonstrates using a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> to declare a type.</source>
          <target state="translated">Cet exemple montre comment utiliser un <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> pour déclarer un type.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeDeclaration.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
          <source>The name for the new type.</source>
          <target state="translated">Nom du nouveau type.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> class with the specified name.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> avec le nom spécifié.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>Gets the base types of the type.</source>
          <target state="translated">Obtient les types de base du type.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceCollection" /&gt;</ph> object that indicates the base types of the type.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceCollection" /&gt;</ph> qui indique les types de base du type.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include <ph id="ph1">&lt;xref:System.Object&gt;</ph> as the first item in the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</ph> collection.</source>
          <target state="translated">Pour générer une classe dans Visual Basic qui n’hérite pas de type de base, mais qui n’implémente pas une ou plusieurs interfaces, vous devez inclure <ph id="ph1">&lt;xref:System.Object&gt;</ph> en tant que le premier élément de la <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</ph> collection.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>In the .NET Framework version 2.0 you do not need the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> for <ph id="ph2">&lt;xref:System.Object&gt;</ph> if the interface you are implementing already exists and you are referring to it by type.</source>
          <target state="translated">Dans le .NET Framework version 2.0, vous n’avez pas besoin du <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> pour <ph id="ph2">&lt;xref:System.Object&gt;</ph> si l’interface que vous implémentez déjà existe et que vous faites référence à ce dernier par type.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>For example, if you are implementing the <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> interface and add it to the collection with this statement, <ph id="ph2">`ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`</ph>, you do not need the preceding <ph id="ph3">`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`</ph> statement.</source>
          <target state="translated">Par exemple, si vous implémentez le <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> de l’interface et l’ajouter à la collection à l’aide de l’instruction <ph id="ph2">`ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`</ph>, vous n’avez pas besoin de l’exemple précédent <ph id="ph3">`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`</ph> instruction.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>The following code illustrates the addition of a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> to the collection that refers to <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Le code suivant illustre l’ajout d’un <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> à la collection qui fait référence à <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>The preceding code generates the equivalent of the following Visual Basic code.</source>
          <target state="translated">Le code précédent génère l’équivalent du code Visual Basic suivant.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>However, the Visual Basic code actually generated is the following.</source>
          <target state="translated">Toutefois, le code Visual Basic en fait généré est la suivante.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsClass">
          <source>Gets or sets a value indicating whether the type is a class or reference type.</source>
          <target state="translated">Obtient ou définit une valeur indiquant si le type est une classe ou un type référence.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsClass">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is a class or reference type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le type est une classe ou un type référence ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
          <source>Gets or sets a value indicating whether the type is an enumeration.</source>
          <target state="translated">Obtient ou définit une valeur indiquant si le type est une énumération.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is an enumeration; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le type est une énumération ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
          <source>Gets or sets a value indicating whether the type is an interface.</source>
          <target state="translated">Obtient ou définit une valeur indiquant si le type est une interface.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is an interface; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le type est une interface ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Gets or sets a value indicating whether the type declaration is complete or partial.</source>
          <target state="translated">Obtient ou définit une valeur indiquant si la déclaration de type est complète ou partielle.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the class or structure declaration is a partial representation of the implementation; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the declaration is a complete implementation of the class or structure.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la déclaration de classe ou de structure est une représentation partielle de l'implémentation ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> si la déclaration est une implémentation complète de la classe ou de la structure.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">La valeur par défaut est <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>You can build a class or structure implementation in one complete declaration, or spread the implementation across multiple declarations.</source>
          <target state="translated">Vous pouvez créer une implémentation de classe ou structure dans une déclaration complète ou étendre l’implémentation sur plusieurs déclarations.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Implementations are commonly supplied in one complete type declaration.</source>
          <target state="translated">Les implémentations sont fournies en général dans la déclaration d’un type complet.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>In this case, set the type declaration <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property to <ph id="ph2">`false`</ph>, which indicates that the type declaration represents all details for the class or structure implementation.</source>
          <target state="translated">Dans ce cas, définissez la déclaration de type <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> propriété <ph id="ph2">`false`</ph>, ce qui signifie que la déclaration de type représente tous les détails de l’implémentation de classe ou structure.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>A partial type declaration makes it easier to build different portions of a class or structure implementation in different modules of your application.</source>
          <target state="translated">Une déclaration de type partielle facilite la construction des différentes parties d’une implémentation de classe ou structure dans différents modules de votre application.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The partial type declarations can be stored in one source file, or spread across multiple source files that are eventually compiled together to form the combined type implementation.</source>
          <target state="translated">Les déclarations de type partiel peuvent être stockées dans un fichier source ou réparties sur plusieurs fichiers sources qui peuvent être compilés ensemble pour former l’implémentation de type combinée.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The C# language supports partial type declarations of classes and structures through the <ph id="ph1">`partial`</ph> keyword.</source>
          <target state="translated">Le langage c# prend en charge les déclarations de type partiel de classes et structures par le biais du <ph id="ph1">`partial`</ph> (mot clé).</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Visual Basic supports partial type declarations of classes and structures with the <ph id="ph1">`Partial`</ph> keyword.</source>
          <target state="translated">Visual Basic prend en charge les déclarations de type partiel de classes et structures avec le <ph id="ph1">`Partial`</ph> (mot clé).</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Not all code generators support partial type declarations, so you should test for this support by calling the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> method with the flag <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes&gt;</ph>.</source>
          <target state="translated">Pas de tous les générateurs de code prenant en charge les déclarations de type partiel, vous devez tester cette prise en charge en appelant le <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> méthode avec l’indicateur <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Partial type declarations are supported for classes and structures.</source>
          <target state="translated">Déclarations de type partiel sont prises en charge pour les classes et structures.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>If you specify a partial type declaration for an enumeration or interface, the generated code produces compiler errors.</source>
          <target state="translated">Si vous spécifiez une déclaration de type partiel pour une énumération ou une interface, le code généré provoque des erreurs du compilateur.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>When supplying a class or structure implementation across multiple declarations, set the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property to <ph id="ph2">`true`</ph> for the initial declaration and all supplemental declarations.</source>
          <target state="translated">Lorsque vous fournissez une implémentation de classe ou structure sur plusieurs déclarations, affectez le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> propriété <ph id="ph2">`true`</ph> pour la déclaration initiale et toutes les déclarations supplémentaires.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The initial declaration must fully specify the type signature, including access modifiers, inherited types, and implemented interfaces.</source>
          <target state="translated">La déclaration initiale doit spécifier complètement le type de signature, y compris les modificateurs d’accès, les types hérités et les interfaces implémentées.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The supplementary declarations do not need to re-specify the type signature.</source>
          <target state="translated">Les déclarations supplémentaires n’avez pas besoin de spécifier à nouveau la signature de type.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>A compiler error typically results if you redefine the type signature in a supplementary declaration.</source>
          <target state="translated">Une erreur de compilation se produit généralement si vous redéfinissez la signature de type dans une déclaration supplémentaire.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Visual Studio 2005 uses partial types to separate user-generated code from designer code.</source>
          <target state="translated">Visual Studio 2005 utilise des types partiels pour séparer le code généré par l’utilisateur à partir de code du concepteur.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the <ph id="ph1">`Partial`</ph> keyword; the designer-provided code appears in the partial class that has the <ph id="ph2">`Partial`</ph> keyword.</source>
          <target state="translated">Dans les projets d’Application Windows Visual Basic, le code utilisateur est placé dans une classe partielle qui n’est pas qualifiée par le <ph id="ph1">`Partial`</ph> mot clé ; fournie par le Concepteur de code apparaît dans la classe partielle qui possède le <ph id="ph2">`Partial`</ph> (mot clé).</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>In C#, both the user code and designer code appear in partial classes identified by the <ph id="ph1">`partial`</ph> keyword.</source>
          <target state="translated">En c#, le code utilisateur et le code du concepteur s’affichent dans les classes partielles identifiées par le <ph id="ph1">`partial`</ph> (mot clé).</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>This example demonstrates using a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> to supply a class implementation across multiple declarations.</source>
          <target state="translated">Cet exemple montre comment utiliser un <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> pour fournir une implémentation de classe sur plusieurs déclarations.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The example builds the initial class declaration statement and sets the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">L’exemple génère l’instruction de déclaration de classe initiale et définit les <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> propriété <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>A different method in the example extends the class implementation.</source>
          <target state="translated">Une autre méthode dans l’exemple étend l’implémentation de classe.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>This method builds a new type declaration statement for the existing class and sets the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Cette méthode génère une nouvelle instruction de déclaration de type pour la classe existante et affecte le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> propriété <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The compiler combines the two partial type declarations together for the complete class implementation.</source>
          <target state="translated">Le compilateur associe les deux déclarations de type partiel pour l’implémentation de classe complète.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
          <source>Gets or sets a value indicating whether the type is a value type (struct).</source>
          <target state="translated">Obtient ou définit une valeur indiquant si le type est un type valeur (structure).</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is a value type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le type est un type valeur ; sinon <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.Members">
          <source>Gets the collection of class members for the represented type.</source>
          <target state="translated">Obtient la collection des membres de classe pour le type représenté.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.Members">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeMemberCollection" /&gt;</ph> object that indicates the class members.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeMemberCollection" /&gt;</ph> qui indique les membres de la classe.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /&gt;</ph> collection is accessed for the first time.</source>
          <target state="translated">Se produit lors du premier accès à la collection <ph id="ph1">&lt;see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /&gt;</ph> collection is accessed for the first time.</source>
          <target state="translated">Se produit lors du premier accès à la collection <ph id="ph1">&lt;see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>Gets or sets the attributes of the type.</source>
          <target state="translated">Obtient ou définit les attributs du type.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.TypeAttributes" /&gt;</ph> object that indicates the attributes of the type.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Reflection.TypeAttributes" /&gt;</ph> qui indique les attributs du type.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.TypeAttributes&gt;</ph> property contains the same type of values used by <ph id="ph2">&lt;xref:System.Reflection&gt;</ph> when investigating a type at run time.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Reflection.TypeAttributes&gt;</ph> propriété contient le même type de valeurs utilisées par <ph id="ph2">&lt;xref:System.Reflection&gt;</ph> lors de la vérification d’un type au moment de l’exécution.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>Many of these flags do not correspond to the type declaration syntax for some languages.</source>
          <target state="translated">Beaucoup de ces indicateurs ne correspondent pas à la syntaxe de déclaration de type pour certaines langues.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>As a result, only the following flags are significant to <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> : <ph id="ph2">&lt;xref:System.Reflection.TypeAttributes.Class&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.TypeAttributes.Interface&gt;</ph>, <ph id="ph4">&lt;xref:System.Reflection.TypeAttributes.Abstract&gt;</ph>, <ph id="ph5">&lt;xref:System.Reflection.TypeAttributes.Sealed&gt;</ph>, <ph id="ph6">&lt;xref:System.Reflection.TypeAttributes.Public&gt;</ph>, <ph id="ph7">&lt;xref:System.Reflection.TypeAttributes.NotPublic&gt;</ph>, <ph id="ph8">&lt;xref:System.Reflection.TypeAttributes.NestedPublic&gt;</ph>, and <ph id="ph9">&lt;xref:System.Reflection.TypeAttributes.NestedPrivate&gt;</ph>.</source>
          <target state="translated">Par conséquent, seuls les indicateurs suivants sont importants pour <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> : <ph id="ph2">&lt;xref:System.Reflection.TypeAttributes.Class&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.TypeAttributes.Interface&gt;</ph>, <ph id="ph4">&lt;xref:System.Reflection.TypeAttributes.Abstract&gt;</ph>, <ph id="ph5">&lt;xref:System.Reflection.TypeAttributes.Sealed&gt;</ph>, <ph id="ph6">&lt;xref:System.Reflection.TypeAttributes.Public&gt;</ph>, <ph id="ph7">&lt;xref:System.Reflection.TypeAttributes.NotPublic&gt;</ph>, <ph id="ph8">&lt;xref:System.Reflection.TypeAttributes.NestedPublic&gt;</ph>, et <ph id="ph9">&lt;xref:System.Reflection.TypeAttributes.NestedPrivate&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>Some of the flags such as <ph id="ph1">&lt;xref:System.Reflection.TypeAttributes.Abstract&gt;</ph> overlap with the meaning of flags in the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> property of <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> that is inherited from <ph id="ph4">&lt;xref:System.CodeDom.CodeTypeMember&gt;</ph>.</source>
          <target state="translated">Certains des indicateurs, tels que <ph id="ph1">&lt;xref:System.Reflection.TypeAttributes.Abstract&gt;</ph> se chevauchent avec la signification des indicateurs dans le <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> propriété du <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> qui est hérité de <ph id="ph4">&lt;xref:System.CodeDom.CodeTypeMember&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> property is a side effect of the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> class inheriting from <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeMember&gt;</ph> so that classes can be nested.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> propriété est un effet secondaire de la <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> classe héritant de <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeMember&gt;</ph> afin que les classes peuvent être imbriquées.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The flags in the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> property should be used instead of the flags in the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> property.</source>
          <target state="translated">Les indicateurs dans le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> propriété doit être utilisée à la place les indicateurs dans le <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The pattern for setting the visibility flags (flags containing the words <ph id="ph1">`Public`</ph> or <ph id="ph2">`Nested`</ph>) is to mask out all visibility flags using the <ph id="ph3">&lt;xref:System.Reflection.TypeAttributes.VisibilityMask&gt;</ph> and then set the desired visibility flag.</source>
          <target state="translated">Le modèle de définition des indicateurs de visibilité (indicateurs qui contiennent les mots <ph id="ph1">`Public`</ph> ou <ph id="ph2">`Nested`</ph>) consiste à masquer visibilité de tous les indicateurs à l’aide de la <ph id="ph3">&lt;xref:System.Reflection.TypeAttributes.VisibilityMask&gt;</ph> , puis définissez l’indicateur de visibilité souhaité.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>For example, the C# code statement to identify the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> (named <ph id="ph2">`cd`</ph>) as an internal class is <ph id="ph3">`cd.TypeAttributes = (cd.TypeAttributes &amp; ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`</ph>.</source>
          <target state="translated">Par exemple, la code instruction c# pour identifier le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> (nommé <ph id="ph2">`cd`</ph>) comme une classe interne est <ph id="ph3">`cd.TypeAttributes = (cd.TypeAttributes &amp; ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The code to set the same value in Visual Basic is <ph id="ph1">`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`</ph>.</source>
          <target state="translated">Le code pour définir la même valeur dans Visual Basic est <ph id="ph1">`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>Setting the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> property directly to a visibility flag (<ph id="ph2">`cd.TypeAttributes = TypeAttributes.NotPublic;`</ph>) erases all other flags that might be set.</source>
          <target state="translated">Définition de la <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> propriété directement à un indicateur de visibilité (<ph id="ph2">`cd.TypeAttributes = TypeAttributes.NotPublic;`</ph>) efface tous les autres indicateurs qui peuvent être définies.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>Gets the type parameters for the type declaration.</source>
          <target state="translated">Obtient les paramètres de type pour la déclaration de type.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeParameterCollection" /&gt;</ph> that contains the type parameters for the type declaration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeParameterCollection" /&gt;</ph> qui contient les paramètres de type pour la déclaration de type.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>A generic type declaration contains one or more unspecified types known as type parameters.</source>
          <target state="translated">Une déclaration de type générique contient un ou plusieurs types connus comme paramètres non spécifiés.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>A type parameter name stands for the type within the body of the generic declaration.</source>
          <target state="translated">Un nom de paramètre de type représente le type dans le corps de la déclaration générique.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>For example, the generic declaration for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class contains the type parameter <ph id="ph2">`T`</ph>.</source>
          <target state="translated">Par exemple, la déclaration générique pour la <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classe contient le paramètre de type <ph id="ph2">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>For more information on generics, see <bpt id="p1">[</bpt>Generics in the .NET Framework Class Library<ept id="p1">](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur les types génériques, consultez <bpt id="p1">[</bpt>génériques dans la bibliothèque de classes .NET Framework<ept id="p1">](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md)</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>