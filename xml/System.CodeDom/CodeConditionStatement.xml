<Type Name="CodeConditionStatement" FullName="System.CodeDom.CodeConditionStatement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="561cba61603cb240574a4cc8d98750308f99305b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30359443" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CodeConditionStatement : System.CodeDom.CodeStatement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeConditionStatement extends System.CodeDom.CodeStatement" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeConditionStatement" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeConditionStatement&#xA;Inherits CodeStatement" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeConditionStatement : System::CodeDom::CodeStatement" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeStatement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente une instruction de branchement conditionnel, qui est généralement représentée par une instruction <see langword="if" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.CodeConditionStatement> peut être utilisé pour représenter le code qui se compose d’une expression conditionnelle, une collection d’instructions à exécuter si l’expression conditionnelle a la valeur `true`et une collection facultative d’instructions à exécuter si l’expression conditionnelle pour `false`. A <xref:System.CodeDom.CodeConditionStatement> est généré dans de nombreux langages comme un `if` instruction.  
  
 Le <xref:System.CodeDom.CodeConditionStatement.Condition%2A> propriété indique l’expression à vérifier. Le <xref:System.CodeDom.CodeConditionStatement.TrueStatements%2A> propriété contient les instructions à exécuter si l’expression de test a la valeur `true`. Le <xref:System.CodeDom.CodeConditionStatement.FalseStatements%2A> propriété contient les instructions à exécuter si l’expression de test a la valeur `false`.  
  
   
  
## Examples  
 Cet exemple montre comment utiliser un <xref:System.CodeDom.CodeConditionStatement> pour représenter un `if` instruction avec un `else` bloc.  
  
 [!code-cpp[CodeConditionStatementExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeConditionStatementExample/CPP/codeconditionstatementexample.cpp#2)]
 [!code-csharp[CodeConditionStatementExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeConditionStatementExample/CS/codeconditionstatementexample.cs#2)]
 [!code-vb[CodeConditionStatementExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeConditionStatementExample/VB/codeconditionstatementexample.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeConditionStatement" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeConditionStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeConditionStatement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeConditionStatement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeConditionStatement" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeConditionStatement (System.CodeDom.CodeExpression condition, params System.CodeDom.CodeStatement[] trueStatements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeExpression condition, class System.CodeDom.CodeStatement[] trueStatements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (condition As CodeExpression, ParamArray trueStatements As CodeStatement())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeConditionStatement(System::CodeDom::CodeExpression ^ condition, ... cli::array &lt;System::CodeDom::CodeStatement ^&gt; ^ trueStatements);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="condition" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="trueStatements" Type="System.CodeDom.CodeStatement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="condition">
          <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression à évaluer.</param>
        <param name="trueStatements">Tableau de type <see cref="T:System.CodeDom.CodeStatement" /> contenant les instructions à exécuter si la condition a la valeur <see langword="true" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeConditionStatement" /> avec la condition et les instructions spécifiées.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.CodeStatement" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeConditionStatement (System.CodeDom.CodeExpression condition, System.CodeDom.CodeStatement[] trueStatements, System.CodeDom.CodeStatement[] falseStatements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeExpression condition, class System.CodeDom.CodeStatement[] trueStatements, class System.CodeDom.CodeStatement[] falseStatements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (condition As CodeExpression, trueStatements As CodeStatement(), falseStatements As CodeStatement())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeConditionStatement(System::CodeDom::CodeExpression ^ condition, cli::array &lt;System::CodeDom::CodeStatement ^&gt; ^ trueStatements, cli::array &lt;System::CodeDom::CodeStatement ^&gt; ^ falseStatements);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="condition" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="trueStatements" Type="System.CodeDom.CodeStatement[]" />
        <Parameter Name="falseStatements" Type="System.CodeDom.CodeStatement[]" />
      </Parameters>
      <Docs>
        <param name="condition">
          <see cref="T:System.CodeDom.CodeExpression" /> indiquant la condition à évaluer.</param>
        <param name="trueStatements">Tableau de type <see cref="T:System.CodeDom.CodeStatement" /> contenant les instructions à exécuter si la condition a la valeur <see langword="true" />.</param>
        <param name="falseStatements">Tableau de type <see cref="T:System.CodeDom.CodeStatement" /> contenant les instructions à exécuter si la condition a la valeur <see langword="false" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeConditionStatement" /> avec la condition et les instructions spécifiées.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.CodeStatement" />
      </Docs>
    </Member>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression Condition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpression Condition" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeConditionStatement.Condition" />
      <MemberSignature Language="VB.NET" Value="Public Property Condition As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeExpression ^ Condition { System::CodeDom::CodeExpression ^ get(); void set(System::CodeDom::CodeExpression ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'expression correspondant à <see langword="true" /> ou à <see langword="false" />.</summary>
        <value>
          <see cref="T:System.CodeDom.CodeExpression" /> correspondant à <see langword="true" /> ou à <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si cette expression conditionnelle a la valeur `true`, le code contenu dans le <xref:System.CodeDom.CodeConditionStatement.TrueStatements%2A> collection sera exécutée. Si cette expression conditionnelle a la valeur `false` et <xref:System.CodeDom.CodeConditionStatement.FalseStatements%2A> collection n’est pas vide, le code contenu dans le <xref:System.CodeDom.CodeConditionStatement.FalseStatements%2A> collection sera exécutée.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="FalseStatements">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeStatementCollection FalseStatements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeStatementCollection FalseStatements" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeConditionStatement.FalseStatements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FalseStatements As CodeStatementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeStatementCollection ^ FalseStatements { System::CodeDom::CodeStatementCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeStatementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection d'instructions à exécuter si l'expression conditionnelle a la valeur <see langword="false" />.</summary>
        <value>
          <see cref="T:System.CodeDom.CodeStatementCollection" /> contenant les instructions à exécuter si l'expression conditionnelle a la valeur <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeStatementCollection" />
      </Docs>
    </Member>
    <Member MemberName="TrueStatements">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeStatementCollection TrueStatements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeStatementCollection TrueStatements" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeConditionStatement.TrueStatements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TrueStatements As CodeStatementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeStatementCollection ^ TrueStatements { System::CodeDom::CodeStatementCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeStatementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection d'instructions à exécuter si l'expression conditionnelle a la valeur <see langword="true" />.</summary>
        <value>
          <see cref="T:System.CodeDom.CodeStatementCollection" /> contenant les instructions à exécuter si l'expression conditionnelle a la valeur <see langword="true" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeStatementCollection" />
      </Docs>
    </Member>
  </Members>
</Type>