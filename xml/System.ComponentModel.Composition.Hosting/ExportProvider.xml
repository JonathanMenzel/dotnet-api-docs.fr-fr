<Type Name="ExportProvider" FullName="System.ComponentModel.Composition.Hosting.ExportProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d863cafd1a554f6db28964cde0826c6296842370" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39836672" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExportProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExportProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.Hosting.ExportProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExportProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExportProvider abstract" />
  <TypeSignature Language="F#" Value="type ExportProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Récupère des exportations qui correspondent à un objet <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> spécifié.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExportProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExportProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ExportsChanged As EventHandler(Of ExportsChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^&gt; ^ ExportsChanged;" />
      <MemberSignature Language="F#" Value="member this.ExportsChanged : EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " Usage="member this.ExportsChanged : System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lors de la modification des exportations de <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportsChanging">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanging" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ExportsChanging As EventHandler(Of ExportsChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^&gt; ^ ExportsChanging;" />
      <MemberSignature Language="F#" Value="member this.ExportsChanging : EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " Usage="member this.ExportsChanging : System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque les exportations fournies sont modifiées.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExport&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtient une exportation spécifiée.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExport&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T&gt; GetExport&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`1&lt;!!T&gt; GetExport&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T) () As Lazy(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; Lazy&lt;T&gt; ^ GetExport();" />
      <MemberSignature Language="F#" Value="member this.GetExport : unit -&gt; Lazy&lt;'T&gt;" Usage="exportProvider.GetExport " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Paramètre de type de l'objet <see cref="T:System.Lazy`1" /> à retourner. Le nom du contrat est également dérivé de ce paramètre de type.</typeparam>
        <summary>Retourne l'exportation avec le nom de contrat dérivé du paramètre de type spécifié. Si la mise en correspondance ne donne pas une et une seule exportation, une exception est levée.</summary>
        <returns>Exportation avec le nom de contrat dérivé du paramètre de type spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom de contrat est le résultat de l’appel le <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> méthode sur `T`.  
  
 Le nom de contrat est comparé à l’aide de la <xref:System.StringComparer.Ordinal%2A> propriété pour effectuer une comparaison respectant la casse, non linguistique.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Il n'y a aucun objet <see cref="T:System.Lazy`1" /> avec le nom de contrat dérivé de <paramref name="T" /> dans l'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  
  
- ou - 
Il y a plusieurs objets <see cref="T:System.Lazy`1" /> avec le nom de contrat dérivé de <paramref name="T" /> dans l'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">L'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> a été supprimé.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T&gt; GetExport&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`1&lt;!!T&gt; GetExport&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T) (contractName As String) As Lazy(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; Lazy&lt;T&gt; ^ GetExport(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExport : string -&gt; Lazy&lt;'T&gt;" Usage="exportProvider.GetExport contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Paramètre de type de l'objet <see cref="T:System.Lazy`1" /> à retourner.</typeparam>
        <param name="contractName">Nom de contrat de l'objet <see cref="T:System.Lazy`1" /> à retourner, <see langword="null" /> ou chaîne vide ("") pour utiliser le nom de contrat par défaut.</param>
        <summary>Retourne l'exportation avec le nom de contrat spécifié. Si la mise en correspondance ne donne pas une et une seule exportation, une exception est levée.</summary>
        <returns>Exportation avec le nom de contrat spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom de contrat par défaut est le résultat de l’appel le <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> méthode sur `T`.  
  
 Le nom de contrat est comparé à l’aide de la <xref:System.StringComparer.Ordinal%2A> propriété pour effectuer une comparaison respectant la casse, non linguistique.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Il n'y a aucun objet <see cref="T:System.Lazy`1" /> avec le nom de contrat dérivé de <paramref name="T" /> dans l'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  
  
- ou - 
Il y a plusieurs objets <see cref="T:System.Lazy`1" /> avec le nom de contrat dérivé de <paramref name="T" /> dans l'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">L'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> a été supprimé.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T,TMetadataView&gt; GetExport&lt;T,TMetadataView&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`2&lt;!!T, !!TMetadataView&gt; GetExport&lt;T, TMetadataView&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T, TMetadataView) () As Lazy(Of T, TMetadataView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; Lazy&lt;T, TMetadataView&gt; ^ GetExport();" />
      <MemberSignature Language="F#" Value="member this.GetExport : unit -&gt; Lazy&lt;'T, 'MetadataView&gt;" Usage="exportProvider.GetExport " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T,TMetadataView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Paramètre de type de l'objet <see cref="T:System.Lazy`2" /> à retourner. Le nom du contrat est également dérivé de ce paramètre de type.</typeparam>
        <typeparam name="TMetadataView">Type d'affichage des métadonnées de l'objet <see cref="T:System.Lazy`2" /> à retourner.</typeparam>
        <summary>Retourne l'exportation avec le nom de contrat dérivé du paramètre de type spécifié. Si la mise en correspondance ne donne pas une et une seule exportation, une exception est levée.</summary>
        <returns>System.Lazy`2</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom de contrat est le résultat de l’appel le <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> méthode sur `T`.  
  
 Le nom de contrat est comparé à l’aide de la <xref:System.StringComparer.Ordinal%2A> propriété pour effectuer une comparaison respectant la casse, non linguistique.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Il n'y a aucun objet <see cref="T:System.Lazy`2" /> avec le nom de contrat dérivé de <paramref name="T" /> dans l'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  
  
- ou - 
Il y a plusieurs objets <see cref="T:System.Lazy`2" /> avec le nom de contrat dérivé de <paramref name="T" /> dans l'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">L'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> a été supprimé.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="TMetadataView" /> n'est pas un type de vue de métadonnées valide.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T,TMetadataView&gt; GetExport&lt;T,TMetadataView&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`2&lt;!!T, !!TMetadataView&gt; GetExport&lt;T, TMetadataView&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T, TMetadataView) (contractName As String) As Lazy(Of T, TMetadataView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; Lazy&lt;T, TMetadataView&gt; ^ GetExport(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExport : string -&gt; Lazy&lt;'T, 'MetadataView&gt;" Usage="exportProvider.GetExport contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T,TMetadataView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Paramètre de type de l'objet <see cref="T:System.Lazy`2" /> à retourner.</typeparam>
        <typeparam name="TMetadataView">Type d'affichage des métadonnées de l'objet <see cref="T:System.Lazy`2" /> à retourner.</typeparam>
        <param name="contractName">Nom de contrat de l'objet <see cref="T:System.Lazy`2" /> à retourner, <see langword="null" /> ou chaîne vide ("") pour utiliser le nom de contrat par défaut.</param>
        <summary>Retourne l'exportation avec le nom de contrat spécifié. Si la mise en correspondance ne donne pas une et une seule exportation, une exception est levée.</summary>
        <returns>Exportation avec le nom de contrat spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom de contrat par défaut est le résultat de l’appel le <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> méthode sur `T`.  
  
 Le nom de contrat est comparé à l’aide de la <xref:System.StringComparer.Ordinal%2A> propriété pour effectuer une comparaison respectant la casse, non linguistique.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Il n'y a aucun objet <see cref="T:System.Lazy`2" /> avec le nom de contrat dérivé de <paramref name="T" /> dans l'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  
  
- ou - 
Il y a plusieurs objets <see cref="T:System.Lazy`2" /> avec le nom de contrat dérivé de <paramref name="T" /> dans l'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">L'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> a été supprimé.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="TMetadataView" /> n'est pas un type de vue de métadonnées valide.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValue&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtient un objet exporté.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValue&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValue&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValue(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValue();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValue : unit -&gt; 'T" Usage="exportProvider.GetExportedValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Type de l'objet exporté à retourner. Le nom du contrat est également dérivé de ce paramètre de type.</typeparam>
        <summary>Retourne l'objet exporté avec le nom de contrat dérivé du paramètre de type spécifié. Si la mise en correspondance ne donne pas uniquement un seul objet exporté, une exception est levée.</summary>
        <returns>Objet exporté avec le nom de contrat dérivé du paramètre de type spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom de contrat est le résultat de l’appel le <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> méthode sur `T`.  
  
 Le nom de contrat est comparé à l’aide de la <xref:System.StringComparer.Ordinal%2A> propriété pour effectuer une comparaison respectant la casse, non linguistique.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Il n'y a aucun objet exporté avec le nom de contrat dérivé de <paramref name="T" /> dans <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  
  
- ou - 
Il y a plusieurs objets exportés avec le nom de contrat dérivé de <paramref name="T" /> dans <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">L'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> a été supprimé.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">L'objet exporté sous-jacent ne peut pas être casté en <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Une erreur s'est produite pendant la composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> contiendra une collection d'erreurs qui se sont produites.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValue&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValue&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValue(Of T) (contractName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValue(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValue : string -&gt; 'T" Usage="exportProvider.GetExportedValue contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Type de l'objet exporté à retourner.</typeparam>
        <param name="contractName">Nom de contrat de l'objet exporté à retourner, <see langword="null" /> ou chaîne vide ("") pour utiliser le nom de contrat par défaut.</param>
        <summary>Retourne l'objet exporté avec le nom de contrat spécifié. Si la mise en correspondance ne donne pas uniquement un seul objet exporté, une exception est levée.</summary>
        <returns>Objet exporté avec le nom de contrat spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom de contrat par défaut est le résultat de l’appel le <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> méthode sur `T`.  
  
 Le nom de contrat est comparé à l’aide de la <xref:System.StringComparer.Ordinal%2A> propriété pour effectuer une comparaison respectant la casse, non linguistique.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Il n'y a aucun objet exporté avec le nom de contrat dérivé de <paramref name="T" /> dans <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  
  
- ou - 
Il y a plusieurs objets exportés avec le nom de contrat dérivé de <paramref name="T" /> dans <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">L'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> a été supprimé.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">L'objet exporté sous-jacent ne peut pas être casté en <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Une erreur s'est produite pendant la composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> contiendra une collection d'erreurs qui se sont produites.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtient un objet exporté spécifié ou une valeur par défaut si celui-ci n'est pas disponible.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValueOrDefault&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValueOrDefault&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValueOrDefault(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValueOrDefault();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValueOrDefault : unit -&gt; 'T" Usage="exportProvider.GetExportedValueOrDefault " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Type de l'objet exporté à retourner. Le nom du contrat est également dérivé de ce paramètre de type.</typeparam>
        <summary>Obtient l'objet exporté avec le nom de contrat dérivé du paramètre de type spécifié ou la valeur par défaut du type spécifié, ou encore lève une exception s'il existe plusieurs correspondances d'objets exportés.</summary>
        <returns>Objet exporté avec le nom de contrat dérivé de <paramref name="T" />, s'il est trouvé ; sinon, valeur par défaut de <paramref name="T" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’objet exporté est introuvable, cette méthode retourne la valeur par défaut appropriée pour `T`; par exemple, zéro pour les types d’entiers, `false` pour les types booléens et `null` pour les types référence.  
  
 Le nom de contrat est le résultat de l’appel le <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> méthode sur `T`.  
  
 Le nom de contrat est comparé à l’aide de la <xref:System.StringComparer.Ordinal%2A> propriété pour effectuer une comparaison respectant la casse, non linguistique.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Il y a plusieurs objets exportés avec le nom de contrat dérivé de <paramref name="T" /> dans <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">L'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> a été supprimé.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">L'objet exporté sous-jacent ne peut pas être casté en <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Une erreur s'est produite pendant la composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> contiendra une collection d'erreurs qui se sont produites.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValueOrDefault&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValueOrDefault&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValueOrDefault(Of T) (contractName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValueOrDefault(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValueOrDefault : string -&gt; 'T" Usage="exportProvider.GetExportedValueOrDefault contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Type de l'objet exporté à retourner.</typeparam>
        <param name="contractName">Nom de contrat de l'objet exporté à retourner, <see langword="null" /> ou chaîne vide ("") pour utiliser le nom de contrat par défaut.</param>
        <summary>Obtient l'objet exporté avec le nom de contrat spécifié ou la valeur par défaut du type spécifié, ou encore lève une exception s'il existe plusieurs correspondances d'objets exportés.</summary>
        <returns>Objet exporté avec le nom de contrat spécifié, s'il est trouvé ; sinon, valeur par défaut de <paramref name="T" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’objet exporté est introuvable, cette méthode retourne la valeur par défaut appropriée pour `T`; par exemple, zéro pour les types d’entiers, `false` pour les types booléens et `null` pour les types référence.  
  
 Le nom de contrat par défaut est le résultat de l’appel le <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> méthode sur `T`.  
  
 Le nom de contrat est comparé à l’aide de la <xref:System.StringComparer.Ordinal%2A> propriété pour effectuer une comparaison respectant la casse, non linguistique.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Il y a plusieurs objets exportés avec le nom de contrat spécifié dans <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">L'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> a été supprimé.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">L'objet exporté sous-jacent ne peut pas être casté en <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Une erreur s'est produite pendant la composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> contiendra une collection d'erreurs qui se sont produites.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValues&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtient un ou plusieurs objets exportés.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValues&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; GetExportedValues&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetExportedValues&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValues(Of T) () As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;T&gt; ^ GetExportedValues();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValues : unit -&gt; seq&lt;'T&gt;" Usage="exportProvider.GetExportedValues " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Type de l'objet exporté à retourner. Le nom du contrat est également dérivé de ce paramètre de type.</typeparam>
        <summary>Obtient tous les objets exportés avec le nom de contrat dérivé du paramètre de type spécifié.</summary>
        <returns>Objets exportés avec le nom de contrat dérivé du paramètre de type spécifié, s'il est trouvé ; sinon, objet <see cref="T:System.Collections.ObjectModel.Collection`1" /> vide.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom de contrat est le résultat de l’appel le <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> méthode sur `T`.  
  
 Le nom de contrat est comparé à l’aide de la <xref:System.StringComparer.Ordinal%2A> propriété pour effectuer une comparaison respectant la casse, non linguistique.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> a été supprimé.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Un ou plusieurs des objets exportés sous-jacents ne peuvent pas être castés en <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Une erreur s'est produite pendant la composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> contiendra une collection d'erreurs qui se sont produites.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValues&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; GetExportedValues&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetExportedValues&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValues(Of T) (contractName As String) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;T&gt; ^ GetExportedValues(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValues : string -&gt; seq&lt;'T&gt;" Usage="exportProvider.GetExportedValues contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Type de l'objet exporté à retourner.</typeparam>
        <param name="contractName">Nom de contrat des objets exportés à retourner, <see langword="null" /> ou chaîne vide ("") pour utiliser le nom de contrat par défaut.</param>
        <summary>Obtient tous les objets exportés avec le nom de contrat spécifié.</summary>
        <returns>Objets exportés avec le nom de contrat spécifié, s'il est trouvé ; sinon, objet <see cref="T:System.Collections.ObjectModel.Collection`1" /> vide.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom de contrat par défaut est le résultat de l’appel le <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> méthode sur `T`.  
  
 Le nom de contrat est comparé à l’aide de la <xref:System.StringComparer.Ordinal%2A> propriété pour effectuer une comparaison respectant la casse, non linguistique.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> a été supprimé.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Une ou plusieurs des valeurs exportées sous-jacentes ne peuvent pas être castées en <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Une erreur s'est produite pendant la composition. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> contiendra une collection d'erreurs qui se sont produites.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExports">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtient toutes les exportations correspondant aux conditions spécifiées.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports (definition As ImportDefinition) As IEnumerable(Of Export)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition);" />
      <MemberSignature Language="F#" Value="member this.GetExports : System.ComponentModel.Composition.Primitives.ImportDefinition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExports definition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="definition">Objet qui définit les conditions des objets <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> à obtenir.</param>
        <summary>Obtient toutes les exportations qui correspondent aux conditions de la définition de l'importation spécifiée.</summary>
        <returns>Collection de tous les objets <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> correspondant à la condition spécifiée par <paramref name="definition" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException"><see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> est <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> et il n'y a aucun objet <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> qui correspond aux conditions du <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> spécifié.  
  
- ou - 
 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> est <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> ou <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> et il y a plusieurs objets <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> qui correspondent aux conditions du <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> spécifié.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="definition" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition);" />
      <MemberSignature Language="F#" Value="member this.GetExports : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExports (definition, atomicComposition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </Parameters>
      <Docs>
        <param name="definition">Objet qui définit les conditions des objets <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> à obtenir.</param>
        <param name="atomicComposition">Conteneur transactionnel pour la composition.</param>
        <summary>Obtient toutes les exportations qui correspondent aux conditions de la définition et de la composition de l'importation spécifiée.</summary>
        <returns>Collection de tous les objets <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> correspondant à la condition spécifiée par <paramref name="definition" /> et <paramref name="atomicComposition" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException"><see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> est <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> et il n'y a aucun objet <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> qui correspond aux conditions du <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> spécifié.  
  
- ou - 
 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> est <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> ou <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> et il y a plusieurs objets <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> qui correspondent aux conditions du <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> spécifié.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="definition" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="atomicComposition" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;object,object&gt;&gt; GetExports (Type type, Type metadataViewType, string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;object, object&gt;&gt; GetExports(class System.Type type, class System.Type metadataViewType, string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;System::Object ^, System::Object ^&gt; ^&gt; ^ GetExports(Type ^ type, Type ^ metadataViewType, System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : Type * Type * string -&gt; seq&lt;Lazy&lt;obj, obj&gt;&gt;" Usage="exportProvider.GetExports (type, metadataViewType, contractName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;System.Object,System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="metadataViewType" Type="System.Type" />
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">Paramètre de type des objets <see cref="T:System.Lazy`2" /> à retourner.</param>
        <param name="metadataViewType">Type d'affichage des métadonnées des objets <see cref="T:System.Lazy`2" /> à retourner.</param>
        <param name="contractName">Nom de contrat de l'objet <see cref="T:System.Lazy`2" /> à retourner, <see langword="null" /> ou chaîne vide ("") pour utiliser le nom de contrat par défaut.</param>
        <summary>Obtient toutes les exportations avec le nom de contrat spécifié.</summary>
        <returns>Collection de tous les objets <see cref="T:System.Lazy`2" /> pour le contrat correspondant à <paramref name="contractName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom de contrat par défaut est le résultat de l’appel le <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> méthode sur `type`.  
  
 Le nom de contrat est comparé à l’aide de la <xref:System.StringComparer.Ordinal%2A> propriété pour effectuer une comparaison respectant la casse, non linguistique.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> a été supprimé.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="metadataViewType" /> n'est pas un type de vue de métadonnées valide.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T&gt;&gt; GetExports&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`1&lt;!!T&gt;&gt; GetExports&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T) () As IEnumerable(Of Lazy(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T&gt; ^&gt; ^ GetExports();" />
      <MemberSignature Language="F#" Value="member this.GetExports : unit -&gt; seq&lt;Lazy&lt;'T&gt;&gt;" Usage="exportProvider.GetExports " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Paramètre de type des objets <see cref="T:System.Lazy`1" /> à retourner. Le nom du contrat est également dérivé de ce paramètre de type.</typeparam>
        <summary>Obtient toutes les exportations avec le nom de contrat dérivé du paramètre de type spécifié.</summary>
        <returns>Objets <see cref="T:System.Lazy`1" /> avec le nom de contrat dérivé de <paramref name="T" />, s'il est trouvé ; sinon, objet <see cref="T:System.Collections.Generic.IEnumerable`1" /> vide.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom de contrat est le résultat de l’appel le <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> méthode sur `T`.  
  
 Le nom de contrat est comparé à l’aide de la <xref:System.StringComparer.Ordinal%2A> propriété pour effectuer une comparaison respectant la casse, non linguistique.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> a été supprimé.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T&gt;&gt; GetExports&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`1&lt;!!T&gt;&gt; GetExports&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T) (contractName As String) As IEnumerable(Of Lazy(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T&gt; ^&gt; ^ GetExports(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : string -&gt; seq&lt;Lazy&lt;'T&gt;&gt;" Usage="exportProvider.GetExports contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Paramètre de type des objets <see cref="T:System.Lazy`1" /> à retourner.</typeparam>
        <param name="contractName">Nom de contrat des objets <see cref="T:System.Lazy`1" /> à retourner, <see langword="null" /> ou chaîne vide ("") pour utiliser le nom de contrat par défaut.</param>
        <summary>Obtient toutes les exportations avec le nom de contrat spécifié.</summary>
        <returns>Objets <see cref="T:System.Lazy`1" /> avec le nom de contrat spécifié, s'il est trouvé ; sinon, objet <see cref="T:System.Collections.Generic.IEnumerable`1" /> vide.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom de contrat par défaut est le résultat de l’appel le <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> méthode sur `T`.  
  
 Le nom de contrat est comparé à l’aide de la <xref:System.StringComparer.Ordinal%2A> propriété pour effectuer une comparaison respectant la casse, non linguistique.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> a été supprimé.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T,TMetadataView&gt;&gt; GetExports&lt;T,TMetadataView&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;!!T, !!TMetadataView&gt;&gt; GetExports&lt;T, TMetadataView&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T, TMetadataView) () As IEnumerable(Of Lazy(Of T, TMetadataView))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T, TMetadataView&gt; ^&gt; ^ GetExports();" />
      <MemberSignature Language="F#" Value="member this.GetExports : unit -&gt; seq&lt;Lazy&lt;'T, 'MetadataView&gt;&gt;" Usage="exportProvider.GetExports " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T,TMetadataView&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Paramètre de type des objets <see cref="T:System.Lazy`2" /> à retourner. Le nom du contrat est également dérivé de ce paramètre de type.</typeparam>
        <typeparam name="TMetadataView">Type d'affichage des métadonnées des objets <see cref="T:System.Lazy`2" /> à retourner.</typeparam>
        <summary>Obtient toutes les exportations avec le nom de contrat dérivé du paramètre de type spécifié.</summary>
        <returns>Objets <see cref="T:System.Lazy`2" /> avec le nom de contrat dérivé de <paramref name="T" />, s'il est trouvé ; sinon, objet <see cref="T:System.Collections.Generic.IEnumerable`1" /> vide.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom de contrat est le résultat de l’appel le <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> méthode sur `T`.  
  
 Le nom de contrat est comparé à l’aide de la <xref:System.StringComparer.Ordinal%2A> propriété pour effectuer une comparaison respectant la casse, non linguistique.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> a été supprimé.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="TMetadataView" /> n'est pas un type de vue de métadonnées valide.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T,TMetadataView&gt;&gt; GetExports&lt;T,TMetadataView&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;!!T, !!TMetadataView&gt;&gt; GetExports&lt;T, TMetadataView&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T, TMetadataView) (contractName As String) As IEnumerable(Of Lazy(Of T, TMetadataView))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T, TMetadataView&gt; ^&gt; ^ GetExports(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : string -&gt; seq&lt;Lazy&lt;'T, 'MetadataView&gt;&gt;" Usage="exportProvider.GetExports contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T,TMetadataView&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Paramètre de type des objets <see cref="T:System.Lazy`2" /> à retourner. Le nom du contrat est également dérivé de ce paramètre de type.</typeparam>
        <typeparam name="TMetadataView">Type d'affichage des métadonnées des objets <see cref="T:System.Lazy`2" /> à retourner.</typeparam>
        <param name="contractName">Nom de contrat des objets <see cref="T:System.Lazy`2" /> à retourner, <see langword="null" /> ou chaîne vide ("") pour utiliser le nom de contrat par défaut.</param>
        <summary>Obtient toutes les exportations avec le nom de contrat spécifié.</summary>
        <returns>Objets <see cref="T:System.Lazy`2" /> avec le nom de contrat spécifié, s'il est trouvé ; sinon, objet <see cref="T:System.Collections.Generic.IEnumerable`1" /> vide.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom de contrat par défaut est le résultat de l’appel le <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> méthode sur `T`.  
  
 Le nom de contrat est comparé à l’aide de la <xref:System.StringComparer.Ordinal%2A> propriété pour effectuer une comparaison respectant la casse, non linguistique.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'objet <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> a été supprimé.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="TMetadataView" /> n'est pas un type de vue de métadonnées valide.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportsCore">
      <MemberSignature Language="C#" Value="protected abstract System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExportsCore(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition);" />
      <MemberSignature Language="F#" Value="abstract member GetExportsCore : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExportsCore (definition, atomicComposition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </Parameters>
      <Docs>
        <param name="definition">Objet qui définit les conditions des objets <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> à retourner.</param>
        <param name="atomicComposition">Conteneur transactionnel pour la composition.</param>
        <summary>Obtient toutes les exportations qui correspondent à la contrainte définie par la définition spécifiée.</summary>
        <returns>Collection qui contient toutes les exportations correspondant à la condition spécifiée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Remplacements de cette méthode ne doivent pas traiter les incompatibilités de cardinalité comme des erreurs et lever d’exceptions dans ces cas. Par exemple, si <xref:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality%2A> est <xref:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne> et il y a aucun <xref:System.ComponentModel.Composition.Primitives.Export> les objets qui correspondent aux conditions de l’objet <xref:System.ComponentModel.Composition.Primitives.ImportDefinition>, vide <xref:System.Collections.Generic.IEnumerable%601> collection doit être retournée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExportsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnExportsChanged (System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExportsChanged(class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnExportsChanged (e As ExportsChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnExportsChanged(System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnExportsChanged : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit&#xA;override this.OnExportsChanged : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit" Usage="exportProvider.OnExportsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExportsChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnExportsChanging (System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExportsChanging(class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnExportsChanging (e As ExportsChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnExportsChanging(System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnExportsChanging : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit&#xA;override this.OnExportsChanging : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit" Usage="exportProvider.OnExportsChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetExports">
      <MemberSignature Language="C#" Value="public bool TryGetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition, out System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; exports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition, [out] class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt;&amp; exports) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition, [Runtime::InteropServices::Out] System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ % exports);" />
      <MemberSignature Language="F#" Value="member this.TryGetExports : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition *  -&gt; bool" Usage="exportProvider.TryGetExports (definition, atomicComposition, exports)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
        <Parameter Name="exports" Type="System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="definition">Objet qui définit les conditions des objets <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> à obtenir.</param>
        <param name="atomicComposition">Conteneur transactionnel pour la composition.</param>
        <param name="exports">Lorsque cette méthode est retournée, contient une collection d'objets <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> qui correspondent aux conditions définies par <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />, s'il est trouvé ; sinon, objet <see cref="T:System.Collections.Generic.IEnumerable`1" /> vide. Ce paramètre est passé sans être initialisé.</param>
        <summary>Obtient toutes les exportations qui correspondent aux conditions de l'importation spécifiée.</summary>
        <returns><see langword="true" />si <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> est <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> ou <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrMore" /> et qu’il n’y a aucun objet <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> qui correspond aux conditions du <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> spécifié ; <see langword="true" /> si <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> est <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> ou <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> qu’il existe exactement un <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> qui correspond aux conditions du <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />spécifié ; sinon, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="definition" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>