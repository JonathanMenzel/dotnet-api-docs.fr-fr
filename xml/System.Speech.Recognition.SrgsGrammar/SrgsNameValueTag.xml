<Type Name="SrgsNameValueTag" FullName="System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f19a1a1a85b4cfb32db30bfbb8b09bd5ffd5557e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30528213" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SrgsNameValueTag : System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SrgsNameValueTag extends System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" />
  <TypeSignature Language="VB.NET" Value="Public Class SrgsNameValueTag&#xA;Inherits SrgsElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class SrgsNameValueTag : System::Speech::Recognition::SrgsGrammar::SrgsElement" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.SrgsGrammar.SrgsElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebuggerDisplayString ()}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente un élément pour associer une valeur sémantique avec une expression dans une syntaxe.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet objet est similaire à la `tag` élément défini par le World Wide Web Consortium (W3C) [spécification de grammaire de reconnaissance vocale (SRGS) Version 1.0.](http://go.microsoft.com/fwlink/?LinkId=201761). Toutefois, le <xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value%2A> propriété de cet objet ne peut pas être le script. Le contenu de <xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value%2A> peut être du type <xref:System.Boolean>, <xref:System.Double>, <xref:System.Int32>, ou <xref:System.String>. Les valeurs de chaîne doivent être entre guillemets doubles.  
  
 Pour ajouter une sémantique en tant que script, utilisez <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag>.  
  
   
  
## Examples  
 L’exemple suivant crée une grammaire pour le choix d’un vol villes. L’exemple utilise <xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.%23ctor%2A> pour affecter une valeur sémantique à chaque ville, le code de l’aéroport de la ville.  
  
 L’exemple crée deux <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> instances, dont chacun spécifie une clé sémantique. Les deux références de ciblent le même de règle <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> objet, appelé `cities`, mais le résultat de la reconnaissance de la référence de règle de balise avec une autre clé sémantique. La sémantique clé identifie une ville reconnue en tant que la ville de départ ou de la ville de l’arrivée du vol. Le gestionnaire pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événement utilise les clés pour récupérer les valeurs de la sémantique créés à l’aide de <xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.%23ctor%2A> à partir du résultat de la reconnaissance.  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a SpeechRecognitionEngine object.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Build a rule with a list of cities, assign a semantic value to each city.  
        SrgsItem chi = new SrgsItem("Chicago");  
        chi.Add(new SrgsNameValueTag("ORD"));  
        SrgsItem bos = new SrgsItem("Boston");  
        bos.Add(new SrgsNameValueTag("BOS"));  
        SrgsItem mia = new SrgsItem("Miami");  
        mia.Add(new SrgsNameValueTag("MIA"));  
        SrgsItem dal = new SrgsItem("Dallas");  
        dal.Add(new SrgsNameValueTag("DFW"));  
  
        SrgsOneOf cities = new SrgsOneOf(new SrgsItem[] { chi, bos, mia, dal });  
        SrgsRule citiesRule = new SrgsRule("flightCities");  
        citiesRule.Add(cities);  
  
        // Build the root rule, add rule references to the cities rule.  
        SrgsRule flightBooker = new SrgsRule("bookFlight");  
        flightBooker.Add(new SrgsItem("I want to fly from"));  
        flightBooker.Add(new SrgsRuleRef(citiesRule, "departureCity"));  
        flightBooker.Add(new SrgsItem("to"));  
        flightBooker.Add(new SrgsRuleRef(citiesRule, "arrivalCity"));  
  
        // Build an SrgsDocument object from the flightBooker rule and add the cities rule.  
        SrgsDocument cityChooser = new SrgsDocument(flightBooker);  
        cityChooser.Rules.Add(citiesRule);  
  
        // Create a Grammar object from the SrgsDocument and load it to the recognizer.  
        Grammar departArrive = new Grammar(cityChooser);  
        departArrive.Name = ("Cities Grammar");  
        recognizer.LoadGrammarAsync(departArrive);  
  
        // Configure recognizer input.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The departure city is: " + e.Result.Semantics["departureCity"].Value);  
      Console.WriteLine("  The destination city is: " + e.Result.Semantics["arrivalCity"].Value);  
    }  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsNameValueTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsNameValueTag();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsNameValueTag (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsNameValueTag(System::Object ^ value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Valeur utilisée pour définir la propriété <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" /> en spécifiant une valeur pour l'instance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant crée une grammaire pour le choix d’un vol villes. L’exemple utilise <xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.%23ctor%2A> pour affecter une valeur sémantique à chaque ville, le code de l’aéroport de la ville.  
  
 L’exemple crée deux <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> instances, dont chacun spécifie une clé sémantique. Les deux références de ciblent le même de règle <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> objet, appelé `cities`, mais le résultat de la reconnaissance de la référence de règle de balise avec une autre clé sémantique. La sémantique clé identifie une ville reconnue en tant que la ville de départ ou de la ville de l’arrivée du vol. Le gestionnaire pour le <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> événement utilise les clés pour récupérer les valeurs de la sémantique créés à l’aide de <xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.%23ctor%2A> à partir du résultat de la reconnaissance.  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a SpeechRecognitionEngine object.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Build a rule with a list of cities, assign a semantic value to each city.  
        SrgsItem chi = new SrgsItem("Chicago");  
        chi.Add(new SrgsNameValueTag("ORD"));  
        SrgsItem bos = new SrgsItem("Boston");  
        bos.Add(new SrgsNameValueTag("BOS"));  
        SrgsItem mia = new SrgsItem("Miami");  
        mia.Add(new SrgsNameValueTag("MIA"));  
        SrgsItem dal = new SrgsItem("Dallas");  
        dal.Add(new SrgsNameValueTag("DFW"));  
  
        SrgsOneOf cities = new SrgsOneOf(new SrgsItem[] { chi, bos, mia, dal });  
        SrgsRule citiesRule = new SrgsRule("flightCities");  
        citiesRule.Add(cities);  
  
        // Build the root rule, add rule references to the cities rule.  
        SrgsRule flightBooker = new SrgsRule("bookFlight");  
        flightBooker.Add(new SrgsItem("I want to fly from"));  
        flightBooker.Add(new SrgsRuleRef(citiesRule, "departureCity"));  
        flightBooker.Add(new SrgsItem("to"));  
        flightBooker.Add(new SrgsRuleRef(citiesRule, "arrivalCity"));  
  
        // Build an SrgsDocument object from the flightBooker rule and add the cities rule.  
        SrgsDocument cityChooser = new SrgsDocument(flightBooker);  
        cityChooser.Rules.Add(citiesRule);  
  
        // Create a Grammar object from the SrgsDocument and load it to the recognizer.  
        Grammar departArrive = new Grammar(cityChooser);  
        departArrive.Name = ("Cities Grammar");  
        recognizer.LoadGrammarAsync(departArrive);  
  
        // Configure recognizer input.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The departure city is: " + e.Result.Semantics["departureCity"].Value);  
      Console.WriteLine("  The destination city is: " + e.Result.Semantics["arrivalCity"].Value);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsNameValueTag (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.#ctor(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsNameValueTag(System::String ^ name, System::Object ^ value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Chaîne utilisée pour définir la propriété <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Name" /> sur l'objet <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" />.</param>
        <param name="value">Objet utilisé pour définir la propriété <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value" /> sur l'objet <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" /> en spécifiant un nom et une valeur pour l'instance.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> est <see langword="null" />.  
  
 <paramref name="name" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> est une chaîne vide.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de l'instance <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" />.</summary>
        <value>Chaîne qui contient le nom de l'instance <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Une tentative est effectuée pour attribuer à <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Name" /> la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Tentative d'affectation d'une chaîne vide à <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Name" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la valeur contenue dans l'instance <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" />.</summary>
        <value>Valeur contenue dans l'instance <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les types valides pour la <xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value%2A> propriété sont :  
  
-   <xref:System.Boolean>  
  
-   <xref:System.Double>  
  
-   <xref:System.Int32>  
  
-   <xref:System.String>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Une tentative est effectuée pour attribuer à <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value" /> la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Une tentative est effectuée pour affecter à <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value" /> un type non valide.</exception>
      </Docs>
    </Member>
  </Members>
</Type>