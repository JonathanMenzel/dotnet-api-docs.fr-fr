<Type Name="EventHandlerService" FullName="System.Windows.Forms.Design.EventHandlerService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d08bb61d580b54d16d28dbe53ab42b4e10090d6b" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56388766" /></Metadata><TypeSignature Language="C#" Value="public sealed class EventHandlerService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventHandlerService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Design.EventHandlerService" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventHandlerService" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventHandlerService sealed" />
  <TypeSignature Language="F#" Value="type EventHandlerService = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f62ae-101">Fournit un moyen systématique de gérer les gestionnaires d'événements pour le document en cours.</span><span class="sxs-lookup"><span data-stu-id="f62ae-101">Provides a systematic way to manage event handlers for the current document.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f62ae-102">Les développeurs peuvent veulent être en mesure d’écrire du code dans un emplacement qui gère les événements d’un certain type.</span><span class="sxs-lookup"><span data-stu-id="f62ae-102">Developers may want to be able to write code in one place that handles events of a certain type.</span></span>  
  
 <span data-ttu-id="f62ae-103">En outre, les développeurs peuvent doivent modifier globalement le comportement des gestionnaires pour des événements spécifiques ou des types d’événements, ce qui peuvent être distribués entre les composants de concepteur.</span><span class="sxs-lookup"><span data-stu-id="f62ae-103">Also, developers may need to globally change the behavior of the handlers for specific events or types of events, which may be distributed among designer components.</span></span>  
  
 <span data-ttu-id="f62ae-104">Les concepteurs pour un projet standard sont nombreux objets différents, il peut être utile de répertorier et de stocker la référence à ces événements à partir d’un emplacement commun.</span><span class="sxs-lookup"><span data-stu-id="f62ae-104">The designers for a typical project are many different objects so it can be useful to list and store reference to these events from a common place.</span></span>  
  
 <span data-ttu-id="f62ae-105">Ce service implémente une « pile d’événements » qui contient l’ensemble actuel de gestionnaires d’événements.</span><span class="sxs-lookup"><span data-stu-id="f62ae-105">This service implements an "event stack" that contains the current set of event handlers.</span></span> <span data-ttu-id="f62ae-106">La pile peut avoir une variété de différents types de gestionnaires sur la pile.</span><span class="sxs-lookup"><span data-stu-id="f62ae-106">The stack may have a variety of different types of handlers on the stack.</span></span>  
  
 <span data-ttu-id="f62ae-107">Par exemple, un concepteur peut transmettre ou ajouter, un gestionnaire de clavier et un gestionnaire de la souris sur la pile.</span><span class="sxs-lookup"><span data-stu-id="f62ae-107">For example, a designer might push, or add, a keyboard handler and a mouse handler onto the stack.</span></span> <span data-ttu-id="f62ae-108">Lorsqu’un concepteur demande un gestionnaire d’événements, le service recherche le gestionnaire le plus haut de la pile qui correspond à la classe que vous avez demandée.</span><span class="sxs-lookup"><span data-stu-id="f62ae-108">When a designer requests an event handler, the service will find the topmost handler on the stack that matches the class you requested.</span></span>  
  
 <span data-ttu-id="f62ae-109">Ainsi, le service peut être étendu à n’importe quel schéma de gestion des événements, et il permet également de types spécifiques de gestionnaires d’événements à remplacer.</span><span class="sxs-lookup"><span data-stu-id="f62ae-109">This way the service can be extended to any eventing scheme, and it also allows specific types of event handlers to be replaced.</span></span> <span data-ttu-id="f62ae-110">Par exemple, vous pouvez remplacer des gestionnaires d’événements de souris sans affecter les gestionnaires d’événements de menu ou des gestionnaires d’événements de clavier.</span><span class="sxs-lookup"><span data-stu-id="f62ae-110">For example, you can replace mouse event handlers without affecting menu event handlers or keyboard event handlers.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventHandlerService (System.Windows.Forms.Control focusWnd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control focusWnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.#ctor(System.Windows.Forms.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (focusWnd As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventHandlerService(System::Windows::Forms::Control ^ focusWnd);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Design.EventHandlerService : System.Windows.Forms.Control -&gt; System.Windows.Forms.Design.EventHandlerService" Usage="new System.Windows.Forms.Design.EventHandlerService focusWnd" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="focusWnd" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="focusWnd"><span data-ttu-id="f62ae-111"><see cref="T:System.Windows.Forms.Control" /> en cours de conception.</span><span class="sxs-lookup"><span data-stu-id="f62ae-111">The <see cref="T:System.Windows.Forms.Control" /> which is being designed.</span></span></param>
        <summary><span data-ttu-id="f62ae-112">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.Design.EventHandlerService" />.</span><span class="sxs-lookup"><span data-stu-id="f62ae-112">Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.EventHandlerService" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventHandlerChanged">
      <MemberSignature Language="C#" Value="public event EventHandler EventHandlerChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EventHandlerChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Design.EventHandlerService.EventHandlerChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event EventHandlerChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ EventHandlerChanged;" />
      <MemberSignature Language="F#" Value="member this.EventHandlerChanged : EventHandler " Usage="member this.EventHandlerChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.Forms.Design.IEventHandlerService.EventHandlerChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f62ae-113">Déclenche un événement OnEventHandlerChanged.</span><span class="sxs-lookup"><span data-stu-id="f62ae-113">Fires an OnEventHandlerChanged event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusWindow">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control FocusWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control FocusWindow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.EventHandlerService.FocusWindow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FocusWindow As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ FocusWindow { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FocusWindow : System.Windows.Forms.Control" Usage="System.Windows.Forms.Design.EventHandlerService.FocusWindow" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.Design.IEventHandlerService.FocusWindow</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f62ae-114">Obtient le contrôle auquel les gestionnaires d'événements sont joints.</span><span class="sxs-lookup"><span data-stu-id="f62ae-114">Gets the control to which event handlers are attached.</span></span></summary>
        <value><span data-ttu-id="f62ae-115"><see cref="T:System.Windows.Forms.Control" /> qui a été joint via le constructeur.</span><span class="sxs-lookup"><span data-stu-id="f62ae-115">The <see cref="T:System.Windows.Forms.Control" /> which was attached through the constructor.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHandler">
      <MemberSignature Language="C#" Value="public object GetHandler (Type handlerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetHandler(class System.Type handlerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.GetHandler(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHandler (handlerType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetHandler(Type ^ handlerType);" />
      <MemberSignature Language="F#" Value="abstract member GetHandler : Type -&gt; obj&#xA;override this.GetHandler : Type -&gt; obj" Usage="eventHandlerService.GetHandler handlerType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Design.IEventHandlerService.GetHandler(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handlerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="handlerType"><span data-ttu-id="f62ae-116">Type de gestionnaire à obtenir.</span><span class="sxs-lookup"><span data-stu-id="f62ae-116">The type of the handler to get.</span></span></param>
        <summary><span data-ttu-id="f62ae-117">Obtient le gestionnaire d'événements actuellement actif du type spécifié.</span><span class="sxs-lookup"><span data-stu-id="f62ae-117">Gets the currently active event handler of the specified type.</span></span></summary>
        <returns><span data-ttu-id="f62ae-118">Instance du gestionnaire ou <see langword="null" /> s'il n'existe aucun gestionnaire du type demandé.</span><span class="sxs-lookup"><span data-stu-id="f62ae-118">An instance of the handler, or <see langword="null" /> if there is no handler of the requested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f62ae-119">Vous devez jamais mettre en cache cette valeur, car les autres composants sont libres de la modifier.</span><span class="sxs-lookup"><span data-stu-id="f62ae-119">You should never cache this value because other components are free to change it.</span></span> <span data-ttu-id="f62ae-120">Cet appel est assez rapide, toutefois, en particulier pour les cas où vous demandez toujours le même type de gestionnaire.</span><span class="sxs-lookup"><span data-stu-id="f62ae-120">This call is fairly quick, however, especially for cases when you are always asking for the same type of handler.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PopHandler">
      <MemberSignature Language="C#" Value="public void PopHandler (object handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PopHandler(object handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.PopHandler(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PopHandler (handler As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PopHandler(System::Object ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member PopHandler : obj -&gt; unit&#xA;override this.PopHandler : obj -&gt; unit" Usage="eventHandlerService.PopHandler handler" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Design.IEventHandlerService.PopHandler(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="f62ae-121">Gestionnaire à supprimer de la pile.</span><span class="sxs-lookup"><span data-stu-id="f62ae-121">The handler to remove from the stack.</span></span></param>
        <summary><span data-ttu-id="f62ae-122">Dépile le gestionnaire donné.</span><span class="sxs-lookup"><span data-stu-id="f62ae-122">Pops the given handler off of the stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f62ae-123">Si le gestionnaire n’est pas le composant au premier plan sur la pile, s’affiche, tous les gestionnaires jusqu'à et y compris le gestionnaire.</span><span class="sxs-lookup"><span data-stu-id="f62ae-123">If the handler is not the topmost component on the stack, this will pop all handlers up to and including handler.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PushHandler">
      <MemberSignature Language="C#" Value="public void PushHandler (object handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PushHandler(object handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.PushHandler(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PushHandler (handler As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PushHandler(System::Object ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member PushHandler : obj -&gt; unit&#xA;override this.PushHandler : obj -&gt; unit" Usage="eventHandlerService.PushHandler handler" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Design.IEventHandlerService.PushHandler(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="f62ae-124">Gestionnaire à ajouter dans la pile.</span><span class="sxs-lookup"><span data-stu-id="f62ae-124">The handler to add to the stack.</span></span></param>
        <summary><span data-ttu-id="f62ae-125">Exécute un push d'un nouveau gestionnaire d'événements dans la pile.</span><span class="sxs-lookup"><span data-stu-id="f62ae-125">Pushes a new event handler on the stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f62ae-126">Ce gestionnaire sera utilisé par tous les composants qui demandent un type de gestionnaire compatible.</span><span class="sxs-lookup"><span data-stu-id="f62ae-126">This handler will be used by all components that request a compatible handler type.</span></span> <span data-ttu-id="f62ae-127">Si ce gestionnaire ne prend pas en charge le type demandé, le gestionnaire suivant sur la pile sera utilisé.</span><span class="sxs-lookup"><span data-stu-id="f62ae-127">If this handler does not support the requested type, the next handler on the stack will be used.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>