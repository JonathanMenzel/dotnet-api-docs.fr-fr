<Type Name="EventLogWatcher" FullName="System.Diagnostics.Eventing.Reader.EventLogWatcher">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bde8ea22e08f3a605247f4c1d3e3eae35b70d370" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30397783" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventLogWatcher : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventLogWatcher extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" />
  <TypeSignature Language="VB.NET" Value="Public Class EventLogWatcher&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventLogWatcher : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="b0e03-101">Permet de vous abonner à des événements entrants.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b0e03-101">Allows you to subscribe to incoming events.</span>
      </span>
      <span data-ttu-id="b0e03-102">Chaque fois qu'un événement souhaité est publié dans un journal des événements, l'événement <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> est déclenché et la méthode qui gère cet événement est exécutée.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b0e03-102">Each time a desired event is published to an event log, the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised, and the method that handles this event will be executed.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0e03-103">Les instances de cette classe sont créées à partir de <xref:System.Diagnostics.Eventing.Reader.EventLogQuery> objets qui spécifient une requête pour l’abonnement aux événements.</span><span class="sxs-lookup"><span data-stu-id="b0e03-103">The instances of this class are created from <xref:System.Diagnostics.Eventing.Reader.EventLogQuery> objects, which specify a query for the event subscription.</span></span> <span data-ttu-id="b0e03-104">Lorsqu'un événement est enregistré et qu'il correspond aux critères exprimés dans la requête, l'événement <xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten> est déclenché.</span><span class="sxs-lookup"><span data-stu-id="b0e03-104">When an event is logged that matches the criteria expressed in the query, then the <xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten> event is raised.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0e03-105">Par exemple de code à l’aide de cette classe, consultez [Comment : s’abonner à des événements dans un journal des événements](http://msdn.microsoft.com/library/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).</span><span class="sxs-lookup"><span data-stu-id="b0e03-105">For example code using this class, see [How to: Subscribe to Events in an Event Log](http://msdn.microsoft.com/library/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b0e03-106">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-106">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventQuery As EventLogQuery)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogWatcher(System::Diagnostics::Eventing::Reader::EventLogQuery ^ eventQuery);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventQuery" Type="System.Diagnostics.Eventing.Reader.EventLogQuery" />
      </Parameters>
      <Docs>
        <param name="eventQuery">
          <span data-ttu-id="b0e03-107">Spécifie une requête d'abonnement à un événement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-107">Specifies a query for the event subscription.</span>
          </span>
          <span data-ttu-id="b0e03-108">Lorsqu'un événement est enregistré et qu'il correspond aux critères exprimés dans la requête, l'événement <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> est déclenché.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-108">When an event is logged that matches the criteria expressed in the query, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0e03-109">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> en spécifiant une requête d'événement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-109">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying an event query.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogWatcher (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogWatcher(System::String ^ path);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="b0e03-110">Le chemin d'accès ou le nom du moniteur d'événements du journal des événements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-110">The path or name of the event log monitor for events.</span>
          </span>
          <span data-ttu-id="b0e03-111">Si un événement est enregistré dans ce journal des événements, l'événement <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> est déclenché.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-111">If any event is logged in this event log, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0e03-112">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> en spécifiant le nom ou le chemin d'accès d'un journal des événements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-112">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying the name or path to an event log.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, class System.Diagnostics.Eventing.Reader.EventBookmark bookmark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventQuery As EventLogQuery, bookmark As EventBookmark)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogWatcher(System::Diagnostics::Eventing::Reader::EventLogQuery ^ eventQuery, System::Diagnostics::Eventing::Reader::EventBookmark ^ bookmark);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventQuery" Type="System.Diagnostics.Eventing.Reader.EventLogQuery" />
        <Parameter Name="bookmark" Type="System.Diagnostics.Eventing.Reader.EventBookmark" />
      </Parameters>
      <Docs>
        <param name="eventQuery">
          <span data-ttu-id="b0e03-113">Spécifie une requête d'abonnement à un événement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-113">Specifies a query for the event subscription.</span>
          </span>
          <span data-ttu-id="b0e03-114">Lorsqu'un événement est enregistré et qu'il correspond aux critères exprimés dans la requête, l'événement <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> est déclenché.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-114">When an event is logged that matches the criteria expressed in the query, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</span>
          </span>
        </param>
        <param name="bookmark">
          <span data-ttu-id="b0e03-115">Signet (espace réservé) utilisé comme position de départ dans le journal des événements ou dans le flux des événements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-115">The bookmark (placeholder) used as a starting position in the event log or stream of events.</span>
          </span>
          <span data-ttu-id="b0e03-116">Seuls les événements enregistrés après l'événement signet seront retournés par la requête.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-116">Only events that have been logged after the bookmark event will be returned by the query.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0e03-117">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> en spécifiant une requête d'événement et un signet utilisé comme position de départ pour la requête.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-117">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying an event query and a bookmark that is used as starting position for the query.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark, bool readExistingEvents);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, class System.Diagnostics.Eventing.Reader.EventBookmark bookmark, bool readExistingEvents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventQuery As EventLogQuery, bookmark As EventBookmark, readExistingEvents As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogWatcher(System::Diagnostics::Eventing::Reader::EventLogQuery ^ eventQuery, System::Diagnostics::Eventing::Reader::EventBookmark ^ bookmark, bool readExistingEvents);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventQuery" Type="System.Diagnostics.Eventing.Reader.EventLogQuery" />
        <Parameter Name="bookmark" Type="System.Diagnostics.Eventing.Reader.EventBookmark" />
        <Parameter Name="readExistingEvents" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="eventQuery">
          <span data-ttu-id="b0e03-118">Spécifie une requête d'abonnement à un événement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-118">Specifies a query for the event subscription.</span>
          </span>
          <span data-ttu-id="b0e03-119">Lorsqu'un événement est enregistré et qu'il correspond aux critères exprimés dans la requête, l'événement <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> est déclenché.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-119">When an event is logged that matches the criteria expressed in the query, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</span>
          </span>
        </param>
        <param name="bookmark">
          <span data-ttu-id="b0e03-120">Signet (espace réservé) utilisé comme position de départ dans le journal des événements ou dans le flux des événements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-120">The bookmark (placeholder) used as a starting position in the event log or stream of events.</span>
          </span>
          <span data-ttu-id="b0e03-121">Seuls les événements enregistrés après l'événement signet seront retournés par la requête.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-121">Only events that have been logged after the bookmark event will be returned by the query.</span>
          </span>
        </param>
        <param name="readExistingEvents">
          <span data-ttu-id="b0e03-122">Valeur de type Boolean qui détermine si les événements qui existent déjà dans le journal des événements doivent être lus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-122">A Boolean value that determines whether to read the events that already exist in the event log.</span>
          </span>
          <span data-ttu-id="b0e03-123">Si cette valeur est <see langword="true" />, les événements existants sont lus et si cette valeur est <see langword="false" />, les événements existants ne sont pas lus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-123">If this value is <see langword="true" />, then the existing events are read and if this value is <see langword="false" />, then the existing events are not read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0e03-124">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> en spécifiant une requête d'événement, un signet utilisé comme position de départ pour la requête et une valeur Boolean qui détermine si les événements qui existent déjà dans le journal des événements doivent être lus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-124">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying an event query, a bookmark that is used as starting position for the query, and a Boolean value that determines whether to read the events that already exist in the event log.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b0e03-125">Libère les ressources utilisées par cet objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-125">Releases the resources used by this object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b0e03-126">Libère toutes les ressources utilisées par cet objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-126">Releases all the resources used by this object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="b0e03-127">
            <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-127">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0e03-128">Libère les ressources non managées utilisées par cet objet et libère éventuellement les ressources managées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-128">Releases the unmanaged resources used by this object, and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b0e03-129">Détermine si cet objet commence à remettre des événements au délégué de l'événement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-129">Determines whether this object starts delivering events to the event delegate.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b0e03-130">Retourne la valeur <see langword="true" /> lorsque cet objet peut remettre des événements au délégué d'événement, et retourne la valeur <see langword="false" /> lorsque cet objet a arrêté la remise.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-130">Returns <see langword="true" /> when this object can deliver events to the event delegate, and returns <see langword="false" /> when this object has stopped delivery.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventRecordWritten">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs&gt; EventRecordWritten;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs&gt; EventRecordWritten" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" />
      <MemberSignature Language="VB.NET" Value="Public Event EventRecordWritten As EventHandler(Of EventRecordWrittenEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Diagnostics::Eventing::Reader::EventRecordWrittenEventArgs ^&gt; ^ EventRecordWritten;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b0e03-131">Permet de définir un délégué (méthode de gestionnaire d'événements) qui est appelé chaque fois qu'un événement est publié et qu'il correspond aux critères spécifiés dans la requête d'événement de cet objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0e03-131">Allows setting a delegate (event handler method) that gets called every time an event is published that matches the criteria specified in the event query for this object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b0e03-132">Par exemple de code à l’aide de cette classe, consultez [Comment : s’abonner à des événements dans un journal des événements](http://msdn.microsoft.com/library/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).</span><span class="sxs-lookup"><span data-stu-id="b0e03-132">For example code using this class, see [How to: Subscribe to Events in an Event Log](http://msdn.microsoft.com/library/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>