<Type Name="Unsafe" FullName="System.Runtime.CompilerServices.Unsafe">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0ccc5cb47c6abfb58ca98a1419b6a1547438294f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Unsafe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Unsafe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.Unsafe" />
  <TypeSignature Language="VB.NET" Value="Public Class Unsafe" />
  <TypeSignature Language="C++ CLI" Value="public ref class Unsafe abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="72a05-101">Contient des fonctionnalités secondaires génériques pour la manipulation des pointeurs.</span>
      <span class="sxs-lookup">
        <span data-stu-id="72a05-101">Contains generic, low-level functionality for manipulating pointers.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Add&lt;T&gt; (ref T source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Add&lt;T&gt;(!!T&amp; source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add(Of T) (ByRef source As T, elementOffset As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Add(T % source, int elementOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="72a05-102">Le type de référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-102">The type of reference.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="72a05-103">Référence à laquelle ajouter le décalage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-103">The reference to add the offset to.</span>
          </span>
        </param>
        <param name="elementOffset">
          <span data-ttu-id="72a05-104">Offset à ajouter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-104">The offset to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-105">Ajoute un décalage d’élément à la référence donnée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-105">Adds an element offset to the given reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72a05-106">Nouvelle référence qui reflète l’ajout du décalage au pointeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-106">A new reference that reflects the addition of offset to pointer.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Add&lt;T&gt; (ref T source, IntPtr elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Add&lt;T&gt;(!!T&amp; source, native int elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add(Of T) (ByRef source As T, elementOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Add(T % source, IntPtr elementOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="72a05-107">Le type de référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-107">The type of reference.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="72a05-108">Référence à laquelle ajouter le décalage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-108">The reference to add the offset to.</span>
          </span>
        </param>
        <param name="elementOffset">
          <span data-ttu-id="72a05-109">Offset à ajouter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-109">The offset to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-110">Ajoute un décalage d’élément à la référence donnée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-110">Adds an element offset to the given reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72a05-111">Nouvelle référence qui reflète l’ajout du décalage au pointeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-111">A new reference that reflects the addition of offset to pointer.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AddByteOffset&lt;T&gt; (ref T source, IntPtr byteOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AddByteOffset&lt;T&gt;(!!T&amp; source, native int byteOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddByteOffset(Of T) (ByRef source As T, byteOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AddByteOffset(T % source, IntPtr byteOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="byteOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="72a05-112">Le type de référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-112">The type of reference.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="72a05-113">Référence à laquelle ajouter le décalage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-113">The reference to add the offset to.</span>
          </span>
        </param>
        <param name="byteOffset">
          <span data-ttu-id="72a05-114">Offset à ajouter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-114">The offset to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-115">Ajoute un décalage d’octet à la référence donnée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-115">Adds a byte offset to the given reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72a05-116">Nouvelle référence qui reflète l’ajout du décalage d’octet au pointeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-116">A new reference that reflects the addition of byte offset to pointer.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreSame&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool AreSame&lt;T&gt; (ref T left, ref T right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreSame&lt;T&gt;(!!T&amp; left, !!T&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AreSame``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreSame(Of T) (ByRef left As T, ByRef right As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool AreSame(T % left, T % right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T&amp;" RefType="ref" />
        <Parameter Name="right" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="72a05-117">Le type de référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-117">The type of reference.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="72a05-118">Première référence à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-118">The first reference to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="72a05-119">Seconde référence à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-119">The second reference to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-120">Détermine si les références spécifiées pointent vers le même emplacement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-120">Determines whether the specified references point to the same location.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72a05-121">
            <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> pointent vers le même emplacement ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-121">
              <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> point to the same location; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="As&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T As&lt;T&gt; (object o) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T As&lt;class T&gt;(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.As``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function As(Of T As Class) (o As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T As(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="72a05-122">Le type qui est converti dans l’objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-122">The type which the object will be cast to.</span>
          </span>
        </typeparam>
        <param name="o">
          <span data-ttu-id="72a05-123">Objet à caster.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-123">The object to cast.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-124">Caste l’objet donné dans le type spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-124">Casts the given object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72a05-125">L’objet d’origine, casté dans le type donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-125">The original object, casted to the given type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="As&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static TTo As&lt;TFrom,TTo&gt; (ref TFrom source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TTo As&lt;TFrom, TTo&gt;(!!TFrom&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function As(Of TFrom, TTo) (ByRef source As TFrom) As TTo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; static TTo % As(TFrom % source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TTo@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom" />
        <TypeParameter Name="TTo" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="TFrom&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom">
          <span data-ttu-id="72a05-126">Le type de référence à réinterpréter...</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-126">The type of reference to reinterpret..</span>
          </span>
        </typeparam>
        <typeparam name="TTo">
          <span data-ttu-id="72a05-127">Le type souhaité de la référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-127">The desired type of the reference.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="72a05-128">Référence à réinterpréter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-128">The reference to reinterpret.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-129">Réinterprète la référence donnée comme une référence à une valeur de type <typeparamref name="TTo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-129">Reinterprets the given reference as a reference to a value of type <typeparamref name="TTo" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72a05-130">Référence à une valeur de type <typeparamref name="TTo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-130">A reference to a value of type <typeparamref name="TTo" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsPointer&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void* AsPointer&lt;T&gt; (ref T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void* AsPointer&lt;T&gt;(!!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsPointer``1(``0@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void* AsPointer(T % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void*</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="72a05-131">Type d'objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-131">The type of object.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="72a05-132">Objet dont le pointeur est obtenu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-132">The object whose pointer is obtained.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-133">Retourne un pointeur au paramètre by-ref donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-133">Returns a pointer to the given by-ref parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72a05-134">Pointeur vers la valeur donnée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-134">A pointer to the given value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AsRef&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AsRef&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AsRef(void* source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="72a05-135">Le type de l’emplacement interprété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-135">The type of the interpreted location.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="72a05-136">Emplacement de la valeur à référencer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-136">The location of the value to reference.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-137">Réinterprète l’emplacement donné comme une référence à une valeur de type <typeparamref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-137">Reinterprets the given location as a reference to a value of type <typeparamref name="T" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72a05-138">Référence à une valeur de type <typeparamref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-138">A reference to a value of type <typeparamref name="T" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static IntPtr ByteOffset&lt;T&gt; (ref T origin, ref T target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ByteOffset&lt;T&gt;(!!T&amp; origin, !!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ByteOffset``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ByteOffset(Of T) (ByRef origin As T, ByRef target As T) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static IntPtr ByteOffset(T % origin, T % target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="origin" Type="T&amp;" RefType="ref" />
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="72a05-139">Le type de référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-139">The type of reference.</span>
          </span>
        </typeparam>
        <param name="origin">
          <span data-ttu-id="72a05-140">Référence à l’origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-140">The reference to origin.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="72a05-141">Référence à la cible.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-141">The reference to target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-142">Détermine le décalage d’octet entre l’origine et la cible à partir des références données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-142">Determines the byte offset from origin to target from the given references.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72a05-143">Décalage d’octet entre l’origine et la cible, c’est-à-dire <paramref name="target" />  -  <paramref name="origin" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-143">Byte offset from origin to target i.e. <paramref name="target" /> - <paramref name="origin" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Copy&lt;T&gt; (void* destination, ref T source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy&lt;T&gt;(void* destination, !!T&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Copy``1(System.Void*,``0@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Copy(void* destination, T % source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="72a05-144">Le type de valeur à copier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-144">The type of value to copy.</span>
          </span>
        </typeparam>
        <param name="destination">
          <span data-ttu-id="72a05-145">Emplacement vers lequel effectuer la copie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-145">The location to copy to.</span>
          </span>
        </param>
        <param name="source">
          <span data-ttu-id="72a05-146">Référence à la valeur à copier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-146">A reference to the value to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-147">Copie une valeur de type <typeparamref name="T" /> à l’emplacement donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-147">Copies a value of type <typeparamref name="T" /> to the given location.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Copy&lt;T&gt; (ref T destination, void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy&lt;T&gt;(!!T&amp; destination, void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Copy``1(``0@,System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Copy(T % destination, void* source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="T&amp;" RefType="ref" />
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="72a05-148">Le type de valeur à copier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-148">The type of value to copy.</span>
          </span>
        </typeparam>
        <param name="destination">
          <span data-ttu-id="72a05-149">Emplacement vers lequel effectuer la copie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-149">The location to copy to.</span>
          </span>
        </param>
        <param name="source">
          <span data-ttu-id="72a05-150">Pointeur vers la valeur à copier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-150">A pointer to the value to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-151">Copie une valeur de type <typeparamref name="T" /> à l’emplacement donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-151">Copies a value of type <typeparamref name="T" /> to the given location.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlock">
      <MemberSignature Language="C#" Value="public static void CopyBlock (ref byte destination, ref byte source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlock(unsigned int8&amp; destination, unsigned int8&amp; source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyBlock (ByRef destination As Byte, ByRef source As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlock(System::Byte % destination, System::Byte % source, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="source" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="72a05-152">Adresse de destination vers laquelle effectuer la copie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-152">The destination address to copy to.</span>
          </span>
        </param>
        <param name="source">
          <span data-ttu-id="72a05-153">Adresse source depuis laquelle effectuer la copie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-153">The source address to copy from.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="72a05-154">Nombre d'octets à copier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-154">The number of bytes to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-155">Copie les octets de l’adresse source vers l’adresse de destination.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-155">Copies bytes from the source address to the destination address.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlock">
      <MemberSignature Language="C#" Value="public static void CopyBlock (void* destination, void* source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlock(void* destination, void* source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlock(void* destination, void* source, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="source" Type="System.Void*" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="72a05-156">Adresse de destination vers laquelle effectuer la copie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-156">The destination address to copy to.</span>
          </span>
        </param>
        <param name="source">
          <span data-ttu-id="72a05-157">Adresse source depuis laquelle effectuer la copie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-157">The source address to copy from.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="72a05-158">Nombre d'octets à copier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-158">The number of bytes to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-159">Copie les octets de l’adresse source vers l’adresse de destination.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-159">Copies bytes from the source address to the destination address.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void CopyBlockUnaligned (ref byte destination, ref byte source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlockUnaligned(unsigned int8&amp; destination, unsigned int8&amp; source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyBlockUnaligned (ByRef destination As Byte, ByRef source As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlockUnaligned(System::Byte % destination, System::Byte % source, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="source" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="72a05-160">Adresse de destination vers laquelle effectuer la copie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-160">The destination address to copy to.</span>
          </span>
        </param>
        <param name="source">
          <span data-ttu-id="72a05-161">Adresse source depuis laquelle effectuer la copie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-161">The source address to copy from.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="72a05-162">Nombre d'octets à copier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-162">The number of bytes to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-163">Copie les octets de l’adresse source vers l’adresse de destination sans supposer de l’alignement dépendant de l’architecture des adresses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-163">Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void CopyBlockUnaligned (void* destination, void* source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlockUnaligned(void* destination, void* source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlockUnaligned(void* destination, void* source, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="source" Type="System.Void*" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="72a05-164">Adresse de destination vers laquelle effectuer la copie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-164">The destination address to copy to.</span>
          </span>
        </param>
        <param name="source">
          <span data-ttu-id="72a05-165">Adresse source depuis laquelle effectuer la copie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-165">The source address to copy from.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="72a05-166">Nombre d'octets à copier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-166">The number of bytes to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-167">Copie les octets de l’adresse source vers l’adresse de destination sans supposer de l’alignement dépendant de l’architecture des adresses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-167">Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlock">
      <MemberSignature Language="C#" Value="public static void InitBlock (ref byte startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlock(unsigned int8&amp; startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitBlock (ByRef startAddress As Byte, value As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlock(System::Byte % startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startAddress">
          <span data-ttu-id="72a05-168">Adresse du début du bloc de mémoire à initialiser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-168">The address of the start of the memory block to initialize.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="72a05-169">Valeur sur laquelle initialiser le bloc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-169">The value to initialize the block to.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="72a05-170">Nombre d’octets à initialiser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-170">The number of bytes to initialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-171">Initialise un bloc de mémoire à l’emplacement spécifié avec une valeur initiale donnée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-171">Initializes a block of memory at the given location with a given initial value.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlock">
      <MemberSignature Language="C#" Value="public static void InitBlock (void* startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlock(void* startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlock(void* startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Void*" />
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startAddress">
          <span data-ttu-id="72a05-172">Adresse du début du bloc de mémoire à initialiser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-172">The address of the start of the memory block to initialize.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="72a05-173">Valeur sur laquelle initialiser le bloc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-173">The value to initialize the block to.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="72a05-174">Nombre d’octets à initialiser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-174">The number of bytes to initialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-175">Initialise un bloc de mémoire à l’emplacement spécifié avec une valeur initiale donnée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-175">Initializes a block of memory at the given location with a given initial value.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void InitBlockUnaligned (ref byte startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlockUnaligned(unsigned int8&amp; startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitBlockUnaligned (ByRef startAddress As Byte, value As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlockUnaligned(System::Byte % startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startAddress">
          <span data-ttu-id="72a05-176">Adresse du début du bloc de mémoire à initialiser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-176">The address of the start of the memory block to initialize.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="72a05-177">Valeur sur laquelle initialiser le bloc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-177">The value to initialize the block to.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="72a05-178">Nombre d’octets à initialiser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-178">The number of bytes to initialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-179">Initialise un bloc de mémoire à l’emplacement spécifié avec une valeur initiale donnée sans supposer de l’alignement dépendant de l’architecture de l’adresse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-179">Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void InitBlockUnaligned (void* startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlockUnaligned(void* startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlockUnaligned(void* startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Void*" />
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startAddress">
          <span data-ttu-id="72a05-180">Adresse du début du bloc de mémoire à initialiser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-180">The address of the start of the memory block to initialize.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="72a05-181">Valeur sur laquelle initialiser le bloc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-181">The value to initialize the block to.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="72a05-182">Nombre d’octets à initialiser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-182">The number of bytes to initialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-183">Initialise un bloc de mémoire à l’emplacement spécifié avec une valeur initiale donnée sans supposer de l’alignement dépendant de l’architecture de l’adresse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-183">Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Read``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T Read(void* source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="72a05-184">Type à lire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-184">The type to read.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="72a05-185">Emplacement à partir duquel effectuer la lecture.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-185">The location to read from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-186">Lit une valeur de type <typeparamref name="T" /> à partir de l’emplacement donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-186">Reads a value of type <typeparamref name="T" /> from the given location.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72a05-187">Objet de type <typeparamref name="T" /> lu à partir de l’emplacement donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-187">An object of type <typeparamref name="T" /> read from the given location.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T ReadUnaligned&lt;T&gt; (ref byte source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadUnaligned&lt;T&gt;(unsigned int8&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadUnaligned(Of T) (ByRef source As Byte) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T ReadUnaligned(System::Byte % source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="72a05-188">Type à lire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-188">The type to read.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="72a05-189">Emplacement à partir duquel effectuer la lecture.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-189">The location to read from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-190">Lit une valeur de type <typeparamref name="T" /> à partir de l’emplacement donné sans supposer de l’alignement dépendant de l’architecture des adresses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-190">Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the addresses.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72a05-191">Objet de type <typeparamref name="T" /> lu à partir de l’emplacement donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-191">An object of type <typeparamref name="T" /> read from the given location.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T ReadUnaligned&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadUnaligned&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T ReadUnaligned(void* source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="72a05-192">Type à lire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-192">The type to read.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="72a05-193">Emplacement à partir duquel effectuer la lecture.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-193">The location to read from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-194">Lit une valeur de type <typeparamref name="T" /> à partir de l’emplacement donné sans supposer de l’alignement dépendant de l’architecture des adresses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-194">Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the addresses.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72a05-195">Objet de type <typeparamref name="T" /> lu à partir de l’emplacement donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-195">An object of type <typeparamref name="T" /> read from the given location.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int SizeOf&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SizeOf&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.SizeOf``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SizeOf(Of T) () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int SizeOf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="72a05-196">Le type d’objet dont la taille est récupérée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-196">The type of object whose size is retrieved.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="72a05-197">Retourne la taille d’un objet du paramètre de type donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-197">Returns the size of an object of the given type parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72a05-198">Taille d’un objet de type <typeparamref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-198">The size of an object of type <typeparamref name="T" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Subtract&lt;T&gt; (ref T source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Subtract&lt;T&gt;(!!T&amp; source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract(Of T) (ByRef source As T, elementOffset As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Subtract(T % source, int elementOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="72a05-199">Le type de référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-199">The type of reference.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="72a05-200">Référence de laquelle soustraire le décalage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-200">The reference to subtract the offset from.</span>
          </span>
        </param>
        <param name="elementOffset">
          <span data-ttu-id="72a05-201">Offset à soustraire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-201">The offset to subtract.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-202">Soustrait un décalage d’élément de la référence donnée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-202">Subtracts an element offset from the given reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72a05-203">Nouvelle référence qui reflète la soustraction du décalage du pointeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-203">A new reference that reflects the subraction of offset from pointer.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Subtract&lt;T&gt; (ref T source, IntPtr elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Subtract&lt;T&gt;(!!T&amp; source, native int elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract(Of T) (ByRef source As T, elementOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Subtract(T % source, IntPtr elementOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="72a05-204">Le type de référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-204">The type of reference.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="72a05-205">Référence de laquelle soustraire le décalage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-205">The reference to subtract the offset from.</span>
          </span>
        </param>
        <param name="elementOffset">
          <span data-ttu-id="72a05-206">Offset à soustraire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-206">The offset to subtract.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-207">Soustrait un décalage d’élément de la référence donnée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-207">Subtracts an element offset from the given reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72a05-208">Nouvelle référence qui reflète la soustraction du décalage du pointeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-208">A new reference that reflects the subraction of offset from pointer.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T SubtractByteOffset&lt;T&gt; (ref T source, IntPtr byteOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T SubtractByteOffset&lt;T&gt;(!!T&amp; source, native int byteOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractByteOffset(Of T) (ByRef source As T, byteOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % SubtractByteOffset(T % source, IntPtr byteOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="byteOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="72a05-209">Le type de référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-209">The type of reference.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="72a05-210">Référence de laquelle soustraire le décalage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-210">The reference to subtract the offset from.</span>
          </span>
        </param>
        <param name="bytesOffset">
          <span data-ttu-id="72a05-211">Offset à soustraire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-211">The offset to subtract.</span>
          </span>
        </param>
        <param name="byteOffset">To be added.</param>
        <summary>
          <span data-ttu-id="72a05-212">Soustrait un décalage d’octet de la référence donnée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-212">Subtracts a byte offset from the given reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72a05-213">Nouvelle référence qui reflète la soustraction du décalage d’octet du pointeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-213">A new reference that reflects the subraction of byte offset from pointer.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (void* destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;T&gt;(void* destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Write(void* destination, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="72a05-214">Le type de valeur à écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-214">The type of value to write.</span>
          </span>
        </typeparam>
        <param name="destination">
          <span data-ttu-id="72a05-215">Emplacement dans lequel écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-215">The location to write to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="72a05-216">Valeur à écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-216">The value to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-217">Écrit une valeur de type <typeparamref name="T" /> à l’emplacement donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-217">Writes a value of type <typeparamref name="T" /> to the given location.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void WriteUnaligned&lt;T&gt; (ref byte destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUnaligned&lt;T&gt;(unsigned int8&amp; destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteUnaligned(Of T) (ByRef destination As Byte, value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void WriteUnaligned(System::Byte % destination, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="72a05-218">Le type de valeur à écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-218">The type of value to write.</span>
          </span>
        </typeparam>
        <param name="destination">
          <span data-ttu-id="72a05-219">Emplacement dans lequel écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-219">The location to write to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="72a05-220">Valeur à écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-220">The value to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-221">Écrit une valeur de type <typeparamref name="T" /> à l’emplacement donné sans supposer de l’alignement dépendant de l’architecture des adresses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-221">Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the addresses.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void WriteUnaligned&lt;T&gt; (void* destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUnaligned&lt;T&gt;(void* destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void WriteUnaligned(void* destination, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="72a05-222">Le type de valeur à écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-222">The type of value to write.</span>
          </span>
        </typeparam>
        <param name="destination">
          <span data-ttu-id="72a05-223">Emplacement dans lequel écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-223">The location to write to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="72a05-224">Valeur à écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-224">The value to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72a05-225">Écrit une valeur de type <typeparamref name="T" /> à l’emplacement donné sans supposer de l’alignement dépendant de l’architecture des adresses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72a05-225">Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the addresses.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>