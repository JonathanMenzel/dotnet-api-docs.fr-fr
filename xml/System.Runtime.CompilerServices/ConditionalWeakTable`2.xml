<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ConditionalWeakTable`2.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac575a1ca0bc007b584e93073f8cc318bd920092d8d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">75a1ca0bc007b584e93073f8cc318bd920092d8d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>The reference type to which the field is attached.</source>
          <target state="translated">Type référence auquel le champ est attaché.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>The field's type.</source>
          <target state="translated">Type du champ.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>This must be a reference type.</source>
          <target state="translated">Il doit s'agir d'un type référence.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>Enables compilers to dynamically attach object fields to managed objects.</source>
          <target state="translated">Permet aux compilateurs d'attacher dynamiquement des champs objet aux objets managés.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class enables language compilers to attach arbitrary properties to managed objects at run time.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> classe permet aux compilateurs de langage de joindre des propriétés arbitraires aux objets managés au moment de l’exécution.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>A <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> object is a dictionary that binds a managed object, which is represented by a key, to its attached property, which is represented by a value.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> objet est un dictionnaire qui lie un objet managé, qui est représenté par une clé, à sa propriété jointe, qui est représentée par une valeur.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>The object's keys are the individual instances of the <ph id="ph1">`TKey`</ph> class to which the property is attached, and its values are the property values that are assigned to the corresponding objects.</source>
          <target state="translated">Les clés de l’objet sont les instances individuelles de la <ph id="ph1">`TKey`</ph> classe à laquelle la propriété est jointe, et ses valeurs sont les valeurs de propriété qui sont affectées aux objets correspondants.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>Keys must be unique; in other words, the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class supports one attached value per managed object.</source>
          <target state="translated">Clés doivent être uniques ; en d’autres termes, la <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> classe prend en charge une valeur attachée par objet managé.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>Two keys are equal if passing them to the <ph id="ph1">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType&gt;</ph> method returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Deux clés sont égales si leur transmission à le <ph id="ph1">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType&gt;</ph> méthode renvoie <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>You cannot control equality comparisons by overriding <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> to explicitly set the hash code for a key.</source>
          <target state="translated">Vous ne pouvez pas contrôler les comparaisons d’égalité en substituant <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> pour définir explicitement le code de hachage pour une clé.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class does not use the <ph id="ph2">&lt;xref:System.Object.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> method to compute hash codes, and therefore does not invoke <ph id="ph3">&lt;xref:System.Object.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> overrides.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> classe n’utilise pas le <ph id="ph2">&lt;xref:System.Object.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> méthode pour calculer les codes de hachage et par conséquent n’appelle pas <ph id="ph3">&lt;xref:System.Object.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> substitue.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>Although the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class holds a collection of key/value pairs, it is best thought of as a table rather than a dictionary object.</source>
          <target state="translated">Bien que la <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> classe conserve une collection de paires clé/valeur, il est plus considéré comme une table plutôt qu’un objet de dictionnaire.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class differs from a dictionary in several ways:</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> classe diffère d’un dictionnaire de plusieurs façons :</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>It does not persist keys.</source>
          <target state="translated">Il n’est pas persistante des clés.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>That is, a key is not kept alive only because it is a member of the collection.</source>
          <target state="translated">Autrement dit, une clé n’est pas gardée active uniquement parce qu’il est un membre de la collection.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>It does not include all the methods (such as <ph id="ph1">`GetEnumerator`</ph> or <ph id="ph2">`Contains`</ph>) that a dictionary typically has.</source>
          <target state="translated">Il n’inclut pas toutes les méthodes (tel que <ph id="ph1">`GetEnumerator`</ph> ou <ph id="ph2">`Contains`</ph>) qu’un dictionnaire possède généralement.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>It does not implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface.</source>
          <target state="translated">Il n’implémente pas le <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class differs from other collection objects in its management of the object lifetime of keys stored in the collection.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> classe diffère d’autres objets de collection dans sa gestion de la durée de vie des clés stockées dans la collection.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>Ordinarily, when an object is stored in a collection, its lifetime lasts until it is removed (and there are no additional references to the object) or until the collection object itself is destroyed.</source>
          <target state="translated">En général, lorsqu’un objet est stocké dans une collection, sa durée de vie dure jusqu'à ce qu’il est supprimé (et il n’existe aucune référence supplémentaire à l’objet) ou jusqu'à la destruction de l’objet collection lui-même.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>However, in the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class, adding a key/value pair to the table does not ensure that the key will persist, even if it can be reached directly from a value stored in the table (for example, if the table contains one key, A, with a value V1, and a second key, B, with a value P2 that contains a reference to A).</source>
          <target state="translated">Toutefois, dans le <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> (classe), ajout d’une paire clé/valeur à la table ne garantit pas que la clé sera persistante, même si elle est accessible directement à partir d’une valeur stockée dans la table (par exemple, si la table contient une clé, A, avec une valeur V1 et une deuxième clé, B, avec une valeur P2 qui contient une référence à A).</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>Instead, <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> automatically removes the key/value entry as soon as no other references to a key exist outside the table.</source>
          <target state="translated">Au lieu de cela, <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> supprime automatiquement l’entrée de clé/valeur dès qu’aucune autre référence à une clé n’existe en dehors du tableau.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>The example provides an illustration.</source>
          <target state="translated">Cet exemple en fournit une illustration.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>The following example illustrates that a key stored in the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> table does not persist after references to it outside the table are destroyed.</source>
          <target state="translated">L’exemple suivant illustre qu’une clé stockée dans le <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> table n’est pas persistante après les références à ce dernier à l’extérieur de la table sont détruits.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>The example defines two classes: <ph id="ph1">`ManagedClass`</ph>, which represents the key in the table, and <ph id="ph2">`ClassData`</ph>, which represents the key's value.</source>
          <target state="translated">L’exemple définit deux classes : <ph id="ph1">`ManagedClass`</ph>, qui représente la clé dans la table, et <ph id="ph2">`ClassData`</ph>, qui représente la valeur de clé.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>The example instantiates three objects of each type.</source>
          <target state="translated">L’exemple instancie trois objets de chaque type.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>It also instantiates a <ph id="ph1">&lt;xref:System.WeakReference&gt;</ph> object that represents the second <ph id="ph2">`ManagedClass`</ph>, and then destroys the second <ph id="ph3">`ManagedClass`</ph> instance.</source>
          <target state="translated">Il instancie également un <ph id="ph1">&lt;xref:System.WeakReference&gt;</ph> objet qui représente la seconde <ph id="ph2">`ManagedClass`</ph>et puis détruit la seconde <ph id="ph3">`ManagedClass`</ph> instance.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>The attempt to retrieve the second <ph id="ph1">`ManagedClass`</ph> object from the <ph id="ph2">&lt;xref:System.WeakReference.Target%2A&gt;</ph> property indicates that no references to the object remain.</source>
          <target state="translated">La tentative de récupération de la seconde <ph id="ph1">`ManagedClass`</ph> de l’objet à partir de la <ph id="ph2">&lt;xref:System.WeakReference.Target%2A&gt;</ph> propriété indique qu’aucune référence à l’objet ne reste.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>Instances of the <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /&gt;</ph> class are thread safe.</source>
          <target state="translated">Instances de la <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /&gt;</ph> classe sont thread-safe.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
          <source>They do not require callers to do any additional locking.</source>
          <target state="translated">Ils ne nécessitent pas les appelants à effectuer un verrouillage supplémentaire.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.%23ctor%2A&gt;</ph> constructor instantiates an empty <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> table; that is, the table contains no key/value pairs.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.%23ctor%2A&gt;</ph> constructeur instancie vide <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> table ; autrement dit, la table ne contient aucun paires clé/valeur.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor">
          <source>You can add key/value pairs by calling the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A&gt;</ph> method.</source>
          <target state="translated">Vous pouvez ajouter des paires clé/valeur en appelant le <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph>, ou <ph id="ph3">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> object must be unique.</source>
          <target state="translated">Chaque clé dans un <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> objet doit être unique.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor">
          <source>Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <ph id="ph1">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType&gt;</ph> method returns <ph id="ph2">`true`</ph>).</source>
          <target state="translated">Les clés ne sont pas uniques si elles font référence au même objet (autrement dit, si les passer en tant qu’arguments à la <ph id="ph1">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType&gt;</ph> retourne de la méthode <ph id="ph2">`true`</ph>).</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
          <source>The key to add.</source>
          <target state="translated">Clé à ajouter.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
          <source><bpt id="p1">&lt;c&gt;</bpt>key<ept id="p1">&lt;/c&gt;</ept> represents the object to which the property is attached.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>key<ept id="p1">&lt;/c&gt;</ept> représente l’objet auquel la propriété est jointe.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
          <source>The key's property value.</source>
          <target state="translated">Valeur de la propriété de la clé.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
          <source>Adds a key to the table.</source>
          <target state="translated">Ajoute une clé à la table.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> object must be unique.</source>
          <target state="translated">Chaque clé dans un <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> objet doit être unique.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
          <source>Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <ph id="ph1">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType&gt;</ph> method returns <ph id="ph2">`true`</ph>).</source>
          <target state="translated">Les clés ne sont pas uniques si elles font référence au même objet (autrement dit, si les passer en tant qu’arguments à la <ph id="ph1">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType&gt;</ph> retourne de la méthode <ph id="ph2">`true`</ph>).</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
          <source>If the key is garbage-collected during the addition operation, the existing key/value pair is removed and the new key/value pair is added without an exception being thrown.</source>
          <target state="translated">Si la clé est le garbage collection pendant l’opération d’addition, la paire clé/valeur existante est supprimée et la nouvelle paire clé/valeur est ajoutée sans une exception est levée.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
          <source>The following example defines a <ph id="ph1">`MainClass`</ph> class and a <ph id="ph2">`MainInfo`</ph> class, which provides information about the <ph id="ph3">`MainClass`</ph> instance.</source>
          <target state="translated">L’exemple suivant définit un <ph id="ph1">`MainClass`</ph> classe et un <ph id="ph2">`MainInfo`</ph> (classe), qui fournit des informations sur la <ph id="ph3">`MainClass`</ph> instance.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
          <source>The example then calls the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A&gt;</ph> method to add a <ph id="ph2">`MainClass`</ph> object and its attached <ph id="ph3">`MainInfo`</ph> object to a <ph id="ph4">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> table.</source>
          <target state="translated">L’exemple appelle ensuite la <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A&gt;</ph> méthode pour ajouter un <ph id="ph2">`MainClass`</ph> objet et son joint <ph id="ph3">`MainInfo`</ph> de l’objet à un <ph id="ph4">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> table.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
          <source>The example also illustrates calls to the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph> methods to add key/value pairs to the table, and to the <ph id="ph3">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A&gt;</ph> method to retrieve the value of an existing key.</source>
          <target state="translated">L’exemple illustre également les appels à la <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph> méthodes pour ajouter des paires clé/valeur à la table et à la <ph id="ph3">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A&gt;</ph> méthode pour récupérer la valeur d’une clé existante.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> already exists.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> existe déjà.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize">
          <source>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /&gt;</ph> object.</source>
          <target state="translated">Vérifie que les ressources sont libérées et que toute autre opération de nettoyage est effectuée quand le garbage collector récupère l'objet <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize">
          <source>The garbage collector calls <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Finalize%2A&gt;</ph> when the current object is ready to be finalized.</source>
          <target state="translated">Le garbage collector appelle <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Finalize%2A&gt;</ph> lorsque l’objet actuel est prêt à être finalisé.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
          <source>The key to search for.</source>
          <target state="translated">Clé à rechercher.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
          <source><bpt id="p1">&lt;c&gt;</bpt>key<ept id="p1">&lt;/c&gt;</ept> represents the object to which the property is attached.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>key<ept id="p1">&lt;/c&gt;</ept> représente l’objet auquel la propriété est jointe.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
          <source>Atomically searches for a specified key in the table and returns the corresponding value.</source>
          <target state="translated">Effectue une recherche atomique de la clé spécifiée dans la table et retourne la valeur correspondante.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
          <source>If the key does not exist in the table, the method invokes the default constructor of the class that represents the table's value to create a value that is bound to the specified key.</source>
          <target state="translated">Si la clé n'existe pas dans la table, la méthode appelle le constructeur par défaut de la classe qui représente la valeur de la table pour créer une valeur liée à la clé spécifiée.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
          <source>The value that corresponds to <ph id="ph1">&lt;paramref name="key" /&gt;</ph>, if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> already exists in the table; otherwise, a new value created by the default constructor of the class defined by the <ph id="ph3">&lt;paramref name="TValue" /&gt;</ph> generic type parameter.</source>
          <target state="translated">Valeur qui correspond à <ph id="ph1">&lt;paramref name="key" /&gt;</ph>, si <ph id="ph2">&lt;paramref name="key" /&gt;</ph> existe déjà dans la table ; sinon, nouvelle valeur créée par le constructeur par défaut de la classe définie par le paramètre de type générique <ph id="ph3">&lt;paramref name="TValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
          <source>If <ph id="ph1">`key`</ph> does not exist in the table, the method adds it, along with the object that is instantiated by calling the default constructor of the class defined by the <ph id="ph2">`TValue`</ph> generic type parameter.</source>
          <target state="translated">Si <ph id="ph1">`key`</ph> n’existe pas dans la table, la méthode ajoute, ainsi que l’objet est instancié en appelant le constructeur par défaut de la classe définie par le <ph id="ph2">`TValue`</ph> paramètre de type générique.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
          <source>If the <ph id="ph1">`TValue`</ph> class has no default constructor, a <ph id="ph2">&lt;xref:System.MissingMethodException&gt;</ph> is thrown.</source>
          <target state="translated">Si le <ph id="ph1">`TValue`</ph> classe n’a aucun constructeur par défaut, un <ph id="ph2">&lt;xref:System.MissingMethodException&gt;</ph> est levée.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
          <source>This is the recommended method of retrieving an existing value or adding a new value to the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> table if the class of the table's value defines a default constructor.</source>
          <target state="translated">C’est la méthode recommandée de la récupération d’une valeur existante ou l’ajout d’une nouvelle valeur à la <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> si la classe de valeur de la table définit un constructeur par défaut de la table.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
          <source>If it does not define a default constructor, you can instead call the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph> method, which relies on a callback-provided method to instantiate the object representing the table's value</source>
          <target state="translated">Si elle ne définit pas un constructeur par défaut, vous pouvez appeler à la place la <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph> (méthode), qui s’appuie sur une méthode de rappel fournie pour instancier l’objet qui représente la valeur de la table</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
          <source>To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A&gt;</ph> method.</source>
          <target state="translated">Pour récupérer la valeur d’une clé existante sans ajouter la paire clé/valeur si la clé est introuvable dans la table, appelez le <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
          <source>The following example defines a <ph id="ph1">`MainClass`</ph> class and a <ph id="ph2">`MainInfo`</ph> class, which provides information about the <ph id="ph3">`MainClass`</ph> instance.</source>
          <target state="translated">L’exemple suivant définit un <ph id="ph1">`MainClass`</ph> classe et un <ph id="ph2">`MainInfo`</ph> (classe), qui fournit des informations sur la <ph id="ph3">`MainClass`</ph> instance.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
          <source>The example calls the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A&gt;</ph> method to add a <ph id="ph2">`MainClass`</ph> object and its attached <ph id="ph3">`MainInfo`</ph> object to a <ph id="ph4">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> table.</source>
          <target state="translated">L’exemple appelle la <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A&gt;</ph> méthode pour ajouter un <ph id="ph2">`MainClass`</ph> objet et son joint <ph id="ph3">`MainInfo`</ph> de l’objet à un <ph id="ph4">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> table.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
          <source>The example also illustrates calls to the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph> methods to add key/value pairs to the table, and to the <ph id="ph3">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A&gt;</ph> method to retrieve the value of an existing key.</source>
          <target state="translated">L’exemple illustre également les appels à la <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph> méthodes pour ajouter des paires clé/valeur à la table et à la <ph id="ph3">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A&gt;</ph> méthode pour récupérer la valeur d’une clé existante.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MissingMemberException" /&gt;</ph>, instead.</source>
          <target state="translated">Dans <bpt id="p1">[</bpt>.NET pour les applications du Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> ou la <bpt id="p2">[</bpt>Bibliothèque de classes portable<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, interceptez l’exception de la classe de base, <ph id="ph1">&lt;see cref="T:System.MissingMemberException" /&gt;</ph>, à la place.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
          <source>The class that represents the table's value does not define a default constructor.</source>
          <target state="translated">La classe qui représente la valeur de la table ne définit pas de constructeur par défaut.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>The key to search for.</source>
          <target state="translated">Clé à rechercher.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source><bpt id="p1">&lt;c&gt;</bpt>key<ept id="p1">&lt;/c&gt;</ept> represents the object to which the property is attached.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>key<ept id="p1">&lt;/c&gt;</ept> représente l’objet auquel la propriété est jointe.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>A delegate to a method that can create a value for the given <bpt id="p1">&lt;c&gt;</bpt>key<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Délégué d’une méthode qui peut créer une valeur pour l’élément <bpt id="p1">&lt;c&gt;</bpt>key<ept id="p1">&lt;/c&gt;</ept> donné.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>It has a single parameter of type <bpt id="p1">&lt;c&gt;</bpt>TKey<ept id="p1">&lt;/c&gt;</ept>, and returns a value of type <bpt id="p2">&lt;c&gt;</bpt>TValue<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il comporte un paramètre unique de type <bpt id="p1">&lt;c&gt;</bpt>TKey<ept id="p1">&lt;/c&gt;</ept> et retourne une valeur de type <bpt id="p2">&lt;c&gt;</bpt>TValue<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>Atomically searches for a specified key in the table and returns the corresponding value.</source>
          <target state="translated">Effectue une recherche atomique de la clé spécifiée dans la table et retourne la valeur correspondante.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>If the key does not exist in the table, the method invokes a callback method to create a value that is bound to the specified key.</source>
          <target state="translated">Si la clé n'existe pas dans la table, la méthode appelle une méthode de rappel pour créer une valeur liée à la clé spécifiée.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>The value attached to <ph id="ph1">&lt;paramref name="key" /&gt;</ph>, if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> already exists in the table; otherwise, the new value returned by the <ph id="ph3">&lt;paramref name="createValueCallback" /&gt;</ph> delegate.</source>
          <target state="translated">Valeur attachée à <ph id="ph1">&lt;paramref name="key" /&gt;</ph>, si <ph id="ph2">&lt;paramref name="key" /&gt;</ph> existe déjà dans la table ; sinon, nouvelle valeur retournée par le délégué <ph id="ph3">&lt;paramref name="createValueCallback" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>If <ph id="ph1">`key`</ph> does not exist in the table, <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph> invokes the method that is defined by the <ph id="ph3">`createValueCallback`</ph> parameter and passes it the key.</source>
          <target state="translated">Si <ph id="ph1">`key`</ph> n’existe pas dans la table, <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph> appelle la méthode définie par le <ph id="ph3">`createValueCallback`</ph> paramètre et lui passe la clé.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>A new value is bound to the key in the table and returned as a result.</source>
          <target state="translated">Une nouvelle valeur est liée à la clé de la table et retournée comme résultat.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>Use this method only when the class that represents the table's value does not define a default constructor.</source>
          <target state="translated">Utilisez cette méthode uniquement lorsque la classe qui représente la valeur de la table ne définit pas un constructeur par défaut.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>If it does define a default constructor, use the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A&gt;</ph> method instead.</source>
          <target state="translated">Si elle ne définit pas un constructeur par défaut, utilisez la <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A&gt;</ph> méthode à la place.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A&gt;</ph> method.</source>
          <target state="translated">Pour récupérer la valeur d’une clé existante sans ajouter la paire clé/valeur si la clé est introuvable dans la table, appelez le <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>If multiple threads try to create the same key, <ph id="ph1">`createValueCallback`</ph> may be invoked multiple times with the same key.</source>
          <target state="translated">Si plusieurs threads essaient de créer la même clé, <ph id="ph1">`createValueCallback`</ph> peut être appelée plusieurs fois avec la même clé.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>Only one of these calls will succeed, and its returned value will be added to the table.</source>
          <target state="translated">Seul de ces appels réussira, et sa valeur retournée sera ajoutée à la table.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>Which thread succeeds in creating the value is indeterminate.</source>
          <target state="translated">Thread qui réussit à créer de la valeur est indéterminé.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>This rule permits the table to invoke <ph id="ph1">`createValueCallback`</ph> outside the internal table lock to prevent deadlocks.</source>
          <target state="translated">Cette règle permet à la table d’appeler <ph id="ph1">`createValueCallback`</ph> hors du verrou de table interne pour empêcher les interblocages.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>The following example defines a <ph id="ph1">`MainClass`</ph> class and a <ph id="ph2">`MainInfo`</ph> class, which provides information about the <ph id="ph3">`MainClass`</ph> instance.</source>
          <target state="translated">L’exemple suivant définit un <ph id="ph1">`MainClass`</ph> classe et un <ph id="ph2">`MainInfo`</ph> (classe), qui fournit des informations sur la <ph id="ph3">`MainClass`</ph> instance.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>It also defines a static (<ph id="ph1">`Shared`</ph> in Visual Basic) <ph id="ph2">`CreateAttachedValue`</ph> method that can be assigned to the <ph id="ph3">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.CreateValueCallback&gt;</ph> delegate and passed to the <ph id="ph4">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph> method.</source>
          <target state="translated">Il définit également un statique (<ph id="ph1">`Shared`</ph> en Visual Basic) <ph id="ph2">`CreateAttachedValue`</ph> méthode qui peut être affectée à la <ph id="ph3">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.CreateValueCallback&gt;</ph> déléguer et passé à la <ph id="ph4">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>The example calls the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph> method to add a <ph id="ph2">`MainClass`</ph> object and its attached <ph id="ph3">`MainInfo`</ph> object to a <ph id="ph4">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> table.</source>
          <target state="translated">L’exemple appelle la <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph> méthode pour ajouter un <ph id="ph2">`MainClass`</ph> objet et son joint <ph id="ph3">`MainInfo`</ph> de l’objet à un <ph id="ph4">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> table.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>The example also illustrates calls to the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A&gt;</ph> methods to add key/value pairs to the table, and to the <ph id="ph3">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A&gt;</ph> method to retrieve the value of an existing key.</source>
          <target state="translated">L’exemple illustre également les appels à la <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A&gt;</ph> méthodes pour ajouter des paires clé/valeur à la table et à la <ph id="ph3">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A&gt;</ph> méthode pour récupérer la valeur d’une clé existante.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> or <ph id="ph2">&lt;paramref name="createValueCallback" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="createValueCallback" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)">
          <source>The key to remove.</source>
          <target state="translated">Clé à supprimer.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)">
          <source>Removes a key and its value from the table.</source>
          <target state="translated">Supprime une clé et sa valeur de la table.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the key is found and removed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la recherche et la suppression de la clé réussissent ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)">
          <source>If the key is garbage-collected during this operation, the method does not raise an exception and the return value is undefined.</source>
          <target state="translated">Si la clé est le garbage collector pendant cette opération, la méthode ne lève pas d’exception et la valeur de retour n’est pas définie.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
          <source>The key that represents an object with an attached property.</source>
          <target state="translated">Clé qui représente un objet avec une propriété jointe.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
          <source>When this method returns, contains the attached property value.</source>
          <target state="translated">Quand cette méthode est retournée, contient la valeur de la propriété jointe.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>key<ept id="p1">&lt;/c&gt;</ept> is not found, <bpt id="p2">&lt;c&gt;</bpt>value<ept id="p2">&lt;/c&gt;</ept> contains the default value.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>key<ept id="p1">&lt;/c&gt;</ept> est introuvable, <bpt id="p2">&lt;c&gt;</bpt>value<ept id="p2">&lt;/c&gt;</ept> contient la valeur par défaut.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
          <source>Gets the value of the specified key.</source>
          <target state="translated">Obtient la valeur de la clé spécifiée.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> is found; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la valeur <ph id="ph2">&lt;paramref name="key" /&gt;</ph> est trouvée, sinon <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
          <source>If the key is garbage-collected during this operation, the method may return <ph id="ph1">`false`</ph> and set <ph id="ph2">`value`</ph> to the default value (as if the key were not present).</source>
          <target state="translated">Si la clé est le garbage collector pendant cette opération, la méthode peut retourner <ph id="ph1">`false`</ph> et <ph id="ph2">`value`</ph> à la valeur par défaut (comme si la clé ne figuraient pas) la valeur.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
          <source>The following example defines a <ph id="ph1">`MainClass`</ph> class and a <ph id="ph2">`MainInfo`</ph> class, which provides information about the <ph id="ph3">`MainClass`</ph> instance.</source>
          <target state="translated">L’exemple suivant définit un <ph id="ph1">`MainClass`</ph> classe et un <ph id="ph2">`MainInfo`</ph> (classe), qui fournit des informations sur la <ph id="ph3">`MainClass`</ph> instance.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
          <source>The example calls the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph> methods to add key/value pairs to a <ph id="ph4">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> table.</source>
          <target state="translated">L’exemple appelle la <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A&gt;</ph>, et <ph id="ph3">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph> méthodes pour ajouter des paires clé/valeur à un <ph id="ph4">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> table.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
          <source>In each case, the example calls the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A&gt;</ph> method to confirm that the key/value pair has been added to the table.</source>
          <target state="translated">Dans chaque cas, l’exemple appelle la <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A&gt;</ph> méthode pour vérifier que la paire clé/valeur a été ajoutée à la table.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>