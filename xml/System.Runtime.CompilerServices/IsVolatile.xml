<Type Name="IsVolatile" FullName="System.Runtime.CompilerServices.IsVolatile">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bb30468630aa8d74a2407d01b7e38f4270d381f0" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37639230" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsVolatile" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsVolatile extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsVolatile" />
  <TypeSignature Language="VB.NET" Value="Public Class IsVolatile" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsVolatile abstract sealed" />
  <TypeSignature Language="F#" Value="type IsVolatile = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ca1d8-101">Marque un champ comme volatile.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ca1d8-101">Marks a field as volatile.</span>
      </span>
      <span data-ttu-id="ca1d8-102">Cette classe ne peut pas être héritée.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ca1d8-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ca1d8-103">`IsVolatile` est utilisé uniquement dans des modificateurs personnalisés de signatures de méthode pour indiquer que le champ qu’il marque est volatil.</span><span class="sxs-lookup"><span data-stu-id="ca1d8-103">`IsVolatile` is used only in custom modifiers of method signatures to indicate that the field it marks is volatile.</span></span> <span data-ttu-id="ca1d8-104">Un compilateur qui importe des métadonnées avec un ou plusieurs champs marqués comme volatile doit utiliser des instructions préfixées avec `volatile.` pour accéder à ces champs.</span><span class="sxs-lookup"><span data-stu-id="ca1d8-104">Any compiler that imports metadata with one or more fields marked as volatile must use instructions prefixed with `volatile.` to access such fields.</span></span>  
  
 <span data-ttu-id="ca1d8-105">Les classes de <xref:System.Runtime.CompilerServices> sont uniquement destinés aux writers de compilateur.</span><span class="sxs-lookup"><span data-stu-id="ca1d8-105">The classes in <xref:System.Runtime.CompilerServices> are for compiler writers' use only.</span></span>  
  
 <span data-ttu-id="ca1d8-106">Les compilateurs émettre des modificateurs personnalisés dans les métadonnées pour modifier la façon dont compilateur juste-à-temps (JIT) gère les valeurs lorsque le comportement par défaut n’est pas approprié.</span><span class="sxs-lookup"><span data-stu-id="ca1d8-106">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="ca1d8-107">Lorsque le compilateur JIT rencontre un modificateur personnalisé, il gère la valeur de la façon qui spécifie le modificateur.</span><span class="sxs-lookup"><span data-stu-id="ca1d8-107">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="ca1d8-108">Les compilateurs peuvent appliquer des modificateurs personnalisés pour les méthodes, les paramètres et valeurs de retour.</span><span class="sxs-lookup"><span data-stu-id="ca1d8-108">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="ca1d8-109">Le compilateur JIT doit répondre aux modificateurs obligatoires, mais peut ignorer les modificateurs facultatifs.</span><span class="sxs-lookup"><span data-stu-id="ca1d8-109">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  <span data-ttu-id="ca1d8-110">Un compilateur C++ peut émettre un modificateur personnalisé pour décrire la façon dont un octet doit être traité dans les cas où le compilateur JIT traite les octets d’une manière qui n’est pas compatible avec C++ par défaut.</span><span class="sxs-lookup"><span data-stu-id="ca1d8-110">A C++ compiler could emit a custom modifier to describe how a byte should be treated in cases where the JIT compiler treats bytes in a manner that is not compatible with C++ by default.</span></span>  
  
 <span data-ttu-id="ca1d8-111">Vous pouvez émettre des modificateurs personnalisés dans les métadonnées à l’aide d’une des techniques suivantes :</span><span class="sxs-lookup"><span data-stu-id="ca1d8-111">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="ca1d8-112">À l’aide de méthodes dans le <xref:System.Reflection.Emit.TypeBuilder> classe telle que <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, et <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="ca1d8-112">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="ca1d8-113">Génération d’un fichier d’instructions Microsoft intermediate language (MSIL) qui contient des appels de `modopt` et `modreq`et en assemblant le fichier avec le [Ilasm.exe (assembleur IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="ca1d8-113">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="ca1d8-114">À l’aide de l’API de réflexion non managée.</span><span class="sxs-lookup"><span data-stu-id="ca1d8-114">Using the unmanaged reflection API.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>