<Type Name="IsLong" FullName="System.Runtime.CompilerServices.IsLong">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f0ff9e7ca9b500686e20b077aeaf036990a624ae" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30476133" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsLong" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsLong extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsLong" />
  <TypeSignature Language="VB.NET" Value="Public Class IsLong" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsLong abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="088a6-101">Indique qu'un entier modifié est une valeur <see langword="long" /> C++ standard.</span>
      <span class="sxs-lookup">
        <span data-stu-id="088a6-101">Indicates that a modified integer is a standard C++ <see langword="long" /> value.</span>
      </span>
      <span data-ttu-id="088a6-102">Cette classe ne peut pas être héritée.</span>
      <span class="sxs-lookup">
        <span data-stu-id="088a6-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="088a6-103">La norme C++ indique qu’un `long` valeur et une valeur entière sont des types distincts.</span><span class="sxs-lookup"><span data-stu-id="088a6-103">The C++ standard indicates that a `long` value and an integer value are distinct types.</span></span>  <span data-ttu-id="088a6-104">Toutefois, elles sont représentées à l’aide de `ELEMENT_TYPE_I4` dans un assembly.</span><span class="sxs-lookup"><span data-stu-id="088a6-104">However, they are both represented using `ELEMENT_TYPE_I4` in an assembly.</span></span>  <span data-ttu-id="088a6-105">Pour distinguer un `long` à partir d’un entier en C++, le compilateur Microsoft C++ ajoute le <xref:System.Runtime.CompilerServices.IsLong> modificateur à n’importe quelle instance d’un `long` lorsque l’instance est émise.</span><span class="sxs-lookup"><span data-stu-id="088a6-105">To distinguish a `long` from an integer in C++, the Microsoft C++ compiler adds the <xref:System.Runtime.CompilerServices.IsLong> modifier to any instance of a `long` when the instance is emited.</span></span>  <span data-ttu-id="088a6-106">Ce processus est extrêmement important pour maintenir la cohérence des types de niveau de langage.</span><span class="sxs-lookup"><span data-stu-id="088a6-106">This process is critically important for maintaining language-level type safety.</span></span>  
  
 <span data-ttu-id="088a6-107">Les compilateurs émettent des modificateurs personnalisés dans les métadonnées pour modifier la façon dont le compilateur (JIT) juste-à-temps gère les valeurs lorsque le comportement par défaut n’est pas approprié.</span><span class="sxs-lookup"><span data-stu-id="088a6-107">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="088a6-108">Lorsque le compilateur JIT rencontre un modificateur personnalisé, il gère la valeur de la façon dont le modificateur.</span><span class="sxs-lookup"><span data-stu-id="088a6-108">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="088a6-109">Compilateurs peuvent appliquer des modificateurs personnalisés aux méthodes, aux paramètres et valeurs de retour.</span><span class="sxs-lookup"><span data-stu-id="088a6-109">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="088a6-110">Le compilateur JIT doit répondre aux modificateurs obligatoires, mais peut ignorer les modificateurs facultatifs.</span><span class="sxs-lookup"><span data-stu-id="088a6-110">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="088a6-111">Vous pouvez émettre des modificateurs personnalisés dans les métadonnées à l’aide d’une des techniques suivantes :</span><span class="sxs-lookup"><span data-stu-id="088a6-111">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="088a6-112">À l’aide de méthodes dans les <xref:System.Reflection.Emit.TypeBuilder> classe telles que <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, et <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="088a6-112">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="088a6-113">Génération d’un fichier d’instructions Microsoft intermediate language (MSIL) qui contient des appels de `modopt` et `modreq`et en assemblant le fichier avec le [Ilasm.exe (assembleur IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="088a6-113">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="088a6-114">À l’aide de l’API de réflexion non managée.</span><span class="sxs-lookup"><span data-stu-id="088a6-114">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="088a6-115">L’exemple suivant montre comment émettre une <xref:System.Runtime.CompilerServices.IsLong> objet dans un assembly à l’aide de la réflexion.</span><span class="sxs-lookup"><span data-stu-id="088a6-115">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsLong> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsLong#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsLong/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>