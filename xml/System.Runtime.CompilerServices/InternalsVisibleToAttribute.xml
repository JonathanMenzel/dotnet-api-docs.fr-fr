<Type Name="InternalsVisibleToAttribute" FullName="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5f0b6174ea837be0c0d10d39a109f0e32df7ca13" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56393591" /></Metadata><TypeSignature Language="C#" Value="public sealed class InternalsVisibleToAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InternalsVisibleToAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InternalsVisibleToAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class InternalsVisibleToAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type InternalsVisibleToAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indique que les types habituellement visibles uniquement dans l'assembly actuel sont également visibles dans un assembly spécifié.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, les types et membres avec `internal` ou `private protected` étendue (dans C#) et `Friend` et `Private Protected` étendue (en Visual Basic) sont visibles uniquement dans l’assembly dans lequel ils sont définis. Le <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribut les rend également visibles par les types dans un assembly spécifié, qui est connu comme assembly friend. Cela s’applique uniquement aux `internal` (`Friend` dans VB) ou `private protected`(`Private Protected` dans VB) des méthodes uniquement, mais pas `private` celles.
  
 L’attribut est appliqué au niveau de l’assembly. Cela signifie qu’il peut être inclus au début d’un fichier de code source, ou il peut être inclus dans le fichier AssemblyInfo dans un projet Visual Studio. Vous pouvez utiliser l’attribut pour spécifier un assembly friend unique qui peut accéder aux types internes et les membres de l’assembly actuel. Vous pouvez définir plusieurs assemblys friend de deux manières. Ils peuvent apparaître comme des attributs de niveau assembly individuels, comme l’illustre l’exemple suivant.  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple1.cs#3)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple1.vb#3)]  
  
 Ils peuvent également apparaître avec différentes <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> balises, mais un seul `assembly` mot clé, comme dans l’exemple suivant illustre.  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple2.cs#4)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple2.vb#4)]  
  
 L’assembly friend est identifié par le <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructeur. L’assembly actuel et l’assembly friend doivent être non signés, ou les deux assemblys doivent être signés avec un nom fort.  
  
 Si les deux assemblys ne sont pas signés, le `assemblyName` argument se compose du nom de l’assembly friend, spécifié sans une extension de nom de fichier ou chemin d’accès de répertoire.  
  
 Nom si les deux assemblys sont signés avec un nom fort, l’argument à la <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructeur doit être le nom de l’assembly sans son répertoire chemin ou extension de nom, ainsi que la clé publique complète (et pas son jeton de clé publique). Pour obtenir la clé publique complète d’un assembly avec nom fort, consultez le [obtention de la clé publique complète](#Key) section plus loin dans cet article. Pour plus d’informations sur l’utilisation de <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> avec les assemblys avec nom fort, consultez le <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructeur.  
  
 N’incluez pas de valeurs pour le <xref:System.Reflection.AssemblyName.CultureInfo%2A>, <xref:System.Reflection.AssemblyName.Version%2A>, ou <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A> champ dans l’argument ; les compilateurs Visual Basic, c# et C++ considérer ceci comme une erreur du compilateur. Si vous utilisez un compilateur qui ne la traite pas comme une erreur (tel que le [assembleur IL (ILAsm.exe)](~/docs/framework/tools/ilasm-exe-il-assembler.md)) et les assemblys avec nom fort, une <xref:System.MethodAccessException> exception est levée la première fois que l’assembly friend spécifié accède à la assembly qui contient le <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribut.  
  
 Pour plus d’informations sur l’utilisation de cet attribut, consultez les rubriques suivantes :  
  
-   [Assemblys friend (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [Assemblys friend](https://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
<a name="Key"></a>   
## <a name="getting-the-full-public-key"></a>Obtention de la clé publique complète  
 Vous pouvez utiliser la [Strong Name Tool (Sn.exe)](~/docs/framework/tools/sn-exe-strong-name-tool.md) pour récupérer la clé publique complète à partir d’un fichier de clé de nom fort (.snk). Pour ce faire, vous procédez comme suit :  
  
1.  Extrayez la clé publique à partir du fichier de clé de nom fort dans un fichier distinct :  
  
     **Sn -p**  *snk_file* *outfile*  
  
2.  Afficher la clé publique complète dans la console :  
  
     **Sn - tp***outfile*  
  
3.  Copiez et collez la valeur de clé publique complète dans votre code source.  
  
## <a name="compiling-the-friend-assembly-with-c"></a>Compilation de l’assembly friend avec c#  
 Si vous utilisez le compilateur c# pour compiler l’assembly friend, vous devez spécifier explicitement le nom du fichier de sortie (.exe ou .dll) à l’aide de la **/out** option du compilateur. Ceci est nécessaire, car le compilateur n’a pas encore généré le nom de l’assembly qu’il est en train de créer au moment où il effectue une liaison avec les références externes. Le **/out** option du compilateur est facultative pour le compilateur Visual Basic et correspondants **-out** ou **-o** option du compilateur ne doit pas être utilisée lors de la compilation friend assemblys avec la F# compilateur.  
  
## <a name="compiling-the-friend-assembly-with-c"></a>Compilation de l’assembly friend avec C++  
 En C++, afin de rendre les membres internes activés par le <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribut accessible à un assembly friend, vous devez utiliser le `as_friend` attribut dans la directive de C++. Pour plus d’informations, consultez [assemblys Friend (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd).  
  
   
  
## Examples  
 **Assemblys signés**  
  
 L’exemple suivant utilise le <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attributs pour faire un `internal` méthode nommée `AppendDirectorySeparator` dans un assembly signé visible à un autre assembly signé. Il définit un `FileUtilities` classe qui inclut un interne `AppendDirectorySeparator` (méthode). Le <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribut est appliqué à l’assembly qui contient le `FileUtilities` classe. L’attribut autorise un assembly nommé `Friend1` pour accéder à ce membre interne.  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  
  
 Si l’exemple suivant est compilé dans un assembly avec nom fort nommé `Friend1`, le `Example.Main` méthode dans `Friend1` peut appeler le `FileUtilities.AppendDirectorySeparator` (méthode), bien que la méthode est interne à la `Assembly1` assembly. Notez que si vous compilez en c# à partir de la ligne de commande, vous devez utiliser le **/out** commutateur de compilateur pour vous assurer que le nom de l’assembly friend est disponible lorsque le compilateur se lie à des références externes.  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  
  
 **Assemblys non signés**  
  
 L’exemple suivant utilise le <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attributs pour faire un `internal` membre d’un assembly non signé visible à l’autre non signé l’assembly. L’attribut garantit que le `internal` `StringLib.IsFirstLetterUpperCase` méthode dans un assembly nommé `UtilityLib` est visible par le code dans un assembly nommé `Friend2`.  Voici le code source pour UtilityLib.dll :  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  
  
 L’exemple suivant fournit le code source pour le `Friend2` assembly. Notez que si vous compilez en c# à partir de la ligne de commande, vous devez utiliser le **/out** commutateur de compilateur pour vous assurer que le nom de l’assembly friend est disponible lorsque le compilateur se lie à des références externes.  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternalsVisibleToAttribute (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InternalsVisibleToAttribute(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="new System.Runtime.CompilerServices.InternalsVisibleToAttribute : string -&gt; System.Runtime.CompilerServices.InternalsVisibleToAttribute" Usage="new System.Runtime.CompilerServices.InternalsVisibleToAttribute assemblyName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">Nom d'un assembly friend.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> à l'aide du nom de l'assembly friend spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructeur définit un assembly friend, qui est un assembly qui a accès à la liste interne et privé protégé de types et membres de l’assembly actuel.  
  
 L’assembly actuel et l’assembly friend doivent être non signés, ou les deux doivent être signés avec un nom fort. (Pour plus d’informations sur les assemblys avec nom fort, consultez [création et assemblys avec nom fort](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md).) Si les deux sont non signés, le `assemblyName` argument se compose du nom de l’assembly friend, spécifié sans une extension de fichier ou chemin d’accès du répertoire. Si les deux sont signés, `assemblyName` se compose du nom de l’assembly friend sans son répertoire chemin ou extension de nom, ainsi que sa clé publique complète (mais pas son jeton de clé publique). Les autres composants d’un nom fort, tels que ceux qui fournissent la culture, version ou informations sur l’architecture du processeur, ne peut pas être spécifiés dans le `assemblyName` argument.  
  
> [!IMPORTANT]
>  Si vous utilisez le compilateur c# pour compiler l’assembly friend, vous devez spécifier explicitement le nom du fichier de sortie (.exe ou .dll) à l’aide de la **/out** option du compilateur. Ceci est nécessaire, car le compilateur n’a pas encore généré le nom de l’assembly qu’il est en train de créer au moment où il effectue une liaison avec les références externes. Le **/out** option du compilateur est facultative pour le compilateur Visual Basic et correspondants **-out** ou **-o** option du compilateur ne doit pas être utilisée lors de la compilation friend assemblys avec la F# compilateur.  
  
 Vous pouvez utiliser [Sn.exe (Strong Name Tool)](~/docs/framework/tools/sn-exe-strong-name-tool.md) pour récupérer la clé publique complète à partir d’un fichier de clé de nom fort (.snk). Pour ce faire, vous procédez comme suit :  
  
1.  Extrayez la clé publique à partir du fichier de clé de nom fort dans un fichier distinct :  
  
     **Sn -p**  *snk_file* *outfile*  
  
2.  Afficher la clé publique complète dans la console :  
  
     **Sn - tp***outfile*  
  
3.  Copiez et collez la valeur de clé publique complète dans votre code source.  
  
 Pour plus d’informations sur l’utilisation de la <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> d’attribut, consultez les rubriques suivantes :  
  
-   [Assemblys friend (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [Assemblys friend](https://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
   
  
## Examples  
 **Assemblys signés**  
  
 L’exemple suivant utilise le <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attributs pour faire un `internal` méthode nommée `AppendDirectorySeparator` dans un assembly signé visible à un autre assembly signé. Il définit un `FileUtilities` classe qui inclut un interne `AppendDirectorySeparator` (méthode). Le <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribut est appliqué à l’assembly qui contient le `FileUtilities` classe. L’attribut autorise un assembly nommé `Friend1` pour accéder à ce membre interne.  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  
  
 Si l’exemple suivant est compilé dans un assembly avec nom fort nommé `Friend1`, il peut appeler le `FileUtilities.AppendDirectorySeparator` (méthode), même si la méthode est interne à la `Assembly1` assembly. Notez que si vous compilez en c# à partir de la ligne de commande, vous devez utiliser le **/out** commutateur de compilateur pour vous assurer que le nom de l’assembly friend est disponible lorsque le compilateur se lie à des références externes.  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  
  
 L’exemple suivant utilise le <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attributs pour faire un `internal` membre d’un assembly non signé visible à l’autre non signé l’assembly. L’attribut garantit que le `internal` `StringLib.IsFirstLetterUpperCase` méthode dans un assembly nommé `UtilityLib` est visible par le code dans un assembly nommé `Friend2`.  Voici le code source pour UtilityLib.dll :  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  
  
 **Assemblys non signés**  
  
 L’exemple suivant fournit le code source pour le `Friend2` assembly. Notez que si vous compilez en c# à partir de la ligne de commande, vous devez utiliser le **/out** commutateur de compilateur pour vous assurer que le nom de l’assembly friend est disponible lorsque le compilateur se lie à des références externes.  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllInternalsVisible">
      <MemberSignature Language="C#" Value="public bool AllInternalsVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllInternalsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property AllInternalsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllInternalsVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllInternalsVisible : bool with get, set" Usage="System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cette propriété n'est pas implémentée.</summary>
        <value>Cette propriété ne retourne pas de valeur.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyName">
      <MemberSignature Language="C#" Value="public string AssemblyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AssemblyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyName : string" Usage="System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom de l'assembly friend dans lequel tous les types et membres de type marqués avec le mot clé <see langword="internal" /> doivent être visibles.</summary>
        <value>Chaîne représentant le nom de l'assembly friend.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur l’utilisation de la <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> d’attribut, consultez les rubriques suivantes :  
  
-   [Assemblys friend (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [Assemblys friend](https://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>