<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AsyncResult.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d8dcfaa989a8bc907f295feb15394366e5aa96ac.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d8dcfaa989a8bc907f295feb15394366e5aa96ac</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>Encapsulates the results of an asynchronous operation on a delegate.</source>
          <target state="translated">Encapsule les résultats d'une opération asynchrone sur un délégué.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> class is used in conjunction with asynchronous method calls made using delegates.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> classe est utilisée conjointement avec les appels de méthode asynchrone effectuées à l’aide de délégués.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned from the delegate's <ph id="ph2">`BeginInvoke`</ph> method can be cast to an <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> retourné à partir du délégué <ph id="ph2">`BeginInvoke`</ph> méthode peut être convertie en un <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> has the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> property that holds the delegate object on which the asynchronous call was invoked.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> a le <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> propriété qui contient le délégué de l’objet sur lequel l’appel asynchrone a été appelé.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>For more information about <ph id="ph1">`BeginInvoke`</ph> and asynchronous calls using delegates, see <bpt id="p1">[</bpt>Asynchronous Programming Using Delegates<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur <ph id="ph1">`BeginInvoke`</ph> et les appels asynchrones à l’aide de délégués, consultez <bpt id="p1">[</bpt>délégués asynchrones à l’aide de programmation<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)</ept>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> property to get a <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>, and how to wait for an asynchronous call on a delegate.</source>
          <target state="translated">L’exemple suivant montre comment utiliser le <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> propriété à obtenir un <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>et l’attente d’un appel asynchrone sur un délégué.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> is signaled when the asynchronous call completes, and you can wait for it by calling the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> est signalé quand l’appel asynchrone se termine et vous pouvez l’attendre en appelant la méthode <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> .</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">L’exemple se compose de deux classes, la classe qui contient la méthode qui est appelée de façon asynchrone et la classe qui contient le <ph id="ph1">`Main`</ph> méthode qui effectue l’appel.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Remoting.Messaging.AsyncResult">
          <source>For more information and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Pour plus d’informations et d’autres exemples d’appel des méthodes de façon asynchrone à l’aide de délégués, consultez <bpt id="p1">[</bpt>appel asynchrone des méthodes synchrones<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>Gets the delegate object on which the asynchronous call was invoked.</source>
          <target state="translated">Obtient l'objet de délégué sur lequel l'appel asynchrone a été effectué.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The delegate object on which the asynchronous call was invoked.</source>
          <target state="translated">Objet de délégué sur lequel l'appel asynchrone a été effectué.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> property can be cast to the actual class of the user-defined delegate.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> propriété peut être castée en la classe réelle du délégué défini par l’utilisateur.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>For example, if the delegate that was used to make the asynchronous call is of type <ph id="ph1">`MyDelegate`</ph>, the delegate that is returned by this property must be cast to <ph id="ph2">`MyDelegate`</ph>.</source>
          <target state="translated">Par exemple, si le délégué utilisé pour passer l’appel asynchrone est de type <ph id="ph1">`MyDelegate`</ph>, le délégué qui est retourné par cette propriété doit être casté en <ph id="ph2">`MyDelegate`</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The callback method can then call the delegate's <ph id="ph1">`EndInvoke`</ph> method with the correct signature, in order to obtain the results of the asynchronous method call.</source>
          <target state="translated">La méthode de rappel peut appeler puis celui du délégué <ph id="ph1">`EndInvoke`</ph> méthode avec la signature appropriée, afin d’obtenir les résultats de l’appel de méthode asynchrone.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> property to get the delegate that was used to make the asynchronous call, in order to call <ph id="ph2">`EndInvoke`</ph>.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser le <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;</ph> propriété à obtenir le délégué utilisé pour passer l’appel asynchrone, afin d’appeler <ph id="ph2">`EndInvoke`</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The example casts the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>, which is the only parameter of the callback method, to an <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> object.</source>
          <target state="translated">L’exemple caste la <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>, qui est le seul paramètre de la méthode de rappel, à un <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">L’exemple se compose de deux classes, la classe qui contient la méthode qui est appelée de façon asynchrone et la classe qui contient le <ph id="ph1">`Main`</ph> méthode qui effectue l’appel.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
          <source>For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur la manière dont fonctionne cet exemple de rappel et d’autres exemples d’appel de méthodes asynchrone à l’aide de délégués, consultez <bpt id="p1">[</bpt>appel asynchrone des méthodes synchrones<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>The request <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessage" /&gt;</ph> interface.</source>
          <target state="translated">Interface <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessage" /&gt;</ph> de demande.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>The response <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> interface.</source>
          <target state="translated">Interface <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> de réponse.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> interface.</source>
          <target state="translated">Implémente l'interface <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>No value is returned.</source>
          <target state="translated">Aucune valeur n'est retournée.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;</ph> interface is not relevant to the <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> class.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage%2A&gt;</ph> méthode de la <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;</ph> interface s’applique pas à la <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>Implementation by <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> throws a <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Mise en oeuvre par <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> lève une <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
          <source>Instead, obtain an <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> by casting the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> interface returned by an asynchronous call made using a delegate.</source>
          <target state="translated">Au lieu de cela, obtenez un <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> en effectuant un cast du <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> interface retournée par un appel asynchrone effectué à l’aide d’un délégué.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>Gets the object provided as the last parameter of a <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> method call.</source>
          <target state="translated">Obtient l'objet fourni comme dernier paramètre d'un appel de méthode <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>The object provided as the last parameter of a <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> method call.</source>
          <target state="translated">Objet fourni comme dernier paramètre d'un appel de méthode <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>For more information about the <ph id="ph1">`BeginInvoke`</ph> method, see <bpt id="p1">[</bpt>Asynchronous Programming Using Delegates<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur la <ph id="ph1">`BeginInvoke`</ph> méthode, consultez <bpt id="p1">[</bpt>délégués asynchrones à l’aide de programmation<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates.md)</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>The following code example demonstrates how the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A&gt;</ph> property is used to pass information to a callback method.</source>
          <target state="translated">L’exemple de code suivant montre comment la <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A&gt;</ph> propriété est utilisée pour passer des informations à une méthode de rappel.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>The last parameter of the <ph id="ph1">`BeginInvoke`</ph> method call is a format string, which the callback method uses to format an output message.</source>
          <target state="translated">Le dernier paramètre de la <ph id="ph1">`BeginInvoke`</ph> appel de méthode est une chaîne de format, la méthode de rappel utilise pour mettre en forme un message de sortie.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">L’exemple se compose de deux classes, la classe qui contient la méthode qui est appelée de façon asynchrone et la classe qui contient le <ph id="ph1">`Main`</ph> méthode qui effectue l’appel.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
          <source>For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur la manière dont fonctionne cet exemple de rappel et d’autres exemples d’appel de méthodes asynchrone à l’aide de délégués, consultez <bpt id="p1">[</bpt>appel asynchrone des méthodes synchrones<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</source>
          <target state="translated">Obtient un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> qui encapsule des handles de synchronisation Win32 et permet l'implémentation de divers schémas de synchronisation.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> qui encapsule des handles de synchronisation Win32 et permet l'implémentation de divers schémas de synchronisation.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> returned by this method is automatically signaled when the asynchronous operation has completed.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> retourné par cette méthode est automatiquement signalée lors de l’opération asynchrone est terminée.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The wait handle is not closed automatically when you call <ph id="ph1">`EndInvoke`</ph> on the delegate that was used to make the asynchronous method call.</source>
          <target state="translated">Le handle d’attente n’est pas fermé automatiquement quand vous appelez <ph id="ph1">`EndInvoke`</ph> le délégué a été utilisée pour appeler la méthode asynchrone.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>If you release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle.</source>
          <target state="translated">Si vous libérez toutes les références au handle d’attente, les ressources système sont libérées quand le garbage collection récupère le handle d’attente.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>To free the system resources as soon as you are finished using the wait handle, call the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Close%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pour libérer les ressources système dès que vous avez terminé d’utiliser le handle d’attente, appelez le <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Close%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>Garbage collection works more efficiently when disposable objects are explicitly closed or disposed.</source>
          <target state="translated">Le garbage collection fonctionne plus efficacement lorsque les objets sont explicitement fermées ou libérées.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> contained in the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> property can be used to block the current thread until the asynchronous call is complete.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> contenus dans le <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> propriété peut être utilisée pour bloquer le thread actuel jusqu'à ce que l’appel asynchrone est terminée.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>However the <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> will ignore the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph>, if one was specified during the <ph id="ph3">`BeginInvoke`</ph> call.</source>
          <target state="translated">Toutefois, le <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> ignorera le <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph>, s’il a été spécifié lors de la <ph id="ph3">`BeginInvoke`</ph> appeler.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>Therefore, a situation can occur where the application shuts down before the <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> has finished executing, even if a <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> is used to block until the asynchronous call completion.</source>
          <target state="translated">Par conséquent, une situation peut se produire lorsque l’application s’arrête avant la <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> a terminé l’exécution, même si un <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> est utilisé à un blocage jusqu'à la fin de l’appel asynchrone.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>For an example of such a situation, see the example for the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> class, and remove the <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> statement.</source>
          <target state="translated">Pour obtenir un exemple d’une telle situation, consultez l’exemple de la <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> de classe et de supprimer la <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> instruction.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> property to get a <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>, and how to wait for an asynchronous call on a delegate.</source>
          <target state="translated">L’exemple suivant montre comment utiliser le <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A&gt;</ph> propriété à obtenir un <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>et l’attente d’un appel asynchrone sur un délégué.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> is signaled when the asynchronous call completes, and you can wait for it by calling the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> est signalé quand l’appel asynchrone se termine et vous pouvez l’attendre en appelant la méthode <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> .</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">L’exemple se compose de deux classes, la classe qui contient la méthode qui est appelée de façon asynchrone et la classe qui contient le <ph id="ph1">`Main`</ph> méthode qui effectue l’appel.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
          <source>For more information and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Pour plus d’informations et d’autres exemples d’appel des méthodes de façon asynchrone à l’aide de délégués, consultez <bpt id="p1">[</bpt>appel asynchrone des méthodes synchrones<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> call completed synchronously.</source>
          <target state="translated">Obtient une valeur indiquant si l'appel <ph id="ph1">&lt;see langword="BeginInvoke" /&gt;</ph> s'est terminé de façon synchrone.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see langword="BeginInvoke" /&gt;</ph> call completed synchronously; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'appel <ph id="ph2">&lt;see langword="BeginInvoke" /&gt;</ph> s'est terminé de façon synchrone ; sinon <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
          <source>If it is detected that the <ph id="ph1">`BeginInvoke`</ph> call completed synchronously in the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate, it is probable that the thread that called BeginInvoke is the current thread.</source>
          <target state="translated">S’il est détecté que le <ph id="ph1">`BeginInvoke`</ph> appel s’est terminé de façon synchrone dans le <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> délégué, il est probable que le thread qui a appelé BeginInvoke est le thread actuel.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
          <source>Most providers of the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface will not use the capability and will return a default <ph id="ph2">`false`</ph>.</source>
          <target state="translated">La plupart des fournisseurs de la <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface n’utiliseront pas cette possibilité et retourne une valeur par défaut <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
          <source>Current implementation of <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously%2A&gt;</ph> always returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">L’implémentation actuelle de <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously%2A&gt;</ph> retourne toujours <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled">
          <source>Gets or sets a value indicating whether <ph id="ph1">&lt;see langword="EndInvoke" /&gt;</ph> has been called on the current <ph id="ph2">&lt;see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /&gt;</ph>.</source>
          <target state="translated">Obtient ou définit une valeur indiquant si <ph id="ph1">&lt;see langword="EndInvoke" /&gt;</ph> a été appelé sur <ph id="ph2">&lt;see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /&gt;</ph> en cours.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;see langword="EndInvoke" /&gt;</ph> has been called on the current <ph id="ph3">&lt;see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see langword="EndInvoke" /&gt;</ph> a été appelé sur <ph id="ph3">&lt;see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /&gt;</ph> en cours ; sinon <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>Gets the response message for the asynchronous call.</source>
          <target state="translated">Obtient le message de réponse pour l'appel asynchrone.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>A remoting message that should represent a response to a method call on a remote object.</source>
          <target state="translated">Message de communication à distance qui doit représenter une réponse à un appel de méthode sur un objet distant.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph> method can return an object after the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> method is called.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph> méthode peut retourner un objet après la <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> méthode est appelée.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.IMessage&gt;</ph> return value can be cast to an <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.IMessage&gt;</ph> valeur de retour peut être convertie en un <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>However, you do not need to call either of these methods directly.</source>
          <target state="translated">Toutefois, vous n’avez pas besoin d’appeler une de ces méthodes directement.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage">
          <source>They are intended for use by the remoting infrastructure of the .NET Framework.</source>
          <target state="translated">Elles sont destinées à une utilisation par l’infrastructure de communication à distance du .NET Framework.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>Gets a value indicating whether the server has completed the call.</source>
          <target state="translated">Obtient une valeur indiquant si le serveur a terminé l'appel.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> after the server has completed the call; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> après que le serveur a terminé l'appel ; sinon <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>The server must not use any client supplied resources outside of the agreed upon sharing semantics after it sets the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Le serveur ne doit pas utiliser toutes les ressources fournies par un client en dehors de l’accord sémantiques de partage, une fois qu’il a le <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> propriété <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>Thus, it is safe for the client to destroy the resources after the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> property returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Par conséquent, il est sécurisé pour le client à détruire les ressources après le <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> propriété renvoie <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> returned by <ph id="ph3">`BeginInvoke`</ph> to discover when an asynchronous call completes.</source>
          <target state="translated">L’exemple suivant montre comment utiliser le <ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> propriété de la <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> retourné par <ph id="ph3">`BeginInvoke`</ph> pour déterminer quand un appel asynchrone se termine.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>You might do this when making the asynchronous call from a thread that services the user interface.</source>
          <target state="translated">Cela est possible quand vous effectuez l’appel asynchrone à partir d’un thread qui gère l’interface utilisateur.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">L’interrogation pour connaître l’état d’avancement permet au thread appelant de continuer à s’exécuter pendant que l’appel asynchrone s’exécute sur un thread <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> .</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the <ph id="ph1">`Main`</ph> method that makes the call.</source>
          <target state="translated">L’exemple se compose de deux classes, la classe qui contient la méthode qui est appelée de façon asynchrone et la classe qui contient le <ph id="ph1">`Main`</ph> méthode qui effectue l’appel.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
          <source>For more information and more examples of calling methods asynchronously by using delegates, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Pour plus d’informations et d’autres exemples d’appel des méthodes de façon asynchrone à l’aide de délégués, consultez <bpt id="p1">[</bpt>appel asynchrone des méthodes synchrones<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.NextSink">
          <source>Gets the next message sink in the sink chain.</source>
          <target state="translated">Obtient le récepteur de messages suivant dans la chaîne de récepteurs.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.NextSink">
          <source>An <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> interface that represents the next message sink in the sink chain.</source>
          <target state="translated">Interface <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /&gt;</ph> qui représente le récepteur de messages suivant dans la chaîne de récepteurs.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Remoting.Messaging.AsyncResult.NextSink">
          <source>The current implementation of <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.NextSink%2A&gt;</ph> returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">L’implémentation actuelle de <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.NextSink%2A&gt;</ph> retourne <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /&gt;</ph> for the current remote method call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /&gt;</ph> pour l'appel de méthode distant en cours.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)">
          <source>Sets an <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /&gt;</ph> for the current remote method call, which provides a way to control asynchronous messages after they have been dispatched.</source>
          <target state="translated">Définit <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /&gt;</ph> pour l'appel de méthode distant en cours qui offre un moyen de contrôler les messages asynchrones après leur distribution.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)">
          <source>You do not need to call the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl%2A&gt;</ph> method.</source>
          <target state="translated">Vous n’avez pas besoin d’appeler le <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>A response message to a method call on a remote object.</source>
          <target state="translated">Message de réponse à un appel de méthode sur un objet distant.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>Synchronously processes a response message returned by a method call on a remote object.</source>
          <target state="translated">Traite de manière synchrone un message de réponse retourné par un appel de méthode sur un objet distant.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>Returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Retourne <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> method implements the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;</ph> interface.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> méthode implémente la <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>You do not need to call this method directly.</source>
          <target state="translated">Vous n’avez pas besoin d’appeler cette méthode directement.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>It is intended for use by the remoting infrastructure of the .NET Framework.</source>
          <target state="translated">Il est prévu pour une utilisation par l’infrastructure de communication à distance du .NET Framework.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> invokes the consumer code's <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> appelle le code de consommateur <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> déléguer.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>It also sets the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph> instance returned by the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph> method.</source>
          <target state="translated">Il définit également la <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph> instance retournée par le <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>If the <ph id="ph1">`msg`</ph> parameter is of type <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph>, the same object is returned by <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph>.</source>
          <target state="translated">Si le <ph id="ph1">`msg`</ph> paramètre est de type <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</ph>, le même objet est retourné par <ph id="ph3">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source>Otherwise, a reply message that contains a remoting exception is returned.</source>
          <target state="translated">Sinon, un message de réponse contenant une exception de communication à distance est retourné.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
          <source><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> also modifies the value returned by the <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;</ph> modifie également la valeur retournée par la <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;</ph> propriété.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>