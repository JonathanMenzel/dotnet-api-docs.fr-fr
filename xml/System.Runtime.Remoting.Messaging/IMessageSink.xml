<Type Name="IMessageSink" FullName="System.Runtime.Remoting.Messaging.IMessageSink">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1dd3980c6db096c63bf5a16dc14529fdeaebe51c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36631072" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IMessageSink" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMessageSink" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Messaging.IMessageSink" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMessageSink" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMessageSink" />
  <TypeSignature Language="F#" Value="type IMessageSink = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Définit l'interface pour un récepteur de messages.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’un appel de méthode est effectué sur le proxy, l’infrastructure de communication à distance fournit la prise en charge nécessaire pour passer des arguments à l’objet réel au-delà des limites de la communication à distance, appelant la méthode de l’objet réel avec les arguments et retourner les résultats dans le client de l’objet proxy.  
  
 Un appel de méthode distant est un message qui s’intègre à partir de la fin du client à la fin du serveur et éventuellement de nouveau. Lorsqu’il franchit les limites de la communication à distance sur la façon, l’appel de méthode distant passe par une chaîne de `IMessageSink` objets. Chaque récepteur dans la chaîne reçoit l’objet message, exécute une opération spécifique et délègue au récepteur suivant dans la chaîne. L’objet proxy contient une référence à la première `IMessageSink` il doit utiliser pour démarrer la chaîne.  
  
 Pour les appels asynchrones, au moment de la délégation, chaque récepteur fournit un récepteur de réponse (un autre `IMessageSink`) qui sera appelé par le récepteur suivant lors de retour de la réponse.  
  
 Différents types de récepteurs d’effectuent différentes opérations, selon le type d’objet du message reçu. Par exemple, un récepteur pourrait provoquer un verrou au, un autre peut appliquer la sécurité de l’appel, un autre pourrait exécuter des services de contrôle et de fiabilité appel flux et un autre transporter l’appel vers un autre <xref:System.AppDomain>, processus, ou l’ordinateur. Deux ou plusieurs récepteurs de message dans la chaîne peuvent interagir avec eux en matière de chaque action spécifique.  
  
   
  
## Examples  
 L’exemple de code suivant montre l’implémentation de la <xref:System.Runtime.Remoting.Messaging.IMessageSink> interface. Notez que l’exemple suppose que les définitions de type et les références d’assembly qui doivent être fournies pour l’exemple à compiler.  
  
 [!code-cpp[IMessageSink_Client#3](~/samples/snippets/cpp/VS_Snippets_Remoting/IMessageSink_Client/CPP/imessagesink_client.cpp#3)]
 [!code-csharp[IMessageSink_Client#3](~/samples/snippets/csharp/VS_Snippets_Remoting/IMessageSink_Client/CS/imessagesink_client.cs#3)]
 [!code-vb[IMessageSink_Client#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IMessageSink_Client/VB/imessagesink_client.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Il est important de noter que le code implémentant l’interface en cours doit fournir des implémentations pour les deux <see cref="M:System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)" /> et <see cref="M:System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)" />, puisque les appels synchrones peuvent être convertis en appels asynchrones et vice versa. Les deux méthodes doivent être appliquées, même si le récepteur ne prend pas en charge le traitement asynchrone.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName="AsyncProcessMessage">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Messaging.IMessageSink replySink) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)" />
      <MemberSignature Language="VB.NET" Value="Public Function AsyncProcessMessage (msg As IMessage, replySink As IMessageSink) As IMessageCtrl" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::Remoting::Messaging::IMessageCtrl ^ AsyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage ^ msg, System::Runtime::Remoting::Messaging::IMessageSink ^ replySink);" />
      <MemberSignature Language="F#" Value="abstract member AsyncProcessMessage : System.Runtime.Remoting.Messaging.IMessage * System.Runtime.Remoting.Messaging.IMessageSink -&gt; System.Runtime.Remoting.Messaging.IMessageCtrl" Usage="iMessageSink.AsyncProcessMessage (msg, replySink)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessageCtrl</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
        <Parameter Name="replySink" Type="System.Runtime.Remoting.Messaging.IMessageSink" />
      </Parameters>
      <Docs>
        <param name="msg">Message à traiter.</param>
        <param name="replySink">Récepteur de réponses pour le message de réponse.</param>
        <summary>Traite de façon asynchrone le message fourni.</summary>
        <returns>Retourne une interface <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /> qui permet de contrôler des messages asynchrones après leur distribution.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est appelée sur le récepteur de messages par l’infrastructure de communication à distance ou par un récepteur précédent pour des messages asynchrones.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">L’appelant immédiat effectue l’appel via une référence à l’interface et ne dispose pas d’autorisation d’infrastructure.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour opérer avec le code d’infrastructure. Valeur de la demande : <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Valeur d’autorisation : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" /></permission>
      </Docs>
    </Member>
    <Member MemberName="NextSink">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Messaging.IMessageSink NextSink { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Remoting.Messaging.IMessageSink NextSink" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.IMessageSink.NextSink" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextSink As IMessageSink" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Remoting::Messaging::IMessageSink ^ NextSink { System::Runtime::Remoting::Messaging::IMessageSink ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NextSink : System.Runtime.Remoting.Messaging.IMessageSink" Usage="System.Runtime.Remoting.Messaging.IMessageSink.NextSink" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessageSink</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le récepteur de messages suivant dans la chaîne de récepteurs.</summary>
        <value>Récepteur de messages suivant dans la chaîne de récepteurs.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">L’appelant immédiat effectue l’appel via une référence à l’interface et ne dispose pas d’autorisation d’infrastructure.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour opérer avec le code d’infrastructure. Valeur de la demande : <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Valeur d’autorisation : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SyncProcessMessage">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(class System.Runtime.Remoting.Messaging.IMessage msg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function SyncProcessMessage (msg As IMessage) As IMessage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::Remoting::Messaging::IMessage ^ SyncProcessMessage(System::Runtime::Remoting::Messaging::IMessage ^ msg);" />
      <MemberSignature Language="F#" Value="abstract member SyncProcessMessage : System.Runtime.Remoting.Messaging.IMessage -&gt; System.Runtime.Remoting.Messaging.IMessage" Usage="iMessageSink.SyncProcessMessage msg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
      </Parameters>
      <Docs>
        <param name="msg">Message à traiter.</param>
        <summary>Traite de façon synchrone le message fourni.</summary>
        <returns>Message de réponse en réponse à la demande.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage%2A> méthode est appelée sur le récepteur de messages par l’infrastructure de communication à distance ou par un récepteur précédent pour des messages synchrones.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">L’appelant immédiat effectue l’appel via une référence à l’interface et ne dispose pas d’autorisation d’infrastructure.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour opérer avec le code d’infrastructure. Valeur de la demande : <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Valeur d’autorisation : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>