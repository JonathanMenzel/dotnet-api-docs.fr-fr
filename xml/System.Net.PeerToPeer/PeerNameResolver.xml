<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PeerNameResolver.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58fbb46569ea8c3e2c36d884eb360682eca12794a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8fbb46569ea8c3e2c36d884eb360682eca12794a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>Specifies the values that resolve a <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> using the PNRP Namespace Provider API protocol.</source>
          <target state="translated">Spécifie les valeurs qui résolvent un <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> en un <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> à l'aide de l'API du fournisseur d'espace de noms PNRP.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>A <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameRecord&gt;</ph> which contains all the information for the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> that was published in the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> or cloud(s) that were queried during the resolve process.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameRecord&gt;</ph> qui contient toutes les informations pour le <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> qui a été publiée dans le <ph id="ph3">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> ou nuages ont été interrogés pendant le processus de résolution.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.#ctor">
          <source>Initializes a new default instance of the <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameResolver" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance par défaut de la classe <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameResolver" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.#ctor">
          <source>After successfully resolving a <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>, the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameRecord&gt;</ph> contains all the information for the specified <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A&gt;</ph> that was published in the cloud(s) that were queried during the <ph id="ph4">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> operation.</source>
          <target state="translated">Après avoir résolu avec succès un <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>, le <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameRecord&gt;</ph> contient toutes les informations pour le texte spécifié <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A&gt;</ph> qui a été publié dans les nuages ont été interrogés pendant la <ph id="ph4">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> opération.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted(System.Net.PeerToPeer.ResolveCompletedEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.ResolveCompletedEventArgs" /&gt;</ph> object that contains the data returned by the <ph id="ph2">&lt;see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted" /&gt;</ph> event.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.ResolveCompletedEventArgs" /&gt;</ph> qui contient les données retournées par l’événement <ph id="ph2">&lt;see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted(System.Net.PeerToPeer.ResolveCompletedEventArgs)">
          <source>Returns peer resolution data after the <ph id="ph1">&lt;see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted" /&gt;</ph> event is raised.</source>
          <target state="translated">Retourne les données de la résolution des homologues si l’événement <ph id="ph1">&lt;see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted" /&gt;</ph> est déclenché.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted(System.Net.PeerToPeer.ResolveCompletedEventArgs)">
          <source>This method is an asynchronous callback used to process peer name resolution data after peer resolution has completed.</source>
          <target state="translated">Cette méthode est un rappel asynchrone utilisé pour traiter les données de résolution de nom d’homologue après que la résolution d’homologue est terminée.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted(System.Net.PeerToPeer.ResolveCompletedEventArgs)">
          <source>Derived types can override this method to perform additional tasks when the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event is raised by the peer resolver object.</source>
          <target state="translated">Types dérivés peuvent substituer cette méthode pour effectuer les autres tâches lorsque la <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> événement est déclenché par l’objet de programme de résolution d’homologue.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged(System.Net.PeerToPeer.ResolveProgressChangedEventArgs)">
          <source><ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.ResolveProgressChangedEventArgs" /&gt;</ph> object that contains peer name resolution progress information returned by the <ph id="ph2">&lt;see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged" /&gt;</ph> event.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.ResolveProgressChangedEventArgs" /&gt;</ph> qui contient les informations de progression de la résolution de noms d’homologues retournées par l’événement <ph id="ph2">&lt;see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged(System.Net.PeerToPeer.ResolveProgressChangedEventArgs)">
          <source>Returns peer resolution progress data when the <ph id="ph1">&lt;see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged" /&gt;</ph> event is raised.</source>
          <target state="translated">Retourne les données de progression de la résolution des homologues lorsque l’événement <ph id="ph1">&lt;see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged" /&gt;</ph> est déclenché.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged(System.Net.PeerToPeer.ResolveProgressChangedEventArgs)">
          <source>This method is an asynchronous callback used to process peer resolution data after peer resolution progress has been requested.</source>
          <target state="translated">Cette méthode est un rappel asynchrone utilisé pour traiter les données de résolution d’homologue une fois que la progression de la résolution d’homologue a été demandée.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged(System.Net.PeerToPeer.ResolveProgressChangedEventArgs)">
          <source>Derived types can override this method to perform additional tasks when the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> event occurs.</source>
          <target state="translated">Types dérivés peuvent substituer cette méthode pour effectuer les autres tâches lorsque la <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> événement se produit.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged(System.Net.PeerToPeer.ResolveProgressChangedEventArgs)">
          <source>When overriding this method in a derived type, be sure to call the base type's <ph id="ph1">&lt;see cref="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged(System.Net.PeerToPeer.ResolveProgressChangedEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">Lorsque vous substituez cette méthode dans un type dérivé, veillez à appeler le type de base <ph id="ph1">&lt;see cref="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged(System.Net.PeerToPeer.ResolveProgressChangedEventArgs)" /&gt;</ph> méthode afin que les délégués inscrits reçoivent l’événement.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>Resolves a <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> object to a <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> using the PNRP protocol.</source>
          <target state="translated">Résout un objet <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> en un <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> à l'aide du protocole PNRP.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>This method associates peer names to clouds.</source>
          <target state="translated">Cette méthode associe des noms d’homologues vers des clouds.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>Calling the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> method is similar to calling the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method for each peer name record in the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameRecordCollection&gt;</ph>.</source>
          <target state="translated">Appel de la <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> méthode est similaire à l’appel le <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> méthode pour chaque enregistrement de nom d’homologue dans le <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameRecordCollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>Note that using the Resolve method on an individual peer name record does not invalidate resolving multiple peer names.</source>
          <target state="translated">Notez qu’à l’aide de la méthode Resolve sur un enregistrement de noms d’homologues individuels n’invalide pas la résolution de plusieurs noms d’homologues.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method.</source>
          <target state="translated">Pour chaque <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> (méthode), il existe un équivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>They are identical in the parameters they are passed, except that the ResolveAsync method includes a system token in its parameter list for asynchronous event handling.</source>
          <target state="translated">Ils sont identiques dans les paramètres passés, mais la méthode ResolveAsync inclut un jeton de système dans sa liste de paramètres pour la gestion des événements asynchrones.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parameter is not supplied, the method uses the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> shortcut to fill in cloud parameters.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> paramètre n’est pas fourni, la méthode utilise le <ph id="ph2">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> raccourci pour remplir les paramètres de nuage.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>If the <ph id="ph1">`maxRecords`</ph> parameter is missing, the default value of zero causes an <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception to be thrown.</source>
          <target state="translated">Si le <ph id="ph1">`maxRecords`</ph> paramètre est manquant, la valeur par défaut zéro provoque une <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> levée d’exception.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>This event will also be raised if the resolve operation completes in error or is canceled.</source>
          <target state="translated">Cet événement sera également être déclenché si l’opération de résolution se termine avec une erreur ou est annulée.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> to resolve.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> à résoudre.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>Resolves the specified <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> in all clouds known to the calling peer.</source>
          <target state="translated">Résout le <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> spécifié dans tous les nuages connus de l'homologue appelant.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /&gt;</ph> that contains all peer name records (represented as <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> objects) associated with the specified peer name.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /&gt;</ph> qui contient tous les enregistrements de nom de l'homologue (représentés comme objets <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> ) associés au nom d'homologue spécifié.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>For unsecured peer names, the same <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> can be registered by different users in the same <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph>, and associated with different endpoints.</source>
          <target state="translated">Pour les noms d'homologue non sécurisés, le même <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> peut être inscrit par des utilisateurs différents dans le même <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph>, et associés à des points de terminaison différents.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>This method associates a peer name to clouds.</source>
          <target state="translated">Cette méthode associe un nom d’homologue aux nuages.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>All clouds are queried for the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>.</source>
          <target state="translated">Tous les clouds sont interrogés pour la <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>If the peer name cannot be resolved or is <ph id="ph1">`null`</ph>, an <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> is thrown.</source>
          <target state="translated">Si le nom d’homologue ne peut pas être résolu ou n’est <ph id="ph1">`null`</ph>, un <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> est levée.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
          <target state="translated">Pour les noms d’homologue non sécurisés, le même nom peut être inscrit (et associé à différents points de terminaison) par des homologues différents dans le même cloud.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> method is similar to calling the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method for each peer name record in the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameRecordCollection&gt;</ph>.</source>
          <target state="translated">Appel de la <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> méthode est similaire à l’appel le <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> méthode pour chaque enregistrement de nom d’homologue dans le <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameRecordCollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>Note that using the Resolve method on an individual peer name record does not invalidate resolving multiple peer names.</source>
          <target state="translated">Notez qu’à l’aide de la méthode Resolve sur un enregistrement de noms d’homologues individuels n’invalide pas la résolution de plusieurs noms d’homologues.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method.</source>
          <target state="translated">Pour chaque <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> (méthode), il existe un équivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.</source>
          <target state="translated">Leurs listes de paramètres sont identiques, sauf que la méthode ResolveAsync inclut un jeton de système de gestion des événements asynchrones.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parameter is not supplied, the method uses the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> shortcut to fill in cloud parameters.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> paramètre n’est pas fourni, la méthode utilise le <ph id="ph2">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> raccourci pour remplir les paramètres de nuage.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> événement sera déclenché si l’opération de résolution se termine avec une erreur ou est annulée.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>The following code example illustrates how to resolve a <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> published in any <ph id="ph2">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant illustre comment résoudre un <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> publié dans un <ph id="ph2">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>The <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> parameter is set to <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
          <source>The peer name specified cannot be resolved.</source>
          <target state="translated">Le nom d'homologue spécifié ne peut pas être résolu.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> to resolve.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> à résoudre.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>The maximum number of <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> objects to obtain from all <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> objects for the supplied <bpt id="p1">&lt;c&gt;</bpt>peerName<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Nombre maximal d’objets <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> à obtenir de tous les objets <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> pour le <bpt id="p1">&lt;c&gt;</bpt>peerName<ept id="p1">&lt;/c&gt;</ept> fourni.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>Resolves the specified peer name in all clouds known to the calling peer, returning no more than the specified number of <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> objects.</source>
          <target state="translated">Résout le nom d'homologue spécifié dans tous les nuages connus de l'homologue appelant, sans retourner plus que le nombre spécifié d'objets <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /&gt;</ph> whose size is less than or equal to <ph id="ph2">&lt;paramref name="maxRecords" /&gt;</ph> entries.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /&gt;</ph> dont la taille est inférieure ou égale aux entrées <ph id="ph2">&lt;paramref name="maxRecords" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>This collection contains peer name records associated with the <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> that was resolved.</source>
          <target state="translated">Cette collection contient des enregistrements de nom d'homologue associés au <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> qui a été résolu.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>This method associates a peer name to clouds.</source>
          <target state="translated">Cette méthode associe un nom d’homologue aux nuages.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>All clouds are queried for the peer name.</source>
          <target state="translated">Tous les clouds sont interrogés pour le nom d’homologue.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>For unsecured peer names, the same peer name can be registered by different users in the same <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph>, and associated with different endpoints.</source>
          <target state="translated">Pour les noms d’homologue non sécurisés, le même nom d’homologue peut être inscrit par des utilisateurs différents dans le même <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph>et associés à différents points de terminaison.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> cannot be resolved (for example, the peer name is not published) an <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> is thrown.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> ne peut pas être résolu (par exemple, le nom d’homologue n’est pas publié) un <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> est levée.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method.</source>
          <target state="translated">Pour chaque <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> (méthode), il existe un équivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.</source>
          <target state="translated">Leurs listes de paramètres sont identiques, sauf que la méthode ResolveAsync inclut un jeton de système de gestion des événements asynchrones.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> événement sera déclenché si l’opération de résolution se termine avec une erreur ou est annulée.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> parameter is set to <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="maxRecords" /&gt;</ph> parameter is less than or equal to zero.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="maxRecords" /&gt;</ph> est inférieur ou égal à zéro.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
          <source>The supplied peer name cannot be resolved.</source>
          <target state="translated">Le nom d'homologue fourni ne peut pas être résolu.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> to resolve.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> à résoudre.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> in which to resolve the peer name.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> dans lequel résoudre le nom d'homologue.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>Resolves the specified <ph id="ph1">&lt;see cref="P:System.Net.PeerToPeer.PeerNameRecord.PeerName" /&gt;</ph> in the specified <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph>.</source>
          <target state="translated">Résout le <ph id="ph1">&lt;see cref="P:System.Net.PeerToPeer.PeerNameRecord.PeerName" /&gt;</ph> spécifié dans le <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph>spécifié.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source><ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /&gt;</ph> that contains all peer name records (represented as <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> objects) associated with the specified peer name.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /&gt;</ph> qui contient tous les enregistrements de nom d'homologue (représentés comme objets <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> ) associés au nom d'homologue spécifié.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>For unsecured peer names, the same <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> can be registered by different users in the same <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph>, and associated with different endpoints.</source>
          <target state="translated">Pour les noms d'homologue non sécurisés, le même <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> peut être inscrit par des utilisateurs différents dans le même <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph>, et associés à des points de terminaison différents.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> cannot be resolved (i.e., the peer name is not published) an <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> is thrown.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> ne peut pas être résolu (par exemple, le nom d’homologue n’est pas publié) un <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> est levée.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
          <target state="translated">Pour les noms d’homologue non sécurisés, le même nom peut être inscrit (et associé à différents points de terminaison) par des homologues différents dans le même cloud.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method.</source>
          <target state="translated">Pour chaque <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> (méthode), il existe un équivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.</source>
          <target state="translated">Leurs listes de paramètres sont identiques, sauf que la méthode ResolveAsync inclut un jeton de système de gestion des événements asynchrones.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parameter is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> uses the <ph id="ph4">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> shortcut to fill in the <ph id="ph5">&lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;</ph>.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> paramètre est <ph id="ph2">`null`</ph>, le <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> utilise le <ph id="ph4">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> raccourci pour renseigner le <ph id="ph5">&lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;</ph>, et <ph id="ph7">&lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> événement sera déclenché si l’opération de résolution se termine avec une erreur ou est annulée.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>The <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> parameter is set to <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
          <source>The supplied peer name cannot be resolved.</source>
          <target state="translated">Le nom d'homologue fourni ne peut pas être résolu.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> to resolve.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> à résoudre.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> in which to resolve the <bpt id="p1">&lt;c&gt;</bpt>peerName<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> dans lequel résoudre <bpt id="p1">&lt;c&gt;</bpt>peerName<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>The maximum number of peer name record objects to obtain from the specified cloud for the specified <bpt id="p1">&lt;c&gt;</bpt>peerName<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Nombre maximal d’objets d’enregistrement de nom d’homologue à obtenir du cloud indiqué pour le <bpt id="p1">&lt;c&gt;</bpt>peerName<ept id="p1">&lt;/c&gt;</ept> spécifié.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>Resolves the specified <ph id="ph1">&lt;see cref="P:System.Net.PeerToPeer.PeerNameRecord.PeerName" /&gt;</ph> in the specified <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph>, returning no more than the specified number of <ph id="ph3">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> objects.</source>
          <target state="translated">Résout le <ph id="ph1">&lt;see cref="P:System.Net.PeerToPeer.PeerNameRecord.PeerName" /&gt;</ph> spécifié dans le <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph>spécifié, sans retourner plus que le nombre spécifié d'objets <ph id="ph3">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /&gt;</ph> whose size is less than or equal to <ph id="ph2">&lt;paramref name="maxRecords" /&gt;</ph> entries.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /&gt;</ph> dont la taille est inférieure ou égale aux entrées <ph id="ph2">&lt;paramref name="maxRecords" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>This collection contains peer name records associated with the <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> that was resolved.</source>
          <target state="translated">Cette collection contient des enregistrements de nom d'homologue associés au <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> qui a été résolu.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
          <target state="translated">Pour les noms d’homologue non sécurisés, le même nom peut être inscrit (et associé à différents points de terminaison) par des homologues différents dans le même cloud.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>If the peer name cannot be resolved, an <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> is thrown.</source>
          <target state="translated">Si le nom d’homologue ne peut pas être résolu, une <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> est levée.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method.</source>
          <target state="translated">Pour chaque <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> (méthode), il existe un équivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.</source>
          <target state="translated">Leurs listes de paramètres sont identiques, sauf que la méthode ResolveAsync inclut un jeton de système de gestion des événements asynchrones.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parameter is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> uses the <ph id="ph4">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> shortcut to fill in the <ph id="ph5">&lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;</ph>.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> paramètre est <ph id="ph2">`null`</ph>, le <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> utilise le <ph id="ph4">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> raccourci pour renseigner le <ph id="ph5">&lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;</ph>, et <ph id="ph7">&lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> événement sera déclenché si l’opération de résolution se termine avec une erreur ou est annulée.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> parameter is set to <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="maxRecords" /&gt;</ph> parameter is less than or equal to zero.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="maxRecords" /&gt;</ph> est inférieur ou égal à zéro.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
          <source>The supplied peer name cannot be resolved.</source>
          <target state="translated">Le nom d'homologue fourni ne peut pas être résolu.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>These methods begin an asynchronous resolution operation for the specified <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> in all clouds known to the calling peer.</source>
          <target state="translated">Ces méthodes commencent une opération de résolution asynchrone pour le <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> spécifié dans tous les nuages connus de l'homologue appelant.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method, which is used when asynchronous processing is required.</source>
          <target state="translated">Pour chaque <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> (méthode), il existe un équivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> méthode, qui est utilisée lorsque le traitement asynchrone est requis.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>They are identical in the parameters they are passed, except that ResolveAsync includes a system token in its parameter list for event handling.</source>
          <target state="translated">Ils sont identiques dans les paramètres passés, mais ResolveAsync inclut un jeton de système dans sa liste de paramètres pour la gestion des événements.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.PeerToPeer.PeerNameResolver">
          <source>If a parameter mismatch occurs between the Resolve method and the ResolveAsync method, and the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parameter is not supplied, the method uses the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> shortcut to fill in cloud parameters.</source>
          <target state="translated">Si une incompatibilité de paramètres se produit entre la méthode Resolve et la méthode ResolveAsync et le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> paramètre n’est pas fourni, la méthode utilise le <ph id="ph2">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> raccourci pour remplir les paramètres de nuage.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> to resolve.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> à résoudre.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>A user-defined object that contains state information about the peer name resolution operation.</source>
          <target state="translated">Objet défini par l'utilisateur qui contient des informations d’état sur l'opération de résolution de nom de pair.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>Begins an asynchronous peer name resolution operation for the specified <ph id="ph1">&lt;see cref="P:System.Net.PeerToPeer.PeerNameRecord.PeerName" /&gt;</ph> in all clouds known to the calling peer.</source>
          <target state="translated">Commence une opération de résolution de nom d’homologue asynchrone pour le <ph id="ph1">&lt;see cref="P:System.Net.PeerToPeer.PeerNameRecord.PeerName" /&gt;</ph> spécifié dans tous les clouds connus de l’homologue appelant.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>This method asynchronously associates a peer name to clouds.</source>
          <target state="translated">Cette méthode associe un nom d’homologue aux nuages de façon asynchrone.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>All clouds are queried for the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>.</source>
          <target state="translated">Tous les clouds sont interrogés pour la <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>It raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt;</ph> method.</source>
          <target state="translated">Il déclenche le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> événement, qui rappelle la <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>Or, it raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt;</ph> method.</source>
          <target state="translated">Ou, elle déclenche le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> événement, qui rappelle la <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>If the peer name cannot be resolved, an <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> is thrown.</source>
          <target state="translated">Si le nom d’homologue ne peut pas être résolu, une <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> est levée.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
          <target state="translated">Pour les noms d’homologue non sécurisés, le même nom peut être inscrit (et associé à différents points de terminaison) par des homologues différents dans le même cloud.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> method is similar to calling the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method for each peer name record in the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameRecordCollection&gt;</ph>.</source>
          <target state="translated">Appel de la <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> méthode est similaire à l’appel le <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> méthode pour chaque enregistrement de nom d’homologue dans le <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameRecordCollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>Note that using the Resolve method on an individual peer name record does not invalidate resolving multiple peer names.</source>
          <target state="translated">Notez qu’à l’aide de la méthode Resolve sur un enregistrement de noms d’homologues individuels n’invalide pas la résolution de plusieurs noms d’homologues.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method.</source>
          <target state="translated">Pour chaque <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> (méthode), il existe un équivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.</source>
          <target state="translated">Leurs listes de paramètres sont identiques, sauf que la méthode ResolveAsync inclut un jeton de système de gestion des événements asynchrones et la méthode Resolve est destinée à un traitement synchrone.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>All asynchronous references to the resolver object are coordinated with a unique identifier token.</source>
          <target state="translated">Toutes les références asynchrones à l’objet programme de résolution sont coordonnées avec un jeton d’identificateur unique.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>This <ph id="ph1">`userState`</ph> token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.</source>
          <target state="translated">Cela <ph id="ph1">`userState`</ph> jeton ou identificateur de message permet à un système d’exploitation de remettre un message à un seul processus de réception une fois que le message a été placé sur la file d’attente.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> événement sera déclenché si l’opération de résolution se termine avec une erreur ou est annulée.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
          <source>One or both of the <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> and <ph id="ph2">&lt;paramref name="userState" /&gt;</ph> parameters are set to <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Au moins l’un des deux paramètres <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> et <ph id="ph2">&lt;paramref name="userState" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> to resolve.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> à résoudre.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>The maximum number of records to obtain for the Peer Name.</source>
          <target state="translated">Le nombre maximal d’enregistrements à obtenir pour le nom d’homologue.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>A user-defined object that contains information about the resolve operation.</source>
          <target state="translated">Objet défini par l'utilisateur qui comporte des informations sur l'opération de résolution.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>Begins an asynchronous peer name resolution operation for the specified <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> in all clouds known to the calling peer, returning no more than <ph id="ph2">&lt;paramref name="maxRecords" /&gt;</ph> entries for the peer name.</source>
          <target state="translated">Commence une opération de résolution de nom d’homologue asynchrone pour le <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> spécifié dans tous les clouds connus de l’homologue appelant, en renvoyant au maximum <ph id="ph2">&lt;paramref name="maxRecords" /&gt;</ph> entrées pour le nom d’homologue.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>This method asynchronously associates a peer name to clouds.</source>
          <target state="translated">Cette méthode associe un nom d’homologue aux nuages de façon asynchrone.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>All clouds are queried for the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>.</source>
          <target state="translated">Tous les clouds sont interrogés pour la <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
          <target state="translated">Pour les noms d’homologue non sécurisés, le même nom peut être inscrit (et associé à différents points de terminaison) par des homologues différents dans le même cloud.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>If the peer name cannot be resolved or is <ph id="ph1">`null`</ph>, an <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> is thrown.</source>
          <target state="translated">Si le nom d’homologue ne peut pas être résolu ou n’est <ph id="ph1">`null`</ph>, un <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> est levée.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>This method raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt;</ph> method.</source>
          <target state="translated">Cette méthode déclenche la <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> événement, qui rappelle la <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>Or, it raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt;</ph> method.</source>
          <target state="translated">Ou, elle déclenche le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> événement, qui rappelle la <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method.</source>
          <target state="translated">Pour chaque <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> (méthode), il existe un équivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.</source>
          <target state="translated">Leurs listes de paramètres sont identiques, sauf que la méthode ResolveAsync inclut un jeton de système de gestion des événements asynchrones et la méthode Resolve est destinée à un traitement synchrone.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>All asynchronous references to the resolver object are coordinated with a unique identifier token <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Toutes les références asynchrones à l’objet programme de résolution sont coordonnées avec un jeton d’identificateur unique <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>This <ph id="ph1">`userState`</ph> token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.</source>
          <target state="translated">Cela <ph id="ph1">`userState`</ph> jeton ou identificateur de message permet à un système d’exploitation de remettre un message à un seul processus de réception une fois que le message a été placé sur la file d’attente.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> événement sera déclenché si l’opération de résolution se termine avec une erreur ou est annulée.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>One or both of the <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> and <ph id="ph2">&lt;paramref name="userState" /&gt;</ph> parameters are set to <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Au moins l’un des deux paramètres <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> et <ph id="ph2">&lt;paramref name="userState" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="maxRecords" /&gt;</ph> parameter is less than or equal to zero.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="maxRecords" /&gt;</ph> est inférieur ou égal à zéro.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> to resolve.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> à résoudre.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> in which to resolve the <bpt id="p1">&lt;c&gt;</bpt>peerName<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> dans lequel résoudre <bpt id="p1">&lt;c&gt;</bpt>peerName<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>A user-defined <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains information about the peer name resolution operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> défini par l'utilisateur qui contient des informations sur l'opération de résolution du nom de pair.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>Begins an asynchronous peer name resolution operation for the specified <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> in the specified <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph>.</source>
          <target state="translated">Commence une opération de résolution de nom d’homologue asynchrone pour le <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> spécifié dans le <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> spécifié.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>This method raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt;</ph> method.</source>
          <target state="translated">Cette méthode déclenche la <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> événement, qui rappelle la <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>Or, it raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt;</ph> method.</source>
          <target state="translated">Ou, elle déclenche le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> événement, qui rappelle la <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
          <target state="translated">Pour les noms d’homologue non sécurisés, le même nom peut être inscrit (et associé à différents points de terminaison) par des homologues différents dans le même cloud.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parameter is <ph id="ph2">`null`</ph>, the name is resolved using the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> shortcut, which initializes default values for the <ph id="ph4">&lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;</ph> properties.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> paramètre est <ph id="ph2">`null`</ph>, le nom est résolu à l’aide de la <ph id="ph3">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> raccourci qui initialise les valeurs par défaut pour le <ph id="ph4">&lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;</ph>, et <ph id="ph6">&lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;</ph> propriétés.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method.</source>
          <target state="translated">Pour chaque <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> (méthode), il existe un équivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.</source>
          <target state="translated">Leurs listes de paramètres sont identiques, sauf que la méthode ResolveAsync inclut un jeton de système de gestion des événements asynchrones et la méthode Resolve est destinée à un traitement synchrone.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>All asynchronous references to the resolver object are coordinated with a unique identifier token.</source>
          <target state="translated">Toutes les références asynchrones à l’objet programme de résolution sont coordonnées avec un jeton d’identificateur unique.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>This <ph id="ph1">`userState`</ph> token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.</source>
          <target state="translated">Cela <ph id="ph1">`userState`</ph> jeton ou identificateur de message permet à un système d’exploitation de remettre un message à un seul processus de réception une fois que le message a été placé sur la file d’attente.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> événement sera déclenché si l’opération de résolution se termine avec une erreur ou est annulée.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
          <source>One or both of the <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> and <ph id="ph2">&lt;paramref name="userState" /&gt;</ph> parameters are set to <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Au moins l’un des deux paramètres <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> et <ph id="ph2">&lt;paramref name="userState" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>peerName<ept id="p1">&lt;/c&gt;</ept> to resolve.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>peerName<ept id="p1">&lt;/c&gt;</ept> à résoudre.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>The <bpt id="p1">&lt;c&gt;</bpt>cloud<ept id="p1">&lt;/c&gt;</ept> in which to resolve <bpt id="p2">&lt;c&gt;</bpt>peerName<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>cloud<ept id="p1">&lt;/c&gt;</ept> dans lequel résoudre <bpt id="p2">&lt;c&gt;</bpt>peerName<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>The maximum number of records to obtain from <bpt id="p1">&lt;c&gt;</bpt>cloud<ept id="p1">&lt;/c&gt;</ept> for <bpt id="p2">&lt;c&gt;</bpt>peerName<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">Nombre maximal d’enregistrements à obtenir de <bpt id="p1">&lt;c&gt;</bpt>cloud<ept id="p1">&lt;/c&gt;</ept> pour <bpt id="p2">&lt;c&gt;</bpt>peerName<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>A user-defined object that contains information about the peer name resolution operation.</source>
          <target state="translated">Objet défini par l'utilisateur qui contient des informations sur l'opération de résolution de nom d’homologue.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>Begins an asynchronous peer name resolution operation for the specified <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> in the specified <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph>.</source>
          <target state="translated">Commence une opération de résolution de nom d’homologue asynchrone pour le <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> spécifié dans le <ph id="ph2">&lt;see cref="T:System.Net.PeerToPeer.Cloud" /&gt;</ph> spécifié.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>The resolution operation will resolve no more than <ph id="ph1">&lt;paramref name="maxRecords" /&gt;</ph> entries for the specified peer name.</source>
          <target state="translated">L’opération de résolution ne résout pas plus de <ph id="ph1">&lt;paramref name="maxRecords" /&gt;</ph> entrées pour le nom d’homologue spécifié.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
          <target state="translated">Pour les noms d’homologue non sécurisés, le même nom peut être inscrit (et associé à différents points de terminaison) par des homologues différents dans le même cloud.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>This method raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt;</ph> method.</source>
          <target state="translated">Cette méthode déclenche la <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> événement, qui rappelle la <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>Or, it raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt;</ph> method.</source>
          <target state="translated">Ou, elle déclenche le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> événement, qui rappelle la <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parameter is <ph id="ph2">`null`</ph>, the name is resolved using the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> shortcut, which initializes default values for the <ph id="ph4">&lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;</ph> properties.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> paramètre est <ph id="ph2">`null`</ph>, le nom est résolu à l’aide de la <ph id="ph3">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> raccourci qui initialise les valeurs par défaut pour le <ph id="ph4">&lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;</ph>, et <ph id="ph6">&lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;</ph> propriétés.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method.</source>
          <target state="translated">Pour chaque <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> (méthode), il existe un équivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.</source>
          <target state="translated">Leurs listes de paramètres sont identiques, sauf que la méthode ResolveAsync inclut un jeton de système de gestion des événements asynchrones et la méthode Resolve est destinée à un traitement synchrone.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>All asynchronous references to the peer resolver object are coordinated with a unique identifier token <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Toutes les références asynchrones à l’objet de programme de résolution d’homologue sont coordonnées avec un jeton d’identificateur unique <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>This <ph id="ph1">`userState`</ph> token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.</source>
          <target state="translated">Cela <ph id="ph1">`userState`</ph> jeton ou identificateur de message permet à un système d’exploitation de remettre un message à un seul processus de réception une fois que le message a été placé sur la file d’attente.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> événement sera déclenché si l’opération de résolution se termine avec une erreur ou est annulée.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>One or both of the <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> and <ph id="ph2">&lt;paramref name="userState" /&gt;</ph> parameters are set to <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Au moins l’un des deux paramètres <ph id="ph1">&lt;paramref name="peerName" /&gt;</ph> et <ph id="ph2">&lt;paramref name="userState" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>One or more supplied parameters are invalid.</source>
          <target state="translated">Un ou plusieurs paramètres fournis ne sont pas valides.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>Successful completion of this operation requires at least one event handler.</source>
          <target state="translated">La réussite de cette opération nécessite au moins un gestionnaire d’événements.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="maxRecords" /&gt;</ph> parameter is less than or equal to zero.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="maxRecords" /&gt;</ph> est inférieur ou égal à zéro.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
          <source>The object provided to the <ph id="ph1">&lt;see cref="Overload:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync" /&gt;</ph> method instance which started the resolve operation.</source>
          <target state="translated">Objet fourni à l’instance de méthode <ph id="ph1">&lt;see cref="Overload:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync" /&gt;</ph> qui a lancé l’opération de résolution.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
          <source>Cancels the specified asynchronous peer name resolution request.</source>
          <target state="translated">Annule la demande de résolution de nom d’homologue asynchrone spécifiée.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
          <source>Calling this method guarantees the system will not attempt to obtain additional records for the specified <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>.</source>
          <target state="translated">Appel de cette méthode garantit que le système ne tente pas d’obtenir des enregistrements supplémentaires pour le texte spécifié <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
          <source>If this method is called when an asynchronous peer name resolution operation is not outstanding, it acts as a "no operation" (NO OP).</source>
          <target state="translated">Si cette méthode est appelée lorsqu’une opération de résolution de nom d’homologue asynchrone n’est pas en attente, il agit comme une « aucune opération » (traduit).</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
          <source>The <ph id="ph1">`userState`</ph> object must be provided since it is used to track a specific asynchronous call when multiple calls are in progress.</source>
          <target state="translated">Le <ph id="ph1">`userState`</ph> objet doit être fourni car il est utilisé pour effectuer le suivi d’un appel asynchrone spécifique lorsque plusieurs appels sont en cours d’exécution.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
          <source>This caller-supplied object is unique for each peer name resolution request.</source>
          <target state="translated">Cet objet fourni par l’appelant est unique pour chaque demande de résolution d’homologue.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
          <source>This method will return immediately, but the operation may or may not immediately cancel.</source>
          <target state="translated">Cette méthode est retournée immédiatement, mais l’opération peut ou ne peut pas annuler immédiatement.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
          <source>The event arguments returned by the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event contains a field which can be polled by clients to determine whether cancellation occurred.</source>
          <target state="translated">Les arguments d’événement retournés par la <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> événement contient un champ qui peut être interrogé par les clients pour déterminer si l’annulation se produit.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
          <source>Calling this method ensures the ResolveCompleted event will be signaled as soon as possible with the event argument <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Appel de cette méthode garantit que l’événement ResolveCompleted sera signalé dès que possible avec l’argument d’événement <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> la valeur <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="userState" /&gt;</ph> parameters cannot be <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Les paramètres <ph id="ph1">&lt;paramref name="userState" /&gt;</ph> ne peuvent pas avoir la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted">
          <source>The <ph id="ph1">&lt;see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted" /&gt;</ph> event is signaled when a peer name resolution request for a specific <ph id="ph2">&lt;see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /&gt;</ph> has completed.</source>
          <target state="translated">L’événement <ph id="ph1">&lt;see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted" /&gt;</ph> est signalé lorsqu’une requête de résolution de nom d’homologue est terminée pour un <ph id="ph2">&lt;see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /&gt;</ph> spécifique.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> event will be raised once for each endpoint found, and this event will be raised only once when all endpoints have been found.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> événement sera déclenché une fois pour chaque point de terminaison trouvé, et cet événement est déclenché une seule fois lorsque tous les points de terminaison ont été trouvés.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted">
          <source>This event will also be raised if the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> operation completes in error or is canceled.</source>
          <target state="translated">Cet événement sera également déclenché si le <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> opération se termine avec une erreur ou est annulée.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="E:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged">
          <source>This event is signaled whenever a <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> object is found in response to a <ph id="ph2">&lt;see cref="Overload:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync" /&gt;</ph> operation for a specific <ph id="ph3">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph>.</source>
          <target state="translated">Cet événement est signalé chaque fois qu’un objet <ph id="ph1">&lt;see cref="T:System.Net.PeerToPeer.PeerNameRecord" /&gt;</ph> est trouvé dans la réponse à une opération <ph id="ph2">&lt;see cref="Overload:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync" /&gt;</ph> pour un <ph id="ph3">&lt;see cref="T:System.Net.PeerToPeer.PeerName" /&gt;</ph> spécifique.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged">
          <source>If multiple <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> objects exist in the cloud(s) being queried, this event is signaled once for each <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameRecord&gt;</ph> found.</source>
          <target state="translated">Si plusieurs <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> objets existent dans les ou les nuages interrogés, cet événement est signalé une fois pour chaque <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameRecord&gt;</ph> trouvé.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>