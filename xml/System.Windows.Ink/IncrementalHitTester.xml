<Type Name="IncrementalHitTester" FullName="System.Windows.Ink.IncrementalHitTester">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0d026c51094461f98334dd9173a646949b49fb39" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36509720" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class IncrementalHitTester" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit IncrementalHitTester extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Ink.IncrementalHitTester" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class IncrementalHitTester" />
  <TypeSignature Language="C++ CLI" Value="public ref class IncrementalHitTester abstract" />
  <TypeSignature Language="F#" Value="type IncrementalHitTester = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Exécute dynamiquement le test d'atteinte sur un <see cref="T:System.Windows.Ink.Stroke" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Ink.IncrementalHitTester> détermine dynamiquement si l’utilisateur « teste » un <xref:System.Windows.Ink.Stroke>. Cette classe vous permet de fournir des commentaires immédiats à l’utilisateur dans des situations telles que la sélection et l’effacement d’encre.  
  
 Il existe deux classes qui héritent de <xref:System.Windows.Ink.IncrementalHitTester>:  
  
-   Le <xref:System.Windows.Ink.IncrementalLassoHitTester> teste traits en déterminant si un tracé entoure.  
  
-   Le <xref:System.Windows.Ink.IncrementalStrokeHitTester> teste traits en déterminant l’emplacement où un chemin d’accès de gomme croise.  
  
 Le tableau suivant répertorie les emplacements pour apprendre à gérer les services d’encre numérique sur un contrôle personnalisé.  
  
|Pour ce faire...|Consultez l’article|  
|-----------------|----------------------|  
|Créer un contrôle qui collecte d’encre numérique|[Création d'un contrôle d'entrée d'encre](~/docs/framework/wpf/advanced/creating-an-ink-input-control.md)|  
|Créer un contrôle qui permet à l’utilisateur de sélectionner l’encre|[Comment : sélectionner une entrée manuscrite à partir d’un contrôle personnalisé](~/docs/framework/wpf/advanced/how-to-select-ink-from-a-custom-control.md)|  
|Créer un contrôle qui permet à l’utilisateur au point-effacer l’entrée manuscrite|[Comment : effacer l’encre sur un contrôle personnalisé](~/docs/framework/wpf/advanced/how-to-erase-ink-on-a-custom-control.md)|  
  
<a name="xamlTextUsage_IncrementalHitTester"></a>   
## <a name="xaml-text-usage"></a>Utilisation de texte XAML  
 Cette classe n’est généralement pas utilisée en XAML.  
  
   
  
## Examples  
 L’exemple suivant montre comment ajouter des points à le <xref:System.Windows.Ink.IncrementalHitTester> lorsque l’utilisateur entre des données avec le stylet. L’exemple inclut un <xref:System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit> Gestionnaire d’événements qui efface la partie de la <xref:System.Windows.Ink.Stroke> qui entre en intersection avec l’utilisateur. Pour créer un contrôle qui permet à un utilisateur effacer l’encre, consultez [procédure : effacer l’encre sur un contrôle personnalisé](~/docs/framework/wpf/advanced/how-to-erase-ink-on-a-custom-control.md).  
  
 [!code-csharp[InkEraser#6](~/samples/snippets/csharp/VS_Snippets_Wpf/InkEraser/CSharp/InkEraser.cs#6)]
 [!code-vb[InkEraser#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InkEraser/VisualBasic/InkEraser.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddPoint">
      <MemberSignature Language="C#" Value="public void AddPoint (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPoint(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.IncrementalHitTester.AddPoint(System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddPoint(System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="member this.AddPoint : System.Windows.Point -&gt; unit" Usage="incrementalHitTester.AddPoint point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">
          <see cref="T:System.Windows.Point" /> à ajouter à <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</param>
        <summary>Ajoute un objet <see cref="T:System.Windows.Point" /> à <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment ajouter des points à le <xref:System.Windows.Ink.IncrementalHitTester> lorsque l’utilisateur entre des données avec la souris. L’exemple inclut un <xref:System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit> Gestionnaire d’événements qui efface la partie de la <xref:System.Windows.Ink.Stroke> qui entre en intersection avec l’utilisateur. Pour créer un contrôle qui permet à un utilisateur effacer l’encre, consultez [procédure : effacer l’encre sur un contrôle personnalisé](~/docs/framework/wpf/advanced/how-to-erase-ink-on-a-custom-control.md).  
  
 [!code-csharp[InkEraser#11](~/samples/snippets/csharp/VS_Snippets_Wpf/InkEraser/CSharp/InkEraser.cs#11)]
 [!code-vb[InkEraser#11](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InkEraser/VisualBasic/InkEraser.vb#11)]  
[!code-csharp[InkEraser#2](~/samples/snippets/csharp/VS_Snippets_Wpf/InkEraser/CSharp/InkEraser.cs#2)]
[!code-vb[InkEraser#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InkEraser/VisualBasic/InkEraser.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddPoints">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ajoute des points à <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddPoints">
      <MemberSignature Language="C#" Value="public void AddPoints (System.Collections.Generic.IEnumerable&lt;System.Windows.Point&gt; points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPoints(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Windows.Point&gt; points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.IncrementalHitTester.AddPoints(System.Collections.Generic.IEnumerable{System.Windows.Point})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddPoints (points As IEnumerable(Of Point))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddPoints(System::Collections::Generic::IEnumerable&lt;System::Windows::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.AddPoints : seq&lt;System.Windows.Point&gt; -&gt; unit" Usage="incrementalHitTester.AddPoints points" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Collections.Generic.IEnumerable&lt;System.Windows.Point&gt;" />
      </Parameters>
      <Docs>
        <param name="points">Tableau de type <see cref="T:System.Windows.Point" /> à ajouter au <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</param>
        <summary>Ajoute des points à <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment ajouter des points à le <xref:System.Windows.Ink.IncrementalHitTester> lorsque l’utilisateur entre des données avec le stylet. L’exemple inclut un <xref:System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit> Gestionnaire d’événements qui efface la partie de la <xref:System.Windows.Ink.Stroke> qui entre en intersection avec l’utilisateur. Pour créer un contrôle qui permet à un utilisateur effacer l’encre, consultez [procédure : effacer l’encre sur un contrôle personnalisé](~/docs/framework/wpf/advanced/how-to-erase-ink-on-a-custom-control.md).  
  
 [!code-csharp[InkEraser#6](~/samples/snippets/csharp/VS_Snippets_Wpf/InkEraser/CSharp/InkEraser.cs#6)]
 [!code-vb[InkEraser#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InkEraser/VisualBasic/InkEraser.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPoints">
      <MemberSignature Language="C#" Value="public void AddPoints (System.Windows.Input.StylusPointCollection stylusPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPoints(class System.Windows.Input.StylusPointCollection stylusPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.IncrementalHitTester.AddPoints(System.Windows.Input.StylusPointCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddPoints (stylusPoints As StylusPointCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddPoints(System::Windows::Input::StylusPointCollection ^ stylusPoints);" />
      <MemberSignature Language="F#" Value="member this.AddPoints : System.Windows.Input.StylusPointCollection -&gt; unit" Usage="incrementalHitTester.AddPoints stylusPoints" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylusPoints" Type="System.Windows.Input.StylusPointCollection" />
      </Parameters>
      <Docs>
        <param name="stylusPoints">Collection d'objets <see cref="T:System.Windows.Input.StylusPoint" /> à ajouter au <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</param>
        <summary>Ajoute les objets <see cref="T:System.Windows.Input.StylusPoint" /> spécifiés au <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment ajouter des points à le <xref:System.Windows.Ink.IncrementalStrokeHitTester> lorsque l’utilisateur entre des données avec le stylet. L’exemple inclut un <xref:System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit> Gestionnaire d’événements qui efface la partie de la <xref:System.Windows.Ink.Stroke> qui entre en intersection avec l’utilisateur. Pour créer un contrôle qui permet à un utilisateur effacer l’encre, consultez [procédure : effacer l’encre sur un contrôle personnalisé](~/docs/framework/wpf/advanced/how-to-erase-ink-on-a-custom-control.md).  
  
 [!code-csharp[InkEraser#6](~/samples/snippets/csharp/VS_Snippets_Wpf/InkEraser/CSharp/InkEraser.cs#6)]
 [!code-vb[InkEraser#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InkEraser/VisualBasic/InkEraser.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPointsCore">
      <MemberSignature Language="C#" Value="protected abstract void AddPointsCore (System.Collections.Generic.IEnumerable&lt;System.Windows.Point&gt; points);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddPointsCore(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Windows.Point&gt; points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.IncrementalHitTester.AddPointsCore(System.Collections.Generic.IEnumerable{System.Windows.Point})" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub AddPointsCore (points As IEnumerable(Of Point))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void AddPointsCore(System::Collections::Generic::IEnumerable&lt;System::Windows::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="abstract member AddPointsCore : seq&lt;System.Windows.Point&gt; -&gt; unit" Usage="incrementalHitTester.AddPointsCore points" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Collections.Generic.IEnumerable&lt;System.Windows.Point&gt;" />
      </Parameters>
      <Docs>
        <param name="points">Points à ajouter</param>
        <summary>Ajoute des points à <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndHitTesting">
      <MemberSignature Language="C#" Value="public void EndHitTesting ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndHitTesting() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.IncrementalHitTester.EndHitTesting" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndHitTesting ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndHitTesting();" />
      <MemberSignature Language="F#" Value="member this.EndHitTesting : unit -&gt; unit" Usage="incrementalHitTester.EndHitTesting " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère les ressources utilisées par <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appeler le <xref:System.Windows.Ink.IncrementalHitTester.EndHitTesting%2A> méthode lorsque le <xref:System.Windows.Ink.IncrementalHitTester> terminé le test de positionnement.  
  
   
  
## Examples  
 L’exemple suivant montre comment appeler <xref:System.Windows.Ink.IncrementalHitTester.EndHitTesting%2A> après avoir utilisé un <xref:System.Windows.Ink.IncrementalHitTester>. Cet exemple suppose qu’il existe un <xref:System.Windows.Ink.IncrementalHitTester> appelée `eraseTester`.  
  
 [!code-csharp[InkEraser#10](~/samples/snippets/csharp/VS_Snippets_Wpf/InkEraser/CSharp/InkEraser.cs#10)]
 [!code-vb[InkEraser#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InkEraser/VisualBasic/InkEraser.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.IncrementalHitTester.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool" Usage="System.Windows.Ink.IncrementalHitTester.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient si le <see cref="T:System.Windows.Ink.IncrementalHitTester" /> effectue un test d'atteinte.</summary>
        <value>
          <see langword="true" /> si le <see cref="T:System.Windows.Ink.IncrementalHitTester" /> effectue un test d'atteinte ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Ink.IncrementalHitTester.IsValid%2A> retourne `true` jusqu'à ce que <xref:System.Windows.Ink.IncrementalHitTester.EndHitTesting%2A> est appelée. Il retourne `false`.  
  
   
  
## Examples  
 L’exemple suivant montre comment vérifier si le <xref:System.Windows.Ink.IncrementalHitTester> n’est valide avant d’ajouter des points à ce dernier. Cet exemple suppose qu’il existe un <xref:System.Windows.Ink.IncrementalHitTester> appelée `eraseTester`.  
  
 [!code-csharp[InkEraser#9](~/samples/snippets/csharp/VS_Snippets_Wpf/InkEraser/CSharp/InkEraser.cs#9)]
 [!code-vb[InkEraser#9](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InkEraser/VisualBasic/InkEraser.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>