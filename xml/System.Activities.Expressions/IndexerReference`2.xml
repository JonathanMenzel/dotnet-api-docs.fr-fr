<Type Name="IndexerReference&lt;TOperand,TItem&gt;" FullName="System.Activities.Expressions.IndexerReference&lt;TOperand,TItem&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="265359c2faa84b56001f0d58f38ad0c9dbb44001" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48746711" /></Metadata><TypeSignature Language="C#" Value="public sealed class IndexerReference&lt;TOperand,TItem&gt; : System.Activities.CodeActivity&lt;System.Activities.Location&lt;TItem&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit IndexerReference`2&lt;TOperand, TItem&gt; extends System.Activities.CodeActivity`1&lt;class System.Activities.Location`1&lt;!TItem&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Expressions.IndexerReference`2" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IndexerReference(Of TOperand, TItem)&#xA;Inherits CodeActivity(Of Location(Of TItem))" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TOperand, typename TItem&gt;&#xA;public ref class IndexerReference sealed : System::Activities::CodeActivity&lt;System::Activities::Location&lt;TItem&gt; ^&gt;" />
  <TypeSignature Language="F#" Value="type IndexerReference&lt;'Operand, 'Item&gt; = class&#xA;    inherit CodeActivity&lt;Location&lt;'Item&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TOperand" />
    <TypeParameter Name="TItem" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Activities.CodeActivity&lt;System.Activities.Location&lt;TItem&gt;&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TResult">System.Activities.Location&lt;TItem&gt;</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.ContentProperty("Indices")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TOperand"><span data-ttu-id="1a666-101">Type avec l'indexeur.</span><span class="sxs-lookup"><span data-stu-id="1a666-101">The type with the indexer.</span></span></typeparam>
    <typeparam name="TItem"><span data-ttu-id="1a666-102">Type du tableau d'indexeur.</span><span class="sxs-lookup"><span data-stu-id="1a666-102">The type of the indexer array.</span></span></typeparam>
    <summary><span data-ttu-id="1a666-103">Représente un élément référencé par un indexeur d'objet qui peut être utilisé comme l-value dans une expression.</span><span class="sxs-lookup"><span data-stu-id="1a666-103">Represents an element referenced by an object indexer that can be used as an l-value in an expression.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1a666-104">L'exemple de code suivant utilise <xref:System.Activities.Expressions.IndexerReference%602> dans une activité `Assign` pour affecter une valeur entière à l'élément d'objet à l'index [1,2] et imprime la valeur de l'élément sur la console.</span><span class="sxs-lookup"><span data-stu-id="1a666-104">The following code example uses <xref:System.Activities.Expressions.IndexerReference%602> in an `Assign` activity to assign an integer value to the object item at index [1,2] and prints the item value to the console.</span></span> <span data-ttu-id="1a666-105">L'activité `Assign` est équivalente à l'instruction suivante lors de l'utilisation d'un objet qui implémente un indexeur.</span><span class="sxs-lookup"><span data-stu-id="1a666-105">The `Assign` activity is equivalent to the following statement when using an object that implements an indexer.</span></span> <span data-ttu-id="1a666-106">`myObj[1,2] = 4;` .</span><span class="sxs-lookup"><span data-stu-id="1a666-106">`myObj[1,2] = 4;` .</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a666-107">Au lieu d'instancier directement l'activité d'expression l-value <xref:System.Activities.Expressions.IndexerReference%602>, il est fortement recommandé d'appeler <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A>, qui fournit un niveau supérieur d'abstraction et vous permet d'implémenter votre flux de travail plus intuitivement.</span><span class="sxs-lookup"><span data-stu-id="1a666-107">Instead of instantiating the <xref:System.Activities.Expressions.IndexerReference%602> l-value expression activity directly, it is strongly recommended that you call <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A>, which provides a higher level of abstraction and enables you to implement your workflow more intuitively.</span></span>  
  
```csharp  
  
// Define a class with a multi-dimensional indexer.  
public class ObjectWithIndexer  
{  
    private int[,] array = new int[10,10];  
    public int this[int i, int j]  
    {  
        get { return array[i,j]; }  
        set { array[i,j] = value; }  
    }  
}  
  
public static void IndexerReferenceSample()  
{  
    // Create a variable of type ObjectWithIndexer to store the object item.  
    var oivar = new Variable<ObjectWithIndexer>("oivar", new ObjectWithIndexer());  
  
    Activity myActivity = new Sequence  
    {  
        Variables = { oivar },  
        Activities =   
        {                      
            // Create an Assign activity with a reference for the object at index [1,2].  
            new Assign<int>  
            {  
                To = new IndexerReference<ObjectWithIndexer, int>  
                {  
                    Operand = oivar,  
                    Indices =  
                    {  
                        new InArgument<int>(1),  
                        new InArgument<int>(2)  
                    }  
                },  
                // Assign an integer value to the object at index [1,2].  
                Value = 4,  
            },  
            // Print the new item value to the console.  
            new WriteLine()  
            {  
                Text = ExpressionServices.Convert<string>(ctx => oivar.Get(ctx)[1, 2].ToString()),  
            }  
        }  
    };  
  
    // Invoke the Sequence activity.  
    WorkflowInvoker.Invoke(myActivity);  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexerReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.IndexerReference`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexerReference();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1a666-108">Initialise une nouvelle instance de la classe <see cref="T:System.Activities.Expressions.IndexerReference`2" />.</span><span class="sxs-lookup"><span data-stu-id="1a666-108">Initializes a new instance of the <see cref="T:System.Activities.Expressions.IndexerReference`2" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMetadata">
      <MemberSignature Language="C#" Value="protected override void CacheMetadata (System.Activities.CodeActivityMetadata metadata);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CacheMetadata(valuetype System.Activities.CodeActivityMetadata metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.IndexerReference`2.CacheMetadata(System.Activities.CodeActivityMetadata)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CacheMetadata (metadata As CodeActivityMetadata)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CacheMetadata(System::Activities::CodeActivityMetadata metadata);" />
      <MemberSignature Language="F#" Value="override this.CacheMetadata : System.Activities.CodeActivityMetadata -&gt; unit" Usage="indexerReference.CacheMetadata metadata" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Activities.CodeActivityMetadata" />
      </Parameters>
      <Docs>
        <param name="metadata">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="protected override System.Activities.Location&lt;TItem&gt; Execute (System.Activities.CodeActivityContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Activities.Location`1&lt;!TItem&gt; Execute(class System.Activities.CodeActivityContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.IndexerReference`2.Execute(System.Activities.CodeActivityContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function Execute (context As CodeActivityContext) As Location(Of TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Activities::Location&lt;TItem&gt; ^ Execute(System::Activities::CodeActivityContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.Execute : System.Activities.CodeActivityContext -&gt; System.Activities.Location&lt;'Item&gt;" Usage="indexerReference.Execute context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Location&lt;TItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.CodeActivityContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Indices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Activities.InArgument&gt; Indices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Activities.InArgument&gt; Indices" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Expressions.IndexerReference`2.Indices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Indices As Collection(Of InArgument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Activities::InArgument ^&gt; ^ Indices { System::Collections::ObjectModel::Collection&lt;System::Activities::InArgument ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Indices : System.Collections.ObjectModel.Collection&lt;System.Activities.InArgument&gt;" Usage="System.Activities.Expressions.IndexerReference&lt;'Operand, 'Item&gt;.Indices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Activities.RequiredArgument</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Activities.InArgument&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a666-109">Obtient une collection d'arguments qui représentent les index de l'élément dans le tableau d'indexeur.</span><span class="sxs-lookup"><span data-stu-id="1a666-109">Gets a collection of arguments that represent the indices of the element in the indexer array.</span></span></summary>
        <value><span data-ttu-id="1a666-110">Index de l'élément dans le tableau d'indexeur.</span><span class="sxs-lookup"><span data-stu-id="1a666-110">The indices of the element in the indexer array.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a666-111">La propriété <xref:System.Activities.Expressions.IndexerReference%602.Indices%2A> est en lecture seule, mais les éléments de la collection et leurs index peuvent être modifiés.</span><span class="sxs-lookup"><span data-stu-id="1a666-111">The <xref:System.Activities.Expressions.IndexerReference%602.Indices%2A> property is read-only, but the items in the collection can be modified and the indices can be changed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Operand">
      <MemberSignature Language="C#" Value="public System.Activities.InArgument&lt;TOperand&gt; Operand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.InArgument`1&lt;!TOperand&gt; Operand" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Expressions.IndexerReference`2.Operand" />
      <MemberSignature Language="VB.NET" Value="Public Property Operand As InArgument(Of TOperand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::InArgument&lt;TOperand&gt; ^ Operand { System::Activities::InArgument&lt;TOperand&gt; ^ get(); void set(System::Activities::InArgument&lt;TOperand&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Operand : System.Activities.InArgument&lt;'Operand&gt; with get, set" Usage="System.Activities.Expressions.IndexerReference&lt;'Operand, 'Item&gt;.Operand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Activities.RequiredArgument</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Activities.InArgument&lt;TOperand&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a666-112">Obtient ou définit l'objet qui contient l'indexeur.</span><span class="sxs-lookup"><span data-stu-id="1a666-112">Gets or sets the object that contains the indexer.</span></span></summary>
        <value><span data-ttu-id="1a666-113">Objet qui contient l'indexeur.</span><span class="sxs-lookup"><span data-stu-id="1a666-113">The object that contains the indexer.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>