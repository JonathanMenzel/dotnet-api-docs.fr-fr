<Type Name="ExpressionServices" FullName="System.Activities.Expressions.ExpressionServices">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ea32588695d88c869dce1a935dbde96a127f6211" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39835050" /></Metadata><TypeSignature Language="C#" Value="public static class ExpressionServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ExpressionServices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Expressions.ExpressionServices" />
  <TypeSignature Language="VB.NET" Value="Public Class ExpressionServices" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionServices abstract sealed" />
  <TypeSignature Language="F#" Value="type ExpressionServices = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f4e7b-101">API de transformation utilisée pour convertir les expressions sensibles à l’environnement en arborescence d’activité.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-101">A transformation API used to convert environment aware expressions to an activity tree.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4e7b-102">Les méthodes de conversion de cette classe transforment les expressions lambda spécifiées, qui peuvent contenir plusieurs sous-expressions, en arborescences d'activités composées d'une hiérarchie d'activités.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-102">The conversion methods in this class transform the specified lambda expressions, which can contain multiple sub-expressions, into activity trees composed of a hierarchy of activities.</span></span> <span data-ttu-id="f4e7b-103">Il est fortement recommandé d'utiliser ces méthodes de conversion plutôt que d'instancier directement des activités d'expression car elles offrent un niveau supérieur d'abstraction et vous permettent d'implémenter votre flux de travail plus intuitivement.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-103">It is strongly recommended to use these conversion methods instead of instantiating expression activities directly because they provide a higher level of abstraction and enable you to implement your workflow more intuitively.</span></span> <span data-ttu-id="f4e7b-104">Pour plus d'informations, reportez-vous aux exemples.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-104">See the examples for more information.</span></span>  
  
 <span data-ttu-id="f4e7b-105">Les méthodes de conversion de <xref:System.Activities.Expressions.ExpressionServices> sont conçues pour utiliser les variables et les constantes qui sont définies dans le flux de travail ou passées dans ce dernier via des arguments.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-105">The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f4e7b-106">L'exemple de code suivant appelle <xref:System.Activities.Expressions.ExpressionServices.Convert%2A> pour calculer la somme de l'élément de tableau à l'index 0 et l'élément de tableau à l'index 1.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-106">The following code example calls <xref:System.Activities.Expressions.ExpressionServices.Convert%2A> to compute the sum of the array element at index 0 and the array element at index 1.</span></span> <span data-ttu-id="f4e7b-107">La somme résultante est ensuite affectée à une variable et est imprimée sur la console.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-107">Next, the resulting sum is assigned to a variable and is printed to the console.</span></span>  
  
```csharp  
  
public static void ComputeSumWithConvert()  
{  
    var arrayvar = new Variable<int[]>("arrayvar", new int[] { 1, 2 });  
    var intvar = new Variable<int>("intvar");              
  
    // Use ExpressionServices.Convert() to convert the composite lambda expression  
    // that represents the sum of array elements at index 0 and 1.  
    Activity<int> activity1 = ExpressionServices.Convert<int>(ctx => arrayvar.Get(ctx)[0] + arrayvar.Get(ctx)[1]);  
  
    Activity seq = new Sequence  
    {  
        Variables = { arrayvar, intvar },  
        Activities =  
        {                      
            // Get the sum value.  
            new Assign<int>  
            {  
                To = intvar,  
                Value = activity1,  
            },  
            // Print the sum value of 3 to the console.  
            new WriteLine  
            {                          
                Text = new InArgument<string>(ctx => intvar.Get(ctx).ToString()),  
            },  
        }  
    };  
  
    WorkflowInvoker.Invoke(seq);  
  
}  
  
```  
  
 <span data-ttu-id="f4e7b-108">L'exemple de code suivant est fourni à des fins de comparaison.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-108">The following code example is provided for comparison purposes.</span></span> <span data-ttu-id="f4e7b-109">Ce deuxième exemple montre comment calculer la somme en instanciant l'activité d'expression <xref:System.Activities.Expressions.Add%603>.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-109">This second example shows how to compute the sum by instantiating the <xref:System.Activities.Expressions.Add%603> expression activity.</span></span> <span data-ttu-id="f4e7b-110">Ces deux exemples sont fonctionnellement équivalents, mais comme vous pouvez le voir, la deuxième approche implique davantage de codage et n'est pas aussi simple que d'appeler <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-110">The two examples are functionally equivalent but as you can see the second approach involves more coding and is not as straightforward as calling <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>.</span></span> <span data-ttu-id="f4e7b-111">Par conséquent, le premier exemple est recommandé.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-111">Therefore the first example is recommended.</span></span>  
  
```csharp  
  
public static void ComputeSumWithExpressionActivity()  
{  
    var arrayvar = new Variable<int[]>("arrayvar", new int[] { 1, 2 });  
    var intvar = new Variable<int>("intvar");  
  
    // Create an Add activity to compute the sum of array elements at index 0 and 1.  
    Activity<int> activity1 = new Add<int, int, int>  
    {  
        Left = new ArrayItemValue<int>  
        {  
            Array = arrayvar,  
            Index = 0,  
        },  
        Right = new ArrayItemValue<int>  
        {  
            Array = arrayvar,  
            Index = 1,  
        }  
    };              
  
    Activity seq = new Sequence  
    {  
        Variables = { arrayvar, intvar },  
        Activities =  
        {  
            // Get the sum value.  
            new Assign<int>  
            {  
                To = intvar,  
                Value = activity1,  
            },  
            // Print the sum value of 3 to the console.   
            new WriteLine  
            {                          
                Text = new InArgument<string>(ctx => intvar.Get(ctx).ToString()),  
            },                      
        }  
    };  
  
    WorkflowInvoker.Invoke(seq);  
  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Convert&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Activities.Activity&lt;TResult&gt; Convert&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext,TResult&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.Activity`1&lt;!!TResult&gt; Convert&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Activities.ActivityContext, !!TResult&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.ExpressionServices.Convert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Convert(Of TResult) (expression As Expression(Of Func(Of ActivityContext, TResult))) As Activity(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Activities::Activity&lt;TResult&gt; ^ Convert(System::Linq::Expressions::Expression&lt;Func&lt;System::Activities::ActivityContext ^, TResult&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext, 'Result&gt;&gt; -&gt; System.Activities.Activity&lt;'Result&gt;" Usage="System.Activities.Expressions.ExpressionServices.Convert expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Activity&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Activities.ActivityContext,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f4e7b-112">Type dans lequel l'expression est convertie.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-112">The type the expression is being converted to.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="f4e7b-113">Expression en cours de conversion.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-113">The expression being converted.</span></span></param>
        <summary><span data-ttu-id="f4e7b-114">Convertit un flux de travail sensible à l’environnement de flux de travail en arborescence d’activité.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-114">Converts a workflow environment-aware expression to an activity tree.</span></span></summary>
        <returns><span data-ttu-id="f4e7b-115">Expression convertie.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-115">The converted expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4e7b-116">Pour obtenir un exemple de code de <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>, consultez <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A>.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-116">For a code example of <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>, see <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A>.</span></span>  
  
 <span data-ttu-id="f4e7b-117">Les méthodes de conversion de <xref:System.Activities.Expressions.ExpressionServices> sont conçues pour utiliser les variables et les constantes qui sont définies dans le flux de travail ou passées dans ce dernier via des arguments.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-117">The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertReference&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Activities.Activity&lt;System.Activities.Location&lt;TResult&gt;&gt; ConvertReference&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext,TResult&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.Activity`1&lt;class System.Activities.Location`1&lt;!!TResult&gt;&gt; ConvertReference&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Activities.ActivityContext, !!TResult&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.ExpressionServices.ConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertReference(Of TResult) (expression As Expression(Of Func(Of ActivityContext, TResult))) As Activity(Of Location(Of TResult))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Activities::Activity&lt;System::Activities::Location&lt;TResult&gt; ^&gt; ^ ConvertReference(System::Linq::Expressions::Expression&lt;Func&lt;System::Activities::ActivityContext ^, TResult&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="static member ConvertReference : System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext, 'Result&gt;&gt; -&gt; System.Activities.Activity&lt;System.Activities.Location&lt;'Result&gt;&gt;" Usage="System.Activities.Expressions.ExpressionServices.ConvertReference expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Activity&lt;System.Activities.Location&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Activities.ActivityContext,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f4e7b-118">Type dans lequel l'expression est convertie.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-118">The type the expression is being converted to.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="f4e7b-119">Expression en cours de conversion.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-119">The expression being converted.</span></span></param>
        <summary><span data-ttu-id="f4e7b-120">Convertit une référence à une expression sensible à l’environnement de flux de travail en arborescence d’activité.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-120">Converts a reference to a workflow environment-aware expression to an activity tree.</span></span></summary>
        <returns><span data-ttu-id="f4e7b-121">Expression convertie.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-121">The converted expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4e7b-122">Les méthodes de conversion de <xref:System.Activities.Expressions.ExpressionServices> sont conçues pour utiliser les variables et les constantes qui sont définies dans le flux de travail ou passées dans ce dernier via des arguments.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-122">The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f4e7b-123">Les deux exemples de code suivants illustrent l'utilisation de <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A> et <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-123">The following two code examples illustrate the use of <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A> and <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>.</span></span> <span data-ttu-id="f4e7b-124">Le premier exemple de code utilise <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A> dans une activité `Assign` pour convertir une expression lambda en une propriété de type chaîne à laquelle une valeur est affectée.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-124">The first code example uses <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A> in an `Assign` activity to convert a lambda expression into a string property that is assigned a value.</span></span> <span data-ttu-id="f4e7b-125"><xref:System.Activities.Expressions.ExpressionServices.Convert%2A> est ensuite appelé pour convertir une expression lambda en une valeur de propriété de type chaîne imprimée sur la console dans l'activité `WriteLine`.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-125">Next, <xref:System.Activities.Expressions.ExpressionServices.Convert%2A> is called to convert a lambda expression into a string property value that is printed to the console in the `WriteLine` activity.</span></span>  
  
```csharp  
  
// Define a struct with a property named AProperty.  
struct StructWithProperty  
{  
    public string AProperty { get; set; }  
}  
  
public static void ConvertReferenceForValueTypePropertyReferenceSample()  
{              
    // Create a variable of type StructWithProperty to store the property.  
    var swpvar = new Variable<StructWithProperty>("swpvar", new StructWithProperty());  
  
    Activity myActivity = new Sequence  
    {  
        Variables = { swpvar },  
        Activities =   
        {                      
            // Create an Assign activity to assign a value to the AProperty property.  
            new Assign<string>  
            {  
                To = ExpressionServices.ConvertReference<string>(ctx => swpvar.Get(ctx).AProperty),  
                // Assign a string literal to AProperty.  
                Value = "Hello",  
            },  
            // Print the new property value to the console.  
            new WriteLine()  
            {  
                Text = ExpressionServices.Convert<string>(ctx => swpvar.Get(ctx).AProperty),  
            }  
        }  
    };  
  
    // Invoke the Sequence activity.  
    WorkflowInvoker.Invoke(myActivity);  
}  
  
```  
  
 <span data-ttu-id="f4e7b-126">L'exemple de code suivant est semblable au précédent, à cette différence près que l'expression à convertir est une référence à un élément d'un tableau multidimensionnel.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-126">The following code example is like the previous one except that the expression to convert is a reference to an item in a multidimensional array.</span></span>  
  
```csharp  
  
public static void ConvertReferenceForMultidimensionalArrayItemReferenceSample()  
{  
    // Create a variable to store a multidimensional array.  
    var arrayvar = new Variable<int[,]>("arrayvar", new int[4, 5]);  
  
    Activity myActivity = new Sequence  
    {  
        Variables = { arrayvar },  
        Activities =   
        {                      
            // Create an Assign activity to assign a value to the array item at index [1,2].  
            new Assign<int>  
            {  
                To = ExpressionServices.ConvertReference<int>(ctx => arrayvar.Get(ctx)[1, 2]),  
                // Assign an integer value to the array item at row 1 column 2.  
                Value = 1,  
            },  
            // Print the array item value to the console.  
            new WriteLine()  
            {  
                Text = ExpressionServices.Convert<string>(ctx => arrayvar.Get(ctx)[1, 2].ToString()),  
            }  
        }  
    };  
  
    // Invoke the Sequence activity.  
    WorkflowInvoker.Invoke(myActivity);  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvert&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static bool TryConvert&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext,TResult&gt;&gt; expression, out System.Activities.Activity&lt;TResult&gt; result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryConvert&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Activities.ActivityContext, !!TResult&gt;&gt; expression, [out] class System.Activities.Activity`1&lt;!!TResult&gt;&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.ExpressionServices.TryConvert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{``0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryConvert(Of TResult) (expression As Expression(Of Func(Of ActivityContext, TResult)), ByRef result As Activity(Of TResult)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static bool TryConvert(System::Linq::Expressions::Expression&lt;Func&lt;System::Activities::ActivityContext ^, TResult&gt; ^&gt; ^ expression, [Runtime::InteropServices::Out] System::Activities::Activity&lt;TResult&gt; ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryConvert : System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext, 'Result&gt;&gt; *  -&gt; bool" Usage="System.Activities.Expressions.ExpressionServices.TryConvert (expression, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Activities.ActivityContext,TResult&gt;&gt;" />
        <Parameter Name="result" Type="System.Activities.Activity&lt;TResult&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f4e7b-127">Type dans lequel l'expression est convertie.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-127">The type the expression is being converted to.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="f4e7b-128">Expression en cours de conversion.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-128">The expression being converted.</span></span></param>
        <param name="result"><span data-ttu-id="f4e7b-129">Expression convertie.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-129">The converted expression.</span></span></param>
        <summary><span data-ttu-id="f4e7b-130">Convertit un flux de travail sensible à l’environnement de flux de travail en arborescence d’activité.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-130">Converts a workflow environment-aware expression to an activity tree.</span></span></summary>
        <returns><span data-ttu-id="f4e7b-131"><see langword="true" /> si l'expression peut être convertie ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-131"><see langword="true" /> if the expression can be converted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4e7b-132">Les méthodes de conversion de <xref:System.Activities.Expressions.ExpressionServices> sont conçues pour utiliser les variables et les constantes qui sont définies dans le flux de travail ou passées dans ce dernier via des arguments.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-132">The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvertReference&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static bool TryConvertReference&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext,TResult&gt;&gt; expression, out System.Activities.Activity&lt;System.Activities.Location&lt;TResult&gt;&gt; result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryConvertReference&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Activities.ActivityContext, !!TResult&gt;&gt; expression, [out] class System.Activities.Activity`1&lt;class System.Activities.Location`1&lt;!!TResult&gt;&gt;&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.ExpressionServices.TryConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{System.Activities.Location{``0}}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryConvertReference(Of TResult) (expression As Expression(Of Func(Of ActivityContext, TResult)), ByRef result As Activity(Of Location(Of TResult))) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static bool TryConvertReference(System::Linq::Expressions::Expression&lt;Func&lt;System::Activities::ActivityContext ^, TResult&gt; ^&gt; ^ expression, [Runtime::InteropServices::Out] System::Activities::Activity&lt;System::Activities::Location&lt;TResult&gt; ^&gt; ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryConvertReference : System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext, 'Result&gt;&gt; *  -&gt; bool" Usage="System.Activities.Expressions.ExpressionServices.TryConvertReference (expression, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Activities.ActivityContext,TResult&gt;&gt;" />
        <Parameter Name="result" Type="System.Activities.Activity&lt;System.Activities.Location&lt;TResult&gt;&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f4e7b-133">Type dans lequel l'expression est convertie.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-133">The type the expression is being converted to.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="f4e7b-134">Expression en cours de conversion.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-134">The expression being converted.</span></span></param>
        <param name="result"><span data-ttu-id="f4e7b-135">Expression convertie.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-135">The converted expression.</span></span></param>
        <summary><span data-ttu-id="f4e7b-136">Convertit une référence à une expression sensible à l’environnement de flux de travail en arborescence d’activité.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-136">Converts a reference to a workflow environment-aware expression to an activity tree.</span></span></summary>
        <returns><span data-ttu-id="f4e7b-137"><see langword="true" /> si l'expression peut être convertie ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-137"><see langword="true" /> if the expression can be converted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f4e7b-138">Les méthodes de conversion de <xref:System.Activities.Expressions.ExpressionServices> sont conçues pour utiliser les variables et les constantes qui sont définies dans le flux de travail ou passées dans ce dernier via des arguments.</span><span class="sxs-lookup"><span data-stu-id="f4e7b-138">The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>