<Type Name="HtmlTextWriter" FullName="System.Web.UI.HtmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="13c8286a3996a1f249c3b6a707d85d190d89c08d" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55359887" /></Metadata><TypeSignature Language="C#" Value="public class HtmlTextWriter : System.IO.TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HtmlTextWriter extends System.IO.TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class HtmlTextWriter&#xA;Inherits TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlTextWriter : System::IO::TextWriter" />
  <TypeSignature Language="F#" Value="type HtmlTextWriter = class&#xA;    inherit TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Écrit des caractères et du texte de balisage dans un flux de sortie de contrôle serveur ASP.NET. Cette classe fournit des fonctionnalités de mise en forme utilisées par les contrôles serveur ASP.NET lors du rendu du balisage sur les clients.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter> classe est utilisée pour afficher le HTML 4.0 pour les navigateurs de bureau. Le <xref:System.Web.UI.HtmlTextWriter> est également la classe de base pour tous les enregistreurs de balisage dans le <xref:System.Web.UI> espace de noms, y compris le <xref:System.Web.UI.ChtmlTextWriter>, <xref:System.Web.UI.Html32TextWriter>, et <xref:System.Web.UI.XhtmlTextWriter> classes. Ces classes sont utilisées pour écrire les éléments, attributs et les informations de style et de disposition pour différents types de balisage. En outre, ces classes sont utilisées par les classes de page et de contrôle d’adaptateur qui sont associés à chaque langage de balisage.  
  
 Dans la plupart des cas, ASP.NET utilise automatiquement le writer approprié pour l’appareil demandeur. Toutefois, si vous créez un writer de texte personnalisé ou si vous souhaitez spécifier un writer particulier pour restituer une page pour un périphérique spécifique, vous devez mapper le writer à la page dans le `controlAdapters` section du fichier browser application.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Web.UI.Control.Render%2A> méthode d’un contrôle personnalisé dérivé de la <xref:System.Web.UI.Control> classe. L’exemple de code montre comment utiliser différentes <xref:System.Web.UI.HtmlTextWriter> champs, propriétés et méthodes.  
  
 [!code-csharp[MarkupTextWriter_Samples1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#1)]
 [!code-vb[MarkupTextWriter_Samples1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.TextWriter" />
    <altmember cref="T:System.Web.UI.Control" />
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="T:System.Web.UI.Adapters.ControlAdapter" />
    <altmember cref="T:System.Web.UI.Adapters.PageAdapter" />
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
    <altmember cref="T:System.Web.UI.Html32TextWriter" />
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
    <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.HtmlTextWriter" />.</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.HtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.HtmlTextWriter" Usage="new System.Web.UI.HtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Instance de <see cref="T:System.IO.TextWriter" /> qui génère le rendu du contenu de balisage.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.HtmlTextWriter" /> qui utilise une chaîne de tabulation par défaut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> surcharge de la <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> constructeur utilise le <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> constante lors de la mise en retrait d’une ligne est nécessaire. Il appelle le <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> surcharge pour initialiser la nouvelle instance.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> constructeur pour créer un personnalisé <xref:System.Web.UI.HtmlTextWriter> objet nommé `StyledLabelHtmlWriter.` lorsque le `MyPage` classe personnalisée, qui est dérivée de la <xref:System.Web.UI.Page> class, est demandé par un client navigateur, il utilise le `StyledLabelHtmlWriter` classe pour afficher son contenu dans le flux de sortie.  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.HtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.HtmlTextWriter" Usage="new System.Web.UI.HtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> qui restitue le contenu du balisage.</param>
        <param name="tabString">Chaîne à utiliser pour restituer un décrochement de ligne.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.HtmlTextWriter" /> avec un caractère de chaîne de tabulation spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> surcharge de la <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> constructeur utilise `tabString` lorsque la mise en retrait d’une ligne est nécessaire. Il appelle le <xref:System.IO.TextWriter.%23ctor%28System.IFormatProvider%29?displayProperty=nameWithType> constructeur pour initialiser la nouvelle instance de base.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> constructeur pour créer un personnalisé <xref:System.Web.UI.HtmlTextWriter> objet nommé `StyledLabelHtmlWriter.` lorsque le `MyPage` classe personnalisée, qui est dérivée de la <xref:System.Web.UI.Page> class, est demandé par un client navigateur, il utilise le `StyledLabelHtmlWriter` classe pour afficher son contenu dans le flux de sortie.  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ajoute l'attribut et la valeur de balisage spécifiés à la balise d'ouverture de l'élément créée par l'objet <see cref="T:System.Web.UI.HtmlTextWriter" /> à l'aide d'un appel ultérieur à la méthode <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string -&gt; unit&#xA;override this.AddAttribute : string * string -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Chaîne qui contient le nom de l'attribut à ajouter.</param>
        <param name="value">Chaîne contenant la valeur à assigner à l'attribut.</param>
        <summary>Ajoute l'attribut et la valeur de balisage spécifiés à la balise d'ouverture de l'élément créée par l'objet <see cref="T:System.Web.UI.HtmlTextWriter" /> à l'aide d'un appel ultérieur à la méthode <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> surcharge de la <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29> méthode si l’attribut ne fait pas partie de la <xref:System.Web.UI.HtmlTextWriterAttribute> valeurs, ou si l’attribut n’est pas connu jusqu'à l’exécution.  
  
 Pour une instance de n’importe quel élément de balisage donné, la <xref:System.Web.UI.HtmlTextWriter> classe maintient une liste d’attributs pour cet élément. Lorsque le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> méthode est appelée, les attributs ajoutés par la <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> méthode sont rendus dans la balise d’ouverture de l’élément. La liste des attributs est ensuite effacée à partir de la <xref:System.Web.UI.HtmlTextWriter> objet.  
  
 Le modèle de codage pour le rendu des éléments de balisage est comme suit :  
  
-   Utilisez le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> pour ajouter des attributs à l’élément.  
  
-   Utilisez la méthode <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   Utiliser d’autres méthodes en fonction des besoins pour restituer le contenu trouvé entre l’élément d’ouverture et de balises de fermeture.  
  
-   Utilisez la méthode <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment appeler le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> méthode avant d’appeler le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> (méthode). Le code appelle deux surcharges différentes de <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> et deux surcharges différentes de <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> avant d’appeler le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> méthode pour restituer un `<span>` élément dans le flux de sortie. Le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29> méthode est utilisée pour définir l’attribut personnalisé nommé `CustomAttribute` et la valeur personnalisée nommée `CustomAttributeValue` pour le `<span>` élément rendu de ce code.  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string -&gt; unit&#xA;override this.AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string -&gt; unit" Usage="htmlTextWriter.AddAttribute (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> représentant l'attribut de balisage à ajouter au flux de sortie.</param>
        <param name="value">Chaîne contenant la valeur à assigner à l'attribut.</param>
        <summary>Ajoute l'attribut de balisage et la valeur de l'attribut à la balise d'ouverture de l'élément créée par l'objet <see cref="T:System.Web.UI.HtmlTextWriter" /> à l'aide d'un appel ultérieur à la méthode <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> surcharge de la <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> méthode pour restituer un attribut de balisage standard.  
  
 Pour une instance de n’importe quel élément de balisage donné, la <xref:System.Web.UI.HtmlTextWriter> classe maintient une liste d’attributs pour cet élément. Lorsque le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> méthode est appelée, tous les attributs qui sont ajoutés par le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> méthode sont rendus dans la balise d’ouverture de l’élément. La liste des attributs est ensuite effacée à partir de la <xref:System.Web.UI.HtmlTextWriter>.  
  
 Le modèle de codage pour le rendu des éléments de balisage est comme suit :  
  
-   Utilisez le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> pour ajouter des attributs à l’élément.  
  
-   Utilisez la méthode <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   Utiliser d’autres méthodes en fonction des besoins pour restituer le contenu trouvé entre l’élément d’ouverture et de balises de fermeture.  
  
-   Utilisez la méthode <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> surcharge de la <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> méthode pour ajouter un `Onclick` d’attribut à un élément de balisage et puis définissez sa valeur pour le code ECMAScript suivant :  
  
```  
alert('Hello');  
```  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#1)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value, bool fEndode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value, bool fEndode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String, fEndode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, bool fEndode);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string * bool -&gt; unit&#xA;override this.AddAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value, fEndode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEndode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Chaîne qui contient le nom de l'attribut à ajouter.</param>
        <param name="value">Chaîne contenant la valeur à assigner à l'attribut.</param>
        <param name="fEndode"><see langword="true" /> pour encoder l'attribut et sa valeur ; sinon, <see langword="false" />.</param>
        <summary>Ajoute l'attribut et la valeur de balisage spécifiés à la balise d'ouverture de l'élément créée par l'objet <see cref="T:System.Web.UI.HtmlTextWriter" /> à l'aide d'un appel ultérieur à la méthode <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />, avec encodage facultatif.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> surcharge de la <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> méthode si l’attribut ne fait pas partie de la <xref:System.Web.UI.HtmlTextWriterAttribute> valeurs, ou si l’attribut n’est pas connu jusqu’au moment de l’exécution et l’encodage est requise.  
  
 Pour une instance de n’importe quel élément de balisage donné, la <xref:System.Web.UI.HtmlTextWriter> classe maintient une liste d’attributs pour cet élément. Lorsque le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> méthode est appelée, les attributs ajoutés par la <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> méthode sont rendus dans la balise d’ouverture de l’élément. La liste des attributs est ensuite effacée à partir de la <xref:System.Web.UI.HtmlTextWriter> objet.  
  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> méthode avec `fEncode` défini sur `true`, si l’attribut peut contenir éventuellement un guillemet («), un signe inférieur à (<), ou une esperluette (&). L’appel de méthode codera l’attribut pour satisfaire les besoins de l’appareil demandeur. Vous pouvez définir `fEncode` à `false`, si vous savez qu’aucun de ces caractères sera généré, ou si vous savez que l’attribut est déjà codé.  
 
Si le type d’attribut est `Style`, la valeur ne sont pas être encodée même si `fEndode` est `true`. Assurez-vous que la valeur de style est conforme à CSS et ne contenir du code malveillant.
  
 Le modèle de codage pour le rendu des éléments de balisage est comme suit :  
  
-   Utilisez le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> pour ajouter des attributs à l’élément.  
  
-   Utilisez la méthode <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   Utiliser d’autres méthodes en fonction des besoins pour restituer le contenu trouvé entre l’élément d’ouverture et de balises de fermeture.  
  
-   Utilisez la méthode <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> surcharge de la <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> méthode pour garantir que d’un attribut personnalisé, nommé `myattribute`, et sa valeur ne sont pas encodés pour un `<img>` élément.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddAttribute (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddAttribute (name As String, value As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit&#xA;override this.AddAttribute : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Chaîne qui contient le nom de l'attribut à ajouter.</param>
        <param name="value">Chaîne contenant la valeur à assigner à l'attribut.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> qui représente l'attribut.</param>
        <summary>Ajoute l'attribut et la valeur de balisage spécifiés, ainsi qu'une valeur d'énumération <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, à la balise d'ouverture de l'élément créée par l'objet <see cref="T:System.Web.UI.HtmlTextWriter" /> à l'aide d'un appel ultérieur à la méthode <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> surcharge de la <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterAttribute%29> méthode uniquement lors d’un héritage à partir de la <xref:System.Web.UI.HtmlTextWriter> classe. Il vous permet de créer de nouveaux `name` et `key` paires pour les attributs.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string * bool -&gt; unit&#xA;override this.AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string * bool -&gt; unit" Usage="htmlTextWriter.AddAttribute (key, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> représentant l'attribut de balisage à ajouter au flux de sortie.</param>
        <param name="value">Chaîne contenant la valeur à assigner à l'attribut.</param>
        <param name="fEncode"><see langword="true" /> pour encoder l'attribut et sa valeur ; sinon, <see langword="false" />.</param>
        <summary>Ajoute l'attribut de balisage et la valeur de l'attribut à la balise d'ouverture de l'élément créée par l'objet <see cref="T:System.Web.UI.HtmlTextWriter" /> à l'aide d'un appel ultérieur à la méthode <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />, avec encodage facultatif.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> surcharge de la <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> méthode pour restituer un attribut de balisage standard, avec encodage facultatif.  
  
 Pour une instance de n’importe quel élément de balisage donné, la <xref:System.Web.UI.HtmlTextWriter> classe maintient une liste d’attributs pour cet élément. Lorsque le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> méthode est appelée, les attributs ajoutés par le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> sont rendus dans la balise d’ouverture de l’élément. La liste des attributs est ensuite effacée à partir de la <xref:System.Web.UI.HtmlTextWriter> objet.  
  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> méthode avec `fEncode` défini sur `true`, si l’attribut peut contenir éventuellement un guillemet («), un signe inférieur à (<), ou une esperluette (&). L’appel de méthode codera l’attribut pour satisfaire les besoins de l’appareil demandeur. Vous pouvez définir `fEncode` à `false`, si vous savez qu’aucun de ces caractères sera généré, ou si vous savez que l’attribut est déjà codé.  
 
 Si le type d’attribut est `Style`, la valeur ne sont pas être encodée même si `fEncode` est `true`. Assurez-vous que la valeur de style est conforme à CSS et ne contenir du code malveillant.

  
 Le modèle de codage pour le rendu des éléments de balisage est comme suit :  
  
-   Utilisez le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> pour ajouter des attributs à l’élément.  
  
-   Utilisez la méthode <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   Utiliser d’autres méthodes en fonction des besoins pour restituer le contenu trouvé entre l’élément d’ouverture et de balises de fermeture.  
  
-   Utilisez la méthode <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> méthode pour garantir que la valeur de chaîne qui est affectée à un `Alt` d’attribut pour un `<img>` élément est encodé pour l’appareil demandeur.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ajoute un attribut de style de balisage à la balise d'ouverture de l'élément créée par l'objet <see cref="T:System.Web.UI.HtmlTextWriter" /> à l'aide d'un appel ultérieur à la méthode <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </MemberGroup>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : string * string -&gt; unit&#xA;override this.AddStyleAttribute : string * string -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Chaîne contenant l'attribut de style à ajouter. </param>
        <param name="value">Chaîne qui contient la valeur à assigner à l'attribut.</param>
        <summary>Ajoute l'attribut de style de balisage spécifié et la valeur de l'attribut à la balise d'ouverture créée par un appel ultérieur à la méthode <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> surcharge de la <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29> méthode lorsque le style n’est pas un membre de la <xref:System.Web.UI.HtmlTextWriterStyle> énumération ou n’est pas connu jusqu'à l’exécution.  
  
 Le <xref:System.Web.UI.HtmlTextWriter> classe maintient une liste de styles pour les éléments de balisage rendu. Lorsque le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> méthode est appelée, les styles qui sont ajoutés par le <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> méthode sont rendus dans la balise d’ouverture de l’élément. La liste des styles est ensuite effacée.  
  
 Le modèle de codage pour le rendu des éléments de balisage est comme suit :  
  
-   Utilisez le <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> attributs de méthode pour ajouter n’importe quel style à l’élément.  
  
-   Utilisez la méthode <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   Utiliser d’autres méthodes en fonction des besoins pour restituer le contenu trouvé entre l’ouverture de l’élément et les balises de fermeture.  
  
-   Utilisez la méthode <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> surcharge de la <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29> méthode pour restituer `font-size` et `color` des attributs de style sur un `<p>` élément. Cet exemple de code utilise la <xref:System.Web.UI.HtmlTextWriter> classe pour restituer le contenu du contrôle.  
  
 [!code-cpp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CPP/htmltextwriter_addstyleattribute.cpp#1)]
 [!code-csharp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CS/htmltextwriter_addstyleattribute.cs#1)]
 [!code-vb[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/VB/htmltextwriter_addstyleattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (System.Web.UI.HtmlTextWriterStyle key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(valuetype System.Web.UI.HtmlTextWriterStyle key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (key As HtmlTextWriterStyle, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::Web::UI::HtmlTextWriterStyle key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : System.Web.UI.HtmlTextWriterStyle * string -&gt; unit&#xA;override this.AddStyleAttribute : System.Web.UI.HtmlTextWriterStyle * string -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterStyle" /> représentant l'attribut de style à ajouter au flux de sortie.</param>
        <param name="value">Chaîne qui contient la valeur à assigner à l'attribut.</param>
        <summary>Ajoute l'attribut de style de balisage associé à la valeur <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> spécifiée et la valeur de l'attribut à la balise d'ouverture créée par un appel ultérieur à la méthode <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> surcharge de la <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%29> méthode lorsque le style est un membre de la <xref:System.Web.UI.HtmlTextWriterStyle> énumération et est connu avant l’exécution.  
  
 Le <xref:System.Web.UI.HtmlTextWriter> classe maintient une liste de styles pour les éléments de balisage rendu. Lorsque le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> méthode est appelée, les styles ajoutés par la <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> méthode sont rendus dans la balise d’ouverture de l’élément. La liste des styles est ensuite effacée.  
  
 Le modèle de codage pour le rendu des éléments de balisage est comme suit :  
  
-   Utilisez le <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> attributs de méthode pour ajouter n’importe quel style à l’élément.  
  
-   Utilisez la méthode <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   Utiliser d’autres méthodes en fonction des besoins pour restituer le contenu trouvé entre l’ouverture de l’élément et les balises de fermeture.  
  
-   Utilisez la méthode <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser une partie d’une substitution de la <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> méthode dans une classe dérivée de la <xref:System.Web.UI.HtmlTextWriter> classe. Le code vérifie si un `<Label>` élément est rendu. Dans ce cas, le <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> méthode est appelée pour vérifier si un `Color` attribut de style a été défini pour le `<Label>` élément. Si un `Color` attribut n’a pas été défini, le code appelle cette surcharge de la <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> méthode pour ajouter le `Color` d’attribut pour l’attribut de style, puis définissez sa valeur `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddStyleAttribute (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddStyleAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddStyleAttribute (name As String, value As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; unit&#xA;override this.AddStyleAttribute : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Chaîne contenant l'attribut de style à ajouter.</param>
        <param name="value">Chaîne qui contient la valeur à assigner à l'attribut.</param>
        <param name="key">Valeur <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> qui représente l'attribut de style à ajouter. </param>
        <summary>Ajoute l'attribut de style de balisage spécifié et la valeur d'attribut, avec une valeur d'énumération <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, à la balise d'ouverture créée par un appel ultérieur à la méthode <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> surcharge de la <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterStyle%29> méthode uniquement lors d’un héritage à partir de la <xref:System.Web.UI.HtmlTextWriter> classe. Il vous permet de créer de nouveaux `name` et `value` paires pour <xref:System.Web.UI.HtmlTextWriterStyle> attributs.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="BeginRender">
      <MemberSignature Language="C#" Value="public virtual void BeginRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginRender();" />
      <MemberSignature Language="F#" Value="abstract member BeginRender : unit -&gt; unit&#xA;override this.BeginRender : unit -&gt; unit" Usage="htmlTextWriter.BeginRender " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifie un objet <see cref="T:System.Web.UI.HtmlTextWriter" />, ou un objet d'une classe dérivée, qu'un contrôle est sur le point d'être restitué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter> implémentation de classe de la <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> méthode n’a aucune fonctionnalité. Vous devez substituer la <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> méthode dans une classe dérivée <xref:System.Web.UI.HtmlTextWriter> pour fournir vos propres fonctionnalités de rendu. Par exemple, dans un langage de balisage qui peut-être nécessiter `<p>` éléments à restituer immédiatement avant un contrôle, mais où la nécessité pour le `<p>` élément est déterminé précédemment, vous pouvez utiliser le <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> remplacer.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.Control" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="htmlTextWriter.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ferme l'objet <see cref="T:System.Web.UI.HtmlTextWriter" /> et libère toutes les ressources système qui lui sont associées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette implémentation de la <xref:System.Web.UI.HtmlTextWriter.Close%2A> les appels de méthode le <xref:System.IO.TextWriter.Close%2A?displayProperty=nameWithType> méthode de base.  
  
 Suit un appel à la <xref:System.Web.UI.HtmlTextWriter.Close%2A> (méthode), les opérations sur les <xref:System.Web.UI.HtmlTextWriter> objet peut-être lever des exceptions car toutes ses ressources ont été libérées.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.IO.TextWriter.Close" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DefaultTabString">
      <MemberSignature Language="C#" Value="public const string DefaultTabString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultTabString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultTabString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultTabString;" />
      <MemberSignature Language="F#" Value="val mutable DefaultTabString : string" Usage="System.Web.UI.HtmlTextWriter.DefaultTabString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente un caractère tabulation unique.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’onglet unique est représenté par le caractère ASCII 9.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer un constructeur qui accepte un <xref:System.IO.TextWriter> objet en tant que paramètre et passe le <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> champ en tant qu’argument de paramètre à une deuxième version du constructeur. Lorsque ce constructeur est appelé à partir du code, le <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> champ définit la stratégie de mise en retrait pour l’instance de l’enregistreur de balisage qui est utilisé par une page ou un adaptateur.  
  
 [!code-csharp[MarkupTextWriter_Methods3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#1)]
 [!code-vb[MarkupTextWriter_Methods3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="DoubleQuoteChar">
      <MemberSignature Language="C#" Value="public const char DoubleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char DoubleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DoubleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const DoubleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char DoubleQuoteChar;" />
      <MemberSignature Language="F#" Value="val mutable DoubleQuoteChar : char" Usage="System.Web.UI.HtmlTextWriter.DoubleQuoteChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente le caractère de guillemet (").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> champ est utilisé par le <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> méthode pour fermer un attribut.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment restituer un `border` d’attribut pour un `<table>` élément. Le code appelle la <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode pour restituer l’attribut et sa valeur et les utilise le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode pour restituer le <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> et <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> champs.  
  
 Cet exemple de code restitue le balisage suivant :  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.Write" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EncodeAttributeValue">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Encode la valeur de l’attribut de balisage spécifié selon les exigences de l'objet <see cref="T:System.Web.HttpRequest" /> du contexte actuel.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected string EncodeAttributeValue (string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeAttributeValue(string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeAttributeValue (value As String, fEncode As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeAttributeValue(System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="member this.EncodeAttributeValue : string * bool -&gt; string" Usage="htmlTextWriter.EncodeAttributeValue (value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Chaîne contenant la valeur d’attribut à encoder.</param>
        <param name="fEncode"><see langword="true" /> pour encoder la valeur d’attribut ; sinon, <see langword="false" />.</param>
        <summary>Encode la valeur de l’attribut de balisage spécifié selon les exigences de l'objet <see cref="T:System.Web.HttpRequest" /> du contexte actuel.</summary>
        <returns>Chaîne contenant la valeur d’attribut encodée, <see langword="null" /> si <paramref name="value" /> est vide ou la valeur d’attribut non encodée si <paramref name="fEncode" /> est <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> surcharge de la <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> méthode si l’attribut n’est pas un <xref:System.Web.UI.HtmlTextWriterAttribute> valeur d’énumération ou n’est pas connu jusqu'à l’exécution.  
  
 Le <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> méthode supprime les guillemets doubles («), esperluettes (&) et moins de signes (<) afin de balises que non valides ne sont pas générés, quel que soit l’entrée. L’encodage réel est effectué par le <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> (méthode).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment appeler le <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> méthode en tant que paramètre dans un <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> appel de méthode et encode ensuite un `color:blue` valeur d’attribut de style.  
  
 [!code-cpp[HtmlTextWriter_Methods#5](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#5)]
 [!code-csharp[HtmlTextWriter_Methods#5](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#5)]
 [!code-vb[HtmlTextWriter_Methods#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected virtual string EncodeAttributeValue (System.Web.UI.HtmlTextWriterAttribute attrKey, string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string EncodeAttributeValue(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function EncodeAttributeValue (attrKey As HtmlTextWriterAttribute, value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ EncodeAttributeValue(System::Web::UI::HtmlTextWriterAttribute attrKey, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member EncodeAttributeValue : System.Web.UI.HtmlTextWriterAttribute * string -&gt; string&#xA;override this.EncodeAttributeValue : System.Web.UI.HtmlTextWriterAttribute * string -&gt; string" Usage="htmlTextWriter.EncodeAttributeValue (attrKey, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrKey"><see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> qui représente l'attribut de balisage.</param>
        <param name="value">Chaîne contenant la valeur d’attribut à encoder.</param>
        <summary>Encode la valeur de l’attribut de balisage spécifié selon les exigences de l'objet <see cref="T:System.Web.HttpRequest" /> du contexte actuel.</summary>
        <returns>Chaîne qui contient la valeur de l'attribut encodée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> méthode supprime les guillemets doubles («), esperluettes (&) et moins de signes (<) afin de balises que non valides ne sont pas générés, quel que soit l’entrée. L’encodage réel est effectué par le <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeUrl">
      <MemberSignature Language="C#" Value="protected string EncodeUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeUrl (url As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeUrl(System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.EncodeUrl : string -&gt; string" Usage="htmlTextWriter.EncodeUrl url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Chaîne contenant l'URL à encoder.</param>
        <summary>Effectue un encodage URL minimal en convertissant les espaces de l'URL en chaîne « %20 ».</summary>
        <returns>Chaîne contenant l'URL encodée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Encodage d’URL d’un caractère se compose d’un symbole de pourcentage (%), suivi d’une représentation hexadécimale à deux chiffres (non-respect de la casse) du point de code ISO-Latin du caractère. La représentation hexadécimale d’un espace est 20.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment appeler le <xref:System.Web.UI.HtmlTextWriter.EncodeUrl%2A> méthode pour convertir les espaces dans l’URL qui est passé en tant que paramètre dans un <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> appel de méthode.  
  
 [!code-cpp[HtmlTextWriter_Methods#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#6)]
 [!code-vb[HtmlTextWriter_Methods#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.UrlPathEncode(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public override System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="System.Web.UI.HtmlTextWriter.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'encodage utilisé par l'objet <see cref="T:System.Web.UI.HtmlTextWriter" /> pour écrire le contenu sur la page.</summary>
        <value><see cref="T:System.Text.Encoding" /> dans lequel le balisage est écrit sur la page.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.Encoding%2A> propriété obtient sa valeur de la base de <xref:System.IO.TextWriter> objet.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.Encoding%2A> propriété à écrire le type de codage utilisé par un contrôle personnalisé pour afficher le texte à la page qui la contient.  
  
 [!code-cpp[HtmlTextWriter_Properties#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#2)]
 [!code-csharp[HtmlTextWriter_Properties#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#2)]
 [!code-vb[HtmlTextWriter_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="EndRender">
      <MemberSignature Language="C#" Value="public virtual void EndRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EndRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndRender();" />
      <MemberSignature Language="F#" Value="abstract member EndRender : unit -&gt; unit&#xA;override this.EndRender : unit -&gt; unit" Usage="htmlTextWriter.EndRender " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifie un objet <see cref="T:System.Web.UI.HtmlTextWriter" />, ou un objet d'une classe dérivée, qu'un contrôle a terminé le rendu. Vous pouvez utiliser cette méthode pour fermer les éléments de balisage ouverts dans la méthode <see cref="M:System.Web.UI.HtmlTextWriter.BeginRender" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter> implémentation de classe de la <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> méthode n’a aucune fonctionnalité. Vous devez substituer <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> dans une classe dérivée de la <xref:System.Web.UI.HtmlTextWriter> classe pour fournir vos propres fonctionnalités de rendu.  
  
 Vous pouvez utiliser la <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> méthode pour fermer les éléments de balisage ouverts dans le <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      </Docs>
    </Member>
    <Member MemberName="EndTagLeftChars">
      <MemberSignature Language="C#" Value="public const string EndTagLeftChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EndTagLeftChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EndTagLeftChars" />
      <MemberSignature Language="VB.NET" Value="Public Const EndTagLeftChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EndTagLeftChars;" />
      <MemberSignature Language="F#" Value="val mutable EndTagLeftChars : string" Usage="System.Web.UI.HtmlTextWriter.EndTagLeftChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente le crochet gauche et la barre oblique (&lt;/) de la balise de fermeture d’un élément de balisage.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> champ est utilisé par le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> méthode pour construire des balises de fin d’élément.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment restituer la balise de fermeture d’un `<table>` élément de balisage à l’aide de la <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> et le <xref:System.Web.UI.HtmlTextWriter.TagRightChar> champs en tant que valeurs de paramètre dans les appels à la <xref:System.Web.UI.HtmlTextWriter.Write%2A> (méthode).  
  
 Cet exemple de code restitue le balisage suivant :  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EnterStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Écrit la balise d'ouverture d'un élément de balisage qui contient des attributs qui implémentent la présentation et la mise en forme des caractères du style spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberSignature Language="F#" Value="abstract member EnterStyle : System.Web.UI.WebControls.Style -&gt; unit&#xA;override this.EnterStyle : System.Web.UI.WebControls.Style -&gt; unit" Usage="htmlTextWriter.EnterStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
      </Parameters>
      <Docs>
        <param name="style"><see cref="T:System.Web.UI.WebControls.Style" /> qui spécifie la disposition et la mise en forme qu'il faut commencer à appliquer au bloc de balise.</param>
        <summary>Écrit la balise d'ouverture d'un élément <see langword="&lt;span&gt;" /> qui contient des attributs qui implémentent la présentation et la mise en forme des caractères du style spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> méthode pour appliquer des styles, tels que de la largeur de couleur ou de la bordure d’arrière-plan, à un bloc de balisage.  
  
 Le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> et <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> méthodes permettent à un adaptateur pour appareil mobile ou le contrôle à créer un balisage qui utilise la mise en forme des caractères du style spécifié. Utilisez la même valeur pour `style` dans le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> méthode que vous utilisez dans le correspondantes <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> (méthode).  
  
 Le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> surcharge de la <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> méthode restitue la balise d’ouverture d’un `<span>` élément. Cette méthode ajoute ensuite les attributs nécessaires et les attributs de style à la balise d’ouverture de la `<span>` élément pour afficher les paramètres spécifiés par le <xref:System.Web.UI.WebControls.Style> objet. Si vous souhaitez restituer un élément de balisage différent pour contenir les attributs et les attributs de style, utilisez la <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> de surcharge.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser une classe personnalisée nommée `TextSample`, dérivée de la <xref:System.Web.UI.WebControls.WebControl> (classe), qui utilise le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> méthode pour appliquer un <xref:System.Web.UI.WebControls.Style.ForeColor%2A> style à une chaîne de texte.  
  
 Le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> méthode restitue le code HTML `<span style="color:Navy;">`. Le <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> appel de méthode ferme le `<span>` élément après que le texte a été affiché.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberSignature Language="F#" Value="abstract member EnterStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.EnterStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.EnterStyle (style, tag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="style"><see cref="T:System.Web.UI.WebControls.Style" /> qui spécifie la disposition et la mise en forme qu'il faut commencer à appliquer au bloc de balise.</param>
        <param name="tag"><see cref="T:System.Web.UI.HtmlTextWriterTag" /> qui spécifie la balise d'ouverture de l'élément de balisage qui contiendra l'objet de style spécifié dans <paramref name="style" />.</param>
        <summary>Écrit la balise d'ouverture d'un élément de balisage qui contient des attributs qui implémentent la présentation et la mise en forme des caractères du style spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> méthode pour appliquer des styles, tels que de la largeur de couleur ou de la bordure d’arrière-plan, à un bloc de balisage.  
  
 Le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> et <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> méthodes permettent à un adaptateur pour appareil mobile ou le contrôle à créer un balisage qui utilise la mise en forme des caractères du style spécifié. Utilisez la même valeur pour `style` dans le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> méthode que vous utilisez dans le correspondantes <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> (méthode).  
  
 Le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> surcharge de la <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> méthode restitue la balise d’ouverture de l’élément spécifié par le `tag` paramètre. Le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> méthode ajoute ensuite les attributs nécessaires et les attributs de style à la balise d’ouverture de l’élément pour afficher les paramètres qui est spécifiée par le <xref:System.Web.UI.WebControls.Style> objet. Utilisez le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> surcharge pour restituer la balise d’ouverture d’un `<span>` élément.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser une classe personnalisée nommée `TextSample`, dérivée de la <xref:System.Web.UI.WebControls.WebControl> (classe), qui utilise le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> méthode pour appliquer un <xref:System.Web.UI.WebControls.Style.ForeColor%2A> style à une chaîne de texte.  
  
 Le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> méthode restitue le code HTML`<span style="color:Navy;">`. Le <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> appel de méthode ferme le `<span>` élément après que le texte a été affiché.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EqualsChar">
      <MemberSignature Language="C#" Value="public const char EqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char EqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char EqualsChar;" />
      <MemberSignature Language="F#" Value="val mutable EqualsChar : char" Usage="System.Web.UI.HtmlTextWriter.EqualsChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente le signe égal (<see langword="=" />).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous souhaiterez peut-être utiliser le <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> champ au lieu du <xref:System.Web.UI.HtmlTextWriter.EqualsChar> champ lors de la construction du séparateur d’ouverture d’une valeur d’attribut.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment restituer le `src` attribut qui fait partie de sa valeur pour un `<img>` élément. Le code utilise le <xref:System.Web.UI.HtmlTextWriter.EqualsChar> champ dans un <xref:System.Web.UI.HtmlTextWriter.Write%2A> appel de méthode pour restituer le signe égal (=) entre le `src` attribut et sa valeur.  
  
 Cet exemple de code restitue le balisage suivant :  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      </Docs>
    </Member>
    <Member MemberName="EqualsDoubleQuoteString">
      <MemberSignature Language="C#" Value="public const string EqualsDoubleQuoteString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EqualsDoubleQuoteString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsDoubleQuoteString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EqualsDoubleQuoteString;" />
      <MemberSignature Language="F#" Value="val mutable EqualsDoubleQuoteString : string" Usage="System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente un signe égal (=) et un guillemet double (") regroupés dans une chaîne (=").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> champ est utilisé par le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> et <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> méthodes pour construire le délimiteur d’ouverture des valeurs d’attribut.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment restituer un `border` d’attribut pour un `<table>` élément. Le code appelle la <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode pour restituer l’attribut et sa valeur et les utilise le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode pour restituer le <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> et <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> champs.  
  
 Cet exemple de code restitue le balisage suivant :  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ExitStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Écrit la balise de fermeture d'un élément de balisage pour terminer la disposition et la mise en forme de caractères spécifiées.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberSignature Language="F#" Value="abstract member ExitStyle : System.Web.UI.WebControls.Style -&gt; unit&#xA;override this.ExitStyle : System.Web.UI.WebControls.Style -&gt; unit" Usage="htmlTextWriter.ExitStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
      </Parameters>
      <Docs>
        <param name="style"><see cref="T:System.Web.UI.WebControls.Style" /> qui spécifie la disposition et la mise en forme à fermer.</param>
        <summary>Écrit la balise de fermeture d'un élément <see langword="&lt;span&gt;" /> pour terminer la disposition et la mise en forme de caractères spécifiées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> surcharge de la <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%29> méthode restitue la balise de fermeture d’un `<span>` élément après la balise de fermeture du contrôle, la fermeture de l’élément ouvert par le correspondantes <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> appeler.  
  
 Le <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> et <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> méthodes permettent à un adaptateur pour appareil mobile ou le contrôle à créer un balisage qui commence et se termine un bloc à l’aide de la mise en forme des caractères du style spécifié. Utilisez la même valeur pour `style` dans le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> méthode que vous utilisez dans le correspondantes <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> (méthode).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser une classe personnalisée nommée `TextSample`, dérivée de la <xref:System.Web.UI.WebControls.WebControl> (classe), qui utilise le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> méthode pour appliquer un <xref:System.Web.UI.WebControls.Style.ForeColor%2A> style à une chaîne de texte.  
  
 Le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> méthode restitue le code HTML `<span style="color:Navy;">`. Le <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> appel de méthode ferme le `<span>` élément après que le texte a été affiché.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberSignature Language="F#" Value="abstract member ExitStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.ExitStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.ExitStyle (style, tag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="style"><see cref="T:System.Web.UI.WebControls.Style" /> qui spécifie la disposition et le formatage à ne plus appliquer au texte de sortie.</param>
        <param name="tag"><see cref="T:System.Web.UI.HtmlTextWriterTag" /> qui spécifie la balise de fermeture de l’élément de balisage contenant les attributs appliqués au style spécifié. Cela doit correspondre à la clé transmise dans l’appel <see cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" /> correspondant.</param>
        <summary>Écrit la balise de fermeture de l’élément de balisage spécifié pour terminer la disposition et le formatage des caractères spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> surcharge de la <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> méthode restitue la balise de fermeture de l’élément spécifié par `tag` après la balise de fermeture du contrôle, fermeture de l’élément qui a été ouvert par le correspondantes <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> appel de méthode.  
  
 Le <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> et <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> méthodes permettent à un adaptateur pour appareil mobile ou le contrôle à créer un balisage qui commence et se termine un bloc à l’aide de la mise en forme des caractères du style spécifié. Utilisez la même valeur pour `style` dans le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> méthode que vous utilisez dans le correspondantes <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> (méthode).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser une classe personnalisée nommée `TextSample`, dérivée de la <xref:System.Web.UI.WebControls.WebControl> (classe), qui utilise le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> méthode pour appliquer un <xref:System.Web.UI.WebControls.Style.ForeColor%2A> style à une chaîne de texte.  
  
 Le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> méthode restitue le code HTML `<span style="color:Navy;">`. Le <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> appel de méthode ferme le `<span>` élément après que le texte a été affiché.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttributes">
      <MemberSignature Language="C#" Value="protected virtual void FilterAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FilterAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.FilterAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub FilterAttributes ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void FilterAttributes();" />
      <MemberSignature Language="F#" Value="abstract member FilterAttributes : unit -&gt; unit&#xA;override this.FilterAttributes : unit -&gt; unit" Usage="htmlTextWriter.FilterAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Supprime tous les attributs de style et de balisage sur toutes les propriétés de la page ou du contrôle serveur Web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Avant de la restitution des attributs sur un élément de balisage, la <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> méthode est appelée. À son tour, le <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> les appels de méthode le <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> et <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> méthodes pour chaque attribut et un style à restituer.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser une classe personnalisée dérivée de la <xref:System.Web.UI.HtmlTextWriter> (classe), qui remplace le <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> (méthode). Lorsqu’elle est appelée, le <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> remplacement vérifie si le writer de texte restitue toutes `<label>` ou `<a>` éléments :  
  
-   Si un `<label>` élément est rendu, la <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> méthode vérifie si un `style` attribut est rendu sur l’élément et, dans le cas contraire, crée un `style` d’attribut et lui affecte la valeur `color: blue`.  
  
-   Si un `<a>` élément est rendu, la <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> méthode détermine si un `href` attribut est inclus et, dans le cas contraire, ajoute un `href` à l’URL http://www.cohowinery.com.  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="htmlTextWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Efface toutes les mémoires tampons pour <see cref="T:System.Web.UI.HtmlTextWriter" /> en cours et provoque l'écriture des données mises en mémoire tampon dans le flux de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter> implémentation de classe de la <xref:System.Web.UI.HtmlTextWriter.Flush%2A> méthode appelle simplement la <xref:System.IO.TextWriter.Flush%2A> méthode de base.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterAttribute GetAttributeKey (string attrName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterAttribute GetAttributeKey(string attrName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeKey (attrName As String) As HtmlTextWriterAttribute" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterAttribute GetAttributeKey(System::String ^ attrName);" />
      <MemberSignature Language="F#" Value="member this.GetAttributeKey : string -&gt; System.Web.UI.HtmlTextWriterAttribute" Usage="htmlTextWriter.GetAttributeKey attrName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrName">Chaîne qui contient l'attribut pour lequel <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> doit être obtenu.</param>
        <summary>Obtient la valeur d'énumération <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> correspondant à l'attribut spécifié.</summary>
        <returns>Valeur d'énumération <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> de l'attribut spécifié ; sinon, valeur <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> non valide si l'attribut n'est pas membre de l'énumération.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `attrName` est `null` ou une chaîne vide (« »), ou est introuvable dans la table de noms d’attributs, la valeur -1, déclarée dans un <xref:System.Web.UI.HtmlTextWriterAttribute> de l’objet, est retournée.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser une classe dérivée de la <xref:System.Web.UI.HtmlTextWriter> (classe), qui remplace le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> (méthode). Les vérifications de remplacement si `tagKey` est égale à la <xref:System.Web.UI.HtmlTextWriterTag.Font> champ, ce qui indique qu’un `<font>` élément de balisage s’affichera. Si, par conséquent, la substitution appelle le <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> méthode pour savoir si le `<font>` élément contient un <xref:System.Web.UI.HtmlTextWriterAttribute.Size> attribut. Si le <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> retourne `false`, le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> les appels de méthode le <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> (méthode), qui définit le <xref:System.Web.UI.HtmlTextWriterAttribute.Size> et lui affecte la valeur `30pt`.  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.IsAttributeDefined" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeName">
      <MemberSignature Language="C#" Value="protected string GetAttributeName (System.Web.UI.HtmlTextWriterAttribute attrKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetAttributeName(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeName(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeName (attrKey As HtmlTextWriterAttribute) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetAttributeName(System::Web::UI::HtmlTextWriterAttribute attrKey);" />
      <MemberSignature Language="F#" Value="member this.GetAttributeName : System.Web.UI.HtmlTextWriterAttribute -&gt; string" Usage="htmlTextWriter.GetAttributeName attrKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="attrKey"><see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> pour lequel obtenir le nom d'attribut de balisage.</param>
        <summary>Obtient le nom de l'attribut de balisage associé à la valeur <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> spécifiée.</summary>
        <returns>Chaîne contenant le nom de l'attribut de balisage.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A> méthode retourne une chaîne vide (" »), si `attrKey` n’est pas valide <xref:System.Web.UI.HtmlTextWriterAttribute> valeur.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A> méthode pour convertir un <xref:System.Web.UI.HtmlTextWriterAttribute.Size> valeur d’énumération à son nom de chaîne.  
  
 [!code-cpp[HtmlTextWriter_Methods3#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#6)]
 [!code-vb[HtmlTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterStyle GetStyleKey (string styleName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterStyle GetStyleKey(string styleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleKey (styleName As String) As HtmlTextWriterStyle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterStyle GetStyleKey(System::String ^ styleName);" />
      <MemberSignature Language="F#" Value="member this.GetStyleKey : string -&gt; System.Web.UI.HtmlTextWriterStyle" Usage="htmlTextWriter.GetStyleKey styleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="styleName">Attribut de style pour lequel obtenir <see cref="T:System.Web.UI.HtmlTextWriterStyle" />.</param>
        <summary>Obtient la valeur d'énumération <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> correspondant au style spécifié.</summary>
        <returns>Valeur de l'énumération <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> correspondant à <paramref name="styleName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A> méthode retourne la valeur -1 de type un <xref:System.Web.UI.HtmlTextWriterStyle> valeur, si `styleName` ne correspond pas à aucun <xref:System.Web.UI.HtmlTextWriterStyle> valeur d’énumération.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> méthode dans une classe dérivée de la <xref:System.Web.UI.HtmlTextWriter> classe. Le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> substitution détermine si un `<label>` balisage s’affichera et, dans ce cas, vérifie l’élément pour un <xref:System.Web.UI.HtmlTextWriterStyle.Color> attribut. Si un <xref:System.Web.UI.HtmlTextWriterStyle.Color> attribut n’a pas été défini, le <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A> méthode est utilisée comme premier paramètre dans un appel à la <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> méthode pour ajouter un <xref:System.Web.UI.HtmlTextWriterStyle.Color> attribut un `<label>` élément de balisage et ensemble la <xref:System.Web.UI.HtmlTextWriterStyle.Color> attribut `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#1)]
 [!code-vb[HtmlTextWriter_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleName">
      <MemberSignature Language="C#" Value="protected string GetStyleName (System.Web.UI.HtmlTextWriterStyle styleKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetStyleName(valuetype System.Web.UI.HtmlTextWriterStyle styleKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleName(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleName (styleKey As HtmlTextWriterStyle) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetStyleName(System::Web::UI::HtmlTextWriterStyle styleKey);" />
      <MemberSignature Language="F#" Value="member this.GetStyleName : System.Web.UI.HtmlTextWriterStyle -&gt; string" Usage="htmlTextWriter.GetStyleName styleKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleKey" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="styleKey"><see cref="T:System.Web.UI.HtmlTextWriterStyle" /> pour lequel obtenir le nom d'attribut de style.</param>
        <summary>Obtient le nom de l'attribut de style de balisage associé à la valeur d'énumération <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> spécifiée.</summary>
        <returns>Nom de l'attribut de style associé à la valeur d'énumération <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> spécifiée dans <paramref name="styleKey" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `styleKey` n’est pas valide <xref:System.Web.UI.HtmlTextWriterStyle> objet, le <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A> méthode retourne une chaîne vide ( » »).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment vérifier si un `<label>` élément est rendu. Si, par conséquent, il vérifie si un <xref:System.Web.UI.HtmlTextWriterStyle.Color> attribut de style a été défini sur l’élément. Si l’attribut n’a pas été défini, le <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> méthode est appelée et le <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A> méthode convertit le <xref:System.Web.UI.HtmlTextWriterStyle.Color> membre d’énumération en sa représentation sous forme de chaîne à passer à la <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> (méthode).  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetTagKey">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.HtmlTextWriterTag GetTagKey (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Web.UI.HtmlTextWriterTag GetTagKey(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagKey (tagName As String) As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::HtmlTextWriterTag GetTagKey(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member GetTagKey : string -&gt; System.Web.UI.HtmlTextWriterTag&#xA;override this.GetTagKey : string -&gt; System.Web.UI.HtmlTextWriterTag" Usage="htmlTextWriter.GetTagKey tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Élément de balisage pour lequel obtenir <see cref="T:System.Web.UI.HtmlTextWriterTag" />.</param>
        <summary>Obtient la valeur d'énumération <see cref="T:System.Web.UI.HtmlTextWriterTag" /> associée à l'élément de balisage spécifié.</summary>
        <returns>Valeur d'énumération <see cref="T:System.Web.UI.HtmlTextWriterTag" /> ; sinon, si le paramètre <paramref name="tagName" /> n'est pas associé à une valeur <see cref="T:System.Web.UI.HtmlTextWriterTag" /> spécifique, <see cref="F:System.Web.UI.HtmlTextWriterTag.Unknown" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `tagName` est `null`, une chaîne vide (« »), ou est introuvable dans la table des noms de balise de balisage, la <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> méthode retourne le <xref:System.Web.UI.HtmlTextWriterTag.Unknown> champ.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment substituer la surcharge de la <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> méthode qui prend une chaîne comme paramètre. La chaîne est passée à la <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> (méthode), qui la convertit en correspondant <xref:System.Web.UI.HtmlTextWriterTag> membre d’énumération, puis passe à la <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> surcharge qui accepte un <xref:System.Web.UI.HtmlTextWriterTag> valeur d’énumération en tant que paramètre.  
  
 [!code-cpp[HtmlTextWriter_Methods3#8](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#8)]
 [!code-csharp[HtmlTextWriter_Methods3#8](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#8)]
 [!code-vb[HtmlTextWriter_Methods3#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="GetTagName">
      <MemberSignature Language="C#" Value="protected virtual string GetTagName (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetTagName(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagName(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagName (tagKey As HtmlTextWriterTag) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetTagName(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="F#" Value="abstract member GetTagName : System.Web.UI.HtmlTextWriterTag -&gt; string&#xA;override this.GetTagName : System.Web.UI.HtmlTextWriterTag -&gt; string" Usage="htmlTextWriter.GetTagName tagKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey"><see cref="T:System.Web.UI.HtmlTextWriterTag" /> pour lequel obtenir l'élément de balisage.</param>
        <summary>Obtient l'élément de balisage associé à la valeur d'énumération <see cref="T:System.Web.UI.HtmlTextWriterTag" /> spécifiée.</summary>
        <returns>Chaîne représentant l'élément de balisage.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `tagKey` n’est pas valide <xref:System.Web.UI.HtmlTextWriterTag> valeur, le <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A> méthode retourne une chaîne vide ( » »).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment fermer une `<font>` élément à l’aide de la <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> (méthode). Le <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> les appels de méthode le <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A> méthode pour convertir le <xref:System.Web.UI.HtmlTextWriterTag.Font> valeur à une chaîne.  
  
 [!code-cpp[HtmlTextWriter_Methods3#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods3#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#7)]
 [!code-vb[HtmlTextWriter_Methods3#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public int Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Indent { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Indent : int with get, set" Usage="System.Web.UI.HtmlTextWriter.Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nombre de tabulations du retrait à respecter au début d'une ligne HTML.</summary>
        <value>Le nombre de tabulations pour la mise en retrait de chaque ligne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mise en retrait est effectuée en écrivant la chaîne spécifiée par le `tabString` paramètre de la <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> constructeur le nombre de fois spécifié par le <xref:System.Web.UI.HtmlTextWriter.Indent%2A> propriété.  
  
 Si la <xref:System.Web.UI.HtmlTextWriter.Indent%2A> est définie sur une valeur négative, il est modifié en 0 avant d’être enregistrées.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment incrémenter la valeur affectée à la <xref:System.Web.UI.HtmlTextWriter.Indent%2A> propriété lorsque les attributs ont été ajoutés à la balise d’ouverture d’un `<span>` élément et le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> méthode a été appelée. Cela augmente la mise en retrait de tout balisage restitué à l’intérieur du `<span>` élément.  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      </Docs>
    </Member>
    <Member MemberName="InnerWriter">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter InnerWriter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter InnerWriter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.InnerWriter" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerWriter As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::TextWriter ^ InnerWriter { System::IO::TextWriter ^ get(); void set(System::IO::TextWriter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InnerWriter : System.IO.TextWriter with get, set" Usage="System.Web.UI.HtmlTextWriter.InnerWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le TextWriter à utiliser pour écrire le contenu interne de l'élément de balisage.</summary>
        <value><see cref="T:System.IO.TextWriter" /> qui écrit le contenu de balisage interne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contenu de balisage interne est le texte placé entre balises d’ouverture et fermeture d’un élément de langage de balisage.  
  
 Si le <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A> propriété est définie sur une <xref:System.IO.TextWriter> objet qui est une instance de la <xref:System.Web.HttpWriter> (classe), ce fait est noté et une référence séparée est enregistrée.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser un contrôle serveur Web personnalisé, dérivé de la <xref:System.Web.UI.WebControls.WebControl> (classe), qui remplace le <xref:System.Web.UI.Control.Render%2A> (méthode). Il utilise le <xref:System.Web.UI.HtmlTextWriter> classe permettant d’écrire un `<font>` élément. Une fois qu’il écrit la balise d’ouverture de l’élément, il utilise le <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A> propriété pour écrire la chaîne `"<br> The time on the server:"` et concatène cette chaîne avec la valeur de la <xref:System.DateTime.Now%2A?displayProperty=nameWithType> propriété.  
  
 [!code-cpp[HtmlTextWriter_Properties#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#3)]
 [!code-csharp[HtmlTextWriter_Properties#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#3)]
 [!code-vb[HtmlTextWriter_Properties#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpWriter" />
        <altmember cref="T:System.Web.UI.WebControls.WebControl" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Détermine si l'attribut de balisage spécifié et sa valeur sont rendus au cours de l'appel suivant à la méthode <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="member this.IsAttributeDefined : System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="htmlTextWriter.IsAttributeDefined key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> associé à l'attribut de balisage.</param>
        <summary>Détermine si l'attribut de balisage spécifié et sa valeur sont rendus au cours de l'appel suivant à la méthode <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <returns><see langword="true" /> si l'attribut est rendu au cours de l'appel suivant à la méthode <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la valeur à assigner à la <xref:System.Web.UI.HtmlTextWriterAttribute> de l’objet, utilisez le <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%40%29> surcharge au lieu de celle-ci.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser un remplacement de la <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> méthode dans une classe qui hérite de la <xref:System.Web.UI.HtmlTextWriter> classe. Le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> substitution vérifie si un `<font>` élément de balisage s’affichera. Si, par conséquent, la substitution appelle le <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> méthode permettant de vérifier si le `<font>` élément contient un <xref:System.Web.UI.HtmlTextWriterAttribute.Size> attribut. Si ce n’est pas le cas, le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> les appels de méthode le <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> (méthode), qui définit le <xref:System.Web.UI.HtmlTextWriterAttribute.Size> d’attribut et définit sa valeur sur `30pt`.  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberSignature Language="F#" Value="member this.IsAttributeDefined : System.Web.UI.HtmlTextWriterAttribute *  -&gt; bool" Usage="htmlTextWriter.IsAttributeDefined (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> associé à l'attribut de balisage.</param>
        <param name="value">Valeur à affecter à l’attribut.</param>
        <summary>Détermine si l'attribut de balisage spécifié et sa valeur sont rendus au cours de l'appel suivant à la méthode <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <returns><see langword="true" /> si l'attribut est rendu au cours de l'appel suivant à la méthode <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> retourne de la méthode `true`, la valeur à assigner à la <xref:System.Web.UI.HtmlTextWriterAttribute> est retourné dans le `value` paramètre.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsStyleAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Détermine si l'attribut de style de balisage spécifié est rendu au cours de l'appel suivant à la méthode <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="member this.IsStyleAttributeDefined : System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="htmlTextWriter.IsStyleAttributeDefined key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterStyle" /> associé à l'attribut.</param>
        <summary>Détermine si l'attribut de style de balisage spécifié est rendu au cours de l'appel suivant à la méthode <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <returns><see langword="true" /> si l'attribut est rendu au cours de l'appel suivant à la méthode <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la valeur qui sera restituée avec l’attribut de style spécifié, utilisez la <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%40%29> surcharge de la <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> (méthode).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment vérifier si un `<label>` élément est rendu. Dans ce cas, le <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> méthode vérifie si un <xref:System.Web.UI.HtmlTextWriterStyle.Color> attribut de style a été défini sur l’élément. Si le <xref:System.Web.UI.HtmlTextWriterStyle.Color> attribut n’a pas été défini, le <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> méthode définit le <xref:System.Web.UI.HtmlTextWriterStyle.Color> d’attribut et définit sa valeur sur `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberSignature Language="F#" Value="member this.IsStyleAttributeDefined : System.Web.UI.HtmlTextWriterStyle *  -&gt; bool" Usage="htmlTextWriter.IsStyleAttributeDefined (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterStyle" /> associé à l'attribut.</param>
        <param name="value">Valeur assignée à l'attribut de style.</param>
        <summary>Détermine si l'attribut de style de balisage spécifié et sa valeur sont rendus au cours de l'appel suivant à la méthode <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <returns><see langword="true" /> si l'attribut et sa valeur sont rendus au cours de l'appel suivant à la méthode <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> retourne de la méthode `true`, la valeur à assigner à la <xref:System.Web.UI.HtmlTextWriterStyle> attribut n’est retourné dans le `value` paramètre.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public virtual bool IsValidFormAttribute (string attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidFormAttribute(string attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidFormAttribute (attribute As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidFormAttribute(System::String ^ attribute);" />
      <MemberSignature Language="F#" Value="abstract member IsValidFormAttribute : string -&gt; bool&#xA;override this.IsValidFormAttribute : string -&gt; bool" Usage="htmlTextWriter.IsValidFormAttribute attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attribute">Chaîne qui contient le nom de l'attribut à activer.</param>
        <summary>Active un attribut pour garantir qu'il peut être restitué dans la balise d'ouverture d'un élément de balisage <see langword="&lt;form&gt;" />.</summary>
        <returns>Toujours <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter> implémentation de classe de la <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> retourne de la méthode `true` pour tous les attributs. Remplacer le <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> pour limiter les attributs qui peuvent être rendus dans la balise d’ouverture d’un `<form>` élément.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Remplacer le <see cref="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" /> méthode pour retourner <see langword="true" /> uniquement pour les attributs qui peuvent être inclus dans le <see langword="&lt;form&gt;" /> élément du balisage pour lequel la classe dérivée de la <see cref="T:System.Web.UI.HtmlTextWriter" /> classe est destinée.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="public override string NewLine { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLine" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.NewLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property NewLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NewLine { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NewLine : string with get, set" Usage="System.Web.UI.HtmlTextWriter.NewLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne de terminaison de ligne utilisée pour l'objet <see cref="T:System.Web.UI.HtmlTextWriter" />.</summary>
        <value>Chaîne de terminaison de ligne utilisée par le <see cref="T:System.Web.UI.HtmlTextWriter" /> en cours.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne de marque de fin de ligne par défaut est un retour chariot, suivi d’un saut de ligne (« \r\n »).  
  
 La chaîne de terminaison de ligne est écrite dans le flux de sortie chaque fois qu’un de le <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> méthodes est appelée. Si le <xref:System.Web.UI.HtmlTextWriter.NewLine%2A> propriété est définie sur `null`, le caractère de nouvelle ligne par défaut est utilisé.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser une classe personnalisée dérivée de la <xref:System.Web.UI.HtmlTextWriter> (classe), qui remplace le <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> (méthode). Lorsqu’elle est appelée, le <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> remplacement vérifie si le writer de texte restitue toutes `<label>` ou `<a>` éléments. Dans ce cas, le <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> méthode détermine si un attribut de style est défini pour l’étiquette. Si aucun style n’est défini, le <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> méthode définit la valeur par défaut pour le `style:color` attribut en bleu. Le <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> méthode utilise ensuite le <xref:System.Web.UI.HtmlTextWriter.NewLine%2A> saut dans la balise de propriété pour insérer une ligne et écrit les autres attributs définis.  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.IO.TextWriter.NewLine" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="abstract member OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool&#xA;override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="htmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Chaîne qui contient le nom de l'attribut à restituer.</param>
        <param name="value">Chaîne contenant la valeur assignée à l'attribut.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> associé à l'attribut de balisage.</param>
        <summary>Détermine si l'attribut de balisage spécifié et sa valeur peuvent être rendus dans l'élément de balisage actuel.</summary>
        <returns>Toujours <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter> implémentation de classe de la <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> méthode retourne toujours `true`. Le <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> substitutions peuvent déterminer si un attribut sera restitué dans la page.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> (méthode). Si un <xref:System.Web.UI.HtmlTextWriterAttribute.Size> attribut est rendu, mais la <xref:System.Web.UI.HtmlTextWriterAttribute.Size> valeur n’est pas `30pt`, le <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> remplacer les appels le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> méthode pour ajouter un <xref:System.Web.UI.HtmlTextWriterAttribute.Size> d’attribut et définissez sa valeur sur `30pt`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#5)]
 [!code-vb[MarkupTextWriter_Methods3#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Si vous héritez de la <see cref="T:System.Web.UI.HtmlTextWriter" /> (classe), vous pouvez remplacer le <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> méthode pour retourner <see langword="false" /> afin d’empêcher un attribut d’être restitué du tout, être restitué sur un élément particulier ou être restitué pour une balise particulière. Par exemple, si vous ne souhaitez pas que l’objet dérivé <see cref="T:System.Web.UI.HtmlTextWriter" /> pour restituer le <see langword="bgcolor" /> attribut <see langword="&lt;table&gt;" /> éléments, vous pouvez remplacer le <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> et retourner <see langword="false" /> lorsque <paramref name="name" /> passe <see langword="bgcolor" /> et le <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /> valeur de propriété est <see langword="table" />.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool&#xA;override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="htmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Chaîne contenant le nom de l'attribut de style à restituer.</param>
        <param name="value">Chaîne contenant la valeur assignée à l'attribut de style.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterStyle" /> associé à l'attribut de style.</param>
        <summary>Détermine si l'attribut de style de balisage spécifié et sa valeur peuvent être rendus dans l'élément de balisage actuel.</summary>
        <returns>Toujours <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter> implémentation de classe de la <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> méthode retourne toujours `true`. Le <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> substitutions peuvent déterminer si un attribut de style s’affichera à la page.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> (méthode). Si un <xref:System.Web.UI.HtmlTextWriterStyle.Color> attribut de style est rendu, mais la <xref:System.Web.UI.HtmlTextWriterStyle.Color> valeur n’est pas `purple`, le <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> remplacer utilise le <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> méthode pour définir le <xref:System.Web.UI.HtmlTextWriterStyle.Color> attribut `purple`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#6)]
 [!code-vb[MarkupTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Si vous héritez de la <see cref="T:System.Web.UI.HtmlTextWriter" /> (classe), vous pouvez remplacer le <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> méthode pour retourner <see langword="false" /> pour empêcher un attribut de style de rendu du tout, être restitué sur un élément particulier ou rendu pour un langage de balisage particulière. Par exemple, si vous ne souhaitez pas que l’objet qui est dérivé de <see cref="T:System.Web.UI.HtmlTextWriter" /> pour restituer le <see langword="color" /> attribut de style à un <see langword="&lt;p&gt;" /> élément, vous pouvez remplacer le <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> et retourner <see langword="false" /> lorsque <paramref name="name" /> passe <see langword="color" />et <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /> valeur de propriété est <see langword="p" />.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="abstract member OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool&#xA;override this.OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool" Usage="htmlTextWriter.OnTagRender (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Chaîne contenant le nom de l'élément à restituer.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterTag" /> associé à l'élément.</param>
        <summary>Détermine si l'élément de balisage spécifié sera rendu sur la page qui a effectué la demande.</summary>
        <returns>Toujours <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter> implémentation de classe de la <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> méthode retourne toujours `true`. Le <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> substitutions peuvent déterminer si un élément sera restitué dans la page.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> (méthode). Si un <xref:System.Web.UI.HtmlTextWriterTag.Font> élément est rendu, la <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> remplacer utilise le <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> méthode pour déterminer si un <xref:System.Web.UI.HtmlTextWriterAttribute.Size> attribut est rendu. Si non, il utilise le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> méthode pour créer un <xref:System.Web.UI.HtmlTextWriterAttribute.Size> d’attribut et définissez sa valeur sur `20pt`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#4)]
 [!code-vb[MarkupTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Si vous héritez de la <see cref="T:System.Web.UI.HtmlTextWriter" /> (classe), vous pouvez remplacer le <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" /> méthode pour retourner <see langword="false" /> pour empêcher le rendu du tout, ou pour un langage de balisage particulier un élément de balisage. Par exemple, si vous ne souhaitez pas que l’objet qui est dérivé de <see cref="T:System.Web.UI.HtmlTextWriter" /> pour restituer le <see langword="&lt;font&gt;" /> élément, vous pouvez remplacer le <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" /> méthode pour retourner <see langword="false" /> lorsqu’une page est demandée qui contient un <see langword="&lt;font&gt;" /> élément.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="OutputTabs">
      <MemberSignature Language="C#" Value="protected virtual void OutputTabs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputTabs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputTabs ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputTabs();" />
      <MemberSignature Language="F#" Value="abstract member OutputTabs : unit -&gt; unit&#xA;override this.OutputTabs : unit -&gt; unit" Usage="htmlTextWriter.OutputTabs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Écrit une série de tabulations représentant le niveau de mise en retrait d'une ligne de caractères de balisage.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> méthode utilise le <xref:System.Web.UI.HtmlTextWriter.Indent%2A> propriété afin de déterminer combien de tabulations écrire obtenir la mise en retrait souhaitée.  
  
 La chaîne de tabulation est spécifiée avec la <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> constructeur. Si aucune chaîne de tabulation n’est spécifié, le <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> constante (`\t`) est utilisé.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> méthode dans une classe dérivée de la <xref:System.Web.UI.HtmlTextWriter> classe. Le <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> remplacent toujours utilise le <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> constante pour effectuer la mise en retrait.  
  
 [!code-cpp[HtmlTextWriter_Methods#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#7)]
 [!code-vb[HtmlTextWriter_Methods#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.Indent" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName="PopEndTag">
      <MemberSignature Language="C#" Value="protected string PopEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string PopEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      <MemberSignature Language="VB.NET" Value="Protected Function PopEndTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ PopEndTag();" />
      <MemberSignature Language="F#" Value="member this.PopEndTag : unit -&gt; string" Usage="htmlTextWriter.PopEndTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Supprime l'élément de balisage enregistré en dernier de la liste d'éléments rendus.</summary>
        <returns><see cref="T:System.String" /> contenant l'élément de balisage rendu en dernier.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les éléments sont ajoutés à la liste des éléments de balisage rendu par le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> (méthode). Le <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> méthode supprime les éléments de balisage de la liste en appelant le <xref:System.Web.UI.HtmlTextWriter.PopEndTag%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La liste des éléments rendus est vide.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PushEndTag">
      <MemberSignature Language="C#" Value="protected void PushEndTag (string endTag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void PushEndTag(string endTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub PushEndTag (endTag As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void PushEndTag(System::String ^ endTag);" />
      <MemberSignature Language="F#" Value="member this.PushEndTag : string -&gt; unit" Usage="htmlTextWriter.PushEndTag endTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endTag">Balise de fermeture de l'élément de balisage.</param>
        <summary>Enregistre l'élément de balisage spécifié pour utilisation ultérieure lors de la génération de la balise de fin d'un élément de balisage.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les éléments sont ajoutés à la liste des éléments de balisage rendus lorsque le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> les appels de méthode le <xref:System.Web.UI.HtmlTextWriter.PushEndTag%2A> (méthode). Le <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> méthode supprime les éléments de balisage de la liste après elle restitue la balise de fin de l’élément.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttribute">
      <MemberSignature Language="C#" Value="protected static void RegisterAttribute (string name, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterAttribute(string name, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterAttribute(System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterAttribute (name As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterAttribute(System::String ^ name, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="static member RegisterAttribute : string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterAttribute (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Chaîne contenant le nom de l'attribut de balisage à inscrire.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> qui correspond au nom de l'attribut.</param>
        <summary>Inscrit les attributs de balisage, qu'il s'agisse de littéraux ou d'attributs générés dynamiquement, à partir du fichier source, pour qu'ils puissent être correctement rendus au client ayant fait la demande.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les attributs prédéfinis du langage de balisage HTML sont inscrits par les appels à la <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> méthode lors de la première <xref:System.Web.UI.HtmlTextWriter> objet est créé. Attributs dynamiques peuvent être inscrits à l’aide de la <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> (méthode) à d’autres moments.  
  
 La table d’inscription utilisée par le <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> méthode est `static`, de sorte que l’inscription d’attributs s’applique à tous les <xref:System.Web.UI.HtmlTextWriter> objets sur l’ordinateur hôte.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStyle">
      <MemberSignature Language="C#" Value="protected static void RegisterStyle (string name, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterStyle(string name, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterStyle(System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterStyle (name As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterStyle(System::String ^ name, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="static member RegisterStyle : string * System.Web.UI.HtmlTextWriterStyle -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterStyle (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Chaîne passée du fichier source et spécifiant le nom du style.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterStyle" /> qui correspond au style spécifié.</param>
        <summary>Inscrit les propriétés de style de balisage, qu'il s'agisse de littéraux ou de propriétés générées dynamiquement, à partir du fichier source, pour qu'elles puissent être correctement rendues au client ayant fait la demande.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les attributs de feuille (CSS) style en cascade prédéfinies du langage de balisage HTML sont inscrits par les appels à la <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> méthode lors de la première <xref:System.Web.UI.HtmlTextWriter> objet est créé. Les attributs de style dynamiques peuvent être inscrits à l’aide de la <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> (méthode) à d’autres moments.  
  
 La table d’inscription utilisée par le <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> méthode est `static`, de sorte que l’inscription d’attributs s’applique à tous les <xref:System.Web.UI.HtmlTextWriter> objets sur l’ordinateur hôte.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="RegisterTag">
      <MemberSignature Language="C#" Value="protected static void RegisterTag (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterTag(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterTag(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterTag (name As String, key As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterTag(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="static member RegisterTag : string * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterTag (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Chaîne qui contient la balise HTML.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterTag" /> qui spécifie l'élément à restituer.</param>
        <summary>Inscrit les balises de balisage, qu'il s'agisse de littéraux ou de balises générées dynamiquement, à partir du fichier source, pour qu'elles puissent être correctement rendues au client ayant fait la demande.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les balises prédéfinies du langage HTML sont inscrits par les appels à la <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> méthode lors de la première <xref:System.Web.UI.HtmlTextWriter> objet est créé. Balises dynamiques peuvent être inscrits à l’aide de la <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> (méthode) à d’autres moments.  
  
 La table d’inscription utilisée par le <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> méthode est `static`, de sorte que l’inscription des balises s’applique à tous les <xref:System.Web.UI.HtmlTextWriter> objets sur l’ordinateur hôte.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterContent();" />
      <MemberSignature Language="F#" Value="abstract member RenderAfterContent : unit -&gt; string&#xA;override this.RenderAfterContent : unit -&gt; string" Usage="htmlTextWriter.RenderAfterContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Écrit le texte ou l'espacement survenant après le contenu et avant la balise de fermeture de l'élément de balisage à rendre dans le flux de sortie de balisage.</summary>
        <returns>Chaîne qui contient l'espacement ou le texte à écrire à la suite du contenu de l'élément.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> méthode peut être utile si vous souhaitez insérer des éléments enfants dans l’élément de balisage actuel.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> méthode dans une classe dérivée de la <xref:System.Web.UI.HtmlTextWriter> classe pour déterminer si un `<label>` élément est rendu. Dans ce cas, le <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> remplacement insère la balise de fermeture d’un `<font>` élément situé juste avant la balise de fermeture de la `<label>` élément. Si un élément autre que `<label>` est rendu, la <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> méthode de base est utilisée.  
  
 [!code-cpp[HtmlTextWriter_Methods1#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#3)]
 [!code-vb[HtmlTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Le <see cref="T:System.Web.UI.HtmlTextWriter" /> implémentation de classe de la <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" /> retourne de la méthode <see langword="null" />. Substituer <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" /> si vous souhaitez écrire du texte ou espacement après le contenu de l’élément, mais avant la balise de fermeture.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderAfterTag : unit -&gt; string&#xA;override this.RenderAfterTag : unit -&gt; string" Usage="htmlTextWriter.RenderAfterTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Écrit l'espacement ou le texte survenant après la balise de fermeture d'un élément de balisage.</summary>
        <returns>Espacement ou texte à écrire à la suite de la balise de fermeture de l'élément.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> méthode peut être utile si vous souhaitez restituer des balises de fermeture supplémentaires après la balise d’élément.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> méthode pour déterminer si une classe dérivée de la <xref:System.Web.UI.HtmlTextWriter> classe effectue le rendu d’un `<label>` élément. Dans ce cas, le <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> remplacement insère la balise de fermeture d’un `<font>` élément immédiatement après le `<label>` élément. Si ce n’est pas un `<label>` élément, le <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> méthode de base est utilisée.  
  
 [!code-cpp[HtmlTextWriter_Methods4#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#2)]
 [!code-vb[HtmlTextWriter_Methods4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Le <see cref="T:System.Web.UI.HtmlTextWriter" /> implémentation de classe de la <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" /> retourne de la méthode <see langword="null" />. Substituer <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" /> si vous souhaitez écrire du texte ou espacement après la balise de fermeture de l’élément.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeContent();" />
      <MemberSignature Language="F#" Value="abstract member RenderBeforeContent : unit -&gt; string&#xA;override this.RenderBeforeContent : unit -&gt; string" Usage="htmlTextWriter.RenderBeforeContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Écrit le texte ou l'espacement avant le contenu et après la balise d'ouverture d'un élément de balisage.</summary>
        <returns>Espacement ou texte à écrire avant le contenu de l'élément de balisage. Si elle n'est pas substituée, <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> retourne <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> méthode peut être utile si vous souhaitez insérer des éléments enfants dans l’élément de balisage en cours avant le balisage interne.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> méthode pour déterminer si une classe dérivée de la <xref:System.Web.UI.HtmlTextWriter> classe est sur le point de restituer un `<label>` élément. Dans ce cas, le <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> remplacement insère la balise d’ouverture d’un `<font>` élément situé juste après la balise d’ouverture de la `<label>` élément. Si ce n’est pas un `<label>` élément, le <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> méthode de base est utilisée.  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Le <see cref="T:System.Web.UI.HtmlTextWriter" /> implémentation de classe de la <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> retourne de la méthode <see langword="null" />. Substituer <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> si vous souhaitez écrire du texte ou espacement après la balise d’ouverture mais avant le contenu de l’élément.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderBeforeTag : unit -&gt; string&#xA;override this.RenderBeforeTag : unit -&gt; string" Usage="htmlTextWriter.RenderBeforeTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Écrit tout texte ou espacement survenant avant la balise d'ouverture d'un élément de balisage.</summary>
        <returns>Texte ou espacement à écrire avant la balise d'ouverture d'un élément de balisage. Si la méthode n'est pas substituée, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> méthode peut être utile si vous souhaitez restituer des balises d’ouverture supplémentaires avant la balise d’ouverture de l’élément prévu.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> méthode pour déterminer si une classe dérivée de la <xref:System.Web.UI.HtmlTextWriter> classe est sur le point de restituer un `<label>` élément. Dans ce cas, le <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> remplacement insère la balise d’ouverture d’un `<font>` élément immédiatement avant le `<label>` élément. S’il n’est pas rendu un `<label>` élément, le <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> méthode de base est utilisée.  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Le <see cref="T:System.Web.UI.HtmlTextWriter" /> implémentation de classe de la <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" /> retourne de la méthode <see langword="null" />. Substituer <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" /> si vous souhaitez écrire du texte ou espacement avant la balise d’ouverture de l’élément.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RenderBeginTag">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Écrit la balise d'ouverture d'un élément de balisage dans un flux de sortie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member RenderBeginTag : string -&gt; unit&#xA;override this.RenderBeginTag : string -&gt; unit" Usage="htmlTextWriter.RenderBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Chaîne contenant le nom de l’élément de balisage pour lequel afficher la balise d’ouverture.</param>
        <summary>Écrit la balise d’ouverture de l’élément de balisage spécifié dans le flux de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> la substitution de la <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.String%29> méthode, si l’élément de balisage ne fait pas partie de la <xref:System.Web.UI.HtmlTextWriterTag> valeurs d’énumération.  
  
 Pour générer un élément de balisage à l’aide de la <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> méthode, appelez d’abord la <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> et <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> méthodes, si nécessaire, pour spécifier les attributs de l’élément ou les attributs de style qui doivent apparaître dans la balise d’ouverture de l’élément. Après avoir généré le balisage interne, appelez le <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> méthode permettant de générer la balise de fermeture.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment appeler le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> méthode dans un contrôle personnalisé pour restituer la balise d’ouverture d’une non standard `MyTag` élément. L’exemple de code appelle ensuite la <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode pour restituer le balisage interne, puis appelle la <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> méthode pour fermer l’élément.  
  
 Cet exemple de code génère le balisage suivant :  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagKey As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="F#" Value="abstract member RenderBeginTag : System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.RenderBeginTag : System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.RenderBeginTag tagKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">Une des valeurs <see cref="T:System.Web.UI.HtmlTextWriterTag" /> définissant la balise d'ouverture de l'élément de balisage à restituer.</param>
        <summary>Écrit la balise d'ouverture de l'élément de balisage associé à la valeur d'énumération <see cref="T:System.Web.UI.HtmlTextWriterTag" /> spécifiée dans le flux de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> surcharge de la <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.Web.UI.HtmlTextWriterTag%29> méthode si l’élément de balisage est de type connu qui est un de la <xref:System.Web.UI.HtmlTextWriterTag> valeurs d’énumération.  
  
 Pour générer un élément de balisage à l’aide de la <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> méthode, appelez d’abord la <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> et <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> méthodes, si nécessaire, pour spécifier les attributs de l’élément ou les attributs de style qui doivent apparaître dans la balise d’ouverture de l’élément. Après avoir généré le balisage interne, appelez le <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> méthode permettant de générer la balise de fermeture.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> méthode à la sortie de la balise d’ouverture d’un `<img>` élément. Les attributs sont ajoutés à l’élément par le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> méthode sera dans l’ouverture `<img>` balise. Le <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> méthode est utilisée pour générer la balise de fermeture.  
  
 Cet exemple de code génère le balisage suivant :  
  
 `<img alt="Encoding &quot;Required&quot;" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderEndTag">
      <MemberSignature Language="C#" Value="public virtual void RenderEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderEndTag ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderEndTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderEndTag : unit -&gt; unit&#xA;override this.RenderEndTag : unit -&gt; unit" Usage="htmlTextWriter.RenderEndTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Écrit la balise de fermeture  d'un élément de balisage dans un flux de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez le <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> méthode après le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> surcharge est appelée et après que tout le contenu entre les balises d’ouverture et fermeture (balisage interne) de l’élément a été affiché.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment appeler le <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> méthode après les deux le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> méthode qui génère la balise d’ouverture et la <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode qui restitue le balisage interne entre les balises d’ouverture et fermeture de personnalisé`MyTag` élément ont été appelées.  
  
 Cet exemple de code génère le balisage suivant :  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingChars">
      <MemberSignature Language="C#" Value="public const string SelfClosingChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingChars" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingChars;" />
      <MemberSignature Language="F#" Value="val mutable SelfClosingChars : string" Usage="System.Web.UI.HtmlTextWriter.SelfClosingChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente un espace et la marque de barre oblique de fermeture automatique (/) d'une balise.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.SelfClosingChars> champ est utilisé dans les éléments de balisage qui se ferment automatiquement. Par exemple :  
  
 `<input type="submit" value="go"  />`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingTagEnd">
      <MemberSignature Language="C#" Value="public const string SelfClosingTagEnd;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingTagEnd" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingTagEnd As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingTagEnd;" />
      <MemberSignature Language="F#" Value="val mutable SelfClosingTagEnd : string" Usage="System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente la barre oblique de fermeture et le crochet droit (/&gt;) d’un élément de balisage de fermeture automatique.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> champ est utilisé par le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> méthode lors de la construction des éléments de balisage de fermeture automatique.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment restituer la valeur de personnalisé `FileName` propriété suivie d’un guillemet et les caractères représentés par le <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> champ. L’exemple de code appelle la <xref:System.Web.UI.HtmlTextWriter.Write%2A> et transmet le <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> champ comme argument de paramètre pour fermer l’élément.  
  
 Cet exemple de code restitue la `FileName` valeur de propriété, puis le balisage suivant :  
  
 `" />`  
  
 [!code-csharp[MarkupTextWriter_Constants#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#11)]
 [!code-vb[MarkupTextWriter_Constants#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SemicolonChar">
      <MemberSignature Language="C#" Value="public const char SemicolonChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SemicolonChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SemicolonChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SemicolonChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SemicolonChar;" />
      <MemberSignature Language="F#" Value="val mutable SemicolonChar : char" Usage="System.Web.UI.HtmlTextWriter.SemicolonChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente le point-virgule (;).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Passer le <xref:System.Web.UI.HtmlTextWriter.SemicolonChar> champ en tant qu’argument de paramètre dans un <xref:System.Web.UI.HtmlTextWriter.Write%2A> appel de méthode lorsque vous souhaitez restituer un point-virgule à partir d’un contrôle ou adaptateur personnalisé.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment restituer manuellement une série de styles sur un élément de balisage. L’exemple de code utilise le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode pour restituer `font-size` et `border-style` des attributs de style. Le <xref:System.Web.UI.HtmlTextWriter.SemicolonChar> champ est utilisé en tant que paramètre de la <xref:System.Web.UI.HtmlTextWriter.Write%2A> (méthode) pour séparer la valeur de la `font-size` attribut à partir du début de la `border-style` attribut.  
  
 Cet exemple de code restitue le balisage suivant :  
  
 `style="font-size:12pt;border-style:ridge"`  
  
 [!code-csharp[MarkupTextWriter_Constants#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simplebutton.cs#7)]
 [!code-vb[MarkupTextWriter_Constants#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simplebutton.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SingleQuoteChar">
      <MemberSignature Language="C#" Value="public const char SingleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SingleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SingleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SingleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SingleQuoteChar;" />
      <MemberSignature Language="F#" Value="val mutable SingleQuoteChar : char" Usage="System.Web.UI.HtmlTextWriter.SingleQuoteChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente une apostrophe (').</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.SingleQuoteChar> champ lorsqu’il est nécessaire restituer une apostrophe.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SlashChar">
      <MemberSignature Language="C#" Value="public const char SlashChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SlashChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SlashChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SlashChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SlashChar;" />
      <MemberSignature Language="F#" Value="val mutable SlashChar : char" Usage="System.Web.UI.HtmlTextWriter.SlashChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente la barre oblique (/).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.SlashChar> pour restituer la barre oblique marque lorsque vous écrivez une URL. Le <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> méthode utilise le <xref:System.Web.UI.HtmlTextWriter.SlashChar> champ lors de l’écriture de la balise de fermeture d’un élément de balisage.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment restituer manuellement le `src` attribut d’un `<img>` élément. L’exemple de code utilise le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode avec le <xref:System.Web.UI.HtmlTextWriter.SlashChar> marque de champ en tant que paramètre pour restituer des barres obliques dans le chemin d’accès qui est appliqué à la `src` attribut.  
  
 Cet exemple de code restitue le balisage suivant :  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SpaceChar">
      <MemberSignature Language="C#" Value="public const char SpaceChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SpaceChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SpaceChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SpaceChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SpaceChar;" />
      <MemberSignature Language="F#" Value="val mutable SpaceChar : char" Usage="System.Web.UI.HtmlTextWriter.SpaceChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente un espace ( ).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.SpaceChar> champ est utilisé par le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> et <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> méthodes lors de l’écriture des séparateurs entre les éléments et attributs.  
  
   
  
## Examples  
 Cette section fournit deux exemples de code. Le premier montre comment créer un tableau de caractères. Le deuxième montre comment utiliser le tableau.  
  
 Ces exemples de code génèrent le balisage suivant :  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 L’exemple de code suivant montre comment créer un <xref:System.Char> tableau qui contient le <xref:System.Web.UI.HtmlTextWriter.SpaceChar> champ.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 L’exemple de code suivant montre comment utiliser le tableau qui a été créé dans l’exemple de code précédent en tant que paramètre lors de l’appel le <xref:System.Web.UI.HtmlTextWriter.Write%2A> (méthode).  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="StyleEqualsChar">
      <MemberSignature Language="C#" Value="public const char StyleEqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char StyleEqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.StyleEqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const StyleEqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char StyleEqualsChar;" />
      <MemberSignature Language="F#" Value="val mutable StyleEqualsChar : char" Usage="System.Web.UI.HtmlTextWriter.StyleEqualsChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente le caractère égal pour les styles (<see langword=":" />) utilisé pour définir des attributs de style égaux aux valeurs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> champ est utilisé par le <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> (méthode) pour délimiter les noms de style et les valeurs.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment restituer un `FontWeight` attribut et la valeur de `bold` à la balise d’ouverture d’un élément. L’exemple de code utilise le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode avec le <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> champ comme paramètre pour restituer le caractère qui définit la valeur de chaque attribut de style.  
  
 Cet exemple de code restitue le balisage suivant :  
  
 `FontWeight:"bold"`  
  
 [!code-csharp[MarkupTextWriter_Constants#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#5)]
 [!code-vb[MarkupTextWriter_Constants#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterTag TagKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagKey" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagKey As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::HtmlTextWriterTag TagKey { System::Web::UI::HtmlTextWriterTag get(); void set(System::Web::UI::HtmlTextWriterTag value); };" />
      <MemberSignature Language="F#" Value="member this.TagKey : System.Web.UI.HtmlTextWriterTag with get, set" Usage="System.Web.UI.HtmlTextWriter.TagKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la valeur <see cref="T:System.Web.UI.HtmlTextWriterTag" /> de l'élément de balisage spécifié.</summary>
        <value>Élément de balisage dont la balise d'ouverture est rendue.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> propriété est utile uniquement pour les classes qui héritent de la <xref:System.Web.UI.HtmlTextWriter> classe. Vous devez lire ou définir le <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> propriété uniquement dans un appel à la <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> méthode ; c’est la seule fois, il est défini sur une valeur cohérente.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une version substituée de la <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> méthode dans une classe qui dérive de la <xref:System.Web.UI.HtmlTextWriter> classe. Il utilise la valeur de la <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> propriété afin de déterminer si un contrôle serveur à l’aide personnalisée <xref:System.Web.UI.HtmlTextWriter> objet effectue le rendu d’un `<label>` élément de balisage. Dans le cas, un `<font>` élément avec un `color` attribut la valeur `red` est retourné pour modifier la mise en forme de la `<label>` texte de l’élément.  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La valeur de la propriété ne peut pas être définie.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagName" />
      </Docs>
    </Member>
    <Member MemberName="TagLeftChar">
      <MemberSignature Language="C#" Value="public const char TagLeftChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagLeftChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagLeftChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagLeftChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagLeftChar;" />
      <MemberSignature Language="F#" Value="val mutable TagLeftChar : char" Usage="System.Web.UI.HtmlTextWriter.TagLeftChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente le crochet d’ouverture (&lt;) d’une balise.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> champ est utilisé par le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>, et <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> méthodes lors de l’écriture des balises.  
  
   
  
## Examples  
 L’exemple de code suivant restitue le premier caractère de la balise d’ouverture d’un `<table>` élément portant le nom de l’élément. L’exemple de code utilise le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode avec le <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> champ en tant que paramètre.  
  
 Cet exemple de code restitue le balisage suivant :  
  
 `<table`  
  
 [!code-csharp[MarkupTextWriter_Constants#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#9)]
 [!code-vb[MarkupTextWriter_Constants#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="protected string TagName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagName" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ TagName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TagName : string with get, set" Usage="System.Web.UI.HtmlTextWriter.TagName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de balise d'un élément de balisage restitué.</summary>
        <value>Nom de balise de l'élément de balisage restitué.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.TagName%2A> propriété est utile uniquement pour les classes qui héritent de la <xref:System.Web.UI.HtmlTextWriter> classe. Vous devez lire ou définir le <xref:System.Web.UI.HtmlTextWriter.TagName%2A> propriété uniquement en <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> les appels de méthode ; c’est la seule fois, il est défini sur une valeur cohérente.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une version substituée de la <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> méthode dans une classe qui dérive de la <xref:System.Web.UI.HtmlTextWriter> classe. L’exemple de code vérifie si l’élément à restituer est un `<label>` élément en appelant le <xref:System.String.Compare%2A?displayProperty=nameWithType> (méthode), puis en passant le <xref:System.Web.UI.HtmlTextWriter.TagName%2A> valeur de propriété et une chaîne, `"label"`, comme arguments de paramètre. Si un `<label>` élément est sur le point d’être restitué, la balise d’ouverture d’un `<font>` élément, avec un `color` attribut la valeur `red`, est rendue avant la `<label>` balise d’ouverture de l’élément. Si l’élément à restituer n’est pas un `<label>` élément, la version de la classe de base de la <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> méthode est appelée.  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagKey" />
      </Docs>
    </Member>
    <Member MemberName="TagRightChar">
      <MemberSignature Language="C#" Value="public const char TagRightChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagRightChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagRightChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagRightChar;" />
      <MemberSignature Language="F#" Value="val mutable TagRightChar : char" Usage="System.Web.UI.HtmlTextWriter.TagRightChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente le crochet fermant (&gt;) d’une balise.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.TagRightChar> champ est utilisé par le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>, et <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> méthodes lors de l’écriture des balises.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment restituer la balise de fermeture d’un `<table>` élément en effectuant des appels aux surcharges de la <xref:System.Web.UI.HtmlTextWriter.Write%2A> (méthode). Pour restituer le dernier caractère de la balise, l’exemple de code utilise le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode avec le <xref:System.Web.UI.HtmlTextWriter.TagRightChar> champ en tant que paramètre.  
  
 Cet exemple de code restitue le balisage suivant :  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Écrit le type de données spécifié dans le flux de sortie, ainsi que tout espacement de tabulation en attente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(bool value);" />
      <MemberSignature Language="F#" Value="override this.Write : bool -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><see cref="T:System.Boolean" /> à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie la représentation textuelle d'une valeur Boolean, ainsi que tout espacement de tabulation en attente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode génère des onglets qui sont en attente, puis appelle la <xref:System.IO.TextWriter.Write%2A> méthode de base.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(char value);" />
      <MemberSignature Language="F#" Value="override this.Write : char -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Caractère Unicode à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie la représentation textuelle d'un caractère Unicode, ainsi que tout espacement de tabulation en attente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode génère des onglets qui sont en attente, puis appelle la <xref:System.IO.TextWriter.Write%2A> méthode de base.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode à la fin de la balise d’ouverture d’un `<img>` élément à l’aide de la <xref:System.Web.UI.HtmlTextWriter.TagRightChar> constante.  
  
 Cet exemple de code restitue le balisage suivant :  
  
 `<img alt="A custom image">`  
  
 `</img>`  
  
 [!code-csharp[MarkupTextWriter_Samples1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#5)]
 [!code-vb[MarkupTextWriter_Samples1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="override this.Write : char[] -&gt; unit" Usage="htmlTextWriter.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Tableau de caractères Unicode à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie la représentation textuelle d'un tableau de caractères Unicode, ainsi que tout espacement de tabulation en attente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode génère des onglets qui sont en attente, puis appelle la <xref:System.IO.TextWriter.Write%2A> méthode de base.  
  
   
  
## Examples  
 Cette section fournit deux exemples de code. Le premier montre comment créer un tableau de caractères. Le deuxième montre comment utiliser le tableau.  
  
 Ces exemples de code génèrent le balisage suivant :  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 L’exemple de code suivant montre comment créer un tableau de caractères correspondant à `hello world`. Inclus dans le tableau est le <xref:System.Web.UI.HtmlTextWriter.SpaceChar> champ, qui crée un espace entre les deux mots.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode pour restituer le `hello world` créé dans l’exemple de code précédent pour une page, lorsque le contrôle qui contient cet exemple de code est inclus dans une page de tableau de caractères.  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(double value);" />
      <MemberSignature Language="F#" Value="override this.Write : double -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Nombre à virgule flottante double précision à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie la représentation textuelle d'un nombre à virgule flottante double précision, ainsi que tout espacement de tabulation en attente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode génère des onglets qui sont en attente, puis appelle la <xref:System.IO.TextWriter.Write%2A> méthode de base.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode pour rendre la valeur de la <xref:System.Double.MaxValue?displayProperty=nameWithType> champ.  
  
 Cet exemple de code génère le balisage suivant :  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#7)]
 [!code-vb[MarkupTextWriter_Methods1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(int value);" />
      <MemberSignature Language="F#" Value="override this.Write : int -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Entier signé de 32 octets à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie la représentation textuelle d'un entier signé de 32 octets, ainsi que tout espacement de tabulation en attente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode génère des onglets qui sont en attente, puis appelle la <xref:System.IO.TextWriter.Write%2A> méthode de base.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(long value);" />
      <MemberSignature Language="F#" Value="override this.Write : int64 -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Entier signé de 64 octets à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie la représentation textuelle d’un entier signé de 64 octets, ainsi que tout espacement de tabulation en attente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode génère des onglets qui sont en attente, puis appelle la <xref:System.IO.TextWriter.Write%2A> méthode de base.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Write : obj -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objet à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie la représentation textuelle d'un objet, ainsi que tout espacement de tabulation en attente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode génère des onglets qui sont en attente, puis appelle la <xref:System.IO.TextWriter.Write%2A> méthode de base.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode pour rendre la valeur de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriété.  
  
 Cet exemple de code génère le balisage suivant :  
  
 `This is a rendered CultureInfo object.`  
  
 `<bold>`  
  
 La valeur de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriété :  
  
 `</bold>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#8](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#8)]
 [!code-vb[MarkupTextWriter_Methods1#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(float value);" />
      <MemberSignature Language="F#" Value="override this.Write : single -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Nombre à virgule flottante simple précision à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie la représentation textuelle d'un nombre à virgule flottante simple précision, ainsi que tout espacement de tabulation en attente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode génère des onglets qui sont en attente, puis appelle la <xref:System.IO.TextWriter.Write%2A> méthode de base.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode pour rendre la valeur de la <xref:System.Single.Epsilon?displayProperty=nameWithType> champ, qui est la plus petite valeur possible du <xref:System.Single> structure.  
  
 Cet exemple de code génère le balisage suivant :  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#10)]
 [!code-vb[MarkupTextWriter_Methods1#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="htmlTextWriter.Write s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne à écrire dans le flux de sortie.</param>
        <summary>Écrit la chaîne spécifiée dans le flux de sortie, ainsi que tout espacement de tabulation en attente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode génère des onglets qui sont en attente, puis appelle la <xref:System.IO.TextWriter.Write%2A> méthode de base.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode pour restituer une chaîne entre les balises d’ouverture et fermeture d’un élément de balisage personnalisée.  
  
 Cet exemple de code génère le balisage suivant :  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj -&gt; unit" Usage="htmlTextWriter.Write (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Chaîne qui contient zéro, un ou plusieurs éléments de mise en forme.</param>
        <param name="arg0">Objet à mettre en forme.</param>
        <summary>Écrit une chaîne de tabulation et une chaîne mise en forme dans le flux de sortie, en utilisant la même sémantique que la méthode <see cref="M:System.String.Format(System.String,System.Object)" />, ainsi que tout espacement de tabulation en attente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode génère des onglets qui sont en attente, puis appelle la <xref:System.IO.TextWriter.Write%2A> méthode de base.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode pour restituer une chaîne mise en forme avec la valeur de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriété.  
  
 [!code-csharp[MarkupTextWriter_Methods1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#5)]
 [!code-vb[MarkupTextWriter_Methods1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj[] -&gt; unit" Usage="htmlTextWriter.Write (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Chaîne qui contient zéro, un ou plusieurs éléments de mise en forme.</param>
        <param name="arg">Tableau d'objets à mettre en forme.</param>
        <summary>Écrit une chaîne mise en forme qui contient la représentation textuelle d'un tableau d'objets dans le flux de sortie, ainsi que tout espacement de tabulation en attente. Cette méthode utilise la même sémantique que la méthode <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode génère des onglets qui sont en attente, puis appelle la <xref:System.IO.TextWriter.Write%2A> méthode de base.  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier montre comment restituer une chaîne mise en forme et le contenu d’un tableau. Le deuxième montre comment déclarer le tableau.  
  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode pour restituer une chaîne mise en forme et le contenu du tableau d’objets, nommé `curPriceTime`. L’appel de méthode restitue le deuxième membre du tableau avant de produire le premier membre.  
  
 [!code-csharp[MarkupTextWriter_Methods2#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#9)]
 [!code-vb[MarkupTextWriter_Methods2#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#9)]  
  
 L’exemple de code suivant illustre la déclaration du `curPriceTime` tableau d’objets.  
  
 [!code-csharp[MarkupTextWriter_Methods2#14](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#14)]
 [!code-vb[MarkupTextWriter_Methods2#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : char[] * int * int -&gt; unit" Usage="htmlTextWriter.Write (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tableau de caractères permettant d'écrire du texte dans le flux de sortie.</param>
        <param name="index">Emplacement dans le tableau de l'index auquel la copie commence.</param>
        <param name="count">Nombre de caractères à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie la représentation textuelle d'un sous-tableau de caractères Unicode, ainsi que tout espacement de tabulation en attente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode génère des onglets qui sont en attente, puis appelle la <xref:System.IO.TextWriter.Write%2A> méthode de base.  
  
   
  
## Examples  
 Cette section fournit deux exemples de code. Le premier montre comment créer un tableau de caractères. Le deuxième montre comment utiliser le tableau.  
  
 Ces exemples de code génèrent le balisage suivant :  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 L’exemple de code suivant montre comment créer un tableau de caractères correspondant à `hello world`. Inclus dans le tableau est le <xref:System.Web.UI.HtmlTextWriter.SpaceChar> champ, qui crée un espace entre les deux mots.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 La partie suivante de l’exemple de code utilise le `index` et `count` paramètres de la <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode pour restituer les cinq premiers caractères du tableau créé dans l’exemple précédent.  
  
 [!code-csharp[MarkupTextWriter_Methods2#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#11)]
 [!code-vb[MarkupTextWriter_Methods2#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj * obj -&gt; unit" Usage="htmlTextWriter.Write (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Chaîne qui contient zéro, un ou plusieurs éléments de mise en forme.</param>
        <param name="arg0">Objet à mettre en forme.</param>
        <param name="arg1">Objet à mettre en forme.</param>
        <summary>Écrit une chaîne mise en forme qui contient la représentation textuelle de deux objets dans le flux de sortie, ainsi que tout espacement de tabulation en attente. Cette méthode utilise la même sémantique que la méthode <see cref="M:System.String.Format(System.String,System.Object,System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode génère des onglets qui sont en attente, puis appelle la <xref:System.IO.TextWriter.Write%2A> méthode de base.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.Write%2A> méthode pour restituer une chaîne mise en forme et les valeurs de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> et <xref:System.DateTime.Today%2A> propriétés.  
  
 [!code-csharp[MarkupTextWriter_Methods1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#6)]
 [!code-vb[MarkupTextWriter_Methods1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Écrit un attribut de balisage et sa valeur dans le flux de sortie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteAttribute : string * string -&gt; unit&#xA;override this.WriteAttribute : string * string -&gt; unit" Usage="htmlTextWriter.WriteAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Attribut à écrire dans le flux de sortie.</param>
        <param name="value">Valeur à affecter à l’attribut.</param>
        <summary>Écrit l'attribut de balisage spécifié et sa valeur dans le flux de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> méthode pour écrire des attributs de balisage et leurs valeurs sans encodage. Le <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> méthode écrit la valeur d’attribut entourée de guillemets doubles («). Si `value` est `null`, le <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> méthode écrit uniquement le nom d’attribut.  
  
   
  
## Examples  
 L’exemple de code suivant illustre le rendu un `<img>` élément dans lequel les deux surcharges de la <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> méthode sont appelées. L’exemple de code utilise le processus suivant :  
  
-   Appelle le <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> (méthode), qui restitue les caractères d’ouverture de l’élément.  
  
-   Appelle le <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> surcharge, qui écrit une `alt` attribut et sa valeur à la `<img>` élément.  
  
-   Appelle le <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> surcharge pour restituer un personnalisé `myattribute` attribut, avec une valeur de `No "encoding" required`, puis définit `fEncode` à `false`.  
  
-   Ferme la balise d’ouverture de l’élément, puis appelle la <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> méthode pour fermer le `<img>` élément.  
  
 Cet exemple de code génère le balisage suivant :  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Dans les classes dérivées, vous pouvez remplacer le <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" /> méthode pour définir des règles personnalisées pour l’écriture des attributs et leurs valeurs. Par exemple, vous pouvez écrire le code qui permet la <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" /> méthode d’écrire un attribut avec une valeur vide.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member WriteAttribute : string * string * bool -&gt; unit&#xA;override this.WriteAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.WriteAttribute (name, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Attribut de balisage à écrire dans le flux de sortie.</param>
        <param name="value">Valeur à affecter à l’attribut.</param>
        <param name="fEncode"><see langword="true" /> pour encoder l’attribut et sa valeur affectée ; sinon, <see langword="false" />.</param>
        <summary>Écrit l’attribut de balisage et la valeur spécifiés dans le flux de sortie et, si elle est spécifiée, écrit la valeur encodée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> méthode pour écrire des attributs de balisage et leurs valeurs avec ou sans encodage. Le <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> méthode utilise la <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> méthode pour effectuer l’encodage.  
  
 Le <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> méthode écrit la valeur d’attribut entourée de guillemets doubles («). Si `value` est `null`, le <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> méthode écrit uniquement le nom d’attribut.  
  
   
  
## Examples  
 L’exemple de code suivant illustre le rendu un `<img>` élément dans lequel les deux surcharges de la <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> méthode sont appelées. L’exemple de code utilise le processus suivant :  
  
-   Appelle le <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> (méthode), qui restitue les caractères d’ouverture de l’élément.  
  
-   Appelle le <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> surcharge, qui écrit une `alt` attribut et sa valeur à la `<img>` élément.  
  
-   Appelle le <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> surcharge pour restituer un personnalisé `myattribute` attribut, avec une valeur de `No "encoding" required`, puis définit `fEncode` à `false`.  
  
-   Ferme la balise d’ouverture de l’élément, puis appelle la <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> méthode pour fermer le `<img>` élément.  
  
 Cet exemple de code génère le balisage suivant :  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Dans les classes dérivées, vous pouvez remplacer le <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" /> méthode pour définir des règles personnalisées pour l’écriture des attributs et leurs valeurs. Par exemple, vous pouvez écrire le code qui permet la <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" /> méthode d’écrire un attribut avec une valeur vide.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteBeginTag : string -&gt; unit&#xA;override this.WriteBeginTag : string -&gt; unit" Usage="htmlTextWriter.WriteBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Élément de balisage dont il faut écrire la balise d'ouverture.</param>
        <summary>Écrit tout espacement de tabulation et la balise d'ouverture de l'élément de balisage spécifié dans le flux de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> méthode n’écrit pas le crochet fermant (>) de la balise d’ouverture de l’élément de balisage. Cela permet d’écrire des attributs de balisage à la balise d’ouverture de l’élément. Utilisez le <xref:System.Web.UI.HtmlTextWriter.TagRightChar> (constante) pour fermer la balise d’ouverture lorsque vous appelez le <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> (méthode). Utilisez le <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> méthode avec le <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> constante lorsque vous écrivez des éléments de balisage qui sont de fermeture automatique.  
  
 Le <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> méthode est utilisée par les contrôles serveur personnalisés qui ne pas autoriser les balises ou des attributs de mappage et restituer les éléments de balisage de la même façon pour chaque demande.  
  
   
  
## Examples  
 L’exemple de code suivant illustre le rendu un `<img>` élément dans lequel les deux surcharges de la <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> méthode sont appelées. L’exemple de code utilise le processus suivant :  
  
-   Appelle le <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> (méthode), qui restitue les caractères d’ouverture de l’élément.  
  
-   Appelle le <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> surcharge, qui écrit une `alt` attribut et sa valeur à la `<img>` élément.  
  
-   Appelle le <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> surcharge pour restituer un personnalisé `myattribute` attribut, avec une valeur de `No "encoding" required`, puis définit `fEncode` à `false`.  
  
-   Ferme la balise d’ouverture de l’élément, puis appelle la <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> méthode pour fermer le `<img>` élément.  
  
 Cet exemple de code génère le balisage suivant :  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public virtual void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBreak();" />
      <MemberSignature Language="F#" Value="abstract member WriteBreak : unit -&gt; unit&#xA;override this.WriteBreak : unit -&gt; unit" Usage="htmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Écrit un élément de balisage <see langword="&lt;br /&gt;" /> dans le flux de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> sauts de méthode de rendu de ligne dans le balisage de contrôle ou adaptateur personnalisé. Le <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> méthode écrit un espace entre le `br` et `/` pour une meilleure compatibilité HTML.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment appeler le <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> méthode pour écrire un `<br />` élément dans le navigateur demandeur après le <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> méthode écrit le texte encodé `&lt;custID&gt; &amp; &lt;invoice#&gt;` balisage.  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedText : string -&gt; unit&#xA;override this.WriteEncodedText : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Chaîne de texte à encoder et à écrire dans le flux de sortie.</param>
        <summary>Encode le texte spécifié pour l’appareil demandeur, puis l’écrit dans le flux de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> méthode lorsqu’une chaîne contient des crochets pointus (\< ou >) ou une esperluette (&).  
  
 Le <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> méthode utilise le <xref:System.Web.HttpUtility.HtmlEncode%2A> méthode pour effectuer l’encodage et convertit également le caractère Unicode `00A0` à `&nbsp;`.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> méthode pour écrire le balisage encodé `&lt;custID&gt; &amp; &lt;invoice#&gt;` au flux de sortie. Le <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> méthode écritures `<br />`.  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="text" /> est <see langword="null" />.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrl">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrl (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrl(System::String ^ url);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedUrl : string -&gt; unit&#xA;override this.WriteEncodedUrl : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedUrl url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Chaîne d’URL à encoder et à écrire dans le flux de sortie.</param>
        <summary>Encode l’URL spécifiée, puis l’écrit dans le flux de sortie. L’URL peut inclure des paramètres.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> méthode encode la chaîne dans le `url` paramètre conformément à la spécification pour l’encodage des URL. Les paramètres qui suivent le délimiteur de point d’interrogation ( ?) ne sont pas encodés.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> (méthode), qui génère la sortie suivante :  
  
 `http://localhost/Sample%20Folder/Sample%20%2b%20File.txt`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#3)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrlParameter">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrlParameter (string urlText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrlParameter(string urlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrlParameter (urlText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrlParameter(System::String ^ urlText);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedUrlParameter : string -&gt; unit&#xA;override this.WriteEncodedUrlParameter : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedUrlParameter urlText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlText">Chaîne du paramètre URL à encoder et à écrire dans le flux de sortie.</param>
        <summary>Encode le paramètre URL spécifié pour l'appareil demandeur, puis l'écrit dans le flux de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les espaces dans la partie paramètre d’une URL sont encodés comme des signes plus (+) et les signes égal (=) sont encodés en tant que `%3d`.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> (méthode), qui génère la sortie suivante :  
  
 `ID%3dCity+State`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#4)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEndTag">
      <MemberSignature Language="C#" Value="public virtual void WriteEndTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEndTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEndTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteEndTag : string -&gt; unit&#xA;override this.WriteEndTag : string -&gt; unit" Usage="htmlTextWriter.WriteEndTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Élément pour lequel écrire la balise de fermeture.</param>
        <summary>Écrit tout espacement de tabulation et la balise de fermeture de l'élément de balisage spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contrairement à la <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> (méthode), le <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> méthode n’a aucune logique pour rendre la balise de fin d’élément correspond à la balise d’ouverture correspondant.  
  
   
  
## Examples  
 L’exemple de code suivant illustre le rendu un `<img>` élément. L’exemple de code utilise le processus suivant :  
  
-   Appelle le <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> méthode pour restituer les caractères d’ouverture de l’élément.  
  
-   Appelle les deux surcharges de la <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> méthode pour écrire des attributs pour le `<img>` élément.  
  
-   Appelle le <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> méthode pour fermer le `<img>` élément.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteFullBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteFullBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFullBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteFullBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteFullBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteFullBeginTag : string -&gt; unit&#xA;override this.WriteFullBeginTag : string -&gt; unit" Usage="htmlTextWriter.WriteFullBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Élément à écrire dans le flux de sortie.</param>
        <summary>Écrit tout espacement de tabulation et la balise d'ouverture de l'élément de balisage spécifié dans le flux de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> méthode écrit automatiquement le crochet fermant (>) de la balise d’ouverture de l’élément, contrairement à la <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> (méthode), qui n’écrit pas le crochet fermant. Utilisez <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> pour les éléments de balisage sans attributs.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Écrit des données dans un flux de sortie <see cref="T:System.Web.UI.HtmlTextWriter" />, de la manière spécifiée par les paramètres surchargés, suivies d'une chaîne de terminaison de ligne. Toutes les versions de cette méthode écrivent les espacements de tabulation en attente dans le flux de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne de marque de fin de ligne par défaut est un retour chariot suivi d’une saut de ligne (« \r\n »). Le <xref:System.IO.TextWriter.WriteLine%2A> méthode de base est utilisée pour écrire la `value` paramètre.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine();" />
      <MemberSignature Language="F#" Value="override this.WriteLine : unit -&gt; unit" Usage="htmlTextWriter.WriteLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Écrit une chaîne de terminaison de ligne dans le flux de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne de marque de fin de ligne par défaut est un retour chariot suivi d’une saut de ligne (« \r\n »). Pour plus d'informations, consultez <xref:System.IO.TextWriter.WriteLine%2A>.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> méthode pour insérer une ligne après un `<img>` élément est rendu.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(bool value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : bool -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Boolean à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie les espacements de tabulation en attente et la représentation textuelle d'une valeur Boolean, suivis d'une chaîne de terminaison de ligne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne de marque de fin de ligne par défaut est un retour chariot suivi d’une saut de ligne (« \r\n »). Le <xref:System.IO.TextWriter.WriteLine%2A> méthode de base est utilisée pour écrire la `value` paramètre.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(char value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : char -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Caractère à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie les espacements de tabulation en attente et un caractère Unicode, suivis d'une chaîne de terminaison de ligne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne de marque de fin de ligne par défaut est un retour chariot suivi d’une saut de ligne (« \r\n »). Le <xref:System.IO.TextWriter.WriteLine%2A> méthode de base est utilisée pour écrire la `value` paramètre.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : char[] -&gt; unit" Usage="htmlTextWriter.WriteLine buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Tableau de caractères à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie les espacements de tabulation en attente et un tableau de caractères Unicode, suivis d'une chaîne de terminaison de ligne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne de marque de fin de ligne par défaut est un retour chariot suivi d’une saut de ligne (« \r\n »). Le <xref:System.IO.TextWriter.WriteLine%2A> méthode de base est utilisée pour écrire la `value` paramètre.  
  
   
  
## Examples  
 Cette section fournit deux exemples de code. Le premier montre comment créer un tableau. Le deuxième montre comment utiliser ce tableau.  
  
 Ces exemples de code génèrent le balisage suivant :  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 L’exemple de code suivant montre comment créer un tableau de caractères correspondant à `hello world`. Inclus dans le tableau est le <xref:System.Web.UI.HtmlTextWriter.SpaceChar> champ, qui crée un espace entre les deux mots.  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 Le code suivant exemple rend le `hello world` tableau de caractères qui a été créé dans l’exemple précédent à l’aide de la <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> (méthode).  
  
 [!code-csharp[MarkupTextWriter_Methods2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#5)]
 [!code-vb[MarkupTextWriter_Methods2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(double value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : double -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Nombre à virgule flottante double précision à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie les espacements de tabulation en attente et la représentation textuelle d'un nombre à virgule flottante double précision, suivis d'une chaîne de terminaison de ligne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne de marque de fin de ligne par défaut est un retour chariot suivi d’une saut de ligne (« \r\n »). Le <xref:System.IO.TextWriter.WriteLine%2A> méthode de base est utilisée pour écrire la `value` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> méthode pour rendre la valeur de la <xref:System.Double.MaxValue?displayProperty=nameWithType> champ.  
  
 Cet exemple de code génère le balisage suivant :  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#3)]
 [!code-vb[MarkupTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(int value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : int -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Entier signé de 32 octets à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie les espacements de tabulation en attente et la représentation textuelle d'un entier signé de 32 octets, suivis d'une chaîne de terminaison de ligne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne de marque de fin de ligne par défaut est un retour chariot suivi d’une saut de ligne (« \r\n »). Le <xref:System.IO.TextWriter.WriteLine%2A> méthode de base est utilisée pour écrire la `value` paramètre.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(long value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : int64 -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Entier signé de 64 octets à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie les espacements de tabulation en attente et la représentation textuelle d’un entier signé de 64 octets, suivis d’une chaîne de terminaison de ligne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne de marque de fin de ligne par défaut est un retour chariot suivi d’une saut de ligne (« \r\n »). Le <xref:System.IO.TextWriter.WriteLine%2A> méthode de base est utilisée pour écrire la `value` paramètre.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : obj -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objet à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie les espacements de tabulation en attente et la représentation textuelle d'un objet, suivis d'une chaîne de terminaison de ligne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne de marque de fin de ligne par défaut est un retour chariot suivi d’une saut de ligne (« \r\n »). Le <xref:System.IO.TextWriter.WriteLine%2A> méthode de base est utilisée pour écrire la `value` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> méthode pour rendre la valeur de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriété à un contrôle.  
  
 [!code-csharp[MarkupTextWriter_Methods1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#4)]
 [!code-vb[MarkupTextWriter_Methods1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(float value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : single -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Nombre à virgule flottante simple précision à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie les espacements de tabulation en attente et la représentation textuelle d'un nombre à virgule flottante simple précision, suivis d'une chaîne de terminaison de ligne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne de marque de fin de ligne par défaut est un retour chariot suivi d’une saut de ligne (« \r\n »). Le <xref:System.IO.TextWriter.WriteLine%2A> méthode de base est utilisée pour écrire la `value` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> méthode pour rendre la valeur de la <xref:System.Single.Epsilon?displayProperty=nameWithType> champ, qui est la plus petite valeur possible du <xref:System.Single> structure.  
  
 Cet exemple de code génère le balisage suivant :  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#9)]
 [!code-vb[MarkupTextWriter_Methods1#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="htmlTextWriter.WriteLine s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie les espacements de tabulation en attente et une chaîne de texte, suivis d'une chaîne de terminaison de ligne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne de marque de fin de ligne par défaut est un retour chariot suivi d’une saut de ligne (« \r\n »). Le <xref:System.IO.TextWriter.WriteLine%2A> méthode de base est utilisée pour écrire la `value` paramètre.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : uint32 -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">Entier non signé de 4 octets à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie les espacements de tabulation en attente et la représentation textuelle d'un entier non signé de 4 octets, suivis d'une chaîne de terminaison de ligne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne de marque de fin de ligne par défaut est un retour chariot suivi d’une saut de ligne (« \r\n »). Le <xref:System.IO.TextWriter.WriteLine%2A> méthode de base est utilisée pour écrire la `value` paramètre.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string * obj -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Chaîne contenant zéro, un ou plusieurs éléments de mise en forme.</param>
        <param name="arg0">Objet à mettre en forme.</param>
        <summary>Écrit dans le flux de sortie les espacements de tabulation en attente et une chaîne mise en forme contenant la représentation textuelle d'un objet, suivis d'une chaîne de terminaison de ligne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne de marque de fin de ligne par défaut est un retour chariot suivi d’une saut de ligne (« \r\n »). Le <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> méthode utilise la même sémantique que la <xref:System.String.Format%28System.String%2CSystem.Object%29> (méthode). Le <xref:System.IO.TextWriter.WriteLine%2A> méthode de base est utilisée pour écrire la `value` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> méthode pour restituer une chaîne mise en forme avec la valeur de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriété.  
  
 [!code-csharp[MarkupTextWriter_Methods1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#1)]
 [!code-vb[MarkupTextWriter_Methods1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string * obj[] -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Chaîne contenant zéro, un ou plusieurs éléments de mise en forme.</param>
        <param name="arg">Tableau d'objets à mettre en forme.</param>
        <summary>Écrit dans le flux de sortie les espacements de tabulation en attente et une chaîne mise en forme contenant la représentation textuelle d'un tableau d'objets, suivis d'une chaîne de terminaison de ligne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne de marque de fin de ligne par défaut est un retour chariot suivi d’une saut de ligne (« \r\n »). Le <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> méthode utilise la même sémantique que la <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> (méthode). Le <xref:System.IO.TextWriter.WriteLine%2A> méthode de base est utilisée pour écrire la `value` (méthode).  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier montre comment restituer une chaîne et un tableau au flux de sortie. Le second exemple indique comment déclarer le tableau.  
  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> méthode pour restituer une chaîne mise en forme et le contenu d’un tableau d’objets dans le flux de sortie.  
  
 [!code-csharp[MarkupTextWriter_Methods2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#2)]
 [!code-vb[MarkupTextWriter_Methods2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#2)]  
  
 L’exemple de code suivant montre comment déclarer le tableau d’objets qui a été restitué dans l’exemple de code précédent.  
  
 [!code-csharp[MarkupTextWriter_Methods2#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#7)]
 [!code-vb[MarkupTextWriter_Methods2#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : char[] * int * int -&gt; unit" Usage="htmlTextWriter.WriteLine (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tableau de caractères à partir duquel le texte est écrit dans le flux de sortie.</param>
        <param name="index">Emplacement dans le tableau de caractères où l'écriture commence.</param>
        <param name="count">Nombre de caractères du tableau à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie les espacements de tabulation en attente et un sous-tableau de caractères Unicode, suivis d'une chaîne de terminaison de ligne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne de marque de fin de ligne par défaut est un retour chariot suivi d’une saut de ligne (« \r\n »). Le <xref:System.IO.TextWriter.WriteLine%2A> méthode de base est utilisée pour écrire la `value` paramètre.  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier montre comment créer un tableau de caractères. Le deuxième montre comment utiliser le tableau.  
  
 Ces exemples de code génèrent le balisage suivant :  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 L’exemple de code suivant montre comment créer un tableau de caractères correspondant à `hello world`. Inclus dans le tableau est le <xref:System.Web.UI.HtmlTextWriter.SpaceChar> champ, qui crée un espace entre les deux mots.  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 Le code suivant exemple utilise le `index` et `count` paramètres de la <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> méthode pour restituer les cinq premiers caractères du tableau créé dans l’exemple de code précédent.  
  
 [!code-csharp[MarkupTextWriter_Methods2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#4)]
 [!code-vb[MarkupTextWriter_Methods2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string * obj * obj -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Chaîne contenant zéro, un ou plusieurs éléments de mise en forme.</param>
        <param name="arg0">Objet à mettre en forme.</param>
        <param name="arg1">Objet à mettre en forme.</param>
        <summary>Écrit dans le flux de sortie les espacements de tabulation en attente et une chaîne mise en forme contenant la représentation textuelle de deux objets, suivis d'une chaîne de terminaison de ligne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne de marque de fin de ligne par défaut est un retour chariot suivi d’une saut de ligne (« \r\n »). Le <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> méthode utilise la même sémantique que la <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29> (méthode). Le <xref:System.IO.TextWriter.WriteLine%2A> méthode de base est utilisée pour écrire la `value` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> méthode pour restituer une chaîne mise en forme et les valeurs de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriété et le <xref:System.DateTime.Today%2A> propriété.  
  
 [!code-csharp[MarkupTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#2)]
 [!code-vb[MarkupTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineNoTabs">
      <MemberSignature Language="C#" Value="public void WriteLineNoTabs (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteLineNoTabs(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLineNoTabs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLineNoTabs (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteLineNoTabs(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.WriteLineNoTabs : string -&gt; unit" Usage="htmlTextWriter.WriteLineNoTabs s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Chaîne à écrire dans le flux de sortie.</param>
        <summary>Écrit dans le flux de sortie une chaîne suivie d'une chaîne de terminaison de ligne. Cette méthode ignore tout espacement de tabulation spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlTextWriter.WriteLineNoTabs%2A> méthode plutôt que la <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> méthode lorsque vous ne souhaitez pas restituer les espacements de tabulation avant la chaîne rendue `s`.  
  
 La chaîne de marque de fin de ligne par défaut est un retour chariot suivi d’une saut de ligne (« \r\n »). Le <xref:System.IO.TextWriter.WriteLine%2A> méthode de base est utilisée pour écrire la `value` paramètre.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Écrit un attribut de style et sa valeur dans le flux de sortie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteStyleAttribute : string * string -&gt; unit&#xA;override this.WriteStyleAttribute : string * string -&gt; unit" Usage="htmlTextWriter.WriteStyleAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Attribut de style à écrire dans le flux de sortie.</param>
        <param name="value">Valeur assignée à l'attribut de style.</param>
        <summary>Écrit l'attribut de style spécifié dans le flux de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> méthode écrit l’attribut de style sous la forme suivante :  
  
 `name` `=` `value` `;`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
      </Docs>
    </Member>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member WriteStyleAttribute : string * string * bool -&gt; unit&#xA;override this.WriteStyleAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.WriteStyleAttribute (name, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Attribut de style à écrire dans le flux de sortie.</param>
        <param name="value">Valeur assignée à l'attribut de style.</param>
        <param name="fEncode"><see langword="true" /> pour encoder l'attribut de style et sa valeur assignée ; sinon, <see langword="false" />.</param>
        <summary>Écrit l'attribut de style spécifié et sa valeur dans le flux de sortie et encode la valeur, si spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> méthode écrit l’attribut de style sous la forme suivante :  
  
 `name` `=` `value` `;`  
  
 Le <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> méthode est utilisée pour encoder le `value` paramètre.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteUrlEncodedString">
      <MemberSignature Language="C#" Value="protected void WriteUrlEncodedString (string text, bool argument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void WriteUrlEncodedString(string text, bool argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub WriteUrlEncodedString (text As String, argument As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void WriteUrlEncodedString(System::String ^ text, bool argument);" />
      <MemberSignature Language="F#" Value="member this.WriteUrlEncodedString : string * bool -&gt; unit" Usage="htmlTextWriter.WriteUrlEncodedString (text, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="argument" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">Chaîne à encoder et à écrire dans le flux de sortie.</param>
        <param name="argument"><see langword="true" /> pour encoder la chaîne comme une partie de la section des paramètres de l'URL ; <see langword="false" /> pour encoder la chaîne comme une partie de la section du chemin d'accès de l'URL.</param>
        <summary>Écrit la chaîne spécifiée, en l'encodant conformément aux exigences des URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A> méthode encode les caractères qui pourraient être considérées comme des séparateurs d’URL (selon la définition de `argument`) dans des chaînes de la forme `%xx`, si le code ASCII est inférieur à 128 ; sinon, `%uxxxx`, où `x` est un chiffre hexadécimal.  
  
 Le <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> et <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> méthodes utilisent la <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A> méthode comme une méthode d’utilitaire.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>