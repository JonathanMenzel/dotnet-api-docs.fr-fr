<Type Name="ViewStateException" FullName="System.Web.UI.ViewStateException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a96557c46b0c067684a9680f548bb1037bc62c76" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30609463" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ViewStateException : Exception" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ViewStateException extends System.Exception implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ViewStateException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ViewStateException&#xA;Inherits Exception" />
  <TypeSignature Language="C++ CLI" Value="public ref class ViewStateException sealed : Exception" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Représente l'exception qui est levée lorsque l'état d'affichage ne peut pas être chargé ni validé. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si une exception se produit lorsque la page charge les informations d’état d’affichage, la page crée un <xref:System.Web.UI.ViewStateException> de l’objet et le passe en tant qu’exception interne dans une <xref:System.Web.HttpException> exception. Le <xref:System.Web.HttpException> exception est levée de nouveau pour être gérée par l’application.  
  
 Le <xref:System.Web.UI.ViewStateException> classe stocke des informations sur l’exception dans le <xref:System.Web.UI.ViewStateException.Message%2A> propriété. Si la demande a l’autorisation d’accéder à la <xref:System.Web.HttpRequest.ServerVariables%2A> propriété, le <xref:System.Web.UI.ViewStateException.Message%2A> propriété contient les valeurs retournées par la <xref:System.Web.UI.ViewStateException.RemoteAddress%2A>, <xref:System.Web.UI.ViewStateException.RemotePort%2A>, <xref:System.Web.UI.ViewStateException.UserAgent%2A>, <xref:System.Web.UI.ViewStateException.PersistedState%2A>, <xref:System.Web.UI.ViewStateException.Referer%2A>, et <xref:System.Web.UI.ViewStateException.Path%2A> propriétés ; dans le cas contraire, le <xref:System.Web.UI.ViewStateException.Message%2A> propriété contient un message d’erreur d’état d’affichage générique.  
  
 Une exception d’état d’affichage peut être le résultat d’une erreur de validation des Codes d’authentification de Message (MAC). Si l’attribut de page `enableViewStateMac` a la valeur `true`, informations d’état d’affichage sont encodées avec un identificateur MAC. Lorsque les informations d’état d’affichage sont publiées sur le serveur, la page vérifie l’encodage pour vous assurer qu’il n’a pas été altéré par l’utilisateur. Si la page ne peut pas valider l’encodage MAC sur les informations d’état d’affichage, elle lève une <xref:System.Web.HttpException> exception avec le <xref:System.Web.UI.ViewStateException> objet en tant qu’exception interne.  
  
 Pour la validation MAC réussisse, les informations d’état d’affichage doivent être hachées par la même clé lorsqu’il est envoyé et reçu. Dans une batterie de serveurs Web, la clé d’ordinateur sur chaque serveur doit être définie à une clé commune.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment implémenter une méthode qui désérialise une chaîne codée en base64 et retourne un <xref:System.Collections.ICollection> collection de paramètres de propriété. Le <xref:System.Web.UI.ObjectStateFormatter.Deserialize%2A> méthode peut lever une <xref:System.Web.HttpException> exception contenant un <xref:System.Web.UI.ViewStateException> objet en tant qu’exception interne. L’exemple montre comment vous pouvez intercepter une <xref:System.Web.HttpException> exception et récupérer les propriétés de la <xref:System.Web.UI.ViewStateException> objet.  
  
 [!code-csharp[System.Web.UI.ViewStateException#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ViewStateException/CS/Class1.cs#2)]
 [!code-vb[System.Web.UI.ViewStateException#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ViewStateException/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Configuration.MachineKeySection" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ViewStateException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ViewStateException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ViewStateException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.ViewStateException" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.Configuration.MachineKeySection" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ViewStateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Objet qui contient les données sérialisées de l'objet.</param>
        <param name="context">Informations contextuelles sur la source ou la destination.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.ViewStateException" /> avec des données sérialisées.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConnected">
      <MemberSignature Language="C#" Value="public bool IsConnected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConnected" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ViewStateException.IsConnected" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsConnected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsConnected { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si le client est actuellement connecté au serveur.</summary>
        <value>
          <see langword="true" /> si le client est encore connecté au serveur ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété retourne la même valeur que l’appel du <xref:System.Web.HttpResponse.IsClientConnected%2A> propriété.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment implémenter une méthode qui désérialise une chaîne codée en base64 et retourne un <xref:System.Collections.ICollection> collection de paramètres de propriété. Le <xref:System.Web.UI.ObjectStateFormatter.Deserialize%2A> méthode peut lever une <xref:System.Web.HttpException> exception contenant un <xref:System.Web.UI.ViewStateException> objet en tant qu’exception interne. L’exemple montre comment vous pouvez intercepter une <xref:System.Web.HttpException> exception et récupérer les propriétés de la <xref:System.Web.UI.ViewStateException> objet.  
  
 [!code-csharp[System.Web.UI.ViewStateException#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ViewStateException/CS/Class1.cs#2)]
 [!code-vb[System.Web.UI.ViewStateException#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ViewStateException/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpResponse" />
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public override string Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Message" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ViewStateException.Message" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Message As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Message { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient des informations de débogage à propos de la demande HTTP ayant généré une exception d'état d'affichage.</summary>
        <value>
          <see cref="T:System.String" /> contenant le message mis en forme avec les informations sur l'exception.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la demande n’a pas l’autorisation d’accéder aux variables de serveur, cette propriété retourne un message d’erreur d’état d’affichage générique. Si la demande n’est pas autorisé à accéder aux variables de serveur, le <xref:System.Web.UI.ViewStateException.Message%2A> propriété contient les valeurs retournées par la <xref:System.Web.UI.ViewStateException.RemoteAddress%2A>, <xref:System.Web.UI.ViewStateException.RemotePort%2A>, <xref:System.Web.UI.ViewStateException.UserAgent%2A>, <xref:System.Web.UI.ViewStateException.PersistedState%2A>, <xref:System.Web.UI.ViewStateException.Referer%2A>, et <xref:System.Web.UI.ViewStateException.Path%2A> propriétés.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ViewStateException.Path" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le chemin d'accès de la demande HTTP ayant généré une exception d'état d'affichage.</summary>
        <value>
          <see cref="T:System.String" /> contenant le chemin d'accès de la demande.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété retourne la même valeur que la `PATH_INFO` variable dans le <xref:System.Web.HttpRequest.ServerVariables%2A> propriété. Elle retourne la partie du chemin d’accès après le nom d’hôte. Par exemple, dans l’URL http://www.contoso.com/virdir/page.html, <xref:System.Web.UI.ViewStateException.Path%2A> retournerait/virdir/page.HTML.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment implémenter une méthode qui désérialise une chaîne codée en base64 et retourne un <xref:System.Collections.ICollection> collection de paramètres de propriété. Le <xref:System.Web.UI.ObjectStateFormatter.Deserialize%2A> méthode peut lever une <xref:System.Web.HttpException> exception contenant un <xref:System.Web.UI.ViewStateException> objet en tant qu’exception interne. L’exemple montre comment vous pouvez intercepter une <xref:System.Web.HttpException> exception et récupérer les propriétés de la <xref:System.Web.UI.ViewStateException> objet.  
  
 [!code-csharp[System.Web.UI.ViewStateException#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ViewStateException/CS/Class1.cs#2)]
 [!code-vb[System.Web.UI.ViewStateException#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ViewStateException/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistedState">
      <MemberSignature Language="C#" Value="public string PersistedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PersistedState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ViewStateException.PersistedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PersistedState As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PersistedState { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le contenu de la chaîne d'état d'affichage qui, lors de sa lecture, a provoqué l'exception d'état d'affichage.</summary>
        <value>
          <see cref="T:System.String" /> contenant les valeurs d'état d'affichage qui ont provoqué l'exception d'état d'affichage.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Referer">
      <MemberSignature Language="C#" Value="public string Referer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Referer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ViewStateException.Referer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Referer As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Referer { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'URL de la page ayant lié à la page où l'exception d'état d'affichage s'est produite.</summary>
        <value>
          <see cref="T:System.String" /> contenant le point d'accès HTTP.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété retourne la même valeur que la `HTTP_REFERER` variable dans le <xref:System.Web.HttpRequest.ServerVariables%2A> propriété. La valeur est une chaîne vide (" ») si aucune demande précédente ne lié à la page.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment implémenter une méthode qui désérialise une chaîne codée en base64 et retourne un <xref:System.Collections.ICollection> collection de paramètres de propriété. Le <xref:System.Web.UI.ObjectStateFormatter.Deserialize%2A> méthode peut lever une <xref:System.Web.HttpException> exception contenant un <xref:System.Web.UI.ViewStateException> objet en tant qu’exception interne. L’exemple montre comment vous pouvez intercepter une <xref:System.Web.HttpException> exception et récupérer les propriétés de la <xref:System.Web.UI.ViewStateException> objet.  
  
 [!code-csharp[System.Web.UI.ViewStateException#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ViewStateException/CS/Class1.cs#2)]
 [!code-vb[System.Web.UI.ViewStateException#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ViewStateException/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteAddress">
      <MemberSignature Language="C#" Value="public string RemoteAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RemoteAddress" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ViewStateException.RemoteAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RemoteAddress As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RemoteAddress { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'adresse IP de la demande HTTP ayant généré une exception d'état d'affichage.</summary>
        <value>
          <see cref="T:System.String" /> contenant l'adresse IP distante du client.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété retourne la même valeur que la `REMOTE_ADDR` variable dans le <xref:System.Web.HttpRequest.ServerVariables%2A> propriété.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemotePort">
      <MemberSignature Language="C#" Value="public string RemotePort { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RemotePort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ViewStateException.RemotePort" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RemotePort As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RemotePort { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le numéro de port de la demande HTTP ayant généré une exception d'état d'affichage.</summary>
        <value>
          <see cref="T:System.String" /> contenant le numéro de port distant.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété retourne la même valeur que la `REMOTE_PORT` variable dans le <xref:System.Web.HttpRequest.ServerVariables%2A> propriété.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserAgent">
      <MemberSignature Language="C#" Value="public string UserAgent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserAgent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ViewStateException.UserAgent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserAgent As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UserAgent { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le type de navigateur de la demande HTTP ayant généré une exception d'état d'affichage.</summary>
        <value>
          <see cref="T:System.String" /> contenant l'agent utilisateur (user agent), qui est généralement le type de navigateur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété retourne la même valeur que la `HTTP_USER_AGENT` variable dans le <xref:System.Web.HttpRequest.ServerVariables%2A> propriété.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment implémenter une méthode qui désérialise une chaîne codée en base64 et retourne un <xref:System.Collections.ICollection> collection de paramètres de propriété. Le <xref:System.Web.UI.ObjectStateFormatter.Deserialize%2A> méthode peut lever une <xref:System.Web.HttpException> exception contenant un <xref:System.Web.UI.ViewStateException> objet en tant qu’exception interne. L’exemple montre comment vous pouvez intercepter une <xref:System.Web.HttpException> exception et récupérer les propriétés de la <xref:System.Web.UI.ViewStateException> objet.  
  
 [!code-csharp[System.Web.UI.ViewStateException#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ViewStateException/CS/Class1.cs#2)]
 [!code-vb[System.Web.UI.ViewStateException#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ViewStateException/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>