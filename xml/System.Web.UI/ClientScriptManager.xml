<Type Name="ClientScriptManager" FullName="System.Web.UI.ClientScriptManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4d1aaf1836d51670198575fb3b23de5427984cc3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36378664" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ClientScriptManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ClientScriptManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ClientScriptManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClientScriptManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClientScriptManager sealed" />
  <TypeSignature Language="F#" Value="type ClientScriptManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Defines methods for managing client scripts in Web applications.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.UI.ClientScriptManager> classe est utilisée pour gérer des scripts clients et de les ajouter aux applications Web. Vous pouvez obtenir une référence à la <xref:System.Web.UI.ClientScriptManager> classe à partir de la <xref:System.Web.UI.Page.ClientScript%2A> propriété de la <xref:System.Web.UI.Page> objet.  
  
 Vous pouvez ajouter de façon déclarative un script client à une page Web en incluant le script dans le balisage HTML de la page. Toutefois, il existe des situations lors de l’ajout dynamique de script client est nécessaire. Pour ajouter dynamiquement un script, utilisez la <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> (méthode), la <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> (méthode), la <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> (méthode), ou le <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> méthode, en fonction de quand et comment vous souhaitez ajouter le script. Pour plus d’informations, consultez [Comment : ajouter Client Script dynamiquement à ASP.NET Web Pages](http://msdn.microsoft.com/library/e89f1306-e43d-49ae-a66a-e18b71007666).  
  
 Le <xref:System.Web.UI.ClientScriptManager> classe identifie de façon unique les scripts par une clé <xref:System.String> et un <xref:System.Type>. Les scripts avec la même clé et le même type sont considérés comme des doublons. À l’aide du type de script permet d’éviter de confondre des scripts semblables à partir de différents contrôles utilisateur qui peuvent être utilisé dans la page.  
  
 La <xref:System.Web.UI.ClientScriptManager> classe peut être utilisée pour appeler des rappels de client dans les situations lorsqu’il est recommandé d’exécuter un code serveur à partir du client sans effectuer de publication. Cela est appelé pour effectuer un rappel hors-bande sur le serveur. Dans un rappel client, une fonction de script client envoie une demande asynchrone pour une page Web ASP.NET. La page Web exécute une version modifiée de son cycle de vie normal pour traiter le rappel. Utilisez la <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> méthode pour obtenir une référence à une fonction cliente qui, lorsqu’elle est appelée, lance un rappel de client à un événement de serveur. Pour plus d’informations, consultez [mise en œuvre les rappels de Client sans publications](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185).  
  
> [!NOTE]
>  Les rappels de script ne fonctionnent pas dans les anciens navigateurs qui ne prennent pas en charge le modèle DOM (Document Object), et ils nécessitent que ECMAScript est activé sur le client. Pour vérifier si le navigateur prend en charge les rappels, utilisez la <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> propriété, qui est accessible via la <xref:System.Web.HttpRequest.Browser%2A> propriété de ASP.NET intrinsèque <xref:System.Web.HttpContext.Request%2A> objet.  
  
 Utilisez le <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> (méthode) et le <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> méthode pour définir un événement de publication (postback) du client. Ces méthodes activent des fonctions de script client lorsqu’elle est appelée pour que le serveur de publication sur la page. Un événement de publication (postback) du client est différent d’un rappel client dans la mesure où la page Web effectue un cycle de vie normal pour le processus de l’événement de publication (postback) du client.  
  
> [!NOTE]
>  Si vous utilisez un <xref:System.Web.UI.WebControls.Button> contrôle et la <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> est définie sur `false`, vous pouvez ensuite utiliser le <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> événement de publication de la méthode pour retourner le client le <xref:System.Web.UI.WebControls.Button> contrôle.  
  
 Le <xref:System.Web.UI.WebControls.Button.OnClientClick%2A> propriété de la <xref:System.Web.UI.WebControls.Button> (contrôle), <xref:System.Web.UI.WebControls.ImageButton> (contrôle), et <xref:System.Web.UI.WebControls.LinkButton> contrôle peut être utilisé pour exécuter le script client.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> méthode de la <xref:System.Web.UI.ClientScriptManager> classe. Deux scripts clients sont définis dans la page : `PopupScript`, qui affiche un message d’alerte lorsque la page est chargée, et `ButtonClickScript`, qui définit un gestionnaire de client pour un bouton HTML `onClick` événement.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="P:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback" />
    <altmember cref="P:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetCallbackEventReference">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtains a reference to a client function that, when invoked, initiates a client call back to a server event.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : System.Web.UI.Control * string * string * string -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (control, argument, clientCallback, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">The server <see cref="T:System.Web.UI.Control" /> that handles the client callback. The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</param>
        <param name="argument">An argument passed from the client script to the server  <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</param>
        <param name="clientCallback">The name of the client event handler that receives the result of the successful server event.</param>
        <param name="context">The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.</param>
        <summary>Obtains a reference to a client function that, when invoked, initiates a client call back to a server event. The client function for this overloaded method includes a specified control, argument, client script, and context.</summary>
        <returns>The name of a client function that invokes the client callback.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29> méthode effectue un rappel hors-bande sur le serveur qui est une version modifiée du cycle de vie normal d’une page. Pour plus d’informations, consultez [mise en œuvre les rappels de Client sans publications](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185).  
  
> [!NOTE]
>  Lorsque le navigateur est Microsoft Internet Explorer (version 5.0 ou version ultérieure), le mécanisme de rappel de script est implémenté via l’objet Microsoft.XmlHttp COM et nécessite que le navigateur soit configuré pour exécuter les contrôles ActiveX. Pour d’autres navigateurs, un XMLHttpRequest à l’aide local modèle DOM du navigateur (Document Object) est utilisé. Pour vérifier si un navigateur prend en charge les rappels de client, utilisez le <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> propriété. Pour vérifier si un navigateur prend en charge XML sur HTTP, utilisez le <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A> propriété. Les deux propriétés sont accessibles via la <xref:System.Web.HttpRequest.Browser%2A> propriété de ASP.NET intrinsèque <xref:System.Web.HttpContext.Request%2A> objet.  
  
 Le <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> surcharge de la <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> méthode exécute un rappel synchrone à l’aide de XML sur HTTP. Lors de l’envoi synchrone des données dans un scénario de rappel, les rappels synchrones retournent immédiatement et ne bloquent pas le navigateur. Aucun deux rappels synchrones ne peuvent exécuter en même temps dans le navigateur. Si un deuxième rappel synchrone est déclenché lorsqu’une est actuellement en attente, le deuxième annule le premier et retourne uniquement le deuxième rappel.  
  
 Pour envoyer des données en mode asynchrone, utilisez une des surcharges qui acceptent le `useAsync` paramètre, qui est une valeur booléenne valeur contrôler ce comportement. Dans le scénario asynchrone, vous pouvez avoir plusieurs rappels en attente ; Toutefois, l’ordre dans lequel elles retournent n’est pas garanti pour correspondre à l’ordre dans lequel elles ont été démarrées.  
  
 En outre, cette surcharge de la <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> méthode ne spécifie aucune fonction cliente pour gérer le cas d’une condition d’erreur généré par le <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> (méthode). Pour spécifier un gestionnaire de rappel d’erreur client, utilisez une des surcharges qui acceptent le `clientErrorCallback` paramètre.  
  
 Le <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29> méthode prend une chaîne facultative `argument` paramètre et retourne une chaîne. Pour transmettre ou recevoir plusieurs valeurs, concaténer des valeurs dans l’entrée ou retour de chaîne, respectivement.  
  
> [!NOTE]
>  Évitez d’utiliser l’état d’affichage dans l’implémentation de contrôle ou la page des propriétés qui doivent être mis à jour au cours des opérations de rappel de script. Si les propriétés sont survivre à des demandes de page, vous pouvez utiliser l’état de session.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser deux surcharges de la <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> méthode dans un scénario de rappel client qui incrémente des entiers.  
  
 Deux mécanismes de rappel sont affichées ; la différence est l’utilisation de le `context` paramètre. A `ReceiveServerData1` fonction de rappel client est fournie à l’aide de le `context` paramètre. En revanche, le `ReceiveServerData2` fonction de rappel client est définie dans un `<script>` bloc sur la page. A <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> méthode est le Gestionnaire de serveur qui incrémente la valeur qui lui est passée et le <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> méthode retourne la valeur incrémentée sous forme de chaîne. Si le <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> méthode retourne une erreur, puis le `ProcessCallBackError` client est appelée.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/cs/getcallbackeventreference.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/vb/getcallbackeventreference.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Web.UI.Control" /> specified is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.UI.Control" /> specified does not implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface.</exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, bool useAsync);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : System.Web.UI.Control * string * string * string * bool -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (control, argument, clientCallback, context, useAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">The server <see cref="T:System.Web.UI.Control" /> that handles the client callback. The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</param>
        <param name="argument">An argument passed from the client script to the server  <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</param>
        <param name="clientCallback">The name of the client event handler that receives the result of the successful server event.</param>
        <param name="context">The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.</param>
        <param name="useAsync">
          <see langword="true" /> to perform the callback asynchronously; <see langword="false" /> to perform the callback synchronously.</param>
        <summary>Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified control, argument, client script, context, and Boolean value.</summary>
        <returns>The name of a client function that invokes the client callback.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette surcharge de la <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> méthode requiert un `useAsync` paramètre, qui vous permet d’effectuer de manière asynchrone le rappel du client en affectant la valeur `true`. Les versions de surcharge de cette méthode qui ne requièrent pas la `useAsync` paramètre la valeur `false` par défaut.  
  
 Pour plus d’informations sur cette méthode, consultez la section Notes de la surcharge <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Web.UI.Control" /> specified is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.UI.Control" /> specified does not implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface.</exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackEventReference (target As String, argument As String, clientCallback As String, context As String, clientErrorCallback As String, useAsync As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::String ^ target, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, System::String ^ clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : string * string * string * string * string * bool -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (target, argument, clientCallback, context, clientErrorCallback, useAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="clientErrorCallback" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="target">The name of a server <see cref="T:System.Web.UI.Control" /> that handles the client callback. The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</param>
        <param name="argument">An argument passed from the client script to the server  <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</param>
        <param name="clientCallback">The name of the client event handler that receives the result of the successful server event.</param>
        <param name="context">The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.</param>
        <param name="clientErrorCallback">The name of the client event handler that receives the result when an error occurs in the server event handler.</param>
        <param name="useAsync">
          <see langword="true" /> to perform the callback asynchronously; <see langword="false" /> to perform the callback synchronously.</param>
        <summary>Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified target, argument, client script, context, error handler, and Boolean value.</summary>
        <returns>The name of a client function that invokes the client callback.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette surcharge de la <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> méthode prend un `target` au lieu du paramètre de chaîne un <xref:System.Web.UI.Control> paramètre. Utilisez cette surcharge lorsque vous souhaitez que le rappel pour revenir à autre chose qu’une chaîne contenant le <xref:System.Web.UI.Control.UniqueID%2A> du contrôle.  
  
 En outre, cette surcharge de la <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> méthode requiert un `useAsync` et un `clientErrorCallback` paramètre. Le `useAsync` paramètre vous permet d’effectuer de manière asynchrone le rappel du client en affectant la valeur `true`. Les versions de surcharge de cette méthode qui ne requièrent pas la `useAsync` paramètre la valeur `false` par défaut. Le `clientErrorCallback` paramètre vous permet de définir le nom de la fonction de client qui est appelée si le Gestionnaire de serveur, le <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> méthode, retourne une erreur. Les versions de surcharge de cette méthode qui ne nécessitent pas le `clientErrorCallback` paramètre la valeur null.  
  
 Pour plus d’informations sur cette méthode, consultez la section Notes de la surcharge <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> (méthode).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser deux surcharges de la <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> méthode dans un scénario de rappel client qui incrémente des entiers.  
  
 Deux mécanismes de rappel sont affichées ; la différence est l’utilisation de le `context` paramètre. A `ReceiveServerData1` fonction de rappel client est fournie à l’aide de le `context` paramètre. En revanche, le `ReceiveServerData2` fonction de rappel client est définie dans un `<script>` bloc sur la page. A <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> méthode est le Gestionnaire de serveur qui incrémente la valeur qui lui est passée et le <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> méthode retourne la valeur incrémentée sous forme de chaîne. Si le <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> méthode retourne une erreur, puis la fonction client `ProcessCallBackError` est appelée.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/cs/getcallbackeventreference.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/vb/getcallbackeventreference.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <altmember cref="P:System.Web.UI.Control.UniqueID" />
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, System::String ^ clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : System.Web.UI.Control * string * string * string * string * bool -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (control, argument, clientCallback, context, clientErrorCallback, useAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="clientErrorCallback" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">The server <see cref="T:System.Web.UI.Control" /> that handles the client callback. The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</param>
        <param name="argument">An argument passed from the client script to the server <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</param>
        <param name="clientCallback">The name of the client event handler that receives the result of the successful server event.</param>
        <param name="context">The client script that is evaluated on the client prior to initiating the callback. The result of the script is passed back to the client event handler.</param>
        <param name="clientErrorCallback">The name of the client event handler that receives the result when an error occurs in the server event handler.</param>
        <param name="useAsync">
          <see langword="true" /> to perform the callback asynchronously; <see langword="false" /> to perform the callback synchronously.</param>
        <summary>Obtains a reference to a client function that, when invoked, initiates a client call back to server events. The client function for this overloaded method includes a specified control, argument, client script, context, error handler, and Boolean value.</summary>
        <returns>The name of a client function that invokes the client callback.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette surcharge de la <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> méthode requiert un `useAsync` et un `clientErrorCallback` paramètre. Le `useAsync` paramètre vous permet d’effectuer de manière asynchrone le rappel du client en affectant la valeur `true`. Les versions de surcharge de cette méthode qui ne requièrent pas la `useAsync` paramètre la valeur `false` par défaut. Le `clientErrorCallback` paramètre vous permet de définir le nom de la fonction de client qui est appelée si le Gestionnaire de serveur (le <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> (méthode)) retourne une erreur. Les versions de surcharge de cette méthode qui ne nécessitent pas le `clientErrorCallback` paramètre la valeur null.  
  
 Pour plus d’informations sur cette méthode, consultez la section Notes de la surcharge <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Web.UI.Control" /> specified is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.UI.Control" /> specified does not implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface.</exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPostBackClientHyperlink">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets a reference, with <see langword="javascript:" /> appended to the beginning of it, that can be used in a client event to post back to the server.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPostBackClientHyperlink">
      <MemberSignature Language="C#" Value="public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackClientHyperlink(class System.Web.UI.Control control, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackClientHyperlink(System::Web::UI::Control ^ control, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackClientHyperlink : System.Web.UI.Control * string -&gt; string" Usage="clientScriptManager.GetPostBackClientHyperlink (control, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">The server control to process the postback.</param>
        <param name="argument">The parameter passed to the server control.</param>
        <summary>Gets a reference, with <see langword="javascript:" /> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control and with the specified event arguments.</summary>
        <returns>A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À l’aide de la <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> méthode requiert le contrôle qui gère la publication (postback) pour implémenter le <xref:System.Web.UI.IPostBackEventHandler> interface. Pour implémenter le <xref:System.Web.UI.IPostBackEventHandler> de l’interface pour un <xref:System.Web.UI.Page>, utilisez la directive.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> (méthode). Le contrôle personnalisé, `MyControl`, implémente le <xref:System.Web.UI.IPostBackEventHandler> interface. Lorsque vous cliquez sur l’élément d’ancrage HTML dans la page, le <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> méthode du contrôle personnalisé est appelée.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreferencecs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreferencevb.aspx#1)]  
  
 L’exemple de code suivant a les mêmes fonctionnalités que le précédent, mais au lieu d’un contrôle personnalisé, le <xref:System.Web.UI.Page> la classe implémente le <xref:System.Web.UI.IPostBackEventHandler> interface.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreference2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreference2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackClientHyperlink">
      <MemberSignature Language="C#" Value="public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackClientHyperlink(class System.Web.UI.Control control, string argument, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackClientHyperlink(System::Web::UI::Control ^ control, System::String ^ argument, bool registerForEventValidation);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackClientHyperlink : System.Web.UI.Control * string * bool -&gt; string" Usage="clientScriptManager.GetPostBackClientHyperlink (control, argument, registerForEventValidation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">The server control to process the postback.</param>
        <param name="argument">The parameter passed to the server control.</param>
        <param name="registerForEventValidation">
          <see langword="true" /> to register the postback event for validation; <see langword="false" /> to not register the post back event for validation.</param>
        <summary>Gets a reference, with <see langword="javascript:" /> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control with the specified event arguments and Boolean indication whether to register the post back for event validation.</summary>
        <returns>A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À l’aide de la <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> méthode requiert le contrôle qui gère la publication (postback) pour implémenter le <xref:System.Web.UI.IPostBackEventHandler> interface. Pour implémenter le <xref:System.Web.UI.IPostBackEventHandler> de l’interface pour un <xref:System.Web.UI.Page>, utilisez la directive.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPostBackEventReference">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string that can be used in a client event to cause postback to the server.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.PostBackOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.PostBackOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackEventReference (options As PostBackOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::PostBackOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.PostBackOptions -&gt; string" Usage="clientScriptManager.GetPostBackEventReference options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
      </Parameters>
      <Docs>
        <param name="options">A <see cref="T:System.Web.UI.PostBackOptions" /> that defines the postback.</param>
        <summary>Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified <see cref="T:System.Web.UI.PostBackOptions" /> instance.</summary>
        <returns>A string that, when treated as script on the client, initiates the client postback.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour implémenter le <xref:System.Web.UI.IPostBackEventHandler> de l’interface pour un <xref:System.Web.UI.Page>, utilisez la directive.  
  
 Le <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> méthode peut être utilisée avec la <xref:System.Web.UI.WebControls.Button> contrôle lorsque le <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> propriété est `false`. Dans ce scénario, le <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> événement de publication de client de méthode retourne la <xref:System.Web.UI.WebControls.Button> contrôle.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Web.UI.PostBackOptions" /> parameter is <see langword="null" /></exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <altmember cref="T:System.Web.UI.WebControls.Button" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.Control control, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.Control control, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::Control ^ control, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.Control * string -&gt; string" Usage="clientScriptManager.GetPostBackEventReference (control, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">The server <see cref="T:System.Web.UI.Control" /> that processes the postback on the server.</param>
        <param name="argument">A string of optional arguments to pass to the control that processes the postback.</param>
        <summary>Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified control that handles the postback and a string argument of additional event information.</summary>
        <returns>A string that, when treated as script on the client, initiates the postback.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour implémenter le <xref:System.Web.UI.IPostBackEventHandler> de l’interface pour un <xref:System.Web.UI.Page>, utilisez la directive.  
  
 Le <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> méthode peut être utilisée avec la <xref:System.Web.UI.WebControls.Button> contrôle lorsque le <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> propriété est `false`. Dans ce scénario, le <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> événement de publication de client de méthode retourne la <xref:System.Web.UI.WebControls.Button> contrôle.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> (méthode). Le contrôle personnalisé, `MyControl`, implémente le <xref:System.Web.UI.IPostBackEventHandler> interface. Lorsque vous cliquez sur le bouton de la page, le <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> méthode du contrôle personnalisé est appelée.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreferencecs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreferencevb.aspx#1)]  
  
 L’exemple de code suivant a les mêmes fonctionnalités que le précédent, mais au lieu d’un contrôle personnalisé, le <xref:System.Web.UI.Page> la classe implémente le <xref:System.Web.UI.IPostBackEventHandler> interface.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreference2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreference2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The specified <see cref="T:System.Web.UI.Control" /> is <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.PostBackOptions options, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.PostBackOptions options, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackEventReference (options As PostBackOptions, registerForEventValidation As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::PostBackOptions ^ options, bool registerForEventValidation);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.PostBackOptions * bool -&gt; string" Usage="clientScriptManager.GetPostBackEventReference (options, registerForEventValidation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="options">A <see cref="T:System.Web.UI.PostBackOptions" /> that defines the postback.</param>
        <param name="registerForEventValidation">
          <see langword="true" /> to register the event reference for validation; otherwise, <see langword="false" />.</param>
        <summary>Returns a string that can be used in a client event to cause postback to the server. The reference string is defined by the specified <see cref="T:System.Web.UI.PostBackOptions" /> object. Optionally, registers the event reference for validation.</summary>
        <returns>A string that, when treated as script on the client, initiates the client postback.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour implémenter le <xref:System.Web.UI.IPostBackEventHandler> de l’interface pour un <xref:System.Web.UI.Page> d’objet, utilisez la directive.  
  
 Le <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> méthode peut être utilisée avec la <xref:System.Web.UI.WebControls.Button> contrôle lorsque le <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> propriété est `false`. Dans ce scénario, le <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> événement de publication de client de méthode retourne la <xref:System.Web.UI.WebControls.Button> contrôle.  
  
 Si `registerForEventValidation` est `true`, le <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> les appels de méthode le <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> méthode pour inscrire la référence d’événement pour la validation avec un ID de contrôle unique qui représente le contrôle client qui génère l’événement.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Web.UI.PostBackOptions" /> is <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <altmember cref="T:System.Web.UI.WebControls.Button" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.Control control, string argument, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.Control control, string argument, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, bool registerForEventValidation);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.Control * string * bool -&gt; string" Usage="clientScriptManager.GetPostBackEventReference (control, argument, registerForEventValidation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">The server <see cref="T:System.Web.UI.Control" /> that processes the postback on the server.</param>
        <param name="argument">A string of optional arguments to pass to <c>control</c>.</param>
        <param name="registerForEventValidation">
          <see langword="true" /> to register the event reference for validation; otherwise, <see langword="false" />.</param>
        <summary>Returns a string to use in a client event to cause postback to the server. The reference string is defined by the specified control that handles the postback and a string argument of additional event information. Optionally, registers the event reference for validation.</summary>
        <returns>A string that, when treated as script on the client, initiates the postback.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour implémenter le <xref:System.Web.UI.IPostBackEventHandler> de l’interface pour un <xref:System.Web.UI.Page>, utilisez la directive.  
  
 Le <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> méthode peut être utilisée avec la <xref:System.Web.UI.WebControls.Button> contrôle lorsque le <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> propriété est `false`. Dans ce scénario, le <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> événement de publication de client de méthode retourne la <xref:System.Web.UI.WebControls.Button> contrôle.  
  
 Si `registerForEventValidation` a la valeur true, le <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> les appels de méthode le <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> méthode pour inscrire la référence d’événement pour la validation avec un ID de contrôle unique qui représente le contrôle client qui génère l’événement.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The specified <see cref="T:System.Web.UI.Control" /> is <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="GetWebResourceUrl">
      <MemberSignature Language="C#" Value="public string GetWebResourceUrl (Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetWebResourceUrl(class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetWebResourceUrl(Type ^ type, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="member this.GetWebResourceUrl : Type * string -&gt; string" Usage="clientScriptManager.GetWebResourceUrl (type, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The type of the resource.</param>
        <param name="resourceName">The fully qualified name of the resource in the assembly.</param>
        <summary>Gets a URL reference to a resource in an assembly.</summary>
        <returns>The URL reference to the resource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> méthode retourne une référence URL à une ressource incorporée dans un assembly. La référence retournée n’est pas encodé en URL. Ressources peuvent être n’importe quel fichier statique, des images ou des fichiers de script. Vous spécifiez le type de l’objet qui accédera à la ressource.  
  
 Une ressource Web inscrite avec la page est identifiée par son type et son nom. Une seule ressource avec une paire de nom et un type donné peut être inscrit avec la page. Tentative d’inscription d’une ressource qui est déjà inscrit ne crée pas un doublon de la ressource inscrite.  
  
 Le <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> méthode est utilisée conjointement avec la <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> méthode pour accéder aux ressources incorporés dans des assemblys. Pour plus d’informations sur l’utilisation des ressources dans les applications, consultez [vue d’ensemble des ressources de Page Web ASP.NET](http://msdn.microsoft.com/library/0936b3b2-9e6e-4abe-9c06-364efef9dbbd).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> (méthode). Le *type* dans cet exemple est affectée au type de classe dans l’assembly contenant la ressource. Le `resourceName` paramètre est spécifié avec le chemin d’accès complet à la ressource, qui inclut l’espace de noms par défaut.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/clientscriptwebresource.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/clientscriptwebresource.aspx#1)]  
  
 L’exemple de code suivant montre comment appliquer par programme le <xref:System.Web.UI.WebResourceAttribute> attribut de métadonnées pour marquer l’assembly pour les ressources qui sera pris en charge. Compilez la classe suivante dans une bibliothèque de classes avec un espace de noms par défaut la valeur `Samples.AspNet.CS.Controls` ou `Samples.AspNet.VB.Controls`, selon le langage que vous utilisez.  
  
 [!code-csharp[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/resource.cs#2)]
 [!code-vb[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/resource.vb#2)]  
  
 Cet exemple nécessite un fichier JavaScript nommé `Script_include.js`. Le fichier .js est une ressource incorporée dans l’assembly qui contient le `ClientScriptResourceLabel` objet. Si vous utilisez Visual Studio], dans la fenêtre Propriétés de projet bibliothèque de classes, définissez **Action de génération** à **ressource incorporée** lorsque le fichier de script est activée. Si vous compilez la bibliothèque en ligne de commande, utilisez le commutateur pour incorporer la ressource.  
  
```  
function DoClick() {Form1.Message.value='Text from resource script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The web resource name is <see langword="null" />.  \- or -  The web resource name has a length of zero.</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
        <altmember cref="T:System.Web.Handlers.AssemblyResourceLoader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsClientScriptBlockRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether the client script block is registered with the <see cref="T:System.Web.UI.Page" /> object.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsClientScriptBlockRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptBlockRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptBlockRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptBlockRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptBlockRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptBlockRegistered : string -&gt; bool" Usage="clientScriptManager.IsClientScriptBlockRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The key of the client script block to search for.</param>
        <summary>Determines whether the client script block is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</summary>
        <returns>
          <see langword="true" /> if the client script block is registered; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez cette méthode avant d’appeler le <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> méthode pour éviter d’inscrire des scripts dupliqués. Cela est particulièrement important si le script nécessite une grande quantité de ressources du serveur à créer.  
  
 Un script client est identifié de manière unique par sa clé et son type. Les scripts avec la même clé et le même type sont considérés comme des doublons.  
  
 Cette surcharge de la <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> méthode appelle la surcharge qui accepte à la fois un `key` et un `type` paramètre avec le type est défini comme un <xref:System.Web.UI.Page> objet  
  
   
  
## Examples  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <Member MemberName="IsClientScriptBlockRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptBlockRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptBlockRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptBlockRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptBlockRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsClientScriptBlockRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The type of the client script block to search for.</param>
        <param name="key">The key of the client script block to search for.</param>
        <summary>Determines whether the client script block is registered with the <see cref="T:System.Web.UI.Page" /> object using a key and type.</summary>
        <returns>
          <see langword="true" /> if the client script block is registered; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez cette méthode avant d’appeler le <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> méthode pour éviter d’inscrire des scripts dupliqués. Cela est particulièrement important si le script nécessite une grande quantité de ressources du serveur à créer.  
  
 Un script client est identifié de manière unique par sa clé et son type. Les scripts avec la même clé et le même type sont considérés comme des doublons. Vous spécifiez le type de l’objet qui accédera à la ressource. Par exemple, lorsque vous utilisez un `Page` instance pour accéder à la ressource, vous spécifiez la `Page` type.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> (méthode). Notez que, si la logique à vérifier pour le bloc de script client existant était supprimée, il ne soit pas deux scripts clients en double dans le code source HTML de la page rendue, car la <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> méthode vérifie les doublons. L’avantage de la vérification est de réduire les calculs inutiles.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The client script type is <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsClientScriptIncludeRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether the client script include is registered with the <see cref="T:System.Web.UI.Page" /> object.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsClientScriptIncludeRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptIncludeRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptIncludeRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptIncludeRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptIncludeRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptIncludeRegistered : string -&gt; bool" Usage="clientScriptManager.IsClientScriptIncludeRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The key of the client script include to search for.</param>
        <summary>Determines whether the client script include is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</summary>
        <returns>
          <see langword="true" /> if the client script include is registered; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez cette méthode avant d’appeler le <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> méthode pour éviter d’inscrire des scripts dupliqués. Cela est particulièrement important si le script nécessite une grande quantité de ressources du serveur à créer.  
  
 Un script client include est identifié de manière unique par sa clé et son type. Les scripts avec la même clé et le même type sont considérés comme des doublons.  
  
 Cette surcharge de la <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> méthode appelle la surcharge qui accepte à la fois un `key` et un `type` paramètre avec le type est défini comme un <xref:System.Web.UI.Page> objet.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
      </Docs>
    </Member>
    <Member MemberName="IsClientScriptIncludeRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptIncludeRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptIncludeRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptIncludeRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptIncludeRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsClientScriptIncludeRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The type of the client script include to search for.</param>
        <param name="key">The key of the client script include to search for.</param>
        <summary>Determines whether the client script include is registered with the <see cref="T:System.Web.UI.Page" /> object using a key and type.</summary>
        <returns>
          <see langword="true" /> if the client script include is registered; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez cette méthode avant d’appeler le <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> inclut de méthode pour éviter d’inscrire le script client en double. Cela est particulièrement important si le script nécessite une grande quantité de ressources du serveur à créer.  
  
 Un script client include est identifié de manière unique par sa clé et son type. Les scripts avec la même clé et le même type sont considérés comme des doublons. Vous spécifiez le type de l’objet qui accédera à la ressource. Par exemple, lorsque vous utilisez une instance de Page pour accéder à la ressource, vous spécifiez la `Page` type.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A> (méthode). Notez que, si la logique à vérifier pour le script client include existant était supprimée, il ne soit pas deux scripts clients en double dans le code source HTML de la page rendue, car la <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> méthode vérifie les doublons. L’avantage de la vérification est de réduire les calculs inutiles.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/cs/clientscriptincludes.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/vb/clientscriptincludes.aspx#1)]  
  
 Cet exemple nécessite un fichier JavaScript nommé `Script_include.js`, avec le contenu suivant :  
  
```  
function DoClick() {Form1.Message.value='Text from include script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The client script include type is <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsOnSubmitStatementRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether the OnSubmit statement is registered with the <see cref="T:System.Web.UI.Page" /> object.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsOnSubmitStatementRegistered">
      <MemberSignature Language="C#" Value="public bool IsOnSubmitStatementRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOnSubmitStatementRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOnSubmitStatementRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOnSubmitStatementRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsOnSubmitStatementRegistered : string -&gt; bool" Usage="clientScriptManager.IsOnSubmitStatementRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The key of the OnSubmit statement to search for.</param>
        <summary>Determines whether the OnSubmit statement is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</summary>
        <returns>
          <see langword="true" /> if the OnSubmit statement is registered; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez cette méthode avant d’appeler le <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> méthode pour éviter d’inscrire des instructions OnSubmit en double. Cela est particulièrement important si l’instruction nécessite une grande quantité de ressources du serveur à créer.  
  
 Une instruction est identifiée par sa clé et son type. Les instructions avec la même clé et le même type sont considérés comme des doublons.  
  
 Cette surcharge de la <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> méthode appelle la surcharge qui accepte à la fois un `key` et un `type` paramètre avec le type est défini comme un <xref:System.Web.UI.Page> objet  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsOnSubmitStatementRegistered">
      <MemberSignature Language="C#" Value="public bool IsOnSubmitStatementRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOnSubmitStatementRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOnSubmitStatementRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsOnSubmitStatementRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsOnSubmitStatementRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The type of the OnSubmit statement to search for.</param>
        <param name="key">The key of the OnSubmit statement to search for.</param>
        <summary>Determines whether the OnSubmit statement is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key and type.</summary>
        <returns>
          <see langword="true" /> if the OnSubmit statement is registered; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez cette méthode avant d’appeler le <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> méthode pour éviter d’inscrire des instructions en double. Cela est particulièrement important si l’instruction nécessite une grande quantité de ressources du serveur à créer.  
  
 Une instruction est identifiée par sa clé et son type. Les instructions avec la même clé et le même type sont considérés comme des doublons. Vous spécifiez le type de l’objet qui accédera à la ressource. Par exemple, lorsque vous utilisez un `Page` instance pour accéder à la ressource, vous spécifiez la `Page` type.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> (méthode). Un script nommé `OnSubmitScript` est inscrit avec le <xref:System.Web.UI.Page> afin que lorsque l’écran de la page est envoyé le script est appelé.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/cs/clientscriptonsubmit.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/vb/clientscriptonsubmit.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The OnSubmit statement type is <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsStartupScriptRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether the startup script is registered with the <see cref="T:System.Web.UI.Page" /> object.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsStartupScriptRegistered">
      <MemberSignature Language="C#" Value="public bool IsStartupScriptRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsStartupScriptRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsStartupScriptRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsStartupScriptRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsStartupScriptRegistered : string -&gt; bool" Usage="clientScriptManager.IsStartupScriptRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The key of the startup script to search for.</param>
        <summary>Determines whether the startup script is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</summary>
        <returns>
          <see langword="true" /> if the startup script is registered; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez cette méthode avant d’appeler le <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> méthode pour éviter d’inscrire des scripts dupliqués. Cela est particulièrement important si le script nécessite une grande quantité de ressources du serveur à créer.  
  
 Un script de démarrage est identifié de manière unique par sa clé et son type. Les scripts avec la même clé et le même type sont considérés comme des doublons.  
  
 Cette surcharge de la <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> méthode appelle la surcharge qui accepte à la fois une chaîne `key` et un `type` paramètre avec le type est défini comme un <xref:System.Web.UI.Page> objet  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" />
      </Docs>
    </Member>
    <Member MemberName="IsStartupScriptRegistered">
      <MemberSignature Language="C#" Value="public bool IsStartupScriptRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsStartupScriptRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsStartupScriptRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsStartupScriptRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsStartupScriptRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The type of the startup script to search for.</param>
        <param name="key">The key of the startup script to search for.</param>
        <summary>Determines whether the startup script is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key and type.</summary>
        <returns>
          <see langword="true" /> if the startup script is registered; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez cette méthode avant d’appeler le <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> méthode pour éviter d’inscrire des scripts dupliqués. Cela est particulièrement important si le script nécessite une grande quantité de ressources du serveur à créer.  
  
 Un script de démarrage du client est identifié de manière unique par sa clé et son type. Les scripts avec la même clé et le même type sont considérés comme des doublons.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> (méthode). Notez que, si la logique à vérifier pour le bloc de script de démarrage existantes ont été supprimée, il ne soit pas deux scripts de démarrage en double dans le code source HTML de la page rendue, car la <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> méthode vérifie les doublons. L’avantage de la vérification est de réduire les calculs inutiles.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The startup script type is <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" />
      </Docs>
    </Member>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public void RegisterArrayDeclaration (string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterArrayDeclaration(string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterArrayDeclaration (arrayName As String, arrayValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterArrayDeclaration(System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberSignature Language="F#" Value="member this.RegisterArrayDeclaration : string * string -&gt; unit" Usage="clientScriptManager.RegisterArrayDeclaration (arrayName, arrayValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="arrayName">The array name to register.</param>
        <param name="arrayValue">The array value or values to register.</param>
        <summary>Registers a JavaScript array declaration with the <see cref="T:System.Web.UI.Page" /> object using an array name and array value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> vérifie l’existence d’un tableau inscrit avec le même nom que le nom spécifié dans le `arrayName` paramètre et, dans ce cas, ajoute les valeurs spécifiées dans le `arrayValue` paramètre. Étant donné que le mécanisme de stockage sous-jacent est basé sur un <xref:System.Collections.ArrayList>, les doublons sont autorisés. Si un tableau inscrit avec le même nom que le `arrayName` paramètre n’existe pas, elle est créée et les valeurs dans le `arrayValue` paramètre ajouté à celle-ci.  
  
 Si vous souhaitez que les littéraux de chaîne dans le tableau JavaScript résultant, inclure des guillemets simples (') ou des guillemets doubles (\\») dans le `arrayValue` paramètre. La valeur de le `arrayValue` paramètre doit être un seul élément. Si plus d’une valeur doit être ajouté à la baie, effectuer plusieurs appels à l’aide de la <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> (méthode).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> et <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> méthodes. L’exemple inscrit un tableau et une valeur masquée et définit les `OnClick` événements d’un `<input>` bouton pour calculer la somme de deux valeurs du tableau et la valeur masquée.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/cs/clientscriptregisterarray.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/vb/clientscriptregisterarray.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="arrayName" /> is <see langword="null" />.</exception>
        <altmember cref="Overload:System.String.Split" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptBlock">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registers the client script with the <see cref="T:System.Web.UI.Page" /> object.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptBlock (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptBlock(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptBlock(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptBlock : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptBlock (type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The type of the client script to register.</param>
        <param name="key">The key of the client script to register.</param>
        <param name="script">The client script literal to register.</param>
        <summary>Registers the client script with the <see cref="T:System.Web.UI.Page" /> object using a type, key, and script literal.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un script client est identifié de manière unique par sa clé et son type. Les scripts avec la même clé et le même type sont considérés comme des doublons. Un seul script avec un type donné et une paire de clés peut être inscrits avec la page. Tente d’inscrire un script qui est déjà inscrit ne crée pas un doublon du script.  
  
 Appelez le <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> méthode pour déterminer si un script client avec une paire clé / type donnée est déjà enregistré et éviter toute tentative d’ajouter le script.  
  
 Dans cette surcharge de la <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> (méthode), vous devez vous assurer que le script fourni dans le `script` paramètre est encapsulé dans un `<script>` bloc d’élément.  
  
 Le <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> méthode ajoute un bloc de script en haut de la page rendue. Les blocs de script ne sont pas garanti que la sortie dans l’ordre qu’ils sont inscrits. Si l’ordre des blocs de script est important, utilisez un <xref:System.Text.StringBuilder> pour rassembler les scripts dans une chaîne unique de l’objet, puis tous les enregistrer dans un bloc de script client unique.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> (méthode).  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager12/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager12/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptBlock (Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptBlock(class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptBlock(Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptBlock : Type * string * string * bool -&gt; unit" Usage="clientScriptManager.RegisterClientScriptBlock (type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">The type of the client script to register.</param>
        <param name="key">The key of the client script to register.</param>
        <param name="script">The client script literal to register.</param>
        <param name="addScriptTags">A Boolean value indicating whether to add script tags.</param>
        <summary>Registers the client script with the <see cref="T:System.Web.UI.Page" /> object using a type, key, script literal, and Boolean value indicating whether to add script tags.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un script client est identifié de manière unique par sa clé et son type. Les scripts avec la même clé et le même type sont considérés comme des doublons. Un seul script avec un type donné et une paire de clés peut être inscrits avec la page. Tente d’inscrire un script qui est déjà inscrit ne crée pas un doublon du script.  
  
 Appelez le <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> méthode pour déterminer si un script client avec une paire clé / type donnée est déjà inscrit. Cela vous permet d’éviter toute tentative d’ajouter le script.  
  
 Dans cette surcharge de la <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> (méthode), vous pouvez indiquer si le script fourni dans le `script` paramètre est encapsulé avec un `<script>` bloc d’élément à l’aide de le `addScriptTags` paramètre. Paramètre `addScriptTags` à `true` indique que les balises de script sont ajoutés automatiquement.  
  
 Le <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> méthode ajoute un bloc de script en haut de la page rendue. Les blocs de script ne sont pas garanti que la sortie dans l’ordre qu’ils sont inscrits. Si l’ordre des blocs de script est important, utilisez un <xref:System.Text.StringBuilder> pour rassembler les scripts dans une chaîne unique de l’objet, puis tous les enregistrer dans un bloc de script client unique.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> (méthode). Notez que la `addScriptTags` paramètre est défini sur `true` le début et la fermeture des balises de script ne sont pas inclus dans le `script` paramètre.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The client script block type is <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptInclude">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registers the client script include with the <see cref="T:System.Web.UI.Page" /> object.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptInclude (string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptInclude(string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterClientScriptInclude (key As String, url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptInclude(System::String ^ key, System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptInclude : string * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptInclude (key, url)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The key of the client script include to register.</param>
        <param name="url">The URL of the client script include to register.</param>
        <summary>Registers the client script with the <see cref="T:System.Web.UI.Page" /> object using a key and a URL, which enables the script to be called from the client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un script client include est identifié de manière unique par sa clé et son type. Les scripts avec la même clé et le même type sont considérés comme des doublons. Un seul script avec un type donné et une paire de clés peut être inscrits avec la page. Tente d’inscrire un script qui est déjà inscrit ne crée pas un doublon du script.  
  
 Appelez le <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A> méthode pour déterminer si un script client include avec une clé donnée et type paire est déjà inscrit et éviter toute tentative d’ajouter le script.  
  
> [!NOTE]
>  Pour résoudre l’URL de client, utilisez le <xref:System.Web.UI.Control.ResolveClientUrl%2A> (méthode). Cette méthode utilise le contexte de l’URL sur laquelle elle est appelée pour résoudre le chemin d’accès.  
  
 Cette surcharge de la <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> méthode appelle la surcharge qui accepte un `key`, un `URL`et un `type` paramètre.  
  
 La méthode ajoute un bloc de script en haut de la page rendue.  
  
   
  
## Examples  
 Pour plus d’informations, notamment la syntaxe, l’utilisation et un exemple, consultez <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptInclude (Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptInclude(class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptInclude(Type ^ type, System::String ^ key, System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptInclude : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptInclude (type, key, url)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The type of the client script include to register.</param>
        <param name="key">The key of the client script include to register.</param>
        <param name="url">The URL of the client script include to register.</param>
        <summary>Registers the client script include with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, and a URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette surcharge de la <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> méthode prend *clé* et *url* paramètres à identifier le script, ainsi qu’un `type` inclure de paramètre pour spécifier l’identification du script client. Vous spécifiez le type de l’objet qui accédera à la ressource. Par exemple, lorsque vous utilisez un `Page` instance pour accéder à la ressource, vous spécifiez la `Page` type.  
  
> [!NOTE]
>  Pour résoudre l’URL de client, utilisez le <xref:System.Web.UI.Control.ResolveClientUrl%2A> (méthode). Cette méthode utilise le contexte de l’URL sur laquelle elle est appelée pour résoudre le chemin d’accès.  
  
 Cette méthode ajoute un bloc de script en haut de la page rendue.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> (méthode). Notez que si la logique à vérifier pour le script client include existant était supprimée, il est toujours pas les scripts clients en double dans la page rendue, car la <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> méthode vérifie les doublons. L’avantage de la vérification est de réduire les calculs inutiles.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/cs/clientscriptincludes.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/vb/clientscriptincludes.aspx#1)]  
  
 Cet exemple nécessite un fichier JavaScript nommé Script_include.js avec le contenu suivant :  
  
```  
function DoClick() {Form1.Message.value='Text from include script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The client script include type is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The URL is <see langword="null" />.  \- or -  The URL is empty.</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptResource (Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptResource(class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptResource(Type ^ type, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptResource : Type * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptResource (type, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The type of the client script resource to register.</param>
        <param name="resourceName">The name of the client script resource to register.</param>
        <summary>Registers the client script resource with the <see cref="T:System.Web.UI.Page" /> object using a type and a resource name.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> méthode est utilisée lorsque l’accès aux ressources compilées dans des assemblys par le gestionnaire HTTP WebResource.axd. Le <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> méthode inscrit le script avec le <xref:System.Web.UI.Page> de l’objet et empêche les scripts en double. Cette méthode encapsule le contenu de l’URL de ressource avec un `<script>` bloc d’élément.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> (méthode).  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/clientscriptwebresource.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/clientscriptwebresource.aspx#1)]  
  
 L’exemple de code suivant montre comment appliquer par programme le <xref:System.Web.UI.WebResourceAttribute> attribut de métadonnées pour marquer l’assembly pour les ressources qui sera pris en charge.  
  
 [!code-csharp[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/resource.cs#2)]
 [!code-vb[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/resource.vb#2)]  
  
 Cet exemple nécessite un fichier JavaScript nommé `Script_include.js`, avec le contenu suivant :  
  
```  
function DoClick() {Form1.Message.value='Text from resource script.'}  
```  
  
 Compilez le `Script_include.js` fichier en tant que ressource dans le `Samples.AspNet.CS.Controls` assembly qui contient la `ClientScriptResourceLabel` classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The client resource name is <see langword="null" />.  \- or -  The client resource name has a length of zero.</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
        <altmember cref="T:System.Web.Handlers.AssemblyResourceLoader" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterExpandoAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registers a name/value pair as a custom (expando) attribute of the specified control.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExpandoAttribute (controlId As String, attributeName As String, attributeValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterExpandoAttribute(System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue);" />
      <MemberSignature Language="F#" Value="member this.RegisterExpandoAttribute : string * string * string -&gt; unit" Usage="clientScriptManager.RegisterExpandoAttribute (controlId, attributeName, attributeValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="controlId">The <see cref="T:System.Web.UI.Control" /> on the page that contains the custom attribute.</param>
        <param name="attributeName">The name of the custom attribute to register.</param>
        <param name="attributeValue">The value of the custom attribute.</param>
        <summary>Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, attribute name, and attribute value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> méthode inscrit une paire nom/valeur en tant qu’attribut personnalisé (expando) spécifiées <xref:System.Web.UI.Control>. L’attribut expando est défini dynamiquement à partir de JavaScript pour préserver la compatibilité XHTML pour le balisage du rendu du contrôle. Échappement des guillemets et des barres obliques inverses dans les valeurs de l’attribut personnalisé (expando). Si vous ne souhaitez pas échapper les guillemets et des barres obliques inverses, appelez le <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> surcharge de méthode et définissez la `encode` paramètre `false`.  
  
 Si l’attribut expando est introuvable ou le contrôle à ajouter l’attribut expando est introuvable, le script client est toujours émis, mais cela n’affecte pas le contrôle.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.JScript.Expando" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExpandoAttribute (controlId As String, attributeName As String, attributeValue As String, encode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterExpandoAttribute(System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue, bool encode);" />
      <MemberSignature Language="F#" Value="member this.RegisterExpandoAttribute : string * string * string * bool -&gt; unit" Usage="clientScriptManager.RegisterExpandoAttribute (controlId, attributeName, attributeValue, encode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="controlId">The <see cref="T:System.Web.UI.Control" /> on the page that contains the custom attribute.</param>
        <param name="attributeName">The name of the custom attribute to register.</param>
        <param name="attributeValue">The value of the custom attribute.</param>
        <param name="encode">A Boolean value indicating whether to encode the custom attribute to register.</param>
        <summary>Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, an attribute name, an attribute value, and a Boolean value indicating whether to encode the attribute value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> méthode inscrit une paire nom/valeur en tant qu’attribut personnalisé (expando) spécifiées <xref:System.Web.UI.Control>. L’attribut expando est défini dynamiquement à partir de JavaScript pour préserver la compatibilité XHTML pour le balisage du rendu du contrôle. Définir le `encode` paramètre `true` si vous devez échapper des guillemets et des barres obliques inverses dans la valeur de votre attribut expando.  
  
 Si l’attribut expando est introuvable ou le contrôle à ajouter l’attribut expando est introuvable, le script client est toujours émis, mais cela n’affecte pas le contrôle.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> méthode de la <xref:System.Web.UI.ClientScriptManager> classe. Le script client dans la page rendue définit le `title` attribut d’un `<span>` élément.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager6/cs/clientscriptexpando.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager6/vb/clientscriptexpando.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.JScript.Expando" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterForEventValidation">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registers an event reference for validation.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (string uniqueId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(string uniqueId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (uniqueId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::String ^ uniqueId);" />
      <MemberSignature Language="F#" Value="member this.RegisterForEventValidation : string -&gt; unit" Usage="clientScriptManager.RegisterForEventValidation uniqueId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId">A unique ID representing the client control generating the event.</param>
        <summary>Registers an event reference for validation with a unique control ID representing the client control generating the event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations et d’exemples, consultez la <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> (méthode) et le <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> méthode pour inscrire un rappel pour la validation et comment valider que le rappel provenance de la page.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/eventvalidation2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/eventvalidation2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (System.Web.UI.PostBackOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(class System.Web.UI.PostBackOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (options As PostBackOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::Web::UI::PostBackOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.RegisterForEventValidation : System.Web.UI.PostBackOptions -&gt; unit" Usage="clientScriptManager.RegisterForEventValidation options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
      </Parameters>
      <Docs>
        <param name="options">A <see cref="T:System.Web.UI.PostBackOptions" /> object that specifies how client JavaScript is generated to initiate a postback event.</param>
        <summary>Registers an event reference for validation with <see cref="T:System.Web.UI.PostBackOptions" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations et d’exemples, consultez la <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.ValidateEvent" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (string uniqueId, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(string uniqueId, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (uniqueId As String, argument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::String ^ uniqueId, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.RegisterForEventValidation : string * string -&gt; unit" Usage="clientScriptManager.RegisterForEventValidation (uniqueId, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId">A unique ID representing the client control generating the event.</param>
        <param name="argument">Event arguments passed with the client event.</param>
        <summary>Registers an event reference for validation with a unique control ID and event arguments representing the client control generating the event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> (méthode) et le <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> méthode pour inscrire un rappel pour la validation et pour valider que le rappel provenance de la page. Pour améliorer la validation illustrée dans l’exemple, vous pouvez modifier la validation `argument` paramètre pour contenir des informations spécifiques à l’utilisateur tel qu’une identité ou un rôle  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/EventValidationCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/EventValidationVB.aspx#1)]  
  
 L’exemple de code suivant montre comment utiliser la <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> méthode pour inscrire un rappel pour la validation.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager10/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager10/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The method is called prior to the <see cref="M:System.Web.UI.Page.Render(System.Web.UI.HtmlTextWriter)" /> method.</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public void RegisterHiddenField (string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterHiddenField(string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterHiddenField (hiddenFieldName As String, hiddenFieldInitialValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterHiddenField(System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberSignature Language="F#" Value="member this.RegisterHiddenField : string * string -&gt; unit" Usage="clientScriptManager.RegisterHiddenField (hiddenFieldName, hiddenFieldInitialValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hiddenFieldName">The name of the hidden field to register.</param>
        <param name="hiddenFieldInitialValue">The initial value of the field to register.</param>
        <summary>Registers a hidden value with the <see cref="T:System.Web.UI.Page" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> méthode crée un masqué `<input>` élément sur la page HTML rendue.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> et <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> méthodes. L’exemple inscrit un tableau et une valeur masquée et définit les `OnClick` événements d’un `<input>` bouton pour calculer la somme de deux valeurs du tableau et la valeur masquée.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/cs/clientscriptregisterarray.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/vb/clientscriptregisterarray.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hiddenFieldName" /> is <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.HiddenField" />
      </Docs>
    </Member>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public void RegisterOnSubmitStatement (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterOnSubmitStatement(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterOnSubmitStatement(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="member this.RegisterOnSubmitStatement : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterOnSubmitStatement (type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The type of the OnSubmit statement to register.</param>
        <param name="key">The key of the OnSubmit statement to register.</param>
        <param name="script">The script literal of the OnSubmit statement to register.</param>
        <summary>Registers an OnSubmit statement with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, and a script literal. The statement executes when the <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> is submitted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une instruction OnSubmit est identifiée par sa clé et son type. Les instructions avec la même clé et le même type sont considérés comme des doublons. Une seule instruction avec un type donné et une paire de clés peut être inscrits avec la page. Tentative d’inscription d’une instruction qui est déjà inscrit ne crée pas un doublon de l’instruction.  
  
 Appelez le <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> méthode pour déterminer si une instruction OnSubmit est déjà inscrite avec une paire clé / type donnée et éviter toute tentative d’ajouter le script.  
  
 Le `script` paramètre de la <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> méthode peut contenir plusieurs commandes de script tant qu’ils sont correctement délimitées par un point-virgule ( ;).  
  
 Le <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> ajoute un script exécuté avant que la page est envoyée et vous donne la possibilité d’annuler l’envoi.  
  
 Pour plus d’informations sur les formulaires HTML et le `OnSubmit` d’attribut, consultez la [site Web du World Wide Web Consortium (W3C)](http://go.microsoft.com/fwlink/?linkid=37125).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> (méthode).  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/cs/clientscriptonsubmit.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/vb/clientscriptonsubmit.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> is <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.HtmlControls.HtmlForm" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterStartupScript">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registers the startup script with the <see cref="T:System.Web.UI.Page" /> object.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public void RegisterStartupScript (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterStartupScript(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterStartupScript(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="member this.RegisterStartupScript : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterStartupScript (type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The type of the startup script to register.</param>
        <param name="key">The key of the startup script to register.</param>
        <param name="script">The startup script literal to register.</param>
        <summary>Registers the startup script with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, and a script literal.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un script client est identifié de manière unique par sa clé et son type. Les scripts avec la même clé et le même type sont considérés comme des doublons. Un seul script avec un type donné et une paire de clés peut être inscrits avec la page. Tente d’inscrire un script qui est déjà inscrit ne crée pas un doublon du script.  
  
 Appelez le <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> méthode pour déterminer si un script de démarrage avec une paire clé / type donnée est déjà enregistré et éviter toute tentative d’ajouter le script.  
  
 Dans cette surcharge de la <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> (méthode), vous devez vous assurer que le script fourni dans le `script` paramètre est encapsulé avec un `<script>` bloc d’élément.  
  
 Le bloc de script ajouté par le <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> méthode s’exécute lorsque la page est chargée, mais avant de la page <xref:System.Web.UI.Control.OnLoad%2A> événement est déclenché. Les blocs de script ne sont pas garanti que la sortie dans l’ordre qu’ils sont inscrits. Si l’ordre des blocs de script est important, utilisez un <xref:System.Text.StringBuilder> pour rassembler les scripts dans une chaîne unique de l’objet, puis tous les enregistrer dans un bloc de script client unique.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> (méthode). Notez que le début et la fermeture des balises de script sont inclus dans le `script` paramètre. Pour que le script de balises ajoutées en fonction d’un paramètre supplémentaire, consultez le <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> (méthode).  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager11#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager11/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager11#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager11/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public void RegisterStartupScript (Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterStartupScript(class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterStartupScript(Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="member this.RegisterStartupScript : Type * string * string * bool -&gt; unit" Usage="clientScriptManager.RegisterStartupScript (type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">The type of the startup script to register.</param>
        <param name="key">The key of the startup script to register.</param>
        <param name="script">The startup script literal to register.</param>
        <param name="addScriptTags">A Boolean value indicating whether to add script tags.</param>
        <summary>Registers the startup script with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, a script literal, and a Boolean value indicating whether to add script tags.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un script de démarrage est identifié de manière unique par sa clé et son type. Les scripts avec la même clé et le même type sont considérés comme des doublons. Un seul script avec un type donné et une paire de clés peut être inscrits avec la page. Tente d’inscrire un script qui est déjà inscrit ne crée pas un doublon du script.  
  
 Appelez le <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> méthode pour déterminer si un script de démarrage avec une paire clé / type donnée est déjà enregistré et éviter toute tentative d’ajouter le script.  
  
 Dans cette surcharge de la <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> (méthode), vous pouvez indiquer si le script fourni dans le `script` paramètre est encapsulé avec un `<script>` bloc d’élément à l’aide de le `addScriptTags` paramètre. Paramètre `addScriptTags` à `true` indique que les balises de script sont ajoutés automatiquement.  
  
 Le bloc de script ajouté par le <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> méthode s’exécute lorsque la page est chargée, mais avant de la page <xref:System.Web.UI.Control.OnLoad%2A> événement est déclenché. Les blocs de script ne sont pas garanti que la sortie dans l’ordre qu’ils sont inscrits. Si l’ordre des blocs de script est important, utilisez un <xref:System.Text.StringBuilder> pour rassembler les scripts dans une chaîne unique de l’objet, puis tous les enregistrer dans un bloc de script client unique.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> (méthode). Notez que la `addScriptTags` paramètre est défini sur `false` afin de début et de fermeture des balises de script sont inclus dans le `script` paramètre.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> is <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)" />
        <altmember cref="F:System.Web.UI.HtmlTextWriterTag.Script" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateEvent">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Validates a client event.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateEvent">
      <MemberSignature Language="C#" Value="public void ValidateEvent (string uniqueId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEvent(string uniqueId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEvent (uniqueId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEvent(System::String ^ uniqueId);" />
      <MemberSignature Language="F#" Value="member this.ValidateEvent : string -&gt; unit" Usage="clientScriptManager.ValidateEvent uniqueId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId">A unique ID representing the client control generating the event.</param>
        <summary>Validates a client event that was registered for event validation using the <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" /> method.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEvent">
      <MemberSignature Language="C#" Value="public void ValidateEvent (string uniqueId, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEvent(string uniqueId, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEvent (uniqueId As String, argument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEvent(System::String ^ uniqueId, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.ValidateEvent : string * string -&gt; unit" Usage="clientScriptManager.ValidateEvent (uniqueId, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId">A unique ID representing the client control generating the event.</param>
        <param name="argument">The event arguments passed with the client event.</param>
        <summary>Validates a client event that was registered for event validation using the <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" /> method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> (méthode) et le <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> méthode pour inscrire un rappel pour la validation et pour valider que le rappel provenance de la page. Pour améliorer la validation illustrée ici, vous pouvez modifier la validation `argument` paramètre pour contenir des informations spécifiques à l’utilisateur tel qu’une identité ou un rôle  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/EventValidationCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/EventValidationVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="uniqueId" /> is <see langword="null" /> or an empty string ("").</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>