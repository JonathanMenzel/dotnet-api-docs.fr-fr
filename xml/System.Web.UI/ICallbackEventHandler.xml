<Type Name="ICallbackEventHandler" FullName="System.Web.UI.ICallbackEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5bdaac1b3c31dacf453c3e165f7357b0a5a0350f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36377218" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICallbackEventHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICallbackEventHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ICallbackEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICallbackEventHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICallbackEventHandler" />
  <TypeSignature Language="F#" Value="type ICallbackEventHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Utilisé pour indiquer qu'un contrôle peut être la cible d'un événement de rappel sur le serveur.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez la <xref:System.Web.UI.ICallbackEventHandler> interface pour n’importe quel contrôle personnalisé qui doit recevoir les événements de rappel. Pour plus d’informations, consultez [mise en œuvre les rappels de Client sans publications](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185).  
  
 Exemples de contrôles qui implémentent le <xref:System.Web.UI.ICallbackEventHandler> interface inclut la <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, et <xref:System.Web.UI.WebControls.TreeView> contrôles. Quand un événement de rappel cible un contrôle qui implémente le <xref:System.Web.UI.ICallbackEventHandler> interface, le <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> méthode est appelée pour gérer l’événement, en passant l’argument d’événement en tant que paramètre et le <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> méthode retourne le résultat du rappel.  
  
 Les contrôles qui récupèrent des données à partir d’un contrôle de source de données pendant le rappel peuvent le faire synchrone ou asynchrone. Les contrôles ASP.NET comme <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, et <xref:System.Web.UI.WebControls.TreeView> sont implémentés de façon synchrone. Rappels synchrones n’empêchent pas l’utilisateur à partir de l’utilisation de l’Explorateur. En mode synchrone, qu’un seul rappel à la fois peut s’exécuter, avec le dernier rappel a priorité. Lorsqu’un contrôle Web est implémenté pour prendre en charge le comportement asynchrone, plusieurs rappels peuvent être déclenchés simultanément. Pour plus d’informations sur la programmation asynchrone, consultez [modèle asynchrone basé sur des événements (EAP)](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md).  
  
 Vous pouvez spécifier si les événements de rappel provenant de l’interface utilisateur est restitué par un contrôle qui implémente le <xref:System.Web.UI.ICallbackEventHandler> interface sont validés. La validation d’événements est une bonne pratique de sécurité. Toutefois, pour des raisons de performances vous pouvez la désactiver. Pour contrôler si la validation d’événement est exécutée sur les événements de rappel, définissez la `enableEventValidation` attribut de la [@ Page](http://msdn.microsoft.com/library/f06cf9e5-22bb-461d-8b8f-549e53ff40a4) directive ou `enableEventValidation` attribut de la [pages, élément (schéma des paramètres ASP.NET)](http://msdn.microsoft.com/library/4123bb66-3fe4-4d62-b70e-33758656b458) du fichier Web.config. Si vous définissez la <xref:System.Web.UI.Page.EnableEventValidation%2A> propriété dans le code, définir dans le `Page_Init` phase du traitement de la page. Pour plus d’informations sur l’équilibrage de l’avantage de la sécurité de la validation d’événement et de ses performances, consultez [vue d’ensemble des performances ASP.NET](http://msdn.microsoft.com/library/f882bf1b-a009-4312-ac06-74370ffabc0b).  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" />
    <altmember cref="M:System.Web.UI.WebControls.DetailsView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
    <altmember cref="M:System.Web.UI.WebControls.GridView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
  </Docs>
  <Members>
    <Member MemberName="GetCallbackResult">
      <MemberSignature Language="C#" Value="public string GetCallbackResult ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCallbackResult() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ICallbackEventHandler.GetCallbackResult" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackResult () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackResult();" />
      <MemberSignature Language="F#" Value="abstract member GetCallbackResult : unit -&gt; string" Usage="iCallbackEventHandler.GetCallbackResult " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne le résultat d'un événement de rappel qui cible un contrôle.</summary>
        <returns>Résultat de l'événement de rappel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les exceptions levées <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> n’empêchera pas <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> d’être appelé et de retourner un résultat. Pour empêcher <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> de retourner un résultat, définissez un indicateur lorsqu’une exception est levée dans <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> et retournent une chaîne vide à partir de <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.GridView.GetCallbackResult" />
        <altmember cref="M:System.Web.UI.WebControls.DetailsView.GetCallbackResult" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.GetCallbackResult" />
      </Docs>
    </Member>
    <Member MemberName="RaiseCallbackEvent">
      <MemberSignature Language="C#" Value="public void RaiseCallbackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseCallbackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseCallbackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RaiseCallbackEvent(System::String ^ eventArgument);" />
      <MemberSignature Language="F#" Value="abstract member RaiseCallbackEvent : string -&gt; unit" Usage="iCallbackEventHandler.RaiseCallbackEvent eventArgument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Chaîne qui représente un argument d'événement à passer au gestionnaire d'événements.</param>
        <summary>Traite un événement de rappel qui cible un contrôle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque `null` est utilisé comme paramètre argument d’événement, la chaîne est sérialisée vers « null » et envoyé au serveur. Car il n’existe aucun moyen de faire la distinction entre `null` et « null », vous devez éviter d’utiliser `null` paramètres argument avec des rappels.  
  
 Les exceptions levées <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> n’empêchera pas <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> d’être appelé et de retourner un résultat. Pour empêcher <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> de retourner un résultat, définissez un indicateur lorsqu’une exception est levée dans <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> et retournent une chaîne vide à partir de <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" />
        <altmember cref="M:System.Web.UI.WebControls.GridView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.ICallbackEventHandler.GetCallbackResult" />
      </Docs>
    </Member>
  </Members>
</Type>