<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PageAsyncTask.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac536cc8e3f70ac39686797a62234cd83eb5704a5b4.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">36cc8e3f70ac39686797a62234cd83eb5704a5b4</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Web.UI.PageAsyncTask">
          <source>Contains information about an asynchronous task registered to a page.</source>
          <target state="translated">Contient des informations à propos d'une tâche asynchrone inscrite dans une page.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Web.UI.PageAsyncTask">
          <source>This class cannot be inherited.</source>
          <target state="translated">Cette classe ne peut pas être héritée.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>ASP.NET version 2.0 allows you to register multiple tasks to a page and run them asynchronously prior to rendering the page.</source>
          <target state="translated">Version d’ASP.NET 2.0 permet d’inscrire plusieurs tâches dans une page et de les exécuter de façon asynchrone avant sa restitution de la page.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>You might specify that a task be run asynchronously if it is a slow process and you do not want other processes to be tied up while it is executing.</source>
          <target state="translated">Vous pouvez spécifier qu’une tâche de s’exécuter en mode asynchrone si c’est un processus lent et que vous ne souhaitez pas que d’autres processus bloquer pendant son exécution.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The asynchronous tasks can be executed in parallel or sequentially.</source>
          <target state="translated">Les tâches asynchrones peuvent être exécutées en parallèle ou séquentiellement.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>A <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> object must be registered to the page through the <ph id="ph2">&lt;xref:System.Web.UI.Page.RegisterAsyncTask%2A&gt;</ph> method.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> objet doit être inscrit dans la page via la <ph id="ph2">&lt;xref:System.Web.UI.Page.RegisterAsyncTask%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The page itself does not have to be processed asynchronously to execute asynchronous tasks.</source>
          <target state="translated">La page elle-même n’a pas à être traitées de manière asynchrone pour exécuter des tâches asynchrones.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>You can set the <ph id="ph1">`Async`</ph> attribute to either <ph id="ph2">`true`</ph> (as shown in the following code example) or <ph id="ph3">`false`</ph> on the page directive and the asynchronous tasks will still be processed asynchronously:</source>
          <target state="translated">Vous pouvez définir le <ph id="ph1">`Async`</ph> soit l’attribut <ph id="ph2">`true`</ph> (comme indiqué dans l’exemple de code suivant) ou <ph id="ph3">`false`</ph> sur la page de la directive et les tâches asynchrones sont traitées de façon asynchrone :</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>When the <ph id="ph1">`Async`</ph> attribute is set to <ph id="ph2">`false`</ph>, the thread that executes the page will be blocked until all asynchronous tasks are complete.</source>
          <target state="translated">Lorsque le <ph id="ph1">`Async`</ph> attribut est défini sur <ph id="ph2">`false`</ph>, le thread qui exécute la page sera bloqué jusqu'à ce que toutes les tâches asynchrones sont terminées.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>Any asynchronous tasks registered before the <ph id="ph1">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> event will be executed automatically by the page if they have not already been executed.</source>
          <target state="translated">Toutes les tâches asynchrones inscrites avant le <ph id="ph1">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> événement sera exécuté automatiquement par la page si elles n’ont pas déjà été exécutées.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>Those asynchronous tasks registered after the <ph id="ph1">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> event must be executed explicitly through the <ph id="ph2">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> method.</source>
          <target state="translated">Les tâches asynchrones inscrites après le <ph id="ph1">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> événement doit être exécuté explicitement par l’intermédiaire du <ph id="ph2">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> method can also be used to start tasks before the <ph id="ph2">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> event.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> méthode peut également être utilisée pour démarrer les tâches avant le <ph id="ph2">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> événement.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> method executes all the registered asynchronous tasks on the page that have not been executed.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> méthode s’exécute toutes les tâches asynchrones inscrites sur la page qui n’ont pas été exécutées.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>By default, an asynchronous task will time out if it has not completed within 45 seconds.</source>
          <target state="translated">Par défaut, une tâche asynchrone expire si elle n’est pas terminée dans les 45 secondes.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>You can specify a different time-out value in either the Web.config file or the page directive.</source>
          <target state="translated">Vous pouvez spécifier une valeur de délai d’attente différente dans le fichier Web.config ou la directive de page.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The <ph id="ph1">`&lt;pages&gt;`</ph> section of the Web.config file contains an <ph id="ph2">`asyncTimeout`</ph> attribute, as shown below.</source>
          <target state="translated">Le <ph id="ph1">`&lt;pages&gt;`</ph> section du fichier Web.config contient un <ph id="ph2">`asyncTimeout`</ph> d’attribut, comme illustré ci-dessous.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The page directive contains an <ph id="ph1">`AsyncTimeout`</ph> attribute.</source>
          <target state="translated">La directive de page contienne un <ph id="ph1">`AsyncTimeout`</ph> attribut.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The following code example registers three asynchronous tasks to a page and executes them in parallel.</source>
          <target state="translated">L’exemple de code suivant inscrit trois tâches asynchrones dans une page et les exécute en parallèle.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>Each task calls a method that merely causes the thread to sleep for 5 seconds.</source>
          <target state="translated">Chaque tâche appelle une méthode qui provoque seulement le thread en veille pendant 5 secondes.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="T:System.Web.UI.PageAsyncTask">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
          <source>An event handler.</source>
          <target state="translated">Gestionnaire d'événements.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> class using an event handler that enables the task to be canceled.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> à l'aide d'un gestionnaire d'événements qui permet l'annulation de la tâche.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
          <source>This constructor wraps a <ph id="ph1">&lt;xref:System.Web.TaskEventHandler&gt;</ph> delegate so that the <ph id="ph2">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> object can integrate asynchronous code (based on <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objects) with the existing ASP.NET Web Forms asynchronous pages feature.</source>
          <target state="translated">Ce constructeur encapsule un <ph id="ph1">&lt;xref:System.Web.TaskEventHandler&gt;</ph> déléguer afin que le <ph id="ph2">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> objet peut intégrer du code asynchrone (en fonction de <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objets) avec la fonctionnalité de pages asynchrones ASP.NET Web Forms existante.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
          <source>ASP.NET will signal the <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> object that is passed to a <ph id="ph2">&lt;xref:System.Web.TaskEventHandler&gt;</ph> delegate for cancellation based on the <ph id="ph3">&lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt;</ph> attribute set in the <ph id="ph4">`@ Page`</ph> directive of the Web page.</source>
          <target state="translated">ASP.NET signale le <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> objet est passé à une <ph id="ph2">&lt;xref:System.Web.TaskEventHandler&gt;</ph> déléguer l’annulation en fonction de la <ph id="ph3">&lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt;</ph> attribut défini dans la <ph id="ph4">`@ Page`</ph> directive de la page Web.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
          <source>When the <ph id="ph1">&lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt;</ph> value has been reached, the <ph id="ph2">&lt;xref:System.Threading.CancellationToken&gt;</ph> object will be signaled.</source>
          <target state="translated">Lorsque le <ph id="ph1">&lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt;</ph> valeur a été atteint, le <ph id="ph2">&lt;xref:System.Threading.CancellationToken&gt;</ph> objet sera signalé.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
          <source>The <ph id="ph1">`CancellationToken`</ph> parameter must be passed to any asynchronous APIs that are called by your implementation of the <ph id="ph2">&lt;xref:System.Web.TaskEventHandler&gt;</ph> class.</source>
          <target state="translated">Le <ph id="ph1">`CancellationToken`</ph> paramètre doit être passé à toutes les API asynchrones qui sont appelées par votre implémentation de la <ph id="ph2">&lt;xref:System.Web.TaskEventHandler&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})">
          <source>An event handler.</source>
          <target state="translated">Gestionnaire d'événements.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> class using an event handler that enables the task to be handled.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> à l'aide d'un gestionnaire d'événements qui permet la gestion de la tâche.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>The handler to call when beginning an asynchronous task.</source>
          <target state="translated">Gestionnaire à appeler au commencement d'une tâche asynchrone.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>The handler to call when the task is completed successfully within the time-out period.</source>
          <target state="translated">Gestionnaire à appeler lorsque la tâche se termine correctement dans le délai d'attente imparti.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>The handler to call when the task is not completed successfully within the time-out period.</source>
          <target state="translated">Gestionnaire à appeler lorsque la tâche ne se termine pas correctement dans le délai d'attente imparti.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>The object that represents the state of the task.</source>
          <target state="translated">Objet qui représente l'état de la tâche.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> class using the default value for executing in parallel.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> à l'aide de la valeur par défaut pour une exécution en parallèle.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>This implementation of the constructor sets the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> property to <ph id="ph2">`false`</ph> so the asynchronous task is not processed in parallel with other tasks on the page.</source>
          <target state="translated">Cette implémentation du constructeur définit la <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> propriété <ph id="ph2">`false`</ph> afin de la tâche asynchrone n’est pas traitée en parallèle avec d’autres tâches dans la page.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="beginHandler" /&gt;</ph> parameter or <ph id="ph2">&lt;paramref name="endHandler" /&gt;</ph> parameter is not specified.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="beginHandler" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="endHandler" /&gt;</ph> n'est pas spécifié.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The handler to call when beginning an asynchronous task.</source>
          <target state="translated">Gestionnaire à appeler au commencement d'une tâche asynchrone.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The handler to call when the task is completed successfully within the time-out period.</source>
          <target state="translated">Gestionnaire à appeler lorsque la tâche se termine correctement dans le délai d'attente imparti.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The handler to call when the task is not completed successfully within the time-out period.</source>
          <target state="translated">Gestionnaire à appeler lorsque la tâche ne se termine pas correctement dans le délai d'attente imparti.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The object that represents the state of the task.</source>
          <target state="translated">Objet qui représente l'état de la tâche.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The value that indicates whether the task can be processed in parallel with other tasks.</source>
          <target state="translated">Valeur qui indique si la tâche peut être traitée en parallèle avec d'autres tâches.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> class using the specified value for executing in parallel.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> à l'aide de la valeur spécifiée pour une exécution en parallèle.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>This implementation of the constructor allows you to set whether the asynchronous task will be processed in parallel with other tasks on the page.</source>
          <target state="translated">Cette implémentation du constructeur vous permet de définir si la tâche asynchrone sera traitée en parallèle avec d’autres tâches dans la page.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The following code example creates three asynchronous tasks that are processed in parallel to each other.</source>
          <target state="translated">L’exemple de code suivant crée trois tâches asynchrones qui sont traitées en parallèle à l’autre.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>This example is part of a larger example found in the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> class overview.</source>
          <target state="translated">Cet exemple fait partie d’un exemple plus complet trouvé dans le <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> vue d’ensemble de la classe.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="beginHandler" /&gt;</ph> parameter or <ph id="ph2">&lt;paramref name="endHandler" /&gt;</ph> parameter is not specified.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="beginHandler" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="endHandler" /&gt;</ph> n'est pas spécifié.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.Web.UI.PageAsyncTask.BeginHandler">
          <source>Gets the method to call when beginning an asynchronous task.</source>
          <target state="translated">Obtient la méthode à appeler au début d'une tâche asynchrone.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.BeginHandler">
          <source>A <ph id="ph1">&lt;see cref="T:System.Web.BeginEventHandler" /&gt;</ph> delegate that represents the method to call when beginning the asynchronous task.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Web.BeginEventHandler" /&gt;</ph> qui représente la méthode à appeler au début de la tâche asynchrone.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.BeginHandler">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.BeginHandler%2A&gt;</ph> delegate is set in the constructor.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.BeginHandler%2A&gt;</ph> délégué est défini dans le constructeur.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.BeginHandler">
          <source>The following code example registers three asynchronous tasks to a page and executes them in parallel.</source>
          <target state="translated">L’exemple de code suivant inscrit trois tâches asynchrones dans une page et les exécute en parallèle.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.BeginHandler">
          <source>Each task calls a method that merely causes the thread to sleep for 5 seconds.</source>
          <target state="translated">Chaque tâche appelle une méthode qui provoque seulement le thread en veille pendant 5 secondes.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.BeginHandler">
          <source>A <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.BeginHandler%2A&gt;</ph> delegate is specified for each task.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.BeginHandler%2A&gt;</ph> délégué est spécifié pour chaque tâche.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="P:System.Web.UI.PageAsyncTask.EndHandler">
          <source>Gets the method to call when the task completes successfully within the time-out period.</source>
          <target state="translated">Obtient la méthode à appeler lorsque la tâche se termine correctement dans le délai d'attente imparti.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.EndHandler">
          <source>An <ph id="ph1">&lt;see cref="T:System.Web.EndEventHandler" /&gt;</ph> delegate that represents the method to call when the task completes successfully within the time-out period.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Web.EndEventHandler" /&gt;</ph> qui représente la méthode à appeler lorsque la tâche se termine correctement dans le délai d'attente imparti.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.EndHandler">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.EndHandler%2A&gt;</ph> delegate is set in the constructor.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.EndHandler%2A&gt;</ph> délégué est défini dans le constructeur.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.EndHandler">
          <source>The following code example registers three asynchronous tasks to a page and executes them in parallel.</source>
          <target state="translated">L’exemple de code suivant inscrit trois tâches asynchrones dans une page et les exécute en parallèle.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.EndHandler">
          <source>Each task calls a method that merely causes the thread to sleep for 5 seconds.</source>
          <target state="translated">Chaque tâche appelle une méthode qui provoque seulement le thread en veille pendant 5 secondes.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.EndHandler">
          <source>An <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.EndHandler%2A&gt;</ph> delegate is specified for each task.</source>
          <target state="translated">Un <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.EndHandler%2A&gt;</ph> délégué est spécifié pour chaque tâche.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>Gets a value that indicates whether the task can be processed in parallel with other tasks.</source>
          <target state="translated">Obtient une valeur qui indique si la tâche peut être traitée en parallèle avec d'autres tâches.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the task should be processed in parallel with other tasks; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la tâche doit être traitée en parallèle avec d'autres tâches ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> property is set in the constructor.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> propriété est définie dans le constructeur.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>When multiple tasks are registered in a page and the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, then those tasks are processed concurrently.</source>
          <target state="translated">Lorsque plusieurs tâches sont inscrites dans une page et le <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> est définie sur <ph id="ph2">`true`</ph>, ces tâches sont traitées simultanément.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>However, if the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, then those tasks are processed sequentially.</source>
          <target state="translated">Toutefois, si le <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> est définie sur <ph id="ph2">`false`</ph>, ces tâches sont traitées de manière séquentielle.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>For example, if a page contained two asynchronous tasks that each took 5 seconds to complete and <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>, both tasks will complete in 5 seconds.</source>
          <target state="translated">Par exemple, si une page contenue deux tâches asynchrones chaque durée de 5 secondes et <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> a la valeur <ph id="ph2">`true`</ph>, les deux tâches sont effectuées en 5 secondes.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>If <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> is set to <ph id="ph2">`false`</ph> for these same two tasks, then the first task will complete in 5 seconds and the second task will complete 5 seconds after the completion of the first task.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> a la valeur <ph id="ph2">`false`</ph> pour ces mêmes deux tâches, puis la première tâche se termine dans 5 secondes, et la seconde tâche se termine à 5 secondes après la fin de la première tâche.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>The following code example defines three asynchronous tasks that are each set to be processed in parallel.</source>
          <target state="translated">L’exemple de code suivant définit trois tâches asynchrones qui sont chacune configurées pour être traités en parallèle.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>This example is part of a larger example found in the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> class overview.</source>
          <target state="translated">Cet exemple fait partie d’un exemple plus complet trouvé dans le <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> vue d’ensemble de la classe.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.Web.UI.PageAsyncTask.State">
          <source>Gets an object that represents the state of the task.</source>
          <target state="translated">Obtient un objet qui représente l'état de la tâche.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.State">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the state of the task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> qui représente l'état de la tâche.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.State">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> property is set in the constructor and cannot be modified during execution of the asynchronous task.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> propriété est définie dans le constructeur et ne peut pas être modifiée pendant l’exécution de la tâche asynchrone.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.State">
          <source>You can differentiate asynchronous tasks in a page by assigning unique string values to their respective <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> properties.</source>
          <target state="translated">Vous pouvez différencier des tâches asynchrones dans une page en assignant des valeurs de chaîne unique à respectives <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> propriétés.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.State">
          <source>The following code example creates three asynchronous tasks and gives them unique values for their <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> properties.</source>
          <target state="translated">L’exemple de code suivant crée trois tâches asynchrones et leur donne des valeurs uniques pour leurs <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> propriétés.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.State">
          <source>This example is part of a larger example found in the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> class overview.</source>
          <target state="translated">Cet exemple fait partie d’un exemple plus complet trouvé dans le <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> vue d’ensemble de la classe.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.Web.UI.PageAsyncTask.TimeoutHandler">
          <source>Gets the method to call when the task does not complete successfully within the time-out period.</source>
          <target state="translated">Obtient la méthode à appeler lorsque la tâche ne se termine pas correctement dans le délai d'attente imparti.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.TimeoutHandler">
          <source>An <ph id="ph1">&lt;see cref="T:System.Web.EndEventHandler" /&gt;</ph> delegate that represents the method to call when the task does not complete successfully within the time-out period.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Web.EndEventHandler" /&gt;</ph> qui représente la méthode à appeler lorsque la tâche ne se termine pas correctement dans le délai d'attente imparti.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.TimeoutHandler">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A&gt;</ph> delegate is set in the constructor.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A&gt;</ph> délégué est défini dans le constructeur.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.TimeoutHandler">
          <source>The following code example registers three asynchronous tasks to a page and executes them in parallel.</source>
          <target state="translated">L’exemple de code suivant inscrit trois tâches asynchrones dans une page et les exécute en parallèle.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.TimeoutHandler">
          <source>Each task calls a method that merely causes the thread to sleep for 5 seconds.</source>
          <target state="translated">Chaque tâche appelle une méthode qui provoque seulement le thread en veille pendant 5 secondes.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.TimeoutHandler">
          <source>A <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A&gt;</ph> delegate is specified for each task.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A&gt;</ph> délégué est spécifié pour chaque tâche.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>