<Type Name="PageAsyncTask" FullName="System.Web.UI.PageAsyncTask">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d1079f4cbaf4f9bde92409a2b96155ff21afa4a7" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39813314" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class PageAsyncTask" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PageAsyncTask extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.PageAsyncTask" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PageAsyncTask" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageAsyncTask sealed" />
  <TypeSignature Language="F#" Value="type PageAsyncTask = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Contient des informations à propos d'une tâche asynchrone inscrite dans une page. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Version d’ASP.NET 2.0 permet d’inscrire plusieurs tâches dans une page et de les exécuter de façon asynchrone avant le rendu de la page. Vous pouvez spécifier qu’une tâche exécuter de manière asynchrone si c’est un processus lent et que vous ne souhaitez pas d’autres processus à immobilisé pendant son exécution. Les tâches asynchrones peuvent être exécutées en parallèle ou séquentiellement.  
  
 Un <xref:System.Web.UI.PageAsyncTask> objet doit être inscrit à la page via la <xref:System.Web.UI.Page.RegisterAsyncTask%2A> (méthode). La page elle-même ne devra pas être traités de façon asynchrone pour exécuter des tâches asynchrones. Vous pouvez définir le `Async` attribut soit `true` (comme indiqué dans l’exemple de code suivant) ou `false` sur la page (directive) et les tâches asynchrones sont traitées de façon asynchrone :  
  
 `<%@ Page Async="true" %>`  
  
 Lorsque le `Async` attribut est défini sur `false`, le thread qui exécute la page sera bloqué jusqu'à ce que toutes les tâches asynchrones sont terminées.  
  
 Toutes les tâches asynchrones inscrits avant le <xref:System.Web.UI.Page.PreRenderComplete> événement sera exécuté automatiquement par la page si elles n’ont pas déjà été exécutées. Les tâches asynchrones inscrites après le <xref:System.Web.UI.Page.PreRenderComplete> événement doit être exécuté explicitement par l’intermédiaire du <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> (méthode). Le <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> méthode peut également être utilisée pour démarrer les tâches avant le <xref:System.Web.UI.Page.PreRenderComplete> événement. Le <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> méthode s’exécute toutes les tâches asynchrones inscrites sur la page qui n’ont pas été exécutées.  
  
 Par défaut, une tâche asynchrone expire si elle n’est pas terminée dans les 45 secondes. Vous pouvez spécifier une valeur de délai d’attente différent dans le fichier Web.config ou la directive de page. Le `<pages>` section du fichier Web.config contient un `asyncTimeout` d’attribut, comme indiqué ci-dessous.  
  
 `<system.web>`  
  
 `<pages asyncTimeout="30">`  
  
 `</pages>`  
  
 `</system.web>`  
  
 La directive de page contienne un `AsyncTimeout` attribut.  
  
 `<%@ Page AsyncTimeout="30" %>`  
  
   
  
## Examples  
 L’exemple de code suivant inscrit trois tâches asynchrones à une page et les exécute en parallèle. Chaque tâche appelle une méthode qui provoque seulement le thread en veille pendant 5 secondes.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.PageAsyncTask" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As Func(Of CancellationToken, Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(Func&lt;System::Threading::CancellationToken, System::Threading::Tasks::Task ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Gestionnaire d'événements.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.PageAsyncTask" /> à l'aide d'un gestionnaire d'événements qui permet l'annulation de la tâche.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur encapsule un <xref:System.Web.TaskEventHandler> déléguer afin que le <xref:System.Web.UI.PageAsyncTask> objet peut intégrer du code asynchrone (basé sur <xref:System.Threading.Tasks.Task> objets) avec la fonctionnalité de pages asynchrones ASP.NET Web Forms existante. ASP.NET signale le <xref:System.Threading.CancellationToken> objet qui est passé à un <xref:System.Web.TaskEventHandler> déléguer l’annulation selon le <xref:System.Web.UI.Page.AsyncTimeout%2A> attribut défini le `@ Page` directive de la page Web. Lorsque le <xref:System.Web.UI.Page.AsyncTimeout%2A> valeur a été atteint, le <xref:System.Threading.CancellationToken> objet sera signalé. Le `CancellationToken` paramètre doit être passé à toutes les API asynchrones sont appelées par votre implémentation de la <xref:System.Web.TaskEventHandler> classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As Func(Of Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(Func&lt;System::Threading::Tasks::Task ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : Func&lt;System.Threading.Tasks.Task&gt; -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Gestionnaire d'événements.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.PageAsyncTask" /> à l'aide d'un gestionnaire d'événements qui permet la gestion de la tâche.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (beginHandler As BeginEventHandler, endHandler As EndEventHandler, timeoutHandler As EndEventHandler, state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Web::EndEventHandler ^ timeoutHandler, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : System.Web.BeginEventHandler * System.Web.EndEventHandler * System.Web.EndEventHandler * obj -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask (beginHandler, endHandler, timeoutHandler, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginHandler">Gestionnaire à appeler au commencement d'une tâche asynchrone.</param>
        <param name="endHandler">Gestionnaire à appeler lorsque la tâche se termine correctement dans le délai d'attente imparti.</param>
        <param name="timeoutHandler">Gestionnaire à appeler lorsque la tâche ne se termine pas correctement dans le délai d'attente imparti.</param>
        <param name="state">Objet qui représente l'état de la tâche.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.PageAsyncTask" /> à l'aide de la valeur par défaut pour une exécution en parallèle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette implémentation du constructeur définit la <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> propriété `false` afin de la tâche asynchrone n’est pas traitée en parallèle avec d’autres tâches sur la page.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="beginHandler" /> ou <paramref name="endHandler" /> n'est pas spécifié.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (beginHandler As BeginEventHandler, endHandler As EndEventHandler, timeoutHandler As EndEventHandler, state As Object, executeInParallel As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Web::EndEventHandler ^ timeoutHandler, System::Object ^ state, bool executeInParallel);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : System.Web.BeginEventHandler * System.Web.EndEventHandler * System.Web.EndEventHandler * obj * bool -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask (beginHandler, endHandler, timeoutHandler, state, executeInParallel)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="executeInParallel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="beginHandler">Gestionnaire à appeler au commencement d'une tâche asynchrone.</param>
        <param name="endHandler">Gestionnaire à appeler lorsque la tâche se termine correctement dans le délai d'attente imparti.</param>
        <param name="timeoutHandler">Gestionnaire à appeler lorsque la tâche ne se termine pas correctement dans le délai d'attente imparti.</param>
        <param name="state">Objet qui représente l'état de la tâche.</param>
        <param name="executeInParallel">Valeur qui indique si la tâche peut être traitée en parallèle avec d'autres tâches.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.PageAsyncTask" /> à l'aide de la valeur spécifiée pour une exécution en parallèle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette implémentation du constructeur vous permet de définir si la tâche asynchrone sera être traitée en parallèle avec d’autres tâches sur la page.  
  
   
  
## Examples  
 L’exemple de code suivant crée trois tâches asynchrones qui sont traitées en parallèle entre eux. Cet exemple fait partie d’un exemple plus complet trouvé dans le <xref:System.Web.UI.PageAsyncTask> vue d’ensemble de la classe.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="beginHandler" /> ou <paramref name="endHandler" /> n'est pas spécifié.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginHandler">
      <MemberSignature Language="C#" Value="public System.Web.BeginEventHandler BeginHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.BeginEventHandler BeginHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BeginHandler As BeginEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::BeginEventHandler ^ BeginHandler { System::Web::BeginEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BeginHandler : System.Web.BeginEventHandler" Usage="System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.BeginEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la méthode à appeler au début d'une tâche asynchrone.</summary>
        <value>Délégué <see cref="T:System.Web.BeginEventHandler" /> qui représente la méthode à appeler au début de la tâche asynchrone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> délégué est défini dans le constructeur.  
  
   
  
## Examples  
 L’exemple de code suivant inscrit trois tâches asynchrones à une page et les exécute en parallèle. Chaque tâche appelle une méthode qui provoque seulement le thread en veille pendant 5 secondes. Un <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> délégué est spécifié pour chaque tâche.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler EndHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler EndHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndHandler As EndEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::EndEventHandler ^ EndHandler { System::Web::EndEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EndHandler : System.Web.EndEventHandler" Usage="System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la méthode à appeler lorsque la tâche se termine correctement dans le délai d'attente imparti.</summary>
        <value>Délégué <see cref="T:System.Web.EndEventHandler" /> qui représente la méthode à appeler lorsque la tâche se termine correctement dans le délai d'attente imparti.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> délégué est défini dans le constructeur.  
  
   
  
## Examples  
 L’exemple de code suivant inscrit trois tâches asynchrones à une page et les exécute en parallèle. Chaque tâche appelle une méthode qui provoque seulement le thread en veille pendant 5 secondes. Un <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> délégué est spécifié pour chaque tâche.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInParallel">
      <MemberSignature Language="C#" Value="public bool ExecuteInParallel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExecuteInParallel" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecuteInParallel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExecuteInParallel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecuteInParallel : bool" Usage="System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si la tâche peut être traitée en parallèle avec d'autres tâches.</summary>
        <value>
          <see langword="true" /> si la tâche doit être traitée en parallèle avec d'autres tâches ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> propriété est définie dans le constructeur. Lorsque plusieurs tâches sont inscrites dans une page et le <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> propriété est définie sur `true`, ces tâches sont traitées simultanément. Toutefois, si le <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> propriété est définie sur `false`, puis ces tâches sont traitées de manière séquentielle. Par exemple, si une page contenue deux tâches asynchrones chaque durée de 5 secondes et <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> a la valeur `true`, les deux tâches sont effectuées en 5 secondes. Si <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> a la valeur `false` pour ces mêmes les deux tâches, puis la première tâche se terminera dans 5 secondes et la seconde tâche se termine à 5 secondes après la fin de la première tâche.  
  
   
  
## Examples  
 L’exemple de code suivant définit trois tâches asynchrones qui sont chacune configurées pour être traitées en parallèle. Cet exemple fait partie d’un exemple plus complet trouvé dans le <xref:System.Web.UI.PageAsyncTask> vue d’ensemble de la classe.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public object State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object State" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ State { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.State : obj" Usage="System.Web.UI.PageAsyncTask.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet qui représente l'état de la tâche.</summary>
        <value>
          <see cref="T:System.Object" /> qui représente l'état de la tâche.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.PageAsyncTask.State%2A> propriété est définie dans le constructeur et ne peut pas être modifiée pendant l’exécution de la tâche asynchrone. Vous pouvez différencier des tâches asynchrones dans une page en assignant des valeurs de chaîne unique à leurs respectifs <xref:System.Web.UI.PageAsyncTask.State%2A> propriétés.  
  
   
  
## Examples  
 L’exemple de code suivant crée trois tâches asynchrones et leur donne des valeurs uniques pour leurs <xref:System.Web.UI.PageAsyncTask.State%2A> propriétés. Cet exemple fait partie d’un exemple plus complet trouvé dans le <xref:System.Web.UI.PageAsyncTask> vue d’ensemble de la classe.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeoutHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler TimeoutHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler TimeoutHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeoutHandler As EndEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::EndEventHandler ^ TimeoutHandler { System::Web::EndEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeoutHandler : System.Web.EndEventHandler" Usage="System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la méthode à appeler lorsque la tâche ne se termine pas correctement dans le délai d'attente imparti.</summary>
        <value>Délégué <see cref="T:System.Web.EndEventHandler" /> qui représente la méthode à appeler lorsque la tâche ne se termine pas correctement dans le délai d'attente imparti.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> délégué est défini dans le constructeur.  
  
   
  
## Examples  
 L’exemple de code suivant inscrit trois tâches asynchrones à une page et les exécute en parallèle. Chaque tâche appelle une méthode qui provoque seulement le thread en veille pendant 5 secondes. Un <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> délégué est spécifié pour chaque tâche.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>