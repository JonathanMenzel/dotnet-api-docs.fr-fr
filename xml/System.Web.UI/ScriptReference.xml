<Type Name="ScriptReference" FullName="System.Web.UI.ScriptReference">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c31f5f5b3250f574b285bdbe59c5b3e3b1e85ead" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57927149" /></Metadata><TypeSignature Language="C#" Value="public class ScriptReference : System.Web.UI.ScriptReferenceBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ScriptReference extends System.Web.UI.ScriptReferenceBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ScriptReference" />
  <TypeSignature Language="VB.NET" Value="Public Class ScriptReference&#xA;Inherits ScriptReferenceBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ScriptReference : System::Web::UI::ScriptReferenceBase" />
  <TypeSignature Language="F#" Value="type ScriptReference = class&#xA;    inherit ScriptReferenceBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.ScriptReferenceBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Path")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Inscrit un fichier ECMAScript (JavaScript) pour une utilisation sur une page Web ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez inclure un fichier JavaScript sur une page Web ASP.NET en l’inscrivant via un <xref:System.Web.UI.ScriptReference> objet. Vous pouvez inscrire un fichier de script qui se trouve dans un fichier .js (un fichier de script statique) sur le site Web. Vous pouvez également enregistrer un fichier de script qui est incorporé en tant que ressource dans un assembly. Après avoir inscrit le fichier de script, vous pouvez utiliser ses fonctions dans le script client sur la page Web.  
  
 Pour inscrire un fichier de script statique, définissez la <xref:System.Web.UI.ScriptReferenceBase.Path%2A> propriété de la <xref:System.Web.UI.ScriptReference> objet à l’emplacement relatif du fichier.  
  
 Pour inscrire un fichier de script qui est incorporé en tant que ressource dans un assembly, affectez le <xref:System.Web.UI.ScriptReference.Assembly%2A> propriété le nom de l’assembly qui contient le fichier. Définissez ensuite la <xref:System.Web.UI.ScriptReference.Name%2A> propriété le nom du fichier .js qui est incorporé dans l’assembly. Dans ce cas, le fichier de script doit être incorporé, non lié.  
  
 Vous définissez le <xref:System.Web.UI.ScriptReferenceBase.ScriptMode%2A> propriété pour indiquer s’il faut utiliser le débogage ou de version du script.  
  
 Le <xref:System.Web.UI.ScriptMode.Auto> valeur produit des résultats différents selon qu’elle fait référence à un fichier de script autonome ou dans un fichier de script qui est incorporé en tant que ressource dans un assembly. Un fichier de script autonome est défini avec la <xref:System.Web.UI.ScriptReferenceBase.Path%2A> propriété. Une référence d’assembly doit être accessible via la <xref:System.Web.UI.ScriptReference.Name%2A> et <xref:System.Web.UI.ScriptReference.Assembly%2A> propriétés. Les résultats de la <xref:System.Web.UI.ScriptMode.Auto> valeur sont les suivantes :  
  
-   Quand il est appliqué à un fichier de script autonome où la <xref:System.Web.UI.ScriptReferenceBase.Path%2A> propriété est spécifiée, le <xref:System.Web.UI.ScriptMode.Auto> valeur équivaut à <xref:System.Web.UI.ScriptMode.Release>.  
  
-   Lorsqu’il est appliqué à une référence de script dans un assembly, <xref:System.Web.UI.ScriptMode.Auto> équivaut à <xref:System.Web.UI.ScriptMode.Inherit>. Lorsque seul <xref:System.Web.UI.ScriptReference.Name%2A> est spécifié, il est utilisé pour référencer le script. Lorsque <xref:System.Web.UI.ScriptReference.Name%2A> et le <xref:System.Web.UI.ScriptReferenceBase.Path%2A> sont tous deux spécifiés, le <xref:System.Web.UI.ScriptReferenceBase.Path%2A> propriété est utilisée au lieu de <xref:System.Web.UI.ScriptReference.Name%2A>, mais la <xref:System.Web.UI.ScriptMode.Auto> valeur équivaut toujours à <xref:System.Web.UI.ScriptMode.Inherit>.  
  
   
  
## Examples  
 L’exemple suivant montre comment référencer un contrôle personnalisé et un fichier JavaScript qui est incorporé dans l’assembly de contrôle. L’assembly est supposé pour être dans le dossier Bin du site Web. Le contrôle personnalisé s’anime <xref:System.Web.UI.UpdatePanel> contrôles. Le fichier JavaScript est compilé comme ressource incorporée nommée SampleControl.UpdatePanelAnimation.js. Vous inscrivez le fichier JavaScript incorporé à l’aide de la <xref:System.Web.UI.ScriptReference.Assembly%2A> et <xref:System.Web.UI.ScriptReference.Name%2A> propriétés.  
  
 Pour utiliser cet exemple, compilez le fichier JavaScript qui est indiqué dans l’exemple comme une ressource incorporée avec le contrôle personnalisé. Placez l’assembly résultant dans le dossier Bin du site Web. Pour obtenir un exemple montrant comment incorporer un fichier JavaScript dans un assembly, consultez [procédure pas à pas : Incorporer un fichier JavaScript en tant que ressource dans un Assembly](https://msdn.microsoft.com/library/d8cb78cd-95a9-4dc6-92df-391866817e89).  
  
 L’exemple suivant montre une page qui utilise le contrôle personnalisé.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptReference#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptReference#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/Default.aspx#1)]  
  
 L’exemple suivant montre la définition de classe de contrôle personnalisé.  
  
 [!code-csharp[System.Web.UI.ScriptReference#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/customcontrol.cs#2)]
 [!code-vb[System.Web.UI.ScriptReference#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/customcontrol.vb#2)]  
  
 L’exemple suivant montre le fichier JavaScript de prise en charge.  
  
 [!code-javascript[System.Web.UI.ScriptReference#3](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/UpdatePanelAnimation.js#3)]  
  
 L’exemple suivant montre le code que vous devez ajouter au fichier AssemblyInfo du projet qui contient le contrôle personnalisé et le fichier JavaScript.  
  
 [!code-csharp[System.Web.UI.ScriptReference#4](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/AssemblyInfo.cs#4)]
 [!code-vb[System.Web.UI.ScriptReference#4](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/AssemblyInfo.vb#4)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.ScriptReference" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptReference();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.ScriptReference" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptReference (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptReference(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ScriptReference : string -&gt; System.Web.UI.ScriptReference" Usage="new System.Web.UI.ScriptReference path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Chemin d'accès du fichier de script client relatif à la page Web.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.ScriptReference" /> à l'aide d'un chemin d'accès spécifié.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptReference (string name, string assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, assembly As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptReference(System::String ^ name, System::String ^ assembly);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ScriptReference : string * string -&gt; System.Web.UI.ScriptReference" Usage="new System.Web.UI.ScriptReference (name, assembly)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="assembly" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom du fichier de script incorporé dans l'assembly.</param>
        <param name="assembly">Nom de l'assembly qui contient le fichier de script client comme ressource incorporée.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.ScriptReference" /> à l'aide d'un nom et d'un assembly spécifiés.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public string Assembly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptReference.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public Property Assembly As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Assembly { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Assembly : string with get, set" Usage="System.Web.UI.ScriptReference.Assembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de l'assembly contenant le fichier de script client comme ressource incorporée.</summary>
        <value>Nom qualifié complètement ou partiellement de l'assembly qui contient un fichier de script client comme ressource incorporée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous définissez le <xref:System.Web.UI.ScriptReference.Assembly%2A> propriété lorsque vous faites référence à un fichier de script client qui est inclus en tant que ressource incorporée dans un assembly. Définissez <xref:System.Web.UI.ScriptReference.Assembly%2A> au nom d’assembly qualifié complètement ou partiellement. Un nom d’assembly qualifié complet inclut un nom de culture, clé publique et numéro de version. Un nom d’assembly partiellement qualifiées inclut uniquement un nom.  
  
 Lorsque vous spécifiez une valeur pour <xref:System.Web.UI.ScriptReference.Assembly%2A>, vous devez également spécifier le nom de la ressource incorporée dans le <xref:System.Web.UI.ScriptReference.Name%2A> propriété. Sinon, un <xref:System.InvalidOperationException> sera levée.  
  
 L’assembly référencé doit être situé dans le dossier Bin du site Web ou dans le global assembly cache.  
  
   
  
## Examples  
 L’exemple suivant montre comment référencer un contrôle personnalisé et un fichier JavaScript qui est incorporé dans l’assembly de contrôle. L’assembly est supposé pour être dans le dossier Bin du site Web. Le contrôle personnalisé s’anime <xref:System.Web.UI.UpdatePanel> contrôles. Le fichier JavaScript est compilé comme ressource incorporée nommée SampleControl.UpdatePanelAnimation.js. Vous inscrivez le fichier JavaScript incorporé à l’aide de la <xref:System.Web.UI.ScriptReference.Assembly%2A> et <xref:System.Web.UI.ScriptReference.Name%2A> propriétés.  
  
 Pour utiliser cet exemple, compilez le fichier JavaScript qui est indiqué dans l’exemple comme une ressource incorporée avec le contrôle personnalisé. Placez l’assembly résultant dans le dossier Bin du site Web. Pour obtenir un exemple montrant comment incorporer un fichier JavaScript dans un assembly, consultez [procédure pas à pas : Incorporer un fichier JavaScript en tant que ressource dans un Assembly](https://msdn.microsoft.com/library/d8cb78cd-95a9-4dc6-92df-391866817e89).  
  
 L’exemple suivant montre une page qui utilise le contrôle personnalisé.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptReference#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptReference#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/Default.aspx#1)]  
  
 L’exemple suivant montre la définition de classe de contrôle personnalisé.  
  
 [!code-csharp[System.Web.UI.ScriptReference#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/customcontrol.cs#2)]
 [!code-vb[System.Web.UI.ScriptReference#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/customcontrol.vb#2)]  
  
 L’exemple suivant montre le fichier JavaScript de prise en charge.  
  
 [!code-javascript[System.Web.UI.ScriptReference#3](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/UpdatePanelAnimation.js#3)]  
  
 L’exemple suivant montre le code que vous devez ajouter au fichier AssemblyInfo du projet qui contient le contrôle personnalisé et le fichier JavaScript.  
  
 [!code-csharp[System.Web.UI.ScriptReference#4](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/AssemblyInfo.cs#4)]
 [!code-vb[System.Web.UI.ScriptReference#4](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/AssemblyInfo.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUrl">
      <MemberSignature Language="C#" Value="protected internal override string GetUrl (System.Web.UI.ScriptManager scriptManager, bool zip);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance string GetUrl(class System.Web.UI.ScriptManager scriptManager, bool zip) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.GetUrl(System.Web.UI.ScriptManager,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::String ^ GetUrl(System::Web::UI::ScriptManager ^ scriptManager, bool zip);" />
      <MemberSignature Language="F#" Value="override this.GetUrl : System.Web.UI.ScriptManager * bool -&gt; string" Usage="scriptReference.GetUrl (scriptManager, zip)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptManager" Type="System.Web.UI.ScriptManager" />
        <Parameter Name="zip" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="scriptManager">Contrôle <see langword="ScriptManager" /> sur la page Web cible.</param>
        <param name="zip"><see langword="true" /> si le script doit être compressé ; sinon, <see langword="false" />.</param>
        <summary>Récupère l'URL rendue en tant que valeur de l'attribut <see langword="src" /> de l'élément <see langword="script" />.</summary>
        <returns>Chaîne qui contient l'URL rendue en tant que valeur de l'attribut <see langword="src" /> de l'élément <see langword="script" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreScriptPath">
      <MemberSignature Language="C#" Value="public bool IgnoreScriptPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreScriptPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptReference.IgnoreScriptPath" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreScriptPath As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreScriptPath { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreScriptPath : bool with get, set" Usage="System.Web.UI.ScriptReference.IgnoreScriptPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This property is obsolete. Instead of using ScriptManager.ScriptPath, set the Path property on each individual ScriptReference.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si la propriété <see cref="P:System.Web.UI.ScriptManager.ScriptPath" /> est incluse dans l'URL lorsque vous inscrivez un fichier de script client d'une ressource.</summary>
        <value><see langword="true" /> si le chemin d'accès au script n'est pas utilisé lorsque vous inscrivez le script client ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous définissez <xref:System.Web.UI.ScriptReference.IgnoreScriptPath%2A> à `true` lorsque vous souhaitez inscrire un fichier de script client sans inclure la <xref:System.Web.UI.ScriptManager.ScriptPath%2A> valeur dans l’URL du fichier de script.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAjaxFrameworkScript">
      <MemberSignature Language="C#" Value="protected internal override bool IsAjaxFrameworkScript (System.Web.UI.ScriptManager scriptManager);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool IsAjaxFrameworkScript(class System.Web.UI.ScriptManager scriptManager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.IsAjaxFrameworkScript(System.Web.UI.ScriptManager)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override bool IsAjaxFrameworkScript(System::Web::UI::ScriptManager ^ scriptManager);" />
      <MemberSignature Language="F#" Value="override this.IsAjaxFrameworkScript : System.Web.UI.ScriptManager -&gt; bool" Usage="scriptReference.IsAjaxFrameworkScript scriptManager" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptManager" Type="System.Web.UI.ScriptManager" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="scriptManager">Objet <see cref="T:System.Web.UI.ScriptManager" />.</param>
        <summary>Détermine si la référence de script est un script AJAX.</summary>
        <returns><see langword="true" /> si la référence de script est un script AJAX ; sinon, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFromSystemWebExtensions">
      <MemberSignature Language="C#" Value="protected internal override bool IsFromSystemWebExtensions ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool IsFromSystemWebExtensions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.IsFromSystemWebExtensions" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function IsFromSystemWebExtensions () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override bool IsFromSystemWebExtensions();" />
      <MemberSignature Language="F#" Value="override this.IsFromSystemWebExtensions : unit -&gt; bool" Usage="scriptReference.IsFromSystemWebExtensions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This method is obsolete. Use IsAjaxFrameworkScript(ScriptManager) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indique si le script composite contient une référence au script d'infrastructure ASP.NET AJAX.</summary>
        <returns><see langword="true" /> si le script composite contient une référence à un script d'infrastructure ASP.NET AJAX ; sinon, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptReference.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Web.UI.ScriptReference.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de la ressource incorporée contenant le fichier de script client.</summary>
        <value>Nom du fichier de script client incorporé comme ressource dans un assembly.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous définissez le <xref:System.Web.UI.ScriptReference.Name%2A> propriété à référencer un fichier de script client qui est incorporé en tant que ressource dans un assembly.  
  
 Si vous définissez des valeurs pour les deux le <xref:System.Web.UI.ScriptReferenceBase.Path%2A> et <xref:System.Web.UI.ScriptReference.Name%2A> propriétés dans la même référence de script, le <xref:System.Web.UI.ScriptReferenceBase.Path%2A> propriété est prioritaire.  
  
   
  
## Examples  
 L’exemple suivant montre comment référencer un contrôle personnalisé et un fichier JavaScript qui est incorporé dans l’assembly de contrôle. L’assembly est supposé pour être dans le dossier Bin du site Web. Le contrôle personnalisé s’anime <xref:System.Web.UI.UpdatePanel> contrôles. Le fichier JavaScript est compilé comme ressource incorporée nommée SampleControl.UpdatePanelAnimation.js. Vous inscrivez le fichier JavaScript incorporé à l’aide de la <xref:System.Web.UI.ScriptReference.Assembly%2A> et <xref:System.Web.UI.ScriptReference.Name%2A> propriétés.  
  
 Pour utiliser cet exemple, compilez le fichier JavaScript qui est indiqué dans l’exemple comme une ressource incorporée avec le contrôle personnalisé. Placez l’assembly résultant dans le dossier Bin du site Web. Pour obtenir un exemple montrant comment incorporer un fichier JavaScript dans un assembly, consultez [procédure pas à pas : Incorporer un fichier JavaScript en tant que ressource dans un Assembly](https://msdn.microsoft.com/library/d8cb78cd-95a9-4dc6-92df-391866817e89).  
  
 L’exemple suivant montre une page qui utilise le contrôle personnalisé.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptReference#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptReference#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/Default.aspx#1)]  
  
 L’exemple suivant montre la définition de classe de contrôle personnalisé.  
  
 [!code-csharp[System.Web.UI.ScriptReference#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/customcontrol.cs#2)]
 [!code-vb[System.Web.UI.ScriptReference#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/customcontrol.vb#2)]  
  
 L’exemple suivant montre le fichier JavaScript de prise en charge.  
  
 [!code-javascript[System.Web.UI.ScriptReference#3](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/UpdatePanelAnimation.js#3)]  
  
 L’exemple suivant montre le code que vous devez ajouter au fichier AssemblyInfo du projet qui contient le contrôle personnalisé et le fichier JavaScript.  
  
 [!code-csharp[System.Web.UI.ScriptReference#4](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptReference/CS/AssemblyInfo.cs#4)]
 [!code-vb[System.Web.UI.ScriptReference#4](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptReference/vb/AssemblyInfo.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptReference.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="scriptReference.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une chaîne qui représente la valeur de la propriété <see cref="P:System.Web.UI.ScriptReference.Name" />, la propriété <see cref="P:System.Web.UI.ScriptReferenceBase.Path" /> ou le nom de type.</summary>
        <returns>La valeur de la propriété <see cref="P:System.Web.UI.ScriptReference.Name" /> si elle est définie, ou la valeur de la propriété <see cref="P:System.Web.UI.ScriptReferenceBase.Path" /> si elle est définie ; sinon, la valeur de la propriété <see cref="P:System.Reflection.MemberInfo.Name" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>