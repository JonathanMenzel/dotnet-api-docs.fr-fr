<Type Name="PageStatePersister" FullName="System.Web.UI.PageStatePersister">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8088aa9ec9624ae83238fa8fc2f4457413effd55" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30609643" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class PageStatePersister" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PageStatePersister extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.PageStatePersister" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PageStatePersister" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageStatePersister abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit les fonctionnalités de base régissant les mécanismes de persistance de l'état d'affichage d'ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les demandes et réponses HTTP sont fondamentalement sans état. Pour gérer les informations d’état entre les requêtes HTTP, les pages serveur ASP.NET peuvent stocker <xref:System.Web.UI.Page> état. Cet état, appelé état d’affichage, se compose de page et les paramètres de contrôle et les données que la page et les contrôles apparaissent comme si elles sont identiques à celles que l’utilisateur a appris et exploiter lors de leur dernier aller-retour au serveur. Plusieurs mécanismes existent pour stocker l’état d’affichage entre des demandes consécutives sur la même page. Le résumé <xref:System.Web.UI.PageStatePersister> classe représente la classe de base pour ces mécanismes de stockage d’informations état.  
  
 Le mécanisme de persistance de l’état de l’affichage par défaut dans ASP.NET consiste à mettre à jour les informations d’état sous forme de chaîne codée en Base64 dans un élément HTML masqué (un élément avec la `type` attribut la valeur `"hidden"`) dans la page. Une page ASP.NET utilise un <xref:System.Web.UI.HiddenFieldPageStatePersister> objet pour effectuer cette fonctionne, à l’aide un <xref:System.Web.UI.IStateFormatter> instance pour sérialiser et désérialiser des informations sur l’objet état. Ou bien, vous pouvez stocker l’état d’affichage de vos pages dans le <xref:System.Web.HttpContext.Session%2A> objet sur le serveur en utilisant la <xref:System.Web.UI.SessionPageStatePersister> classe pour les clients mobiles avec une bande passante limitée et des ressources. Dans certains cas, vous pouvez désactiver complètement le vue persistance de l’état. Si vous faites cela, le résultat est que parfois les contrôles qui s’appuient sur la persistance de l’état et les pages ne fonctionnent pas correctement. Pour plus d’informations sur la page Gestion et affichage de l’état, consultez [ASP.NET State Management Overview](http://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce).  
  
 Si vous écrivez des contrôles, vous pouvez stocker les informations d’état pour les contrôles dans le <xref:System.Web.UI.Control.ViewState%2A> dictionnaire, qui est un <xref:System.Web.UI.StateBag> objet. Un développeur doit extraire l’état du contrôle via le <xref:System.Web.UI.PageStatePersister.ControlState%2A> propriété. Vous affectez des clés et valeurs pour le <xref:System.Web.UI.Control.ViewState%2A> propriété et le <xref:System.Web.UI.Page> objet sérialise les informations d’état entre les demandes. Pour exécuter la gestion de votre contrôle d’état personnalisée, substituez le <xref:System.Web.UI.Control.LoadViewState%2A> et <xref:System.Web.UI.Control.SaveViewState%2A> méthodes. Les informations d’état sont stockées dans ce dictionnaire sont perdues lorsque l’état d’affichage est désactivé par un développeur de pages. Pour remédier à cela, dans ASP.NET version 2.0, vous pouvez stocker des informations d’état critiques dans un objet distinct, appelé état du contrôle. L’objet d’état de contrôle n’est pas affectée lorsque l’état d’affichage est désactivé par un développeur de pages. Le stockage des informations d’état dans l’objet d’état de contrôle nécessite que le contrôle de remplacer le <xref:System.Web.UI.Control.LoadControlState%2A> et <xref:System.Web.UI.Control.SaveControlState%2A> méthodes et que le contrôle soit stockée pour stocker les informations d’état de contrôlent l’état de chaque fois que le contrôle est initialisé. Vous pouvez inscrire un contrôle pour utiliser l’état du contrôle en substituant la <xref:System.Web.UI.Control.OnInit%2A> (méthode) et en appelant le <xref:System.Web.UI.Page.RegisterRequiresControlState%2A> (méthode). Pour plus d’informations sur l’utilisation de la <xref:System.Web.UI.Control.ViewState%2A> état du contrôle et de la propriété lors du développement de contrôles, consultez [développement de contrôles serveur ASP.NET personnalisés](http://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef).  
  
 Pour conserver l’état d’affichage sur les clients qui ne peut pas prendre en charge existants afficher les mécanismes de persistance d’état, vous pouvez étendre la <xref:System.Web.UI.PageStatePersister> classe pour introduire vos propres méthodes de persistance d’état vue, et vous pouvez utiliser des adaptateurs de page pour configurer votre application ASP.NET Pour utiliser les mécanismes de persistance d’état différemment en fonction du type de client, une page est pris en charge. Les classes qui dérivent de la <xref:System.Web.UI.PageStatePersister> classe doit remplacer le résumé <xref:System.Web.UI.PageStatePersister.Save%2A> méthode pour stocker l’état d’affichage et l’état du contrôle dans le support de persistance et remplacer la <xref:System.Web.UI.PageStatePersister.Load%2A> méthode extraire. Si vous avez besoin sérialiser l’état d’affichage et l’état du contrôle à une chaîne, vous pouvez utiliser la <xref:System.Web.UI.IStateFormatter> objet est accessible à l’aide de la <xref:System.Web.UI.PageStatePersister.StateFormatter%2A> propriété. Il sérialise et désérialise les informations d’état d’objet en une chaîne codée en Base64. Vous pouvez également remplacer le <xref:System.Web.UI.PageStatePersister.StateFormatter%2A> propriété pour fournir votre propre mécanisme de sérialisation objet état.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer un <xref:System.Web.UI.PageStatePersister> objet qui enregistre l’état d’affichage et de contrôle sur le serveur Web. Le `StreamPageStatePersister` montre comment substituer la <xref:System.Web.UI.PageStatePersister.Load%2A> et <xref:System.Web.UI.PageStatePersister.Save%2A> méthodes pour extraire et enregistrer l’affichage des informations d’état. Étant donné que les mécanismes de persistance d’état sont associés au rendu adaptable et les fonctionnalités d’un client, le `MyPageAdapter` classe est fournie pour activer le `StreamPageStatePersister` pour une application ASP.NET. Enfin, un fichier de fonctionnalités (Browser) du navigateur est fourni pour activer la `MyPageAdapter` l’adaptateur pour une classe spécifique de clients (dans ce cas, le navigateur Web par défaut).  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#1)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#1)]  
  
 L’exemple de code suivant montre comment créer un <xref:System.Web.UI.Adapters.PageAdapter> classe qui retourne une instance de `StreamPageStatePersister`, qui est utilisé pour conserver l’état d’affichage et de contrôle pour une page Web ASP.NET.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/mypageadapter.cs#5)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/mypageadapter.vb#5)]  
  
 Compilez ces deux classes dans un assembly que vous pouvez utiliser pour exécuter un exemple, à l’aide de la ligne de commande du compilateur. Assurez-vous que l’assembly compilé est dans le répertoire \Bin sous la racine de l’application ASP.NET.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/mypageadapter.cs#6)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/mypageadapter.vb#6)]  
  
 Enfin, pour activer la `MyPageAdapter` carte, vous devez créer un répertoire nommé Browsers sous la racine de l’application ASP.NET et inclure un fichier browser avec les informations de configuration. Le `<refid>` élément dans le fichier de configuration indique que la configuration remplace les valeurs spécifiées pour le navigateur par défaut dans le fichier de configuration Default.browser. Dans cet exemple, `MyPageAdapter` est utilisé pour les pages Web ASP.NET (où normalement aucun adaptateur n’est utilisé).  
  
```  
<browsers>  
    <browser refid="Default" >  
        <controlAdapters>  
            <adapter   
                controlType="System.Web.UI.Page"                              
                adapterType="Samples.AspNet.CS.MyPageAdapter" />  
        </controlAdapters>  
    </browser>  
</browsers>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ObjectStateFormatter" />
    <altmember cref="T:System.Web.UI.LosFormatter" />
    <altmember cref="T:System.Web.UI.Pair" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PageStatePersister (System.Web.UI.Page page);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.Page page) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.#ctor(System.Web.UI.Page)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PageStatePersister(System::Web::UI::Page ^ page);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
      </Parameters>
      <Docs>
        <param name="page">
          <see cref="T:System.Web.UI.Page" /> pour lequel est créé le mécanisme de persistance de l'état d'affichage.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.PageStatePersister" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="page" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ControlState">
      <MemberSignature Language="C#" Value="public object ControlState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ControlState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.ControlState" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ControlState { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un objet qui représente les données que les contrôles contenus dans l'objet <see cref="T:System.Web.UI.Page" /> actuel utilisent pour la persistance à travers des requêtes HTTP au serveur Web.</summary>
        <value>Objet qui contient des données d'état d'affichage.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’état du contrôle est un objet constitué de données d’état critique vue Web des contrôles serveur doivent utiliser et sont contenues dans un objet distinct à partir des informations d’état d’affichage normal. Données d’état de contrôle ne sont pas affectées lorsque l’état d’affichage est désactivé au <xref:System.Web.UI.Page> niveau, mais nécessite des étapes d’implémentation supplémentaires à utiliser. Pour plus d’informations sur l’utilisation de la <xref:System.Web.UI.Control.ViewState%2A> état du contrôle et de la propriété lors du développement de contrôles, consultez [développement de contrôles serveur ASP.NET personnalisés](http://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment une classe qui dérive de la <xref:System.Web.UI.PageStatePersister> classe initialise le <xref:System.Web.UI.PageStatePersister.ControlState%2A> propriété. Dans cet exemple, le <xref:System.Web.UI.PageStatePersister.ControlState%2A> propriété a été assignée à la <xref:System.Web.UI.Pair.Second> champ un <xref:System.Web.UI.Pair> de l’objet et sérialisé à l’aide la <xref:System.Web.UI.ObjectStateFormatter> classe. Lorsque le <xref:System.Web.UI.PageStatePersister.Load%2A> méthode est appelée, le <xref:System.Web.UI.ObjectStateFormatter> classe est utilisée pour désérialiser l’affichage des informations d’état état et de contrôle et le <xref:System.Web.UI.PageStatePersister.ControlState%2A> propriété est initialisée à partir de la boîte <xref:System.Web.UI.Pair> l’objet <xref:System.Web.UI.Pair.Second> champ. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Web.UI.PageStatePersister> classe.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public abstract void Load ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.Load" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Load ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Load();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Substitué par des classes dérivées pour désérialiser et charger des informations d'état persistant lorsqu'un objet <see cref="T:System.Web.UI.Page" /> initialise sa hiérarchie de contrôle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les classes qui dérivent de la <xref:System.Web.UI.PageStatePersister> mettre en œuvre de la classe le <xref:System.Web.UI.PageStatePersister.Load%2A> méthode pour initialiser le <xref:System.Web.UI.PageStatePersister.ViewState%2A> et <xref:System.Web.UI.PageStatePersister.ControlState%2A> propriétés d’un format persistant.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment une classe qui dérive de la <xref:System.Web.UI.PageStatePersister> la classe implémente le <xref:System.Web.UI.PageStatePersister.Load%2A> méthode pour charger l’état d’affichage à partir d’un support de persistance. Le `StreamPageStatePersister` tente de lire des données à partir d’un flux de données. Il utilise un <xref:System.Web.UI.IStateFormatter> objet à désérialiser des données d’état de vue et initialiser le <xref:System.Web.UI.PageStatePersister.ViewState%2A> propriété et le <xref:System.Web.UI.PageStatePersister.ControlState%2A> propriété qu’une page utilise pour initialiser les contrôles. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Web.UI.PageStatePersister> classe.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Page">
      <MemberSignature Language="C#" Value="protected System.Web.UI.Page Page { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Page Page" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.Page" />
      <MemberSignature Language="VB.NET" Value="Protected Property Page As Page" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::Page ^ Page { System::Web::UI::Page ^ get(); void set(System::Web::UI::Page ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Page</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'objet <see cref="T:System.Web.UI.Page" /> pour lequel le mécanisme de persistance de l'état d'affichage est créé.</summary>
        <value>
          <see cref="T:System.Web.UI.Page" /> auquel le <see cref="T:System.Web.UI.PageStatePersister" /> est associé.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser la <xref:System.Web.UI.PageStatePersister.Page%2A> propriété à laquelle accéder actuel <xref:System.Web.HttpContext> objet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public abstract void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.Save" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Save();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Substitué par des classes dérivées pour sérialiser des informations d'état persistant lorsqu'un objet <see cref="T:System.Web.UI.Page" /> est déchargé de la mémoire.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Classes dérivées de la <xref:System.Web.UI.PageStatePersister> mettre en œuvre de la classe le <xref:System.Web.UI.PageStatePersister.Save%2A> méthode conserver le contenu de la <xref:System.Web.UI.PageStatePersister.ViewState%2A> et <xref:System.Web.UI.PageStatePersister.ControlState%2A> propriétés sur un support de persistance.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment une classe qui dérive de la <xref:System.Web.UI.PageStatePersister> la classe implémente le <xref:System.Web.UI.PageStatePersister.Save%2A> méthode pour conserver l’état d’affichage sur un support de persistance. Le `StreamPageStatePersister` utilise un <xref:System.Web.UI.IStateFormatter> objet à sérialiser le contenu de la <xref:System.Web.UI.PageStatePersister.ViewState%2A> propriété et <xref:System.Web.UI.PageStatePersister.ControlState%2A> propriété. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Web.UI.PageStatePersister> classe.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#3)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateFormatter">
      <MemberSignature Language="C#" Value="protected System.Web.UI.IStateFormatter StateFormatter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.IStateFormatter StateFormatter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.StateFormatter" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StateFormatter As IStateFormatter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::IStateFormatter ^ StateFormatter { System::Web::UI::IStateFormatter ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IStateFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.Web.UI.IStateFormatter" /> qui est utilisé pour sérialiser et désérialiser les informations d'état contenues dans les propriétés <see cref="P:System.Web.UI.PageStatePersister.ViewState" /> et <see cref="P:System.Web.UI.PageStatePersister.ControlState" /> lors de l'appel des méthodes <see cref="M:System.Web.UI.PageStatePersister.Save" /> et <see cref="M:System.Web.UI.PageStatePersister.Load" />.</summary>
        <value>Instance de <see cref="T:System.Web.UI.IStateFormatter" /> utilisée pour sérialiser et désérialiser l'état d'objet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez remplacer le <xref:System.Web.UI.PageStatePersister.StateFormatter%2A> propriété afin de fournir votre propre formateur d’état d’affichage.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment une classe qui dérive de la <xref:System.Web.UI.PageStatePersister> classe accède à la <xref:System.Web.UI.PageStatePersister.StateFormatter%2A> propriété à récupérer une <xref:System.Web.UI.ObjectStateFormatter> objet, qui est l’implémentation par défaut de la <xref:System.Web.UI.IStateFormatter> interface, pour sérialiser la vue état et contrôle l’état d’un flux de données. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Web.UI.PageStatePersister> classe.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#3)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewState">
      <MemberSignature Language="C#" Value="public object ViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.ViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property ViewState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ViewState { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un objet qui représente les données que les contrôles contenus dans l'objet <see cref="T:System.Web.UI.Page" /> actuel utilisent pour la persistance à travers des requêtes HTTP au serveur Web.</summary>
        <value>Objet qui contient des données d'état d'affichage.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 État d’affichage est un dictionnaire de données d’état des contrôles serveur Web doivent utiliser et restituer. Les développeurs de contrôles en général accéder à l’objet de vue État à l’aide du <xref:System.Web.UI.Control.ViewState%2A> propriété. État d’affichage est affecté lorsque l’état d’affichage est désactivé au <xref:System.Web.UI.Page> niveau et par conséquent les contrôles peuvent ne pas fonctionner correctement dans ces scénarios. Pour plus d’informations sur l’utilisation de <xref:System.Web.UI.Control.ViewState%2A> et état du contrôle lorsque vous développez des contrôles, consultez [développement de contrôles serveur ASP.NET personnalisés](http://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment une classe qui dérive de la <xref:System.Web.UI.PageStatePersister> classe initialise le <xref:System.Web.UI.PageStatePersister.ViewState%2A> propriété. Dans cet exemple, le <xref:System.Web.UI.PageStatePersister.ViewState%2A> propriété a été assignée à la <xref:System.Web.UI.Pair.First> champ un <xref:System.Web.UI.Pair> de l’objet et sérialisé à l’aide la <xref:System.Web.UI.ObjectStateFormatter> objet, qui est une instance de la <xref:System.Web.UI.IStateFormatter> interface. Lorsque le <xref:System.Web.UI.PageStatePersister.Load%2A> méthode est appelée, le <xref:System.Web.UI.ObjectStateFormatter> interface est utilisée pour désérialiser l’affichage des informations d’état et le <xref:System.Web.UI.PageStatePersister.ViewState%2A> propriété est initialisée à partir de la boîte <xref:System.Web.UI.Pair> l’objet <xref:System.Web.UI.Pair.First> champ. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Web.UI.PageStatePersister> classe.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>