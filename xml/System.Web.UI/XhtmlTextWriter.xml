<Type Name="XhtmlTextWriter" FullName="System.Web.UI.XhtmlTextWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="993af6b154f433e32c9e31f899d8c42127daad43" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37586897" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XhtmlTextWriter : System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XhtmlTextWriter extends System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.XhtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XhtmlTextWriter&#xA;Inherits HtmlTextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XhtmlTextWriter : System::Web::UI::HtmlTextWriter" />
  <TypeSignature Language="F#" Value="type XhtmlTextWriter = class&#xA;    inherit HtmlTextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlTextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Écrit des caractères spécifiques au langage XHTML (eXtensible HyperText Markup Language), notamment toutes les variantes des modules XHTML qui dérivent de XTHML, dans le flux de sortie d'un contrôle serveur ASP.NET pour les appareils mobiles. Substituez la classe <see cref="T:System.Web.UI.XhtmlTextWriter" /> pour fournir un rendu XHTML personnalisé des pages et des contrôles serveur ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XHTML est un langage de balisage XML conformes, basé sur HTML 4.1, qui vous permet de créer des sites Web qui conviennent pour plusieurs types d’appareils. Il fusionne la facilité d’utilisation fournie par HTML aux indications strictes d’éléments de XML pour produire un langage de balisage avec un large éventail d’options de format et de style et avec une ambiguïté réduite entre les balises. Le <xref:System.Web.UI.XhtmlTextWriter> classe fournit des capacités de mise en forme utilisées par les contrôles serveur ASP.NET lors du rendu d’un contenu XHTML aux clients. Vous pouvez utiliser la <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A> méthode pour spécifier le type de code XHTML rendu par le writer de texte. Types de documents pris en charge sont définis dans le <xref:System.Web.UI.XhtmlMobileDocType> énumération.  
  
 Le <xref:System.Web.UI.XhtmlTextWriter> classe affiche deux ensembles d’attributs pour les éléments. Un jeu est une collection d’attributs communs, comme indiqué dans le <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> propriété. Le deuxième jeu est une collection d’attributs spécifiques à un élément, tel que mentionné dans le <xref:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes%2A> propriété. Pour plus d’informations sur les éléments et les styles qui sont rendus, consultez la spécification de modularisation XHTML à le [site Web du World Wide Web Consortium (W3C)](http://go.microsoft.com/fwlink/?linkid=37125).  
  
 Vous pouvez utiliser les membres de la <xref:System.Web.UI.XhtmlTextWriter> classe et toutes les classes dérivées pour créer des writers de texte personnalisé à utiliser dans XHTML personnalisé page cartes ou des cartes de classe. Vous pouvez également créer des classes dérivées qui substituent le comportement standard de la <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 Par défaut, lorsque vous travaillez avec des navigateurs qui prennent en charge HTML 4.0, les pages et contrôles ASP.NET restituent un balisage qui est compatible avec la norme XHTML 1.1. Pour plus d’informations, consultez [normes XHTML dans Visual Studio et ASP.NET](http://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97).  
  
 Le <xref:System.Web.UI.HtmlTextWriter> génère des sorties XHTML, sauf si vous configurez ASP.NET en particulier pour ne pas restituer un balisage XHTML. Pour plus d’informations, consultez [NIB : Comment : configurer le rendu XHTML dans les Sites Web ASP.NET](http://msdn.microsoft.com/library/42483a54-f1ae-44e1-88e6-4370f8690149).  
  
   
  
## Examples  
 L’exemple de code dans cette section contient quatre parties. Le premier exemple montre comment créer une classe dérivée. Le deuxième exemple de code montre comment créer un contrôle personnalisé. Le troisième exemple de code montre comment utiliser le contrôle personnalisé. Le quatrième exemple de code fournit le code qui est nécessaire pour exécuter le contrôle personnalisé.  
  
 L’exemple de code suivant montre comment créer une classe personnalisée dérivée de la <xref:System.Web.UI.XhtmlTextWriter> classe. Il comprend deux constructeurs qui sont standard pour toutes les classes qui héritent directement ou indirectement de la <xref:System.Web.UI.HtmlTextWriter> classe. Le premier constructeur accepte un <xref:System.IO.TextWriter> objet en tant que paramètre et appelle le deuxième constructeur, en passant les deux valeurs de paramètre suivantes :  
  
-   Instance <xref:System.IO.TextWriter>.  
  
-   La valeur de la <xref:System.Web.UI.HtmlTextWriter.DefaultTabString?displayProperty=nameWithType> propriété, qui définit la mise en retrait de ligne par défaut qui est utilisé par le writer de texte XHTML.  
  
 Cet exemple de code montre également comment substituer la <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> et <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> méthodes pour filtrer pour le texte de taille et couleur style, respectivement. En outre, il substitue la <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> et <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> méthodes permettant d’écrire un texte de chaîne avant et après le rendu d’un contrôle.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#1)]  
  
 L’exemple de code suivant montre comment créer un personnalisé <xref:System.Web.UI.WebControls.Label> contrôle nommé `TestLabel` et un adaptateur personnalisé nommé `XhtmlTestLabelAdapter` qui restitue le contenu du contrôle au format XHTML.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#1)]  
  
 L’exemple de code suivant montre comment utiliser le contrôle personnalisé `TestLabel` sur une page Web ASP.NET.  
  
 [!code-aspx-csharp[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.aspx#4)]
 [!code-aspx-vb[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.aspx#4)]  
  
 Pour utiliser le contrôle personnalisé dans l’exemple de code précédent, ajoutez le code suivant `<controlAdapters>` élément à un des deux fichiers. Vous pouvez l’ajouter au fichier de l’ordinateur approprié dans le sous-répertoire d’un navigateur spécifique, en tant que sous-dossier du répertoire de configuration .NET Framework. Ou bien, vous pouvez l’ajouter à un fichier de navigateur personnalisé dans le répertoire App_Browsers sous la racine de l’application Web.  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.TestLabel"  
   adapterType="AspNet.Samples.XhtmlTestLabelAdapter" />  
</controlAdapters>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.XhtmlTextWriter" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Instance de <see cref="T:System.IO.TextWriter" /> qui restitue le contenu XHTML.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.XhtmlTextWriter" /> qui utilise la mise en retrait de ligne spécifiée dans le champ <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />. Utilisez le constructeur <see cref="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" /> si vous ne souhaitez pas modifier la mise en retrait de ligne par défaut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.XhtmlTextWriter.%23ctor%2A> constructeur qui accepte un <xref:System.IO.TextWriter> comme un paramètre appelle le deuxième constructeur, en passant deux valeurs de paramètre de l’objet :  
  
-   Instance <xref:System.IO.TextWriter>.  
  
-   La valeur de chaîne qui est spécifiée dans le <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> champ qui définit l’espacement de tabulation utilisé par le writer de texte XHTML.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer les deux constructeurs qui sont standard pour toutes les classes qui dérivent directement ou indirectement de la <xref:System.Web.UI.HtmlTextWriter> (classe), pour une classe personnalisée dérivée de la <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">Instance de <see cref="T:System.IO.TextWriter" /> qui restitue le contenu XHTML.</param>
        <param name="tabString">Chaîne utilisée pour restituer la mise en retrait d'une ligne.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.XhtmlTextWriter" /> avec la mise en retrait de ligne spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment créer les deux constructeurs qui sont standard pour toutes les classes qui dérivent directement ou indirectement de la <xref:System.Web.UI.HtmlTextWriter> (classe), pour une classe personnalisée dérivée de la <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">L'élément XHTML auquel ajouter l'attribut.</param>
        <param name="attributeName">L'attribut à ajouter.</param>
        <summary>Ajoute un attribut à un élément XHTML. La collection d'attributs spécifiques à un élément de l'objet <see cref="T:System.Web.UI.XhtmlTextWriter" /> est référencée par la propriété <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A> pour ajouter un attribut à un élément XHTML. L’attribut ajouté peut ensuite être reconnu et restitué par le <xref:System.Web.UI.XhtmlTextWriter> objet. Pour empêcher le writer de restituer un attribut commun d’un élément XHTML, utilisez la <xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable CommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable CommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ CommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.Collections.Hashtable" /> contenant des attributs communs aux balises de marquage de l'objet <see cref="T:System.Web.UI.XhtmlTextWriter" />.</summary>
        <value>Objet <see cref="T:System.Collections.Hashtable" /> contenant des attributs communs.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> collection contient des attributs qui sont autorisés dans les éléments XHTML et qui ne sont pas supprimés dans le <xref:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes%2A> propriété. Pour plus d’informations sur les attributs communs, consultez le [site Web du World Wide Web Consortium (W3C)](http://go.microsoft.com/fwlink/?linkid=37125).  
  
 Lorsqu’une nouvelle instance de la <xref:System.Web.UI.XhtmlTextWriter> classe est créée, les attributs communs qui sont initialisés sont :  
  
-   `class`  
  
-   `id`  
  
-   `title`  
  
-   `xml:lang`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="ElementSpecificAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable ElementSpecificAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable ElementSpecificAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ElementSpecificAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ ElementSpecificAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ElementSpecificAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.Collections.Hashtable" /> contenant des attributs spécifiques à un élément.</summary>
        <value>Objet <see cref="T:System.Collections.Hashtable" /> contenant des attributs spécifiques à un élément.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A> méthode pour ajouter reconnue des attributs à un élément XHTML. Pour supprimer des attributs communs sur un élément XHTML, utilisez la <xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A> (méthode).  
  
 Lorsqu’une nouvelle instance de la <xref:System.Web.UI.XhtmlTextWriter> classe est créée, le <xref:System.Collections.Hashtable> objet d’attributs spécifiques à l’élément est rempli avec les attributs affichés dans le tableau suivant.  
  
|Élément|Attributs|  
|-------------|----------------|  
|`<a>`|`accesskey`, `href`, `charset`, `hreflang`, `rel`, `type`, `rev`, `title`, `tabindex`|  
|`<base>`|`href`|  
|`<blockquote>`|`cite`|  
|`<br>`|`id`, `class`, `title`|  
|`<form>`|`action`, `method`, `enctype`|  
|`<head>`|`xml:lang`|  
|`<html>`|`version`, `xml:lang`, `xmlns`|  
|`<img>`|`src`, `alt`, `width`, `longdesc`, `height`|  
|`<input>`|`size`, `accesskey`, `title`, `name`, `type`, `disabled`, `value`, `src`, `checked`, `maxlength`, `tabindex`|  
|`<label>`|`accesskey`, `for`|  
|`<li>`|`value`|  
|`<link>`|`hreflang`, `rev`, `type`, `charset`, `rel`, `href`, `media`|  
|`<meta>`|`content`, `name`, `xml:lang`, `http-equiv`, `scheme`|  
|`<object>`|`codebase`, `classid`, `data`, `standby`, `name`, `type`, `height`, `archive`, `declare`, `width`, `tabindex`, `codetype`|  
|`<ol>`|`start`|  
|`<optgroup>`|`label`, `disabled`|  
|`<option>`|`selected`, `value`|  
|`<param>`|`id`, `name`, `valuetype`, `value`, `type`|  
|`<pre>`|`xml:space`|  
|`<q>`|`cite`|  
|`<select>`|`name`, `tabindex`, `disabled`, `multiple`, `size`|  
|`<style>`|`xml:lang`, `xml:space`, `type`, `title`, `media`|  
|`<table>`|`width`, `summary`|  
|`<textarea>`|`name`, `cols`, `accesskey`, `tabindex`, `rows`|  
|`<td>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<th>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<title>`|`xml:lang`|  
|`<tr>`|`align`, `valign`|  
  
 Pour plus d’informations sur les éléments et les styles qui sont rendus, consultez la spécification de modularisation XHTML à le [site Web du World Wide Web Consortium (W3C)](http://go.microsoft.com/fwlink/?linkid=37125).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public override bool IsValidFormAttribute (string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsValidFormAttribute(string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsValidFormAttribute (attributeName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsValidFormAttribute(System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="override this.IsValidFormAttribute : string -&gt; bool" Usage="xhtmlTextWriter.IsValidFormAttribute attributeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">Nom de l'attribut à activer.</param>
        <summary>Active un attribut XHTML pour garantir qu'il peut être restitué dans la balise d'ouverture d'un élément <see langword="&lt;form&gt;" />.</summary>
        <returns>
          <see langword="true" /> si l'attribut peut s'appliquer à un élément <see langword="&lt;form&gt;" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est utile pour afficher de façon conditionnelle un attribut selon qu’il est pris en charge par le type de document XHTML de l’appareil demandeur.  
  
   
  
## Examples  
 L’exemple de code suivant fait partie d’un exemple plus complet qui crée un personnalisé <xref:System.Web.UI.WebControls.Label> contrôle et un adaptateur qui restitue le contenu du contrôle au format XHTML.  
  
 Cet exemple de code montre comment créer une variable booléenne nommée `attTest` et affectez-lui la valeur de retour qui résulte de l’appel la <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A> méthode avec la valeur du paramètre « style ». Si le <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A> retourne de la méthode `true`, les styles qui sont associées au contrôle sont rendus à l’aide de la <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A?displayProperty=nameWithType> et <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A?displayProperty=nameWithType> méthodes. Si le `attTest` valeur est `false`, les styles ne sont pas rendus. Au lieu de cela, la page affiche le texte du contrôle, un `<br/>` élément qui est restitué par le <xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A> (méthode) et une chaîne de texte qui informe l’utilisateur que le contenu XHTML du contrôle est restitué conditionnellement.  
  
 Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="xhtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Attribut XHTML à rendre.</param>
        <param name="value">Valeur assignée à l'attribut XHTML.</param>
        <param name="key">Valeur d'énumération <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> associée à l'attribut XHTML.</param>
        <summary>Détermine si l'attribut XHTML spécifié et sa valeur peuvent être rendus dans l'élément de balisage actuel.</summary>
        <returns>
          <see langword="true" /> si l'attribut est rendu sur la page ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> méthode permettant de vérifier si un `size` attribut est rendu pour chacun des éléments rendus par ce writer de texte. Si un `size` attribut est rendu, le code vérifie si sa valeur est de 8 points. Dans ce cas, le <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> méthode retourne `true`, ce qui permet de l’attribut et sa valeur à restituer. Si la valeur est autre que de 8 points, le <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> méthode retourne `false`, et l’attribut et sa valeur ne sont pas rendus. Si le paramètre de clé de la <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> méthode ne correspond pas à la <xref:System.Web.UI.HtmlTextWriterAttribute.Size> d’attribut, les fonctionnalités de base de la <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> méthode est appelée, tel que défini dans le <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="xhtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Attribut de style XHTML à rendre</param>
        <param name="value">Valeur assignée à l'attribut de style XHTML.</param>
        <param name="key">Valeur d'énumération <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> associée à l'attribut de style XHTML.</param>
        <summary>Détermine si l'attribut de style XHTML spécifié et sa valeur peuvent être rendus dans l'élément de balisage actuel.</summary>
        <returns>
          <see langword="true" /> si l'attribut de style est rendu ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> méthode permettant de vérifier si un <xref:System.Web.UI.HtmlTextWriterStyle.Color> attribut est rendu pour chacun des éléments rendus par ce writer de texte. Si un <xref:System.Web.UI.HtmlTextWriterStyle.Color> attribut est rendu, le code vérifie si sa valeur est violette. Si la valeur est violette, la <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> retourne de la méthode `false` et l’attribut et sa valeur ne sont pas rendus. Si le <xref:System.Web.UI.HtmlTextWriterStyle.Color> attribut est défini sur une autre valeur, le <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> retourne de la méthode `true` et l’attribut et sa valeur sont rendus. Si le paramètre de clé de la <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> méthode ne correspond pas à la <xref:System.Web.UI.HtmlTextWriterStyle.Color> d’attribut, les fonctionnalités de base de la <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> méthode est appelée, tel que défini dans le <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Élément XHTML dans lequel supprimer un attribut.</param>
        <param name="attributeName">Attribut à supprimer de l'élément XHTML spécifié.</param>
        <summary>Supprime un attribut de la collection <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" /> d'un élément.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetDocType">
      <MemberSignature Language="C#" Value="public virtual void SetDocType (System.Web.UI.XhtmlMobileDocType docType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDocType(valuetype System.Web.UI.XhtmlMobileDocType docType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.SetDocType(System.Web.UI.XhtmlMobileDocType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDocType (docType As XhtmlMobileDocType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDocType(System::Web::UI::XhtmlMobileDocType docType);" />
      <MemberSignature Language="F#" Value="abstract member SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit&#xA;override this.SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit" Usage="xhtmlTextWriter.SetDocType docType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="docType" Type="System.Web.UI.XhtmlMobileDocType" />
      </Parameters>
      <Docs>
        <param name="docType">Une des valeurs d'énumération <see cref="T:System.Web.UI.XhtmlMobileDocType" />.</param>
        <summary>Spécifie le type de document XHTML pour le TextWriter à rendre sur la page ou sur le contrôle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A> méthode dans un adaptateur de page personnalisé pour définir le type de code XHTML que vous souhaitez restituer à l’appareil demandeur. Types de documents pris en charge sont définis dans le <xref:System.Web.UI.XhtmlMobileDocType> énumération.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.XhtmlMobileDocType" />
      </Docs>
    </Member>
    <Member MemberName="SuppressCommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressCommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressCommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressCommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressCommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressCommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.Collections.Hashtable" /> des éléments pour lesquels les attributs <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" /> sont supprimés.</summary>
        <value>
          <see cref="T:System.Collections.Hashtable" /> des éléments contenant une collection de <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" /> non restitués.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La collection d’attributs supprimés inclut une liste d’éléments XHTML pour lequel <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> attributs ne sont pas rendus.  
  
 Lorsqu’une nouvelle instance de la <xref:System.Web.UI.XhtmlTextWriter> classe est créée, le <xref:System.Collections.Hashtable> objet des éléments pour lesquels <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> les attributs sont supprimés inclut :  
  
-   `base`  
  
-   `meta`  
  
-   `br`  
  
-   `head`  
  
-   `title`  
  
-   `html`  
  
-   `style`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="xhtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Écrit un élément <see langword="&lt;br/&gt;" /> dans le flux de sortie XHTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment substituer la hérité <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A?displayProperty=nameWithType> méthode pour écrire une chaîne de texte avec le <xref:System.Web.UI.HtmlTextWriter.Write%2A?displayProperty=nameWithType> (méthode) et un `<br/>` élément avec la <xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A> (méthode).  
  
 [!code-csharp[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#4)]
 [!code-vb[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>