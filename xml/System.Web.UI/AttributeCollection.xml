<Type Name="AttributeCollection" FullName="System.Web.UI.AttributeCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e9d1ac0e398bbc2a6301e4c20b8cd6c306029d3c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30608693" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AttributeCollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AttributeCollection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.AttributeCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AttributeCollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class AttributeCollection sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit au modèle objet l'accès à tous les attributs déclarés dans la balise d'ouverture d'un élément de contrôle serveur ASP.NET. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les éléments individuels dans la collection retournent une <xref:System.String> objet en tant que leur valeur. S’il n’y a aucun attribut dans la collection, la collection renvoie `null`.  
  
 Attributs sur un contrôle serveur HTML sont disponibles par programme via le <xref:System.Web.UI.HtmlControls.HtmlControl.Attributes%2A> propriété, qui est héritée par tous les contrôles de serveur HTML. ASP.NET expose les attributs des contrôles serveur HTML en tant que propriétés de ces contrôles.  
  
 Vous pouvez ajouter des attributs à un contrôle de serveur Web via le <xref:System.Web.UI.WebControls.WebControl.Attributes%2A> propriété, qui est héritée par tous les contrôles de serveur Web. Les attributs dans la collection d’attributs pour un contrôle serveur Web ne correspondent pas nécessairement à des propriétés fortement typées du contrôle pour ce contrôle.  
  
   
  
## Examples  
 L’exemple suivant crée un nouveau <xref:System.Web.UI.AttributeCollection> objet nommé `myAttributeCollection`, puis vérifie si la page a été publiée. S’il n’a pas le cas, le code ajoute deux attributs à la collection. Ensuite, il obtient le nombre d’attributs dans la collection et effectue une itération au sein de la collection, l’écriture de la clé de chaque attribut dans la page. Si la page est une publication (postback), le code obtient le nouveau nombre d’attributs et effectue une itération au sein de la collection, l’écriture de la clé et la valeur de chaque attribut dans la page.  
  
 [!code-csharp[AttributeCollection_AttributeCollection#1](~/samples/snippets/csharp/VS_Snippets_WebNet/AttributeCollection_AttributeCollection/CS/attributecollection_attributecollection.cs.aspx#1)]
 [!code-vb[AttributeCollection_AttributeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/AttributeCollection_AttributeCollection/VB/attributecollection_attributecollection.vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Web.UI.WebControls.WebControl.Attributes" />
    <altmember cref="P:System.Web.UI.HtmlControls.HtmlControl.Attributes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AttributeCollection (System.Web.UI.StateBag bag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.StateBag bag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.AttributeCollection.#ctor(System.Web.UI.StateBag)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bag As StateBag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AttributeCollection(System::Web::UI::StateBag ^ bag);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bag" Type="System.Web.UI.StateBag" />
      </Parameters>
      <Docs>
        <param name="bag">Objet qui contient les clés d'attribut et leurs valeurs à partir de la balise d'ouverture du contrôle serveur.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.AttributeCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Web.UI.AttributeCollection> constructeur pour créer une instance de la classe nommée `myAttributeCollection`. Le code transmet du contrôle <xref:System.Web.UI.Control.ViewState%2A> propriété comme argument de paramètre.  
  
 [!code-csharp[AttributeCollection_AttributeCollection#2](~/samples/snippets/csharp/VS_Snippets_WebNet/AttributeCollection_AttributeCollection/CS/attributecollection_attributecollection.cs.aspx#2)]
 [!code-vb[AttributeCollection_AttributeCollection#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/AttributeCollection_AttributeCollection/VB/attributecollection_attributecollection.vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.AttributeCollection.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ key, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nom de l'attribut.</param>
        <param name="value">Valeur de l'attribut.</param>
        <summary>Ajoute un attribut à l'objet <see cref="T:System.Web.UI.AttributeCollection" /> d'un contrôle serveur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la chaîne dans le `value` paramètre contient une esperluette (&), le caractère est automatiquement encodé. La représentation sous forme de code HTML résultante est «&amp;».  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Web.UI.AttributeCollection.Add%2A> méthode pour ajouter par programmation un attribut à un contrôle serveur ASP.NET <xref:System.Web.UI.AttributeCollection> objet.  
  
 [!code-aspx-csharp[Classic AttributeCollection.Add Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic AttributeCollection.Add Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic AttributeCollection.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic AttributeCollection.Add Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlControl.Attributes" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.Attributes" />
      </Docs>
    </Member>
    <Member MemberName="AddAttributes">
      <MemberSignature Language="C#" Value="public void AddAttributes (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAttributes(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.AttributeCollection.AddAttributes(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAttributes (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAttributes(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Instance de <see cref="T:System.Web.UI.HtmlTextWriter" /> qui écrit l'attribut dans la balise d'ouverture d'un contrôle serveur ASP.NET.</param>
        <summary>Ajoute des attributs de la classe <see cref="T:System.Web.UI.AttributeCollection" /> à l'objet <see cref="T:System.Web.UI.HtmlTextWriter" /> qui est responsable du rendu des attributs sous forme de balisage.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode copie tous les attributs du contrôle serveur à un <xref:System.Web.UI.HtmlTextWriter> objet afin qu’ils puissent être rendus par l’appel suivant à la <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> (méthode).  
  
 Pour les contrôles qui sont contenus dans d’autres contrôles tels que <xref:System.Web.UI.WebControls.Calendar> et <xref:System.Web.UI.WebControls.CheckBoxList>, vous pouvez potentiellement améliorer les performances en rendant les contrôles contenus directement. Rendu direct peut être plus rapide qu’un rendu effectué via le contrôle conteneur, car les contrôles conteneur exigent que vous copiez tous les attributs de contrôle enfants pour le contrôle conteneur et rendre après que qu’ils sont copiés.  
  
   
  
## Examples  
 L’exemple suivant montre comment ajouter de nouveaux attributs pour un <xref:System.Web.UI.WebControls.Button> contrôle serveur nommé `myButton` et un <xref:System.Web.UI.WebControls.TextBox> contrôle serveur nommé `myTextBox`. Il ajoute ensuite ces attributs personnalisée <xref:System.Web.UI.HtmlTextWriter> objet chargée d’écrire ces attributs dans un flux de sortie pour chacun de ces contrôles.  
  
 [!code-csharp[AttributeCollection_Item#1](~/samples/snippets/csharp/VS_Snippets_WebNet/AttributeCollection_Item/CS/attributecollection_item.cs.aspx#1)]
 [!code-vb[AttributeCollection_Item#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/AttributeCollection_Item/VB/attributecollection_item.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.AttributeCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Supprime tous les attributs dans l'objet <see cref="T:System.Web.UI.AttributeCollection" /> d'un contrôle serveur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment supprimer par programme tous les attributs d’un contrôle serveur HTML <xref:System.Web.UI.AttributeCollection> objet.  
  
 [!code-aspx-csharp[Classic AttributeCollection.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic AttributeCollection.Clear Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic AttributeCollection.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic AttributeCollection.Clear Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlControl.Attributes" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.Attributes" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.AttributeCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre d'attributs dans <see cref="T:System.Web.UI.AttributeCollection" />.</summary>
        <value>Nombre d’éléments dans la collection</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Web.UI.AttributeCollection.Count%2A> propriété à enregistrer le nombre d’attributs sur un contrôle dans la page conteneur.  
  
 [!code-csharp[AttributeCollection_AttributeCollection#4](~/samples/snippets/csharp/VS_Snippets_WebNet/AttributeCollection_AttributeCollection/CS/attributecollection_attributecollection.cs.aspx#4)]
 [!code-vb[AttributeCollection_AttributeCollection#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/AttributeCollection_AttributeCollection/VB/attributecollection_attributecollection.vb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlControl.Attributes" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.Attributes" />
      </Docs>
    </Member>
    <Member MemberName="CssStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.CssStyleCollection CssStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.CssStyleCollection CssStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.AttributeCollection.CssStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CssStyle As CssStyleCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::CssStyleCollection ^ CssStyle { System::Web::UI::CssStyleCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.CssStyleCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection de styles pour le contrôle serveur ASP.NET auquel l'objet <see cref="T:System.Web.UI.AttributeCollection" /> en cours appartient.</summary>
        <value>Collection qui contient les styles pour le contrôle serveur en cours.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tout style déclaré pour un contrôle de serveur HTML particulier est ajouté à la <xref:System.Web.UI.CssStyleCollection> lors de l’analyse de la page Web ASP.NET contenante l’objet. Vous pouvez utiliser cette propriété pour ajouter, supprimer et parcourir les styles déclarés pour le contrôle serveur.  
  
   
  
## Examples  
 L’exemple suivant montre comment ajouter une valeur de style CSS par programmation à un contrôle de serveur <xref:System.Web.UI.AttributeCollection> objet. Lorsque vous cliquez sur un bouton, la couleur d’arrière-plan d’un <xref:System.Web.UI.WebControls.TextBox> contrôle serveur nommé `TextBox1` est défini sur l’élément sélectionné dans un <xref:System.Web.UI.WebControls.DropDownList> contrôle serveur nommé `DropDownList1`.  
  
 [!code-csharp[AttributeCollection_CssStyle#1](~/samples/snippets/csharp/VS_Snippets_WebNet/AttributeCollection_CssStyle/CS/attributecollection_cssstyle.cs.aspx#1)]
 [!code-vb[AttributeCollection_CssStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/AttributeCollection_CssStyle/VB/attributecollection_cssstyle.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.CssStyleCollection" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.AttributeCollection.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">Instance d'objet à comparer avec cette instance.</param>
        <summary>Détermine si l'instance actuelle de l'objet <see cref="T:System.Web.UI.AttributeCollection" /> est égale à l'objet spécifié.</summary>
        <returns>
          <see langword="true" /> si l'objet contenu dans le paramètre <paramref name="o" /> est égal à l'instance actuelle de <see cref="T:System.Web.UI.AttributeCollection" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour les objets comparés soient égaux, ils doivent respecter les critères suivants :  
  
-   L’objet qui est contenue dans le `o` le paramètre doit être un <xref:System.Web.UI.AttributeCollection> objet.  
  
-   Les deux collections doivent contenir le même nombre d’éléments.  
  
-   La valeur de clé de chaque entrée dans les deux collections doit correspondre.  
  
    > [!NOTE]
    >  Cette méthode est principalement utilisée par des développeurs de contrôles.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.AttributeCollection.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne le code de hachage de cette instance.</summary>
        <returns>Code de hachage d'un entier signé 32 bits.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.AttributeCollection.GetHashCode%2A> pour déterminer le code de hachage pour cette méthode <xref:System.Web.UI.AttributeCollection> objet.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public string this[string key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.AttributeCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ default[System::String ^] { System::String ^ get(System::String ^ key); void set(System::String ^ key, System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Emplacement de l'attribut dans la collection.</param>
        <summary>Obtient ou définit une valeur d'attribut spécifiée pour un contrôle serveur.</summary>
        <value>Valeur de l'attribut.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez ajouter un attribut à ou récupérer une à partir d’un contrôle serveur ASP.NET qui utilise cette propriété.  
  
   
  
## Examples  
 L’exemple suivant montre comment définir un format HTML dynamique `onblur` attribut pour exécuter un ECMAScript (JavaScript) de commande quand un <xref:System.Web.UI.WebControls.TextBox> contrôle serveur Web perd le focus.  
  
 [!code-aspx-csharp[Classic AttributeCollection Example 2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic AttributeCollection Example 2/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic AttributeCollection Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic AttributeCollection Example 2/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlControl.Attributes" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.Attributes" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.AttributeCollection.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ICollection ^ Keys { System::Collections::ICollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection de clés d'accès à tous les attributs contenus dans l'objet <see cref="T:System.Web.UI.AttributeCollection" /> du contrôle serveur.</summary>
        <value>Collection de clés.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété contient toutes les clés qui se trouvent dans le <xref:System.Web.UI.AttributeCollection> d’un contrôle serveur ASP.NET, si vous avez ajouté par programme, avec la <xref:System.Web.UI.AttributeCollection.Add%2A> (méthode), soit de façon déclarative.  
  
   
  
## Examples  
 L’exemple suivant montre comment itérer au sein du <xref:System.Web.UI.AttributeCollection.Keys%2A> propriété de la <xref:System.Web.UI.AttributeCollection> de l’objet pour un <xref:System.Web.UI.HtmlControls.HtmlSelect> contrôle serveur.  
  
 [!code-aspx-csharp[Classic AttributeCollection.Keys Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic AttributeCollection.Keys Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic AttributeCollection.Keys Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic AttributeCollection.Keys Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlControl.Attributes" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.Attributes" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.AttributeCollection.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nom de l'attribut à supprimer.</param>
        <summary>Supprime un attribut de l'objet <see cref="T:System.Web.UI.AttributeCollection" /> d'un contrôle serveur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Web.UI.AttributeCollection> objet ne contient pas un attribut qui a spécifié `key`, la collection demeure inchangée. Aucune exception n'est levée.  
  
   
  
## Examples  
 L’exemple suivant montre comment supprimer par programme un attribut à partir d’un contrôle serveur HTML <xref:System.Web.UI.AttributeCollection> objet.  
  
 [!code-aspx-csharp[Classic AttributeCollection.Remove Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic AttributeCollection.Remove Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic AttributeCollection.Remove Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic AttributeCollection.Remove Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlControl.Attributes" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.Attributes" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.AttributeCollection.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Instance de <see cref="T:System.Web.UI.HtmlTextWriter" /> qui écrit la collection d'attributs dans le flux de sortie actuel.</param>
        <summary>Écrit la collection d'attributs dans le flux de sortie <see cref="T:System.Web.UI.HtmlTextWriter" /> spécifié pour le contrôle auquel appartient la collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment hériter de la <xref:System.Web.UI.WebControls.WebControl> classe pour créer un contrôle personnalisé nommé `AttribRender` qui remplace le <xref:System.Web.UI.AttributeCollection.Render%2A> (méthode). Le deuxième exemple de code montre comment utiliser le contrôle personnalisé dans une page Web ASP.NET.  
  
 L’exemple suivant montre comment créer un contrôle personnalisé nommé `AttribRender` qui remplace le <xref:System.Web.UI.WebControls.WebControl.Render%2A> méthode de la <xref:System.Web.UI.WebControls.WebControl> classe sans appeler le <xref:System.Web.UI.WebControls.WebControl.Render%2A> méthode de la classe de base. Au lieu de cela, `AttribRender` appelle la <xref:System.Web.UI.AttributeCollection.Render%2A> (méthode).  
  
 [!code-csharp[AttributeCollection.Render_Sample1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/AttributeCollection.Render_Sample1/CS/attributecollection_render.cs#1)]
 [!code-vb[AttributeCollection.Render_Sample1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/AttributeCollection.Render_Sample1/VB/attributecollection_render.vb#1)]  
  
 L’exemple suivant montre comment utiliser la `AttribRender` contrôle personnalisé dans une page Web. Il suppose que le fichier de code pour le contrôle personnalisé se trouve dans le dossier App_Code de l’application.  
  
 [!code-aspx-csharp[AttributeCollection.Render_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/AttributeCollection.Render_Sample1/CS/attributecollection_rendercs.aspx#2)]
 [!code-aspx-vb[AttributeCollection.Render_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/AttributeCollection.Render_Sample1/VB/attributecollection_rendervb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlControl.Attributes" />
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.Attributes" />
      </Docs>
    </Member>
  </Members>
</Type>