<Type Name="ScriptResourceAttribute" FullName="System.Web.UI.ScriptResourceAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="94a33330afd8e7e4537338deb4bca5607f4c9a9e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30608353" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ScriptResourceAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ScriptResourceAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ScriptResourceAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ScriptResourceAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ScriptResourceAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Définit une ressource dans un assembly à utiliser à partir d'un fichier de script client. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.UI.ScriptResourceAttribute> classe n’est valide uniquement quand vous l’utilisez dans les déclarations d’assembly. Il permet d’activer une ressource de script incorporée spécifiée dans un assembly. Vous pouvez définir le nom de la bibliothèque de script incorporé, le nom du fichier de ressources pour la bibliothèque de scripts et le nom qui est utilisé dans un fichier de script pour récupérer les valeurs de ressource. Le <xref:System.Web.UI.ScriptManager> classe utilise les propriétés de <xref:System.Web.UI.ScriptResourceAttribute> pour déterminer le nom de ressource correct pour une bibliothèque de scripts. Le <xref:System.Web.UI.ScriptResourceAttribute.TypeName%2A> propriété est utilisée avec une clé de ressource pour spécifier une ressource.  
  
> [!NOTE]
>  La <xref:System.Web.UI.ScriptResourceAttribute> classe peut être utilisée uniquement pour identifier les ressources de texte pour les fichiers JavaScript. Pour associer un fichier image localisé (binaire) à une culture particulière, envisagez de stocker uniquement son URL comme ressource localisée, qui ensuite être résolu et chargé dans le script.  
  
   
  
## Examples  
 L’exemple suivant montre un <xref:System.Web.UI.ScriptResourceAttribute> attribut d’un fichier de script appelé CheckAnswer.js qui utilise des ressources à partir de fichiers de ressources VerificationResources. Le nom `Answer` est utilisé pour faire référence à ces ressources.  
  
 [!code-csharp[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/AssemblyInfo.cs#3)]
 [!code-vb[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/vb/AssemblyInfo.vb#3)]  
  
 L’exemple suivant montre comment utiliser les ressources dans le script client. Les clés de ressource (`Correct` et `Incorrect`) avec le préfixe `Answer` pour identifier la définition de ressource de script qui contient les valeurs.  
  
 [!code-javascript[LocalizingClientResourcesWalkthrough#1](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/CheckAnswer.js#1)]
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.ScriptResourceAttribute" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptResourceAttribute (string scriptName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string scriptName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptResourceAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (scriptName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptResourceAttribute(System::String ^ scriptName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scriptName">Le nom de la bibliothèque de scripts.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.ScriptResourceAttribute" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptResourceAttribute (string scriptName, string stringResourceName, string stringResourceClientTypeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string scriptName, string stringResourceName, string stringResourceClientTypeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptResourceAttribute.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (scriptName As String, stringResourceName As String, stringResourceClientTypeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptResourceAttribute(System::String ^ scriptName, System::String ^ stringResourceName, System::String ^ stringResourceClientTypeName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
        <Parameter Name="stringResourceName" Type="System.String" />
        <Parameter Name="stringResourceClientTypeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scriptName">Le nom de la bibliothèque de scripts.</param>
        <param name="stringResourceName">Le nom du fichier de ressources pour la bibliothèque de scripts.</param>
        <param name="stringResourceClientTypeName">Le nom du type à créer pour les valeurs dans le fichier de ressources.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.ScriptResourceAttribute" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.ScriptResourceAttribute.%23ctor%2A> méthode est généralement appelée à l’aide de la <xref:System.Web.UI.ScriptResourceAttribute> attribut sous la forme d’un attribut d’assembly dans le fichier AssemblyInfo de l’application.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="scriptName" />, <paramref name="scriptResourceName" />, ou <paramref name="typeName" /> est <see langword="null" /> ou est une chaîne vide ("").</exception>
      </Docs>
    </Member>
    <Member MemberName="ScriptName">
      <MemberSignature Language="C#" Value="public string ScriptName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScriptName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptResourceAttribute.ScriptName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScriptName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ScriptName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom de la bibliothèque de scripts.</summary>
        <value>Le nom de la bibliothèque de scripts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre un <xref:System.Web.UI.ScriptResourceAttribute> attribut d’un fichier de script appelé CheckAnswer.js qui utilise des ressources à partir de fichiers de ressources VerificationResources. Le nom `Answer` est utilisé pour faire référence à ces ressources. Dans cet exemple, le <xref:System.Web.UI.ScriptResourceAttribute.ScriptName%2A> propriété retourne « LocalizingResources.CheckAnswer.js ».  
  
 [!code-csharp[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/AssemblyInfo.cs#3)]
 [!code-vb[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/vb/AssemblyInfo.vb#3)]  
  
 L’exemple suivant montre comment utiliser les ressources dans le script client. Les clés de ressource (`Correct` et `Incorrect`) avec le préfixe `Answer` pour identifier la définition de ressource de script qui contient les valeurs.  
  
 [!code-javascript[LocalizingClientResourcesWalkthrough#1](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/CheckAnswer.js#1)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScriptResourceName">
      <MemberSignature Language="C#" Value="public string ScriptResourceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScriptResourceName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptResourceAttribute.ScriptResourceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScriptResourceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ScriptResourceName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This property is obsolete. Use StringResourceName instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom du fichier de ressources pour la bibliothèque de scripts.</summary>
        <value>Le nom du fichier de ressources pour la bibliothèque de scripts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre un <xref:System.Web.UI.ScriptResourceAttribute> attribut d’un fichier de script appelé CheckAnswer.js qui utilise des ressources à partir de fichiers de ressources VerificationResources. Le nom `Answer` est utilisé pour faire référence à ces ressources. Dans cet exemple, le <xref:System.Web.UI.ScriptResourceAttribute.ScriptResourceName%2A> propriété retourne « LocalizingResources.VerificationResources ». L’extension de nom de fichier n’est pas incluse lorsque vous définissez la <xref:System.Web.UI.ScriptResourceAttribute.ScriptResourceName%2A>.  
  
 [!code-csharp[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/AssemblyInfo.cs#3)]
 [!code-vb[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/vb/AssemblyInfo.vb#3)]  
  
 L’exemple suivant montre comment utiliser les ressources dans le script client. Les clés de ressource (`Correct` et `Incorrect`) avec le préfixe `Answer` pour identifier la définition de ressource de script qui contient les valeurs.  
  
 [!code-javascript[LocalizingClientResourcesWalkthrough#1](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/CheckAnswer.js#1)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringResourceClientTypeName">
      <MemberSignature Language="C#" Value="public string StringResourceClientTypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StringResourceClientTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptResourceAttribute.StringResourceClientTypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StringResourceClientTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StringResourceClientTypeName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom du type client à créer pour les valeurs dans le fichier de ressources.</summary>
        <value>Nom du type client.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringResourceName">
      <MemberSignature Language="C#" Value="public string StringResourceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StringResourceName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptResourceAttribute.StringResourceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StringResourceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StringResourceName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom du fichier de ressources pour la bibliothèque de scripts.</summary>
        <value>Nom du fichier de ressources.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptResourceAttribute.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This property is obsolete. Use StringResourceClientTypeName instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom qui est utilisé lors de la récupération des valeurs dans le fichier de ressources.</summary>
        <value>Le nom qui est utilisé dans le script client lors de la récupération des valeurs dans le fichier de ressources.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.ScriptResourceAttribute.TypeName%2A> propriété contient la valeur qui est utilisée pour récupérer des ressources localisées dans le script client. Le script client doit inclure le <xref:System.Web.UI.ScriptResourceAttribute.TypeName%2A> valeur et le nom de clé pour la ressource doit être localisée.  
  
   
  
## Examples  
 L’exemple suivant montre un <xref:System.Web.UI.ScriptResourceAttribute> attribut d’un fichier de script appelé CheckAnswer.js qui utilise des ressources à partir de fichiers de ressources VerificationResources. Le nom `Answer` est utilisé pour faire référence à ces ressources. Dans cet exemple, le <xref:System.Web.UI.ScriptResourceAttribute.TypeName%2A> propriété retourne « Réponse ».  
  
 [!code-csharp[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/AssemblyInfo.cs#3)]
 [!code-vb[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/vb/AssemblyInfo.vb#3)]  
  
 L’exemple suivant montre comment utiliser les ressources dans le script client. Les clés de ressource (`Correct` et `Incorrect`) avec le préfixe `Answer` pour identifier la définition de ressource de script qui contient les valeurs.  
  
 [!code-javascript[LocalizingClientResourcesWalkthrough#1](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/CheckAnswer.js#1)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>