<Type Name="ControlCachePolicy" FullName="System.Web.UI.ControlCachePolicy">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="41fc28c7ea28ef70f02053f7bbcd612ecbcc89d9" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37531988" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ControlCachePolicy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ControlCachePolicy extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ControlCachePolicy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ControlCachePolicy" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlCachePolicy sealed" />
  <TypeSignature Language="F#" Value="type ControlCachePolicy = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit l'accès par programme aux paramètres de cache de sortie d'un contrôle utilisateur ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.ControlCachePolicy> classe est utilisée par les développeurs dans les scénarios de contrôle utilisateur par programme pour spécifier les paramètres de mise en cache de sortie pour les contrôles utilisateur (fichiers .ascx). ASP.NET incorpore des contrôles utilisateur dans un <xref:System.Web.UI.BasePartialCachingControl> instance. Le <xref:System.Web.UI.BasePartialCachingControl> classe représente un contrôle utilisateur qui possède une mise en cache de sortie. Lorsque vous accédez à la <xref:System.Web.UI.BasePartialCachingControl.CachePolicy%2A?displayProperty=nameWithType> propriété d’un <xref:System.Web.UI.PartialCachingControl> contrôle, vous recevrez toujours valide <xref:System.Web.UI.ControlCachePolicy> objet. Toutefois, si vous accédez à la <xref:System.Web.UI.UserControl.CachePolicy%2A?displayProperty=nameWithType> propriété d’un <xref:System.Web.UI.UserControl> contrôle, vous recevez un valide <xref:System.Web.UI.ControlCachePolicy> objet uniquement si le contrôle utilisateur est déjà encapsulé par un <xref:System.Web.UI.BasePartialCachingControl> contrôle. S’il n’est pas encapsulé, le <xref:System.Web.UI.ControlCachePolicy> objet retourné par la propriété lèvera des exceptions lorsque vous tentez de manipuler parce qu’il n’a pas associé à un <xref:System.Web.UI.BasePartialCachingControl>. Pour déterminer si un <xref:System.Web.UI.UserControl> instance prend en charge la mise en cache sans générer d’exception, inspecter la <xref:System.Web.UI.ControlCachePolicy.SupportsCaching%2A> propriété.  
  
 À l’aide de la <xref:System.Web.UI.ControlCachePolicy> classe est de plusieurs façons, vous pouvez activer la mise en cache de sortie. La liste suivante décrit les méthodes que vous pouvez utiliser pour activer la mise en cache de sortie :  
  
-   Utilisez la directive pour activer la mise en cache de sortie dans les scénarios déclaratifs.  
  
-   Utilisez le <xref:System.Web.UI.PartialCachingAttribute> attribut pour activer la mise en cache pour un contrôle utilisateur dans un fichier code-behind.  
  
-   Utilisez le <xref:System.Web.UI.ControlCachePolicy> classe pour spécifier les paramètres de cache dans les scénarios de programmation dans lequel vous travaillez avec <xref:System.Web.UI.BasePartialCachingControl> instances qui ont été activées par cache à l’aide d’une des méthodes précédentes et chargées dynamiquement à l’aide de la <xref:System.Web.UI.TemplateControl.LoadControl%2A?displayProperty=nameWithType> (méthode). Un <xref:System.Web.UI.ControlCachePolicy> instance peut être manipulée avec succès uniquement entre les `Init` et `PreRender` stades du cycle de vie du contrôle. Si vous modifiez un <xref:System.Web.UI.ControlCachePolicy> objet après la `PreRender` phase, ASP.NET lève une exception, car toutes les modifications effectuées après le rendu du contrôle n’affectent pas réellement des paramètres de cache (un contrôle est mis en cache pendant la `Render` étape). Enfin, une instance de contrôle utilisateur (et par conséquent son <xref:System.Web.UI.ControlCachePolicy> objet) est disponible pour la manipulation par programmation uniquement lorsqu’il est réellement restitué.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment un contrôle utilisateur peut être chargé dynamiquement et manipulé par programme au moment de l’exécution. Le <xref:System.Web.UI.PartialCachingAttribute> attribut est appliqué à un contrôle utilisateur nommé `SimpleControl`, ce qui signifie que le contrôle utilisateur est encapsulé par un <xref:System.Web.UI.PartialCachingControl> contrôle au moment de l’exécution. Le `SimpleControl` les paramètres de mise en cache de l’objet peuvent être par programmation manipulées via son associé <xref:System.Web.UI.ControlCachePolicy> objet, qui est disponible via une référence à la <xref:System.Web.UI.PartialCachingControl> qui l’encapsule. Dans cet exemple, le <xref:System.Web.UI.ControlCachePolicy.Duration%2A> propriété est examinée pendant l’initialisation de la page et modifiés à l’aide de la <xref:System.Web.UI.ControlCachePolicy.SetSlidingExpiration%2A> et <xref:System.Web.UI.ControlCachePolicy.SetExpires%2A> méthodes si certaines conditions sont remplies.  
  
 [!code-aspx-csharp[System.Web.UI.ControlCachePolicy_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/CS/Default2.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ControlCachePolicy_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/VB/Default2.aspx#1)]  
  
 L’exemple de code suivant montre comment utiliser le `SimpleControl` contrôle utilisateur à partir d’une page Web Forms. Pour exécuter cet exemple, assurez-vous que le fichier de contrôle utilisateur (.ascx), son fichier code-behind (.cs ou .vb) et la page Web Forms qui héberge le contrôle utilisateur (.aspx) sont dans le même répertoire.  
  
 [!code-csharp[System.Web.UI.ControlCachePolicy_2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/CS/SimpleControl.ascx.cs#2)]
 [!code-vb[System.Web.UI.ControlCachePolicy_2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/VB/SimpleControl.ascx.vb#2)]  
  
 [!code-aspx-csharp[System.Web.UI.ControlCachePolicy_2#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/CS/SimpleControl.ascx#3)]
 [!code-aspx-vb[System.Web.UI.ControlCachePolicy_2#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/VB/SimpleControl.ascx#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Web.UI.BasePartialCachingControl.CachePolicy" />
    <altmember cref="P:System.Web.UI.UserControl.CachePolicy" />
  </Docs>
  <Members>
    <Member MemberName="Cached">
      <MemberSignature Language="C#" Value="public bool Cached { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Cached" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCachePolicy.Cached" />
      <MemberSignature Language="VB.NET" Value="Public Property Cached As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Cached { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Cached : bool with get, set" Usage="System.Web.UI.ControlCachePolicy.Cached" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si la mise en cache de fragment est activée pour le contrôle utilisateur.</summary>
        <value>
          <see langword="true" /> si la sortie du contrôle utilisateur est mise en cache ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Web.HttpException">Le contrôle utilisateur n'est pas associé à un <see cref="T:System.Web.UI.BasePartialCachingControl" /> et ne peut pas être mis en cache.  
  
\- ou - 
La propriété <see cref="P:System.Web.UI.ControlCachePolicy.Cached" /> est définie en dehors des étapes d'initialisation et de rendu des étapes du contrôle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dependency">
      <MemberSignature Language="C#" Value="public System.Web.Caching.CacheDependency Dependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Caching.CacheDependency Dependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCachePolicy.Dependency" />
      <MemberSignature Language="VB.NET" Value="Public Property Dependency As CacheDependency" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Caching::CacheDependency ^ Dependency { System::Web::Caching::CacheDependency ^ get(); void set(System::Web::Caching::CacheDependency ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Dependency : System.Web.Caching.CacheDependency with get, set" Usage="System.Web.UI.ControlCachePolicy.Dependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Caching.CacheDependency</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une instance de la classe <see cref="T:System.Web.Caching.CacheDependency" /> associée à la sortie du contrôle utilisateur mis en cache.</summary>
        <value>
          <see cref="T:System.Web.Caching.CacheDependency" /> associé au contrôle. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.ControlCachePolicy.Dependency%2A> propriété délègue à la <xref:System.Web.UI.BasePartialCachingControl.Dependency%2A> propriété de la <xref:System.Web.UI.BasePartialCachingControl> contrôle qui encapsule le contrôle utilisateur. Lorsque le <xref:System.Web.Caching.CacheDependency> instance est invalidée, le contrôle utilisateur est supprimé du cache.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Le contrôle utilisateur n'est pas associé à un <see cref="T:System.Web.UI.BasePartialCachingControl" /> et ne peut pas être mis en cache.  
  
\- ou - 
La propriété <see cref="P:System.Web.UI.ControlCachePolicy.Dependency" /> est définie en dehors des étapes d'initialisation et de rendu des étapes du contrôle.</exception>
        <altmember cref="T:System.Web.Caching.CacheDependency" />
        <altmember cref="P:System.Web.UI.BasePartialCachingControl.Dependency" />
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public TimeSpan Duration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Duration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCachePolicy.Duration" />
      <MemberSignature Language="VB.NET" Value="Public Property Duration As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Duration { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Duration : TimeSpan with get, set" Usage="System.Web.UI.ControlCachePolicy.Duration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la durée de maintien des éléments conservés dans la cache de sortie.</summary>
        <value>
          <see cref="T:System.TimeSpan" /> représentant la durée de maintien d'un contrôle utilisateur dans la cache de sortie. La valeur par défaut est <see cref="F:System.TimeSpan.Zero" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si une stratégie d’expiration absolue est définie à l’aide de la <xref:System.Web.UI.ControlCachePolicy.SetSlidingExpiration%2A> (méthode), le <xref:System.Web.UI.ControlCachePolicy.Duration%2A> propriété retourne la quantité de temps restant jusqu'à l’expiration de l’entrée du cache.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment un contrôle utilisateur peut être chargé dynamiquement et manipulé par programme au moment de l’exécution. Le <xref:System.Web.UI.PartialCachingAttribute> attribut est appliqué à un contrôle utilisateur nommé `SimpleControl`, ce qui signifie qu’il est encapsulé par un <xref:System.Web.UI.PartialCachingControl> contrôle au moment de l’exécution. Le `SimpleControl` les paramètres de mise en cache de l’objet peuvent être par programmation manipulées via son associé <xref:System.Web.UI.ControlCachePolicy> objet, qui est disponible via une référence à la <xref:System.Web.UI.PartialCachingControl> qui l’encapsule. Dans cet exemple, le <xref:System.Web.UI.ControlCachePolicy.Duration%2A> propriété est vérifiée pendant l’initialisation de la page et expiration du cache est modifié si certaines conditions sont remplies. Cet exemple fait partie d’un exemple plus complet fourni pour la <xref:System.Web.UI.ControlCachePolicy> classe.  
  
 [!code-aspx-csharp[System.Web.UI.ControlCachePolicy_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/CS/Default2.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ControlCachePolicy_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/VB/Default2.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Le contrôle utilisateur n'est pas associé à un <see cref="T:System.Web.UI.BasePartialCachingControl" /> et ne peut pas être mis en cache.  
  
\- ou - 
La propriété <see cref="P:System.Web.UI.ControlCachePolicy.Duration" /> est définie en dehors des étapes d'initialisation et de rendu des étapes du contrôle.</exception>
        <altmember cref="M:System.Web.UI.ControlCachePolicy.SetExpires(System.DateTime)" />
        <altmember cref="M:System.Web.UI.ControlCachePolicy.SetSlidingExpiration(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="ProviderName">
      <MemberSignature Language="C#" Value="public string ProviderName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCachePolicy.ProviderName" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderName : string with get, set" Usage="System.Web.UI.ControlCachePolicy.ProviderName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom du fournisseur de caches de sortie associé à une instance de contrôle.</summary>
        <value>Nom du fournisseur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.ControlCachePolicy.ProviderName%2A> propriété vous permet de spécifier le fournisseur de cache de sortie actuel qui est associé à un contrôle, à l’aide de la <xref:System.Web.UI.ControlCachePolicy> instance. Cette propriété peut être définie qu’avant la <xref:System.Web.UI.Control.PreRender> événement se produit dans le cycle de vie de contrôle.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">Le nom du fournisseur est introuvable.</exception>
        <exception cref="T:System.Web.HttpException">Une tentative de définition de la propriété <see cref="P:System.Web.UI.ControlCachePolicy.ProviderName" /> a eu lieu pendant ou après l'événement <see cref="E:System.Web.UI.Control.PreRender" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetExpires">
      <MemberSignature Language="C#" Value="public void SetExpires (DateTime expirationTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetExpires(valuetype System.DateTime expirationTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCachePolicy.SetExpires(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetExpires (expirationTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetExpires(DateTime expirationTime);" />
      <MemberSignature Language="F#" Value="member this.SetExpires : DateTime -&gt; unit" Usage="controlCachePolicy.SetExpires expirationTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expirationTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="expirationTime">
          <see cref="T:System.DateTime" /> au-delà duquel l'entrée mise en cache expire.</param>
        <summary>Commande au contrôle <see cref="T:System.Web.UI.BasePartialCachingControl" /> d'encapsuler le contrôle utilisateur pour que l'entrée de cache expire à la date et à l'heure prévue.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utiliser le <xref:System.Web.UI.ControlCachePolicy.SetExpires%2A> et <xref:System.Web.UI.ControlCachePolicy.SetSlidingExpiration%2A> méthodes (en passant `true`) pour indiquer à le <xref:System.Web.UI.BasePartialCachingControl> contrôle qui encapsule le contrôle utilisateur pour utiliser une expiration décalée mise en cache de la stratégie au lieu d’une stratégie d’expiration absolue. Utilisez le <xref:System.Web.UI.ControlCachePolicy.SetExpires%2A> (méthode) et le <xref:System.Web.UI.ControlCachePolicy.SetSlidingExpiration%2A> (méthode) (en passant `false`) pour spécifier une stratégie d’expiration absolue.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment un contrôle utilisateur peut être chargé dynamiquement et manipulé par programme au moment de l’exécution. Le <xref:System.Web.UI.PartialCachingAttribute> attribut est appliqué à un contrôle utilisateur nommé `SimpleControl`, ce qui signifie que le contrôle utilisateur est encapsulé par un <xref:System.Web.UI.PartialCachingControl> contrôle au moment de l’exécution. Le `SimpleControl` les paramètres de mise en cache de l’objet peuvent être par programmation manipulées via son associé <xref:System.Web.UI.ControlCachePolicy> objet, qui est disponible via une référence à la <xref:System.Web.UI.PartialCachingControl> qui l’encapsule. Dans cet exemple, le <xref:System.Web.UI.ControlCachePolicy.Duration%2A> propriété est examinée pendant l’initialisation de la page et modifiés à l’aide de la <xref:System.Web.UI.ControlCachePolicy.SetSlidingExpiration%2A> et <xref:System.Web.UI.ControlCachePolicy.SetExpires%2A> méthodes si certaines conditions sont remplies. Cet exemple fait partie d’un exemple plus complet fourni pour la <xref:System.Web.UI.ControlCachePolicy> classe.  
  
 [!code-aspx-csharp[System.Web.UI.ControlCachePolicy_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/CS/Default2.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ControlCachePolicy_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/VB/Default2.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Le contrôle utilisateur n'est pas associé à un <see cref="T:System.Web.UI.BasePartialCachingControl" /> et ne peut pas être mis en cache.</exception>
        <altmember cref="P:System.Web.UI.ControlCachePolicy.Duration" />
        <altmember cref="M:System.Web.UI.ControlCachePolicy.SetSlidingExpiration(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetSlidingExpiration">
      <MemberSignature Language="C#" Value="public void SetSlidingExpiration (bool useSlidingExpiration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSlidingExpiration(bool useSlidingExpiration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCachePolicy.SetSlidingExpiration(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSlidingExpiration (useSlidingExpiration As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSlidingExpiration(bool useSlidingExpiration);" />
      <MemberSignature Language="F#" Value="member this.SetSlidingExpiration : bool -&gt; unit" Usage="controlCachePolicy.SetSlidingExpiration useSlidingExpiration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useSlidingExpiration" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useSlidingExpiration">
          <see langword="true" /> pour utiliser l'expiration de cache décalée au lieu de l'expiration absolue ; sinon, <see langword="false" />.</param>
        <summary>Commande au contrôle <see cref="T:System.Web.UI.BasePartialCachingControl" /> qui encapsule le contrôle utilisateur d'indiquer à l'entrée de cache du contrôle utilisateur d'utiliser l'expiration décalée ou absolue.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utiliser le <xref:System.Web.UI.ControlCachePolicy.SetExpires%2A> et <xref:System.Web.UI.ControlCachePolicy.SetSlidingExpiration%2A> méthodes (en passant `true`) pour indiquer à le <xref:System.Web.UI.BasePartialCachingControl> contrôle qui encapsule le contrôle utilisateur pour utiliser une expiration décalée mise en cache de la stratégie au lieu d’une stratégie d’expiration absolue. Utilisez le <xref:System.Web.UI.ControlCachePolicy.SetExpires%2A> (méthode) et le <xref:System.Web.UI.ControlCachePolicy.SetSlidingExpiration%2A> (méthode) (en passant `false`) pour spécifier une stratégie d’expiration absolue.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment un contrôle utilisateur peut être chargé dynamiquement et manipulé par programme au moment de l’exécution. Un contrôle utilisateur nommé `SimpleControl` est décorée avec un <xref:System.Web.UI.PartialCachingAttribute> d’attribut, ce qui signifie qu’il est encapsulé par un <xref:System.Web.UI.PartialCachingControl> contrôle au moment de l’exécution. Le `SimpleControl` les paramètres de mise en cache de l’objet peuvent être par programmation manipulées via son associé <xref:System.Web.UI.ControlCachePolicy> objet, qui est disponible via une référence à la <xref:System.Web.UI.PartialCachingControl> qui l’encapsule. Dans cet exemple, les paramètres de mise en cache sont examinés pendant l’initialisation de la page et modifiées si certaines conditions sont remplies. Cet exemple fait partie d’un exemple plus complet fourni pour la <xref:System.Web.UI.ControlCachePolicy> classe.  
  
 [!code-aspx-csharp[System.Web.UI.ControlCachePolicy_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/CS/Default2.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ControlCachePolicy_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCachePolicy_2/VB/Default2.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Le contrôle utilisateur n'est pas associé à un <see cref="T:System.Web.UI.BasePartialCachingControl" /> et ne peut pas être mis en cache.</exception>
        <altmember cref="P:System.Web.UI.ControlCachePolicy.Duration" />
        <altmember cref="M:System.Web.UI.ControlCachePolicy.SetExpires(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="SetVaryByCustom">
      <MemberSignature Language="C#" Value="public void SetVaryByCustom (string varyByCustom);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetVaryByCustom(string varyByCustom) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCachePolicy.SetVaryByCustom(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetVaryByCustom (varyByCustom As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetVaryByCustom(System::String ^ varyByCustom);" />
      <MemberSignature Language="F#" Value="member this.SetVaryByCustom : string -&gt; unit" Usage="controlCachePolicy.SetVaryByCustom varyByCustom" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="varyByCustom" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="varyByCustom">Liste de chaînes personnalisées.</param>
        <summary>Définit la liste des chaînes personnalisées que le cache de sortie utilisera pour faire varier le contrôle utilisateur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous passez « browser » comme le `varyByCustom` paramètre, le contrôle utilisateur variera selon le type de navigateur et le numéro de version principale. Si une autre chaîne personnalisée est entrée, vous devez substituer la <xref:System.Web.HttpApplication.GetVaryByCustomString%2A> méthode dans le fichier Global.asax de votre application.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Le contrôle utilisateur n'est pas associé à un <see cref="T:System.Web.UI.BasePartialCachingControl" /> et ne peut pas être mis en cache.</exception>
        <altmember cref="P:System.Web.UI.PartialCachingAttribute.VaryByCustom" />
      </Docs>
    </Member>
    <Member MemberName="SupportsCaching">
      <MemberSignature Language="C#" Value="public bool SupportsCaching { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCachePolicy.SupportsCaching" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsCaching { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsCaching : bool" Usage="System.Web.UI.ControlCachePolicy.SupportsCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si le contrôle utilisateur prend en charge la mise en cache.</summary>
        <value>
          <see langword="true" /> si le contrôle utilisateur prend en charge la mise en cache ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un contrôle utilisateur prend en charge la mise en cache si elle est associée une <xref:System.Web.UI.BasePartialCachingControl> instance qui signale qu’une directive a été analysée par l’analyseur ASP.NET ou le contrôle utilisateur a été décoré avec un <xref:System.Web.UI.PartialCachingAttribute> attribut.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.PartialCachingAttribute" />
        <altmember cref="T:System.Web.UI.BasePartialCachingControl" />
      </Docs>
    </Member>
    <Member MemberName="VaryByControl">
      <MemberSignature Language="C#" Value="public string VaryByControl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string VaryByControl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCachePolicy.VaryByControl" />
      <MemberSignature Language="VB.NET" Value="Public Property VaryByControl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ VaryByControl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.VaryByControl : string with get, set" Usage="System.Web.UI.ControlCachePolicy.VaryByControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une liste d'identificateurs de contrôle qui fait varier la sortie mise en cache.</summary>
        <value>Liste de chaînes séparées par des points-virgules, utilisées pour faire varier le cache de sortie. Ces chaînes représentent les valeurs de propriété <see cref="P:System.Web.UI.Control.ID" /> des contrôles serveur ASP.NET déclarés dans le contrôle utilisateur.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Web.HttpException">Le contrôle utilisateur n'est pas associé à un <see cref="T:System.Web.UI.BasePartialCachingControl" /> et ne peut pas être mis en cache.  
  
\- ou - 
La propriété <see cref="P:System.Web.UI.ControlCachePolicy.VaryByControl" /> est définie en dehors des étapes d'initialisation et de rendu des étapes du contrôle.</exception>
        <altmember cref="P:System.Web.UI.PartialCachingAttribute.VaryByControls" />
      </Docs>
    </Member>
    <Member MemberName="VaryByParams">
      <MemberSignature Language="C#" Value="public System.Web.HttpCacheVaryByParams VaryByParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpCacheVaryByParams VaryByParams" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCachePolicy.VaryByParams" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VaryByParams As HttpCacheVaryByParams" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpCacheVaryByParams ^ VaryByParams { System::Web::HttpCacheVaryByParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.VaryByParams : System.Web.HttpCacheVaryByParams" Usage="System.Web.UI.ControlCachePolicy.VaryByParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCacheVaryByParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une liste de noms de paramètres  <see langword="GET" /> ou <see langword="POST" /> pour faire varier la sortie mise en cache.</summary>
        <value>Liste des chaînes utilisées pour faire varier le cache de sortie, séparées par des points-virgules.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par défaut, ces chaînes correspondent à une valeur de chaîne de requête envoyée avec la méthode GET ou à un paramètre envoyé à l’aide de la méthode POST. Lorsque le <xref:System.Web.UI.ControlCachePolicy.VaryByParams%2A> propriété est définie sur plusieurs paramètres, le cache de sortie contient une version différente du document demandé pour chaque paramètre spécifié. Les valeurs possibles sont notamment "none", "*" et toute autre chaîne de requête ou nom de paramètre POST valide.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Le contrôle utilisateur n'est pas associé à un <see cref="T:System.Web.UI.BasePartialCachingControl" /> et ne peut pas être mis en cache.</exception>
        <altmember cref="P:System.Web.UI.PartialCachingAttribute.VaryByParams" />
      </Docs>
    </Member>
  </Members>
</Type>