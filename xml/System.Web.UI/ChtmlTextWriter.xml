<Type Name="ChtmlTextWriter" FullName="System.Web.UI.ChtmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="34742187faa27ac641e9f0767654cb7c439dd1fc" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52249073" /></Metadata><TypeSignature Language="C#" Value="public class ChtmlTextWriter : System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChtmlTextWriter extends System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ChtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class ChtmlTextWriter&#xA;Inherits Html32TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChtmlTextWriter : System::Web::UI::Html32TextWriter" />
  <TypeSignature Language="F#" Value="type ChtmlTextWriter = class&#xA;    inherit Html32TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Html32TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Écrit une série de caractères et du texte spécifiques au langage cHTML dans le flux de sortie d'un contrôle serveur ASP.NET. La classe <see cref="T:System.Web.UI.ChtmlTextWriter" /> fournit des capacités de mise en forme utilisées par les contrôles serveur ASP.NET lors du rendu d'un contenu cHTML sur des clients.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Compact HTML ou cHTML, est un sous-ensemble de HTML 2.0, HTML 3.2 et HTML 4.0 et est conçu pour restituer sur des appareils avec une mémoire limitée et la puissance du processeur, ainsi que de petits écrans de visualisation, limités de mise en forme des fonctionnalités et un nombre limité d’options de saisie (par exemple, un téléphone portable pavé tactile). Par conséquent, cHTML ne prend pas en charge les éléments suivants :  
  
-   Images JPEG.  
  
-   Tables.  
  
-   Les images interactives.  
  
-   Plusieurs polices de caractères et des styles.  
  
-   Couleurs d’arrière-plan et des images.  
  
-   Cadres.  
  
-   Feuilles de style.  
  
 Le <xref:System.Web.UI.ChtmlTextWriter> classe dérive de la <xref:System.Web.UI.Html32TextWriter> classe et une grande partie de ses fonctionnalités sont fournies par le <xref:System.Web.UI.Html32TextWriter> et la classe de base pour tous les writers de texte de balisage, qui est la <xref:System.Web.UI.HtmlTextWriter> classe.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer une classe nommée `CustomChtmlTextWriter` qui est dérivée de la <xref:System.Web.UI.ChtmlTextWriter> classe. Il crée deux constructeurs et substitue la <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> méthode pour empêcher le `bgcolor` attribut de style d’être écrites dans le flux de sortie de la <xref:System.Web.UI.ChtmlTextWriter> objet. Il crée également une classe nommée `ChtmlCustomPageAdapter` qui définit une méthode, `CreateCustomChtmlTextWriter`, ce qui crée et retourne une instance de la `CustomChtmlTextWriter` classe. Le `CustomChtmlTextWriter` restitue ensuite le contenu cHTML d’une page sur des appareils avec des navigateurs qui utilisent le balisage cHTML.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.ChtmlTextWriter" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> qui restitue le contenu du balisage.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.ChtmlTextWriter" /> qui utilise la constante <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> pour mettre des lignes en retrait.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.ChtmlTextWriter> classe possède deux constructeurs, qui sont standard pour toutes les classes qui dérivent directement ou indirectement de la <xref:System.Web.UI.HtmlTextWriter> classe.  
  
 Le <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A> constructeur qui prend une instance de la <xref:System.IO.TextWriter> classe en tant que paramètre, appelle le deuxième constructeur et lui transmet deux valeurs de paramètre :  
  
-   <xref:System.IO.TextWriter>.  
  
-   La valeur de chaîne qui est spécifiée dans le <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> champ qui définit l’espacement de tabulation utilisé par le writer de texte XHTML.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer une classe nommée `ChtmlCustomPageAdapter` et définit une méthode, `CreateCustomChtmlTextWriter`, ce qui crée et retourne une instance de la `CustomChtmlTextWriter` classe. Le `CustomChtmlTextWriter` restitue alors le contenu cHTML de pages pour appareils avec des navigateurs qui utilisent le balisage cHTML.  
  
 Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Web.UI.ChtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> qui restitue le contenu du balisage.</param>
        <param name="tabString">Nombre d'espaces définis dans le <see cref="P:System.Web.UI.HtmlTextWriter.Indent" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.ChtmlTextWriter" /> avec la mise en retrait de ligne spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A> constructeur qui accepte les deux une instance de la <xref:System.IO.TextWriter> classe et une chaîne en tant que paramètres, appelle le <xref:System.Web.UI.Html32TextWriter> constructeur qui accepte les mêmes paramètres lorsqu’il crée une instance de la <xref:System.Web.UI.ChtmlTextWriter> classe.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer une classe personnalisée nommée `CustomChtmlTextWriter` qui est dérivée de la <xref:System.Web.UI.ChtmlTextWriter> classe. Il crée deux constructeurs que vous pouvez utiliser pour créer une instance de la classe personnalisée avec le même modèle que toutes les classes qui dérivent directement ou indirectement, de la <xref:System.Web.UI.HtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Élément cHTML auquel ajouter l'attribut.</param>
        <param name="attributeName">L'attribut à ajouter au <paramref name="elementName" />.</param>
        <summary>Ajoute un attribut à un élément cHTML de l'objet <see cref="T:System.Web.UI.ChtmlTextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> méthode ajoute un attribut à un élément cHTML. L’attribut reconnu est stocké dans les attributs reconnus <xref:System.Collections.Hashtable> collection de la <xref:System.Web.UI.ChtmlTextWriter> objet qui est référencé par le <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="GlobalSuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable GlobalSuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable GlobalSuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property GlobalSuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ GlobalSuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalSuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.Collections.Hashtable" /> d'attributs globalement supprimés qui ne peut pas être restitué sur des éléments cHTML.</summary>
        <value><see cref="T:System.Collections.Hashtable" /> d'attributs cHTML globalement supprimés.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La liste suivante affiche les attributs globalement supprimés qui sont définis lorsqu’une nouvelle instance de la <xref:System.Web.UI.ChtmlTextWriter> classe est créée.  
  
|||  
|-|-|  
|`onclick`|`onmousemove`|  
|`ondblclick`|`onmouseout`|  
|`onmousedown`|`onkeypress`|  
|`onmouseup`|`onkeydown`|  
|`onmouseover`|`onkeyup`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="chtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Attribut cHTML à rendre.</param>
        <param name="value">Valeur à assigner à <paramref name="name" />.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> associé à <paramref name="name" />.</param>
        <summary>Détermine si l'attribut cHTML spécifié et sa valeur sont rendus sur la page qui a effectué la demande. Vous pouvez substituer la méthode <see cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> dans les classes qui dérivent de la classe <see cref="T:System.Web.UI.ChtmlTextWriter" /> pour éliminer par filtrage les attributs que vous ne souhaitez pas restituer sur des appareils qui prennent en charge cHTML.</summary>
        <returns><see langword="true" /> pour écrire l'attribut et sa valeur dans le flux de sortie <see cref="T:System.Web.UI.ChtmlTextWriter" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par défaut, le <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> méthode empêche des attributs globalement supprimés qui sont répertoriés dans le <xref:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes%2A> propriété et spécifiques à un élément des attributs supprimés qui sont répertoriés dans le <xref:System.Web.UI.ChtmlTextWriter.SuppressedAttributes%2A> propriété d’être écrites dans le flux de sortie. Vous pouvez remplacer le comportement de la <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> méthode dans les classes dérivées de la <xref:System.Web.UI.ChtmlTextWriter> classe.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser une classe personnalisée qui remplace le <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> méthode pour empêcher le `bgcolor` attribut d’être écrit dans le flux de sortie cHTML. Il appelle ensuite la fonctionnalité fournie par la base de <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> méthode à partir de la <xref:System.Web.UI.ChtmlTextWriter> classe pour vous assurer que son comportement par défaut est utilisé.  
  
 Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Web.UI.ChtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="chtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Chaîne contenant le nom de l'attribut de style à restituer.</param>
        <param name="value">Chaîne contenant la valeur assignée à <paramref name="name" />.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterStyle" /> associé à <paramref name="name" />.</param>
        <summary>Détermine si l'attribut de style de balisage cHTML spécifié et sa valeur peuvent être rendus dans l'élément de balisage actuel.</summary>
        <returns><see langword="true" /> si le style peut être rendu ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender%2A> retourne de la méthode `false` lorsque `key` est égale à la <xref:System.Web.UI.HtmlTextWriterStyle.TextDecoration> champ et la valeur est `"line-through"`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected override bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="override this.OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool" Usage="chtmlTextWriter.OnTagRender (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Chaîne contenant le nom de l'élément cHTML à restituer.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterTag" /> associé à <paramref name="name" />.</param>
        <summary>Détermine si l'élément de balisage cHTML spécifié est rendu sur la page qui a effectué la demande.</summary>
        <returns><see langword="true" /> si l'élément de balisage cHTML spécifié peut être rendu ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’élément cHTML est un `span` élément, le <xref:System.Web.UI.ChtmlTextWriter.OnTagRender%2A> retourne de la méthode `false`. Pour toutes les autres balises, elle retourne `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable RecognizedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable RecognizedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property RecognizedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ RecognizedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.Collections.Hashtable" /> d'attributs reconnus susceptibles d'être restitués sur des éléments cHTML.</summary>
        <value><see cref="T:System.Collections.Hashtable" /> d'attributs cHTML reconnus.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> méthode pour ajouter reconnue des attributs à la collection d’attributs reconnus.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Élément cHTML dans lequel supprimer un attribut.</param>
        <param name="attributeName">Attribut à supprimer de <paramref name="elementName" />.</param>
        <summary>Supprime un attribut d'un élément cHTML de l'objet <see cref="T:System.Web.UI.ChtmlTextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> méthode supprime un attribut d’un élément cHTML. L’attribut reconnu est supprimé à partir des attributs reconnus <xref:System.Collections.Hashtable> collection de la <xref:System.Web.UI.ChtmlTextWriter> objet qui est référencé par le <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.Collections.Hashtable" /> d'attributs supprimés spécifiés par l'utilisateur qui ne sont pas restitués sur des éléments cHTML.</summary>
        <value><see cref="T:System.Collections.Hashtable" /> d'attributs cHTML supprimés.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> méthode pour ajouter des attributs à la collection d’attributs supprimés.  
  
 La liste suivante présente les attributs supprimés par défaut qui sont définies pour un `div` élément lorsqu’une nouvelle instance de la <xref:System.Web.UI.ChtmlTextWriter> classe est créée.  
  
|||  
|-|-|  
|`accesskey`|`gridlines`|  
|`cellspacing`|`rules`|  
|`cellpadding`||  
  
 La liste suivante présente les attributs supprimés par défaut qui sont définies pour un `span` élément lorsqu’une nouvelle instance de la <xref:System.Web.UI.ChtmlTextWriter> classe est créée.  
  
|||  
|-|-|  
|`cellspacing`|`gridlines`|  
|`cellpadding`|`rules`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="chtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Écrit un élément <see langword="br" /> dans le flux de sortie cHTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A> arrêter de méthode pour insérer une ligne dans un flux cHMTL.  
  
   
  
## Examples  
 Cette section contient deux exemples de code. Le premier exemple de code montre comment créer une classe cHTML et des propriétés personnalisées. Le deuxième exemple de code montre comment utiliser une classe personnalisée sur une page Web.  
  
 Utiliser le personnalisé `ChtmlSimplelabelAdapter` adaptateur, ajoutez le code suivant soit le fichier de l’ordinateur approprié dans le sous-répertoire du répertoire de configuration .NET Framework ou dans un fichier de navigateur personnalisé dans le répertoire App_Browsers sous le site Web du navigateur racine de l’application.  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.SimpleLabel"  
   adapterType="AspNet.Samples.ChtmlSimpleLabelAdapter" />  
</controlAdapters>  
```  
  
 L’exemple de code suivant montre comment créer une classe d’adaptateur cHTML nommée `ChtmlSimpleLabelAdapter` pour une classe nommée `SimpleLabel`. Il crée un personnalisé `Control` propriété qui permet la `ChtmlSimpleLabelAdapter` classe pour accéder aux membres de la `SimpleLabel` classe, puis substitue le <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> (méthode). Dans la substitution, les conséquences sont les suivantes :  
  
-   Il crée une référence à un <xref:System.Web.UI.ChtmlTextWriter> objet, nommé `w`, qui est dérivée de la <xref:System.Web.UI.HtmlTextWriter> objet qui est passé en tant que le `writer` paramètre pour le <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> (méthode).  
  
-   Il crée une chaîne et définit égale à la `SimpleLabel.Text` valeur.  
  
-   Il appelle le <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> méthode pour appliquer les styles définis par le <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> flux de sortie de la propriété de l’étiquette pour le cHTML.  
  
-   Il écrit le `Text` valeur de propriété pour le flux, puis ferme le bloc de style en appelant le <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> (méthode).  
  
-   Il appelle le <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A> méthode pour restituer un `br` élément dans le flux de sortie après le rendu de texte et les styles.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.vb#2)]  
  
 L’exemple suivant montre comment utiliser le `SimpleLabel` classe dans une page Web.  
  
 [!code-aspx-csharp[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.aspx#3)]
 [!code-aspx-vb[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public override void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEncodedText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteEncodedText : string -&gt; unit" Usage="chtmlTextWriter.WriteEncodedText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Chaîne de texte à encoder et à écrire dans le flux de sortie.</param>
        <summary>Encode le texte spécifié pour l’appareil demandeur, puis l’écrit dans le flux de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le paramètre de texte passé dans le <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> méthode est `null` ou a une longueur de zéro, rien n’est écrit.  
  
 Utilisez le <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> méthode lorsqu’une chaîne contient des crochets pointus (\< ou >) ou une esperluette (&) et que vous souhaitez vous assurer qu’ils sont restitués correctement sur l’appareil demandeur.  
  
 Le <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> méthode utilise la classe de base <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
  </Members>
</Type>