<Type Name="SpellCheck" FullName="System.Windows.Controls.SpellCheck">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3e356a2244686c62c85487f18cc96356267adb8f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36565263" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SpellCheck" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpellCheck extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.SpellCheck" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SpellCheck" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpellCheck sealed" />
  <TypeSignature Language="F#" Value="type SpellCheck = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit une fonctionnalité de vérification orthographique en temps réel aux contrôles d'édition de texte, notamment <see cref="T:System.Windows.Controls.TextBox" /> et <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour activer le vérificateur d’orthographe, définissez la <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> propriété `true` sur un contrôle d’édition de texte. Lorsque ce vérificateur d’orthographe est activé, les mots mal orthographiés sont soulignés à l’aide d’un trait ondulé rouge, comme indiqué dans l’illustration suivante. Vérificateur d’orthographe est pris en charge uniquement lorsque WPF fournit un dictionnaire par défaut. Dans [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], WPF fournit des dictionnaires pour l’anglais, Français, allemand et espagnol.  
  
 ![TextBox avec orthographique&#45;vérification](~/add/media/editing-textbox-with-spellchecking.png "Textbox avec vérification orthographique")  
  
 Pour ajouter un dictionnaire personnalisé, ajoutez l’emplacement du fichier de lexique à la <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> collection.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CustomDictionaries">
      <MemberSignature Language="C#" Value="public System.Collections.IList CustomDictionaries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList CustomDictionaries" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomDictionaries As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ CustomDictionaries { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomDictionaries : System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection des emplacements de fichiers de lexique utilisés pour la vérification orthographique personnalisée.</summary>
        <value>Collection d'emplacements de fichiers de lexique.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dictionnaires personnalisés utilisent des fichiers de lexique, qui sont des fichiers texte qui ont une extension .lex. Chaque ligne d’un fichier de lexique contient un mot unique est accepté comme une orthographe légitime. La première ligne du fichier peut spécifier un identificateur de paramètres régionaux (LCID) auquel s’applique le dictionnaire. Si les paramètres régionaux ne sont pas spécifié, le dictionnaire s’applique à tous les langages. Pour plus d’informations, consultez [ID de paramètres régionaux](http://go.microsoft.com/fwlink/?LinkId=165561). L’exemple suivant montre les premières lignes d’un fichier de lexique pour la langue anglaise.  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 Pour spécifier un ou plusieurs dictionnaires personnalisés pour un <xref:System.Windows.Controls.TextBox> ou pour toute classe qui dérive de <xref:System.Windows.Controls.Primitives.TextBoxBase>, spécifiez l’emplacement du fichier de lexique en ajoutant l’URI du fichier à la <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> collection.  
  
> [!NOTE]
>  À l’aide de <xref:System.Collections.IList.Insert%2A> pour ajouter un fichier à la <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> collection provoque une exception. Au lieu de cela, utilisez <xref:System.Collections.IList.Add%2A> et <xref:System.Collections.IList.Remove%2A> pour mettre à jour de la collection.  
  
 Les fichiers du lexique peuvent être inclus dans l’application en tant que fichiers de contenu installés sur l’ordinateur local ou en tant que fichiers de ressources compilés dans un fichier local l’assembly référencé. Vous pouvez référencer le fichier à l’aide d’URI à en-tête pack. Pour plus d’informations, consultez [URI à en-tête pack dans WPF](~/docs/framework/wpf/app-development/pack-uris-in-wpf.md).  
  
 Pour activer le vérificateur d’orthographe, définissez la <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> propriété `true` sur un <xref:System.Windows.Controls.TextBox> ou sur toute classe qui dérive de <xref:System.Windows.Controls.Primitives.TextBoxBase>. Tous les dictionnaires personnalisés pour ce <xref:System.Windows.Controls.TextBox> sont utilisées en plus du vérificateur d’orthographe par défaut. Pour plus d’informations sur le vérificateur d’orthographe, consultez <xref:System.Windows.Controls.SpellCheck>.  
  
   
  
## Examples  
 L’exemple suivant montre comment ajouter deux dictionnaires personnalisés à un <xref:System.Windows.Controls.RichTextBox>. Le premier dictionnaire personnalisé (customwords.lex) est ajouté en XAML. Le fichier est inclus dans l’application en tant qu’un fichier de contenu et copié dans le répertoire de sortie. Pour utiliser le <xref:System.Uri> élément, vous devez inclure l’espace de noms système.  
  
 `xmlns:sys="clr-namespace:System;assembly=System"`  
  
 Le deuxième dictionnaire personnalisé (customwords2.lex) est ajouté dans le <xref:System.Windows.Controls.Primitives.ButtonBase.Click> Gestionnaire d’événements. Le fichier est inclus en tant qu’un fichier de ressources et compilé dans l’assembly d’application nommé WPFCustomDictionary.  
  
 [!code-xaml[WpfCustomDictionary#1](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml#1)]  
  
 [!code-csharp[WpfCustomDictionary#2](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml.cs#2)]
 [!code-vb[WpfCustomDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/wpfcustomdictionary/vb/mainwindow.xaml.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
        <altmember cref="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      </Docs>
    </Member>
    <Member MemberName="CustomDictionariesProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomDictionariesProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomDictionariesProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomDictionariesProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomDictionariesProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomDictionariesProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomDictionaries">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetCustomDictionaries (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetCustomDictionaries(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetCustomDictionaries(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetCustomDictionaries : System.Windows.Controls.Primitives.TextBoxBase -&gt; System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.GetCustomDictionaries textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Contrôle d'édition de texte dont la collection de fichiers de lexique est récupérée.</param>
        <summary>Obtient la collection des emplacements de fichiers de lexique utilisés par les vérificateurs d'orthographe personnalisés pour un contrôle d'édition de texte spécifié.</summary>
        <returns>Collection d'emplacements de fichiers de lexique.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dictionnaires personnalisés utilisent des fichiers de lexique, qui sont des fichiers texte simples qui ont une extension .lex. Chaque ligne d’un fichier de lexique contient un mot unique est accepté comme une orthographe légitime. La première ligne du fichier peut spécifier un identificateur de paramètres régionaux (LCID) auquel s’applique le dictionnaire. Si les paramètres régionaux ne sont pas spécifié, le dictionnaire s’applique à tous les langages. Pour plus d’informations, consultez [ID de paramètres régionaux](http://go.microsoft.com/fwlink/?LinkId=165561). L’exemple suivant montre les premières lignes d’un fichier de lexique pour la langue anglaise.  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 Pour spécifier un ou plusieurs dictionnaires personnalisés pour un <xref:System.Windows.Controls.TextBox> ou toute classe qui dérive de <xref:System.Windows.Controls.Primitives.TextBoxBase>, spécifiez l’emplacement du fichier de lexique en ajoutant l’URI du fichier à la <xref:System.Collections.IList> retournée par le <xref:System.Windows.Controls.SpellCheck.GetCustomDictionaries%2A> (méthode).  
  
 Pour activer le vérificateur d’orthographe, définissez la <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> propriété `true` sur un <xref:System.Windows.Controls.TextBox> ou sur toute classe qui dérive de <xref:System.Windows.Controls.Primitives.TextBoxBase>. Tous les dictionnaires personnalisés pour ce <xref:System.Windows.Controls.TextBox> sont utilisées en plus du vérificateur d’orthographe par défaut. Pour plus d’informations sur le vérificateur d’orthographe, consultez <xref:System.Windows.Controls.SpellCheck>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="textBoxBase" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
      </Docs>
    </Member>
    <Member MemberName="GetIsEnabled">
      <MemberSignature Language="C#" Value="public static bool GetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase -&gt; bool" Usage="System.Windows.Controls.SpellCheck.GetIsEnabled textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Contrôle d'édition de texte à vérifier. Parmi les exemples de contrôles figurent <see cref="T:System.Windows.Controls.TextBox" /> et <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <summary>Retourne une valeur qui indique si le vérificateur d'orthographe est activé pour le contrôle d'édition de texte spécifié.</summary>
        <returns>
          <see langword="true" /> si le vérificateur d'orthographe est activé pour le contrôle d'édition de texte ; sinon <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="textBoxBase" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui détermine si le vérificateur d'orthographe est activé ou non pour le contrôle d'édition de texte spécifié, notamment <see cref="T:System.Windows.Controls.TextBox" /> ou <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
        <value>
          <see langword="true" /> si le vérificateur d'orthographe est activé pour le contrôle ; <see langword="false" /> s'il ne l'est pas. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété de dépendance a également une utilisation de la propriété jointe spécialisée en écriture seule. Le [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntaxe de définition de la propriété est `<` *textBoxBaseClass* **SpellCheck.IsEnabled**`="`*boolValue* `" .../>`, où *textBoxBaseClass* est un élément objet d’une classe qui dérive de <xref:System.Windows.Controls.Primitives.TextBoxBase>, et *boolValue* est `true` ou `false` (le cas non-respect de la). Pour définir la propriété comme une propriété jointe dans le code, consultez la <xref:System.Windows.Controls.SpellCheck.SetIsEnabled%2A> (méthode). Il n’existe aucune correspondance `GetIsEnabled` accesseur. Pour obtenir la valeur, obtenez actuel <xref:System.Windows.Controls.SpellCheck> de l’objet à partir de la <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> propriété, puis obtenir la valeur de la <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> propriété à partir de ce <xref:System.Windows.Controls.SpellCheck>.  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.Controls.SpellCheck.IsEnabledProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.Controls.SpellCheck.IsEnabled" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsEnabled">
      <MemberSignature Language="C#" Value="public static void SetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, bool value);" />
      <MemberSignature Language="F#" Value="static member SetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase * bool -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetIsEnabled (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Contrôle d’édition de texte sur lequel activer ou désactiver le vérificateur d’orthographe. Parmi les exemples de contrôles figurent <see cref="T:System.Windows.Controls.TextBox" /> et <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <param name="value">Valeur booléenne qui spécifie si le vérificateur d’orthographe est activé sur le contrôle d’édition de texte.</param>
        <summary>Active ou désactive le vérificateur d'orthographe pour le contrôle d'édition de texte spécifié, notamment <see cref="T:System.Windows.Controls.TextBox" /> ou <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode permet une utilisation de la propriété jointe pour la <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> propriété dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. L’exemple suivant illustre la [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] l’utilisation.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpellingReform">
      <MemberSignature Language="C#" Value="public static void SetSpellingReform (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, System.Windows.Controls.SpellingReform value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSpellingReform(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, valuetype System.Windows.Controls.SpellingReform value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetSpellingReform(System.Windows.Controls.Primitives.TextBoxBase,System.Windows.Controls.SpellingReform)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSpellingReform(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, System::Windows::Controls::SpellingReform value);" />
      <MemberSignature Language="F#" Value="static member SetSpellingReform : System.Windows.Controls.Primitives.TextBoxBase * System.Windows.Controls.SpellingReform -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetSpellingReform (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Windows.Controls.SpellingReform" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Contrôle d'édition de texte auquel est appliqué le vérificateur d'orthographe. Parmi les exemples de contrôles figurent <see cref="T:System.Windows.Controls.TextBox" /> et <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <param name="value">Valeur <see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" /> qui détermine les règles de réforme orthographique.</param>
        <summary>Détermine les règles de réforme orthographique utilisées par le vérificateur d'orthographe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les règles de réforme orthographique qui sont accessibles par cette méthode faire tient compte de l’orthographe Français et allemand des années 1990. Cette méthode n’a aucun effet lorsqu’il est utilisé avec n’importe quel autre langage.  
  
 Cette méthode permet une utilisation de la propriété jointe pour la <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> propriété dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReform">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.SpellingReform SpellingReform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.SpellingReform SpellingReform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberSignature Language="VB.NET" Value="Public Property SpellingReform As SpellingReform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::SpellingReform SpellingReform { System::Windows::Controls::SpellingReform get(); void set(System::Windows::Controls::SpellingReform value); };" />
      <MemberSignature Language="F#" Value="member this.SpellingReform : System.Windows.Controls.SpellingReform with get, set" Usage="System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.SpellingReform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit les règles de réforme orthographique utilisées par le vérificateur d’orthographe.</summary>
        <value>Règles de réforme orthographique utilisées par le vérificateur d’orthographe. La valeur par défaut est <see cref="F:System.Windows.Controls.SpellingReform.PreAndPostreform" /> pour le français et <see cref="F:System.Windows.Controls.SpellingReform.Postreform" /> pour l'allemand.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les règles de réforme orthographique sont déterminées par cette propriété font référence aux réformes orthographiques Français et allemand. Cette propriété n’a aucun effet lorsqu’il est utilisé avec n’importe quel autre langage.  
  
 Cette propriété de dépendance a également une utilisation de la propriété jointe spécialisée en écriture seule. Le [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntaxe de définition de la propriété est `<` *textBoxBaseClass* **SpellCheck.SpellingReform**`="`*enumValue* `" .../>`, où *textBoxBaseClass* est un élément objet d’une classe qui dérive de <xref:System.Windows.Controls.Primitives.TextBoxBase>, et *enumValue* est un nom de chaîne pour une valeur de la <xref:System.Windows.Controls.SpellingReform> énumération. Pour définir la propriété comme une propriété jointe dans le code, consultez la <xref:System.Windows.Controls.SpellCheck.SetSpellingReform%2A> (méthode). Il n’existe aucune correspondance `GetSpellingReform` accesseur. Pour obtenir la valeur, obtenez actuel <xref:System.Windows.Controls.SpellCheck> de l’objet à partir de la <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> propriété, puis obtenir la valeur de la <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> propriété à partir de ce <xref:System.Windows.Controls.SpellCheck>.  
  
<a name="dependencyPropertyInfo_SpellingReform"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.Controls.SpellCheck.SpellingReformProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SpellingReformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SpellingReformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SpellingReformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SpellingReformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SpellingReformProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>