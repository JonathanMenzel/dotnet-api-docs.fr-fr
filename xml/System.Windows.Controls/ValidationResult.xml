<Type Name="ValidationResult" FullName="System.Windows.Controls.ValidationResult">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7b533069f13e3ce653081651758b98ab54c08444" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30628263" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ValidationResult" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ValidationResult extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ValidationResult" />
  <TypeSignature Language="VB.NET" Value="Public Class ValidationResult" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValidationResult" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Représente le résultat retourné par la méthode <see cref="T:System.Windows.Controls.ValidationRule" />.<see cref="M:System.Windows.Controls.ValidationRule.Validate(System.Object,System.Globalization.CultureInfo)" /> qui indique si la valeur vérifiée a été validée par la règle de validation <see cref="T:System.Windows.Controls.ValidationRule" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] modèle de liaison de données vous permet d’associer <xref:System.Windows.Data.Binding.ValidationRules%2A> avec votre <xref:System.Windows.Data.Binding> ou <xref:System.Windows.Data.MultiBinding> objet. Vous pouvez créer des règles personnalisées en sous-classant le <xref:System.Windows.Controls.ValidationRule> classe et implémenter la <xref:System.Windows.Controls.ValidationRule.Validate%2A> (méthode). Le <xref:System.Windows.Controls.ValidationRule.Validate%2A> méthode retourne un <xref:System.Windows.Controls.ValidationResult> objet pour indiquer si la valeur est valide.  
  
 Pour obtenir une présentation détaillée du processus de validation, consultez « Validation des données » dans [vue d’ensemble de la liaison de données](~/docs/framework/wpf/data/data-binding-overview.md).  
  
   
  
## Examples  
 L’exemple suivant illustre l’implémentation d’une règle de validation qui marque la valeur d’entrée n’est pas valide s’il contient des caractères non numériques ou à l’extérieur les limites inférieures et supérieures. Si la valeur n’est pas valide, le <xref:System.Windows.Controls.ValidationResult.ErrorContent%2A> propriété et la <xref:System.Windows.Controls.ValidationResult.IsValid%2A> propriété retourné <xref:System.Windows.Controls.ValidationResult> sont définies sur le message d’erreur approprié et `false` respectivement.  
  
 Pour obtenir un exemple complet, consultez [Comment : implémenter la Validation de liaison](~/docs/framework/wpf/data/how-to-implement-binding-validation.md).  
  
 [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Controls.ValidationRule.Validate(System.Object,System.Globalization.CultureInfo)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValidationResult (bool isValid, object errorContent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isValid, object errorContent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationResult.#ctor(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isValid As Boolean, errorContent As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ValidationResult(bool isValid, System::Object ^ errorContent);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isValid" Type="System.Boolean" />
        <Parameter Name="errorContent" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="isValid">Indique si la valeur vérifiée est valide ou non, selon la <see cref="T:System.Windows.Controls.ValidationRule" />.</param>
        <param name="errorContent">Informations sur la non-validité.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Controls.ValidationResult" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] modèle de liaison de données vous permet d’associer <xref:System.Windows.Data.Binding.ValidationRules%2A> avec votre <xref:System.Windows.Data.Binding> ou <xref:System.Windows.Data.MultiBinding> objet. Vous pouvez créer des règles personnalisées en sous-classant le <xref:System.Windows.Controls.ValidationRule> classe et implémenter la <xref:System.Windows.Controls.ValidationRule.Validate%2A> (méthode). Le <xref:System.Windows.Controls.ValidationRule.Validate%2A> méthode retourne un <xref:System.Windows.Controls.ValidationResult> objet pour indiquer si la valeur est valide.  
  
 Pour obtenir une présentation détaillée du processus de validation, consultez « Validation des données » dans [vue d’ensemble de la liaison de données](~/docs/framework/wpf/data/data-binding-overview.md).  
  
   
  
## Examples  
 L’exemple suivant illustre l’implémentation d’une règle de validation qui marque la valeur d’entrée n’est pas valide s’il contient des caractères non numériques ou à l’extérieur les limites inférieures et supérieures. Si la valeur n’est pas valide, le <xref:System.Windows.Controls.ValidationResult.ErrorContent%2A> propriété et la <xref:System.Windows.Controls.ValidationResult.IsValid%2A> propriété retourné <xref:System.Windows.Controls.ValidationResult> sont définies sur le message d’erreur approprié et `false` respectivement.  
  
 Pour obtenir un exemple complet, consultez [Comment : implémenter la Validation de liaison](~/docs/framework/wpf/data/how-to-implement-binding-validation.md).  
  
 [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Controls.ValidationRule.Validate(System.Object,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationResult.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Instance de <see cref="T:System.Windows.Controls.ValidationResult" /> à comparer.</param>
        <summary>Compare l’instance spécifiée à l’instance actuelle de <see cref="T:System.Windows.Controls.ValidationResult" /> pour déterminer si leur valeurs sont égales.</summary>
        <returns>
          <see langword="true" /> si <paramref name="obj" /> et cette instance de <see cref="T:System.Windows.Controls.ValidationResult" /> ont la même valeur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est appelée par les substitutions de l’opérateur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorContent">
      <MemberSignature Language="C#" Value="public object ErrorContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ErrorContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationResult.ErrorContent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorContent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ErrorContent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet qui contient des informations supplémentaires sur la non-validité.</summary>
        <value>Objet qui contient des informations supplémentaires sur la non-validité.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] modèle de liaison de données vous permet d’associer <xref:System.Windows.Data.Binding.ValidationRules%2A> avec votre <xref:System.Windows.Data.Binding> ou <xref:System.Windows.Data.MultiBinding> objet. Vous pouvez créer des règles personnalisées en sous-classant le <xref:System.Windows.Controls.ValidationRule> classe et implémenter la <xref:System.Windows.Controls.ValidationRule.Validate%2A> (méthode). Le <xref:System.Windows.Controls.ValidationRule.Validate%2A> méthode retourne un <xref:System.Windows.Controls.ValidationResult> objet pour indiquer si la valeur est valide.  
  
 Pour obtenir une présentation détaillée du processus de validation, consultez « Validation des données » dans [vue d’ensemble de la liaison de données](~/docs/framework/wpf/data/data-binding-overview.md).  
  
   
  
## Examples  
 L’exemple suivant illustre l’implémentation d’une règle de validation qui marque la valeur d’entrée n’est pas valide s’il contient des caractères non numériques ou à l’extérieur les limites inférieures et supérieures. Si la valeur n’est pas valide, le <xref:System.Windows.Controls.ValidationResult.ErrorContent%2A> propriété et la <xref:System.Windows.Controls.ValidationResult.IsValid%2A> propriété retourné <xref:System.Windows.Controls.ValidationResult> sont définies sur le message d’erreur approprié et `false` respectivement.  
  
 Pour obtenir un exemple complet, consultez [Comment : implémenter la Validation de liaison](~/docs/framework/wpf/data/how-to-implement-binding-validation.md).  
  
 [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationResult.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne le code de hachage pour ce <see cref="T:System.Windows.Controls.ValidationResult" />.</summary>
        <returns>Code de hachage pour cette <see cref="T:System.Windows.Controls.ValidationResult" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationResult.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si la valeur vérifiée selon la règle de validation <see cref="T:System.Windows.Controls.ValidationRule" /> est valide.</summary>
        <value>
          <see langword="true" /> si la valeur est valide ; <see langword="false" /> si elle ne l'est pas. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] modèle de liaison de données vous permet d’associer <xref:System.Windows.Data.Binding.ValidationRules%2A> avec votre <xref:System.Windows.Data.Binding> ou <xref:System.Windows.Data.MultiBinding> objet. Vous pouvez créer des règles personnalisées en sous-classant le <xref:System.Windows.Controls.ValidationRule> classe et implémenter la <xref:System.Windows.Controls.ValidationRule.Validate%2A> (méthode). Le <xref:System.Windows.Controls.ValidationRule.Validate%2A> méthode retourne un <xref:System.Windows.Controls.ValidationResult> objet pour indiquer si la valeur est valide.  
  
 Pour obtenir une présentation détaillée du processus de validation, consultez « Validation des données » dans [vue d’ensemble de la liaison de données](~/docs/framework/wpf/data/data-binding-overview.md).  
  
   
  
## Examples  
 L’exemple suivant illustre l’implémentation d’une règle de validation qui marque la valeur d’entrée n’est pas valide s’il contient des caractères non numériques ou à l’extérieur les limites inférieures et supérieures. Si la valeur n’est pas valide, le <xref:System.Windows.Controls.ValidationResult.ErrorContent%2A> propriété et la <xref:System.Windows.Controls.ValidationResult.IsValid%2A> propriété retourné <xref:System.Windows.Controls.ValidationResult> sont définies sur le message d’erreur approprié et `false` respectivement.  
  
 Pour obtenir un exemple complet, consultez [Comment : implémenter la Validation de liaison](~/docs/framework/wpf/data/how-to-implement-binding-validation.md).  
  
 [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Controls.ValidationRule.Validate(System.Object,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Controls.ValidationResult left, System.Windows.Controls.ValidationResult right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Controls.ValidationResult left, class System.Windows.Controls.ValidationResult right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationResult.op_Equality(System.Windows.Controls.ValidationResult,System.Windows.Controls.ValidationResult)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As ValidationResult, right As ValidationResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Controls::ValidationResult ^ left, System::Windows::Controls::ValidationResult ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Controls.ValidationResult" />
        <Parameter Name="right" Type="System.Windows.Controls.ValidationResult" />
      </Parameters>
      <Docs>
        <param name="left">Première instance à comparer.</param>
        <param name="right">Deuxième instance à comparer.</param>
        <summary>Compare deux objets <see cref="T:System.Windows.Controls.ValidationResult" /> pour déterminer si leur valeurs sont égales.</summary>
        <returns>
          <see langword="true" /> si les deux objets sont égaux ; sinon, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Controls.ValidationResult left, System.Windows.Controls.ValidationResult right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Controls.ValidationResult left, class System.Windows.Controls.ValidationResult right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationResult.op_Inequality(System.Windows.Controls.ValidationResult,System.Windows.Controls.ValidationResult)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As ValidationResult, right As ValidationResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Controls::ValidationResult ^ left, System::Windows::Controls::ValidationResult ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Controls.ValidationResult" />
        <Parameter Name="right" Type="System.Windows.Controls.ValidationResult" />
      </Parameters>
      <Docs>
        <param name="left">Première instance à comparer.</param>
        <param name="right">Deuxième instance à comparer.</param>
        <summary>Compare deux objets <see cref="T:System.Windows.Controls.ValidationResult" /> pour détecter s'ils présentent des valeurs différentes.</summary>
        <returns>
          <see langword="true" /> si ces valeurs sont différentes ; <see langword="false" /> dans le cas contraire.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidResult">
      <MemberSignature Language="C#" Value="public static System.Windows.Controls.ValidationResult ValidResult { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Controls.ValidationResult ValidResult" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationResult.ValidResult" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ValidResult As ValidationResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Controls::ValidationResult ^ ValidResult { System::Windows::Controls::ValidationResult ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ValidationResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une instance valide du résultat de validation <see cref="T:System.Windows.Controls.ValidationResult" />.</summary>
        <value>Instance valide du résultat <see cref="T:System.Windows.Controls.ValidationResult" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>