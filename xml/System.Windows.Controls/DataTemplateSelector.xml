<Type Name="DataTemplateSelector" FullName="System.Windows.Controls.DataTemplateSelector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="271e7c38cc10fbd95311f2bf4e47dc463478752a" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51882453" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataTemplateSelector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplateSelector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.DataTemplateSelector" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTemplateSelector" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTemplateSelector" />
  <TypeSignature Language="F#" Value="type DataTemplateSelector = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit un moyen de choisir un <see cref="T:System.Windows.DataTemplate" /> en fonction de l’objet de données et de l’élément lié aux données.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En général, vous créez un <xref:System.Windows.Controls.DataTemplateSelector> lorsque vous avez plusieurs <xref:System.Windows.DataTemplate> pour le même type d’objets et que vous souhaitez fournir votre propre logique pour choisir un <xref:System.Windows.DataTemplate> à appliquer en fonction des propriétés de chaque objet de données. Notez que si vous avez des objets de différents types que vous pouvez définir le <xref:System.Windows.DataTemplate.DataType%2A> propriété sur le <xref:System.Windows.DataTemplate>. Si vous le faire, il est inutile de créer un <xref:System.Windows.Controls.DataTemplateSelector>. En outre, si vous avez les objets du même type, mais avec des propriétés différentes, vous pouvez également envisager d’utiliser un <xref:System.Windows.DataTrigger> ou un convertisseur de données. Pour plus d’informations, consultez [Vue d’ensemble des modèles de données](~/docs/framework/wpf/data/data-templating-overview.md).  
  
 Pour créer un sélecteur de modèle, créez une classe qui hérite de <xref:System.Windows.Controls.DataTemplateSelector> et remplacer le <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> (méthode). Une fois que votre classe est définie, vous pouvez affecter une instance de la classe à la propriété de sélecteur de modèle de votre élément.  
  
   
  
## Examples  
 Dans cet exemple, la source de liaison est une liste de `Task` objets. Une des propriétés d’un `Task` objet est `Priority`. Il existe deux modèles de données définis, `myTaskTemplate` et `importantTaskTemplate`.  
  
 Pour fournir une logique permettant de choisir le <xref:System.Windows.DataTemplate> à utiliser selon le `Priority` valeur de l’objet de données, créez une sous-classe de <xref:System.Windows.Controls.DataTemplateSelector> et remplacer le <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> (méthode). Dans l’exemple suivant, le <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> méthode fournit une logique pour retourner le modèle approprié en fonction de la valeur de la `Priority` propriété. Le modèle à retourner se trouve dans les ressources de l’enveloppe <xref:System.Windows.Window> élément.  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 On peut ensuite déclarer le `TaskListDataTemplateSelector` comme ressource :  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 Pour utiliser la ressource de sélecteur de modèle, affectez-le à la <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> propriété de la <xref:System.Windows.Controls.ListBox>. Le <xref:System.Windows.Controls.ListBox> appelle le <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> méthode de la `TaskListDataTemplateSelector` pour chacun des éléments dans la collection sous-jacente. L’appel passe l’objet de données en paramètre d’élément. Le <xref:System.Windows.DataTemplate> qui est retourné par la méthode est ensuite appliquée à cet objet de données.  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 Vous trouverez l’exemple complet sur la page [Présentation d’un exemple de création de modèles de données](https://go.microsoft.com/fwlink/?LinkID=160009).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplateSelector ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplateSelector();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Controls.DataTemplateSelector" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DataTemplate SelectTemplate (object item, System.Windows.DependencyObject container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DataTemplate SelectTemplate(object item, class System.Windows.DependencyObject container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SelectTemplate (item As Object, container As DependencyObject) As DataTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DataTemplate ^ SelectTemplate(System::Object ^ item, System::Windows::DependencyObject ^ container);" />
      <MemberSignature Language="F#" Value="abstract member SelectTemplate : obj * System.Windows.DependencyObject -&gt; System.Windows.DataTemplate&#xA;override this.SelectTemplate : obj * System.Windows.DependencyObject -&gt; System.Windows.DataTemplate" Usage="dataTemplateSelector.SelectTemplate (item, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="container" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="item">Objet de données pour lequel sélectionner le modèle.</param>
        <param name="container">Objet lié aux données.</param>
        <summary>En cas de substitution dans une classe dérivée, retourne un <see cref="T:System.Windows.DataTemplate" /> basé sur la logique personnalisée.</summary>
        <returns>Retourne un type <see cref="T:System.Windows.DataTemplate" /> ou <see langword="null" />. La valeur par défaut est <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En général, vous utilisez un sélecteur de modèle lorsque vous avez plusieurs modèles de données définis pour le même type d’objets. Par exemple, si votre source de liaison est une liste d’objets de l’étudiant et que vous souhaitez appliquer un modèle particulier pour les étudiants à temps partiel. Vous pouvez le faire en créant une classe qui hérite de <xref:System.Windows.Controls.DataTemplateSelector> et en remplaçant le <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> (méthode). Une fois que votre classe est définie, vous pouvez affecter une instance de la classe à la propriété de sélecteur de modèle de votre élément.  
  
   
  
## Examples  
 Dans cet exemple, la source de liaison est une liste de `Task` objets. Une des propriétés d’un `Task` objet est `Priority`. Il existe deux modèles de données définis, `myTaskTemplate` et `importantTaskTemplate`.  
  
 Pour fournir une logique permettant de choisir le <xref:System.Windows.DataTemplate> à utiliser selon le `Priority` valeur de l’objet de données, créez une sous-classe de <xref:System.Windows.Controls.DataTemplateSelector> et remplacer le <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> (méthode). Dans l’exemple suivant, le <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> méthode fournit une logique pour retourner le modèle approprié en fonction de la valeur de la `Priority` propriété. Le modèle à retourner se trouve dans les ressources de l’enveloppe <xref:System.Windows.Window> élément.  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 On peut ensuite déclarer le `TaskListDataTemplateSelector` comme ressource :  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 Pour utiliser la ressource de sélecteur de modèle, affectez-le à la <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> propriété de la <xref:System.Windows.Controls.ListBox>. Le <xref:System.Windows.Controls.ListBox> appelle le <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> méthode de la `TaskListDataTemplateSelector` pour chacun des éléments dans la collection sous-jacente. L’appel passe l’objet de données en paramètre d’élément. Le <xref:System.Windows.DataTemplate> qui est retourné par la méthode est ensuite appliquée à cet objet de données.  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 Vous trouverez l’exemple complet sur la page [Présentation d’un exemple de création de modèles de données](https://go.microsoft.com/fwlink/?LinkID=160009).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>