<Type Name="Label" FullName="System.Windows.Controls.Label">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8e2c2703d49f4ce15e4bbc5a90c2dc8ca5b87073" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30618693" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Label : System.Windows.Controls.ContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Label extends System.Windows.Controls.ContentControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Label" />
  <TypeSignature Language="VB.NET" Value="Public Class Label&#xA;Inherits ContentControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Label : System::Windows::Controls::ContentControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Label)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente l’étiquette de texte pour un contrôle et prend en charge les clés d’accès.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette classe prend en charge visuelle et fonctionnelle touches d’accès rapide (également appelées mnémoniques). Il est fréquemment utilisé pour activer les touches d’accès rapide à des contrôles comme une <xref:System.Windows.Controls.TextBox>. Pour affecter un <xref:System.Windows.Controls.Label> à un <xref:System.Windows.Controls.Control>, définissez le <xref:System.Windows.Controls.Label.Target%2A> propriété au contrôle qui doit recevoir le focus lorsque l’utilisateur appuie sur la clé d’accès. Définition de la cible entraîne également [!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)] à utiliser le texte de l’étiquette en tant que le nom du contrôle ciblé. Pour plus d’informations, consultez [accessibilité](~/docs/framework/ui-automation/index.md).  
  
 Pour définir la clé d’accès, ajoutez un trait de soulignement avant le caractère qui doit être la clé d’accès. Si votre contenu compte plusieurs traits de soulignement, seul le premier est converti en une clé d’accès ; les autres apparaissent sous forme de texte normal. Si le caractère de soulignement que vous souhaitez convertir à la clé d’accès n’est pas le premier caractère de soulignement, utilisez deux traits de soulignement consécutifs pour les traits de soulignement qui précèdent celui que vous voulez convertir. Par exemple, le code suivant contient une clé d’accès et affiche comme _Hello**W**orld :  
  
```  
<Label>__Hello_World</Label>   
```  
  
 Étant donné que le trait de soulignement qui précède H est un double, la touche W inscrit en tant que la clé d’accès.  
  
 Une étiquette n’est pas actif, et il n’est pas un taquet de tabulation. Pour plus d’informations, consultez [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).  
  
 A <xref:System.Windows.Controls.Label> est un <xref:System.Windows.Controls.ContentControl>, ce qui signifie qu’il peut contenir un seul objet de tout type (par exemple, une chaîne, une image ou un panneau de configuration). Pour plus d'informations, consultez la classe <xref:System.Windows.Controls.ContentControl>.  
  
## <a name="customizing-the-label-control"></a>Personnalisation du contrôle Label  
 Pour appliquer les mêmes paramètres de propriété à plusieurs <xref:System.Windows.Controls.Label> contrôles, utilisez le <xref:System.Windows.FrameworkElement.Style%2A> propriété. Vous pouvez modifier la valeur par défaut <xref:System.Windows.Controls.ControlTemplate> pour donner une apparence unique au contrôle. Pour plus d’informations sur la création d’un <xref:System.Windows.Controls.ControlTemplate>, consultez [personnalisation de l’apparence d’un contrôle existant en créant un ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  Pour afficher les parties et les États qui sont spécifiques à la <xref:System.Windows.Controls.Label>, consultez [Styles et modèles Label](~/docs/framework/wpf/controls/label-styles-and-templates.md).  
  
 Propriétés de dépendance pour ce contrôle peuvent être définies par le style par défaut.  Si une propriété est définie par un style par défaut, la propriété peut changer sa valeur par défaut lorsque le contrôle s’affiche dans l’application. Le style par défaut est déterminé par le thème de bureau est utilisé lors de l’application est en cours d’exécution.  Pour plus d’informations, consultez [par défaut des thèmes WPF](http://go.microsoft.com/fwlink/?LinkID=158252).  
  
> [!NOTE]
>  Définition d’une propriété visuelle uniquement aura un effet si ces propriétés sont toutes deux présentes dans <xref:System.Windows.Controls.Label> contrôle du modèle par défaut et est définie à l’aide d’un. Vous trouverez une liste de propriétés visual dans la section « Modification le Visual Structure d’un contrôle » [personnalisation de l’apparence d’un contrôle existant en créant un ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
   
  
## Examples  
 L’exemple suivant montre comment créer un <xref:System.Windows.Controls.Label> qui utilise une liaison pour définir la cible.  
  
 [!code-xaml[LabelSnippet#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#1)]   
  
 L’exemple suivant montre comment créer un <xref:System.Windows.Controls.Label> qui a une clé d’accès et prend en charge d’habillage du texte.  
  
 [!code-xaml[LabelSnippet#4](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Label ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Label.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Label();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Controls.Label" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Label.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fournit une implémentation <see cref="T:System.Windows.Automation.Peers.LabelAutomationPeer" /> appropriée pour ce contrôle, dans le cadre de l'infrastructure [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</summary>
        <returns>Implémentation de <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> spécifique au type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public System.Windows.UIElement Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.UIElement Target" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Label.Target" />
      <MemberSignature Language="VB.NET" Value="Public Property Target As UIElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::UIElement ^ Target { System::Windows::UIElement ^ get(); void set(System::Windows::UIElement ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.NameReferenceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.UIElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l’élément qui reçoit le focus quand l’utilisateur appuie sur la touche d’accès rapide de l’étiquette.</summary>
        <value>
          <see cref="T:System.Windows.UIElement" /> qui reçoit le focus lorsque l'utilisateur appuie sur la touche d'accès rapide. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez fournir des raccourcis clavier pour les éléments qui ne prennent pas en charge les touches d’accès rapide en donnant une <xref:System.Windows.Controls.Label> une clé d’accès et la définition de cette propriété. Affecter une touche d’accès à une étiquette en plaçant un trait de soulignement immédiatement avant le caractère qui sert de la clé d’accès. Une clé d’accès peut être spécifiée dans le <xref:System.Windows.Controls.ContentControl.Content%2A> propriété ou en définissant <xref:System.Windows.Controls.ContentControl.Content%2A> à un <xref:System.Windows.Controls.AccessText> objet.  
  
 Vous ne pouvez pas utiliser cette propriété pour définir un <xref:System.Windows.UIElement>. Par exemple, suivant compile, mais n’est pas fonctionnel : `<object.Target><UIElement../></object.Target>`. Cette propriété fournit une référence à un élément qui est déjà défini dans votre application.  
  
<a name="dependencyPropertyInfo_Target"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.Controls.Label.TargetProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
<a name="xamlAttributeUsage_Target"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<Label Target=" nameOfExistingElement"/>  
  
```  
  
<a name="xamlPropertyElementUsage_Target"></a>   
## <a name="xaml-property-element-usage"></a>Utilisation des éléments de propriété XAML  
  
<a name="xamlValues_Target"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 `nameOfExistingElement`  
 Le nom de <xref:System.Windows.UIElement> qui reçoit le focus lorsque la touche d’accès est activée.  
  
   
  
## Examples  
 L'exemple suivant montre comment définir la propriété <xref:System.Windows.Controls.Label.Target%2A> d'un <xref:System.Windows.Controls.Label>.  
  
 [!code-xaml[LabelSnippet#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#1)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Label.TargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TargetProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.Controls.Label.Target" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>