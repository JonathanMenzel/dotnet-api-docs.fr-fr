<Type Name="BackgroundWorker" FullName="System.ComponentModel.BackgroundWorker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="053b0518e8cc183ffa09c4955d3ee95189700f76" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36705019" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class BackgroundWorker : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BackgroundWorker extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.BackgroundWorker" />
  <TypeSignature Language="VB.NET" Value="Public Class BackgroundWorker&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class BackgroundWorker : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type BackgroundWorker = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("DoWork")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="6c2a5-101">Exécute une opération sur un thread séparé.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6c2a5-101">Executes an operation on a separate thread.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c2a5-102">La <xref:System.ComponentModel.BackgroundWorker> classe vous permet d’exécuter une opération sur un thread séparé et dédié.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-102">The <xref:System.ComponentModel.BackgroundWorker> class allows you to run an operation on a separate, dedicated thread.</span></span> <span data-ttu-id="6c2a5-103">Les opérations longues comme les téléchargements et les transactions de base de données peuvent entraîner de votre interface utilisateur (IU) semblent comme s’il a cessé de répondre pendant leur exécution.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-103">Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running.</span></span> <span data-ttu-id="6c2a5-104">Lorsque vous souhaitez une interface utilisateur réactive et êtes confronté à de longs délais associés à ces opérations, la <xref:System.ComponentModel.BackgroundWorker> classe fournit une solution pratique.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-104">When you want a responsive UI and you are faced with long delays associated with such operations, the <xref:System.ComponentModel.BackgroundWorker> class provides a convenient solution.</span></span>  
  
 <span data-ttu-id="6c2a5-105">Pour exécuter une longue opération en arrière-plan, créez un <xref:System.ComponentModel.BackgroundWorker> et écouter les événements qui indiquent la progression de votre opération et lorsque celle-ci se termine.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-105">To execute a time-consuming operation in the background, create a <xref:System.ComponentModel.BackgroundWorker> and listen for events that report the progress of your operation and signal when your operation is finished.</span></span> <span data-ttu-id="6c2a5-106">Vous pouvez créer le <xref:System.ComponentModel.BackgroundWorker> par programme ou vous pouvez faire glisser vers votre formulaire à partir de la **composants** onglet de la **boîte à outils**.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-106">You can create the <xref:System.ComponentModel.BackgroundWorker> programmatically or you can drag it onto your form from the **Components** tab of the **Toolbox**.</span></span> <span data-ttu-id="6c2a5-107">Si vous créez le <xref:System.ComponentModel.BackgroundWorker> dans le Concepteur Windows Forms, il apparaît dans la barre d’état du composant et ses propriétés seront affichera dans la fenêtre Propriétés.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-107">If you create the <xref:System.ComponentModel.BackgroundWorker> in the Windows Forms Designer, it will appear in the Component Tray, and its properties will be displayed in the Properties window.</span></span>  
  
 <span data-ttu-id="6c2a5-108">Pour définir une opération en arrière-plan, ajoutez un gestionnaire d’événements pour le <xref:System.ComponentModel.BackgroundWorker.DoWork> événement.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-108">To set up for a background operation, add an event handler for the <xref:System.ComponentModel.BackgroundWorker.DoWork> event.</span></span> <span data-ttu-id="6c2a5-109">Appelez votre opération de longue durée dans ce gestionnaire d’événements.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-109">Call your time-consuming operation in this event handler.</span></span> <span data-ttu-id="6c2a5-110">Pour démarrer l’opération, appelez <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-110">To start the operation, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span></span> <span data-ttu-id="6c2a5-111">Pour recevoir des notifications des mises à jour de progression, gérez le <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> événement.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-111">To receive notifications of progress updates, handle the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span> <span data-ttu-id="6c2a5-112">Pour recevoir une notification lorsque l’opération est terminée, gérez le <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> événement.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-112">To receive a notification when the operation is completed, handle the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6c2a5-113">Vous devez être prudent ne pas manipuler les objets d’interface utilisateur dans votre <xref:System.ComponentModel.BackgroundWorker.DoWork> Gestionnaire d’événements.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-113">You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.</span></span> <span data-ttu-id="6c2a5-114">À la place, communiquez à l’interface utilisateur via la <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> et <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> les événements.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-114">Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> events.</span></span>  
>   
>  <span data-ttu-id="6c2a5-115"><xref:System.ComponentModel.BackgroundWorker> les événements ne sont pas marshalés entre <xref:System.AppDomain> des limites.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-115"><xref:System.ComponentModel.BackgroundWorker> events are not marshaled across <xref:System.AppDomain> boundaries.</span></span> <span data-ttu-id="6c2a5-116">N’utilisez pas un <xref:System.ComponentModel.BackgroundWorker> composant d’effectuer les opérations multithread dans plusieurs <xref:System.AppDomain>.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-116">Do not use a <xref:System.ComponentModel.BackgroundWorker> component to perform multithreaded operations in more than one <xref:System.AppDomain>.</span></span>  
  
 <span data-ttu-id="6c2a5-117">Si votre opération en arrière-plan requiert un paramètre, appelez <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> avec votre paramètre.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-117">If your background operation requires a parameter, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> with your parameter.</span></span> <span data-ttu-id="6c2a5-118">À l’intérieur de la <xref:System.ComponentModel.BackgroundWorker.DoWork> Gestionnaire d’événements, vous pouvez extraire le paramètre de la <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=nameWithType> propriété.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-118">Inside the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can extract the parameter from the <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="6c2a5-119">Pour plus d’informations sur <xref:System.ComponentModel.BackgroundWorker>, consultez la page [Guide pratique pour exécuter une opération en arrière-plan](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md).</span><span class="sxs-lookup"><span data-stu-id="6c2a5-119">For more information about <xref:System.ComponentModel.BackgroundWorker>, see [How to: Run an Operation in the Background](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6c2a5-120">L’exemple de code suivant illustre les principes fondamentaux de la <xref:System.ComponentModel.BackgroundWorker> classe pour exécuter une opération longue de façon asynchrone.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-120">The following code example demonstrates the basics of the <xref:System.ComponentModel.BackgroundWorker> class for executing a time-consuming operation asynchronously.</span></span> <span data-ttu-id="6c2a5-121">L’illustration suivante montre un exemple de sortie.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-121">The following illustration shows an example of the output.</span></span>  
  
 <span data-ttu-id="6c2a5-122">![Exemple simple BackgroundWorker](~/add/media/backgroundworker-simple.png "exemple simple BackgroundWorker")</span><span class="sxs-lookup"><span data-stu-id="6c2a5-122">![BackgroundWorker simple example](~/add/media/backgroundworker-simple.png "BackgroundWorker simple example")</span></span>  
  
 <span data-ttu-id="6c2a5-123">Pour tester ce code, créez une application Windows Forms.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-123">To try this code, create a Windows Forms application.</span></span> <span data-ttu-id="6c2a5-124">Ajouter un <xref:System.Windows.Forms.Label> contrôle nommé `resultLabel` et ajouter deux <xref:System.Windows.Forms.Button> contrôles nommés `startAsyncButton` et `cancelAsyncButton`.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-124">Add a <xref:System.Windows.Forms.Label> control named `resultLabel` and add two <xref:System.Windows.Forms.Button> controls named `startAsyncButton` and `cancelAsyncButton`.</span></span> <span data-ttu-id="6c2a5-125">Créer <xref:System.Windows.Forms.Control.Click> gestionnaires d’événements pour les deux boutons.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-125">Create <xref:System.Windows.Forms.Control.Click> event handlers for both buttons.</span></span> <span data-ttu-id="6c2a5-126">À partir de la **composants** onglet de la boîte à outils, ajoutez un <xref:System.ComponentModel.BackgroundWorker> composant nommé `backgroundWorker1`.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-126">From the **Components** tab of the Toolbox, add a <xref:System.ComponentModel.BackgroundWorker> component named `backgroundWorker1`.</span></span> <span data-ttu-id="6c2a5-127">Créer <xref:System.ComponentModel.BackgroundWorker.DoWork>, <xref:System.ComponentModel.BackgroundWorker.ProgressChanged>, et <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> gestionnaires d’événements pour le <xref:System.ComponentModel.BackgroundWorker>.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-127">Create <xref:System.ComponentModel.BackgroundWorker.DoWork>, <xref:System.ComponentModel.BackgroundWorker.ProgressChanged>, and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handlers for the <xref:System.ComponentModel.BackgroundWorker>.</span></span> <span data-ttu-id="6c2a5-128">Dans le code du formulaire, remplacez le code existant par le code suivant.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-128">In the code for the form, replace the existing code with the following code.</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorkerSimple#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.componentmodel.backgroundworkersimple/cs/form1.cs#1)]
 [!code-vb[System.ComponentModel.BackgroundWorkerSimple#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.componentmodel.backgroundworkersimple/vb/form1.vb#1)]  
  
 <span data-ttu-id="6c2a5-129">L’exemple de code suivant illustre l’utilisation de la <xref:System.ComponentModel.BackgroundWorker> classe pour exécuter une opération longue de façon asynchrone.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-129">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker> class for executing a time-consuming operation asynchronously.</span></span> <span data-ttu-id="6c2a5-130">L’illustration suivante montre un exemple de sortie.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-130">The following illustration shows an example of the output.</span></span>  
  
 <span data-ttu-id="6c2a5-131">![Exemple BackgroundWorker Fibonacci](~/add/media/backgroundworker-fibonacci.png "exemple BackgroundWorker Fibonacci")</span><span class="sxs-lookup"><span data-stu-id="6c2a5-131">![BackgroundWorker Fibonacci example](~/add/media/backgroundworker-fibonacci.png "BackgroundWorker Fibonacci example")</span></span>  
  
 <span data-ttu-id="6c2a5-132">L’opération calcule le nombre Fibonacci sélectionné, signale les mises à jour de progression comme les frais de calcul et permet un calcul en attente d’être annulée.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-132">The operation computes the selected Fibonacci number, reports progress updates as the calculation proceeds, and permits a pending calculation to be canceled.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#1)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#1)]
 [!code-vb[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BackgroundWorker ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BackgroundWorker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6c2a5-133">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.BackgroundWorker" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-133">Initializes a new instance of the <see cref="T:System.ComponentModel.BackgroundWorker" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c2a5-134">Ce constructeur initialise un <xref:System.ComponentModel.BackgroundWorker>.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-134">This constructor initializes a <xref:System.ComponentModel.BackgroundWorker>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : unit -&gt; unit" Usage="backgroundWorker.CancelAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6c2a5-135">Demande l'annulation d'une opération d'arrière-plan en attente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-135">Requests cancellation of a pending background operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c2a5-136"><xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> envoie une demande pour terminer l’opération d’arrière-plan en attente et affecte le <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> propriété `true`.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-136"><xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> submits a request to terminate the pending background operation and sets the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to `true`.</span></span>  
  
 <span data-ttu-id="6c2a5-137">Lorsque vous appelez <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>, votre méthode de travail a la possibilité d’arrêter son exécution et quitter.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-137">When you call <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>, your worker method has an opportunity to stop its execution and exit.</span></span> <span data-ttu-id="6c2a5-138">Le code de travail doit vérifier périodiquement la <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> propriété pour voir si elle a été définie `true`.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-138">The worker code should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to see if it has been set to `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="6c2a5-139">N’oubliez pas que votre code dans le <xref:System.ComponentModel.BackgroundWorker.DoWork> Gestionnaire d’événements peut terminer son travail comme une demande d’annulation, et votre boucle d’interrogation peut manquer <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> définie sur `true`.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-139">Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`.</span></span> <span data-ttu-id="6c2a5-140">Dans ce cas, le <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> indicateur de <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> dans votre <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> Gestionnaire d’événements ne sera pas défini `true`, même si une demande d’annulation a été effectuée.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-140">In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made.</span></span> <span data-ttu-id="6c2a5-141">Cette situation est appelée un *condition de concurrence* , un problème courant dans la programmation multithread.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-141">This situation is called a *race condition* and is a common concern in multithreaded programming.</span></span> <span data-ttu-id="6c2a5-142">Pour plus d’informations sur la conception multithread des problèmes, consultez [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span><span class="sxs-lookup"><span data-stu-id="6c2a5-142">For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6c2a5-143">L’exemple de code suivant illustre l’utilisation de la <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> méthode pour annuler une opération asynchrone (« en arrière-plan »).</span><span class="sxs-lookup"><span data-stu-id="6c2a5-143">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method to cancel an asynchronous ("background") operation.</span></span> <span data-ttu-id="6c2a5-144">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-144">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#4)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#4)]
 [!code-vb[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6c2a5-145">
            <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-145">
              <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CancellationPending">
      <MemberSignature Language="C#" Value="public bool CancellationPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancellationPending" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.CancellationPending" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CancellationPending As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CancellationPending { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CancellationPending : bool" Usage="System.ComponentModel.BackgroundWorker.CancellationPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6c2a5-146">Obtient une valeur qui indique si l'application a demandé l'annulation d'une opération d'arrière-plan.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-146">Gets a value indicating whether the application has requested cancellation of a background operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6c2a5-147">
            <see langword="true" /> si l'application a demandé l'annulation d'une opération d'arrière-plan ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-147">
              <see langword="true" /> if the application has requested cancellation of a background operation; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="6c2a5-148">La valeur par défaut est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-148">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c2a5-149">Si <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> est `true`, puis le <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> méthode a été appelée sur le <xref:System.ComponentModel.BackgroundWorker>.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-149">If <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> is `true`, then the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method has been called on the <xref:System.ComponentModel.BackgroundWorker>.</span></span>  
  
 <span data-ttu-id="6c2a5-150">Cette propriété est conçue pour une utilisation par le thread de travail qui doit vérifier périodiquement <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> et abandonner l’opération d’arrière-plan lorsqu’il est défini à `true`.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-150">This property is meant for use by the worker thread, which should periodically check <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> and abort the background operation when it is set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6c2a5-151">L’exemple de code suivant illustre l’utilisation de la <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> propriété pour interroger un <xref:System.ComponentModel.BackgroundWorker> sur son état d’annulation.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-151">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to query a <xref:System.ComponentModel.BackgroundWorker> about its cancellation state.</span></span> <span data-ttu-id="6c2a5-152">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-152">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#8)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#8)]
 [!code-vb[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="backgroundWorker.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="backgroundWorker.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoWork">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.DoWorkEventHandler DoWork;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.DoWorkEventHandler DoWork" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.DoWork" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DoWork As DoWorkEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::DoWorkEventHandler ^ DoWork;" />
      <MemberSignature Language="F#" Value="member this.DoWork : System.ComponentModel.DoWorkEventHandler " Usage="member this.DoWork : System.ComponentModel.DoWorkEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.DoWorkEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6c2a5-153">Se produit lorsque <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> est appelée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-153">Occurs when <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> is called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c2a5-154">Cet événement est déclenché lorsque vous appelez le <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="6c2a5-154">This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method.</span></span> <span data-ttu-id="6c2a5-155">Il s’agit où vous démarrez l’opération qui effectue la tâche potentiellement longue.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-155">This is where you start the operation that performs the potentially time-consuming work.</span></span>  
  
 <span data-ttu-id="6c2a5-156">Votre code dans le <xref:System.ComponentModel.BackgroundWorker.DoWork> Gestionnaire d’événements doit vérifier périodiquement la <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> valeur de propriété et d’abandonner l’opération si elle est `true`.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-156">Your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property value and abort the operation if it is `true`.</span></span> <span data-ttu-id="6c2a5-157">Lorsque cela se produit, vous pouvez définir le <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> indicateur de <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> à `true`et le <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> indicateur de <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> dans votre <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> Gestionnaire d’événements est défini sur `true`.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-157">When this occurs, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> to `true`, and the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will be set to `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="6c2a5-158">N’oubliez pas que votre code dans le <xref:System.ComponentModel.BackgroundWorker.DoWork> Gestionnaire d’événements peut terminer son travail comme une demande d’annulation, et votre boucle d’interrogation peut manquer <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> définie sur `true`.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-158">Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`.</span></span> <span data-ttu-id="6c2a5-159">Dans ce cas, le <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> indicateur de <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> dans votre <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> Gestionnaire d’événements ne sera pas défini `true`, même si une demande d’annulation a été effectuée.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-159">In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made.</span></span> <span data-ttu-id="6c2a5-160">Cette situation est appelée un *condition de concurrence* , un problème courant dans la programmation multithread.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-160">This situation is called a *race condition* and is a common concern in multithreaded programming.</span></span> <span data-ttu-id="6c2a5-161">Pour plus d’informations sur la conception multithread des problèmes, consultez [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span><span class="sxs-lookup"><span data-stu-id="6c2a5-161">For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span></span>  
  
 <span data-ttu-id="6c2a5-162">Si votre opération produit un résultat, vous pouvez affecter le résultat à la <xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=nameWithType> propriété.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-162">If your operation produces a result, you can assign the result to the <xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="6c2a5-163">Il sera disponible pour le <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> Gestionnaire d’événements dans le <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> propriété.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-163">This will be available to the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler in the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="6c2a5-164">Si l’opération lève une exception que votre code ne gère pas, le <xref:System.ComponentModel.BackgroundWorker> intercepte l’exception et la passe le <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> Gestionnaire d’événements, où elle est exposée en tant que le <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> propriété du <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-164">If the operation raises an exception that your code does not handle, the <xref:System.ComponentModel.BackgroundWorker> catches the exception and passes it into the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler, where it is exposed as the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6c2a5-165">Si vous exécutez le débogueur Visual Studio, le débogueur s’arrête au point dans le <xref:System.ComponentModel.BackgroundWorker.DoWork> Gestionnaire d’événements où l’exception non gérée a été levée.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-165">If you are running under the Visual Studio debugger, the debugger will break at the point in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler where the unhandled exception was raised.</span></span> <span data-ttu-id="6c2a5-166">Si vous avez plusieurs <xref:System.ComponentModel.BackgroundWorker>, vous ne devez pas faire référence un d'entre eux directement, car cette opération associerait votre <xref:System.ComponentModel.BackgroundWorker.DoWork> Gestionnaire d’événements à une instance spécifique de <xref:System.ComponentModel.BackgroundWorker>.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-166">If you have more than one <xref:System.ComponentModel.BackgroundWorker>, you should not reference any of them directly, as this would couple your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler to a specific instance of <xref:System.ComponentModel.BackgroundWorker>.</span></span> <span data-ttu-id="6c2a5-167">Au lieu de cela, vous devez accéder à votre <xref:System.ComponentModel.BackgroundWorker> en effectuant un cast du `sender` paramètre dans votre <xref:System.ComponentModel.BackgroundWorker.DoWork> Gestionnaire d’événements.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-167">Instead, you should access your <xref:System.ComponentModel.BackgroundWorker> by casting the `sender` parameter in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.</span></span>  
  
 <span data-ttu-id="6c2a5-168">Vous devez être prudent ne pas manipuler les objets d’interface utilisateur dans votre <xref:System.ComponentModel.BackgroundWorker.DoWork> Gestionnaire d’événements.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-168">You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.</span></span> <span data-ttu-id="6c2a5-169">À la place, communiquez à l’interface utilisateur via la <xref:System.ComponentModel.BackgroundWorker> événements.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-169">Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker> events.</span></span>  
  
 <span data-ttu-id="6c2a5-170">Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).</span><span class="sxs-lookup"><span data-stu-id="6c2a5-170">For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6c2a5-171">L’exemple de code suivant illustre l’utilisation de la <xref:System.ComponentModel.BackgroundWorker.DoWork> événement pour démarrer une opération asynchrone.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-171">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.DoWork> event to start an asynchronous operation.</span></span> <span data-ttu-id="6c2a5-172">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-172">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#5)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#5)]
 [!code-vb[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.IsBusy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBusy As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBusy { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBusy : bool" Usage="System.ComponentModel.BackgroundWorker.IsBusy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6c2a5-173">Obtient une valeur qui indique si <see cref="T:System.ComponentModel.BackgroundWorker" /> exécute une opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-173">Gets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> is running an asynchronous operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6c2a5-174">
            <see langword="true" />, si <see cref="T:System.ComponentModel.BackgroundWorker" /> exécute une opération asynchrone ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-174">
              <see langword="true" />, if the <see cref="T:System.ComponentModel.BackgroundWorker" /> is running an asynchronous operation; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c2a5-175">Le <xref:System.ComponentModel.BackgroundWorker> démarre une opération asynchrone lorsque vous appelez <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-175">The <xref:System.ComponentModel.BackgroundWorker> starts an asynchronous operation when you call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6c2a5-176">L’exemple de code suivant montre comment utiliser le <xref:System.ComponentModel.BackgroundWorker.IsBusy%2A> propriété à attendre la fin d’une <xref:System.ComponentModel.BackgroundWorker> opération.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-176">The following code example demonstrates how to use the <xref:System.ComponentModel.BackgroundWorker.IsBusy%2A> property to wait for completion of a <xref:System.ComponentModel.BackgroundWorker> operation.</span></span> <span data-ttu-id="6c2a5-177">Cet exemple de code fait partie d’un exemple plus complet décrit dans [Comment : télécharger un fichier en arrière-plan](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md).</span><span class="sxs-lookup"><span data-stu-id="6c2a5-177">This code example is part of a larger example described in [How to: Download a File in the Background](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/CS/Form1.cs#2)]
 [!code-vb[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
        <altmember cref="T:System.EventArgs" />
        <altmember cref="Overload:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />
      </Docs>
    </Member>
    <Member MemberName="OnDoWork">
      <MemberSignature Language="C#" Value="protected virtual void OnDoWork (System.ComponentModel.DoWorkEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDoWork(class System.ComponentModel.DoWorkEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDoWork (e As DoWorkEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDoWork(System::ComponentModel::DoWorkEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDoWork : System.ComponentModel.DoWorkEventArgs -&gt; unit&#xA;override this.OnDoWork : System.ComponentModel.DoWorkEventArgs -&gt; unit" Usage="backgroundWorker.OnDoWork e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.DoWorkEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="6c2a5-178">
            <see cref="T:System.EventArgs" /> qui contient les données d'événement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-178">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6c2a5-179">Déclenche l'événement <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-179">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnProgressChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnProgressChanged (System.ComponentModel.ProgressChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnProgressChanged(class System.ComponentModel.ProgressChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnProgressChanged (e As ProgressChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnProgressChanged(System::ComponentModel::ProgressChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnProgressChanged : System.ComponentModel.ProgressChangedEventArgs -&gt; unit&#xA;override this.OnProgressChanged : System.ComponentModel.ProgressChangedEventArgs -&gt; unit" Usage="backgroundWorker.OnProgressChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.ProgressChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="6c2a5-180">
            <see cref="T:System.EventArgs" /> qui contient les données d'événement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-180">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6c2a5-181">Déclenche l'événement <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-181">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c2a5-182">Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-182">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6c2a5-183">Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).</span><span class="sxs-lookup"><span data-stu-id="6c2a5-183">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6c2a5-184">La méthode <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-184">The <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6c2a5-185">Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-185">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6c2a5-186">L’exemple de code suivant illustre l’utilisation de la <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> méthode pour signaler la progression d’une opération asynchrone.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-186">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> method to report the progress of an asynchronous operation.</span></span> <span data-ttu-id="6c2a5-187">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.ComponentModel.AsyncOperationManager> classe.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-187">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#24)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#24)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="6c2a5-188">
            <para>Lors de la substitution <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-188">
              <para>When overriding <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> method so that registered delegates receive the event.</para>
            </span>
          </span>
        </block>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnRunWorkerCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnRunWorkerCompleted (System.ComponentModel.RunWorkerCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRunWorkerCompleted(class System.ComponentModel.RunWorkerCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRunWorkerCompleted (e As RunWorkerCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRunWorkerCompleted(System::ComponentModel::RunWorkerCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRunWorkerCompleted : System.ComponentModel.RunWorkerCompletedEventArgs -&gt; unit&#xA;override this.OnRunWorkerCompleted : System.ComponentModel.RunWorkerCompletedEventArgs -&gt; unit" Usage="backgroundWorker.OnRunWorkerCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.RunWorkerCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="6c2a5-189">
            <see cref="T:System.EventArgs" /> qui contient les données d'événement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-189">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6c2a5-190">Déclenche l'événement <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-190">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c2a5-191">Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-191">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="6c2a5-192">Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).</span><span class="sxs-lookup"><span data-stu-id="6c2a5-192">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="6c2a5-193">La méthode <xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-193">The <xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="6c2a5-194">Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-194">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="6c2a5-195">
            <para>Lors de la substitution <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-195">
              <para>When overriding <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> method so that registered delegates receive the event.</para>
            </span>
          </span>
        </block>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
      </Docs>
    </Member>
    <Member MemberName="ProgressChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.ProgressChangedEventHandler ProgressChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.ProgressChangedEventHandler ProgressChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ProgressChanged As ProgressChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::ProgressChangedEventHandler ^ ProgressChanged;" />
      <MemberSignature Language="F#" Value="member this.ProgressChanged : System.ComponentModel.ProgressChangedEventHandler " Usage="member this.ProgressChanged : System.ComponentModel.ProgressChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ProgressChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6c2a5-196">Se produit lorsque <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /> est appelée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-196">Occurs when <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /> is called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c2a5-197">Cet événement est déclenché lorsque vous appelez le <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="6c2a5-197">This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method.</span></span>  
  
 <span data-ttu-id="6c2a5-198">Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).</span><span class="sxs-lookup"><span data-stu-id="6c2a5-198">For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6c2a5-199">L’exemple de code suivant illustre l’utilisation de la <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> événement pour signaler la progression d’une opération asynchrone à l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-199">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event to report the progress of an asynchronous operation to the user.</span></span> <span data-ttu-id="6c2a5-200">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-200">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#7)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#7)]
 [!code-vb[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReportProgress">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6c2a5-201">Déclenche l'événement <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-201">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReportProgress">
      <MemberSignature Language="C#" Value="public void ReportProgress (int percentProgress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReportProgress(int32 percentProgress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReportProgress (percentProgress As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReportProgress(int percentProgress);" />
      <MemberSignature Language="F#" Value="member this.ReportProgress : int -&gt; unit" Usage="backgroundWorker.ReportProgress percentProgress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="percentProgress" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="percentProgress">
          <span data-ttu-id="6c2a5-202">Pourcentage, de 0 à 100, de l'opération d'arrière-plan qui est terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-202">The percentage, from 0 to 100, of the background operation that is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6c2a5-203">Déclenche l'événement <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-203">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c2a5-204">Si vous avez besoin de l’opération d’arrière-plan pour signaler la progression, vous pouvez appeler la <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> méthode pour déclencher le <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> événement.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-204">If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span> <span data-ttu-id="6c2a5-205">Le <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> la valeur de propriété doit être `true`, ou <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> lèvera une <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-205">The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must be `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="6c2a5-206">C’est à vous permet d’implémenter une façon explicite de mesurer la progression de votre opération d’arrière-plan en pourcentage du total de la tâche s’est terminé.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-206">It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</span></span>  
  
 <span data-ttu-id="6c2a5-207">L’appel à la <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> méthode est asynchrone et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-207">The call to the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method is asynchronous and returns immediately.</span></span> <span data-ttu-id="6c2a5-208">Le <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> Gestionnaire d’événements s’exécute sur le thread qui a créé le <xref:System.ComponentModel.BackgroundWorker>.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-208">The <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event handler executes on the thread that created the <xref:System.ComponentModel.BackgroundWorker>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6c2a5-209">L’exemple de code suivant illustre l’utilisation de la <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> méthode pour signaler la progression d’une opération asynchrone à l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-209">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to report the progress of an asynchronous operation to the user.</span></span> <span data-ttu-id="6c2a5-210">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-210">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#8)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#8)]
 [!code-vb[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6c2a5-211">La propriété <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> a la valeur <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-211">The <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> property is set to <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReportProgress">
      <MemberSignature Language="C#" Value="public void ReportProgress (int percentProgress, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReportProgress(int32 percentProgress, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReportProgress (percentProgress As Integer, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReportProgress(int percentProgress, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.ReportProgress : int * obj -&gt; unit" Usage="backgroundWorker.ReportProgress (percentProgress, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="percentProgress" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="percentProgress">
          <span data-ttu-id="6c2a5-212">Pourcentage, de 0 à 100, de l'opération d'arrière-plan qui est terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-212">The percentage, from 0 to 100, of the background operation that is complete.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="6c2a5-213">L'objet d'état est passé à <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-213">The state object passed to <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6c2a5-214">Déclenche l'événement <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-214">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c2a5-215">Si vous avez besoin de l’opération d’arrière-plan pour signaler la progression, vous pouvez appeler la <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> méthode pour déclencher le <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> événement.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-215">If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span> <span data-ttu-id="6c2a5-216">Le <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> la valeur de propriété doit `true`, ou <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> lèvera une <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-216">The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="6c2a5-217">C’est à vous permet d’implémenter une façon explicite de mesurer la progression de votre opération d’arrière-plan en pourcentage du total de la tâche s’est terminé.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-217">It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6c2a5-218">L’exemple de code suivant illustre l’utilisation de la <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> méthode pour signaler la progression d’une opération asynchrone à l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-218">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to report the progress of an asynchronous operation to the user.</span></span> <span data-ttu-id="6c2a5-219">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Windows.Forms.ToolStripProgressBar> classe.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-219">This code example is part of a larger example provided for the <xref:System.Windows.Forms.ToolStripProgressBar> class.</span></span>  
  
 [!code-csharp[System.Windows.Forms.ToolStripProgressBar#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ToolStripProgressBar/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.ToolStripProgressBar#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ToolStripProgressBar/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6c2a5-220">La propriété <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> a la valeur <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-220">The <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> property is set to <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RunWorkerAsync">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6c2a5-221">Démarre l'exécution d'une opération d'arrière-plan.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-221">Starts execution of a background operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RunWorkerAsync">
      <MemberSignature Language="C#" Value="public void RunWorkerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunWorkerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunWorkerAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunWorkerAsync();" />
      <MemberSignature Language="F#" Value="member this.RunWorkerAsync : unit -&gt; unit" Usage="backgroundWorker.RunWorkerAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6c2a5-222">Démarre l'exécution d'une opération d'arrière-plan.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-222">Starts execution of a background operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c2a5-223">Le <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> méthode soumet une demande de démarrage de l’opération en cours d’exécution en mode asynchrone.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-223">The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously.</span></span> <span data-ttu-id="6c2a5-224">Lorsque la demande est traitée, le <xref:System.ComponentModel.BackgroundWorker.DoWork> événement est déclenché, ce qui lance ensuite votre opération d’arrière-plan.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-224">When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.</span></span>  
  
 <span data-ttu-id="6c2a5-225">Si l’opération d’arrière-plan est déjà en cours d’exécution, l’appel <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> lève une <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-225">If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6c2a5-226">L’exemple de code suivant illustre l’utilisation de la <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> méthode pour démarrer une opération asynchrone.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-226">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method to start an asynchronous operation.</span></span> <span data-ttu-id="6c2a5-227">Il fait partie d’un exemple plus complet décrit dans [Comment : télécharger un fichier en arrière-plan](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md).</span><span class="sxs-lookup"><span data-stu-id="6c2a5-227">It is part of a larger example described in [How to: Download a File in the Background](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/CS/Form1.cs#2)]
 [!code-vb[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6c2a5-228">
            <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> est <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-228">
              <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.DoWork" />
      </Docs>
    </Member>
    <Member MemberName="RunWorkerAsync">
      <MemberSignature Language="C#" Value="public void RunWorkerAsync (object argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunWorkerAsync(object argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunWorkerAsync (argument As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunWorkerAsync(System::Object ^ argument);" />
      <MemberSignature Language="F#" Value="member this.RunWorkerAsync : obj -&gt; unit" Usage="backgroundWorker.RunWorkerAsync argument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="argument">
          <span data-ttu-id="6c2a5-229">Paramètre disponible pour une exécution par l'opération d'arrière-plan dans le gestionnaire d'événements <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-229">A parameter for use by the background operation to be executed in the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> event handler.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6c2a5-230">Démarre l'exécution d'une opération d'arrière-plan.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-230">Starts execution of a background operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c2a5-231">Le <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> méthode soumet une demande de démarrage de l’opération en cours d’exécution en mode asynchrone.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-231">The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously.</span></span> <span data-ttu-id="6c2a5-232">Lorsque la demande est traitée, le <xref:System.ComponentModel.BackgroundWorker.DoWork> événement est déclenché, ce qui lance ensuite votre opération d’arrière-plan.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-232">When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.</span></span>  
  
 <span data-ttu-id="6c2a5-233">Si votre opération requiert un paramètre, vous pouvez fournir en tant que le `argument` paramètre <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-233">If your operation requires a parameter, you can provide it as the `argument` parameter to <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span></span>  
  
 <span data-ttu-id="6c2a5-234">Si l’opération d’arrière-plan est déjà en cours d’exécution, l’appel <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> lève une <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-234">If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6c2a5-235">L’exemple de code suivant illustre l’utilisation de la <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> méthode pour démarrer une opération asynchrone.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-235">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method to start an asynchronous operation.</span></span> <span data-ttu-id="6c2a5-236">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-236">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#3)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#3)]
 [!code-vb[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6c2a5-237">
            <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> est <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-237">
              <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.DoWork" />
      </Docs>
    </Member>
    <Member MemberName="RunWorkerCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.RunWorkerCompletedEventHandler RunWorkerCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.RunWorkerCompletedEventHandler RunWorkerCompleted" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RunWorkerCompleted As RunWorkerCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::RunWorkerCompletedEventHandler ^ RunWorkerCompleted;" />
      <MemberSignature Language="F#" Value="member this.RunWorkerCompleted : System.ComponentModel.RunWorkerCompletedEventHandler " Usage="member this.RunWorkerCompleted : System.ComponentModel.RunWorkerCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.RunWorkerCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6c2a5-238">Se produit lorsque l'opération d'arrière-plan est terminée, a été annulée ou a levé une exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-238">Occurs when the background operation has completed, has been canceled, or has raised an exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c2a5-239">Cet événement est déclenché lorsque la <xref:System.ComponentModel.BackgroundWorker.DoWork> retourne de gestionnaire d’événements.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-239">This event is raised when the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler returns.</span></span>  
  
 <span data-ttu-id="6c2a5-240">Si l’opération est terminée avec succès et que son résultat est assigné dans le <xref:System.ComponentModel.BackgroundWorker.DoWork> Gestionnaire d’événements, vous pouvez accéder au résultat via la <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> propriété.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-240">If the operation completes successfully and its result is assigned in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can access the result through the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="6c2a5-241">Le <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> propriété du <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> indique qu’une exception a été levée par l’opération.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-241">The <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> indicates that an exception was thrown by the operation.</span></span>  
  
 <span data-ttu-id="6c2a5-242">Le <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> propriété <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> indique si une demande d’annulation a été traitée par l’opération d’arrière-plan.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-242">The <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> indicates whether a cancellation request was processed by the background operation.</span></span> <span data-ttu-id="6c2a5-243">Si votre code dans le <xref:System.ComponentModel.BackgroundWorker.DoWork> Gestionnaire d’événements détecte une demande d’annulation en vérifiant la <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> indicateur et en définissant le <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> indicateur de <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> à `true`, le <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> indicateur de <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> également sera défini sur `true`.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-243">If your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler detects a cancellation request by checking the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> flag and setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> to `true`, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> also will be set to `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="6c2a5-244">N’oubliez pas que votre code dans le <xref:System.ComponentModel.BackgroundWorker.DoWork> Gestionnaire d’événements peut terminer son travail comme une demande d’annulation, et votre boucle d’interrogation peut manquer <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> définie sur `true`.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-244">Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`.</span></span> <span data-ttu-id="6c2a5-245">Dans ce cas, le <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> indicateur de <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> dans votre <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> Gestionnaire d’événements ne sera pas défini `true`, même si une demande d’annulation a été effectuée.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-245">In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made.</span></span> <span data-ttu-id="6c2a5-246">Cette situation est appelée un *condition de concurrence* , un problème courant dans la programmation multithread.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-246">This situation is called a *race condition* and is a common concern in multithreaded programming.</span></span> <span data-ttu-id="6c2a5-247">Pour plus d’informations sur la conception multithread des problèmes, consultez [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span><span class="sxs-lookup"><span data-stu-id="6c2a5-247">For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span></span>  
  
 <span data-ttu-id="6c2a5-248">Votre <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> Gestionnaire d’événements doit toujours vérifier les <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType> et <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=nameWithType> propriétés avant d’accéder à la <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> propriété.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-248">Your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler should always check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType> and <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=nameWithType> properties before accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="6c2a5-249">Si une exception a été levée ou si l’opération a été annulée, l’accès à la <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> propriété lève une exception.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-249">If an exception was raised or if the operation was canceled, accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property raises an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6c2a5-250">L’exemple de code suivant illustre l’utilisation de la <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> événements pour gérer le résultat d’une opération asynchrone.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-250">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event to handle the result of an asynchronous operation.</span></span> <span data-ttu-id="6c2a5-251">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-251">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#6)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#6)]
 [!code-vb[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkerReportsProgress">
      <MemberSignature Language="C#" Value="public bool WorkerReportsProgress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WorkerReportsProgress" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" />
      <MemberSignature Language="VB.NET" Value="Public Property WorkerReportsProgress As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WorkerReportsProgress { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WorkerReportsProgress : bool with get, set" Usage="System.ComponentModel.BackgroundWorker.WorkerReportsProgress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6c2a5-252">Obtient ou définit une valeur qui indique si <see cref="T:System.ComponentModel.BackgroundWorker" /> peut signaler des mises à jour de progression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-252">Gets or sets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> can report progress updates.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6c2a5-253">
            <see langword="true" /> si <see cref="T:System.ComponentModel.BackgroundWorker" /> prend en charge les mises à jour de progression ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-253">
              <see langword="true" /> if the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports progress updates; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="6c2a5-254">La valeur par défaut est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-254">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c2a5-255">Définir le <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> propriété `true` si vous souhaitez que le <xref:System.ComponentModel.BackgroundWorker> pour prendre en charge les mises à jour de progression.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-255">Set the <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support progress updates.</span></span> <span data-ttu-id="6c2a5-256">Lorsque cette propriété est `true`, le code utilisateur peut appeler le <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> méthode pour déclencher le <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> événement.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-256">When this property is `true`, user code can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WorkerSupportsCancellation">
      <MemberSignature Language="C#" Value="public bool WorkerSupportsCancellation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WorkerSupportsCancellation" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" />
      <MemberSignature Language="VB.NET" Value="Public Property WorkerSupportsCancellation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WorkerSupportsCancellation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WorkerSupportsCancellation : bool with get, set" Usage="System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6c2a5-257">Obtient ou définit une valeur qui indique si <see cref="T:System.ComponentModel.BackgroundWorker" /> prend en charge l'annulation asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-257">Gets or sets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports asynchronous cancellation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6c2a5-258">
            <see langword="true" /> si <see cref="T:System.ComponentModel.BackgroundWorker" /> prend en charge l'annulation ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-258">
              <see langword="true" /> if the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports cancellation; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="6c2a5-259">La valeur par défaut est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6c2a5-259">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6c2a5-260">Définir le <xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A> propriété `true` si vous souhaitez que le <xref:System.ComponentModel.BackgroundWorker> pour prendre en charge l’annulation.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-260">Set the <xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support cancellation.</span></span> <span data-ttu-id="6c2a5-261">Lorsque cette propriété est `true`, vous pouvez appeler la <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> méthode pour interrompre une opération d’arrière-plan.</span><span class="sxs-lookup"><span data-stu-id="6c2a5-261">When this property is `true`, you can call the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method to interrupt a background operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.BackgroundWorker.CancelAsync" />
      </Docs>
    </Member>
  </Members>
</Type>