<Type Name="LicFileLicenseProvider" FullName="System.ComponentModel.LicFileLicenseProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4419962595c8c5a58f62fe680ed21620082c3d1c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LicFileLicenseProvider : System.ComponentModel.LicenseProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LicFileLicenseProvider extends System.ComponentModel.LicenseProvider" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.LicFileLicenseProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class LicFileLicenseProvider&#xA;Inherits LicenseProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class LicFileLicenseProvider : System::ComponentModel::LicenseProvider" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.LicenseProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="b1b38-101">Fournit une implémentation d'un <see cref="T:System.ComponentModel.LicenseProvider" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b1b38-101">Provides an implementation of a <see cref="T:System.ComponentModel.LicenseProvider" />.</span>
      </span>
      <span data-ttu-id="b1b38-102">Le fournisseur fonctionne de la même manière que le modèle d'attribution de licence standard Microsoft .NET Framework.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b1b38-102">The provider works in a similar fashion to the Microsoft .NET Framework standard licensing model.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1b38-103">Le <xref:System.ComponentModel.LicFileLicenseProvider> offre <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> et <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="b1b38-103">The <xref:System.ComponentModel.LicFileLicenseProvider> offers <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> and <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> methods.</span></span> <span data-ttu-id="b1b38-104">Le <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> méthode détermine si le <xref:System.ComponentModel.License.LicenseKey%2A> récupérées par le <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> méthode n’est valide.</span><span class="sxs-lookup"><span data-stu-id="b1b38-104">The <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method determines whether the <xref:System.ComponentModel.License.LicenseKey%2A> retrieved by the <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> method is valid.</span></span> <span data-ttu-id="b1b38-105">Lorsque vous héritez de cette classe, vous pouvez substituer le <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> méthode pour fournir votre propre logique de validation.</span><span class="sxs-lookup"><span data-stu-id="b1b38-105">When you inherit from this class, you can override the <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method to provide your own validation logic.</span></span>  
  
 <span data-ttu-id="b1b38-106">Cette classe fournit des fonctionnalités de licence similaires à la licence de COM et utilise des fichiers de licence de texte.</span><span class="sxs-lookup"><span data-stu-id="b1b38-106">This class exists to provide similar licensing functionality to COM licensing and uses text license files.</span></span>  
  
 <span data-ttu-id="b1b38-107">Pour plus d’informations sur les licences, consultez [Comment : composants de licence et des contrôles](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57).</span><span class="sxs-lookup"><span data-stu-id="b1b38-107">For more information on licensing, see [How to: License Components and Controls](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1b38-108">L’exemple suivant crée un contrôle sous licence à l’aide de la <xref:System.ComponentModel.LicenseManager.Validate%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="b1b38-108">The following example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method.</span></span> <span data-ttu-id="b1b38-109">Il utilise <xref:System.ComponentModel.LicFileLicenseProvider> pour le Gestionnaire de licences.</span><span class="sxs-lookup"><span data-stu-id="b1b38-109">It uses <xref:System.ComponentModel.LicFileLicenseProvider> for the license manager.</span></span>  
  
 [!code-cpp[Classic LicenseManager Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic LicenseManager Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LicenseManager Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic LicenseManager Example/CS/source.cs#1)]
 [!code-vb[Classic LicenseManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic LicenseManager Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.License" />
    <altmember cref="T:System.ComponentModel.LicenseContext" />
    <altmember cref="T:System.ComponentModel.LicenseException" />
    <altmember cref="T:System.ComponentModel.LicenseManager" />
    <altmember cref="T:System.ComponentModel.LicenseProvider" />
    <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
    <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
    <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LicFileLicenseProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LicFileLicenseProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b1b38-110">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicFileLicenseProvider" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1b38-110">Initializes a new instance of the <see cref="T:System.ComponentModel.LicFileLicenseProvider" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseManager" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="GetKey">
      <MemberSignature Language="C#" Value="protected virtual string GetKey (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetKey(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetKey(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="b1b38-111">Type d'objet dont la clé doit être retournée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1b38-111">The object type to return the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b1b38-112">Retourne une clé pour le type spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1b38-112">Returns a key for the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b1b38-113">Confirme que le paramètre <paramref name="type" /> est sous licence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1b38-113">A confirmation that the <paramref name="type" /> parameter is licensed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseManager" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="GetLicense">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.License GetLicense (System.ComponentModel.LicenseContext context, Type type, object instance, bool allowExceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ComponentModel.License GetLicense(class System.ComponentModel.LicenseContext context, class System.Type type, object instance, bool allowExceptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::ComponentModel::License ^ GetLicense(System::ComponentModel::LicenseContext ^ context, Type ^ type, System::Object ^ instance, bool allowExceptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.License</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.LicenseContext" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="allowExceptions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="b1b38-114">
            <see cref="T:System.ComponentModel.LicenseContext" /> spécifiant l'endroit où vous pouvez utiliser l'objet sous licence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1b38-114">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies where you can use the licensed object.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="b1b38-115">
            <see cref="T:System.Type" /> représentant le composant qui demande le <see cref="T:System.ComponentModel.License" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1b38-115">A <see cref="T:System.Type" /> that represents the component requesting the <see cref="T:System.ComponentModel.License" />.</span>
          </span>
        </param>
        <param name="instance">
          <span data-ttu-id="b1b38-116">Objet qui demande le <see cref="T:System.ComponentModel.License" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1b38-116">An object that requests the <see cref="T:System.ComponentModel.License" />.</span>
          </span>
        </param>
        <param name="allowExceptions">
          <span data-ttu-id="b1b38-117">
            <see langword="true" /> si <see cref="T:System.ComponentModel.LicenseException" /> doit être levé si aucune licence ne peut être accordée à un composant ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1b38-117">
              <see langword="true" /> if a <see cref="T:System.ComponentModel.LicenseException" /> should be thrown when a component cannot be granted a license; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b1b38-118">Retourne une licence éventuelle pour l'instance du composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1b38-118">Returns a license for the instance of the component, if one is available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b1b38-119">
            <see cref="T:System.ComponentModel.License" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1b38-119">A valid <see cref="T:System.ComponentModel.License" />.</span>
          </span>
          <span data-ttu-id="b1b38-120">Si cette méthode ne parvient pas à trouver un <see cref="T:System.ComponentModel.License" /> valide ou un paramètre <paramref name="context" /> valide, elle retourne <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1b38-120">If this method cannot find a valid <see cref="T:System.ComponentModel.License" /> or a valid <paramref name="context" /> parameter, it returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1b38-121">Au moment du design, le <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> méthode recherche un fichier de licence nommé `myClassName.LIC`, où `myClassName` est la <xref:System.Type.FullName%2A> du composant à créer.</span><span class="sxs-lookup"><span data-stu-id="b1b38-121">At design time, the <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> method looks for a license file named `myClassName.LIC`, where `myClassName` is the <xref:System.Type.FullName%2A> of the component to create.</span></span> <span data-ttu-id="b1b38-122">Ce fichier doit être dans le même répertoire que le fichier .dll qui contient le composant.</span><span class="sxs-lookup"><span data-stu-id="b1b38-122">This file must be in the same directory as the .dll file that contains the component.</span></span>  
  
 <span data-ttu-id="b1b38-123">Ensuite, cette méthode vérifie la première ligne du fichier de licence par rapport à une clé spécifiée dans le <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="b1b38-123">Next, this method checks the first line of the license file against a key specified in the <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> method.</span></span> <span data-ttu-id="b1b38-124">Si la clé est valide, cette ligne est utilisée en tant que le <xref:System.ComponentModel.License.LicenseKey%2A>.</span><span class="sxs-lookup"><span data-stu-id="b1b38-124">If the key is valid, this line is used as the <xref:System.ComponentModel.License.LicenseKey%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseManager" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyValid">
      <MemberSignature Language="C#" Value="protected virtual bool IsKeyValid (string key, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsKeyValid(string key, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsKeyValid(System::String ^ key, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="b1b38-125">
            <see cref="P:System.ComponentModel.License.LicenseKey" /> à vérifier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1b38-125">The <see cref="P:System.ComponentModel.License.LicenseKey" /> to check.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="b1b38-126">
            <see cref="T:System.Type" /> représentant le composant qui demande le <see cref="T:System.ComponentModel.License" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1b38-126">A <see cref="T:System.Type" /> that represents the component requesting the <see cref="T:System.ComponentModel.License" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b1b38-127">Détermine si la clé récupérée par la méthode <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> est valide pour le type spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1b38-127">Determines whether the key that the <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> method retrieves is valid for the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b1b38-128">
            <see langword="true" /> si la clé est un <see cref="P:System.ComponentModel.License.LicenseKey" /> valide pour le type spécifié ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1b38-128">
              <see langword="true" /> if the key is a valid <see cref="P:System.ComponentModel.License.LicenseKey" /> for the specified type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1b38-129">Cette méthode vérifie la clé par rapport à l’expression : « `myClassName is a licensed component.` », où `myClassName` est la <xref:System.Type.FullName%2A> du composant que vous souhaitez créer.</span><span class="sxs-lookup"><span data-stu-id="b1b38-129">This method checks the key against the phrase: " `myClassName is a licensed component.` ", where `myClassName` is the <xref:System.Type.FullName%2A> of the component you want to create.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="b1b38-130">Lorsque vous héritez de cette classe, vous pouvez substituer cette méthode pour fournir votre propre logique de validation.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b1b38-130">When you inherit from this class, you can override this method to provide your own validation logic.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseManager" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
  </Members>
</Type>