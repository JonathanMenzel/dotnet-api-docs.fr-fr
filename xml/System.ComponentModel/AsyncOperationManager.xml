<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AsyncOperationManager.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5606bfa8ffd9f758de42817a0e4e7eaf9e11c8260.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">606bfa8ffd9f758de42817a0e4e7eaf9e11c8260</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>Provides concurrency management for classes that support asynchronous method calls.</source>
          <target state="translated">Fournit la gestion de l'accès concurrentiel pour les classes qui prennent en charge des appels de méthode asynchrone.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>This class cannot be inherited.</source>
          <target state="translated">Cette classe ne peut pas être héritée.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>If your class needs to provide asynchronous behavior according to the <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, you will encounter a number of concurrency management issues.</source>
          <target state="translated">Si votre classe doit fournir un comportement asynchrone en fonction de la <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, vous rencontrerez un nombre de problèmes de gestion d’accès concurrentiel.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>Among these is the requirement to ensure that event handlers are called on a thread or context that is appropriate for the application model (for example, Windows Forms applications, <ph id="ph1">[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]</ph> applications, console applications, and so on).</source>
          <target state="translated">Parmi celles-ci est la nécessité de garantir que les gestionnaires d’événements sont appelés sur un thread ou le contexte approprié pour le modèle d’application (par exemple, les applications Windows Forms, <ph id="ph1">[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]</ph> applications, les applications console, etc.).</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> provides a convenient way to create a class that runs properly under all application models supported by the <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> fournit un moyen pratique de créer une classe qui s’exécute correctement sur tous les modèles d’application pris en charge par le <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> class has one method, <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph>, which returns an <ph id="ph3">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> that can be used to track the duration of a particular asynchronous task.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> classe possède une méthode, <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph>, qui retourne un <ph id="ph3">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> qui peut être utilisé pour suivre la durée d’une tâche asynchrone particulière.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> for a task can be used to alert clients when a task completes.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> pour une tâche peut être utilisé pour alerter des clients lorsqu’une tâche se termine.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>It can also be used to post progress updates and incremental results without terminating the operation.</source>
          <target state="translated">Il peut également être utilisé pour publier des mises à jour de progression et des résultats incrémentiels sans terminer l’opération.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur l’implémentation de classes asynchrones, consultez <bpt id="p1">[</bpt>implémentation du modèle asynchrone basé sur événement<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> class to create a class that supports asynchronous operations for any application model.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser la <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> classe pour créer une classe qui prend en charge des opérations asynchrones pour tout modèle d’application.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>It shows how to implement a class that tests a number to determine whether it is prime.</source>
          <target state="translated">Il montre comment implémenter une classe qui teste un nombre pour déterminer s’il est le premier.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>This calculation can be time consuming, so it is done on a separate thread.</source>
          <target state="translated">Ce calcul peut prendre beaucoup de temps, par conséquent, elle est effectuée sur un thread distinct.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>Progress reports, incremental results, and completion notifications are handled by the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> class, which ensures that the client's event handlers are called on the proper thread or context.</source>
          <target state="translated">Rapports de progression, les résultats incrémentiels et les notifications de fin sont gérées par le <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> (classe), ce qui garantit que les gestionnaires d’événements du client sont appelés sur le thread ou contexte adéquat.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>For a full code listing, see <bpt id="p1">[</bpt>How to: Implement a Component That Supports the Event-based Asynchronous Pattern<ept id="p1">](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)</ept>.</source>
          <target state="translated">Pour une liste de code complet, consultez <bpt id="p1">[</bpt>Comment : implémenter un composant qui prend en charge le modèle asynchrone basé sur événement<ept id="p1">](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperationManager">
          <source>For a full code listing of a client form, see <bpt id="p1">[</bpt>How to: Implement a Client of the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">Pour une liste de code complet d’un formulaire client, consultez <bpt id="p1">[</bpt>Comment : implémenter un Client du modèle asynchrone basé sur événement<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>An object used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.</source>
          <target state="translated">Objet utilisé pour associer une portion d'état client, telle qu'un identificateur de tâche, à une opération asynchrone particulière.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncOperation" /&gt;</ph> for tracking the duration of a particular asynchronous operation.</source>
          <target state="translated">Retourne <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncOperation" /&gt;</ph> permettant de suivre la durée d'une opération asynchrone particulière.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncOperation" /&gt;</ph> that you can use to track the duration of an asynchronous method invocation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncOperation" /&gt;</ph> que vous pouvez utiliser pour suivre la durée d'un appel de méthode asynchrone.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> method returns an <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> that you can use to track the duration of a particular asynchronous operation and to alert the application model when the operation completes.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> méthode retourne un <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> que vous pouvez utiliser pour suivre la durée d’une opération asynchrone particulière et pour alerter le modèle d’application lorsque l’opération se termine.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>You can also use it to post progress updates and incremental results without terminating the operation.</source>
          <target state="translated">Vous pouvez également l’utiliser pour publier des mises à jour de progression et des résultats incrémentiels sans terminer l’opération.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> will correctly marshal these calls to the appropriate thread or context for the application model.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> marshale correctement ces appels vers le thread approprié ou le contexte pour le modèle d’application.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>If you implement a class that supports the Event-based Asynchronous Pattern, your class should call <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> each time your <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph2">`Async`</ph> method is called.</source>
          <target state="translated">Si vous implémentez une classe qui prend en charge le modèle asynchrone basé sur des événements, votre classe doit appeler <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> chaque fois que votre <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept> <ph id="ph2">`Async`</ph> méthode est appelée.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>The client application that makes calls to the method can use the <ph id="ph1">`userSuppliedState`</ph> parameter to uniquely identify each invocation, so as to distinguish events raised during the execution of the asynchronous operation.</source>
          <target state="translated">L’application cliente qui effectue des appels à la méthode peut utiliser le <ph id="ph1">`userSuppliedState`</ph> paramètre pour identifier de façon unique chaque appel, afin de distinguer les événements déclenchés lors de l’exécution de l’opération asynchrone.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>Client code must provide a unique value for the <ph id="ph1">`userSuppliedState`</ph> parameter.</source>
          <target state="translated">Le code client doit fournir une valeur unique pour le <ph id="ph1">`userSuppliedState`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</source>
          <target state="translated">ID de tâche non uniques peuvent entraîner votre implémentation à signaler la progression et autres événements incorrectement.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>Your code should check for a non-unique task ID and throw an <ph id="ph1">&lt;xref:System.ArgumentException?displayProperty=nameWithType&gt;</ph> if one is detected.</source>
          <target state="translated">Votre code doit vérifier un ID de tâche non unique et lever une <ph id="ph1">&lt;xref:System.ArgumentException?displayProperty=nameWithType&gt;</ph> si celle-ci est détectée.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>Your code should track every <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> returned by <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> and use the object in the corresponding underlying asynchronous operation to post updates and terminate the operation.</source>
          <target state="translated">Votre code doit suivre chaque <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> retourné par <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> et utiliser l’objet dans l’opération asynchrone sous-jacente correspondante pour publier des mises à jour et de terminer l’opération.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>This tracking can be as simple as passing the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> as a parameter among delegates.</source>
          <target state="translated">Ce suivi peut être aussi simple que le passage de le <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> en tant que paramètre entre des délégués.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>In more sophisticated designs, your class can maintain a collection of <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> objects, adding objects when tasks are started and removing them when tasks are completed or canceled.</source>
          <target state="translated">Dans les conceptions plus sophistiquées, votre classe peut gérer une collection de <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> objets, en ajoutant des objets lorsque des tâches sont démarrées et en les supprimant lorsque des tâches sont terminées ou annulées.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>This approach allows you to check for unique <ph id="ph1">`userSuppliedState`</ph> parameter values, and is the method you should use when working with classes that support multiple concurrent invocations.</source>
          <target state="translated">Cette approche vous permet de vérifier pour unique <ph id="ph1">`userSuppliedState`</ph> paramètre et la méthode à utiliser lors de l’utilisation des classes qui prennent en charge plusieurs appels simultanés.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur l’implémentation de classes asynchrones, consultez <bpt id="p1">[</bpt>implémentation du modèle asynchrone basé sur événement<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> method to create an <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> for tracking the duration of asynchronous operations.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser le <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> méthode pour créer un <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType&gt;</ph> pour le suivi de la durée des opérations asynchrones.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>Gets or sets the synchronization context for the asynchronous operation.</source>
          <target state="translated">Obtient ou définit le contexte de synchronisation pour l'opération asynchrone.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>The synchronization context for the asynchronous operation.</source>
          <target state="translated">Contexte de synchronisation pour l'opération asynchrone.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>The default implementation is the free-threaded implementation.</source>
          <target state="translated">L’implémentation par défaut est l’implémentation libre de threads.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>A thread should set the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A&gt;</ph> property to <ph id="ph2">`null`</ph> to release the free-threaded factory when it is done, or else its factory will never be disposed.</source>
          <target state="translated">Un thread doit affecter la <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A&gt;</ph> propriété <ph id="ph2">`null`</ph> pour libérer la fabrique libre de threads lorsqu’il est fait, sinon sa fabrique ne sera jamais supprimée.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>for setting the synchronization context.</source>
          <target state="translated">Pour définir le contexte de synchronisation.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>Demand value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">Valeur de la demande : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
          <source>Associated state:</source>
          <target state="translated">État associé :</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>