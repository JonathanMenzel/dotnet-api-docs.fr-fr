<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c0758038abe314d7edf4ae6dd21fb9aae6a993bd" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58733446" /></Metadata><TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit la gestion de l'accès concurrentiel pour les classes qui prennent en charge des appels de méthode asynchrone. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si votre classe doit fournir un comportement asynchrone en fonction de la [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), vous rencontrerez plusieurs problèmes de gestion d’accès concurrentiel. Parmi ces aspects figure la nécessité de garantir que les gestionnaires d’événements sont appelés sur un thread ou le contexte approprié pour le modèle d’application (par exemple, les applications Windows Forms, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] applications, les applications de console et ainsi de suite). Le <xref:System.ComponentModel.AsyncOperationManager> offre un moyen pratique pour créer une classe qui s’exécute correctement sur tous les modèles d’application pris en charge par le [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].  
  
 Le <xref:System.ComponentModel.AsyncOperationManager> classe a une méthode, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, qui retourne un <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> qui peut être utilisé pour suivre la durée d’une tâche asynchrone particulière. Le <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> pour une tâche peut être utilisé pour alerter des clients lorsqu’une tâche se termine. Il peut également être utilisé pour publier des mises à jour de progression et des résultats incrémentiels sans terminer l’opération.  
  
 Pour plus d’informations sur l’implémentation de classes asynchrones, consultez [implémenter le modèle asynchrone basé sur événement](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.ComponentModel.AsyncOperationManager> classe pour créer une classe qui prend en charge des opérations asynchrones pour tout modèle d’application. Il montre comment implémenter une classe qui teste un nombre pour déterminer s’il est premier. Ce calcul peut prendre du temps, donc il est effectué sur un thread distinct. Rapports de progression, les résultats incrémentiels et les notifications de saisie semi-automatique sont gérées par le <xref:System.ComponentModel.AsyncOperation> (classe), ce qui garantit que les gestionnaires d’événements du client sont appelés sur le thread ou contexte adéquat.  
  
 Pour obtenir la liste complète de code, consultez [Comment : implémenter un composant qui prend en charge le modèle asynchrone basé sur des événements](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). Pour obtenir la liste complète de code d’un formulaire client, consultez [Comment : implémenter un client du modèle asynchrone basé sur des événements](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
    <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">Implémentation du modèle asynchrone basé sur des événements</related>
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Meilleures pratiques pour le threading managé</related>
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberSignature Language="F#" Value="static member CreateOperation : obj -&gt; System.ComponentModel.AsyncOperation" Usage="System.ComponentModel.AsyncOperationManager.CreateOperation userSuppliedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState">Objet utilisé pour associer une portion d'état client, telle qu'un identificateur de tâche, à une opération asynchrone particulière.</param>
        <summary>Retourne <see cref="T:System.ComponentModel.AsyncOperation" /> permettant de suivre la durée d'une opération asynchrone particulière.</summary>
        <returns><see cref="T:System.ComponentModel.AsyncOperation" /> que vous pouvez utiliser pour suivre la durée d'un appel de méthode asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> méthode retourne un <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> que vous pouvez utiliser pour suivre la durée d’une opération asynchrone particulière et pour alerter le modèle d’application lorsque l’opération se termine. Vous pouvez également l’utiliser pour publier des mises à jour de progression et des résultats incrémentiels sans terminer l’opération. Le <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> marshale correctement ces appels vers le contexte pour le modèle d’application ou le thread approprié.  
  
 Si vous implémentez une classe qui prend en charge le modèle asynchrone basé sur des événements, votre classe doit appeler <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> chaque fois que votre *Nom_méthode* `Async` méthode est appelée. L’application cliente qui effectue des appels à la méthode peut utiliser le `userSuppliedState` paramètre pour identifier de façon unique chaque appel, afin de distinguer les événements déclenchés lors de l’exécution de l’opération asynchrone.  
  
> [!CAUTION]
>  Le code client doit fournir une valeur unique pour le `userSuppliedState` paramètre. ID de tâche non uniques peuvent entraîner votre implémentation à signaler la progression et les autres événements incorrectement. Votre code doit vérifier un ID de tâche non unique et lever une <xref:System.ArgumentException?displayProperty=nameWithType> si celle-ci est détectée.  
  
 Votre code doit suivre chaque <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> retourné par <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> et utiliser l’objet dans l’opération asynchrone sous-jacente correspondante pour publier des mises à jour et terminer l’opération. Ce suivi peut être aussi simple que le passage de la <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> en tant que paramètre entre des délégués. Dans les conceptions plus sophistiquées, votre classe peut gérer une collection de <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> objets, en ajoutant des objets lorsque les tâches sont démarrées et en les supprimant lorsque les tâches sont terminées ou annulées. Cette approche vous permet de vérifier pour unique `userSuppliedState` paramètre valeurs, et est la méthode que vous devez utiliser lorsque vous travaillez avec des classes qui prennent en charge plusieurs appels simultanés.  
  
 Pour plus d’informations sur l’implémentation de classes asynchrones, consultez [implémenter le modèle asynchrone basé sur événement](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> méthode pour créer un <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> pour suivre la durée d’opérations asynchrones. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.ComponentModel.AsyncOperationManager> classe.  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
        <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">Implémentation du modèle asynchrone basé sur des événements</related>
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Meilleures pratiques pour le threading managé</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext with get, set" Usage="System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le contexte de synchronisation pour l'opération asynchrone.</summary>
        <value>Contexte de synchronisation pour l'opération asynchrone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’implémentation par défaut est l’implémentation libre de threads.  
  
 Un thread doit affecter la <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> propriété `null` pour libérer la fabrique libre de threads lorsqu’il est terminé, sinon sa fabrique ne sera jamais supprimée.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet">Pour définir le contexte de synchronisation. Valeur de la demande : <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. État associé :</permission>
      </Docs>
    </Member>
  </Members>
</Type>