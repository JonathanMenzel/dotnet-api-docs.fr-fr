<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AsyncOperation.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac527b3f4ff3ed46bf8dc07465aaecd985e0ada7d95.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27b3f4ff3ed46bf8dc07465aaecd985e0ada7d95</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AsyncOperation">
          <source>Tracks the lifetime of an asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>When you implement a class according to the <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, you may need to track the lifetime of each asynchronous operation invoked on an instance of your class.</source>
          <target state="translated">Lorsque vous implémentez une classe selon le <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, vous devrez peut-être effectuer le suivi de la durée de vie de chaque opération asynchrone appelée sur une instance de votre classe.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> class provides ways to track and report the progress of an asynchronous task.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> classe fournit des méthodes de suivi et de signaler la progression d’une tâche asynchrone.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>The following list identifies ways to use an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object:</source>
          <target state="translated">La liste suivante identifie les façons d’utiliser un <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> objet :</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>To report progress and interim results to the client, call <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> from your asynchronous worker code.</source>
          <target state="translated">Pour signaler la progression et les résultats intermédiaires au client, appelez <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> à partir de votre code de travail asynchrone.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph>.</source>
          <target state="translated">Pour indiquer qu’une tâche asynchrone est terminée, ou pour annuler une tâche asynchrone en attente, appelez <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>Your class should get an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object for each asynchronous task by calling <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph> when each task starts.</source>
          <target state="translated">Votre classe doit obtenir un <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> objet pour chaque tâche asynchrone en appelant <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph> au démarrage de chaque tâche.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>To allow the client to distinguish separate asynchronous tasks, <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph> takes a parameter for a unique client-provided token, which becomes the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> property.</source>
          <target state="translated">Pour permettre au client de distinguer des tâches asynchrones séparées, <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph> prend un paramètre pour un jeton fournies par le client unique, qui devient le <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.</source>
          <target state="translated">Il peut ensuite être utilisé par le code client pour identifier la tâche asynchrone particulière qui déclenche des événements de progression ou de fin.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>The following code example demonstrates using an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object to track the lifetime of asynchronous operations.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser un <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> objet pour effectuer le suivi de la durée de vie des opérations asynchrones.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>For a full code listing, see <bpt id="p1">[</bpt>How to: Implement a Component That Supports the Event-based Asynchronous Pattern<ept id="p1">](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)</ept>.</source>
          <target state="translated">Pour une liste de code complet, consultez <bpt id="p1">[</bpt>Comment : implémenter un composant qui prend en charge le modèle asynchrone basé sur événement<ept id="p1">](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>For a full code listing of a client form, see <bpt id="p1">[</bpt>How to: Implement a Client of the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">Pour une liste de code complet d’un formulaire client, consultez <bpt id="p1">[</bpt>Comment : implémenter un Client du modèle asynchrone basé sur événement<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>Implementers must ensure the <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> invocations are asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchronous behavior in a particular application model that happens to be synchronous.</source>
          <target state="translated">Les implémenteurs doivent garantir que la <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> et <ph id="ph2">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> appels sont asynchrones, afin que les fournisseurs de bibliothèque de classes n’avez pas besoin de se soucier de pile potentiel déborde s’ils adoptent le comportement asynchrone dans une application particulière modèle qui se trouve être synchrone.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur l’implémentation de classes asynchrones, consultez <bpt id="p1">[</bpt>implémentation du modèle asynchrone basé sur événement<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Finalize">
          <source>Finalizes the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.OperationCompleted">
          <source>Ends the lifetime of an asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.OperationCompleted">
          <source>Call the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A&gt;</ph> method to end the lifetime of an asynchronous operation.</source>
          <target state="translated">Appelez le <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A&gt;</ph> méthode à la fin de la durée de vie d’une opération asynchrone.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.OperationCompleted">
          <source>After this method is called for a particular task, calls to its corresponding <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> will raise an exception.</source>
          <target state="translated">Une fois que cette méthode est appelée pour une tâche particulière, appelle à son correspondant <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> lève une exception.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.OperationCompleted">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /&gt;</ph> has been called previously for this task.</source>
          
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.SendOrPostCallback" /&gt;</ph> object that wraps the delegate to be called when the operation ends.</source>
          
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>An argument for the delegate contained in the <bpt id="p1">&lt;c&gt;</bpt>d<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>Invokes a delegate on the thread or context appropriate for the application model.</source>
          
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> method invokes the delegate specified by the <ph id="ph2">`arg`</ph> parameter without ending the lifetime of the asynchronous operation.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> méthode appelle le délégué spécifié par le <ph id="ph2">`arg`</ph> paramètre sans mettre fin à la durée de vie de l’opération asynchrone.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>You can call the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph>.</source>
          <target state="translated">Vous pouvez appeler la <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> méthode aussi souvent que vous le souhaitez, alors que la durée de vie de l’opération asynchrone n’a pas été terminée par un appel à <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>You can use the method to report progress or interim results back to clients.</source>
          <target state="translated">Vous pouvez utiliser la méthode pour signaler la progression ou les résultats intermédiaires revenir aux clients.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">`d`</ph> parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task.</source>
          <target state="translated">Le <ph id="ph1">`d`</ph> paramètre encapsule le délégué que vous souhaitez appeler lorsque vous souhaitez publier une mise à jour sur l’état de la tâche asynchrone.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> objet garantit que votre délégué est appelé sur le thread ou le contexte approprié pour le modèle d’application.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.</source>
          <target state="translated">Votre méthode peut éventuellement déclencher un événement qui notifie les clients d’un changement d’état, mise à jour de progression ou des résultats incrémentiels qui vient d’être disponibles.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">`arg`</ph> parameter should be used to pass state to the delegate wrapped by the <ph id="ph2">`d`</ph> parameter.</source>
          <target state="translated">Le <ph id="ph1">`arg`</ph> paramètre doit être utilisé pour passer l’état au délégué encapsulé par le <ph id="ph2">`d`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>It might be a reference to an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>, or it might be a <ph id="ph2">&lt;xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType&gt;</ph> object.</source>
          <target state="translated">Il peut être une référence à un <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>, ou il peut être un <ph id="ph2">&lt;xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>It may be desirable to derive your own class from <ph id="ph1">&lt;xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType&gt;</ph> to provide additional state storage.</source>
          <target state="translated">Il peut être souhaitable de dériver votre propre classe de <ph id="ph1">&lt;xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType&gt;</ph> pour fournir un stockage d’état supplémentaires.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> method for reporting progress and incremental results of an asynchronous operation.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser la <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> méthode pour signaler la progression et les résultats incrémentiels d’une opération asynchrone.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> method has been called previously for this task.</source>
          
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="d" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>Inheritors must make the <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</source>
          <target state="translated">Les héritiers doivent rendre le <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> invocation asynchrone afin que les fournisseurs de bibliothèque de classes n’avez pas besoin de se préoccuper de pile potentiel déborde si elles adoptent le comportement asynchrone, mais un modèle d’application particulier se trouve être synchrone.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>Console applications do not synchronize the execution of <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> calls.</source>
          <target state="translated">Les applications console ne synchronisent pas l'exécution des appels <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>This can cause <ph id="ph1">&lt;see langword="ProgressChanged" /&gt;</ph> events to be raised out of order.</source>
          <target state="translated">Cela peut entraîner le déclenchement d'événements <ph id="ph1">&lt;see langword="ProgressChanged" /&gt;</ph> dans le désordre.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>If you wish to have serialized execution of <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> calls, implement and install a <ph id="ph2">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> class.</source>
          <target state="translated">Si vous souhaitez que l'exécution des appels <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> soit sérialisée, implémentez et installez une classe <ph id="ph2">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur l’implémentation de classes asynchrones, consultez <bpt id="p1">[</bpt>implémentation du modèle asynchrone basé sur événement<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.SendOrPostCallback" /&gt;</ph> object that wraps the delegate to be called when the operation ends.</source>
          
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>An argument for the delegate contained in the <bpt id="p1">&lt;c&gt;</bpt>d<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>Ends the lifetime of an asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>Call the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph> method to end the lifetime of an asynchronous operation.</source>
          <target state="translated">Appelez le <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph> méthode à la fin de la durée de vie d’une opération asynchrone.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>After this method is called for a particular task, calls to its corresponding <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object will raise an exception.</source>
          <target state="translated">Une fois que cette méthode est appelée pour une tâche particulière, appelle à son correspondant <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> objet lève une exception.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">`d`</ph> parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task.</source>
          <target state="translated">Le <ph id="ph1">`d`</ph> paramètre encapsule le délégué que vous souhaitez que votre classe à appeler lorsque la durée de vie de la tâche se termine en raison de l’achèvement, l’annulation ou d’échec de la tâche.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> objet garantit que votre délégué est appelé sur le thread ou le contexte approprié pour le modèle d’application.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.</source>
          <target state="translated">Votre délégué peut éventuellement déclencher un événement qui notifie les clients que durée de vie de la tâche asynchrone est terminée.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">`arg`</ph> parameter is used to pass state information to the completion delegate <ph id="ph2">`d`</ph>.</source>
          <target state="translated">Le <ph id="ph1">`arg`</ph> paramètre est utilisé pour transmettre des informations d’état au délégué de fin <ph id="ph2">`d`</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>You can use an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object, or an <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType&gt;</ph> object as the parameter value.</source>
          <target state="translated">Vous pouvez utiliser un <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> objet, ou un <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType&gt;</ph> objet en tant que la valeur du paramètre.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Si vous souhaitez fournir un stockage supplémentaire de l’état, vous pouvez également utiliser une instance d’une classe que vous dérivez de la <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph> method to end the lifetime of an asynchronous operation.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser la <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph> méthode à la fin de la durée de vie d’une opération asynchrone.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /&gt;</ph> has been called previously for this task.</source>
          
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="d" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>Inheritors must make the <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</source>
          <target state="translated">Les héritiers doivent rendre le <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> invocation asynchrone afin que les fournisseurs de bibliothèque de classes n’avez pas besoin de se préoccuper de pile potentiel déborde si elles adoptent le comportement asynchrone, mais un modèle d’application particulier se trouve être synchrone.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>The method should be interpreted as an "ending the lifetime" call, meaning the implementation needs to do what is appropriate for the application model.</source>
          <target state="translated">La méthode doit être interprétée comme un appel de « fin de la durée de vie », ce qui signifie que l’implémentation doit faire ce qui est approprié pour le modèle d’application.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>For instance, ASP.NET will decrement its count of outstanding asynchronous operations.</source>
          <target state="translated">Par exemple, ASP.NET décrémente le nombre d’opérations asynchrones en attente.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>This also should put the operation into a state such that any subsequent calls into it will fail, since it has now completed.</source>
          <target state="translated">Il doit également mettre l’opération dans un état ce que n’importe quel appel ultérieur échoue, car il est maintenant terminée.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur l’implémentation de classes asynchrones, consultez <bpt id="p1">[</bpt>implémentation du modèle asynchrone basé sur événement<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> object that was passed to the constructor.</source>
          
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> object that was passed to the constructor.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> passé au constructeur.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>Gets or sets an object used to uniquely identify an asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>The state object passed to the asynchronous method invocation.</source>
          <target state="translated">Objet d'état passé à l'appel de méthode asynchrone.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events.</source>
          <target state="translated">Si votre classe prend en charge plusieurs méthodes asynchrones ou plusieurs appels d’une seule méthode asynchrone, les clients doivent déterminer quelle tâche asynchrone est le déclenchement d’événements.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>Your <ph id="ph1">`MethodNameAsync`</ph> method should take a parameter of type <ph id="ph2">&lt;xref:System.Object&gt;</ph> that will act as a task ID.</source>
          <target state="translated">Votre <ph id="ph1">`MethodNameAsync`</ph> méthode doit prendre un paramètre de type <ph id="ph2">&lt;xref:System.Object&gt;</ph> qui agit comme un ID de tâche.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>You will use this task ID when you call the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation.</source>
          <target state="translated">Vous allez utiliser cet ID de tâche lorsque vous appelez le <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph>, méthode et il associe les ID de tâche du client à un appel particulier de votre opération asynchrone.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>This task ID is made available to your implementation through the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> property.</source>
          <target state="translated">Cette tâche ID est rendu disponible à votre implémentation via le <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>Client code must be careful to provide a unique value for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> property.</source>
          <target state="translated">Le code client doit être veiller à fournir une valeur unique pour le <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</source>
          <target state="translated">ID de tâche non uniques peuvent entraîner votre implémentation à signaler la progression et autres événements incorrectement.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>Your code should check for a non-unique task ID and raise an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> if one is detected.</source>
          <target state="translated">Votre code doit vérifier un ID de tâche non uniques et déclencher un <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> si celle-ci est détectée.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>The following code example demonstrates using <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> to track the lifetime of asynchronous operations.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> pour effectuer le suivi de la durée de vie des opérations asynchrones.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> classe.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>