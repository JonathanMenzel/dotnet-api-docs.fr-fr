<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="85e0763eab7d8bd2a5cf46e36aa927b72311f164" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52592426" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperation = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Suit la durée de vie d'une opération asynchrone.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous implémentez une classe selon le [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), vous devrez peut-être suivre la durée de vie de chaque opération asynchrone appelée sur une instance de votre classe. Le <xref:System.ComponentModel.AsyncOperation> classe fournit des méthodes de suivi et de signaler la progression d’une tâche asynchrone.  
  
 La liste suivante identifie les façons d’utiliser un <xref:System.ComponentModel.AsyncOperation> objet :  
  
-   Pour signaler la progression et les résultats intermédiaires au client, appelez <xref:System.ComponentModel.AsyncOperation.Post%2A> à partir de votre code de travail asynchrone.  
  
-   Pour indiquer qu’une tâche asynchrone terminée, ou pour annuler une tâche asynchrone en attente, appelez <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.  
  
 Votre classe doit obtenir un <xref:System.ComponentModel.AsyncOperation> objet pour chaque tâche asynchrone en appelant <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> au démarrage de chaque tâche. Pour permettre au client de distinguer des tâches asynchrones distinctes, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> prend un paramètre pour un jeton fournies par le client unique, qui devient le <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> propriété. Il peut ensuite être utilisé par le code client pour identifier la tâche asynchrone particulière qui déclenche les événements de progression ou de fin.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser un <xref:System.ComponentModel.AsyncOperation> objet à suivre la durée de vie des opérations asynchrones. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.  
  
 Pour obtenir la liste complète de code, consultez [Comment : implémenter un composant qui prend en charge le modèle asynchrone basé sur événement](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). Pour obtenir la liste complète de code d’un formulaire client, consultez [Comment : implémenter un Client du modèle asynchrone basé sur événement](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Les implémenteurs doivent garantir que le <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> et <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> appels sont asynchrones, afin que les fournisseurs de bibliothèques de classe n’avez pas besoin de se soucier de les débordements de pile potentiel s’ils adoptent le comportement asynchrone dans une application particulière modèle qui se trouve être synchrone.  
  
Pour plus d’informations sur l’implémentation de classes asynchrones, consultez [implémenter le modèle asynchrone basé sur événement](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
    </block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Meilleures pratiques pour le threading managé</related>
    <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Comment : implémenter un composant qui prend en charge le modèle asynchrone basé sur des événements</related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="asyncOperation.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finalise l'opération asynchrone.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberSignature Language="F#" Value="member this.OperationCompleted : unit -&gt; unit" Usage="asyncOperation.OperationCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Termine la durée de vie d'une opération asynchrone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez le <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> méthode à la fin de la durée de vie d’une opération asynchrone. Une fois que cette méthode est appelée pour une tâche particulière, appelle à son correspondant <xref:System.ComponentModel.AsyncOperation> lève une exception.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> a été appelé précédemment pour cette tâche.</exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Post : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.Post (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">Objet <see cref="T:System.Threading.SendOrPostCallback" /> qui inclut dans un wrapper le délégué à appeler lorsque l'opération se termine.</param>
        <param name="arg">Argument pour le délégué contenu dans le paramètre <paramref name="d" />.</param>
        <summary>Appelle un délégué sur le thread ou le contexte approprié pour le modèle d'application.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ComponentModel.AsyncOperation.Post%2A> méthode appelle le délégué spécifié par le `arg` paramètre sans mettre fin à la durée de vie de l’opération asynchrone.  
  
 Vous pouvez appeler la <xref:System.ComponentModel.AsyncOperation.Post%2A> aussi souvent que vous le souhaitez pendant la durée de vie de l’opération asynchrone n’a pas été terminée par un appel à méthode <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>. Vous pouvez utiliser la méthode pour rapporter les progrès ou les résultats intermédiaires aux clients.  
  
 Le `d` paramètre encapsule le délégué que vous souhaitez appeler lorsque vous souhaitez publier une mise à jour sur l’état de la tâche asynchrone. Le <xref:System.ComponentModel.AsyncOperation> objet garantit que votre délégué est appelé sur le thread ou le contexte approprié pour le modèle d’application. Votre méthode peut éventuellement déclencher un événement qui notifie les clients d’un changement d’état, mise à jour de progression ou des résultats incrémentiels qui vient d’être disponibles.  
  
 Le `arg` paramètre doit être utilisé pour passer l’état au délégué encapsulé par le `d` paramètre. Il peut être une référence à un <xref:System.ComponentModel.AsyncOperation>, ou il peut être un <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> objet. Il peut être souhaitable de dériver votre propre classe de <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> pour fournir le stockage d’état supplémentaires.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.ComponentModel.AsyncOperation.Post%2A> méthode pour signaler la progression et les résultats incrémentiels d’une opération asynchrone. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La méthode <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> a été appelée précédemment pour cette tâche.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="d" /> a la valeur <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Les héritiers doivent rendre le <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> appel asynchrone, afin que les fournisseurs de bibliothèques de classe n’avez pas besoin de se préoccuper de pile potentiel déborde si ils adoptent le comportement asynchrone, mais un modèle d’application particulier se trouve être synchrone.  
  
 <block subset="none" type="note"><para>  
 Les applications console ne synchronisent pas l'exécution des appels <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />. Cela peut entraîner le déclenchement d'événements <see langword="ProgressChanged" /> dans le désordre. Si vous souhaitez que l'exécution des appels <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> soit sérialisée, implémentez et installez une classe <see cref="T:System.Threading.SynchronizationContext" />.  
  
</para></block>  
  
 Pour plus d’informations sur l’implémentation de classes asynchrones, consultez [implémenter le modèle asynchrone basé sur événement](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Meilleures pratiques pour le threading managé</related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Comment : implémenter un composant qui prend en charge le modèle asynchrone basé sur des événements</related>
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.PostOperationCompleted : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.PostOperationCompleted (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">Objet <see cref="T:System.Threading.SendOrPostCallback" /> qui inclut dans un wrapper le délégué à appeler lorsque l'opération se termine.</param>
        <param name="arg">Argument pour le délégué contenu dans le paramètre <paramref name="d" />.</param>
        <summary>Termine la durée de vie d'une opération asynchrone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez le <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> méthode à la fin de la durée de vie d’une opération asynchrone. Une fois que cette méthode est appelée pour une tâche particulière, appelle à son correspondant <xref:System.ComponentModel.AsyncOperation> objet lève une exception.  
  
 Le `d` paramètre encapsule le délégué que vous souhaitez que votre classe à appeler lorsque la durée de vie de la tâche se termine en raison de la saisie semi-automatique, l’annulation ou l’échec de la tâche. Le <xref:System.ComponentModel.AsyncOperation> objet garantit que votre délégué est appelé sur le thread ou le contexte approprié pour le modèle d’application. Votre délégué peut éventuellement déclencher un événement qui notifie les clients que durée de vie de la tâche asynchrone est terminée.  
  
 Le `arg` paramètre est utilisé pour transmettre des informations d’état pour le délégué d’achèvement `d`. Vous pouvez utiliser un <xref:System.ComponentModel.AsyncOperation> objet, ou un <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> objet en tant que la valeur du paramètre. Si vous souhaitez fournir un stockage d’état supplémentaire, vous pouvez également utiliser une instance d’une classe que vous dérivez de la <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> classe.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> méthode à la fin de la durée de vie d’une opération asynchrone. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> a été appelé précédemment pour cette tâche.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="d" /> a la valeur <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Les héritiers doivent rendre le <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> appel asynchrone, afin que les fournisseurs de bibliothèques de classe n’avez pas besoin de se préoccuper de pile potentiel déborde si ils adoptent le comportement asynchrone, mais un modèle d’application particulier se trouve être synchrone. La méthode doit être interprétée comme un appel de « fin de la durée de vie », ce qui signifie que l’implémentation doit faire ce qui est approprié pour le modèle d’application. Par exemple, ASP.NET décrémente son décompte des opérations asynchrones en attente. Cela doit également mettre l’opération dans un état tels que tous les appels ultérieurs dedans échouera, car elle est désormais terminée.  
  
Pour plus d’informations sur l’implémentation de classes asynchrones, consultez [implémenter le modèle asynchrone basé sur événement](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Meilleures pratiques pour le threading managé</related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">Comment : implémenter un composant qui prend en charge le modèle asynchrone basé sur des événements</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext" Usage="System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'objet <see cref="T:System.Threading.SynchronizationContext" /> passé au constructeur.</summary>
        <value>Objet <see cref="T:System.Threading.SynchronizationContext" /> passé au constructeur.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserSuppliedState : obj" Usage="System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un objet servant à identifier de manière unique une opération asynchrone.</summary>
        <value>Objet d'état passé à l'appel de méthode asynchrone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si votre classe prend en charge plusieurs méthodes asynchrones ou plusieurs appels d’une seule méthode asynchrone, les clients doivent déterminer quelle tâche asynchrone déclenche des événements. Votre `MethodNameAsync` méthode doit accepter un paramètre de type <xref:System.Object> qui agira comme un ID de tâche. Vous allez utiliser cet ID de tâche lorsque vous appelez le <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, méthode et cela associe les ID de tâche du client à un appel particulier de votre opération asynchrone. Cette tâche, ID de mise à disposition pour votre implémentation via la <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> propriété.  
  
> [!CAUTION]
>  Le code client doit être prudent fournir une valeur unique pour le <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> propriété. ID de tâche non uniques peuvent entraîner votre implémentation à signaler la progression et les autres événements incorrectement. Votre code doit vérifier un ID de tâche non uniques et déclencher un <xref:System.ArgumentException> si celle-ci est détectée.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> pour effectuer le suivi de la durée de vie des opérations asynchrones. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">Meilleures pratiques pour le threading managé</related>
        <related type="Article" href="https://msdn.microsoft.com/library/792aa8da-918b-458e-b154-9836b97735f3">Vue d’ensemble du modèle asynchrone basé sur des événements</related>
      </Docs>
    </Member>
  </Members>
</Type>