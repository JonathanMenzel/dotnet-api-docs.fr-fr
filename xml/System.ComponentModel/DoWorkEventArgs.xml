<Type Name="DoWorkEventArgs" FullName="System.ComponentModel.DoWorkEventArgs">
  <TypeSignature Language="C#" Value="public class DoWorkEventArgs : System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DoWorkEventArgs extends System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.DoWorkEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class DoWorkEventArgs&#xA;Inherits CancelEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class DoWorkEventArgs : System::ComponentModel::CancelEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.CancelEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1a366-101">Fournit des données pour le gestionnaire d'événements <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</span><span class="sxs-lookup"><span data-stu-id="1a366-101">Provides data for the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> event handler.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1a366-102">L’exemple de code suivant montre comment utiliser le <xref:System.ComponentModel.DoWorkEventArgs> classe pour gérer les <xref:System.ComponentModel.BackgroundWorker.DoWork> événement.</span><span class="sxs-lookup"><span data-stu-id="1a366-102">The following code example demonstrates how to use the <xref:System.ComponentModel.DoWorkEventArgs> class to handle the <xref:System.ComponentModel.BackgroundWorker.DoWork> event.</span></span> <span data-ttu-id="1a366-103">Pour une liste de code complet, consultez [Comment : exécuter une opération en arrière-plan](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md).</span><span class="sxs-lookup"><span data-stu-id="1a366-103">For a full code listing, see [How to: Run an Operation in the Background](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorker.Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#2)]
 [!code-vb[System.ComponentModel.BackgroundWorker.Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.BackgroundWorker" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DoWorkEventArgs (object argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (argument As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DoWorkEventArgs(System::Object ^ argument);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="argument" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="argument"><span data-ttu-id="1a366-104">Spécifie un argument pour une opération asynchrone.</span><span class="sxs-lookup"><span data-stu-id="1a366-104">Specifies an argument for an asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="1a366-105">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DoWorkEventArgs" />.</span><span class="sxs-lookup"><span data-stu-id="1a366-105">Initializes a new instance of the <see cref="T:System.ComponentModel.DoWorkEventArgs" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.BackgroundWorker" />
      </Docs>
    </Member>
    <Member MemberName="Argument">
      <MemberSignature Language="C#" Value="public object Argument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Argument" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.DoWorkEventArgs.Argument" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Argument As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Argument { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a366-106">Obtient une valeur qui représente l'argument d'une opération asynchrone.</span><span class="sxs-lookup"><span data-stu-id="1a366-106">Gets a value that represents the argument of an asynchronous operation.</span></span></summary>
        <value><span data-ttu-id="1a366-107"><see cref="T:System.Object" /> qui représente l'argument d'une opération asynchrone.</span><span class="sxs-lookup"><span data-stu-id="1a366-107">An <see cref="T:System.Object" /> representing the argument of an asynchronous operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1a366-108">L’exemple de code suivant montre comment utiliser le <xref:System.ComponentModel.DoWorkEventArgs> classe pour gérer les <xref:System.ComponentModel.BackgroundWorker.DoWork> événement.</span><span class="sxs-lookup"><span data-stu-id="1a366-108">The following code example demonstrates how to use the <xref:System.ComponentModel.DoWorkEventArgs> class to handle the <xref:System.ComponentModel.BackgroundWorker.DoWork> event.</span></span> <span data-ttu-id="1a366-109">Pour une liste de code complet, consultez [Comment : exécuter une opération en arrière-plan](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md).</span><span class="sxs-lookup"><span data-stu-id="1a366-109">For a full code listing, see [How to: Run an Operation in the Background](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorker.Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#2)]
 [!code-vb[System.ComponentModel.BackgroundWorker.Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.BackgroundWorker" />
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public bool Cancel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Cancel" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.DoWorkEventArgs.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Property Cancel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Cancel { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public object Result { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Result" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.DoWorkEventArgs.Result" />
      <MemberSignature Language="VB.NET" Value="Public Property Result As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Result { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a366-110">Obtient ou définit une valeur qui représente le résultat d'une opération asynchrone.</span><span class="sxs-lookup"><span data-stu-id="1a366-110">Gets or sets a value that represents the result of an asynchronous operation.</span></span></summary>
        <value><span data-ttu-id="1a366-111"><see cref="T:System.Object" /> qui représente le résultat d'une opération asynchrone.</span><span class="sxs-lookup"><span data-stu-id="1a366-111">An <see cref="T:System.Object" /> representing the result of an asynchronous operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1a366-112">L’exemple de code suivant montre comment utiliser le <xref:System.ComponentModel.DoWorkEventArgs> classe pour gérer les <xref:System.ComponentModel.BackgroundWorker.DoWork> événement.</span><span class="sxs-lookup"><span data-stu-id="1a366-112">The following code example demonstrates how to use the <xref:System.ComponentModel.DoWorkEventArgs> class to handle the <xref:System.ComponentModel.BackgroundWorker.DoWork> event.</span></span> <span data-ttu-id="1a366-113">Pour une liste de code complet, consultez [Comment : exécuter une opération en arrière-plan](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md).</span><span class="sxs-lookup"><span data-stu-id="1a366-113">For a full code listing, see [How to: Run an Operation in the Background](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorker.Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#2)]
 [!code-vb[System.ComponentModel.BackgroundWorker.Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.BackgroundWorker" />
      </Docs>
    </Member>
  </Members>
</Type>