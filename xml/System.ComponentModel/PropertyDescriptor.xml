<Type Name="PropertyDescriptor" FullName="System.ComponentModel.PropertyDescriptor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="35d7ebde15030c1e31d18a34bcc6ab5cabe6c767" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36701057" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class PropertyDescriptor : System.ComponentModel.MemberDescriptor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PropertyDescriptor extends System.ComponentModel.MemberDescriptor" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.PropertyDescriptor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PropertyDescriptor&#xA;Inherits MemberDescriptor" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyDescriptor abstract : System::ComponentModel::MemberDescriptor" />
  <TypeSignature Language="F#" Value="type PropertyDescriptor = class&#xA;    inherit MemberDescriptor" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.MemberDescriptor</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="dad01-101">Fournit une abstraction d'une propriété sur une classe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="dad01-101">Provides an abstraction of a property on a class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dad01-102">Une description d’une propriété se compose d’un nom, ses attributs, la classe de composant associé à la propriété et le type de la propriété.</span><span class="sxs-lookup"><span data-stu-id="dad01-102">A description of a property consists of a name, its attributes, the component class that the property is associated with, and the type of the property.</span></span>  
  
 <span data-ttu-id="dad01-103"><xref:System.ComponentModel.PropertyDescriptor> fournit les propriétés et méthodes suivantes :</span><span class="sxs-lookup"><span data-stu-id="dad01-103"><xref:System.ComponentModel.PropertyDescriptor> provides the following properties and methods:</span></span>  
  
-   <span data-ttu-id="dad01-104"><xref:System.ComponentModel.PropertyDescriptor.Converter%2A> contient le <xref:System.ComponentModel.TypeConverter> pour cette propriété.</span><span class="sxs-lookup"><span data-stu-id="dad01-104"><xref:System.ComponentModel.PropertyDescriptor.Converter%2A> contains the <xref:System.ComponentModel.TypeConverter> for this property.</span></span>  
  
-   <span data-ttu-id="dad01-105"><xref:System.ComponentModel.PropertyDescriptor.IsLocalizable%2A> Indique si cette propriété doit être localisée.</span><span class="sxs-lookup"><span data-stu-id="dad01-105"><xref:System.ComponentModel.PropertyDescriptor.IsLocalizable%2A> indicates whether this property should be localized.</span></span>  
  
-   <span data-ttu-id="dad01-106"><xref:System.ComponentModel.PropertyDescriptor.GetEditor%2A> Retourne un éditeur du type spécifié.</span><span class="sxs-lookup"><span data-stu-id="dad01-106"><xref:System.ComponentModel.PropertyDescriptor.GetEditor%2A> returns an editor of the specified type.</span></span>  
  
 <span data-ttu-id="dad01-107"><xref:System.ComponentModel.PropertyDescriptor> fournit également les éléments suivants `abstract` propriétés et méthodes :</span><span class="sxs-lookup"><span data-stu-id="dad01-107"><xref:System.ComponentModel.PropertyDescriptor> also provides the following `abstract` properties and methods:</span></span>  
  
-   <span data-ttu-id="dad01-108"><xref:System.ComponentModel.PropertyDescriptor.ComponentType%2A> contient le type de composant auquel que cette propriété est liée.</span><span class="sxs-lookup"><span data-stu-id="dad01-108"><xref:System.ComponentModel.PropertyDescriptor.ComponentType%2A> contains the type of component this property is bound to.</span></span>  
  
-   <span data-ttu-id="dad01-109"><xref:System.ComponentModel.PropertyDescriptor.IsReadOnly%2A> Indique si cette propriété est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="dad01-109"><xref:System.ComponentModel.PropertyDescriptor.IsReadOnly%2A> indicates whether this property is read-only.</span></span>  
  
-   <span data-ttu-id="dad01-110"><xref:System.ComponentModel.PropertyDescriptor.PropertyType%2A> Obtient le type de la propriété.</span><span class="sxs-lookup"><span data-stu-id="dad01-110"><xref:System.ComponentModel.PropertyDescriptor.PropertyType%2A> gets the type of the property.</span></span>  
  
-   <span data-ttu-id="dad01-111"><xref:System.ComponentModel.PropertyDescriptor.CanResetValue%2A> Indique si la réinitialisation du composant modifie la valeur du composant.</span><span class="sxs-lookup"><span data-stu-id="dad01-111"><xref:System.ComponentModel.PropertyDescriptor.CanResetValue%2A> indicates whether resetting the component changes the value of the component.</span></span>  
  
-   <span data-ttu-id="dad01-112"><xref:System.ComponentModel.PropertyDescriptor.GetValue%2A> Retourne la valeur actuelle de la propriété d’un composant.</span><span class="sxs-lookup"><span data-stu-id="dad01-112"><xref:System.ComponentModel.PropertyDescriptor.GetValue%2A> returns the current value of the property on a component.</span></span>  
  
-   <span data-ttu-id="dad01-113"><xref:System.ComponentModel.PropertyDescriptor.ResetValue%2A> Rétablit la valeur de cette propriété du composant.</span><span class="sxs-lookup"><span data-stu-id="dad01-113"><xref:System.ComponentModel.PropertyDescriptor.ResetValue%2A> resets the value for this property of the component.</span></span>  
  
-   <span data-ttu-id="dad01-114"><xref:System.ComponentModel.PropertyDescriptor.SetValue%2A> définit la valeur du composant à une autre valeur.</span><span class="sxs-lookup"><span data-stu-id="dad01-114"><xref:System.ComponentModel.PropertyDescriptor.SetValue%2A> sets the value of the component to a different value.</span></span>  
  
-   <span data-ttu-id="dad01-115"><xref:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue%2A> Indique si la valeur de cette propriété doit être persistante.</span><span class="sxs-lookup"><span data-stu-id="dad01-115"><xref:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue%2A> indicates whether the value of this property needs to be persisted.</span></span>  
  
 <span data-ttu-id="dad01-116">En règle générale, les `abstract` membres sont implémentés par réflexion.</span><span class="sxs-lookup"><span data-stu-id="dad01-116">Typically, the `abstract` members are implemented through reflection.</span></span> <span data-ttu-id="dad01-117">Pour plus d’informations sur la réflexion, consultez les rubriques de [réflexion](~/docs/framework/reflection-and-codedom/reflection.md).</span><span class="sxs-lookup"><span data-stu-id="dad01-117">For more information about reflection, see the topics in [Reflection](~/docs/framework/reflection-and-codedom/reflection.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dad01-118">L’exemple de code suivant est basé sur l’exemple de la <xref:System.ComponentModel.PropertyDescriptorCollection> classe.</span><span class="sxs-lookup"><span data-stu-id="dad01-118">The following code example is built upon the example in the <xref:System.ComponentModel.PropertyDescriptorCollection> class.</span></span> <span data-ttu-id="dad01-119">Il affiche des informations (catégorie, description, nom complet) du texte d’un bouton dans une zone de texte.</span><span class="sxs-lookup"><span data-stu-id="dad01-119">It prints the information (category, description, display name) of the text of a button in a text box.</span></span> <span data-ttu-id="dad01-120">Il suppose que `button1` et `textbox1` ont été instanciés sur un formulaire.</span><span class="sxs-lookup"><span data-stu-id="dad01-120">It assumes that `button1` and `textbox1` have been instantiated on a form.</span></span>  
  
 [!code-cpp[PropertyDescriptor#1](~/samples/snippets/cpp/VS_Snippets_Winforms/PropertyDescriptor/CPP/propertydescriptor.cpp#1)]
 [!code-csharp[PropertyDescriptor#1](~/samples/snippets/csharp/VS_Snippets_Winforms/PropertyDescriptor/CS/propertydescriptor.cs#1)]
 [!code-vb[PropertyDescriptor#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PropertyDescriptor/VB/propertydescriptor.vb#1)]  
  
 <span data-ttu-id="dad01-121">L’exemple de code suivant montre comment implémenter un descripteur de propriété personnalisé qui fournit un wrapper en lecture seule autour d’une propriété.</span><span class="sxs-lookup"><span data-stu-id="dad01-121">The following code example shows how to implement a custom property descriptor that provides a read-only wrapper around a property.</span></span> <span data-ttu-id="dad01-122">Le `SerializeReadOnlyPropertyDescriptor` est utilisé dans un concepteur personnalisé pour fournir un descripteur de propriété en lecture seule pour le contrôle <xref:System.Windows.Forms.Control.Size%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="dad01-122">The `SerializeReadOnlyPropertyDescriptor` is used in a custom designer to provide a read-only property descriptor for the control's <xref:System.Windows.Forms.Control.Size%2A> property.</span></span>  
  
 [!code-csharp[System.ComponentModel.PropertyDescriptor#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.PropertyDescriptor/CS/SerializeReadOnlyPropertyDescriptor.cs#1)]
 [!code-vb[System.ComponentModel.PropertyDescriptor#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.PropertyDescriptor/VB/SerializeReadOnlyPropertyDescriptor.vb#1)]  
  
 <span data-ttu-id="dad01-123">Les exemples de code suivants montrent comment utiliser le `SerializeReadOnlyPropertyDescriptor` dans un concepteur personnalisé.</span><span class="sxs-lookup"><span data-stu-id="dad01-123">The following code examples show how to use the `SerializeReadOnlyPropertyDescriptor` in a custom designer.</span></span>  
  
 [!code-csharp[System.ComponentModel.PropertyDescriptor#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.PropertyDescriptor/CS/DemoControlDesigner.cs#10)]
 [!code-vb[System.ComponentModel.PropertyDescriptor#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.PropertyDescriptor/VB/DemoControlDesigner.vb#10)]  
[!code-csharp[System.ComponentModel.PropertyDescriptor#100](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.PropertyDescriptor/CS/DemoControl.cs#100)]
[!code-vb[System.ComponentModel.PropertyDescriptor#100](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.PropertyDescriptor/VB/DemoControl.vb#100)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.MemberDescriptor" />
    <altmember cref="T:System.Attribute" />
    <altmember cref="T:System.ComponentModel.DefaultValueAttribute" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dad01-124">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyDescriptor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-124">Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyDescriptor" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PropertyDescriptor (System.ComponentModel.MemberDescriptor descr);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.MemberDescriptor descr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (descr As MemberDescriptor)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PropertyDescriptor(System::ComponentModel::MemberDescriptor ^ descr);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.PropertyDescriptor : System.ComponentModel.MemberDescriptor -&gt; System.ComponentModel.PropertyDescriptor" Usage="new System.ComponentModel.PropertyDescriptor descr" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="descr" Type="System.ComponentModel.MemberDescriptor" />
      </Parameters>
      <Docs>
        <param name="descr">
          <span data-ttu-id="dad01-125">
            <see cref="T:System.ComponentModel.MemberDescriptor" /> qui contient le nom de la propriété et ses attributs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-125">A <see cref="T:System.ComponentModel.MemberDescriptor" /> that contains the name of the property and its attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-126">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyDescriptor" /> avec le nom et les attributs dans le <see cref="T:System.ComponentModel.MemberDescriptor" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-126">Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyDescriptor" /> class with the name and attributes in the specified <see cref="T:System.ComponentModel.MemberDescriptor" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.MemberDescriptor" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PropertyDescriptor (System.ComponentModel.MemberDescriptor descr, Attribute[] attrs);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.MemberDescriptor descr, class System.Attribute[] attrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (descr As MemberDescriptor, attrs As Attribute())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PropertyDescriptor(System::ComponentModel::MemberDescriptor ^ descr, cli::array &lt;Attribute ^&gt; ^ attrs);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.PropertyDescriptor : System.ComponentModel.MemberDescriptor * Attribute[] -&gt; System.ComponentModel.PropertyDescriptor" Usage="new System.ComponentModel.PropertyDescriptor (descr, attrs)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="descr" Type="System.ComponentModel.MemberDescriptor" />
        <Parameter Name="attrs" Type="System.Attribute[]" />
      </Parameters>
      <Docs>
        <param name="descr">
          <span data-ttu-id="dad01-127">
            <see cref="T:System.ComponentModel.MemberDescriptor" /> contenant le nom du membre et ses attributs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-127">A <see cref="T:System.ComponentModel.MemberDescriptor" /> containing the name of the member and its attributes.</span>
          </span>
        </param>
        <param name="attrs">
          <span data-ttu-id="dad01-128">Tableau <see cref="T:System.Attribute" /> contenant les attributs à associer à la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-128">An <see cref="T:System.Attribute" /> array containing the attributes you want to associate with the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-129">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyDescriptor" /> avec le nom dans le <see cref="T:System.ComponentModel.MemberDescriptor" /> spécifié et les attributs dans les tableaux <see cref="T:System.ComponentModel.MemberDescriptor" /> et <see cref="T:System.Attribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-129">Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyDescriptor" /> class with the name in the specified <see cref="T:System.ComponentModel.MemberDescriptor" /> and the attributes in both the <see cref="T:System.ComponentModel.MemberDescriptor" /> and the <see cref="T:System.Attribute" /> array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dad01-130">Ce constructeur ajoute les attributs dans le <xref:System.Attribute> tableau aux attributs de la <xref:System.ComponentModel.MemberDescriptor>.</span><span class="sxs-lookup"><span data-stu-id="dad01-130">This constructor appends the attributes in the <xref:System.Attribute> array to the attributes in the <xref:System.ComponentModel.MemberDescriptor>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.MemberDescriptor" />
        <altmember cref="T:System.Attribute" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PropertyDescriptor (string name, Attribute[] attrs);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string name, class System.Attribute[] attrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (name As String, attrs As Attribute())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PropertyDescriptor(System::String ^ name, cli::array &lt;Attribute ^&gt; ^ attrs);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.PropertyDescriptor : string * Attribute[] -&gt; System.ComponentModel.PropertyDescriptor" Usage="new System.ComponentModel.PropertyDescriptor (name, attrs)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attrs" Type="System.Attribute[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="dad01-131">Nom de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-131">The name of the property.</span>
          </span>
        </param>
        <param name="attrs">
          <span data-ttu-id="dad01-132">Tableau de type <see cref="T:System.Attribute" /> qui contient les attributs de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-132">An array of type <see cref="T:System.Attribute" /> that contains the property attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-133">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyDescriptor" /> avec le nom et les attributs spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-133">Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyDescriptor" /> class with the specified name and attributes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Attribute" />
      </Docs>
    </Member>
    <Member MemberName="AddValueChanged">
      <MemberSignature Language="C#" Value="public virtual void AddValueChanged (object component, EventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddValueChanged(object component, class System.EventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddValueChanged (component As Object, handler As EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddValueChanged(System::Object ^ component, EventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddValueChanged : obj * EventHandler -&gt; unit&#xA;override this.AddValueChanged : obj * EventHandler -&gt; unit" Usage="propertyDescriptor.AddValueChanged (component, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
        <Parameter Name="handler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="dad01-134">Composant pour lequel ajouter le gestionnaire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-134">The component to add the handler for.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="dad01-135">Délégué à ajouter en tant qu'écouteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-135">The delegate to add as a listener.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-136">Permet à d'autres objets d'être avertis en cas de modification de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-136">Enables other objects to be notified when this property changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="dad01-137">
            <paramref name="component" /> ou <paramref name="handler" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-137">
              <paramref name="component" /> or <paramref name="handler" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanResetValue">
      <MemberSignature Language="C#" Value="public abstract bool CanResetValue (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanResetValue(object component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CanResetValue (component As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool CanResetValue(System::Object ^ component);" />
      <MemberSignature Language="F#" Value="abstract member CanResetValue : obj -&gt; bool" Usage="propertyDescriptor.CanResetValue component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="dad01-138">Composant dont la fonction de réinitialisation doit être testée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-138">The component to test for reset capability.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-139">En cas de substitution dans une classe dérivée, retourne une valeur indiquant si la réinitialisation d'un objet modifie sa valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-139">When overridden in a derived class, returns whether resetting an object changes its value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dad01-140">
            <see langword="true" /> si la réinitialisation du composant modifie sa valeur ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-140">
              <see langword="true" /> if resetting the component changes its value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dad01-141">En règle générale, cette méthode est implémentée par la réflexion.</span><span class="sxs-lookup"><span data-stu-id="dad01-141">Typically, this method is implemented through reflection.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="dad01-142">
            <para>En cas de substitution dans une classe dérivée, cette méthode recherche un <see cref="T:System.ComponentModel.DefaultValueAttribute" />. S’il en trouve, il compare la valeur de l’attribut avec la valeur de propriété en cours. Elle retourne <see langword="true" /> lorsque la valeur par défaut ne correspond pas à la valeur de propriété en cours. Si cette méthode ne peut pas trouver un <see cref="T:System.ComponentModel.DefaultValueAttribute" />, il recherche une méthode « ShouldPersistMyProperty » que vous devez implémenter vous-même. Si elle est trouvée, <see cref="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)" /> retourne ce que retourne « ShouldPersistMyProperty ». Sinon, elle recherche une méthode « ResetMyProperty » que vous devez implémenter vous-même. Si elle est trouvée, <see cref="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)" /> retourne <see langword="true" />. S’il ne peut pas trouver un <see cref="T:System.ComponentModel.DefaultValueAttribute" />, une méthode « ShouldPersistMyProperty », ou une méthode « ResetMyProperty », elle retourne <see langword="false" />.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-142">
              <para>When overridden in a derived class, this method looks for a <see cref="T:System.ComponentModel.DefaultValueAttribute" />. If it finds one, it compares the value of the attribute with the property's current value. It returns <see langword="true" /> when the default value does not match the property's current value. If this method cannot find a <see cref="T:System.ComponentModel.DefaultValueAttribute" />, it looks for a "ShouldPersistMyProperty" method that you need to implement yourself. If this is found, <see cref="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)" /> returns what "ShouldPersistMyProperty" returns. Otherwise, it looks for a "ResetMyProperty" method that you need to implement yourself. If this is found, <see cref="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)" /> returns <see langword="true" />. If it cannot find a <see cref="T:System.ComponentModel.DefaultValueAttribute" />, a "ShouldPersistMyProperty" method, or a "ResetMyProperty" method, then it returns <see langword="false" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="ComponentType">
      <MemberSignature Language="C#" Value="public abstract Type ComponentType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ComponentType" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.PropertyDescriptor.ComponentType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ComponentType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ ComponentType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ComponentType : Type" Usage="System.ComponentModel.PropertyDescriptor.ComponentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="dad01-143">En cas de substitution dans une classe dérivée, obtient le type du composant auquel cette propriété est liée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-143">When overridden in a derived class, gets the type of the component this property is bound to.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="dad01-144">
            <see cref="T:System.Type" /> représentant le type du composant auquel cette propriété est liée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-144">A <see cref="T:System.Type" /> that represents the type of component this property is bound to.</span>
          </span>
          <span data-ttu-id="dad01-145">Lors de l'appel des méthodes <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> ou <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" />, l'objet spécifié peut être une instance de ce type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-145">When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> methods are invoked, the object specified might be an instance of this type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dad01-146">En règle générale, cette propriété est implémentée par la réflexion.</span><span class="sxs-lookup"><span data-stu-id="dad01-146">Typically, this property is implemented through reflection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Converter">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.TypeConverter Converter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.TypeConverter Converter" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.PropertyDescriptor.Converter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Converter As TypeConverter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::TypeConverter ^ Converter { System::ComponentModel::TypeConverter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Converter : System.ComponentModel.TypeConverter" Usage="System.ComponentModel.PropertyDescriptor.Converter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.TypeConverter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="dad01-147">Obtient le convertisseur de type pour cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-147">Gets the type converter for this property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="dad01-148">
            <see cref="T:System.ComponentModel.TypeConverter" /> utilisé pour convertir le <see cref="T:System.Type" /> de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-148">A <see cref="T:System.ComponentModel.TypeConverter" /> that is used to convert the <see cref="T:System.Type" /> of this property.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.TypeConverter" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="protected object CreateInstance (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object CreateInstance(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ CreateInstance(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.CreateInstance : Type -&gt; obj" Usage="propertyDescriptor.CreateInstance type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="dad01-149">
            <see cref="T:System.Type" /> représentant le type à créer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-149">A <see cref="T:System.Type" /> that represents the type to create.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-150">Crée une instance du type spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-150">Creates an instance of the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dad01-151">Nouvelle instance du type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-151">A new instance of the type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dad01-152"><xref:System.ComponentModel.PropertyDescriptor.CreateInstance%2A> recherche un constructeur qui prend le type spécifié.</span><span class="sxs-lookup"><span data-stu-id="dad01-152"><xref:System.ComponentModel.PropertyDescriptor.CreateInstance%2A> looks for a constructor that takes the specified type.</span></span> <span data-ttu-id="dad01-153">S’il trouve un constructeur, le type de la propriété est passé.</span><span class="sxs-lookup"><span data-stu-id="dad01-153">If it finds a constructor, the type of the property is passed in.</span></span>  
  
 <span data-ttu-id="dad01-154">Les convertisseurs et éditeurs utilisent cette méthode pour créer des versions d’un composant.</span><span class="sxs-lookup"><span data-stu-id="dad01-154">Converters and editors use this method to create versions of a component.</span></span> <span data-ttu-id="dad01-155">Cette méthode permet à un composant d’être réutilisé pour plusieurs types.</span><span class="sxs-lookup"><span data-stu-id="dad01-155">This method enables a single component to be reused for more than one type.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="dad01-156">Pour accéder aux membres de classe privée et les métadonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-156">for access to private class members and metadata.</span>
          </span>
          <span data-ttu-id="dad01-157">Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-157">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
        <altmember cref="T:System.ComponentModel.TypeConverter" />
        <altmember cref="T:System.Drawing.Design.UITypeEditor" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="propertyDescriptor.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="dad01-158">Objet à comparer à ce <see cref="T:System.ComponentModel.PropertyDescriptor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-158">The object to compare to this <see cref="T:System.ComponentModel.PropertyDescriptor" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-159">Compare cet objet à un autre afin de déterminer s'ils sont équivalents.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-159">Compares this to another object to see if they are equivalent.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dad01-160">
            <see langword="true" /> si les valeurs sont équivalentes ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-160">
              <see langword="true" /> if the values are equivalent; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FillAttributes">
      <MemberSignature Language="C#" Value="protected override void FillAttributes (System.Collections.IList attributeList);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void FillAttributes(class System.Collections.IList attributeList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub FillAttributes (attributeList As IList)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void FillAttributes(System::Collections::IList ^ attributeList);" />
      <MemberSignature Language="F#" Value="override this.FillAttributes : System.Collections.IList -&gt; unit" Usage="propertyDescriptor.FillAttributes attributeList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeList" Type="System.Collections.IList" />
      </Parameters>
      <Docs>
        <param name="attributeList">
          <span data-ttu-id="dad01-161">
            <see cref="T:System.Collections.IList" /> énumérant les attributs de la classe parente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-161">An <see cref="T:System.Collections.IList" /> that lists the attributes in the parent class.</span>
          </span>
          <span data-ttu-id="dad01-162">Initialement, cette liste est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-162">Initially, this is empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-163">Ajoute les attributs de <see cref="T:System.ComponentModel.PropertyDescriptor" /> à la liste spécifiée d'attributs dans la classe parente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-163">Adds the attributes of the <see cref="T:System.ComponentModel.PropertyDescriptor" /> to the specified list of attributes in the parent class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dad01-164">Pour les attributs en double, dernier signet ajouté à la liste est conservé.</span><span class="sxs-lookup"><span data-stu-id="dad01-164">For duplicate attributes, the last one added to the list will be kept.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChildProperties">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dad01-165">Retourne <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-165">Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChildProperties">
      <MemberSignature Language="C#" Value="public System.ComponentModel.PropertyDescriptorCollection GetChildProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.PropertyDescriptorCollection GetChildProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.GetChildProperties" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildProperties () As PropertyDescriptorCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::PropertyDescriptorCollection ^ GetChildProperties();" />
      <MemberSignature Language="F#" Value="member this.GetChildProperties : unit -&gt; System.ComponentModel.PropertyDescriptorCollection" Usage="propertyDescriptor.GetChildProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dad01-166">Retourne le <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-166">Returns the default <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dad01-167">Collection du descripteur de propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-167">A collection of property descriptor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dad01-168">Cette méthode passe `null` à la fois pour le `instance` paramètre et le `filter` paramètre.</span><span class="sxs-lookup"><span data-stu-id="dad01-168">This method passes `null` for both the `instance` parameter and the `filter` parameter.</span></span>  
  
 <span data-ttu-id="dad01-169">Les propriétés de la `instance` paramètre peut différer des propriétés d’une classe, car le conteneur peut ajouter ou supprimer des propriétés si le `instance` paramètre dépend.</span><span class="sxs-lookup"><span data-stu-id="dad01-169">The properties for the `instance` parameter can differ from the properties of a class, because the container can add or remove properties if the `instance` parameter is sited.</span></span>  
  
 <span data-ttu-id="dad01-170">Le `filter` paramètre pouvez mélanger <xref:System.Type> et <xref:System.Attribute> objets.</span><span class="sxs-lookup"><span data-stu-id="dad01-170">The `filter` parameter can mix <xref:System.Type> and <xref:System.Attribute> objects.</span></span> <span data-ttu-id="dad01-171">Le filtrage est défini par les règles suivantes :</span><span class="sxs-lookup"><span data-stu-id="dad01-171">Filtering is defined by the following rules:</span></span>  
  
-   <span data-ttu-id="dad01-172">A <xref:System.Type> objet est traité comme un caractère générique ; il correspond à n’importe quelle propriété ayant le <xref:System.Type> dans son ensemble d’attributs.</span><span class="sxs-lookup"><span data-stu-id="dad01-172">A <xref:System.Type> object is treated as a wildcard; it matches any property that has the <xref:System.Type> in its set of attributes.</span></span>  
  
-   <span data-ttu-id="dad01-173">Si une propriété n’a pas un <xref:System.Attribute> de la même classe, la propriété de ne pas être incluse dans le tableau retourné.</span><span class="sxs-lookup"><span data-stu-id="dad01-173">If a property does not have an <xref:System.Attribute> of the same class, the property will not be included in the returned array.</span></span>  
  
-   <span data-ttu-id="dad01-174">Si l’attribut est une instance de <xref:System.Attribute>, la propriété doit être une correspondance exacte à inclure dans le tableau retourné.</span><span class="sxs-lookup"><span data-stu-id="dad01-174">If the attribute is an instance of <xref:System.Attribute>, the property must be an exact match to be included in the returned array.</span></span>  
  
-   <span data-ttu-id="dad01-175">Si vous spécifiez une <xref:System.Attribute> et il s’agit de la propriété par défaut, il sera inclus dans le tableau retourné, même s’il n’existe aucune instance de <xref:System.Attribute> dans la propriété.</span><span class="sxs-lookup"><span data-stu-id="dad01-175">If you specify an <xref:System.Attribute> and it is the default property, it will be included in the returned array, even if there is no instance of <xref:System.Attribute> in the property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.TypeDescriptor" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
        <altmember cref="T:System.ComponentModel.PropertyDescriptorCollection" />
        <altmember cref="T:System.Attribute" />
      </Docs>
    </Member>
    <Member MemberName="GetChildProperties">
      <MemberSignature Language="C#" Value="public System.ComponentModel.PropertyDescriptorCollection GetChildProperties (Attribute[] filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.PropertyDescriptorCollection GetChildProperties(class System.Attribute[] filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildProperties (filter As Attribute()) As PropertyDescriptorCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::PropertyDescriptorCollection ^ GetChildProperties(cli::array &lt;Attribute ^&gt; ^ filter);" />
      <MemberSignature Language="F#" Value="member this.GetChildProperties : Attribute[] -&gt; System.ComponentModel.PropertyDescriptorCollection" Usage="propertyDescriptor.GetChildProperties filter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Attribute[]" />
      </Parameters>
      <Docs>
        <param name="filter">
          <span data-ttu-id="dad01-176">Tableau de type <see cref="T:System.Attribute" /> à utiliser comme filtre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-176">An array of type <see cref="T:System.Attribute" /> to use as a filter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-177">Retourne un <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec comme filtre un tableau d'attributs spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-177">Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> using a specified array of attributes as a filter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dad01-178">
            <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec les propriétés qui correspondent aux attributs spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-178">A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that match the specified attributes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dad01-179">Cette méthode passe `null` pour la `instance` paramètre.</span><span class="sxs-lookup"><span data-stu-id="dad01-179">This method passes `null` for the `instance` parameter.</span></span>  
  
 <span data-ttu-id="dad01-180">Les propriétés de la `instance` paramètre permettre différer des propriétés d’une classe, car le site peut ajouter ou supprimer des propriétés si le `instance` paramètre dépend.</span><span class="sxs-lookup"><span data-stu-id="dad01-180">The properties for the `instance` parameter can differ from the properties of a class, because the site can add or remove properties if the `instance` parameter is sited.</span></span>  
  
 <span data-ttu-id="dad01-181">Le `filter` paramètre pouvez mélanger <xref:System.Type> et <xref:System.Attribute> objets.</span><span class="sxs-lookup"><span data-stu-id="dad01-181">The `filter` parameter can mix <xref:System.Type> and <xref:System.Attribute> objects.</span></span> <span data-ttu-id="dad01-182">Le filtrage est défini par les règles suivantes :</span><span class="sxs-lookup"><span data-stu-id="dad01-182">Filtering is defined by the following rules:</span></span>  
  
-   <span data-ttu-id="dad01-183">A <xref:System.Type> objet est traité comme un caractère générique ; il correspond à n’importe quelle propriété ayant le <xref:System.Type> dans son ensemble d’attributs.</span><span class="sxs-lookup"><span data-stu-id="dad01-183">A <xref:System.Type> object is treated as a wildcard; it matches any property that has the <xref:System.Type> in its set of attributes.</span></span>  
  
-   <span data-ttu-id="dad01-184">Si une propriété n’a pas un <xref:System.Attribute> de la même classe, la propriété de ne pas être incluse dans le tableau retourné.</span><span class="sxs-lookup"><span data-stu-id="dad01-184">If a property does not have an <xref:System.Attribute> of the same class, the property will not be included in the returned array.</span></span>  
  
-   <span data-ttu-id="dad01-185">Si l’attribut est une instance de <xref:System.Attribute>, la propriété doit être une correspondance exacte à inclure dans le tableau retourné.</span><span class="sxs-lookup"><span data-stu-id="dad01-185">If the attribute is an instance of <xref:System.Attribute>, the property must be an exact match to be included in the returned array.</span></span>  
  
-   <span data-ttu-id="dad01-186">Si vous spécifiez une <xref:System.Attribute> instance et il est la propriété par défaut, il sera inclus dans le tableau retourné, même s’il n’existe aucune instance de la <xref:System.Attribute> dans la propriété.</span><span class="sxs-lookup"><span data-stu-id="dad01-186">If you specify an <xref:System.Attribute> instance and it is the default property, it will be included in the returned array even if there is no instance of the <xref:System.Attribute> in the property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.TypeDescriptor" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
        <altmember cref="T:System.ComponentModel.PropertyDescriptorCollection" />
        <altmember cref="T:System.Attribute" />
      </Docs>
    </Member>
    <Member MemberName="GetChildProperties">
      <MemberSignature Language="C#" Value="public System.ComponentModel.PropertyDescriptorCollection GetChildProperties (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.PropertyDescriptorCollection GetChildProperties(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildProperties (instance As Object) As PropertyDescriptorCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::PropertyDescriptorCollection ^ GetChildProperties(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="member this.GetChildProperties : obj -&gt; System.ComponentModel.PropertyDescriptorCollection" Usage="propertyDescriptor.GetChildProperties instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="dad01-187">Composant dont les propriétés doivent être obtenues.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-187">A component to get the properties for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-188">Retourne un <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> pour un objet donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-188">Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> for a given object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dad01-189">
            <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec les propriétés pour le composant spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-189">A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties for the specified component.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dad01-190">Cette méthode passe `null` pour la `filter` paramètre.</span><span class="sxs-lookup"><span data-stu-id="dad01-190">This method passes `null` for the `filter` parameter.</span></span>  
  
 <span data-ttu-id="dad01-191">Les propriétés de la `instance` paramètre permettre différer des propriétés d’une classe, car le site peut ajouter ou supprimer des propriétés si le `instance` paramètre dépend.</span><span class="sxs-lookup"><span data-stu-id="dad01-191">The properties for the `instance` parameter can differ from the properties of a class, because the site can add or remove properties if the `instance` parameter is sited.</span></span>  
  
 <span data-ttu-id="dad01-192">Le `filter` paramètre pouvez mélanger <xref:System.Type> et <xref:System.Attribute> objets.</span><span class="sxs-lookup"><span data-stu-id="dad01-192">The `filter` parameter can mix <xref:System.Type> and <xref:System.Attribute> objects.</span></span> <span data-ttu-id="dad01-193">Le filtrage est défini par les règles suivantes :</span><span class="sxs-lookup"><span data-stu-id="dad01-193">Filtering is defined by the following rules:</span></span>  
  
-   <span data-ttu-id="dad01-194">A <xref:System.Type> objet est traité comme un caractère générique ; il correspond à n’importe quelle propriété ayant le <xref:System.Type> dans son ensemble d’attributs.</span><span class="sxs-lookup"><span data-stu-id="dad01-194">A <xref:System.Type> object is treated as a wildcard; it matches any property that has the <xref:System.Type> in its set of attributes.</span></span>  
  
-   <span data-ttu-id="dad01-195">Si une propriété n’a pas un <xref:System.Attribute> de la même classe, la propriété de ne pas être incluse dans le tableau retourné.</span><span class="sxs-lookup"><span data-stu-id="dad01-195">If a property does not have an <xref:System.Attribute> of the same class, the property will not be included in the returned array.</span></span>  
  
-   <span data-ttu-id="dad01-196">Si l’attribut est une instance de <xref:System.Attribute>, la propriété doit être une correspondance exacte à inclure dans le tableau retourné.</span><span class="sxs-lookup"><span data-stu-id="dad01-196">If the attribute is an instance of <xref:System.Attribute>, the property must be an exact match to be included in the returned array.</span></span>  
  
-   <span data-ttu-id="dad01-197">Si vous spécifiez une <xref:System.Attribute> instance et il est la propriété par défaut, il sera inclus dans le tableau retourné, même s’il n’existe aucune instance de la <xref:System.Attribute> dans la propriété.</span><span class="sxs-lookup"><span data-stu-id="dad01-197">If you specify an <xref:System.Attribute> instance and it is the default property, it will be included in the returned array even if there is no instance of the <xref:System.Attribute> in the property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.TypeDescriptor" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
        <altmember cref="T:System.ComponentModel.PropertyDescriptorCollection" />
        <altmember cref="T:System.Attribute" />
      </Docs>
    </Member>
    <Member MemberName="GetChildProperties">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.PropertyDescriptorCollection GetChildProperties (object instance, Attribute[] filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.PropertyDescriptorCollection GetChildProperties(object instance, class System.Attribute[] filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetChildProperties (instance As Object, filter As Attribute()) As PropertyDescriptorCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::PropertyDescriptorCollection ^ GetChildProperties(System::Object ^ instance, cli::array &lt;Attribute ^&gt; ^ filter);" />
      <MemberSignature Language="F#" Value="abstract member GetChildProperties : obj * Attribute[] -&gt; System.ComponentModel.PropertyDescriptorCollection&#xA;override this.GetChildProperties : obj * Attribute[] -&gt; System.ComponentModel.PropertyDescriptorCollection" Usage="propertyDescriptor.GetChildProperties (instance, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="filter" Type="System.Attribute[]" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="dad01-198">Composant dont les propriétés doivent être obtenues.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-198">A component to get the properties for.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="dad01-199">Tableau de type <see cref="T:System.Attribute" /> à utiliser comme filtre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-199">An array of type <see cref="T:System.Attribute" /> to use as a filter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-200">Retourne un <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> pour un objet donné à l'aide d'un tableau d'attributs spécifié comme filtre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-200">Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> for a given object using a specified array of attributes as a filter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dad01-201">
            <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec les propriétés qui correspondent aux attributs spécifiés pour le composant indiqué.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-201">A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that match the specified attributes for the specified component.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dad01-202">Les propriétés de la `instance` paramètre permettre différer des propriétés d’une classe, car le site peut ajouter ou supprimer des propriétés si le `instance` paramètre dépend.</span><span class="sxs-lookup"><span data-stu-id="dad01-202">The properties for the `instance` parameter can differ from the properties of a class, because the site can add or remove properties if the `instance` parameter is sited.</span></span>  
  
 <span data-ttu-id="dad01-203">Le `filter` paramètre pouvez mélanger <xref:System.Type> et <xref:System.Attribute> objets.</span><span class="sxs-lookup"><span data-stu-id="dad01-203">The `filter` parameter can mix <xref:System.Type> and <xref:System.Attribute> objects.</span></span> <span data-ttu-id="dad01-204">Le filtrage est défini par les règles suivantes :</span><span class="sxs-lookup"><span data-stu-id="dad01-204">Filtering is defined by the following rules:</span></span>  
  
-   <span data-ttu-id="dad01-205">A <xref:System.Type> objet est traité comme un caractère générique ; il correspond à n’importe quelle propriété ayant le <xref:System.Type> dans son ensemble d’attributs.</span><span class="sxs-lookup"><span data-stu-id="dad01-205">A <xref:System.Type> object is treated as a wildcard; it matches any property that has the <xref:System.Type> in its set of attributes.</span></span>  
  
-   <span data-ttu-id="dad01-206">Si une propriété n’a pas un <xref:System.Attribute> de la même classe, la propriété de ne pas être incluse dans le tableau retourné.</span><span class="sxs-lookup"><span data-stu-id="dad01-206">If a property does not have an <xref:System.Attribute> of the same class, the property will not be included in the returned array.</span></span>  
  
-   <span data-ttu-id="dad01-207">Si l’attribut est une instance de <xref:System.Attribute>, la propriété doit être une correspondance exacte à inclure dans le tableau retourné.</span><span class="sxs-lookup"><span data-stu-id="dad01-207">If the attribute is an instance of <xref:System.Attribute>, the property must be an exact match to be included in the returned array.</span></span>  
  
-   <span data-ttu-id="dad01-208">Si vous spécifiez une <xref:System.Attribute> instance et il est la propriété par défaut, il sera inclus dans le tableau retourné, même s’il n’existe aucune instance de la <xref:System.Attribute> dans la propriété.</span><span class="sxs-lookup"><span data-stu-id="dad01-208">If you specify an <xref:System.Attribute> instance and it is the default property, it will be included in the returned array even if there is no instance of the <xref:System.Attribute> in the property.</span></span>  
  
 <span data-ttu-id="dad01-209">En règle générale, les propriétés enfants doivent être retournées en implémentant le <xref:System.ComponentModel.TypeConverter.GetProperties%2A> membre de la <xref:System.ComponentModel.TypeConverter> retournée par cette propriété.</span><span class="sxs-lookup"><span data-stu-id="dad01-209">Generally, child properties should be returned by implementing the <xref:System.ComponentModel.TypeConverter.GetProperties%2A> member of the <xref:System.ComponentModel.TypeConverter> returned from this property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.TypeDescriptor" />
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
        <altmember cref="T:System.ComponentModel.PropertyDescriptorCollection" />
        <altmember cref="T:System.Attribute" />
      </Docs>
    </Member>
    <Member MemberName="GetEditor">
      <MemberSignature Language="C#" Value="public virtual object GetEditor (Type editorBaseType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetEditor(class System.Type editorBaseType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEditor (editorBaseType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetEditor(Type ^ editorBaseType);" />
      <MemberSignature Language="F#" Value="abstract member GetEditor : Type -&gt; obj&#xA;override this.GetEditor : Type -&gt; obj" Usage="propertyDescriptor.GetEditor editorBaseType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="editorBaseType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="editorBaseType">
          <span data-ttu-id="dad01-210">Type de base de l'éditeur, utilisé pour différencier plusieurs éditeurs pris en charge par une propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-210">The base type of editor, which is used to differentiate between multiple editors that a property supports.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-211">Obtient un éditeur du type spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-211">Gets an editor of the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dad01-212">Instance du type d'éditeur demandé, ou <see langword="null" /> si l'éditeur est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-212">An instance of the requested editor type, or <see langword="null" /> if an editor cannot be found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="propertyDescriptor.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dad01-213">Retourne le code de hachage de cet objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-213">Returns the hash code for this object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dad01-214">Code de hachage pour cet objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-214">The hash code for this object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInvocationTarget">
      <MemberSignature Language="C#" Value="protected override object GetInvocationTarget (Type type, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object GetInvocationTarget(class System.Type type, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ GetInvocationTarget(Type ^ type, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="override this.GetInvocationTarget : Type * obj -&gt; obj" Usage="propertyDescriptor.GetInvocationTarget (type, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="dad01-215">
            <see cref="T:System.Type" /> de la cible d'appel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-215">The <see cref="T:System.Type" /> of the invocation target.</span>
          </span>
        </param>
        <param name="instance">
          <span data-ttu-id="dad01-216">Cible d'appel potentielle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-216">The potential invocation target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-217">Cette méthode retourne l'objet qui doit être utilisé pendant l'appel de membres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-217">This method returns the object that should be used during invocation of members.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dad01-218">
            <see cref="T:System.Object" /> qui doit être utilisé pendant l'appel de membres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-218">The <see cref="T:System.Object" /> that should be used during invocation of members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dad01-219">En règle générale, la valeur de retour sera le même que le `instance` passé.</span><span class="sxs-lookup"><span data-stu-id="dad01-219">Typically, the return value will be the same as the `instance` passed in.</span></span> <span data-ttu-id="dad01-220">Si un utilisateur associé à un autre objet à cette instance, ou si l’instance est un descripteur de type personnalisé, le <xref:System.ComponentModel.PropertyDescriptor.GetInvocationTarget%2A> méthode peut retourner une valeur différente.</span><span class="sxs-lookup"><span data-stu-id="dad01-220">If someone associated another object with this instance, or if the instance is a custom type descriptor, the <xref:System.ComponentModel.PropertyDescriptor.GetInvocationTarget%2A> method may return a different value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromName">
      <MemberSignature Language="C#" Value="protected Type GetTypeFromName (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Type GetTypeFromName(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetTypeFromName (typeName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Type ^ GetTypeFromName(System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetTypeFromName : string -&gt; Type" Usage="propertyDescriptor.GetTypeFromName typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="dad01-221">Nom spécifié dans l'assembly du type à récupérer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-221">The assembly-qualified name of the type to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-222">Retourne un type en utilisant son nom.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-222">Returns a type using its name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dad01-223">
            <see cref="T:System.Type" /> correspondant au nom de type donné, ou <see langword="null" /> si aucune correspondance n'est détectée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-223">A <see cref="T:System.Type" /> that matches the given type name, or <see langword="null" /> if a match cannot be found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dad01-224">Pour rechercher le type approprié, cette méthode vérifie d’abord l’assembly du type que ce <xref:System.ComponentModel.PropertyDescriptor> références.</span><span class="sxs-lookup"><span data-stu-id="dad01-224">To find the appropriate type, this method first checks the assembly of the type that this <xref:System.ComponentModel.PropertyDescriptor> references.</span></span> <span data-ttu-id="dad01-225">S’il ne trouve pas le type dans l’assembly, elle appelle <xref:System.Type.GetType%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="dad01-225">If it does not find the type in the assembly, it calls <xref:System.Type.GetType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public abstract object GetValue (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(object component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetValue (component As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetValue(System::Object ^ component);" />
      <MemberSignature Language="F#" Value="abstract member GetValue : obj -&gt; obj" Usage="propertyDescriptor.GetValue component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="dad01-226">Composant possédant la propriété dont la valeur doit être récupérée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-226">The component with the property for which to retrieve the value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-227">En cas de substitution dans une classe dérivée, obtient la valeur actuelle de la propriété d'un composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-227">When overridden in a derived class, gets the current value of the property on a component.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dad01-228">Valeur d'une propriété pour un composant donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-228">The value of a property for a given component.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dad01-229">En règle générale, cette méthode est implémentée par la réflexion.</span><span class="sxs-lookup"><span data-stu-id="dad01-229">Typically, this method is implemented through reflection.</span></span>  
  
 <span data-ttu-id="dad01-230">Cette méthode appelle automatiquement la méthode préalable à une modification, <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A>et après modification de la méthode, <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A>, de la <xref:System.ComponentModel.Design.IComponentChangeService>.</span><span class="sxs-lookup"><span data-stu-id="dad01-230">This method automatically calls the pre-change method, <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A>, and post-change method, <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A>, of the <xref:System.ComponentModel.Design.IComponentChangeService>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="dad01-231">
            <para>Lorsque vous substituez cette méthode, il obtient la valeur actuelle de la propriété en appelant une méthode « GetMyProperty » que vous devez implémenter. Une exception dans cette méthode doit être transférées.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-231">
              <para>When you override this method, it gets the current value of the property by invoking a "GetMyProperty" method that you need to implement. An exception in that method should pass through.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetValueChangedHandler">
      <MemberSignature Language="C#" Value="protected internal EventHandler GetValueChangedHandler (object component);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.EventHandler GetValueChangedHandler(object component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function GetValueChangedHandler (component As Object) As EventHandler" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; EventHandler ^ GetValueChangedHandler(System::Object ^ component);" />
      <MemberSignature Language="F#" Value="member this.GetValueChangedHandler : obj -&gt; EventHandler" Usage="propertyDescriptor.GetValueChangedHandler component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="dad01-232">Composant pour lequel récupérer les gestionnaires d'événements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-232">The component for which to retrieve event handlers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-233">Récupère l’ensemble actif de gestionnaires d’événements <c>ValueChanged</c> pour un composant spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-233">Retrieves the current set of <c>ValueChanged</c> event handlers for a specific component</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dad01-234">Un gestionnaire d'événements de multidiffusion combiné ou <see langword="null" /> si aucun gestionnaire d'événements n'est assigné actuellement à <paramref name="component" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-234">A combined multicast event handler, or <see langword="null" /> if no event handlers are currently assigned to <paramref name="component" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLocalizable">
      <MemberSignature Language="C#" Value="public virtual bool IsLocalizable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLocalizable" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.PropertyDescriptor.IsLocalizable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsLocalizable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsLocalizable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLocalizable : bool" Usage="System.ComponentModel.PropertyDescriptor.IsLocalizable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="dad01-235">Obtient une valeur indiquant si cette propriété doit être localisée, comme spécifié dans <see cref="T:System.ComponentModel.LocalizableAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-235">Gets a value indicating whether this property should be localized, as specified in the <see cref="T:System.ComponentModel.LocalizableAttribute" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="dad01-236">
            <see langword="true" /> si le membre est marqué avec <see cref="T:System.ComponentModel.LocalizableAttribute" /> ayant la valeur <see langword="true" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-236">
              <see langword="true" /> if the member is marked with the <see cref="T:System.ComponentModel.LocalizableAttribute" /> set to <see langword="true" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dad01-237">Lorsqu’une propriété est marquée avec la <xref:System.ComponentModel.LocalizableAttribute> la valeur `true` et utilisé dans un concepteur visuel, ses valeurs sont enregistrées dans un fichier de ressources.</span><span class="sxs-lookup"><span data-stu-id="dad01-237">When a property is marked with the <xref:System.ComponentModel.LocalizableAttribute> set to `true` and used in a visual designer, its values are saved in a resource file.</span></span> <span data-ttu-id="dad01-238">Si vous marquez une propriété avec l’attribut et puis définissez la propriété dans le code, les fichiers de ressources ne sont pas utilisés.</span><span class="sxs-lookup"><span data-stu-id="dad01-238">If you mark a property with the attribute and then set the property in code, resource files are not used.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.LocalizableAttribute" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public abstract bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.PropertyDescriptor.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.ComponentModel.PropertyDescriptor.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="dad01-239">En cas de substitution dans une classe dérivée, obtient une valeur indiquant si cette propriété est en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-239">When overridden in a derived class, gets a value indicating whether this property is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="dad01-240">
            <see langword="true" /> si la propriété est en lecture seule ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-240">
              <see langword="true" /> if the property is read-only; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.ReadOnlyAttribute" />
      </Docs>
    </Member>
    <Member MemberName="OnValueChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnValueChanged (object component, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnValueChanged(object component, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnValueChanged (component As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnValueChanged(System::Object ^ component, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnValueChanged : obj * EventArgs -&gt; unit&#xA;override this.OnValueChanged : obj * EventArgs -&gt; unit" Usage="propertyDescriptor.OnValueChanged (component, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="dad01-241">Objet déclenchant l'événement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-241">The object that raises the event.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="dad01-242">
            <see cref="T:System.EventArgs" /> qui contient les données d'événement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-242">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-243">Déclenche l’événement <c>ValueChanged</c> que vous avez implémenté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-243">Raises the <c>ValueChanged</c> event that you implemented.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dad01-244">Cette méthode doit être appelée par votre implémentation de descripteur de propriété lorsque la valeur de propriété a été modifiée.</span><span class="sxs-lookup"><span data-stu-id="dad01-244">This method should be called by your property descriptor implementation when the property value has changed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public abstract Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.PropertyDescriptor.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.ComponentModel.PropertyDescriptor.PropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="dad01-245">En cas de substitution dans une classe dérivée, obtient le type de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-245">When overridden in a derived class, gets the type of the property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="dad01-246">
            <see cref="T:System.Type" /> représentant le type de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-246">A <see cref="T:System.Type" /> that represents the type of the property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dad01-247">En règle générale, cette propriété est implémentée par la réflexion.</span><span class="sxs-lookup"><span data-stu-id="dad01-247">Typically, this property is implemented through reflection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveValueChanged">
      <MemberSignature Language="C#" Value="public virtual void RemoveValueChanged (object component, EventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveValueChanged(object component, class System.EventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveValueChanged (component As Object, handler As EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveValueChanged(System::Object ^ component, EventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveValueChanged : obj * EventHandler -&gt; unit&#xA;override this.RemoveValueChanged : obj * EventHandler -&gt; unit" Usage="propertyDescriptor.RemoveValueChanged (component, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
        <Parameter Name="handler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="dad01-248">Composant dont le gestionnaire doit être supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-248">The component to remove the handler for.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="dad01-249">Délégué à supprimer en tant qu'écouteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-249">The delegate to remove as a listener.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-250">Permet à d'autres objets d'être avertis en cas de modification de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-250">Enables other objects to be notified when this property changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="dad01-251">
            <paramref name="component" /> ou <paramref name="handler" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-251">
              <paramref name="component" /> or <paramref name="handler" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ResetValue">
      <MemberSignature Language="C#" Value="public abstract void ResetValue (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetValue(object component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ResetValue (component As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void ResetValue(System::Object ^ component);" />
      <MemberSignature Language="F#" Value="abstract member ResetValue : obj -&gt; unit" Usage="propertyDescriptor.ResetValue component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="dad01-252">Composant dont la valeur par défaut de la propriété doit être rétablie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-252">The component with the property value that is to be reset to the default value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-253">En cas de substitution dans une classe dérivée, rétablit la valeur par défaut de cette propriété du composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-253">When overridden in a derived class, resets the value for this property of the component to the default value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dad01-254">En règle générale, cette méthode est implémentée par la réflexion.</span><span class="sxs-lookup"><span data-stu-id="dad01-254">Typically, this method is implemented through reflection.</span></span>  
  
 <span data-ttu-id="dad01-255">Cette méthode détermine la valeur de réinitialisation de la propriété dans l’ordre de priorité suivant :</span><span class="sxs-lookup"><span data-stu-id="dad01-255">This method determines the value to reset the property to in the following order of precedence:</span></span>  
  
1.  <span data-ttu-id="dad01-256">Il existe une propriété ombrée pour cette propriété.</span><span class="sxs-lookup"><span data-stu-id="dad01-256">There is a shadowed property for this property.</span></span>  
  
2.  <span data-ttu-id="dad01-257">Il existe un <xref:System.ComponentModel.DefaultValueAttribute> pour cette propriété.</span><span class="sxs-lookup"><span data-stu-id="dad01-257">There is a <xref:System.ComponentModel.DefaultValueAttribute> for this property.</span></span>  
  
3.  <span data-ttu-id="dad01-258">Il existe une méthode « ResetMyProperty » que vous avez implémentée, où « MyProperty » est le nom de la propriété que vous passez à celui-ci.</span><span class="sxs-lookup"><span data-stu-id="dad01-258">There is a "ResetMyProperty" method that you have implemented, where "MyProperty" is the name of the property you pass to it.</span></span>  
  
 <span data-ttu-id="dad01-259">Cette méthode crée un <xref:System.ComponentModel.Design.DesignerTransaction> automatiquement dans l’ordre suivant :</span><span class="sxs-lookup"><span data-stu-id="dad01-259">This method creates a <xref:System.ComponentModel.Design.DesignerTransaction> automatically in the following order:</span></span>  
  
1.  <span data-ttu-id="dad01-260">La méthode appelle la <xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A?displayProperty=nameWithType> pour créer une nouvelle méthode <xref:System.ComponentModel.Design.DesignerTransaction> pour représenter les modifications.</span><span class="sxs-lookup"><span data-stu-id="dad01-260">The method calls the <xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A?displayProperty=nameWithType> method to create a new <xref:System.ComponentModel.Design.DesignerTransaction> to represent the changes.</span></span>  
  
2.  <span data-ttu-id="dad01-261">La méthode appelle la <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A?displayProperty=nameWithType> méthode pour indiquer que la transaction a commencé et que les modifications sont sur le point de se produire.</span><span class="sxs-lookup"><span data-stu-id="dad01-261">The method calls the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A?displayProperty=nameWithType> method to indicate that the transaction has begun and the changes are about to occur.</span></span>  
  
3.  <span data-ttu-id="dad01-262">La méthode réinitialise la propriété avec la valeur déterminée par l’ordre de la vérification de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="dad01-262">The method resets the property to the value determined by this method's checking order.</span></span>  
  
4.  <span data-ttu-id="dad01-263">La méthode appelle la <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A?displayProperty=nameWithType> méthode pour indiquer que les modifications ont été effectuées.</span><span class="sxs-lookup"><span data-stu-id="dad01-263">The method calls the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A?displayProperty=nameWithType> method to indicate that the changes have occurred.</span></span>  
  
5.  <span data-ttu-id="dad01-264">Les appels de méthode <xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A?displayProperty=nameWithType> pour indiquer que la transaction est terminée.</span><span class="sxs-lookup"><span data-stu-id="dad01-264">The method calls <xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A?displayProperty=nameWithType> to indicate that the transaction is completed.</span></span>  
  
 <span data-ttu-id="dad01-265">L’objectif de la transaction doit prendre en charge `Undo` et `Redo` fonctionnalité.</span><span class="sxs-lookup"><span data-stu-id="dad01-265">The purpose of the transaction is to support `Undo` and `Redo` functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="dad01-266">
            <para>En cas de substitution dans une classe dérivée, cette méthode recherche un <see cref="T:System.ComponentModel.DefaultValueAttribute" />. S’il en trouve, il définit la valeur de la propriété à la <see cref="T:System.ComponentModel.DefaultValueAttribute" /> trouvé. Si cette méthode ne peut pas trouver un <see cref="T:System.ComponentModel.DefaultValueAttribute" />, il recherche une méthode « ResetMyProperty » que vous devez implémenter. Si elle est trouvée, le <see cref="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)" /> méthode appelle. Si <see cref="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)" /> Impossible de trouver un <see cref="T:System.ComponentModel.DefaultValueAttribute" /> ou une méthode « ResetMyProperty » que vous avez implémentée, il n’effectue pas une opération.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-266">
              <para>When overridden in a derived class, this method looks for a <see cref="T:System.ComponentModel.DefaultValueAttribute" />. If it finds one, it sets the value of the property to the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> it found. If this method cannot find a <see cref="T:System.ComponentModel.DefaultValueAttribute" />, it looks for a "ResetMyProperty" method that you need to implement. If this is found, the <see cref="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)" /> method invokes it. If <see cref="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)" /> cannot find a <see cref="T:System.ComponentModel.DefaultValueAttribute" /> or a "ResetMyProperty" method that you implemented, it does not perform an operation.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="SerializationVisibility">
      <MemberSignature Language="C#" Value="public System.ComponentModel.DesignerSerializationVisibility SerializationVisibility { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ComponentModel.DesignerSerializationVisibility SerializationVisibility" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SerializationVisibility As DesignerSerializationVisibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::DesignerSerializationVisibility SerializationVisibility { System::ComponentModel::DesignerSerializationVisibility get(); };" />
      <MemberSignature Language="F#" Value="member this.SerializationVisibility : System.ComponentModel.DesignerSerializationVisibility" Usage="System.ComponentModel.PropertyDescriptor.SerializationVisibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.DesignerSerializationVisibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="dad01-267">Obtient une valeur indiquant si cette propriété doit être sérialisée, comme spécifié dans <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-267">Gets a value indicating whether this property should be serialized, as specified in the <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="dad01-268">Une des valeurs d'énumération <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> spécifiant si cette propriété doit être sérialisée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-268">One of the <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> enumeration values that specifies whether this property should be serialized.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" />
        <altmember cref="T:System.ComponentModel.DesignerSerializationVisibility" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public abstract void SetValue (object component, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object component, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub SetValue (component As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SetValue(System::Object ^ component, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : obj * obj -&gt; unit" Usage="propertyDescriptor.SetValue (component, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="dad01-269">Composant dont la valeur de la propriété doit être définie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-269">The component with the property value that is to be set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="dad01-270">Nouvelle valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-270">The new value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-271">En cas de substitution dans une classe dérivée, affecte une autre valeur au composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-271">When overridden in a derived class, sets the value of the component to a different value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dad01-272">En règle générale, cette méthode est implémentée par la réflexion.</span><span class="sxs-lookup"><span data-stu-id="dad01-272">Typically, this method is implemented through reflection.</span></span>  
  
 <span data-ttu-id="dad01-273">Cette méthode crée un <xref:System.ComponentModel.Design.DesignerTransaction> automatiquement dans l’ordre suivant :</span><span class="sxs-lookup"><span data-stu-id="dad01-273">This method creates a <xref:System.ComponentModel.Design.DesignerTransaction> automatically in the following order:</span></span>  
  
1.  <span data-ttu-id="dad01-274">La méthode appelle la <xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A?displayProperty=nameWithType> pour créer une nouvelle méthode <xref:System.ComponentModel.Design.DesignerTransaction> pour représenter les modifications.</span><span class="sxs-lookup"><span data-stu-id="dad01-274">The method calls the <xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A?displayProperty=nameWithType> method to create a new <xref:System.ComponentModel.Design.DesignerTransaction> to represent the changes.</span></span>  
  
2.  <span data-ttu-id="dad01-275">La méthode appelle la <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A?displayProperty=nameWithType> méthode pour indiquer que la transaction a commencé et que les modifications sont sur le point de se produire.</span><span class="sxs-lookup"><span data-stu-id="dad01-275">The method calls the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A?displayProperty=nameWithType> method to indicate that the transaction has begun and the changes are about to occur.</span></span>  
  
3.  <span data-ttu-id="dad01-276">La méthode réinitialise la propriété avec la valeur déterminée par l’ordre de la vérification de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="dad01-276">The method resets the property to the value determined by this method's checking order.</span></span>  
  
4.  <span data-ttu-id="dad01-277">La méthode appelle la <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A?displayProperty=nameWithType> méthode pour indiquer que les modifications ont été effectuées.</span><span class="sxs-lookup"><span data-stu-id="dad01-277">The method calls the <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A?displayProperty=nameWithType> method to indicate that the changes have occurred.</span></span>  
  
5.  <span data-ttu-id="dad01-278">Les appels de méthode <xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A?displayProperty=nameWithType> pour indiquer que la transaction est terminée.</span><span class="sxs-lookup"><span data-stu-id="dad01-278">The method calls <xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A?displayProperty=nameWithType> to indicate that the transaction is complete.</span></span>  
  
 <span data-ttu-id="dad01-279">L’objectif de la transaction doit prendre en charge `Undo` et `Redo` fonctionnalité.</span><span class="sxs-lookup"><span data-stu-id="dad01-279">The purpose of the transaction is to support `Undo` and `Redo` functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="dad01-280">
            <para>Lorsque vous substituez cette méthode, il doit définir la valeur de la propriété en appelant la méthode « SetMyProperty » appropriée que vous devez implémenter. Si la valeur spécifiée n’est pas valide, le composant doit lever une exception, qui est passée. Vous devez concevoir la propriété de sorte qu’une méthode « GetMyProperty » (que vous avez implémentée) suivant une méthode « SetMyProperty » retourne la valeur passée lors de la méthode « SetMyProperty » ne lève pas d’exception.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-280">
              <para>When you override this method, it should set the value of the property by invoking the appropriate "SetMyProperty" method that you need to implement. If the value specified is not valid, the component should throw an exception, which is passed up. You should design the property so that a "GetMyProperty" method (that you have implemented) following a "SetMyProperty" method returns the value passed in when the "SetMyProperty" method does not throw an exception.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeValue">
      <MemberSignature Language="C#" Value="public abstract bool ShouldSerializeValue (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldSerializeValue(object component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ShouldSerializeValue (component As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool ShouldSerializeValue(System::Object ^ component);" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeValue : obj -&gt; bool" Usage="propertyDescriptor.ShouldSerializeValue component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">
          <span data-ttu-id="dad01-281">Composant possédant la propriété dont la persistance doit être examinée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-281">The component with the property to be examined for persistence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dad01-282">En cas de substitution dans une classe dérivée, détermine une valeur indiquant si la valeur de cette propriété doit être persistante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-282">When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dad01-283">
            <see langword="true" /> si la propriété doit être persistante ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-283">
              <see langword="true" /> if the property should be persisted; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dad01-284">En règle générale, cette méthode est implémentée par la réflexion.</span><span class="sxs-lookup"><span data-stu-id="dad01-284">Typically, this method is implemented through reflection.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="dad01-285">
            <para>En cas de substitution dans une classe dérivée, cette méthode retourne <see langword="true" /> si la valeur actuelle de la propriété est différente de sa valeur par défaut. Elle recherche une valeur par défaut en recherchant d’abord un <see cref="T:System.ComponentModel.DefaultValueAttribute" />. Si la méthode trouve cet attribut, il compare la valeur de l’attribut avec la valeur de propriété en cours. Si cette méthode ne peut pas trouver un <see cref="T:System.ComponentModel.DefaultValueAttribute" />, il recherche une méthode « ShouldSerializeMyProperty » que vous devez implémenter. Si elle est trouvée, <see cref="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)" /> l’appelle. Si cette méthode ne peut pas trouver un <see cref="T:System.ComponentModel.DefaultValueAttribute" /> ou une méthode « ShouldSerializeMyProperty », elle ne peut pas créer d’optimisation et elle retourne <see langword="true" />. <block subset="none" type="note"><para> La <see cref="T:System.ComponentModel.Design.ComponentDesigner" /> classe implémente la logique de sérialisation spéciale pour les composants hérités. Pour plus d’informations, consultez <see cref="T:System.ComponentModel.Design.ComponentDesigner" />. </para></block></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-285">
              <para>When overridden in a derived class, this method returns <see langword="true" /> if the current value of the property is different from its default value. It looks for a default value by first looking for a <see cref="T:System.ComponentModel.DefaultValueAttribute" />. If the method finds this attribute, it compares the value of the attribute with the property's current value. If this method cannot find a <see cref="T:System.ComponentModel.DefaultValueAttribute" />, it looks for a "ShouldSerializeMyProperty" method that you need to implement. If it is found, <see cref="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)" /> invokes it. If this method cannot find a <see cref="T:System.ComponentModel.DefaultValueAttribute" /> or a "ShouldSerializeMyProperty" method, it cannot create optimizations and it returns <see langword="true" />. <block subset="none" type="note"><para> The <see cref="T:System.ComponentModel.Design.ComponentDesigner" /> class implements special serialization logic for inherited components. For more information, see <see cref="T:System.ComponentModel.Design.ComponentDesigner" />. </para></block></para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.ComponentModel.Design.ComponentDesigner" />
      </Docs>
    </Member>
    <Member MemberName="SupportsChangeEvents">
      <MemberSignature Language="C#" Value="public virtual bool SupportsChangeEvents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsChangeEvents" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SupportsChangeEvents As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SupportsChangeEvents { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsChangeEvents : bool" Usage="System.ComponentModel.PropertyDescriptor.SupportsChangeEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="dad01-286">Obtient une valeur qui indique si les notifications de modification des valeurs pour cette propriété peuvent provenir de l'extérieur du descripteur de propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-286">Gets a value indicating whether value change notifications for this property may originate from outside the property descriptor.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="dad01-287">
            <see langword="true" /> si les notifications de modification des valeurs peuvent provenir de l'extérieur du descripteur de propriété ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dad01-287">
              <see langword="true" /> if value change notifications may originate from outside the property descriptor; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dad01-288">Le <xref:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents%2A> propriété indique si des notifications de modification de valeur pour cette propriété peuvent provenir à l’extérieur du descripteur de propriété, comme par le composant lui-même, ou si les notifications proviendront seulement d’appels directs à la <xref:System.ComponentModel.PropertyDescriptor.SetValue%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="dad01-288">The <xref:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents%2A> property indicates whether value change notifications for this property may originate from outside the property descriptor, such as from the component itself, or whether notifications will only originate from direct calls made to the <xref:System.ComponentModel.PropertyDescriptor.SetValue%2A> method.</span></span> <span data-ttu-id="dad01-289">Par exemple, le composant peut implémenter la <xref:System.ComponentModel.INotifyPropertyChanged> de l’interface, ou peut-être explicite `name.Changed` événement pour cette propriété.</span><span class="sxs-lookup"><span data-stu-id="dad01-289">For example, the component may implement the <xref:System.ComponentModel.INotifyPropertyChanged> interface, or may have an explicit `name.Changed` event for this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>