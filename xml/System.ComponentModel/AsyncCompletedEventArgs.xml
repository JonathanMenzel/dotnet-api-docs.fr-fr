<Type Name="AsyncCompletedEventArgs" FullName="System.ComponentModel.AsyncCompletedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cfd51e8f42c41ece2b3cafb44f9026de96b6ec70" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39869646" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class AsyncCompletedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AsyncCompletedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncCompletedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncCompletedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncCompletedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type AsyncCompletedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="d66d7-101">Fournit des données pour l’événement *MethodName*<see langword="Completed" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d66d7-101">Provides data for the *MethodName*<see langword="Completed" /> event.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d66d7-102">Si vous utilisez une classe qui implémente le [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), la classe fournit un *Nom_méthode* `Completed` événement.</span><span class="sxs-lookup"><span data-stu-id="d66d7-102">If you are using a class that implements the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), the class will provide a *MethodName*`Completed` event.</span></span> <span data-ttu-id="d66d7-103">Si vous ajoutez une instance de la <xref:System.ComponentModel.AsyncCompletedEventHandler?displayProperty=nameWithType> déléguer à l’événement, vous recevrez des informations sur le résultat des opérations asynchrones dans le <xref:System.ComponentModel.AsyncCompletedEventArgs> paramètre de la méthode de gestionnaire d’événements correspondante.</span><span class="sxs-lookup"><span data-stu-id="d66d7-103">If you add an instance of the <xref:System.ComponentModel.AsyncCompletedEventHandler?displayProperty=nameWithType> delegate to the event, you will receive information about the outcome of asynchronous operations in the <xref:System.ComponentModel.AsyncCompletedEventArgs> parameter of the corresponding event-handler method.</span></span>  
  
 <span data-ttu-id="d66d7-104">Délégué de gestionnaire d’événements de l’application cliente peut vérifier la <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> propriété afin de déterminer si la tâche asynchrone a été annulée.</span><span class="sxs-lookup"><span data-stu-id="d66d7-104">The client application's event-handler delegate can check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property to determine if the asynchronous task was cancelled.</span></span>  
  
 <span data-ttu-id="d66d7-105">Délégué de gestionnaire d’événements de l’application cliente peut vérifier la <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> propriété afin de déterminer si une exception s’est produite pendant l’exécution de la tâche asynchrone.</span><span class="sxs-lookup"><span data-stu-id="d66d7-105">The client application's event-handler delegate can check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property to determine if an exception occurred during execution of the asynchronous task.</span></span>  
  
 <span data-ttu-id="d66d7-106">Si la classe prend en charge plusieurs méthodes asynchrones ou plusieurs appels à la même méthode asynchrone, vous pouvez déterminer quelle tâche a déclenché le *Nom_méthode* `Completed` événement en vérifiant la valeur de la <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="d66d7-106">If the class supports multiple asynchronous methods, or multiple calls to the same asynchronous method, you can determine which task raised the *MethodName*`Completed` event by checking the value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property.</span></span> <span data-ttu-id="d66d7-107">Votre code devra effectuer le suivi de ces jetons, également appelés ID de tâche, leurs tâches asynchrones correspondantes démarrent et se terminent.</span><span class="sxs-lookup"><span data-stu-id="d66d7-107">Your code will need to track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d66d7-108">L’exemple de code suivant montre comment utiliser un <xref:System.ComponentModel.AsyncOperation> pour effectuer le suivi de la durée de vie des opérations asynchrones.</span><span class="sxs-lookup"><span data-stu-id="d66d7-108">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="d66d7-109">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.</span><span class="sxs-lookup"><span data-stu-id="d66d7-109">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  
[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]
[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="d66d7-110">
        <para>Les classes qui suivent le modèle asynchrone basé sur événement peuvent déclencher des événements pour alerter des clients sur l’état des opérations asynchrones en attente. Si la classe fournit un *Nom_méthode* <see langword="Completed" /> événement, vous pouvez utiliser le <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> pour informer les clients du résultat des opérations asynchrones.  Vous souhaiterez communiquer aux clients plus d’informations sur le résultat d’une opération asynchrone à un <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> prend en charge. Dans ce cas, vous pouvez dériver votre propre classe de la <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> classe et fournissez des variables d’instance privées supplémentaires et des propriétés publiques en lecture seule correspondantes. Appelez le <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> méthode avant de retourner la valeur de propriété, au cas où l’opération a été annulée ou une erreur s’est produite.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="d66d7-110">
          <para>Classes that follow the Event-based Asynchronous Pattern can raise events to alert clients about the status of pending asynchronous operations. If the class provides a *MethodName*<see langword="Completed" /> event, you can use the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> to tell clients about the outcome of asynchronous operations.  You may want to communicate to clients more information about the outcome of an asynchronous operation than an <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> accommodates. In this case, you can derive your own class from the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class and provide additional private instance variables and corresponding read-only public properties. Call the <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> method before returning the property value, in case the operation was canceled or an error occurred.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d66d7-111">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d66d7-111">Initializes a new instance of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AsyncCompletedEventArgs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AsyncCompletedEventArgs();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d66d7-112">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d66d7-112">Initializes a new instance of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AsyncCompletedEventArgs (Exception error, bool cancelled, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception error, bool cancelled, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (error As Exception, cancelled As Boolean, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AsyncCompletedEventArgs(Exception ^ error, bool cancelled, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.AsyncCompletedEventArgs : Exception * bool * obj -&gt; System.ComponentModel.AsyncCompletedEventArgs" Usage="new System.ComponentModel.AsyncCompletedEventArgs (error, cancelled, userState)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" />
        <Parameter Name="cancelled" Type="System.Boolean" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="error">
          <span data-ttu-id="d66d7-113">Toute erreur qui s'est produite pendant l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d66d7-113">Any error that occurred during the asynchronous operation.</span>
          </span>
        </param>
        <param name="cancelled">
          <span data-ttu-id="d66d7-114">Valeur qui indique si l'opération asynchrone a été annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d66d7-114">A value indicating whether the asynchronous operation was canceled.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="d66d7-115">L'objet d'état fourni par l'utilisateur facultatif est passé à la méthode <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d66d7-115">The optional user-supplied state object passed to the <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /> method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d66d7-116">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d66d7-116">Initializes a new instance of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancelled">
      <MemberSignature Language="C#" Value="public bool Cancelled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Cancelled" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Cancelled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Cancelled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Cancelled : bool" Usage="System.ComponentModel.AsyncCompletedEventArgs.Cancelled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d66d7-117">Obtient une valeur qui indique si une opération asynchrone a été annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d66d7-117">Gets a value indicating whether an asynchronous operation has been canceled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d66d7-118">
            <see langword="true" /> si l'opération d'arrière-plan a été annulée ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d66d7-118">
              <see langword="true" /> if the background operation has been canceled; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="d66d7-119">La valeur par défaut est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d66d7-119">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d66d7-120">Lorsque le <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> propriété est `true`, l’opération asynchrone a été interrompue.</span><span class="sxs-lookup"><span data-stu-id="d66d7-120">When the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property is `true`, the asynchronous operation was interrupted.</span></span>  
  
 <span data-ttu-id="d66d7-121">Délégué de gestionnaire d’événements de l’application cliente doit vérifier la <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> propriété avant d’accéder à toutes les propriétés dans une classe dérivée de <xref:System.ComponentModel.AsyncCompletedEventArgs>; sinon, la propriété lève une <xref:System.InvalidOperationException> si l’opération asynchrone a été interrompu.</span><span class="sxs-lookup"><span data-stu-id="d66d7-121">The client application's event-handler delegate should check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property before accessing any properties in a class derived from <xref:System.ComponentModel.AsyncCompletedEventArgs>; otherwise, the property will raise an <xref:System.InvalidOperationException> if the asynchronous operation was interrupted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d66d7-122">L’exemple de code suivant montre comment l’utiliser un <xref:System.ComponentModel.AsyncOperation> pour effectuer le suivi de la durée de vie des opérations asynchrones.</span><span class="sxs-lookup"><span data-stu-id="d66d7-122">The following code example demonstrates the using an <xref:System.ComponentModel.AsyncOperation> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="d66d7-123">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.</span><span class="sxs-lookup"><span data-stu-id="d66d7-123">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  
[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]
[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="d66d7-124">
            <para>Si vous fournissez des propriétés en lecture seule dans une classe dérivée, veillez à appeler la <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> (méthode). Cela empêche les clients d’accéder aux propriétés qui ne sont pas valides en raison d’une défaillance dans l’opération asynchrone.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="d66d7-124">
              <para>If you provide read-only properties in a derived class, be sure to call the <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> method. This prevents clients from accessing properties that are potentially not valid due to a failure in the asynchronous operation.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public Exception Error { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Error" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Error As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Error { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Error : Exception" Usage="System.ComponentModel.AsyncCompletedEventArgs.Error" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d66d7-125">Obtient une valeur qui indique quelle erreur s'est produite pendant une opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d66d7-125">Gets a value indicating which error occurred during an asynchronous operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d66d7-126">Une instance de <see cref="T:System.Exception" />, si une erreur s'est produite au cours d'une opération asynchrone ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d66d7-126">An <see cref="T:System.Exception" /> instance, if an error occurred during an asynchronous operation; otherwise <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d66d7-127">Si une exception est levée pendant une opération asynchrone, la classe assigne l’exception à la <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="d66d7-127">If an exception is raised during an asynchronous operation, the class will assign the exception to the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property.</span></span> <span data-ttu-id="d66d7-128">Délégué de gestionnaire d’événements de l’application cliente doit vérifier la <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> propriété avant d’accéder à toutes les propriétés dans une classe dérivée de <xref:System.ComponentModel.AsyncCompletedEventArgs>; sinon, la propriété lève une <xref:System.Reflection.TargetInvocationException> avec son <xref:System.Exception.InnerException%2A> exploitation de la propriété un référence à <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>.</span><span class="sxs-lookup"><span data-stu-id="d66d7-128">The client application's event-handler delegate should check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property before accessing any properties in a class derived from <xref:System.ComponentModel.AsyncCompletedEventArgs>; otherwise, the property will raise a <xref:System.Reflection.TargetInvocationException> with its <xref:System.Exception.InnerException%2A> property holding a reference to <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>.</span></span>  
  
 <span data-ttu-id="d66d7-129">La valeur de la <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> est propriété `null` si l’opération a été annulée.</span><span class="sxs-lookup"><span data-stu-id="d66d7-129">The value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property is `null` if the operation was canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d66d7-130">L’exemple de code suivant montre comment utiliser un <xref:System.ComponentModel.AsyncOperation> pour effectuer le suivi de la durée de vie des opérations asynchrones.</span><span class="sxs-lookup"><span data-stu-id="d66d7-130">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="d66d7-131">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.</span><span class="sxs-lookup"><span data-stu-id="d66d7-131">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  
[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]
[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="d66d7-132">
            <para>Si vous fournissez des propriétés en lecture seule dans une classe dérivée, veillez à appeler la <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> méthode dans votre implémentation de propriété. Cela empêche les clients d’accéder aux propriétés qui ne sont pas valides en raison d’une défaillance dans l’opération asynchrone.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="d66d7-132">
              <para>If you provide read-only properties in a derived class, be sure to call the <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> method in your property implementation. This prevents clients from accessing properties that are potentially not valid due to a failure in the asynchronous operation.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="RaiseExceptionIfNecessary">
      <MemberSignature Language="C#" Value="protected void RaiseExceptionIfNecessary ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseExceptionIfNecessary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseExceptionIfNecessary ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseExceptionIfNecessary();" />
      <MemberSignature Language="F#" Value="member this.RaiseExceptionIfNecessary : unit -&gt; unit" Usage="asyncCompletedEventArgs.RaiseExceptionIfNecessary " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d66d7-133">Lève une exception fournie par l'utilisateur en cas d'échec d'une opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d66d7-133">Raises a user-supplied exception if an asynchronous operation failed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d66d7-134">L’exemple de code suivant montre comment utiliser <xref:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary%2A> dans les propriétés de classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="d66d7-134">The following code example demonstrates using <xref:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary%2A> in derived class properties.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#6)]
[!code-vb[System.ComponentModel.AsyncOperationManager#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d66d7-135">La propriété <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> a la valeur <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d66d7-135">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> property is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="d66d7-136">La propriété <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> a été définie par l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d66d7-136">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> property has been set by the asynchronous operation.</span>
          </span>
          <span data-ttu-id="d66d7-137">La propriété <see cref="P:System.Exception.InnerException" /> contient une référence à <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d66d7-137">The <see cref="P:System.Exception.InnerException" /> property holds a reference to <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="d66d7-138">
            <para>Si vous avez dérivé votre propre classe de la <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> classe, vos propriétés en lecture seule doivent appeler la <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> méthode avant de retourner la valeur de propriété. Si le composant asynchrone du code de travail affecte une exception à la <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> propriété ou définit le <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> propriété <see langword="true" />, la propriété lève une exception si un client tente de lire sa valeur. Cela empêche les clients d’accéder aux propriétés qui ne sont pas valides en raison d’une défaillance dans l’opération asynchrone.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="d66d7-138">
              <para>If you have derived your own class from the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class, your read-only properties should call the <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> method before returning the property value. If the component's asynchronous worker code assigns an exception to the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> property or sets the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> property to <see langword="true" />, the property will raise an exception if a client tries to read its value. This prevents clients from accessing properties that are potentially not valid due to a failure in the asynchronous operation.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="UserState">
      <MemberSignature Language="C#" Value="public object UserState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncCompletedEventArgs.UserState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserState : obj" Usage="System.ComponentModel.AsyncCompletedEventArgs.UserState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d66d7-139">Obtient l'identificateur unique de la tâche asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d66d7-139">Gets the unique identifier for the asynchronous task.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d66d7-140">Référence d'objet qui identifie uniquement la tâche asynchrone ; sinon, <see langword="null" /> si aucune valeur n'a été définie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d66d7-140">An object reference that uniquely identifies the asynchronous task; otherwise, <see langword="null" /> if no value has been set.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d66d7-141">Si une classe prend en charge plusieurs méthodes asynchrones ou plusieurs appels d’une seule méthode, vous pouvez déterminer quelle tâche a déclenché le *Nom_méthode* `Completed` événement en vérifiant la valeur de la <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="d66d7-141">If a class supports multiple asynchronous methods, or multiple invocations of a single method, you can determine which task raised the *MethodName*`Completed` event by checking the value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property.</span></span> <span data-ttu-id="d66d7-142">Votre code devra suivre ces jetons, également appelés ID de tâche, leurs tâches asynchrones correspondantes démarrent et se terminent.</span><span class="sxs-lookup"><span data-stu-id="d66d7-142">Your code will need track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.</span></span>  
  
 <span data-ttu-id="d66d7-143">La valeur de cette propriété est définie lors de l’appel d’origine à la méthode asynchrone qui a démarré la tâche.</span><span class="sxs-lookup"><span data-stu-id="d66d7-143">The value of this property is set during the original call to the asynchronous method that started the task.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d66d7-144">L’exemple de code suivant montre comment utiliser un <xref:System.ComponentModel.AsyncOperation> pour effectuer le suivi de la durée de vie des opérations asynchrones.</span><span class="sxs-lookup"><span data-stu-id="d66d7-144">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="d66d7-145">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.</span><span class="sxs-lookup"><span data-stu-id="d66d7-145">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  
[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]
[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
  </Members>
</Type>