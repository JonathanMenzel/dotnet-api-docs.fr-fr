<Type Name="ISynchronizeInvoke" FullName="System.ComponentModel.ISynchronizeInvoke">
  <Metadata><Meta Name="ms.openlocfilehash" Value="487d8f80afe19a48da2d943e861f20020a0daf20" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52196567" /></Metadata><TypeSignature Language="C#" Value="public interface ISynchronizeInvoke" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISynchronizeInvoke" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.ISynchronizeInvoke" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISynchronizeInvoke" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISynchronizeInvoke" />
  <TypeSignature Language="F#" Value="type ISynchronizeInvoke = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3a7fc-101">Fournit un moyen d'exécuter un délégué de manière synchrone ou asynchrone.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-101">Provides a way to synchronously or asynchronously execute a delegate.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a7fc-102">Le <xref:System.ComponentModel.ISynchronizeInvoke> interface fournit une communication synchrone et asynchrone entre les objets concernant l’occurrence d’un événement.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-102">The <xref:System.ComponentModel.ISynchronizeInvoke> interface provides synchronous and asynchronous communication between objects about the occurrence of an event.</span></span> <span data-ttu-id="3a7fc-103">Les objets qui implémentent cette interface peuvent recevoir une notification d’un événement, ils puissent répondre aux requêtes relatives à l’événement.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-103">Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event.</span></span> <span data-ttu-id="3a7fc-104">De cette façon, les clients peuvent s’assurer qu’une demande a été traitée avant d’envoyer une demande ultérieure qui dépend de l’achèvement de la première.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-104">In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.</span></span>  
  
 <span data-ttu-id="3a7fc-105">Le <xref:System.ComponentModel.ISynchronizeInvoke> classe fournit deux façons d’appeler un processus :</span><span class="sxs-lookup"><span data-stu-id="3a7fc-105">The <xref:System.ComponentModel.ISynchronizeInvoke> class provides two ways to invoke a process:</span></span>  
  
1.  <span data-ttu-id="3a7fc-106">En mode asynchrone, en utilisant le <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="3a7fc-106">Asynchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> method.</span></span> <span data-ttu-id="3a7fc-107"><xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> démarre un processus, puis retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-107"><xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> starts a process and then returns immediately.</span></span> <span data-ttu-id="3a7fc-108">Utilisez <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> d’attente jusqu'à ce que le processus démarré par <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> se termine.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-108">Use <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to wait until the process started by <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> completes.</span></span>  
  
2.  <span data-ttu-id="3a7fc-109">De façon synchrone, à l’aide de la <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="3a7fc-109">Synchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method.</span></span> <span data-ttu-id="3a7fc-110"><xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> démarre un processus, attend qu’il se termine, puis le retourne.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-110"><xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> starts a process, waits until it completes, and then returns.</span></span> <span data-ttu-id="3a7fc-111">Utilisez <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> lorsque le contrôle de le principal thread est différent du thread appelant pour marshaler l’appel au thread approprié.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-111">Use <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when the control's main thread is different from the calling thread to marshal the call to the proper thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3a7fc-112">Le <xref:System.Security.Permissions.HostProtectionAttribute> attribut appliqué à cette classe est les suivantes <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> valeur de propriété : <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-112">The <xref:System.Security.Permissions.HostProtectionAttribute> attribute applied to this class has the following <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> property value: <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>.</span></span> <span data-ttu-id="3a7fc-113"><xref:System.Security.Permissions.HostProtectionAttribute> n'affecte pas les applications bureautiques (qui sont généralement démarrées en double-cliquant sur une icône, en tapant une commande ou en entrant une URL dans un navigateur).</span><span class="sxs-lookup"><span data-stu-id="3a7fc-113">The <xref:System.Security.Permissions.HostProtectionAttribute> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser).</span></span> <span data-ttu-id="3a7fc-114">Pour plus d’informations, consultez le <xref:System.Security.Permissions.HostProtectionAttribute> classe ou [programmation de SQL Server et les attributs de Protection hôte](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).</span><span class="sxs-lookup"><span data-stu-id="3a7fc-114">For more information, see the <xref:System.Security.Permissions.HostProtectionAttribute> class or [SQL Server Programming and Host Protection Attributes](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
  </Docs>
  <Members>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, args As Object()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member BeginInvoke : Delegate * obj[] -&gt; IAsyncResult" Usage="iSynchronizeInvoke.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="3a7fc-115"><see cref="T:System.Delegate" /> vers une méthode qui prend des paramètres du même nombre et du même type que ceux qui sont contenus dans <paramref name="args" />.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-115">A <see cref="T:System.Delegate" /> to a method that takes parameters of the same number and type that are contained in <paramref name="args" />.</span></span></param>
        <param name="args"><span data-ttu-id="3a7fc-116">Tableau de type <see cref="T:System.Object" /> à passer comme arguments à la méthode donnée.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-116">An array of type <see cref="T:System.Object" /> to pass as arguments to the given method.</span></span> <span data-ttu-id="3a7fc-117">Peut être <see langword="null" /> si aucun argument n’est nécessaire.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-117">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="3a7fc-118">Exécute le délégué de manière asynchrone sur le thread qui a créé cet objet.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-118">Asynchronously executes the delegate on the thread that created this object.</span></span></summary>
        <returns><span data-ttu-id="3a7fc-119">Interface <see cref="T:System.IAsyncResult" /> qui représente l'opération asynchrone lancée en appelant cette méthode.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-119">An <see cref="T:System.IAsyncResult" /> interface that represents the asynchronous operation started by calling this method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a7fc-120">Le `method` délégué est exécuté sur le thread qui a créé l’objet, et non pas le thread sur lequel <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> a été appelée.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-120">The `method` delegate is executed on the thread that created the object, instead of the thread on which <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> was called.</span></span>  
  
 <span data-ttu-id="3a7fc-121">Le délégué est appelé de façon asynchrone, et cette méthode est retournée immédiatement.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-121">The delegate is called asynchronously, and this method returns immediately.</span></span> <span data-ttu-id="3a7fc-122">Vous pouvez appeler cette méthode à partir de n’importe quel thread.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-122">You can call this method from any thread.</span></span> <span data-ttu-id="3a7fc-123">Si vous avez besoin de la valeur de retour à partir d’un processus lancé avec cette méthode, appelez <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> pour obtenir la valeur.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-123">If you need the return value from a process started with this method, call <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to get the value.</span></span>  
  
 <span data-ttu-id="3a7fc-124">Si vous devez appeler le délégué de manière synchrone, utilisez la <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-124">If you need to call the delegate synchronously, use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndInvoke : IAsyncResult -&gt; obj" Usage="iSynchronizeInvoke.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="3a7fc-125">Interface <see cref="T:System.IAsyncResult" /> qui représente l'opération asynchrone lancée en appelant <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-125">An <see cref="T:System.IAsyncResult" /> interface that represents the asynchronous operation started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />.</span></span></param>
        <summary><span data-ttu-id="3a7fc-126">Attend que le processus lancé en appelant <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> se termine puis retourne la valeur générée par le processus.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-126">Waits until the process started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> completes, and then returns the value generated by the process.</span></span></summary>
        <returns><span data-ttu-id="3a7fc-127"><see cref="T:System.Object" /> qui représente la valeur de retour générée par l'opération asynchrone.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-127">An <see cref="T:System.Object" /> that represents the return value generated by the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a7fc-128">Cette méthode obtient la valeur de retour de l’opération asynchrone représentée par le <xref:System.IAsyncResult> transmis par cette interface.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-128">This method gets the return value of the asynchronous operation represented by the <xref:System.IAsyncResult> passed by this interface.</span></span> <span data-ttu-id="3a7fc-129">Si l’opération asynchrone n’est pas terminée, cette méthode attend que le résultat est disponible.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-129">If the asynchronous operation has not completed, this method will wait until the result is available.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : Delegate * obj[] -&gt; obj" Usage="iSynchronizeInvoke.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="3a7fc-130"><see cref="T:System.Delegate" /> qui contient une méthode à appeler, dans le contexte du thread pour le contrôle.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-130">A <see cref="T:System.Delegate" /> that contains a method to call, in the context of the thread for the control.</span></span></param>
        <param name="args"><span data-ttu-id="3a7fc-131">Tableau de type <see cref="T:System.Object" /> qui représente les arguments à passer à la méthode donnée.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-131">An array of type <see cref="T:System.Object" /> that represents the arguments to pass to the given method.</span></span> <span data-ttu-id="3a7fc-132">Peut être <see langword="null" /> si aucun argument n’est nécessaire.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-132">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="3a7fc-133">Exécute le délégué de manière synchrone sur le thread qui a créé cet objet et marshale l'appel au thread créateur.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-133">Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.</span></span></summary>
        <returns><span data-ttu-id="3a7fc-134"><see cref="T:System.Object" /> qui représente la valeur de retour du délégué appelé ou <see langword="null" /> si le délégué n'a pas de valeur de retour.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-134">An <see cref="T:System.Object" /> that represents the return value from the delegate being invoked, or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a7fc-135">Contrairement à <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, cette méthode fonctionne de manière synchrone, autrement dit, il attend jusqu'à ce que le processus se termine avant de retourner.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-135">Unlike <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, this method operates synchronously, that is, it waits until the process completes before returning.</span></span> <span data-ttu-id="3a7fc-136">Les exceptions levées pendant l’appel sont propagées vers l’appelant.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-136">Exceptions raised during the call are propagated back to the caller.</span></span>  
  
 <span data-ttu-id="3a7fc-137">Utilisez cette méthode lorsque vous appelez une méthode à partir d’un autre thread à marshaler l’appel au thread approprié.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-137">Use this method when calling a method from a different thread to marshal the call to the proper thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeRequired">
      <MemberSignature Language="C#" Value="public bool InvokeRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvokeRequired" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InvokeRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InvokeRequired { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InvokeRequired : bool" Usage="System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a7fc-138">Obtient une valeur indiquant si l'appelant doit appeler <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> lors de l'appel d'un objet implémentant cette interface.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-138">Gets a value indicating whether the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> when calling an object that implements this interface.</span></span></summary>
        <value><span data-ttu-id="3a7fc-139"><see langword="true" /> si l'appelant doit appeler <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-139"><see langword="true" /> if the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a7fc-140">Cette propriété détermine si l’appelant doit appeler <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> quand effectuer des appels de méthode à un objet qui implémente cette interface.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-140">This property determines whether the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when making method calls to an object that implements this interface.</span></span> <span data-ttu-id="3a7fc-141">Ces objets sont liés à un thread spécifique et ne sont pas thread-safe.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-141">Such objects are bound to a specific thread and are not thread-safe.</span></span> <span data-ttu-id="3a7fc-142">Si vous appelez une méthode à partir d’un thread différent, vous devez utiliser le <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> méthode à marshaler l’appel au thread approprié.</span><span class="sxs-lookup"><span data-stu-id="3a7fc-142">If you are calling a method from a different thread, you must use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method to marshal the call to the proper thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>