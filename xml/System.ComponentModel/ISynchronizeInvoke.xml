<Type Name="ISynchronizeInvoke" FullName="System.ComponentModel.ISynchronizeInvoke">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2d950b17f4199a84f96c69cefa6e5ed5f677d656" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58699795" /></Metadata><TypeSignature Language="C#" Value="public interface ISynchronizeInvoke" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISynchronizeInvoke" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.ISynchronizeInvoke" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISynchronizeInvoke" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISynchronizeInvoke" />
  <TypeSignature Language="F#" Value="type ISynchronizeInvoke = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Fournit un moyen d'exécuter un délégué de manière synchrone ou asynchrone.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ComponentModel.ISynchronizeInvoke> interface fournit une communication synchrone et asynchrone entre les objets concernant l’occurrence d’un événement. Les objets qui implémentent cette interface peuvent recevoir une notification d’un événement, ils puissent répondre aux requêtes relatives à l’événement. De cette façon, les clients peuvent s’assurer qu’une demande a été traitée avant d’envoyer une demande ultérieure qui dépend de l’achèvement de la première.  
  
 Le <xref:System.ComponentModel.ISynchronizeInvoke> classe fournit deux façons d’appeler un processus :  
  
1.  En mode asynchrone, en utilisant le <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> (méthode). <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> démarre un processus, puis retourne immédiatement. Utilisez <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> d’attente jusqu'à ce que le processus démarré par <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> se termine.  
  
2.  De façon synchrone, à l’aide de la <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> (méthode). <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> démarre un processus, attend qu’il se termine, puis le retourne. Utilisez <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> lorsque le contrôle de le principal thread est différent du thread appelant pour marshaler l’appel au thread approprié.  
  
> [!NOTE]
>  Le <xref:System.Security.Permissions.HostProtectionAttribute> attribut appliqué à cette classe est les suivantes <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> valeur de propriété : <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>. <xref:System.Security.Permissions.HostProtectionAttribute> n'affecte pas les applications bureautiques (qui sont généralement démarrées en double-cliquant sur une icône, en tapant une commande ou en entrant une URL dans un navigateur). Pour plus d’informations, consultez le <xref:System.Security.Permissions.HostProtectionAttribute> classe ou [programmation de SQL Server et les attributs de Protection hôte](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
  </Docs>
  <Members>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, args As Object()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member BeginInvoke : Delegate * obj[] -&gt; IAsyncResult" Usage="iSynchronizeInvoke.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method"><see cref="T:System.Delegate" /> vers une méthode qui prend des paramètres du même nombre et du même type que ceux qui sont contenus dans <paramref name="args" />.</param>
        <param name="args">Tableau de type <see cref="T:System.Object" /> à passer comme arguments à la méthode donnée. Peut être <see langword="null" /> si aucun argument n’est nécessaire.</param>
        <summary>Exécute le délégué de manière asynchrone sur le thread qui a créé cet objet.</summary>
        <returns>Interface <see cref="T:System.IAsyncResult" /> qui représente l'opération asynchrone lancée en appelant cette méthode.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `method` délégué est exécuté sur le thread qui a créé l’objet, et non pas le thread sur lequel <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> a été appelée.  
  
 Le délégué est appelé de façon asynchrone, et cette méthode est retournée immédiatement. Vous pouvez appeler cette méthode à partir de n’importe quel thread. Si vous avez besoin de la valeur de retour à partir d’un processus lancé avec cette méthode, appelez <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> pour obtenir la valeur.  
  
 Si vous devez appeler le délégué de manière synchrone, utilisez la <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> méthode à la place.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndInvoke : IAsyncResult -&gt; obj" Usage="iSynchronizeInvoke.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Interface <see cref="T:System.IAsyncResult" /> qui représente l'opération asynchrone lancée en appelant <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />.</param>
        <summary>Attend que le processus lancé en appelant <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> se termine puis retourne la valeur générée par le processus.</summary>
        <returns><see cref="T:System.Object" /> qui représente la valeur de retour générée par l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode obtient la valeur de retour de l’opération asynchrone représentée par le <xref:System.IAsyncResult> transmis par cette interface. Si l’opération asynchrone n’est pas terminée, cette méthode attend que le résultat est disponible.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : Delegate * obj[] -&gt; obj" Usage="iSynchronizeInvoke.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method"><see cref="T:System.Delegate" /> qui contient une méthode à appeler, dans le contexte du thread pour le contrôle.</param>
        <param name="args">Tableau de type <see cref="T:System.Object" /> qui représente les arguments à passer à la méthode donnée. Peut être <see langword="null" /> si aucun argument n’est nécessaire.</param>
        <summary>Exécute le délégué de manière synchrone sur le thread qui a créé cet objet et marshale l'appel au thread créateur.</summary>
        <returns><see cref="T:System.Object" /> qui représente la valeur de retour du délégué appelé ou <see langword="null" /> si le délégué n'a pas de valeur de retour.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contrairement à <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, cette méthode fonctionne de manière synchrone, autrement dit, il attend jusqu'à ce que le processus se termine avant de retourner. Les exceptions levées pendant l’appel sont propagées vers l’appelant.  
  
 Utilisez cette méthode lorsque vous appelez une méthode à partir d’un autre thread à marshaler l’appel au thread approprié.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeRequired">
      <MemberSignature Language="C#" Value="public bool InvokeRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvokeRequired" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InvokeRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InvokeRequired { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InvokeRequired : bool" Usage="System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si l'appelant doit appeler <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> lors de l'appel d'un objet implémentant cette interface.</summary>
        <value><see langword="true" /> si l'appelant doit appeler <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété détermine si l’appelant doit appeler <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> quand effectuer des appels de méthode à un objet qui implémente cette interface. Ces objets sont liés à un thread spécifique et ne sont pas thread-safe. Si vous appelez une méthode à partir d’un thread différent, vous devez utiliser le <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> méthode à marshaler l’appel au thread approprié.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>