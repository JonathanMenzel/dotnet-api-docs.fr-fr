<Type Name="NestedContainer" FullName="System.ComponentModel.NestedContainer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="46ae68c7474ee27942a592552a60babe8292d753" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53231493" /></Metadata><TypeSignature Language="C#" Value="public class NestedContainer : System.ComponentModel.Container, IDisposable, System.ComponentModel.INestedContainer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NestedContainer extends System.ComponentModel.Container implements class System.ComponentModel.IContainer, class System.ComponentModel.INestedContainer, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.NestedContainer" />
  <TypeSignature Language="VB.NET" Value="Public Class NestedContainer&#xA;Inherits Container&#xA;Implements IDisposable, INestedContainer" />
  <TypeSignature Language="C++ CLI" Value="public ref class NestedContainer : System::ComponentModel::Container, IDisposable, System::ComponentModel::INestedContainer" />
  <TypeSignature Language="F#" Value="type NestedContainer = class&#xA;    inherit Container&#xA;    interface INestedContainer&#xA;    interface IContainer&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Container</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.INestedContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="1898a-101">Fournit l'implémentation de base pour l'interface <see cref="T:System.ComponentModel.INestedContainer" /> qui permet aux conteneurs d'avoir un composant propriétaire.</span><span class="sxs-lookup"><span data-stu-id="1898a-101">Provides the base implementation for the <see cref="T:System.ComponentModel.INestedContainer" /> interface, which enables containers to have an owning component.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1898a-102">Le <xref:System.ComponentModel.NestedContainer> classe est une implémentation simple du <xref:System.ComponentModel.INestedContainer> interface qui définit un composant qui logiquement contient zéro ou plusieurs autres composants et est détenu par un composant parent.</span><span class="sxs-lookup"><span data-stu-id="1898a-102">The <xref:System.ComponentModel.NestedContainer> class is a simple implementation of the <xref:System.ComponentModel.INestedContainer> interface, which defines a component that logically contains zero or more other components and is owned by a parent component.</span></span> <span data-ttu-id="1898a-103">Le comportement de conteneurs imbriqués diffère d’une norme <xref:System.ComponentModel.Container> une de plusieurs façons, notamment les suivantes :</span><span class="sxs-lookup"><span data-stu-id="1898a-103">The behavior of nested containers differs from a standard <xref:System.ComponentModel.Container> in a number of ways, including the following:</span></span>  
  
-   <span data-ttu-id="1898a-104">Caractéristiques de site comme <xref:System.ComponentModel.Component.DesignMode%2A> et <xref:System.ComponentModel.Component.GetService%2A> sont routées via le site du composant propriétaire.</span><span class="sxs-lookup"><span data-stu-id="1898a-104">Site characteristics such as <xref:System.ComponentModel.Component.DesignMode%2A> and <xref:System.ComponentModel.Component.GetService%2A> are routed through the owning component's site.</span></span>  
  
-   <span data-ttu-id="1898a-105">Le site <xref:System.ComponentModel.ISite.Name%2A> propriété est un nom qualifié qui inclut le nom du composant propriétaire suivi d’un point (.) et le nom du composant de l’enfant.</span><span class="sxs-lookup"><span data-stu-id="1898a-105">The site's <xref:System.ComponentModel.ISite.Name%2A> property is a qualified name that includes the owning component's name followed by a period (.) and the child component's name.</span></span>  
  
-   <span data-ttu-id="1898a-106"><xref:System.ComponentModel.NestedContainer.GetService%2A> Fournit la prise en charge pour le <xref:System.ComponentModel.INestedContainer> en tant que service.</span><span class="sxs-lookup"><span data-stu-id="1898a-106"><xref:System.ComponentModel.NestedContainer.GetService%2A> provides support for the <xref:System.ComponentModel.INestedContainer> as a service.</span></span>  
  
-   <span data-ttu-id="1898a-107">Lorsque le composant propriétaire est supprimé, le conteneur est également supprimé.</span><span class="sxs-lookup"><span data-stu-id="1898a-107">When the owning component is disposed, the container is disposed as well.</span></span>  
  
 <span data-ttu-id="1898a-108">En outre, les concepteurs traitent les conteneurs imbriqués différemment.</span><span class="sxs-lookup"><span data-stu-id="1898a-108">In addition, designers treat nested containers differently.</span></span> <span data-ttu-id="1898a-109">Un hôte de concepteur est uniquement intéressé par un conteneur - celui associé à l’hôte.</span><span class="sxs-lookup"><span data-stu-id="1898a-109">A designer host is only interested in one container - the one associated with the host.</span></span> <span data-ttu-id="1898a-110">Par conséquent, le composant Ajouter et supprimer des événements ne sont pas déclenchés lorsqu’un composant est ajouté ou supprimé d’un conteneur imbriqué.</span><span class="sxs-lookup"><span data-stu-id="1898a-110">Therefore, component add and remove events are not raised when a component is added to or removed from a nested container.</span></span> <span data-ttu-id="1898a-111">Toutefois, étant donné que dans les services de circulent vers le conteneur imbriqué, les événements de modification de composant sont déclenchés lorsqu’un composant dans un conteneur imbriqué est modifié.</span><span class="sxs-lookup"><span data-stu-id="1898a-111">However, because services flow through to the nested container, component change events are raised when a component in a nested container is changed.</span></span>  
  
 <span data-ttu-id="1898a-112">Cette disparité dans le suivi des événements affecte également la fonctionnalité d’annulation, qui est étroitement liée à la sérialisation.</span><span class="sxs-lookup"><span data-stu-id="1898a-112">This disparity in event tracking also impacts undo functionality, which is closely tied to serialization.</span></span> <span data-ttu-id="1898a-113">Le moteur d’annulation standard utilise <xref:System.ComponentModel.Design.IReferenceService> pour suivre les modifications apportées aux composants.</span><span class="sxs-lookup"><span data-stu-id="1898a-113">The standard undo engine uses <xref:System.ComponentModel.Design.IReferenceService> to track changes made to components.</span></span> <span data-ttu-id="1898a-114">Si le moteur d’annulation ne peut pas identifier un nom pour un composant par le biais du service de référence, le moteur ignore toutes les modifications de ce composant.</span><span class="sxs-lookup"><span data-stu-id="1898a-114">If the undo engine cannot identify a name for a component through the reference service, the engine will ignore any changes for that component.</span></span> <span data-ttu-id="1898a-115">Ce service reconnaît automatiquement les modifications apportées aux composants contenus uniquement si elles sont exposées comme des propriétés en lecture seule publiques du même nom dans leurs propriétaires.</span><span class="sxs-lookup"><span data-stu-id="1898a-115">This service automatically recognizes changes to contained components only if they are exposed as public read-only properties of the same name in their owners.</span></span> <span data-ttu-id="1898a-116">Sinon, le développeur doit passer les événements de modification composant propriétaire.</span><span class="sxs-lookup"><span data-stu-id="1898a-116">Otherwise, the developer must pass component change events up to the owner.</span></span> <span data-ttu-id="1898a-117">Par exemple, si un composant imbriqué `Text` propriété est remontée sur son composant propriétaire en tant qu’un `Address` propriété, quand le `Text` propriété est modifiée, une modification de propriété doit être effectuée par programme pour le correspondantes `Address` propriété faute de quoi cette modification ne sera pas suivie par une annulation.</span><span class="sxs-lookup"><span data-stu-id="1898a-117">For example, if a nested component's `Text` property is resurfaced on its owning component as an `Address` property, when the `Text` property is changed, a property change must be programmatically made for the corresponding `Address` property or else that change will not be tracked by undo.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.INestedContainer" />
    <altmember cref="T:System.ComponentModel.IContainer" />
    <altmember cref="T:System.ComponentModel.ISite" />
    <altmember cref="T:System.ComponentModel.Design.IReferenceService" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NestedContainer (System.ComponentModel.IComponent owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IComponent owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NestedContainer(System::ComponentModel::IComponent ^ owner);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.NestedContainer : System.ComponentModel.IComponent -&gt; System.ComponentModel.NestedContainer" Usage="new System.ComponentModel.NestedContainer owner" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="owner"><span data-ttu-id="1898a-118"><see cref="T:System.ComponentModel.IComponent" /> auquel appartient ce conteneur imbriqué.</span><span class="sxs-lookup"><span data-stu-id="1898a-118">The <see cref="T:System.ComponentModel.IComponent" /> that owns this nested container.</span></span></param>
        <summary><span data-ttu-id="1898a-119">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.NestedContainer" />.</span><span class="sxs-lookup"><span data-stu-id="1898a-119">Initializes a new instance of the <see cref="T:System.ComponentModel.NestedContainer" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1898a-120">Ce constructeur s’inscrit dans son propriétaire <xref:System.ComponentModel.IComponent.Disposed> événements afin que le conteneur imbriqué <xref:System.ComponentModel.NestedContainer.Dispose%2A> méthode sera appelée automatiquement.</span><span class="sxs-lookup"><span data-stu-id="1898a-120">This constructor enlists in its owner's <xref:System.ComponentModel.IComponent.Disposed> event so that the nested container's <xref:System.ComponentModel.NestedContainer.Dispose%2A> method will automatically be called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1898a-121"><paramref name="owner" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1898a-121"><paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.ComponentModel.NestedContainer.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="CreateSite">
      <MemberSignature Language="C#" Value="protected override System.ComponentModel.ISite CreateSite (System.ComponentModel.IComponent component, string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.ComponentModel.ISite CreateSite(class System.ComponentModel.IComponent component, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateSite (component As IComponent, name As String) As ISite" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::ComponentModel::ISite ^ CreateSite(System::ComponentModel::IComponent ^ component, System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.CreateSite : System.ComponentModel.IComponent * string -&gt; System.ComponentModel.ISite" Usage="nestedContainer.CreateSite (component, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="1898a-122"><see cref="T:System.ComponentModel.IComponent" /> pour lequel créer un site.</span><span class="sxs-lookup"><span data-stu-id="1898a-122">The <see cref="T:System.ComponentModel.IComponent" /> to create a site for.</span></span></param>
        <param name="name"><span data-ttu-id="1898a-123">Nom à assigner à <paramref name="component" /> ou <see langword="null" /> pour ignorer l'assignation de nom.</span><span class="sxs-lookup"><span data-stu-id="1898a-123">The name to assign to <paramref name="component" />, or <see langword="null" /> to skip the name assignment.</span></span></param>
        <summary><span data-ttu-id="1898a-124">Crée un site pour le composant dans le conteneur.</span><span class="sxs-lookup"><span data-stu-id="1898a-124">Creates a site for the component within the container.</span></span></summary>
        <returns><span data-ttu-id="1898a-125">Objet <see cref="T:System.ComponentModel.ISite" /> nouvellement créé.</span><span class="sxs-lookup"><span data-stu-id="1898a-125">The newly created <see cref="T:System.ComponentModel.ISite" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1898a-126">Si le `name` paramètre est `null`, le <xref:System.ComponentModel.IComponent> est ajouté au conteneur imbriqué sans nom d’identification.</span><span class="sxs-lookup"><span data-stu-id="1898a-126">If the `name` parameter is `null`, the <xref:System.ComponentModel.IComponent> is added to the nested container without an identifying name.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1898a-127"><paramref name="component" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1898a-127"><paramref name="component" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="nestedContainer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="1898a-128"><see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</span><span class="sxs-lookup"><span data-stu-id="1898a-128"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="1898a-129">Libère les ressources utilisées par le conteneur imbriqué.</span><span class="sxs-lookup"><span data-stu-id="1898a-129">Releases the resources used by the nested container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1898a-130">Cette méthode est appelée par le public `Dispose()` (méthode) et le <xref:System.Object.Finalize%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="1898a-130">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="1898a-131">`Dispose()` appelle la méthode protégée `Dispose(Boolean)` méthode avec le `disposing` paramètre défini sur `true`.</span><span class="sxs-lookup"><span data-stu-id="1898a-131">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="1898a-132"><xref:System.Object.Finalize%2A> appelle `Dispose` avec `disposing` défini sur `false`.</span><span class="sxs-lookup"><span data-stu-id="1898a-132"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="1898a-133">Lorsque le `disposing` paramètre est true, cette méthode libère toutes les ressources détenues par les objets managés par ce <xref:System.ComponentModel.NestedContainer> références.</span><span class="sxs-lookup"><span data-stu-id="1898a-133">When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.NestedContainer> references.</span></span> <span data-ttu-id="1898a-134">Cette méthode appelle la méthode `Dispose()` de chaque objet référencé.</span><span class="sxs-lookup"><span data-stu-id="1898a-134">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="1898a-135">
            <see langword="Dispose" /> peut être appelée plusieurs fois par d'autres objets.</span><span class="sxs-lookup"><span data-stu-id="1898a-135">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="1898a-136">Lors de la substitution <see langword="Dispose(Boolean)" /> veillez à ne pas référencer des objets qui ont été supprimés lors d’un appel précédent à <see langword="Dispose" />.</span><span class="sxs-lookup"><span data-stu-id="1898a-136">When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="1898a-137">Pour plus d’informations sur l’implémentation <see langword="Dispose(Boolean)" />, consultez [implémentation d’une méthode Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="1898a-137">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="1898a-138">Pour plus d’informations sur <see langword="Dispose" /> et <see cref="M:System.Object.Finalize" />, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md) et [substitution de la méthode Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span><span class="sxs-lookup"><span data-stu-id="1898a-138">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
        <altmember cref="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="protected override object GetService (Type service);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object GetService(class System.Type service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.NestedContainer.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetService (service As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ GetService(Type ^ service);" />
      <MemberSignature Language="F#" Value="override this.GetService : Type -&gt; obj" Usage="nestedContainer.GetService service" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="service"><span data-ttu-id="1898a-139"><see cref="T:System.Type" /> du service à récupérer.</span><span class="sxs-lookup"><span data-stu-id="1898a-139">The <see cref="T:System.Type" /> of the service to retrieve.</span></span></param>
        <summary><span data-ttu-id="1898a-140">Obtient l'objet service du type spécifié (si disponible).</span><span class="sxs-lookup"><span data-stu-id="1898a-140">Gets the service object of the specified type, if it is available.</span></span></summary>
        <returns><span data-ttu-id="1898a-141"><see cref="T:System.Object" /> qui implémente le service demandé, ou <see langword="null" /> si le service ne peut pas être résolu.</span><span class="sxs-lookup"><span data-stu-id="1898a-141">An <see cref="T:System.Object" /> that implements the requested service, or <see langword="null" /> if the service cannot be resolved.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1898a-142">Cette méthode remplace la <xref:System.ComponentModel.Container.GetService%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="1898a-142">This method overrides the <xref:System.ComponentModel.Container.GetService%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="1898a-143">Cette implémentation résout uniquement les demandes pour le <xref:System.ComponentModel.INestedContainer> et <xref:System.ComponentModel.IContainer> services.</span><span class="sxs-lookup"><span data-stu-id="1898a-143">This implementation only resolves requests for the <xref:System.ComponentModel.INestedContainer> and <xref:System.ComponentModel.IContainer> services.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.Container.GetService(System.Type)" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IComponent Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IComponent Owner" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.NestedContainer.Owner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Owner As IComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::IComponent ^ Owner { System::ComponentModel::IComponent ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Owner : System.ComponentModel.IComponent" Usage="System.ComponentModel.NestedContainer.Owner" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.INestedContainer.Owner</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1898a-144">Obtient le composant propriétaire pour ce conteneur imbriqué.</span><span class="sxs-lookup"><span data-stu-id="1898a-144">Gets the owning component for this nested container.</span></span></summary>
        <value><span data-ttu-id="1898a-145"><see cref="T:System.ComponentModel.IComponent" /> auquel appartient ce conteneur imbriqué.</span><span class="sxs-lookup"><span data-stu-id="1898a-145">The <see cref="T:System.ComponentModel.IComponent" /> that owns this nested container.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1898a-146">Le composant propriétaire est la caractéristique qui différencie les conteneurs imbriqués des conteneurs ordinaires.</span><span class="sxs-lookup"><span data-stu-id="1898a-146">The owning component is the characteristic that differentiates nested containers from ordinary containers.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IComponent" />
        <altmember cref="T:System.ComponentModel.IContainer" />
        <altmember cref="P:System.ComponentModel.INestedContainer.Owner" />
      </Docs>
    </Member>
    <Member MemberName="OwnerName">
      <MemberSignature Language="C#" Value="protected virtual string OwnerName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OwnerName" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.NestedContainer.OwnerName" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property OwnerName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::String ^ OwnerName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerName : string" Usage="System.ComponentModel.NestedContainer.OwnerName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1898a-147">Obtient le nom du composant propriétaire.</span><span class="sxs-lookup"><span data-stu-id="1898a-147">Gets the name of the owning component.</span></span></summary>
        <value><span data-ttu-id="1898a-148">Nom du composant propriétaire</span><span class="sxs-lookup"><span data-stu-id="1898a-148">The name of the owning component.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1898a-149">Cette propriété peut être substituée pour fournir un nom de propriétaire personnalisé.</span><span class="sxs-lookup"><span data-stu-id="1898a-149">This property may be overridden to provide a custom owner name.</span></span> <span data-ttu-id="1898a-150">L’implémentation par défaut recherche le site du propriétaire pour <xref:System.ComponentModel.INestedSite> et appelle <xref:System.ComponentModel.INestedSite.FullName%2A>, ou <xref:System.ComponentModel.ISite.Name%2A> s’il n’existe aucun site imbriqué.</span><span class="sxs-lookup"><span data-stu-id="1898a-150">The default implementation searches the owner's site for <xref:System.ComponentModel.INestedSite> and calls <xref:System.ComponentModel.INestedSite.FullName%2A>, or <xref:System.ComponentModel.ISite.Name%2A> if there is no nested site.</span></span> <span data-ttu-id="1898a-151">Si aucun n’est disponible, cette propriété retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="1898a-151">If neither is available, this property returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>