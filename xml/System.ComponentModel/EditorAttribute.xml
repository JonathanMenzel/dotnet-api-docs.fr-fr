<Type Name="EditorAttribute" FullName="System.ComponentModel.EditorAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="49a663615e4109de97a152388005f1af0e293ada" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36703433" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class EditorAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EditorAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.EditorAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EditorAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class EditorAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type EditorAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.All, AllowMultiple=true, Inherited=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Spécifie l’éditeur à utiliser pour modifier une propriété. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous modifiez la propriété, un concepteur visuel doit créer une nouvelle instance de l’éditeur spécifié via une boîte de dialogue ou une fenêtre déroulante.  
  
 Utilisez le <xref:System.ComponentModel.EditorAttribute.EditorBaseTypeName%2A> propriété à rechercher le type de base de l’éditeur. Le type de base uniquement disponible est <xref:System.Drawing.Design.UITypeEditor>.  
  
 Utilisez le <xref:System.ComponentModel.EditorAttribute.EditorTypeName%2A> propriété à obtenir le nom du type d’éditeur associé à cet attribut.  
  
 Pour obtenir des informations générales sur l’utilisation d’attributs. consultez [attributs](~/docs/standard/attributes/index.md). Pour plus d’informations sur les attributs au moment du design, consultez [attributs et prise en charge au moment du Design](http://msdn.microsoft.com/library/7aed9eb4-124b-4a15-a0a3-458f37ac9ef7).  
  
   
  
## Examples  
 L’exemple de code suivant crée la `MyImage` classe. La classe est marquée avec un <xref:System.ComponentModel.EditorAttribute> qui spécifie le <xref:System.Drawing.Design.ImageEditor> en tant que son éditeur.  
  
 [!code-cpp[Classic EditorAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic EditorAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EditorAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic EditorAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic EditorAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic EditorAttribute Example/VB/source.vb#1)]  
  
 L’exemple de code suivant crée une instance de la `MyImage` classe, obtient les attributs de la classe, puis imprime le nom de l’éditeur utilisé par `myNewImage`.  
  
 [!code-cpp[Classic EditorAttribute Example#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic EditorAttribute Example/CPP/source.cpp#2)]
 [!code-csharp[Classic EditorAttribute Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic EditorAttribute Example/CS/source.cs#2)]
 [!code-vb[Classic EditorAttribute Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic EditorAttribute Example/VB/source.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EditorAttribute" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EditorAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.EditorAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EditorAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EditorAttribute" /> avec l'éditeur par défaut, c'est-à-dire aucun éditeur.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EditorAttribute (string typeName, string baseTypeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName, string baseTypeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeName As String, baseTypeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EditorAttribute(System::String ^ typeName, System::String ^ baseTypeName);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.EditorAttribute : string * string -&gt; System.ComponentModel.EditorAttribute" Usage="new System.ComponentModel.EditorAttribute (typeName, baseTypeName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="baseTypeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">Nom de type qualifié complet de l'éditeur.</param>
        <param name="baseTypeName">Obtient le nom qualifié complet du type de la classe ou de l'interface de base à utiliser comme clé de recherche pour l'éditeur. Cette classe doit être <see cref="T:System.Drawing.Design.UITypeEditor" />, ou en dériver.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EditorAttribute" /> avec le nom du type et du type de base de l'éditeur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `typeName` le paramètre doit être dans le <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> format.  
  
 Le <xref:System.Type> représenté par le `typeName` paramètre doit dériver d’ou implémenter la classe de base.  
  
 Le <xref:System.Type> représenté par le `baseTypeName` paramètre est utilisé en tant que clé pour rechercher un éditeur particulier, comme un type de données peut avoir plusieurs éditeurs associés. Cela peut être n’importe quelle classe, mais il est généralement <xref:System.Drawing.Design.UITypeEditor> ou <xref:System.ComponentModel.ComponentEditor>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EditorAttribute (string typeName, Type baseType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName, class System.Type baseType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeName As String, baseType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EditorAttribute(System::String ^ typeName, Type ^ baseType);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.EditorAttribute : string * Type -&gt; System.ComponentModel.EditorAttribute" Usage="new System.ComponentModel.EditorAttribute (typeName, baseType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="baseType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeName">Nom de type qualifié complet de l'éditeur.</param>
        <param name="baseType">
          <see cref="T:System.Type" /> de la classe ou de l'interface de base à utiliser comme clé de recherche pour l'éditeur. Cette classe doit être <see cref="T:System.Drawing.Design.UITypeEditor" />, ou en dériver.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EditorAttribute" /> avec le nom du type et le type de base.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `typeName` le paramètre doit être dans le <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> format.  
  
 Le <xref:System.Type> représenté par le `typeName` doit dériver d’ou implémenter la classe de base.  
  
 Le `baseType` paramètre est utilisé en tant que clé pour rechercher un éditeur particulier, comme un type de données peut avoir plusieurs éditeurs associés.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EditorAttribute (Type type, Type baseType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, class System.Type baseType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.EditorAttribute.#ctor(System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EditorAttribute(Type ^ type, Type ^ baseType);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.EditorAttribute : Type * Type -&gt; System.ComponentModel.EditorAttribute" Usage="new System.ComponentModel.EditorAttribute (type, baseType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="baseType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Type" /> qui représente le type de l'éditeur.</param>
        <param name="baseType">
          <see cref="T:System.Type" /> de la classe ou de l'interface de base à utiliser comme clé de recherche pour l'éditeur. Cette classe doit être <see cref="T:System.Drawing.Design.UITypeEditor" />, ou en dériver.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EditorAttribute" /> avec le type et le type de base.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Type> représenté par le `type` paramètre doit dériver d’ou implémenter la classe de base.  
  
 Le `baseType` paramètre est utilisé en tant que clé pour rechercher un éditeur particulier, comme un type de données peut avoir plusieurs éditeurs associés.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditorBaseTypeName">
      <MemberSignature Language="C#" Value="public string EditorBaseTypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EditorBaseTypeName" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.EditorAttribute.EditorBaseTypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EditorBaseTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ EditorBaseTypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EditorBaseTypeName : string" Usage="System.ComponentModel.EditorAttribute.EditorBaseTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom de la classe ou de l'interface de base qui sert de clé de recherche pour cet éditeur.</summary>
        <value>Nom de la classe ou de l'interface de base qui sert de clé de recherche pour cet éditeur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ComponentModel.EditorAttribute.EditorBaseTypeName%2A> propriété est un nom de type qualifié d’assembly. Le [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] fournit aux <xref:System.Drawing.Design.UITypeEditor> et <xref:System.ComponentModel.ComponentEditor> comme classes de base valides, mais n’importe quelle valeur est valide ici.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditorTypeName">
      <MemberSignature Language="C#" Value="public string EditorTypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EditorTypeName" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.EditorAttribute.EditorTypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EditorTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ EditorTypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EditorTypeName : string" Usage="System.ComponentModel.EditorAttribute.EditorTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom de la classe de l'éditeur au format <see cref="P:System.Type.AssemblyQualifiedName" />.</summary>
        <value>Nom de la classe de l'éditeur au format <see cref="P:System.Type.AssemblyQualifiedName" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.EditorAttribute.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="editorAttribute.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Objet dont l'égalité des valeurs doit être vérifiée.</param>
        <summary>Retourne une valeur indiquant si la valeur de l'objet donné est égale au <see cref="T:System.ComponentModel.EditorAttribute" /> en cours.</summary>
        <returns>
          <see langword="true" /> si la valeur de l'objet donné est égale à celle de l'objet actuel ; sinon, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.EditorAttribute.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="editorAttribute.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne le code de hachage de cette instance.</summary>
        <returns>Code de hachage d'un entier signé 32 bits.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Attribute.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="TypeId">
      <MemberSignature Language="C#" Value="public override object TypeId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TypeId" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.EditorAttribute.TypeId" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TypeId As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ TypeId { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeId : obj" Usage="System.ComponentModel.EditorAttribute.TypeId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un ID unique pour ce type d'attribut.</summary>
        <value>ID unique pour ce type d'attribut.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ComponentModel.EditorAttribute.TypeId%2A> propriété est utilisée par des algorithmes de filtrage pour identifier deux attributs sont du même type. Pour la plupart des attributs, il retourne simplement le <xref:System.Type> instance pour l’attribut. <xref:System.ComponentModel.EditorAttribute> substitue pour inclure le type de l’Éditeur du type de base.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>