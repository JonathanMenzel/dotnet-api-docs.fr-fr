<Type Name="INestedContainer" FullName="System.ComponentModel.INestedContainer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cab386929dbc4e3b5d03535cb3e0c42c7b07724c" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52600447" /></Metadata><TypeSignature Language="C#" Value="public interface INestedContainer : IDisposable, System.ComponentModel.IContainer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INestedContainer implements class System.ComponentModel.IContainer, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.INestedContainer" />
  <TypeSignature Language="VB.NET" Value="Public Interface INestedContainer&#xA;Implements IContainer, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class INestedContainer : IDisposable, System::ComponentModel::IContainer" />
  <TypeSignature Language="F#" Value="type INestedContainer = interface&#xA;    interface IContainer&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="cdb8a-101">Fournit les fonctionnalités pour les conteneurs imbriqués qui contiennent logiquement zéro ou plusieurs autres composants et ont un composant parent comme propriétaire.</span><span class="sxs-lookup"><span data-stu-id="cdb8a-101">Provides functionality for nested containers, which logically contain zero or more other components and are owned by a parent component.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cdb8a-102">Le <xref:System.ComponentModel.INestedContainer> interface ajoute le concept d’un composant propriétaire pour le <xref:System.ComponentModel.IContainer> interface.</span><span class="sxs-lookup"><span data-stu-id="cdb8a-102">The <xref:System.ComponentModel.INestedContainer> interface adds the concept of an owning component to the <xref:System.ComponentModel.IContainer> interface.</span></span> <span data-ttu-id="cdb8a-103">Un conteneur imbriqué est un objet qui logiquement, mais pas nécessairement visuel, contient zéro ou plusieurs composants enfants et est détenu par un composant parent.</span><span class="sxs-lookup"><span data-stu-id="cdb8a-103">A nested container is an object that logically, but not necessarily visually, contains zero or more child components and is owned by some parent component.</span></span> <span data-ttu-id="cdb8a-104">Pour visual contenant-contenu, le composant propriétaire est souvent un autre conteneur.</span><span class="sxs-lookup"><span data-stu-id="cdb8a-104">For visual containment, the owning component is often another container.</span></span>  
  
 <span data-ttu-id="cdb8a-105">Conteneurs imbriqués permettent aux sections d’un contrôle d’être créées, sans nécessiter une variable membre sérialisée explicite ou un sérialiseur personnalisé pour chaque sous-contrôle.</span><span class="sxs-lookup"><span data-stu-id="cdb8a-105">Nested containers allow sections of a control to be designable, without requiring an explicit serialized member variable or a custom serializer for each subcontrol.</span></span> <span data-ttu-id="cdb8a-106">Au lieu de cela, le Concepteur de formulaires maintient un conteneur maître de composants.</span><span class="sxs-lookup"><span data-stu-id="cdb8a-106">Instead, the form designer maintains one master container of components.</span></span> <span data-ttu-id="cdb8a-107">Chaque site de composant peut avoir un conteneur imbriqué qui fournit un emplacement pour des composants supplémentaires.</span><span class="sxs-lookup"><span data-stu-id="cdb8a-107">Each component's site may have a nested container that provides a place to put extra components.</span></span> <span data-ttu-id="cdb8a-108">Lorsqu’un composant est placé dans un conteneur imbriqué, le nom qu’il reçoit est une combinaison de son prénom et nom du composant de son propriétaire.</span><span class="sxs-lookup"><span data-stu-id="cdb8a-108">When a component is sited in a nested container, the name it receives is a combination of its given name and its owning component's name.</span></span> <span data-ttu-id="cdb8a-109">En outre, les composants ajoutés à un conteneur imbriqué ont un accès complet aux services du conteneur parent, et le conteneur imbriqué fournit le même comportement du parent en ce qui concerne l’ajout de nouveaux composants.</span><span class="sxs-lookup"><span data-stu-id="cdb8a-109">Additionally, components added to a nested container have full access to the services of the parent container, and the nested container provides the same behavior of the parent with respect to adding new components.</span></span> <span data-ttu-id="cdb8a-110">Le conteneur imbriqué crée le concepteur pour chaque composant qu’il contient, ce qui permet la prise en charge au moment du design.</span><span class="sxs-lookup"><span data-stu-id="cdb8a-110">The nested container will create the designer for each component it contains, thereby enabling design-time support.</span></span> <span data-ttu-id="cdb8a-111">Étant donné que les sérialiseurs de code standard n’analysent pas les conteneurs imbriqués, ces composants ne sont sérialisées que si un chemin d’accès pour eux peut être obtenu en parcourant les composants dans le conteneur principal.</span><span class="sxs-lookup"><span data-stu-id="cdb8a-111">Because standard code serializers do not look at nested containers, these components are only serialized if a path to them can be obtained by walking the components in the primary container.</span></span>  
  
 <span data-ttu-id="cdb8a-112">Conteneurs imbriqués peuvent être recherchés en interrogeant le site d’un composant pour les services de type <xref:System.ComponentModel.INestedContainer>.</span><span class="sxs-lookup"><span data-stu-id="cdb8a-112">Nested containers can be found by querying a component's site for services of type <xref:System.ComponentModel.INestedContainer>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.NestedContainer" />
    <altmember cref="T:System.ComponentModel.ContainerFilterService" />
    <altmember cref="M:System.ComponentModel.NestedContainer.GetService(System.Type)" />
  </Docs>
  <Members>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IComponent Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IComponent Owner" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.INestedContainer.Owner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Owner As IComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::IComponent ^ Owner { System::ComponentModel::IComponent ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Owner : System.ComponentModel.IComponent" Usage="System.ComponentModel.INestedContainer.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cdb8a-113">Obtient le composant propriétaire pour le conteneur imbriqué.</span><span class="sxs-lookup"><span data-stu-id="cdb8a-113">Gets the owning component for the nested container.</span></span></summary>
        <value><span data-ttu-id="cdb8a-114"><see cref="T:System.ComponentModel.IComponent" /> auquel appartient le conteneur imbriqué.</span><span class="sxs-lookup"><span data-stu-id="cdb8a-114">The <see cref="T:System.ComponentModel.IComponent" /> that owns the nested container.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cdb8a-115">Le composant propriétaire est la caractéristique qui différencie les conteneurs imbriqués des conteneurs ordinaires.</span><span class="sxs-lookup"><span data-stu-id="cdb8a-115">The owning component is the characteristic that differentiates nested containers from ordinary containers.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IComponent" />
        <altmember cref="T:System.ComponentModel.IContainer" />
        <altmember cref="P:System.ComponentModel.NestedContainer.Owner" />
      </Docs>
    </Member>
  </Members>
</Type>