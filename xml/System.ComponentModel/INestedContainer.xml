<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="INestedContainer.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5583e123f6057aeb9827a161adfe0401ae17afc2f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">583e123f6057aeb9827a161adfe0401ae17afc2f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.INestedContainer">
          <source>Provides functionality for nested containers, which logically contain zero or more other components and are owned by a parent component.</source>
          <target state="translated">Fournit les fonctionnalités pour les conteneurs imbriqués qui contiennent logiquement zéro ou plusieurs autres composants et ont un composant parent comme propriétaire.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.INestedContainer">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> interface adds the concept of an owning component to the <ph id="ph2">&lt;xref:System.ComponentModel.IContainer&gt;</ph> interface.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> interface ajoute le concept d’un composant propriétaire à le <ph id="ph2">&lt;xref:System.ComponentModel.IContainer&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.INestedContainer">
          <source>A nested container is an object that logically, but not necessarily visually, contains zero or more child components and is owned by some parent component.</source>
          <target state="translated">Un conteneur imbriqué est un objet qui logiquement, mais pas nécessairement visuel, contient zéro ou plusieurs composants enfants et est détenu par un composant parent.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.INestedContainer">
          <source>For visual containment, the owning component is often another container.</source>
          <target state="translated">Relation visual, le composant propriétaire est souvent un autre conteneur.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.INestedContainer">
          <source>Nested containers allow sections of a control to be designable, without requiring an explicit serialized member variable or a custom serializer for each subcontrol.</source>
          <target state="translated">Les conteneurs imbriqués permettent aux sections d’un contrôle d’être créées, sans avoir recours à une variable membre sérialisée explicite ou un sérialiseur personnalisé pour chaque sous-contrôle.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.INestedContainer">
          <source>Instead, the form designer maintains one master container of components.</source>
          <target state="translated">Au lieu de cela, le Concepteur de formulaires maintient un conteneur maître de composants.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.INestedContainer">
          <source>Each component’s site may have a nested container that provides a place to put extra components.</source>
          <target state="translated">Chaque site de composant peut avoir un conteneur imbriqué qui fournit un emplacement pour des composants supplémentaires.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.INestedContainer">
          <source>When a component is sited in a nested container, the name it receives is a combination of its given name and its owning component’s name.</source>
          <target state="translated">Lorsqu’un composant est placé dans un conteneur imbriqué, le nom qu’il reçoit est une combinaison de son prénom et nom du composant de son propriétaire.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.INestedContainer">
          <source>Additionally, components added to a nested container have full access to the services of the parent container, and the nested container provides the same behavior of the parent with respect to adding new components.</source>
          <target state="translated">En outre, les composants ajoutés à un conteneur imbriqué ont un accès complet aux services du conteneur parent, et le conteneur imbriqué fournit le même comportement du parent en ce qui concerne l’ajout de nouveaux composants.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.INestedContainer">
          <source>The nested container will create the designer for each component it contains, thereby enabling design-time support.</source>
          <target state="translated">Le conteneur imbriqué crée le concepteur pour chaque composant qu’il contient, ce qui permet la prise en charge au moment du design.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.INestedContainer">
          <source>Because standard code serializers do not look at nested containers, these components are only serialized if a path to them can be obtained by walking the components in the primary container.</source>
          <target state="translated">Étant donné que les sérialiseurs de code standard n’analysent pas les conteneurs imbriqués, ces composants sont sérialisés uniquement si un chemin d’accès à ceux-ci peut être obtenu en parcourant les composants dans le conteneur principal.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.INestedContainer">
          <source>Nested containers can be found by querying a component's site for services of type <ph id="ph1">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph>.</source>
          <target state="translated">Conteneurs imbriqués peuvent être recherchés en interrogeant le site d’un composant pour les services de type <ph id="ph1">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.INestedContainer.Owner">
          <source>Gets the owning component for the nested container.</source>
          <target state="translated">Obtient le composant propriétaire pour le conteneur imbriqué.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.INestedContainer.Owner">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph> that owns the nested container.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph> auquel appartient le conteneur imbriqué.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.INestedContainer.Owner">
          <source>The owning component is the characteristic that differentiates nested containers from ordinary containers.</source>
          <target state="translated">Le composant propriétaire est la caractéristique qui différencie les conteneurs imbriqués des conteneurs ordinaires.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>