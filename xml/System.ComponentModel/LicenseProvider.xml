<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="LicenseProvider.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac57392f308ec73336e8c086c2e8400528912f33358.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7392f308ec73336e8c086c2e8400528912f33358</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.LicenseProvider">
          <source>Provides the <ph id="ph1">&lt;see langword="abstract" /&gt;</ph> base class for implementing a license provider.</source>
          <target state="translated">Fournit la classe de base <ph id="ph1">&lt;see langword="abstract" /&gt;</ph> pour implémenter un fournisseur de licences.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.LicenseProvider">
          <source>The following code example creates a licensed control using the <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple de code suivant crée un contrôle sous licence à l’aide de la <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.LicenseProvider">
          <source>It uses a <ph id="ph1">&lt;xref:System.ComponentModel.LicenseProvider&gt;</ph> that is implemented by the <ph id="ph2">&lt;xref:System.ComponentModel.LicFileLicenseProvider&gt;</ph> class.</source>
          <target state="translated">Il utilise un <ph id="ph1">&lt;xref:System.ComponentModel.LicenseProvider&gt;</ph> qui est implémenté par le <ph id="ph2">&lt;xref:System.ComponentModel.LicFileLicenseProvider&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.LicenseProvider">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseProvider" /&gt;</ph>, you must override the <ph id="ph2">&lt;see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">Lorsque vous héritez de <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseProvider" /&gt;</ph>, vous devez substituer la <ph id="ph2">&lt;see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.LicenseProvider">
          <source>See <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicFileLicenseProvider" /&gt;</ph> for an implementation of this class.</source>
          <target state="translated">Consultez <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicFileLicenseProvider" /&gt;</ph> pour une implémentation de cette classe.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.LicenseProvider">
          <source>For more information on licensing, see <bpt id="p1">[</bpt>How to: License Components and Controls<ept id="p1">](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57)</ept>.</source>
          <target state="translated">Pour plus d’informations sur les licences, consultez <bpt id="p1">[</bpt>Comment : composants de licence et des contrôles<ept id="p1">](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57)</ept>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseProvider.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseProvider" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseProvider" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseContext" /&gt;</ph> that specifies where you can use the licensed object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseContext" /&gt;</ph> spécifiant l'endroit où vous pouvez utiliser l'objet sous licence.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the component requesting the license.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> représentant le composant qui demande la licence.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
          <source>An object that is requesting the license.</source>
          <target state="translated">Objet qui demande la licence.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a <ph id="ph2">&lt;see cref="T:System.ComponentModel.LicenseException" /&gt;</ph> should be thrown when the component cannot be granted a license; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.ComponentModel.LicenseException" /&gt;</ph> doit être levé si aucune licence ne peut être accordée au composant ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
          <source>When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, obtient une licence pour une instance ou un type de composant en fonction d'un contexte et une valeur indiquant si le refus d'une licence lève une exception.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
          <source>A valid <ph id="ph1">&lt;see cref="T:System.ComponentModel.License" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.License" /&gt;</ph> valide.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseProvider" /&gt;</ph>, you must override <ph id="ph2">&lt;see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /&gt;</ph> to implement a validation method for the license key.</source>
          <target state="translated">Lorsque vous héritez de <ph id="ph1">&lt;see cref="T:System.ComponentModel.LicenseProvider" /&gt;</ph>, vous devez substituer <ph id="ph2">&lt;see cref="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /&gt;</ph> pour implémenter une méthode de validation pour la clé de licence.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>