<Type Name="ManagementEnumeratorAttribute" FullName="System.Management.Instrumentation.ManagementEnumeratorAttribute">
  <TypeSignature Language="C#" Value="public sealed class ManagementEnumeratorAttribute : System.Management.Instrumentation.ManagementNewInstanceAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManagementEnumeratorAttribute extends System.Management.Instrumentation.ManagementNewInstanceAttribute" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.ManagementEnumeratorAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManagementEnumeratorAttribute&#xA;Inherits ManagementNewInstanceAttribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManagementEnumeratorAttribute sealed : System::Management::Instrumentation::ManagementNewInstanceAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Instrumentation.ManagementNewInstanceAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="350b3-101">L’attribut ManagementEnumerator marque une méthode qui retourne toutes les instances d’une classe WMI.</span><span class="sxs-lookup"><span data-stu-id="350b3-101">The ManagementEnumerator attribute marks a method that returns all the instances of a WMI class.</span></span>  
  
 <span data-ttu-id="350b3-102">Remarque : les bibliothèques .NET de WMI sont aujourd’hui considérées comme dans un état final et ne recevront plus de développements, d’améliorations ou de mises à jour en dehors des problèmes de sécurité qui affectent ces bibliothèques.</span><span class="sxs-lookup"><span data-stu-id="350b3-102">Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.</span></span> <span data-ttu-id="350b3-103">Les [API MI](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) doivent être utilisées pour tout nouveau développement.</span><span class="sxs-lookup"><span data-stu-id="350b3-103">The [MI APIs](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="350b3-104">La méthode doit être static et public.</span><span class="sxs-lookup"><span data-stu-id="350b3-104">The method must be static and public.</span></span> <span data-ttu-id="350b3-105">Elle doit retourner une collection de toutes les instances de la classe WMI.</span><span class="sxs-lookup"><span data-stu-id="350b3-105">It must return a collection of all instances of the WMI class.</span></span> <span data-ttu-id="350b3-106">La collection peut être de tout type convertible en <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="350b3-106">The collection can be of any type convertible to <xref:System.Collections.IEnumerable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="350b3-107">L’exemple suivant montre comment utiliser l’attribut Enumerator pour marquer une méthode qui est utilisée pour énumérer les instances d’une classe.</span><span class="sxs-lookup"><span data-stu-id="350b3-107">The following example shows how to use the Enumerator attribute to mark a method that is used to enumerate instances of a class.</span></span> <span data-ttu-id="350b3-108">Dans ce cas, la méthode Enumerate utilise la <xref:System.Diagnostics.Process> classe pour récupérer tous les processus en cours d’exécution sur l’ordinateur.</span><span class="sxs-lookup"><span data-stu-id="350b3-108">In this case, the Enumerate method uses the <xref:System.Diagnostics.Process> class to retrieve all of the processes running on the computer.</span></span>  
  
```csharp  
[ManagementEnumerator]  
public static IEnumerable Enumerate()  
{  
   Process[] rgProcesses = Process.GetProcesses();  
   for (int i = 0; i < rgProcesses.Length; i++)  
   {  
      yield return new ProcessProvider(rgProcesses[i]);  
   }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManagementEnumeratorAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.ManagementEnumeratorAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManagementEnumeratorAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="350b3-109">Initialise une nouvelle instance de la classe <see cref="T:System.Management.ManagementEnumeratorAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="350b3-109">Initializes a new instance of the <see cref="T:System.Management.ManagementEnumeratorAttribute" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schema">
      <MemberSignature Language="C#" Value="public Type Schema { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Schema" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementEnumeratorAttribute.Schema" />
      <MemberSignature Language="VB.NET" Value="Public Property Schema As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Schema { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="350b3-110">Obtient ou définit une valeur définissant le type de sortie que la méthode marquée avec l'attribut ManagementEnumerator retournera.</span><span class="sxs-lookup"><span data-stu-id="350b3-110">Gets or sets a value that defines the type of output that the method that is marked with the ManagementEnumerator attribute will output.</span></span></summary>
        <value><span data-ttu-id="350b3-111">Valeur <see cref="T:System.Type" /> indiquant le type de sortie que la méthode marquée avec l'attribut <see cref="ManagementEnumerator" /> retournera.</span><span class="sxs-lookup"><span data-stu-id="350b3-111">A <see cref="T:System.Type" /> value that indicates the type of output that the method marked with the <see cref="ManagementEnumerator" /> attribute will output.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="350b3-112">Si le type retourné est <xref:System.Object?displayProperty=nameWithType>, puis la sortie doit être traitée comme une valeur de type <xref:System.Object?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="350b3-112">If the returned type is <xref:System.Object?displayProperty=nameWithType>, then the output should be treated as a value of type <xref:System.Object?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>