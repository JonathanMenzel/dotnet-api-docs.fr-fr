<Type Name="InstrumentationManager" FullName="System.Management.Instrumentation.InstrumentationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="57c8f02f177566e76601df0b5d3378d1209f62ea" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class InstrumentationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed InstrumentationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.InstrumentationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class InstrumentationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstrumentationManager abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Instrumentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="86a13-101">Fournit des méthodes qui gèrent la durée de vie et le modèle utilisé pour les fournisseurs découplés.</span>
      <span class="sxs-lookup">
        <span data-stu-id="86a13-101">Provides methods that manage the lifetime and the model used for decoupled providers.</span>
      </span>
      <span data-ttu-id="86a13-102">Remarque : les bibliothèques .NET de WMI sont aujourd’hui considérées comme dans un état final et ne recevront plus de développements, d’améliorations ou de mises à jour en dehors des problèmes de sécurité qui affectent ces bibliothèques.</span>
      <span class="sxs-lookup">
        <span data-stu-id="86a13-102">Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.</span>
      </span>
      <span data-ttu-id="86a13-103">Les [API MI](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) doivent être utilisées pour tout nouveau développement.</span>
      <span class="sxs-lookup">
        <span data-stu-id="86a13-103">The [MI APIs](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86a13-104">Les fournisseurs découplés sont hébergés par une application.</span><span class="sxs-lookup"><span data-stu-id="86a13-104">Decoupled providers are hosted by an application.</span></span> <span data-ttu-id="86a13-105">Deux méthodes peuvent être utilisées par l’application pour créer des instances de classes WMI disponibles : publier/revoke ou la méthode de rappel.</span><span class="sxs-lookup"><span data-stu-id="86a13-105">Two methods can be used by the application to make instances of WMI classes available: publish/revoke or the callback method.</span></span> <span data-ttu-id="86a13-106">La méthode de rappel utilise le <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> et <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="86a13-106">The callback method uses the <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> methods.</span></span>  
  
 <span data-ttu-id="86a13-107">Dans le modèle de publication/révocation, l’infrastructure WMI fournit le comportement par défaut pour la plupart des méthodes que vous devez écrire vous-même dans la méthode de rappel.</span><span class="sxs-lookup"><span data-stu-id="86a13-107">In the publish/revoke model, the WMI infrastructure provides default behavior for many of the methods you have to write yourself in the callback method.</span></span> <span data-ttu-id="86a13-108">Ceux-ci incluent l’énumération et lier les méthodes.</span><span class="sxs-lookup"><span data-stu-id="86a13-108">These include the enumeration and bind methods.</span></span> <span data-ttu-id="86a13-109">Dans ce modèle, l’application crée des instances et les publie.</span><span class="sxs-lookup"><span data-stu-id="86a13-109">In this model, the application creates instances and publishes them.</span></span> <span data-ttu-id="86a13-110">L’application est chargée de s’assurer que les propriétés de clé des classes sont respectées.</span><span class="sxs-lookup"><span data-stu-id="86a13-110">The application is responsible for ensuring that the key properties of the classes are respected.</span></span> <span data-ttu-id="86a13-111">L’application est également responsable de la suppression des instances.</span><span class="sxs-lookup"><span data-stu-id="86a13-111">The application is also responsible for deleting instances.</span></span>  
  
 <span data-ttu-id="86a13-112">Dans le modèle de rappel, l’infrastructure WMI attend que l’application dispose des méthodes qui gèrent l’énumération, de liaison et d’autres méthodes requises pour implémenter les fonctionnalités du fournisseur.</span><span class="sxs-lookup"><span data-stu-id="86a13-112">In the callback model, the WMI infrastructure expects the application to have methods that handle enumeration, binding and any other methods required to implement the functionality of the provider.</span></span> <span data-ttu-id="86a13-113">Il appelle l’application pour cette fonctionnalité et échoue si elle n’existe pas ou n’est pas implémentée correctement.</span><span class="sxs-lookup"><span data-stu-id="86a13-113">It calls into the application for this functionality and fails if it does not exist or is not implemented properly.</span></span> <span data-ttu-id="86a13-114">L’application enregistre le type de ses classes WMI avec l’infrastructure en appelant <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> et indique qu’il souhaite n’est plus que les classes WMI exposées par l’appel de <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>.</span><span class="sxs-lookup"><span data-stu-id="86a13-114">The application registers the type of its WMI classes with the infrastructure by calling <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and indicates that it no longer wants the WMI classes exposed by calling <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86a13-115">L’exemple suivant montre comment utiliser le modèle de publication/revoke.</span><span class="sxs-lookup"><span data-stu-id="86a13-115">The following example demonstrates how to use the publish/revoke model.</span></span> <span data-ttu-id="86a13-116">Deux instances de la classe de routeur sont créées et publiées.</span><span class="sxs-lookup"><span data-stu-id="86a13-116">Two instances of the router class are created and published.</span></span> <span data-ttu-id="86a13-117">Elles sont ensuite révoquées.</span><span class="sxs-lookup"><span data-stu-id="86a13-117">They are later revoked.</span></span>  
  
```  
public class Sample_InstanceProvider  
{  
public int Main (string[] args)   
{  
Router r_one = new Router ();  
r_one.Name = "one";  
InstrumentationManager.Publish(r_one);  
Router r_two = new Router ();  
r_two.Name = "two";  
InstrumentationManager.Publish(r_two);  
// ....  
InstrumentationManager.Revoke(r_one);  
InstrumentationManager.Revoke(r_two);  
return 0;  
}  
}  
```  
  
 <span data-ttu-id="86a13-118">Dans l’exemple suivant, la méthode de rappel d’inscription est utilisée pour exposer la classe RouterNew.</span><span class="sxs-lookup"><span data-stu-id="86a13-118">In the next example, the callback method of registration is used to expose the RouterNew class.</span></span>  
  
```  
public int MainNew(string[] args)   
{  
    InstrumentationManager.RegisterType(typeof(RouterNew));  
    // ....  
    InstrumentationManager.UnRegisterType(typeof(RouterNew));  
    return 0;  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public static void Publish (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Publish(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Publish (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Publish(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="86a13-119">Une instance de la classe qui implémente le fournisseur à publier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86a13-119">An instance of the class that implements the provider to publish.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86a13-120">Rend une instance d’un fournisseur disponible dans l’infrastructure WMI.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86a13-120">Makes an instance of a provider available within the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAssembly">
      <MemberSignature Language="C#" Value="public static void RegisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly">
          <span data-ttu-id="86a13-121">Assembly à enregistrer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86a13-121">The assembly to register.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86a13-122">Enregistre un assembly avec l'infrastructure WMI.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86a13-122">Registers an assembly with the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterType">
      <MemberSignature Language="C#" Value="public static void RegisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterType(Type ^ managementType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType">
          <span data-ttu-id="86a13-123">Type de la classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86a13-123">The type of the class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86a13-124">Enregistre une classe avec l'infrastructure WMI.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86a13-124">Registers a class with the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```  
static int Main(string[] args)  
{  
   InstrumentationManager.RegisterType(typeof(MySampleProvider));  
   return 0;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Revoke">
      <MemberSignature Language="C#" Value="public static void Revoke (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Revoke(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Revoke (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Revoke(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="86a13-125">Une instance de la classe qui implémente le fournisseur à révoquer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86a13-125">An instance of the class that implements the provider to revoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86a13-126">Prend une instance d’un fournisseur actuellement disponible et le rend indisponible au sein de l’infrastructure WMI.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86a13-126">Takes an instance of a currently available provider and makes it unavailable within the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterAssembly">
      <MemberSignature Language="C#" Value="public static void UnregisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly">
          <span data-ttu-id="86a13-127">Assembly dont l'enregistrement doit être annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86a13-127">The registered assembly to unregister.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86a13-128">Annule l'enregistrement d'un assembly actuellement enregistré avec l'infrastructure WMI.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86a13-128">Unregisters an assembly currently registered with the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterType">
      <MemberSignature Language="C#" Value="public static void UnregisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterType(Type ^ managementType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType">
          <span data-ttu-id="86a13-129">Type dont l'enregistrement doit être annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86a13-129">The registered type to unregister.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86a13-130">Annule l'enregistrement d'une classe enregistrée avec l'infrastructure WMI.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86a13-130">Unregisters a class registered with the WMI infrastructure.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>