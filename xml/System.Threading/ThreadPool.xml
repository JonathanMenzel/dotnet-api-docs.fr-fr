<Type Name="ThreadPool" FullName="System.Threading.ThreadPool">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="50de54f2e0cde589b4af1c454e85fed39c9f40df" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ThreadPool" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ThreadPool extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadPool" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadPool" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadPool abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="229b0-101">Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</span>
      <span class="sxs-lookup">
        <span data-stu-id="229b0-101">Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229b0-102">De nombreuses applications créent des threads consacrent beaucoup de temps en état de veille, en attente d’un événement se produise.</span><span class="sxs-lookup"><span data-stu-id="229b0-102">Many applications create threads that spend a great deal of time in the sleeping state, waiting for an event to occur.</span></span> <span data-ttu-id="229b0-103">Autres threads peuvent entrer en état de veille qu’à être réactivés pour interroger une modification ou de mettre à jour les informations d’état.</span><span class="sxs-lookup"><span data-stu-id="229b0-103">Other threads might enter a sleeping state only to be awakened periodically to poll for a change or update status information.</span></span> <span data-ttu-id="229b0-104">Le pool de threads permet d’utiliser plus efficacement en fournissant votre application un pool de threads de travail qui sont gérés par le système.</span><span class="sxs-lookup"><span data-stu-id="229b0-104">The thread pool enables you to use threads more efficiently by providing your application with a pool of worker threads that are managed by the system.</span></span> <span data-ttu-id="229b0-105">Exemples d’opérations qui utilisent des threads de pool sont les suivantes :</span><span class="sxs-lookup"><span data-stu-id="229b0-105">Examples of operations that use thread pool threads include the following:</span></span>  
  
-   <span data-ttu-id="229b0-106">Lorsque vous créez un <xref:System.Threading.Tasks.Task> ou <xref:System.Threading.Tasks.Task%601> objet pour effectuer une tâche de façon asynchrone, par défaut, la tâche est planifiée pour s’exécuter sur un thread de pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-106">When you create a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> object to perform some task asynchronously, by default the task is scheduled to run on a thread pool thread.</span></span>  
  
-   <span data-ttu-id="229b0-107">Les minuteries asynchrones utilisent le pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-107">Asynchronous timers use the thread pool.</span></span> <span data-ttu-id="229b0-108">Threads du pool de threads exécutent des rappels de la <xref:System.Threading.Timer?displayProperty=nameWithType> de classe et de déclencher des événements à partir de la <xref:System.Timers.Timer?displayProperty=nameWithType> classe.</span><span class="sxs-lookup"><span data-stu-id="229b0-108">Thread pool threads execute callbacks from the <xref:System.Threading.Timer?displayProperty=nameWithType> class and raise events from the <xref:System.Timers.Timer?displayProperty=nameWithType> class.</span></span>  
  
-   <span data-ttu-id="229b0-109">Lorsque vous utilisez des handles d’attente inscrit, un thread système analyse l’état des handles d’attente.</span><span class="sxs-lookup"><span data-stu-id="229b0-109">When you use registered wait handles, a system thread monitors the status of the wait handles.</span></span> <span data-ttu-id="229b0-110">Lorsqu’une opération d’attente se termine, un thread de travail du pool de threads exécute la fonction de rappel correspondant.</span><span class="sxs-lookup"><span data-stu-id="229b0-110">When a wait operation completes, a worker thread from the thread pool executes the corresponding callback function.</span></span>  
  
-   <span data-ttu-id="229b0-111">Lorsque vous appelez le <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> méthode en file d’attente d’une méthode pour l’exécution sur un thread de pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-111">When you call the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method to queue a method for execution on a thread pool thread.</span></span> <span data-ttu-id="229b0-112">Pour ce faire, en passant la méthode un <xref:System.Threading.WaitCallback> déléguer.</span><span class="sxs-lookup"><span data-stu-id="229b0-112">You do this by passing the method a <xref:System.Threading.WaitCallback> delegate.</span></span>   <span data-ttu-id="229b0-113">Le délégué a la signature</span><span class="sxs-lookup"><span data-stu-id="229b0-113">The delegate has the signature</span></span>  
  
    ```csharp  
    void WaitCallback(Object state)  
    ```  
  
    ```vb  
    Sub WaitCallback(state As Object)  
    ```  
  
     <span data-ttu-id="229b0-114">où `state` est un objet qui contient les données à utiliser par le délégué.</span><span class="sxs-lookup"><span data-stu-id="229b0-114">where `state` is an object that contains data to be used by the delegate.</span></span> <span data-ttu-id="229b0-115">Les données réelles qui peuvent être passées au délégué en appelant le <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="229b0-115">The actual data can be passed to the delegate by calling the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="229b0-116">Les threads de pool de threads managés sont des threads d’arrière-plan.</span><span class="sxs-lookup"><span data-stu-id="229b0-116">The threads in the managed thread pool are background threads.</span></span> <span data-ttu-id="229b0-117">Autrement dit, leurs <xref:System.Threading.Thread.IsBackground%2A> propriétés sont `true`.</span><span class="sxs-lookup"><span data-stu-id="229b0-117">That is, their <xref:System.Threading.Thread.IsBackground%2A> properties are `true`.</span></span> <span data-ttu-id="229b0-118">Cela signifie qu’un <xref:System.Threading.ThreadPool> thread ne conservera pas une application en cours d’exécution une fois que tous les threads de premier plan ont quitté.</span><span class="sxs-lookup"><span data-stu-id="229b0-118">This means that a <xref:System.Threading.ThreadPool> thread will not keep an application running after all foreground threads have exited.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="229b0-119">Lorsque le pool de threads réutilise un thread, il n’efface pas les données dans le stockage local des threads ou dans les champs marqués avec le <xref:System.ThreadStaticAttribute> attribut.</span><span class="sxs-lookup"><span data-stu-id="229b0-119">When the thread pool reuses a thread, it does not clear the data in thread local storage or in fields that are marked with the <xref:System.ThreadStaticAttribute> attribute.</span></span> <span data-ttu-id="229b0-120">Par conséquent, quand une méthode examine le stockage local des threads ou des champs qui sont marqués avec le <xref:System.ThreadStaticAttribute> attribut, les valeurs qu’il trouve peuvent être créés à partir d’une utilisation antérieure du thread du pool.</span><span class="sxs-lookup"><span data-stu-id="229b0-120">Therefore, when a method examines thread local storage or fields that are marked with the <xref:System.ThreadStaticAttribute> attribute, the values it finds might be left over from an earlier use of the thread pool thread.</span></span>  
  
 <span data-ttu-id="229b0-121">Vous pouvez également file d’attente des éléments de travail qui ne sont pas liées à une opération d’attente pour le pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-121">You can also queue work items that are not related to a wait operation to the thread pool.</span></span> <span data-ttu-id="229b0-122">Pour demander qu’un élément de travail soit géré par un thread dans le pool de threads, appelez le <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="229b0-122">To request that a work item be handled by a thread in the thread pool, call the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="229b0-123">Cette méthode prend comme paramètre une référence à la méthode ou un délégué qui sera appelé par le thread sélectionné dans le pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-123">This method takes as a parameter a reference to the method or delegate that will be called by the thread selected from the thread pool.</span></span> <span data-ttu-id="229b0-124">Il n’existe aucun moyen d’annuler un élément de travail une fois qu’il a été mis en attente.</span><span class="sxs-lookup"><span data-stu-id="229b0-124">There is no way to cancel a work item after it has been queued.</span></span>  
  
 <span data-ttu-id="229b0-125">Minuteries de la file d’attente du minuteur et les opérations d’attente inscrites également utilisent le pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-125">Timer-queue timers and registered wait operations also use the thread pool.</span></span> <span data-ttu-id="229b0-126">Leurs fonctions de rappel sont mis en attente dans le pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-126">Their callback functions are queued to the thread pool.</span></span>  
  
 <span data-ttu-id="229b0-127">Il existe un pool de threads par processus.</span><span class="sxs-lookup"><span data-stu-id="229b0-127">There is one thread pool per process.</span></span> <span data-ttu-id="229b0-128">Dans [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] et versions ultérieures, la taille par défaut du pool de threads d'un processus dépend de plusieurs facteurs, dont la taille de l'espace d'adressage virtuel.</span><span class="sxs-lookup"><span data-stu-id="229b0-128">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the default size of the thread pool for a process depends on several factors, such as the size of the virtual address space.</span></span> <span data-ttu-id="229b0-129">Un processus peut appeler la méthode <xref:System.Threading.ThreadPool.GetMaxThreads%2A> pour déterminer le nombre de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-129">A process can call the <xref:System.Threading.ThreadPool.GetMaxThreads%2A> method to determine the number of threads.</span></span> <span data-ttu-id="229b0-130">Le nombre de threads dans le pool de threads peut être modifié à l’aide de la <xref:System.Threading.ThreadPool.SetMaxThreads%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="229b0-130">The number of threads in the thread pool can be changed by using the <xref:System.Threading.ThreadPool.SetMaxThreads%2A> method.</span></span> <span data-ttu-id="229b0-131">Chaque thread utilise la taille de pile par défaut et s’exécute à la priorité par défaut.</span><span class="sxs-lookup"><span data-stu-id="229b0-131">Each thread uses the default stack size and runs at the default priority.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="229b0-132">Code non managé qui héberge le .NET Framework peut modifier la taille du pool de threads à l’aide de la `CorSetMaxThreads` fonction, définie dans le fichier mscoree.h.</span><span class="sxs-lookup"><span data-stu-id="229b0-132">Unmanaged code that hosts the .NET Framework can change the size of the thread pool by using the `CorSetMaxThreads` function, defined in the mscoree.h file.</span></span>  
  
 <span data-ttu-id="229b0-133">Le pool de threads fournit de nouveaux threads de travail ou threads de terminaison d’e/s à la demande jusqu'à ce qu’il atteigne le minimum pour chaque catégorie.</span><span class="sxs-lookup"><span data-stu-id="229b0-133">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="229b0-134">Lorsqu’une valeur minimale est atteinte, le pool de threads peut créer des threads supplémentaires dans cette catégorie ou attendre que certaines tâches soient terminées.</span><span class="sxs-lookup"><span data-stu-id="229b0-134">When a minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="229b0-135">Dans [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] et versions ultérieures, le pool de threads crée et détruit des threads de travail pour optimiser le débit, qui est défini comme le nombre de tâches exécutées par unité de temps.</span><span class="sxs-lookup"><span data-stu-id="229b0-135">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys worker threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="229b0-136">Un nombre trop bas de threads peut ne pas permettre une utilisation optimale des ressources disponibles, tandis qu'un nombre trop élevé de threads peut augmenter les conflits de ressources.</span><span class="sxs-lookup"><span data-stu-id="229b0-136">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="229b0-137">Quand la demande est faible, le nombre réel de threads du pool peut être inférieur aux valeurs minimales.</span><span class="sxs-lookup"><span data-stu-id="229b0-137">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
 <span data-ttu-id="229b0-138">Vous pouvez utiliser la méthode <xref:System.Threading.ThreadPool.GetMinThreads%2A> pour obtenir ces valeurs minimales.</span><span class="sxs-lookup"><span data-stu-id="229b0-138">You can use the <xref:System.Threading.ThreadPool.GetMinThreads%2A> method to obtain these minimum values.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="229b0-139">Vous pouvez utiliser la <xref:System.Threading.ThreadPool.SetMinThreads%2A> méthode pour augmenter le nombre minimal de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-139">You can use the <xref:System.Threading.ThreadPool.SetMinThreads%2A> method to increase the minimum number of threads.</span></span> <span data-ttu-id="229b0-140">Toutefois, une augmentation non nécessaire de ces valeurs peut entraîner des problèmes de performances.</span><span class="sxs-lookup"><span data-stu-id="229b0-140">However, unnecessarily increasing these values can cause performance problems.</span></span> <span data-ttu-id="229b0-141">Si vous démarrez trop de tâches en même temps, celles-ci seront lentes.</span><span class="sxs-lookup"><span data-stu-id="229b0-141">If too many tasks start at the same time, all of them might appear to be slow.</span></span> <span data-ttu-id="229b0-142">Dans la plupart des cas, le pool de threads sera plus performant avec son propre algorithme d'allocation de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-142">In most cases the thread pool will perform better with its own algorithm for allocating threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="229b0-143">Dans l’exemple suivant, le thread d’application principal files d’attente une méthode nommée `ThreadProc` à exécuter sur un thread de pool de threads, se met en veille pour une seconde, puis se ferme.</span><span class="sxs-lookup"><span data-stu-id="229b0-143">In the following example, the main application thread  queues a method named `ThreadProc` to execute on a thread pool thread, sleeps for one second, and then exits.</span></span> <span data-ttu-id="229b0-144">Le `ThreadProc` méthode affiche simplement un message.</span><span class="sxs-lookup"><span data-stu-id="229b0-144">The `ThreadProc` method simply displays a message.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 <span data-ttu-id="229b0-145">Si vous commentez l’appel à la <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> (méthode), le thread principal s’arrête avant la méthode s’exécute sur le thread de pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-145">If you comment out the call to the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, the main thread exits before         method runs on the thread pool thread.</span></span>  <span data-ttu-id="229b0-146">Le pool de threads utilise des threads d’arrière-plan qui arrêtent l’application en cours d’exécution si tous les threads de premier plan sont terminés.</span><span class="sxs-lookup"><span data-stu-id="229b0-146">The thread pool uses background         threads, which do not keep the application running if all foreground threads have terminated.</span></span>  <span data-ttu-id="229b0-147">(Ceci est un exemple simple d’une condition de concurrence.)</span><span class="sxs-lookup"><span data-stu-id="229b0-147">(This         is a simple example of a race condition.)</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="229b0-148">Ce type est thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="229b0-148">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="BindHandle">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="229b0-149">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-149">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static bool BindHandle (IntPtr osHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool BindHandle(native int osHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (osHandle As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool BindHandle(IntPtr osHandle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ThreadPool.BindHandle(IntPtr) has been deprecated.  Please use ThreadPool.BindHandle(SafeHandle) instead.", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="osHandle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="osHandle">
          <span data-ttu-id="229b0-150">An <see cref="T:System.IntPtr" /> that holds the handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-150">An <see cref="T:System.IntPtr" /> that holds the handle.</span>
          </span>
          <span data-ttu-id="229b0-151">The handle must have been opened for overlapped I/O on the unmanaged side.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-151">The handle must have been opened for overlapped I/O on the unmanaged side.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="229b0-152">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-152">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="229b0-153">
            <see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-153">
              <see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="229b0-154">The caller does not have the required permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-154">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="229b0-155">pour avoir la possibilité d’appeler du code non managé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-155">for the ability to call unmanaged code.</span>
          </span>
          <span data-ttu-id="229b0-156">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-156">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static bool BindHandle (System.Runtime.InteropServices.SafeHandle osHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool BindHandle(class System.Runtime.InteropServices.SafeHandle osHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (osHandle As SafeHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool BindHandle(System::Runtime::InteropServices::SafeHandle ^ osHandle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="osHandle" Type="System.Runtime.InteropServices.SafeHandle" />
      </Parameters>
      <Docs>
        <param name="osHandle">
          <span data-ttu-id="229b0-157">A <see cref="T:System.Runtime.InteropServices.SafeHandle" /> that holds the operating system handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-157">A <see cref="T:System.Runtime.InteropServices.SafeHandle" /> that holds the operating system handle.</span>
          </span>
          <span data-ttu-id="229b0-158">The handle must have been opened for overlapped I/O on the unmanaged side.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-158">The handle must have been opened for overlapped I/O on the unmanaged side.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="229b0-159">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-159">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="229b0-160">
            <see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-160">
              <see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229b0-161">Le `osHandle` le paramètre doit être un <xref:Microsoft.Win32.SafeHandles.SafeFileHandle>, qui dérive de l’abstraite <xref:System.Runtime.InteropServices.SafeHandle> classe.</span><span class="sxs-lookup"><span data-stu-id="229b0-161">The `osHandle` parameter should be a <xref:Microsoft.Win32.SafeHandles.SafeFileHandle>, which derives from the abstract <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="229b0-162">
            <paramref name="osHandle" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-162">
              <paramref name="osHandle" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="229b0-163">pour avoir la possibilité d’appeler du code non managé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-163">for the ability to call unmanaged code.</span>
          </span>
          <span data-ttu-id="229b0-164">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-164">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetAvailableThreads">
      <MemberSignature Language="C#" Value="public static void GetAvailableThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetAvailableThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetAvailableThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetAvailableThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="229b0-165">The number of available worker threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-165">The number of available worker threads.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="229b0-166">The number of available asynchronous I/O threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-166">The number of available asynchronous I/O threads.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="229b0-167">Retrieves the difference between the maximum number of thread pool threads returned by the <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> method, and the number currently active.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-167">Retrieves the difference between the maximum number of thread pool threads returned by the <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> method, and the number currently active.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229b0-168">Lorsque <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> est retournée, la variable spécifiée par `workerThreads` contient le nombre de threads de travail supplémentaire qui peuvent être démarrés et la variable spécifiée par `completionPortThreads` contient le nombre de threads d’e/s asynchrones qui peuvent être a démarré.</span><span class="sxs-lookup"><span data-stu-id="229b0-168">When <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> returns, the variable specified by `workerThreads` contains the number of additional worker threads that can be started, and the variable specified by `completionPortThreads` contains the number of additional asynchronous I/O threads that can be started.</span></span>  
  
 <span data-ttu-id="229b0-169">S’il n’y a pas de threads disponibles, les demandes de pool de thread supplémentaire restent en file d’attente jusqu'à ce que les threads du pool soient disponibles.</span><span class="sxs-lookup"><span data-stu-id="229b0-169">If there are no available threads, additional thread pool requests remain queued until thread pool threads become available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="229b0-170">L’exemple suivant affiche le nombre de threads de travail et les threads d’e/s disponibles au démarrage d’une application simple.</span><span class="sxs-lookup"><span data-stu-id="229b0-170">The following example displays the number of worker threads and I/O threads available when a simple app is started.</span></span>  
  
 [!code-csharp[System.Threading.ThreadPool.GetAvailableThreads#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CS/Example2.cs#2)]
 [!code-vb[System.Threading.ThreadPool.GetAvailableThreads#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/VB/Example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxThreads">
      <MemberSignature Language="C#" Value="public static void GetMaxThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMaxThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetMaxThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetMaxThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="229b0-171">The maximum number of worker threads in the thread pool.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-171">The maximum number of worker threads in the thread pool.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="229b0-172">The maximum number of asynchronous I/O threads in the thread pool.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-172">The maximum number of asynchronous I/O threads in the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="229b0-173">Retrieves the number of requests to the thread pool that can be active concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-173">Retrieves the number of requests to the thread pool that can be active concurrently.</span>
          </span>
          <span data-ttu-id="229b0-174">All requests above that number remain queued until thread pool threads become available.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-174">All requests above that number remain queued until thread pool threads become available.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229b0-175">Lorsque <xref:System.Threading.ThreadPool.GetMaxThreads%2A> est retournée, la variable spécifiée par `workerThreads` contient le nombre maximal de threads de travail autorisés dans le pool de threads et la variable spécifiée par `completionPortThreads` contient le nombre maximal de threads d’e/s asynchrones autorisés dans les pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-175">When <xref:System.Threading.ThreadPool.GetMaxThreads%2A> returns, the variable specified by `workerThreads` contains the maximum number of worker threads allowed in the thread pool, and the variable specified by `completionPortThreads` contains the maximum number of asynchronous I/O threads allowed in the thread pool.</span></span>  
  
 <span data-ttu-id="229b0-176">Vous pouvez utiliser la <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> méthode pour déterminer le nombre réel de threads dans le pool de threads à un moment donné.</span><span class="sxs-lookup"><span data-stu-id="229b0-176">You can use the <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> method to determine the actual number of threads in the thread pool at any given time.</span></span>  
  
 <span data-ttu-id="229b0-177">Vous pouvez utiliser la <xref:System.Threading.ThreadPool.SetMaxThreads%2A> pour définir le nombre maximal de threads de travail et les threads d’e/s asynchrones dans le pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-177">You can use the <xref:System.Threading.ThreadPool.SetMaxThreads%2A> to set the maximum number of worker threads and asynchronous I/O threads in the thread pool.</span></span>  
  
 <span data-ttu-id="229b0-178">Vous pouvez en file d’attente que plusieurs demandes de pool de threads que la mémoire système.</span><span class="sxs-lookup"><span data-stu-id="229b0-178">You can queue as many thread pool requests as system memory allows.</span></span> <span data-ttu-id="229b0-179">S’il y a plus de requêtes que les threads du pool, les demandes supplémentaires restent en file d’attente jusqu'à ce que les threads du pool soient disponibles.</span><span class="sxs-lookup"><span data-stu-id="229b0-179">If there are more requests than thread pool threads, the additional requests remain queued until thread pool threads become available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="229b0-180">L’exemple de code suivant montre comment récupérer un nombre du nombre de threads dans le pool de threads disponible et maximal.</span><span class="sxs-lookup"><span data-stu-id="229b0-180">The following code example shows how to retrieve a count of the maximum and available number of threads in the thread pool.</span></span> <span data-ttu-id="229b0-181">Un élément de travail est en attente qui utilise `FileStream` écrire de façon asynchrone à deux fichiers.</span><span class="sxs-lookup"><span data-stu-id="229b0-181">A work item is queued that uses `FileStream` to asynchronously write to two files.</span></span> <span data-ttu-id="229b0-182">Les méthodes de rappel sont programmées pour se chevaucher.</span><span class="sxs-lookup"><span data-stu-id="229b0-182">The callback methods are timed to overlap.</span></span> <span data-ttu-id="229b0-183">Un thread de travail gère l’élément de travail et, selon la vitesse et le nombre de processeurs sur l’ordinateur, un ou deux threads de port de terminaison gèrent les opérations d’écriture.</span><span class="sxs-lookup"><span data-stu-id="229b0-183">A worker thread handles the work item and, depending on the speed and number of processors on the computer, one or two completion port threads handle the write operations.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetMinThreads">
      <MemberSignature Language="C#" Value="public static void GetMinThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMinThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetMinThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetMinThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="229b0-184">When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-184">When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="229b0-185">When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-185">When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="229b0-186">Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-186">Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229b0-187">Le pool de threads fournit de nouveaux threads de travail ou threads de terminaison d’e/s à la demande jusqu'à ce qu’il atteigne le minimum pour chaque catégorie.</span><span class="sxs-lookup"><span data-stu-id="229b0-187">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="229b0-188">Par défaut, le nombre minimal de threads est défini pour le nombre de processeurs sur un système.</span><span class="sxs-lookup"><span data-stu-id="229b0-188">By default, the minimum number of threads is set to the number of processors on a system.</span></span> <span data-ttu-id="229b0-189">Lorsque la valeur minimale est atteinte, le pool de threads peut créer des threads supplémentaires dans cette catégorie ou attendre que certaines tâches soient terminées.</span><span class="sxs-lookup"><span data-stu-id="229b0-189">When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="229b0-190">Compter les [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], le pool de threads crée et détruit des threads pour optimiser le débit, qui est défini comme le nombre de tâches exécutées par unité de temps.</span><span class="sxs-lookup"><span data-stu-id="229b0-190">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="229b0-191">Un nombre trop bas de threads peut ne pas permettre une utilisation optimale des ressources disponibles, tandis qu'un nombre trop élevé de threads peut augmenter les conflits de ressources.</span><span class="sxs-lookup"><span data-stu-id="229b0-191">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="229b0-192">Quand la demande est faible, le nombre réel de threads du pool peut être inférieur aux valeurs minimales.</span><span class="sxs-lookup"><span data-stu-id="229b0-192">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="229b0-193">L’exemple suivant définit le nombre minimal de threads de travail à quatre et conserve la valeur d’origine pour le nombre minimal de threads de terminaison d’e/s asynchrones.</span><span class="sxs-lookup"><span data-stu-id="229b0-193">The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="QueueUserWorkItem">
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="229b0-194">Queues a method for execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-194">Queues a method for execution.</span>
          </span>
          <span data-ttu-id="229b0-195">The method executes when a thread pool thread becomes available.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-195">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="229b0-196">A <see cref="T:System.Threading.WaitCallback" /> that represents the method to be executed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-196">A <see cref="T:System.Threading.WaitCallback" /> that represents the method to be executed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="229b0-197">Queues a method for execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-197">Queues a method for execution.</span>
          </span>
          <span data-ttu-id="229b0-198">The method executes when a thread pool thread becomes available.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-198">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="229b0-199">
            <see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-199">
              <see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229b0-200">Vous pouvez placer les données requises par la méthode en file d’attente dans les champs d’instance de la classe dans laquelle elle est définie, ou vous pouvez utiliser la <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> surcharge qui accepte un objet qui contient les données nécessaires.</span><span class="sxs-lookup"><span data-stu-id="229b0-200">You can place data required by the queued method in the instance fields of the class in which the method is defined, or you can use the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> overload that accepts an object containing the necessary data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="229b0-201">Les utilisateurs de Visual Basic peuvent omettre la <xref:System.Threading.WaitCallback> constructeur et utiliser simplement la `AddressOf` opérateur lors du passage de la méthode de rappel à <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span><span class="sxs-lookup"><span data-stu-id="229b0-201">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="229b0-202">Visual Basic appelle automatiquement le constructeur délégué approprié.</span><span class="sxs-lookup"><span data-stu-id="229b0-202">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="229b0-203">Informations sur la version</span><span class="sxs-lookup"><span data-stu-id="229b0-203">Version Information</span></span>  
 <span data-ttu-id="229b0-204">Dans le .NET Framework version 2.0, le <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valeur de propriété est propagée aux threads de travail en file d’attente à l’aide de la <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="229b0-204">In the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="229b0-205">Dans les versions antérieures, les informations du principal ne sont pas propagées.</span><span class="sxs-lookup"><span data-stu-id="229b0-205">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="229b0-206">L’exemple suivant utilise le <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29> la surcharge de méthode en file d’attente une tâche, qui est représentée par le `ThreadProc` (méthode), à exécuter lorsqu’un thread devient disponible.</span><span class="sxs-lookup"><span data-stu-id="229b0-206">The following example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29> method overload to queue a task, which is represented by the `ThreadProc` method, to execute when a thread becomes available.</span></span> <span data-ttu-id="229b0-207">Aucune information de tâche n’est fournie avec cette surcharge.</span><span class="sxs-lookup"><span data-stu-id="229b0-207">No task information is supplied with this overload.</span></span> <span data-ttu-id="229b0-208">Par conséquent, les informations qui sont disponibles pour le `ThreadProc` méthode est limitée à l’objet auquel appartient la méthode.</span><span class="sxs-lookup"><span data-stu-id="229b0-208">Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="229b0-209">
            <paramref name="callBack" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-209">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="229b0-210">The common language runtime (CLR) is hosted, and the host does not support this action.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-210">The common language runtime (CLR) is hosted, and the host does not support this action.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback, state As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="229b0-211">A <see cref="T:System.Threading.WaitCallback" /> representing the method to execute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-211">A <see cref="T:System.Threading.WaitCallback" /> representing the method to execute.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="229b0-212">An object containing data to be used by the method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-212">An object containing data to be used by the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="229b0-213">Queues a method for execution, and specifies an object containing data to be used by the method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-213">Queues a method for execution, and specifies an object containing data to be used by the method.</span>
          </span>
          <span data-ttu-id="229b0-214">The method executes when a thread pool thread becomes available.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-214">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="229b0-215">
            <see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-215">
              <see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229b0-216">Si la méthode de rappel demande des données complexes, vous pouvez définir une classe pour contenir les données.</span><span class="sxs-lookup"><span data-stu-id="229b0-216">If the callback method requires complex data, you can define a class to contain the data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="229b0-217">Les utilisateurs de Visual Basic peuvent omettre la <xref:System.Threading.WaitCallback> constructeur et utiliser simplement la `AddressOf` opérateur lors du passage de la méthode de rappel à <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span><span class="sxs-lookup"><span data-stu-id="229b0-217">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="229b0-218">Visual Basic appelle automatiquement le constructeur délégué approprié.</span><span class="sxs-lookup"><span data-stu-id="229b0-218">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="229b0-219">Informations sur la version</span><span class="sxs-lookup"><span data-stu-id="229b0-219">Version Information</span></span>  
 <span data-ttu-id="229b0-220">Dans le .NET Framework version 2.0, le <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valeur de propriété est propagée aux threads de travail en file d’attente à l’aide de la <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="229b0-220">In the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="229b0-221">Dans les versions antérieures, les informations du principal ne sont pas propagées.</span><span class="sxs-lookup"><span data-stu-id="229b0-221">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="229b0-222">L’exemple suivant montre comment créer un objet qui contient des informations sur la tâche.</span><span class="sxs-lookup"><span data-stu-id="229b0-222">The following example shows how to create an object that contains task information.</span></span> <span data-ttu-id="229b0-223">Il montre également comment passer cet objet à une tâche est en file d’attente pour l’exécution par le pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-223">It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="229b0-224">The common language runtime (CLR) is hosted, and the host does not support this action.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-224">The common language runtime (CLR) is hosted, and the host does not support this action.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="229b0-225">
            <paramref name="callBack" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-225">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack, object state, bool preferLocal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack, object state, bool preferLocal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback, state As Object, preferLocal As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state, bool preferLocal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="preferLocal" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callBack">To be added.</param>
        <param name="state">To be added.</param>
        <param name="preferLocal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterWaitForSingleObject">
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="229b0-226">Registers a delegate that is waiting for a <see cref="T:System.Threading.WaitHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-226">Registers a delegate that is waiting for a <see cref="T:System.Threading.WaitHandle" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="229b0-227">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-227">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="229b0-228">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-228">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="229b0-229">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-229">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="229b0-230">The object that is passed to the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-230">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="229b0-231">The time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-231">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="229b0-232">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-232">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="229b0-233">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-233">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="229b0-234">
            <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-234">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="229b0-235">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit signed integer for the time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-235">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit signed integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="229b0-236">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-236">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229b0-237">Lorsque vous avez terminé à l’aide de la <xref:System.Threading.RegisteredWaitHandle> qui est retourné par cette méthode, appelez sa <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> méthode pour libérer les références au handle d’attente.</span><span class="sxs-lookup"><span data-stu-id="229b0-237">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="229b0-238">Nous vous recommandons de toujours appeler la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> (méthode), même si vous spécifiez `true` pour `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="229b0-238">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="229b0-239">Le garbage collection fonctionne plus efficacement si vous appelez le <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> méthode plutôt qu’en fonction de finaliseur du handle d’attente inscrite.</span><span class="sxs-lookup"><span data-stu-id="229b0-239">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="229b0-240">Le <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode files d’attente le délégué spécifié pour le pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-240">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="229b0-241">Un thread de travail exécute le délégué lorsqu’une des actions suivantes se produit :</span><span class="sxs-lookup"><span data-stu-id="229b0-241">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="229b0-242">L’objet spécifié est dans l’état signalé.</span><span class="sxs-lookup"><span data-stu-id="229b0-242">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="229b0-243">L’intervalle de délai d’attente est écoulé.</span><span class="sxs-lookup"><span data-stu-id="229b0-243">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="229b0-244">Le <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode vérifie l’état actuel de l’objet spécifié <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="229b0-244">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="229b0-245">Si l’état de l’objet n’est pas signalé, la méthode inscrit une opération d’attente.</span><span class="sxs-lookup"><span data-stu-id="229b0-245">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="229b0-246">L’opération d’attente est effectuée par un thread du pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-246">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="229b0-247">Le délégué est exécuté par un thread de travail lorsque l’état de l’objet est signalé ou que l’intervalle de délai d’attente est écoulé.</span><span class="sxs-lookup"><span data-stu-id="229b0-247">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="229b0-248">Si le `timeOutInterval` paramètre n’est pas 0 (zéro) et la `executeOnlyOnce` paramètre est `false`, le minuteur est réinitialisé chaque fois que l’événement est signalé ou que l’intervalle de délai d’attente est écoulé.</span><span class="sxs-lookup"><span data-stu-id="229b0-248">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="229b0-249">À l’aide un <xref:System.Threading.Mutex> pour `waitObject` ne fournit pas l’exclusion mutuelle des rappels, car l’API Win32 sous-jacente utilise la valeur par défaut `WT_EXECUTEDEFAULT` indicateur, de sorte que chaque rappel est distribué sur un thread distinct.</span><span class="sxs-lookup"><span data-stu-id="229b0-249">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="229b0-250">Au lieu d’un <xref:System.Threading.Mutex>, utilisez un <xref:System.Threading.Semaphore> avec un nombre maximal de 1.</span><span class="sxs-lookup"><span data-stu-id="229b0-250">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="229b0-251">Pour annuler l’opération d’attente, appelez le <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="229b0-251">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="229b0-252">Le thread d’attente utilise Win32 `WaitForMultipleObjects` fonction pour surveiller les opérations d’attente inscrite.</span><span class="sxs-lookup"><span data-stu-id="229b0-252">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="229b0-253">Par conséquent, si vous devez utiliser le même handle de système d’exploitation natif dans plusieurs appels à <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, vous devez dupliquer le handle à l’aide de Win32 `DuplicateHandle` (fonction).</span><span class="sxs-lookup"><span data-stu-id="229b0-253">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="229b0-254">Notez que vous ne devez pas impulsion passé à un objet d’événement <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, car le thread d’attente peut ne pas détecte que l’événement est signalé avant la réinitialisation.</span><span class="sxs-lookup"><span data-stu-id="229b0-254">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="229b0-255">Avant de retourner, la fonction modifie l’état de certains types d’objets de synchronisation.</span><span class="sxs-lookup"><span data-stu-id="229b0-255">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="229b0-256">Modification se produit uniquement pour l’objet dont l’état signalé a provoqué la condition d’attente être satisfait.</span><span class="sxs-lookup"><span data-stu-id="229b0-256">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="229b0-257">Par exemple, le nombre d’un sémaphore est diminué d’une unité.</span><span class="sxs-lookup"><span data-stu-id="229b0-257">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="229b0-258">Informations sur la version</span><span class="sxs-lookup"><span data-stu-id="229b0-258">Version Information</span></span>  
 <span data-ttu-id="229b0-259">En commençant par le .NET Framework version 2.0, le <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valeur de propriété est propagée aux threads de travail en file d’attente à l’aide de la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="229b0-259">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="229b0-260">Dans les versions antérieures, les informations du principal ne sont pas propagées.</span><span class="sxs-lookup"><span data-stu-id="229b0-260">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="229b0-261">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-261">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int64" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="229b0-262">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-262">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="229b0-263">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-263">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="229b0-264">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-264">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="229b0-265">The object passed to the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-265">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="229b0-266">The time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-266">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="229b0-267">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-267">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="229b0-268">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-268">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="229b0-269">
            <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-269">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="229b0-270">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-270">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="229b0-271">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-271">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229b0-272">Lorsque vous avez terminé à l’aide de la <xref:System.Threading.RegisteredWaitHandle> qui est retourné par cette méthode, appelez sa <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> méthode pour libérer les références au handle d’attente.</span><span class="sxs-lookup"><span data-stu-id="229b0-272">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="229b0-273">Nous vous recommandons de toujours appeler la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> (méthode), même si vous spécifiez `true` pour `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="229b0-273">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="229b0-274">Le garbage collection fonctionne plus efficacement si vous appelez le <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> méthode plutôt qu’en fonction de finaliseur du handle d’attente inscrite.</span><span class="sxs-lookup"><span data-stu-id="229b0-274">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="229b0-275">Le <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode files d’attente le délégué spécifié pour le pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-275">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="229b0-276">Un thread de travail exécute le délégué lorsqu’une des actions suivantes se produit :</span><span class="sxs-lookup"><span data-stu-id="229b0-276">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="229b0-277">L’objet spécifié est dans l’état signalé.</span><span class="sxs-lookup"><span data-stu-id="229b0-277">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="229b0-278">L’intervalle de délai d’attente est écoulé.</span><span class="sxs-lookup"><span data-stu-id="229b0-278">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="229b0-279">Le <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode vérifie l’état actuel de l’objet spécifié <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="229b0-279">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="229b0-280">Si l’état de l’objet n’est pas signalé, la méthode inscrit une opération d’attente.</span><span class="sxs-lookup"><span data-stu-id="229b0-280">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="229b0-281">L’opération d’attente est effectuée par un thread du pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-281">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="229b0-282">Le délégué est exécuté par un thread de travail lorsque l’état de l’objet est signalé ou que l’intervalle de délai d’attente est écoulé.</span><span class="sxs-lookup"><span data-stu-id="229b0-282">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="229b0-283">Si le `timeOutInterval` paramètre n’est pas 0 (zéro) et la `executeOnlyOnce` paramètre est `false`, le minuteur est réinitialisé chaque fois que l’événement est signalé ou que l’intervalle de délai d’attente est écoulé.</span><span class="sxs-lookup"><span data-stu-id="229b0-283">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="229b0-284">À l’aide un <xref:System.Threading.Mutex> pour `waitObject` ne fournit pas l’exclusion mutuelle des rappels, car l’API Win32 sous-jacente utilise la valeur par défaut `WT_EXECUTEDEFAULT` indicateur, de sorte que chaque rappel est distribué sur un thread distinct.</span><span class="sxs-lookup"><span data-stu-id="229b0-284">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="229b0-285">Au lieu d’un <xref:System.Threading.Mutex>, utilisez un <xref:System.Threading.Semaphore> avec un nombre maximal de 1.</span><span class="sxs-lookup"><span data-stu-id="229b0-285">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="229b0-286">Pour annuler l’opération d’attente, appelez le <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="229b0-286">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="229b0-287">Le thread d’attente utilise Win32 `WaitForMultipleObjects` fonction pour surveiller les opérations d’attente inscrite.</span><span class="sxs-lookup"><span data-stu-id="229b0-287">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="229b0-288">Par conséquent, si vous devez utiliser le même handle de système d’exploitation natif dans plusieurs appels à <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, vous devez dupliquer le handle à l’aide de Win32 `DuplicateHandle` (fonction).</span><span class="sxs-lookup"><span data-stu-id="229b0-288">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="229b0-289">Notez que vous ne devez pas impulsion passé à un objet d’événement <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, car le thread d’attente peut ne pas détecte que l’événement est signalé avant la réinitialisation.</span><span class="sxs-lookup"><span data-stu-id="229b0-289">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="229b0-290">Avant de retourner, la fonction modifie l’état de certains types d’objets de synchronisation.</span><span class="sxs-lookup"><span data-stu-id="229b0-290">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="229b0-291">Modification se produit uniquement pour l’objet dont l’état signalé a provoqué la condition d’attente être satisfait.</span><span class="sxs-lookup"><span data-stu-id="229b0-291">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="229b0-292">Par exemple, le nombre d’un sémaphore est diminué d’une unité.</span><span class="sxs-lookup"><span data-stu-id="229b0-292">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="229b0-293">Informations sur la version</span><span class="sxs-lookup"><span data-stu-id="229b0-293">Version Information</span></span>  
 <span data-ttu-id="229b0-294">En commençant par le .NET Framework version 2.0, le <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valeur de propriété est propagée aux threads de travail en file d’attente à l’aide de la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="229b0-294">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="229b0-295">Dans les versions antérieures, les informations du principal ne sont pas propagées.</span><span class="sxs-lookup"><span data-stu-id="229b0-295">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="229b0-296">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-296">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="229b0-297">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-297">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="229b0-298">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-298">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="229b0-299">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-299">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="229b0-300">The object passed to the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-300">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="229b0-301">The time-out represented by a <see cref="T:System.TimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-301">The time-out represented by a <see cref="T:System.TimeSpan" />.</span>
          </span>
          <span data-ttu-id="229b0-302">If <c>timeout</c> is 0 (zero), the function tests the object's state and returns immediately.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-302">If <c>timeout</c> is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="229b0-303">If <c>timeout</c> is -1, the function's time-out interval never elapses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-303">If <c>timeout</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="229b0-304">
            <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-304">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="229b0-305">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-305">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="229b0-306">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-306">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229b0-307">Lorsque vous avez terminé à l’aide de la <xref:System.Threading.RegisteredWaitHandle> qui est retourné par cette méthode, appelez sa <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> méthode pour libérer les références au handle d’attente.</span><span class="sxs-lookup"><span data-stu-id="229b0-307">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="229b0-308">Nous vous recommandons de toujours appeler la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> (méthode), même si vous spécifiez `true` pour `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="229b0-308">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="229b0-309">Le garbage collection fonctionne plus efficacement si vous appelez le <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> méthode plutôt qu’en fonction de finaliseur du handle d’attente inscrite.</span><span class="sxs-lookup"><span data-stu-id="229b0-309">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="229b0-310">Le <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode files d’attente le délégué spécifié pour le pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-310">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="229b0-311">Un thread de travail exécute le délégué lorsqu’une des actions suivantes se produit :</span><span class="sxs-lookup"><span data-stu-id="229b0-311">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="229b0-312">L’objet spécifié est dans l’état signalé.</span><span class="sxs-lookup"><span data-stu-id="229b0-312">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="229b0-313">L’intervalle de délai d’attente est écoulé.</span><span class="sxs-lookup"><span data-stu-id="229b0-313">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="229b0-314">Le <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode vérifie l’état actuel de l’objet spécifié <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="229b0-314">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="229b0-315">Si l’état de l’objet n’est pas signalé, la méthode inscrit une opération d’attente.</span><span class="sxs-lookup"><span data-stu-id="229b0-315">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="229b0-316">L’opération d’attente est effectuée par un thread du pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-316">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="229b0-317">Le délégué est exécuté par un thread de travail lorsque l’état de l’objet est signalé ou que l’intervalle de délai d’attente est écoulé.</span><span class="sxs-lookup"><span data-stu-id="229b0-317">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="229b0-318">Si le `timeOutInterval` paramètre n’est pas 0 (zéro) et la `executeOnlyOnce` paramètre est `false`, le minuteur est réinitialisé chaque fois que l’événement est signalé ou que l’intervalle de délai d’attente est écoulé.</span><span class="sxs-lookup"><span data-stu-id="229b0-318">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="229b0-319">À l’aide un <xref:System.Threading.Mutex> pour `waitObject` ne fournit pas l’exclusion mutuelle des rappels, car l’API Win32 sous-jacente utilise la valeur par défaut `WT_EXECUTEDEFAULT` indicateur, de sorte que chaque rappel est distribué sur un thread distinct.</span><span class="sxs-lookup"><span data-stu-id="229b0-319">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="229b0-320">Au lieu d’un <xref:System.Threading.Mutex>, utilisez un <xref:System.Threading.Semaphore> avec un nombre maximal de 1.</span><span class="sxs-lookup"><span data-stu-id="229b0-320">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="229b0-321">Pour annuler l’opération d’attente, appelez le <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="229b0-321">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="229b0-322">Le thread d’attente utilise Win32 `WaitForMultipleObjects` fonction pour surveiller les opérations d’attente inscrite.</span><span class="sxs-lookup"><span data-stu-id="229b0-322">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="229b0-323">Par conséquent, si vous devez utiliser le même handle de système d’exploitation natif dans plusieurs appels à <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, vous devez dupliquer le handle à l’aide de Win32 `DuplicateHandle` (fonction).</span><span class="sxs-lookup"><span data-stu-id="229b0-323">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="229b0-324">Notez que vous ne devez pas impulsion passé à un objet d’événement <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, car le thread d’attente peut ne pas détecte que l’événement est signalé avant la réinitialisation.</span><span class="sxs-lookup"><span data-stu-id="229b0-324">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="229b0-325">Avant de retourner, la fonction modifie l’état de certains types d’objets de synchronisation.</span><span class="sxs-lookup"><span data-stu-id="229b0-325">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="229b0-326">Modification se produit uniquement pour l’objet dont l’état signalé a provoqué la condition d’attente être satisfait.</span><span class="sxs-lookup"><span data-stu-id="229b0-326">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="229b0-327">Par exemple, le nombre d’un sémaphore est diminué d’une unité.</span><span class="sxs-lookup"><span data-stu-id="229b0-327">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="229b0-328">Informations sur la version</span><span class="sxs-lookup"><span data-stu-id="229b0-328">Version Information</span></span>  
 <span data-ttu-id="229b0-329">En commençant par le .NET Framework version 2.0, le <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valeur de propriété est propagée aux threads de travail en file d’attente à l’aide de la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="229b0-329">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="229b0-330">Dans les versions antérieures, les informations du principal ne sont pas propagées.</span><span class="sxs-lookup"><span data-stu-id="229b0-330">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="229b0-331">The <paramref name="timeout" /> parameter is less than -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-331">The <paramref name="timeout" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="229b0-332">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-332">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, unsigned int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, System::UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.UInt32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="229b0-333">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-333">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="229b0-334">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-334">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="229b0-335">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-335">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="229b0-336">The object passed to the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-336">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="229b0-337">The time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-337">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="229b0-338">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-338">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="229b0-339">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-339">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="229b0-340">
            <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-340">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="229b0-341">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-341">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="229b0-342">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that can be used to cancel the registered wait operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-342">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229b0-343">Lorsque vous avez terminé à l’aide de la <xref:System.Threading.RegisteredWaitHandle> qui est retourné par cette méthode, appelez sa <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> méthode pour libérer les références au handle d’attente.</span><span class="sxs-lookup"><span data-stu-id="229b0-343">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="229b0-344">Nous vous recommandons de toujours appeler la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> (méthode), même si vous spécifiez `true` pour `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="229b0-344">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="229b0-345">Le garbage collection fonctionne plus efficacement si vous appelez le <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> méthode plutôt qu’en fonction de finaliseur du handle d’attente inscrite.</span><span class="sxs-lookup"><span data-stu-id="229b0-345">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="229b0-346">Le <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode files d’attente le délégué spécifié pour le pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-346">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="229b0-347">Un thread de travail exécute le délégué lorsqu’une des actions suivantes se produit :</span><span class="sxs-lookup"><span data-stu-id="229b0-347">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="229b0-348">L’objet spécifié est dans l’état signalé.</span><span class="sxs-lookup"><span data-stu-id="229b0-348">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="229b0-349">L’intervalle de délai d’attente est écoulé.</span><span class="sxs-lookup"><span data-stu-id="229b0-349">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="229b0-350">Le <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode vérifie l’état actuel de l’objet spécifié <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="229b0-350">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="229b0-351">Si l’état de l’objet n’est pas signalé, la méthode inscrit une opération d’attente.</span><span class="sxs-lookup"><span data-stu-id="229b0-351">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="229b0-352">L’opération d’attente est effectuée par un thread du pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-352">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="229b0-353">Le délégué est exécuté par un thread de travail lorsque l’état de l’objet est signalé ou que l’intervalle de délai d’attente est écoulé.</span><span class="sxs-lookup"><span data-stu-id="229b0-353">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="229b0-354">Si le `timeOutInterval` paramètre n’est pas 0 (zéro) et la `executeOnlyOnce` paramètre est `false`, le minuteur est réinitialisé chaque fois que l’événement est signalé ou que l’intervalle de délai d’attente est écoulé.</span><span class="sxs-lookup"><span data-stu-id="229b0-354">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="229b0-355">À l’aide un <xref:System.Threading.Mutex> pour `waitObject` ne fournit pas l’exclusion mutuelle des rappels, car l’API Win32 sous-jacente utilise la valeur par défaut `WT_EXECUTEDEFAULT` indicateur, de sorte que chaque rappel est distribué sur un thread distinct.</span><span class="sxs-lookup"><span data-stu-id="229b0-355">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="229b0-356">Au lieu d’un <xref:System.Threading.Mutex>, utilisez un <xref:System.Threading.Semaphore> avec un nombre maximal de 1.</span><span class="sxs-lookup"><span data-stu-id="229b0-356">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="229b0-357">Pour annuler l’opération d’attente, appelez le <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="229b0-357">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="229b0-358">Le thread d’attente utilise Win32 `WaitForMultipleObjects` fonction pour surveiller les opérations d’attente inscrite.</span><span class="sxs-lookup"><span data-stu-id="229b0-358">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="229b0-359">Par conséquent, si vous devez utiliser le même handle de système d’exploitation natif dans plusieurs appels à <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, vous devez dupliquer le handle à l’aide de Win32 `DuplicateHandle` (fonction).</span><span class="sxs-lookup"><span data-stu-id="229b0-359">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="229b0-360">Notez que vous ne devez pas impulsion passé à un objet d’événement <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, car le thread d’attente peut ne pas détecte que l’événement est signalé avant la réinitialisation.</span><span class="sxs-lookup"><span data-stu-id="229b0-360">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="229b0-361">Avant de retourner, la fonction modifie l’état de certains types d’objets de synchronisation.</span><span class="sxs-lookup"><span data-stu-id="229b0-361">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="229b0-362">Modification se produit uniquement pour l’objet dont l’état signalé a provoqué la condition d’attente être satisfait.</span><span class="sxs-lookup"><span data-stu-id="229b0-362">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="229b0-363">Par exemple, le nombre d’un sémaphore est diminué d’une unité.</span><span class="sxs-lookup"><span data-stu-id="229b0-363">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="229b0-364">Informations sur la version</span><span class="sxs-lookup"><span data-stu-id="229b0-364">Version Information</span></span>  
 <span data-ttu-id="229b0-365">En commençant par le .NET Framework version 2.0, le <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valeur de propriété est propagée aux threads de travail en file d’attente à l’aide de la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="229b0-365">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="229b0-366">Dans les versions antérieures, les informations du principal ne sont pas propagées.</span><span class="sxs-lookup"><span data-stu-id="229b0-366">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="229b0-367">L’exemple suivant montre comment utiliser la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode pour exécuter une méthode de rappel spécifiée lorsqu’un handle d’attente spécifié est signalé.</span><span class="sxs-lookup"><span data-stu-id="229b0-367">The following example shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="229b0-368">Dans cet exemple, la méthode de rappel est `WaitProc`, et le handle d’attente est un <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="229b0-368">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="229b0-369">L’exemple définit un `TaskInfo` classe pour contenir les informations qui sont passées au rappel lors de son exécution.</span><span class="sxs-lookup"><span data-stu-id="229b0-369">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="229b0-370">L’exemple crée un `TaskInfo` de l’objet et lui assigne des données de chaîne.</span><span class="sxs-lookup"><span data-stu-id="229b0-370">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="229b0-371">Le <xref:System.Threading.RegisteredWaitHandle> qui est retourné par la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> est assigné à la méthode de la `Handle` champ le `TaskInfo` afin que la méthode de rappel a accès à l’objet le <xref:System.Threading.RegisteredWaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="229b0-371">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="229b0-372">En plus de spécifier `TaskInfo` en tant que l’objet à passer à la méthode de rappel, l’appel à la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode spécifie les <xref:System.Threading.AutoResetEvent> qui attend la tâche, un <xref:System.Threading.WaitOrTimerCallback> délégué qui représente le `WaitProc` méthode de rappel, une intervalle du délai d’attente d’une seconde et plusieurs rappels.</span><span class="sxs-lookup"><span data-stu-id="229b0-372">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="229b0-373">Lorsque le thread principal signale le <xref:System.Threading.AutoResetEvent> en appelant son <xref:System.Threading.EventWaitHandle.Set%2A> (méthode), la <xref:System.Threading.WaitOrTimerCallback> délégué est appelé.</span><span class="sxs-lookup"><span data-stu-id="229b0-373">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="229b0-374">Le `WaitProc` méthode tests <xref:System.Threading.RegisteredWaitHandle> pour déterminer si un délai d’attente s’est produite.</span><span class="sxs-lookup"><span data-stu-id="229b0-374">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="229b0-375">Si le rappel a été appelé parce que le handle d’attente a été signalé, le `WaitProc` annule l’inscription de la méthode la <xref:System.Threading.RegisteredWaitHandle>, l’arrêt de rappels supplémentaires.</span><span class="sxs-lookup"><span data-stu-id="229b0-375">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="229b0-376">Dans le cas d’un délai d’attente, la tâche continue à attendre.</span><span class="sxs-lookup"><span data-stu-id="229b0-376">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="229b0-377">Le `WaitProc` méthode se termine en imprimant un message sur la console.</span><span class="sxs-lookup"><span data-stu-id="229b0-377">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="229b0-378">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-378">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetMaxThreads">
      <MemberSignature Language="C#" Value="public static bool SetMaxThreads (int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetMaxThreads(int32 workerThreads, int32 completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetMaxThreads (workerThreads As Integer, completionPortThreads As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetMaxThreads(int workerThreads, int completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" />
        <Parameter Name="completionPortThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="229b0-379">The maximum number of worker threads in the thread pool.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-379">The maximum number of worker threads in the thread pool.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="229b0-380">The maximum number of asynchronous I/O threads in the thread pool.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-380">The maximum number of asynchronous I/O threads in the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="229b0-381">Sets the number of requests to the thread pool that can be active concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-381">Sets the number of requests to the thread pool that can be active concurrently.</span>
          </span>
          <span data-ttu-id="229b0-382">All requests above that number remain queued until thread pool threads become available.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-382">All requests above that number remain queued until thread pool threads become available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="229b0-383">
            <see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-383">
              <see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229b0-384">Impossible de définir le nombre maximal de threads de travail ou threads de terminaison d’e/s à un nombre plus petit que le nombre de processeurs sur l’ordinateur.</span><span class="sxs-lookup"><span data-stu-id="229b0-384">You cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the number of processors on the computer.</span></span> <span data-ttu-id="229b0-385">Pour déterminer le nombre de processeurs est présent, récupérer la valeur de la <xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType> propriété.</span><span class="sxs-lookup"><span data-stu-id="229b0-385">To determine how many processors are present, retrieve the value of the <xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="229b0-386">En outre, vous ne peut pas définir le nombre maximal de threads de travail ou des threads de terminaison d’e/s pour un nombre plus petit que le nombre minimal correspondant de threads de travail ou des threads de terminaison d’e/s.</span><span class="sxs-lookup"><span data-stu-id="229b0-386">In addition, you cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the corresponding minimum number of worker threads or I/O completion threads.</span></span> <span data-ttu-id="229b0-387">Pour déterminer la taille de pool de threads minimale, appelez le <xref:System.Threading.ThreadPool.GetMinThreads%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="229b0-387">To determine the minimum thread pool size,  call the <xref:System.Threading.ThreadPool.GetMinThreads%2A> method.</span></span>  
  
 <span data-ttu-id="229b0-388">Si le common language runtime est hébergé, par exemple par Internet Information Services (IIS) ou SQL Server, l’hôte peut limiter ou empêcher la modification de la taille de pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-388">If the common language runtime is hosted, for example by Internet Information Services (IIS) or SQL Server, the host can limit or prevent changes to the thread pool size.</span></span>  
  
 <span data-ttu-id="229b0-389">Soyez prudent lorsque vous modifiez le nombre maximal de threads dans le pool de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-389">Use caution when changing the maximum number of threads in the thread pool.</span></span> <span data-ttu-id="229b0-390">Pendant que votre code pourrait bénéficier, les modifications peuvent avoir un effet négatif sur les bibliothèques de code que vous utilisez.</span><span class="sxs-lookup"><span data-stu-id="229b0-390">While your code might benefit, the changes might have an adverse effect on code libraries you use.</span></span>  
  
 <span data-ttu-id="229b0-391">Définition de la taille de pool de threads trop volumineux peut entraîner des problèmes de performances.</span><span class="sxs-lookup"><span data-stu-id="229b0-391">Setting the thread pool size too large can cause performance problems.</span></span> <span data-ttu-id="229b0-392">Si trop de threads sont exécutent en même temps, le basculement de la tâche devient surcharge un facteur important.</span><span class="sxs-lookup"><span data-stu-id="229b0-392">If too many threads are executing at the same time, the task switching overhead becomes a significant factor.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="229b0-393">pour la possibilité de contrôler les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-393">for the ability to control threads.</span>
          </span>
          <span data-ttu-id="229b0-394">Valeur d’autorisation : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-394">Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="SetMinThreads">
      <MemberSignature Language="C#" Value="public static bool SetMinThreads (int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetMinThreads(int32 workerThreads, int32 completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetMinThreads (workerThreads As Integer, completionPortThreads As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetMinThreads(int workerThreads, int completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" />
        <Parameter Name="completionPortThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="229b0-395">The minimum number of worker threads that the thread pool creates on demand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-395">The minimum number of worker threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="229b0-396">The minimum number of asynchronous I/O threads that the thread pool creates on demand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-396">The minimum number of asynchronous I/O threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="229b0-397">Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-397">Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="229b0-398">
            <see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-398">
              <see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229b0-399">Le pool de threads fournit de nouveaux threads de travail ou threads de terminaison d’e/s à la demande jusqu'à ce qu’il atteigne le minimum pour chaque catégorie.</span><span class="sxs-lookup"><span data-stu-id="229b0-399">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="229b0-400">Lorsque la valeur minimale est atteinte, le pool de threads peut créer des threads supplémentaires dans cette catégorie ou attendre que certaines tâches soient terminées.</span><span class="sxs-lookup"><span data-stu-id="229b0-400">When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="229b0-401">Compter les [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], le pool de threads crée et détruit des threads pour optimiser le débit, qui est défini comme le nombre de tâches exécutées par unité de temps.</span><span class="sxs-lookup"><span data-stu-id="229b0-401">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="229b0-402">Un nombre trop bas de threads peut ne pas permettre une utilisation optimale des ressources disponibles, tandis qu'un nombre trop élevé de threads peut augmenter les conflits de ressources.</span><span class="sxs-lookup"><span data-stu-id="229b0-402">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
 <span data-ttu-id="229b0-403">Quand la demande est faible, le nombre réel de threads du pool peut être inférieur aux valeurs minimales.</span><span class="sxs-lookup"><span data-stu-id="229b0-403">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
 <span data-ttu-id="229b0-404">Si vous spécifiez un nombre négatif ou un nombre plus grand que le nombre maximal de threads de pool de threads actifs (obtenu à l’aide de <xref:System.Threading.ThreadPool.GetMaxThreads%2A>), <xref:System.Threading.ThreadPool.SetMinThreads%2A> renvoie `false` et ne change pas une des valeurs minimales.</span><span class="sxs-lookup"><span data-stu-id="229b0-404">If you specify a negative number or a number larger than the maximum number of active thread pool threads (obtained using <xref:System.Threading.ThreadPool.GetMaxThreads%2A>), <xref:System.Threading.ThreadPool.SetMinThreads%2A> returns `false` and does not change either of the minimum values.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="229b0-405">Par défaut, le nombre minimal de threads est défini pour le nombre de processeurs sur un système.</span><span class="sxs-lookup"><span data-stu-id="229b0-405">By default, the minimum number of threads is set to the number of processors on a system.</span></span> <span data-ttu-id="229b0-406">Vous pouvez utiliser la <xref:System.Threading.ThreadPool.SetMinThreads%2A> méthode pour augmenter l’ofthreads nombre minimal.</span><span class="sxs-lookup"><span data-stu-id="229b0-406">You can use the <xref:System.Threading.ThreadPool.SetMinThreads%2A> method to increase the minimum number ofthreads.</span></span> <span data-ttu-id="229b0-407">Toutefois, une augmentation non nécessaire de ces valeurs peut entraîner des problèmes de performances.</span><span class="sxs-lookup"><span data-stu-id="229b0-407">However, unnecessarily increasing these values can cause performance problems.</span></span> <span data-ttu-id="229b0-408">Si vous démarrez trop de tâches en même temps, celles-ci seront lentes.</span><span class="sxs-lookup"><span data-stu-id="229b0-408">If too many tasks start at the same time, all of them might appear to be slow.</span></span> <span data-ttu-id="229b0-409">Dans la plupart des cas, le pool de threads sera plus performant avec son propre algorithme d’allocation de threads.</span><span class="sxs-lookup"><span data-stu-id="229b0-409">In most cases, the thread pool will perform better with its own algorithm for allocating threads.</span></span> <span data-ttu-id="229b0-410">Réduction de la valeur minimale à moins que le nombre de processeurs peut également dégrader les performances.</span><span class="sxs-lookup"><span data-stu-id="229b0-410">Reducing the minimum to less than the number of processors can also hurt performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="229b0-411">L’exemple suivant définit le nombre minimal de threads de travail à quatre et conserve la valeur d’origine pour le nombre minimal de threads de terminaison d’e/s asynchrones.</span><span class="sxs-lookup"><span data-stu-id="229b0-411">The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="229b0-412">pour la possibilité de contrôler les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-412">for the ability to control threads.</span>
          </span>
          <span data-ttu-id="229b0-413">Valeur d’autorisation : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-413">Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueNativeOverlapped">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueNativeOverlapped (System.Threading.NativeOverlapped* overlapped);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueNativeOverlapped(valuetype System.Threading.NativeOverlapped* overlapped) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueNativeOverlapped(System::Threading::NativeOverlapped* overlapped);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlapped" Type="System.Threading.NativeOverlapped*" />
      </Parameters>
      <Docs>
        <param name="overlapped">
          <span data-ttu-id="229b0-414">The <see cref="T:System.Threading.NativeOverlapped" /> structure to queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-414">The <see cref="T:System.Threading.NativeOverlapped" /> structure to queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="229b0-415">Queues an overlapped I/O operation for execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-415">Queues an overlapped I/O operation for execution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="229b0-416">
            <see langword="true" /> if the operation was successfully queued to an I/O completion port; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-416">
              <see langword="true" /> if the operation was successfully queued to an I/O completion port; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229b0-417">Pour plus d’informations sur l’aide de Win32 natif chevauchent d’e/s, consultez le <xref:System.Threading.Overlapped> (classe), le <xref:System.Threading.NativeOverlapped> structure et le `OVERLAPPED` structure dans le Kit de développement de plate-forme Win32.</span><span class="sxs-lookup"><span data-stu-id="229b0-417">For information about using native Win32 overlapped I/O, see the <xref:System.Threading.Overlapped> class, the <xref:System.Threading.NativeOverlapped> structure, and the `OVERLAPPED` structure in the Win32 Platform SDK.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="229b0-418">À l’aide de la <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A> méthode peut accidentellement ouvrir une faille de sécurité.</span><span class="sxs-lookup"><span data-stu-id="229b0-418">Using the <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A> method could inadvertently open up a security hole.</span></span> <span data-ttu-id="229b0-419">Sécurité d’accès du code base ses vérifications d’autorisations sur les autorisations de tous les appelants sur la pile.</span><span class="sxs-lookup"><span data-stu-id="229b0-419">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="229b0-420">Lorsque le travail est en file d’attente sur un thread de pool de threads à l’aide <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>, la pile du thread du pool ne dispose pas du contexte des appelants réels.</span><span class="sxs-lookup"><span data-stu-id="229b0-420">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>, the stack of the thread pool thread does not have the context of the actual callers.</span></span> <span data-ttu-id="229b0-421">Un code malveillant peut être en mesure d’exploiter ceci pour éviter les vérifications d’autorisations.</span><span class="sxs-lookup"><span data-stu-id="229b0-421">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="229b0-422">requiert une confiance totale pour l’appelant immédiat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-422">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="229b0-423">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-423">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueUserWorkItem(class System.Threading.WaitCallback callBack, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeQueueUserWorkItem (callBack As WaitCallback, state As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="229b0-424">A <see cref="T:System.Threading.WaitCallback" /> that represents the delegate to invoke when a thread in the thread pool picks up the work item.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-424">A <see cref="T:System.Threading.WaitCallback" /> that represents the delegate to invoke when a thread in the thread pool picks up the work item.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="229b0-425">The object that is passed to the delegate when serviced from the thread pool.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-425">The object that is passed to the delegate when serviced from the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="229b0-426">Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-426">Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="229b0-427">
            <see langword="true" /> if the method succeeds; <see cref="T:System.OutOfMemoryException" /> is thrown if the work item could not be queued.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-427">
              <see langword="true" /> if the method succeeds; <see cref="T:System.OutOfMemoryException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229b0-428">Contrairement à la <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> méthode <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> ne propage pas la pile appelante vers le thread de travail.</span><span class="sxs-lookup"><span data-stu-id="229b0-428">Unlike the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method, <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="229b0-429">Cela permet au code de perdre la pile appelante et ainsi d’élever leurs privilèges de sécurité.</span><span class="sxs-lookup"><span data-stu-id="229b0-429">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="229b0-430">À l’aide de <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> peut accidentellement ouvrir une faille de sécurité.</span><span class="sxs-lookup"><span data-stu-id="229b0-430">Using <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="229b0-431">Sécurité d’accès du code base ses vérifications d’autorisations sur les autorisations de tous les appelants sur la pile.</span><span class="sxs-lookup"><span data-stu-id="229b0-431">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="229b0-432">Lorsque le travail est en file d’attente sur un thread de pool de threads à l’aide <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>, la pile du thread du pool n’aura pas le contexte des appelants réels.</span><span class="sxs-lookup"><span data-stu-id="229b0-432">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="229b0-433">Un code malveillant peut être en mesure d’exploiter ceci pour éviter les vérifications d’autorisations.</span><span class="sxs-lookup"><span data-stu-id="229b0-433">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="229b0-434">The caller does not have the required permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-434">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="229b0-435">An out-of-memory condition was encountered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-435">An out-of-memory condition was encountered.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="229b0-436">The work item could not be queued.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-436">The work item could not be queued.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="229b0-437">
            <paramref name="callBack" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-437">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="229b0-438">requiert une confiance totale pour l’appelant immédiat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-438">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="229b0-439">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-439">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="UnsafeRegisterWaitForSingleObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="229b0-440">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, but does not propagate the calling stack to the worker thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-440">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, but does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="229b0-441">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-441">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="229b0-442">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-442">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="229b0-443">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-443">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="229b0-444">The object that is passed to the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-444">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="229b0-445">The time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-445">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="229b0-446">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-446">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="229b0-447">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-447">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="229b0-448">
            <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-448">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="229b0-449">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, using a 32-bit signed integer for the time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-449">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, using a 32-bit signed integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="229b0-450">This method does not propagate the calling stack to the worker thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-450">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="229b0-451">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-451">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229b0-452">Contrairement à la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> ne propage pas la pile appelante vers le thread de travail.</span><span class="sxs-lookup"><span data-stu-id="229b0-452">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="229b0-453">Cela permet au code de perdre la pile appelante et ainsi d’élever leurs privilèges de sécurité.</span><span class="sxs-lookup"><span data-stu-id="229b0-453">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="229b0-454">À l’aide de <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> peut accidentellement ouvrir une faille de sécurité.</span><span class="sxs-lookup"><span data-stu-id="229b0-454">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="229b0-455">Sécurité d’accès du code base ses vérifications d’autorisations sur les autorisations de tous les appelants sur la pile.</span><span class="sxs-lookup"><span data-stu-id="229b0-455">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="229b0-456">Lorsque le travail est en file d’attente sur un thread de pool de threads à l’aide <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, la pile du thread du pool n’aura pas le contexte des appelants réels.</span><span class="sxs-lookup"><span data-stu-id="229b0-456">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="229b0-457">Un code malveillant peut être en mesure d’exploiter ceci pour éviter les vérifications d’autorisations.</span><span class="sxs-lookup"><span data-stu-id="229b0-457">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="229b0-458">À l’aide un <xref:System.Threading.Mutex> pour `waitObject` ne fournit pas l’exclusion mutuelle des rappels, car l’API Win32 sous-jacente utilise la valeur par défaut `WT_EXECUTEDEFAULT` indicateur, de sorte que chaque rappel est distribué sur un thread distinct.</span><span class="sxs-lookup"><span data-stu-id="229b0-458">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="229b0-459">Lorsque vous avez terminé à l’aide de la <xref:System.Threading.RegisteredWaitHandle> qui est retourné par cette méthode, appelez sa <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> méthode pour libérer les références au handle d’attente.</span><span class="sxs-lookup"><span data-stu-id="229b0-459">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="229b0-460">Nous vous recommandons de toujours appeler la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> (méthode), même si vous spécifiez `true` pour `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="229b0-460">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="229b0-461">Le garbage collection fonctionne plus efficacement si vous appelez le <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> méthode plutôt qu’en fonction de finaliseur du handle d’attente inscrite.</span><span class="sxs-lookup"><span data-stu-id="229b0-461">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="229b0-462">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-462">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="229b0-463">The caller does not have the required permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-463">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="229b0-464">requiert une confiance totale pour l’appelant immédiat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-464">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="229b0-465">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-465">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int64" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="229b0-466">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-466">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="229b0-467">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-467">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="229b0-468">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-468">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="229b0-469">The object that is passed to the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-469">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="229b0-470">The time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-470">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="229b0-471">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-471">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="229b0-472">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-472">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="229b0-473">
            <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-473">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="229b0-474">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-474">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="229b0-475">This method does not propagate the calling stack to the worker thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-475">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="229b0-476">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-476">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229b0-477">Contrairement à la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> ne propage pas la pile appelante vers le thread de travail.</span><span class="sxs-lookup"><span data-stu-id="229b0-477">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="229b0-478">Cela permet au code de perdre la pile appelante et ainsi d’élever leurs privilèges de sécurité.</span><span class="sxs-lookup"><span data-stu-id="229b0-478">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="229b0-479">À l’aide de <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> peut accidentellement ouvrir une faille de sécurité.</span><span class="sxs-lookup"><span data-stu-id="229b0-479">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="229b0-480">Sécurité d’accès du code base ses vérifications d’autorisations sur les autorisations de tous les appelants sur la pile.</span><span class="sxs-lookup"><span data-stu-id="229b0-480">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="229b0-481">Lorsque le travail est en file d’attente sur un thread de pool de threads à l’aide <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, la pile du thread du pool n’aura pas le contexte des appelants réels.</span><span class="sxs-lookup"><span data-stu-id="229b0-481">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="229b0-482">Un code malveillant peut être en mesure d’exploiter ceci pour éviter les vérifications d’autorisations.</span><span class="sxs-lookup"><span data-stu-id="229b0-482">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="229b0-483">À l’aide un <xref:System.Threading.Mutex> pour `waitObject` ne fournit pas l’exclusion mutuelle des rappels, car l’API Win32 sous-jacente utilise la valeur par défaut `WT_EXECUTEDEFAULT` indicateur, de sorte que chaque rappel est distribué sur un thread distinct.</span><span class="sxs-lookup"><span data-stu-id="229b0-483">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="229b0-484">Lorsque vous avez terminé à l’aide de la <xref:System.Threading.RegisteredWaitHandle> qui est retourné par cette méthode, appelez sa <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> méthode pour libérer les références au handle d’attente.</span><span class="sxs-lookup"><span data-stu-id="229b0-484">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="229b0-485">Nous vous recommandons de toujours appeler la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> (méthode), même si vous spécifiez `true` pour `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="229b0-485">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="229b0-486">Le garbage collection fonctionne plus efficacement si vous appelez le <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> méthode plutôt qu’en fonction de finaliseur du handle d’attente inscrite.</span><span class="sxs-lookup"><span data-stu-id="229b0-486">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="229b0-487">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-487">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="229b0-488">The caller does not have the required permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-488">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="229b0-489">requiert une confiance totale pour l’appelant immédiat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-489">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="229b0-490">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-490">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="229b0-491">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-491">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="229b0-492">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-492">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="229b0-493">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-493">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="229b0-494">The object that is passed to the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-494">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="229b0-495">The time-out represented by a <see cref="T:System.TimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-495">The time-out represented by a <see cref="T:System.TimeSpan" />.</span>
          </span>
          <span data-ttu-id="229b0-496">If <c>timeout</c> is 0 (zero), the function tests the object's state and returns immediately.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-496">If <c>timeout</c> is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="229b0-497">If <c>timeout</c> is -1, the function's time-out interval never elapses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-497">If <c>timeout</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="229b0-498">
            <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-498">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="229b0-499">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out. This method does not propagate the calling stack to the worker thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-499">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out. This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="229b0-500">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-500">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229b0-501">Contrairement à la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> ne propage pas la pile appelante vers le thread de travail.</span><span class="sxs-lookup"><span data-stu-id="229b0-501">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="229b0-502">Cela permet au code de perdre la pile appelante et ainsi d’élever leurs privilèges de sécurité.</span><span class="sxs-lookup"><span data-stu-id="229b0-502">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="229b0-503">À l’aide de <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> peut accidentellement ouvrir une faille de sécurité.</span><span class="sxs-lookup"><span data-stu-id="229b0-503">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="229b0-504">Sécurité d’accès du code base ses vérifications d’autorisations sur les autorisations de tous les appelants sur la pile.</span><span class="sxs-lookup"><span data-stu-id="229b0-504">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="229b0-505">Lorsque le travail est en file d’attente sur un thread de pool de threads à l’aide <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, la pile du thread du pool n’aura pas le contexte des appelants réels.</span><span class="sxs-lookup"><span data-stu-id="229b0-505">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="229b0-506">Un code malveillant peut être en mesure d’exploiter ceci pour éviter les vérifications d’autorisations.</span><span class="sxs-lookup"><span data-stu-id="229b0-506">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="229b0-507">À l’aide un <xref:System.Threading.Mutex> pour `waitObject` ne fournit pas l’exclusion mutuelle des rappels, car l’API Win32 sous-jacente utilise la valeur par défaut `WT_EXECUTEDEFAULT` indicateur, de sorte que chaque rappel est distribué sur un thread distinct.</span><span class="sxs-lookup"><span data-stu-id="229b0-507">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="229b0-508">Lorsque vous avez terminé à l’aide de la <xref:System.Threading.RegisteredWaitHandle> qui est retourné par cette méthode, appelez sa <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> méthode pour libérer les références au handle d’attente.</span><span class="sxs-lookup"><span data-stu-id="229b0-508">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="229b0-509">Nous vous recommandons de toujours appeler la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> (méthode), même si vous spécifiez `true` pour `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="229b0-509">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="229b0-510">Le garbage collection fonctionne plus efficacement si vous appelez le <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> méthode plutôt qu’en fonction de finaliseur du handle d’attente inscrite.</span><span class="sxs-lookup"><span data-stu-id="229b0-510">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="229b0-511">The <paramref name="timeout" /> parameter is less than -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-511">The <paramref name="timeout" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="229b0-512">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-512">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="229b0-513">The caller does not have the required permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-513">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="229b0-514">requiert une confiance totale pour l’appelant immédiat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-514">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="229b0-515">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-515">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, unsigned int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, System::UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.UInt32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="229b0-516">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-516">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="229b0-517">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-517">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="229b0-518">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-518">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="229b0-519">The object that is passed to the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-519">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="229b0-520">The time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-520">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="229b0-521">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-521">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="229b0-522">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-522">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="229b0-523">
            <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-523">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="229b0-524">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-524">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="229b0-525">This method does not propagate the calling stack to the worker thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-525">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="229b0-526">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-526">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229b0-527">Contrairement à la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> ne propage pas la pile appelante vers le thread de travail.</span><span class="sxs-lookup"><span data-stu-id="229b0-527">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="229b0-528">Cela permet au code de perdre la pile appelante et ainsi d’élever leurs privilèges de sécurité.</span><span class="sxs-lookup"><span data-stu-id="229b0-528">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="229b0-529">À l’aide de <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> peut accidentellement ouvrir une faille de sécurité.</span><span class="sxs-lookup"><span data-stu-id="229b0-529">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="229b0-530">Sécurité d’accès du code base ses vérifications d’autorisations sur les autorisations de tous les appelants sur la pile.</span><span class="sxs-lookup"><span data-stu-id="229b0-530">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="229b0-531">Lorsque le travail est en file d’attente sur un thread de pool de threads à l’aide <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, la pile du thread du pool n’aura pas le contexte des appelants réels.</span><span class="sxs-lookup"><span data-stu-id="229b0-531">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="229b0-532">Un code malveillant peut être en mesure d’exploiter ceci pour éviter les vérifications d’autorisations.</span><span class="sxs-lookup"><span data-stu-id="229b0-532">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="229b0-533">À l’aide un <xref:System.Threading.Mutex> pour `waitObject` ne fournit pas l’exclusion mutuelle des rappels, car l’API Win32 sous-jacente utilise la valeur par défaut `WT_EXECUTEDEFAULT` indicateur, de sorte que chaque rappel est distribué sur un thread distinct.</span><span class="sxs-lookup"><span data-stu-id="229b0-533">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="229b0-534">Lorsque vous avez terminé à l’aide de la <xref:System.Threading.RegisteredWaitHandle> qui est retourné par cette méthode, appelez sa <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> méthode pour libérer les références au handle d’attente.</span><span class="sxs-lookup"><span data-stu-id="229b0-534">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="229b0-535">Nous vous recommandons de toujours appeler la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> (méthode), même si vous spécifiez `true` pour `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="229b0-535">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="229b0-536">Le garbage collection fonctionne plus efficacement si vous appelez le <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> méthode plutôt qu’en fonction de finaliseur du handle d’attente inscrite.</span><span class="sxs-lookup"><span data-stu-id="229b0-536">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="229b0-537">The caller does not have the required permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-537">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="229b0-538">requiert une confiance totale pour l’appelant immédiat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-538">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="229b0-539">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="229b0-539">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>