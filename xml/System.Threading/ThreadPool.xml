<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ThreadPool.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac550de54f2e0cde589b4af1c454e85fed39c9f40df.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50de54f2e0cde589b4af1c454e85fed39c9f40df</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</source>
          <target state="translated">Fournit un pool de threads qui peuvent servir à exécuter des tâches, publier des éléments de travail, traiter des E/S asynchrones, attendre au nom d’autres threads et traiter des minuteries.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Many applications create threads that spend a great deal of time in the sleeping state, waiting for an event to occur.</source>
          <target state="translated">De nombreuses applications créent des threads consacrent beaucoup de temps en état de veille, en attente d’un événement se produise.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Other threads might enter a sleeping state only to be awakened periodically to poll for a change or update status information.</source>
          <target state="translated">Autres threads peuvent entrer en état de veille qu’à être réactivés pour interroger une modification ou de mettre à jour les informations d’état.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The thread pool enables you to use threads more efficiently by providing your application with a pool of worker threads that are managed by the system.</source>
          <target state="translated">Le pool de threads permet d’utiliser plus efficacement en fournissant votre application un pool de threads de travail qui sont gérés par le système.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Examples of operations that use thread pool threads include the following:</source>
          <target state="translated">Exemples d’opérations qui utilisent des threads de pool sont les suivantes :</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When you create a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object to perform some task asynchronously, by default the task is scheduled to run on a thread pool thread.</source>
          <target state="translated">Lorsque vous créez un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> ou <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objet pour effectuer une tâche de façon asynchrone, par défaut, la tâche est planifiée pour s’exécuter sur un thread de pool de threads.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Asynchronous timers use the thread pool.</source>
          <target state="translated">Les minuteries asynchrones utilisent le pool de threads.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Thread pool threads execute callbacks from the <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph> class and raise events from the <ph id="ph2">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Threads du pool de threads exécutent des rappels de la <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph> de classe et de déclencher des événements à partir de la <ph id="ph2">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When you use registered wait handles, a system thread monitors the status of the wait handles.</source>
          <target state="translated">Lorsque vous utilisez des handles d’attente inscrit, un thread système analyse l’état des handles d’attente.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When a wait operation completes, a worker thread from the thread pool executes the corresponding callback function.</source>
          <target state="translated">Lorsqu’une opération d’attente se termine, un thread de travail du pool de threads exécute la fonction de rappel correspondant.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When you call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method to queue a method for execution on a thread pool thread.</source>
          <target state="translated">Lorsque vous appelez le <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> méthode en file d’attente d’une méthode pour l’exécution sur un thread de pool de threads.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>You do this by passing the method a <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> delegate.</source>
          <target state="translated">Pour ce faire, en passant la méthode un <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> déléguer.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The delegate has the signature</source>
          <target state="translated">Le délégué a la signature</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>where <ph id="ph1">`state`</ph> is an object that contains data to be used by the delegate.</source>
          <target state="translated">où <ph id="ph1">`state`</ph> est un objet qui contient les données à utiliser par le délégué.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The actual data can be passed to the delegate by calling the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">Les données réelles qui peuvent être passées au délégué en appelant le <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The threads in the managed thread pool are background threads.</source>
          <target state="translated">Les threads de pool de threads managés sont des threads d’arrière-plan.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>That is, their <ph id="ph1">&lt;xref:System.Threading.Thread.IsBackground%2A&gt;</ph> properties are <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Autrement dit, leurs <ph id="ph1">&lt;xref:System.Threading.Thread.IsBackground%2A&gt;</ph> propriétés sont <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>This means that a <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread will not keep an application running after all foreground threads have exited.</source>
          <target state="translated">Cela signifie qu’un <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread ne conservera pas une application en cours d’exécution une fois que tous les threads de premier plan ont quitté.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When the thread pool reuses a thread, it does not clear the data in thread local storage or in fields that are marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute.</source>
          <target state="translated">Lorsque le pool de threads réutilise un thread, il n’efface pas les données dans le stockage local des threads ou dans les champs marqués avec le <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribut.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Therefore, when a method examines thread local storage or fields that are marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute, the values it finds might be left over from an earlier use of the thread pool thread.</source>
          <target state="translated">Par conséquent, quand une méthode examine le stockage local des threads ou des champs qui sont marqués avec le <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribut, les valeurs qu’il trouve peuvent être créés à partir d’une utilisation antérieure du thread du pool.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>You can also queue work items that are not related to a wait operation to the thread pool.</source>
          <target state="translated">Vous pouvez également file d’attente des éléments de travail qui ne sont pas liées à une opération d’attente pour le pool de threads.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>To request that a work item be handled by a thread in the thread pool, call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method.</source>
          <target state="translated">Pour demander qu’un élément de travail soit géré par un thread dans le pool de threads, appelez le <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>This method takes as a parameter a reference to the method or delegate that will be called by the thread selected from the thread pool.</source>
          <target state="translated">Cette méthode prend comme paramètre une référence à la méthode ou un délégué qui sera appelé par le thread sélectionné dans le pool de threads.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>There is no way to cancel a work item after it has been queued.</source>
          <target state="translated">Il n’existe aucun moyen d’annuler un élément de travail une fois qu’il a été mis en attente.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Timer-queue timers and registered wait operations also use the thread pool.</source>
          <target state="translated">Minuteries de la file d’attente du minuteur et les opérations d’attente inscrites également utilisent le pool de threads.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Their callback functions are queued to the thread pool.</source>
          <target state="translated">Leurs fonctions de rappel sont mis en attente dans le pool de threads.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>There is one thread pool per process.</source>
          <target state="translated">Il existe un pool de threads par processus.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the default size of the thread pool for a process depends on several factors, such as the size of the virtual address space.</source>
          <target state="translated">Dans <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph> et versions ultérieures, la taille par défaut du pool de threads d'un processus dépend de plusieurs facteurs, dont la taille de l'espace d'adressage virtuel.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>A process can call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> method to determine the number of threads.</source>
          <target state="translated">Un processus peut appeler la méthode <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> pour déterminer le nombre de threads.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The number of threads in the thread pool can be changed by using the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph> method.</source>
          <target state="translated">Le nombre de threads dans le pool de threads peut être modifié à l’aide de la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Each thread uses the default stack size and runs at the default priority.</source>
          <target state="translated">Chaque thread utilise la taille de pile par défaut et s’exécute à la priorité par défaut.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Unmanaged code that hosts the .NET Framework can change the size of the thread pool by using the <ph id="ph1">`CorSetMaxThreads`</ph> function, defined in the mscoree.h file.</source>
          <target state="translated">Code non managé qui héberge le .NET Framework peut modifier la taille du pool de threads à l’aide de la <ph id="ph1">`CorSetMaxThreads`</ph> fonction, définie dans le fichier mscoree.h.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">Le pool de threads fournit de nouveaux threads de travail ou threads de terminaison d’e/s à la demande jusqu'à ce qu’il atteigne le minimum pour chaque catégorie.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When a minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">Lorsqu’une valeur minimale est atteinte, le pool de threads peut créer des threads supplémentaires dans cette catégorie ou attendre que certaines tâches soient terminées.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys worker threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">Dans <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph> et versions ultérieures, le pool de threads crée et détruit des threads de travail pour optimiser le débit, qui est défini comme le nombre de tâches exécutées par unité de temps.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">Un nombre trop bas de threads peut ne pas permettre une utilisation optimale des ressources disponibles, tandis qu'un nombre trop élevé de threads peut augmenter les conflits de ressources.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">Quand la demande est faible, le nombre réel de threads du pool peut être inférieur aux valeurs minimales.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph> method to obtain these minimum values.</source>
          <target state="translated">Vous pouvez utiliser la méthode <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph> pour obtenir ces valeurs minimales.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> method to increase the minimum number of threads.</source>
          <target state="translated">Vous pouvez utiliser la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> méthode pour augmenter le nombre minimal de threads.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>However, unnecessarily increasing these values can cause performance problems.</source>
          <target state="translated">Toutefois, une augmentation non nécessaire de ces valeurs peut entraîner des problèmes de performances.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>If too many tasks start at the same time, all of them might appear to be slow.</source>
          <target state="translated">Si vous démarrez trop de tâches en même temps, celles-ci seront lentes.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>In most cases the thread pool will perform better with its own algorithm for allocating threads.</source>
          <target state="translated">Dans la plupart des cas, le pool de threads sera plus performant avec son propre algorithme d'allocation de threads.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>In the following example, the main application thread  queues a method named <ph id="ph1">`ThreadProc`</ph> to execute on a thread pool thread, sleeps for one second, and then exits.</source>
          <target state="translated">Dans l’exemple suivant, le thread d’application principal files d’attente une méthode nommée <ph id="ph1">`ThreadProc`</ph> à exécuter sur un thread de pool de threads, se met en veille pour une seconde, puis se ferme.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The <ph id="ph1">`ThreadProc`</ph> method simply displays a message.</source>
          <target state="translated">Le <ph id="ph1">`ThreadProc`</ph> méthode affiche simplement un message.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>If you comment out the call to the <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> method, the main thread exits before         method runs on the thread pool thread.</source>
          <target state="translated">Si vous commentez l’appel à la <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> (méthode), le thread principal s’arrête avant la méthode s’exécute sur le thread de pool de threads.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The thread pool uses background         threads, which do not keep the application running if all foreground threads have terminated.</source>
          <target state="translated">Le pool de threads utilise des threads d’arrière-plan qui arrêtent l’application en cours d’exécution si tous les threads de premier plan sont terminés.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>(This         is a simple example of a race condition.)</source>
          <target state="translated">(Ceci est un exemple simple d’une condition de concurrence.)</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>This type is thread safe.</source>
          <target state="translated">Ce type est thread-safe.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Binds an operating system handle to the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</source>
          <target state="translated">Lie un handle de système d'exploitation à <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> that holds the handle.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> qui contient le handle.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>The handle must have been opened for overlapped I/O on the unmanaged side.</source>
          <target state="translated">Il faut que le handle ait été ouvert pour des E/S avec chevauchement du côté non managé.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>Binds an operating system handle to the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</source>
          <target state="translated">Lie un handle de système d'exploitation à <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle is bound; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le handle est lié ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">L'appelant n'a pas l'autorisation requise.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>for the ability to call unmanaged code.</source>
          <target state="translated">pour avoir la possibilité d’appeler du code non managé.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> that holds the operating system handle.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> qui contient le handle du système d'exploitation.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>The handle must have been opened for overlapped I/O on the unmanaged side.</source>
          <target state="translated">Il faut que le handle ait été ouvert pour des E/S avec chevauchement du côté non managé.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>Binds an operating system handle to the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</source>
          <target state="translated">Lie un handle de système d'exploitation à <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle is bound; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le handle est lié ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>The <ph id="ph1">`osHandle`</ph> parameter should be a <ph id="ph2">&lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</ph>, which derives from the abstract <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class.</source>
          <target state="translated">Le <ph id="ph1">`osHandle`</ph> le paramètre doit être un <ph id="ph2">&lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</ph>, qui dérive de l’abstraite <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;paramref name="osHandle" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="osHandle" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>for the ability to call unmanaged code.</source>
          <target state="translated">pour avoir la possibilité d’appeler du code non managé.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>The number of available worker threads.</source>
          <target state="translated">Nombre de threads de travail disponibles.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>The number of available asynchronous I/O threads.</source>
          <target state="translated">Nombre de threads d'E/S asynchrones disponibles.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>Retrieves the difference between the maximum number of thread pool threads returned by the <ph id="ph1">&lt;see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /&gt;</ph> method, and the number currently active.</source>
          <target state="translated">Récupère la différence entre le nombre maximal de threads du pool retourné par la méthode <ph id="ph1">&lt;see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /&gt;</ph> et le nombre actuel de threads actifs.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>When <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</ph> returns, the variable specified by <ph id="ph2">`workerThreads`</ph> contains the number of additional worker threads that can be started, and the variable specified by <ph id="ph3">`completionPortThreads`</ph> contains the number of additional asynchronous I/O threads that can be started.</source>
          <target state="translated">Lorsque <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</ph> est retournée, la variable spécifiée par <ph id="ph2">`workerThreads`</ph> contient le nombre de threads de travail supplémentaire qui peuvent être démarrés et la variable spécifiée par <ph id="ph3">`completionPortThreads`</ph> contient le nombre de threads d’e/s asynchrones qui peuvent être a démarré.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>If there are no available threads, additional thread pool requests remain queued until thread pool threads become available.</source>
          <target state="translated">S’il n’y a pas de threads disponibles, les demandes de pool de thread supplémentaire restent en file d’attente jusqu'à ce que les threads du pool soient disponibles.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>The following example displays the number of worker threads and I/O threads available when a simple app is started.</source>
          <target state="translated">L’exemple suivant affiche le nombre de threads de travail et les threads d’e/s disponibles au démarrage d’une application simple.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>The maximum number of worker threads in the thread pool.</source>
          <target state="translated">Nombre maximal de threads de travail dans le pool de threads.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>The maximum number of asynchronous I/O threads in the thread pool.</source>
          <target state="translated">Nombre maximal de threads d'E/S asynchrones dans le pool de threads.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>Retrieves the number of requests to the thread pool that can be active concurrently.</source>
          <target state="translated">Récupère le nombre de demandes au pool de threads pouvant être simultanément actives.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>All requests above that number remain queued until thread pool threads become available.</source>
          <target state="translated">Toutes les demandes excédant ce nombre restent dans la file d'attente jusqu'à ce que des threads du pool soient disponibles.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>When <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> returns, the variable specified by <ph id="ph2">`workerThreads`</ph> contains the maximum number of worker threads allowed in the thread pool, and the variable specified by <ph id="ph3">`completionPortThreads`</ph> contains the maximum number of asynchronous I/O threads allowed in the thread pool.</source>
          <target state="translated">Lorsque <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> est retournée, la variable spécifiée par <ph id="ph2">`workerThreads`</ph> contient le nombre maximal de threads de travail autorisés dans le pool de threads et la variable spécifiée par <ph id="ph3">`completionPortThreads`</ph> contient le nombre maximal de threads d’e/s asynchrones autorisés dans les pool de threads.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</ph> method to determine the actual number of threads in the thread pool at any given time.</source>
          <target state="translated">Vous pouvez utiliser la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</ph> méthode pour déterminer le nombre réel de threads dans le pool de threads à un moment donné.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph> to set the maximum number of worker threads and asynchronous I/O threads in the thread pool.</source>
          <target state="translated">Vous pouvez utiliser la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph> pour définir le nombre maximal de threads de travail et les threads d’e/s asynchrones dans le pool de threads.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>You can queue as many thread pool requests as system memory allows.</source>
          <target state="translated">Vous pouvez en file d’attente que plusieurs demandes de pool de threads que la mémoire système.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>If there are more requests than thread pool threads, the additional requests remain queued until thread pool threads become available.</source>
          <target state="translated">S’il y a plus de requêtes que les threads du pool, les demandes supplémentaires restent en file d’attente jusqu'à ce que les threads du pool soient disponibles.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>The following code example shows how to retrieve a count of the maximum and available number of threads in the thread pool.</source>
          <target state="translated">L’exemple de code suivant montre comment récupérer un nombre du nombre de threads dans le pool de threads disponible et maximal.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>A work item is queued that uses <ph id="ph1">`FileStream`</ph> to asynchronously write to two files.</source>
          <target state="translated">Un élément de travail est en attente qui utilise <ph id="ph1">`FileStream`</ph> écrire de façon asynchrone à deux fichiers.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>The callback methods are timed to overlap.</source>
          <target state="translated">Les méthodes de rappel sont programmées pour se chevaucher.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>A worker thread handles the work item and, depending on the speed and number of processors on the computer, one or two completion port threads handle the write operations.</source>
          <target state="translated">Un thread de travail gère l’élément de travail et, selon la vitesse et le nombre de processeurs sur l’ordinateur, un ou deux threads de port de terminaison gèrent les opérations d’écriture.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.</source>
          <target state="translated">Lorsque cette méthode est retournée, contient le nombre minimal de threads de travail que le pool de threads crée à la demande.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.</source>
          <target state="translated">Lorsque cette méthode est retournée, contient le nombre minimal de threads d'E/S asynchrones que le pool de threads crée à la demande.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</source>
          <target state="translated">Récupère le nombre minimal de threads que le pool de threads crée à la demande, au fur et à mesure que de nouvelles requêtes sont effectuées, avant de basculer sur un algorithme pour la gestion de la création et de la suppression des threads.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">Le pool de threads fournit de nouveaux threads de travail ou threads de terminaison d’e/s à la demande jusqu'à ce qu’il atteigne le minimum pour chaque catégorie.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>By default, the minimum number of threads is set to the number of processors on a system.</source>
          <target state="translated">Par défaut, le nombre minimal de threads est défini pour le nombre de processeurs sur un système.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">Lorsque la valeur minimale est atteinte, le pool de threads peut créer des threads supplémentaires dans cette catégorie ou attendre que certaines tâches soient terminées.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">Compter les <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, le pool de threads crée et détruit des threads pour optimiser le débit, qui est défini comme le nombre de tâches exécutées par unité de temps.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">Un nombre trop bas de threads peut ne pas permettre une utilisation optimale des ressources disponibles, tandis qu'un nombre trop élevé de threads peut augmenter les conflits de ressources.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">Quand la demande est faible, le nombre réel de threads du pool peut être inférieur aux valeurs minimales.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</source>
          <target state="translated">L’exemple suivant définit le nombre minimal de threads de travail à quatre et conserve la valeur d’origine pour le nombre minimal de threads de terminaison d’e/s asynchrones.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Queues a method for execution.</source>
          <target state="translated">Place une méthode en file d'attente pour exécution.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">La méthode s'exécute lorsqu'un thread du pool devient disponible.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> that represents the method to be executed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> qui représente la méthode à exécuter.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Queues a method for execution.</source>
          <target state="translated">Place une méthode en file d'attente pour exécution.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">La méthode s'exécute lorsqu'un thread du pool devient disponible.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the method is successfully queued; <ph id="ph2">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> is thrown if the work item could not be queued.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la méthode est placée en file d'attente avec succès ; <ph id="ph2">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> est levé si l'élément de travail n'a pas pu être placé en file d'attente.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>You can place data required by the queued method in the instance fields of the class in which the method is defined, or you can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</ph> overload that accepts an object containing the necessary data.</source>
          <target state="translated">Vous pouvez placer les données requises par la méthode en file d’attente dans les champs d’instance de la classe dans laquelle elle est définie, ou vous pouvez utiliser la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</ph> surcharge qui accepte un objet qui contient les données nécessaires.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Visual Basic users can omit the <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>.</source>
          <target state="translated">Les utilisateurs de Visual Basic peuvent omettre la <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> constructeur et utiliser simplement la <ph id="ph2">`AddressOf`</ph> opérateur lors du passage de la méthode de rappel à <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic appelle automatiquement le constructeur délégué approprié.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Version Information</source>
          <target state="translated">Informations sur la version</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>In the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method.</source>
          <target state="translated">Dans le .NET Framework version 2.0, le <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> valeur de propriété est propagée aux threads de travail en file d’attente à l’aide de la <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">Dans les versions antérieures, les informations du principal ne sont pas propagées.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29&gt;</ph> method overload to queue a task, which is represented by the <ph id="ph2">`ThreadProc`</ph> method, to execute when a thread becomes available.</source>
          <target state="translated">L’exemple suivant utilise le <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29&gt;</ph> la surcharge de méthode en file d’attente une tâche, qui est représentée par le <ph id="ph2">`ThreadProc`</ph> (méthode), à exécuter lorsqu’un thread devient disponible.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>No task information is supplied with this overload.</source>
          <target state="translated">Aucune information de tâche n’est fournie avec cette surcharge.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Therefore, the information that is available to the <ph id="ph1">`ThreadProc`</ph> method is limited to the object the method belongs to.</source>
          <target state="translated">Par conséquent, les informations qui sont disponibles pour le <ph id="ph1">`ThreadProc`</ph> méthode est limitée à l’objet auquel appartient la méthode.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>The common language runtime (CLR) is hosted, and the host does not support this action.</source>
          <target state="translated">Le Common Language Runtime (CLR) est hébergé et l'hôte ne prend pas en charge cette action.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> representing the method to execute.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> représentant la méthode à exécuter.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>An object containing data to be used by the method.</source>
          <target state="translated">Objet contenant les données que la méthode doit utiliser.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Queues a method for execution, and specifies an object containing data to be used by the method.</source>
          <target state="translated">Place une méthode en file d'attente pour exécution et spécifie un objet contenant les données que la méthode doit utiliser.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">La méthode s'exécute lorsqu'un thread du pool devient disponible.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the method is successfully queued; <ph id="ph2">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> is thrown if the work item could not be queued.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la méthode est placée en file d'attente avec succès ; <ph id="ph2">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> est levé si l'élément de travail n'a pas pu être placé en file d'attente.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>If the callback method requires complex data, you can define a class to contain the data.</source>
          <target state="translated">Si la méthode de rappel demande des données complexes, vous pouvez définir une classe pour contenir les données.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Visual Basic users can omit the <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>.</source>
          <target state="translated">Les utilisateurs de Visual Basic peuvent omettre la <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> constructeur et utiliser simplement la <ph id="ph2">`AddressOf`</ph> opérateur lors du passage de la méthode de rappel à <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic appelle automatiquement le constructeur délégué approprié.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Version Information</source>
          <target state="translated">Informations sur la version</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>In the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method.</source>
          <target state="translated">Dans le .NET Framework version 2.0, le <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> valeur de propriété est propagée aux threads de travail en file d’attente à l’aide de la <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">Dans les versions antérieures, les informations du principal ne sont pas propagées.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The following example shows how to create an object that contains task information.</source>
          <target state="translated">L’exemple suivant montre comment créer un objet qui contient des informations sur la tâche.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.</source>
          <target state="translated">Il montre également comment passer cet objet à une tâche est en file d’attente pour l’exécution par le pool de threads.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The common language runtime (CLR) is hosted, and the host does not support this action.</source>
          <target state="translated">Le Common Language Runtime (CLR) est hébergé et l'hôte ne prend pas en charge cette action.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Registers a delegate that is waiting for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>.</source>
          <target state="translated">Inscrit un délégué en attente de <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> à inscrire.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Utilisez un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> autre que <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> à appeler quand le paramètre <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> est signalé.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">Objet passé au délégué.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Délai en millisecondes.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Si le paramètre <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> a la valeur zéro (0), la fonction teste l’état de l’objet et procède à un retour immédiat.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> a la valeur -1, le délai d’expiration de la fonction ne prend jamais fin.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour indiquer que le thread ne tient plus compte du paramètre <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> une fois le délégué appelé ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> pour indiquer que la minuterie est réinitialisée à chaque achèvement d’opération d’attente, jusqu’à annulation de l’inscription de l’attente.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 32-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">Inscrit un délégué pour attendre un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, en utilisant, pour indiquer le délai en millisecondes, un entier 32 bits signé.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> that encapsulates the native handle.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> qui encapsule le handle natif.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Lorsque vous avez terminé à l’aide de la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> qui est retourné par cette méthode, appelez sa <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> méthode pour libérer les références au handle d’attente.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Nous vous recommandons de toujours appeler la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> (méthode), même si vous spécifiez <ph id="ph2">`true`</ph> pour <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Le garbage collection fonctionne plus efficacement si vous appelez le <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> méthode plutôt qu’en fonction de finaliseur du handle d’attente inscrite.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method queues the specified delegate to the thread pool.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> méthode files d’attente le délégué spécifié pour le pool de threads.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>A worker thread will execute the delegate when one of the following occurs:</source>
          <target state="translated">Un thread de travail exécute le délégué lorsqu’une des actions suivantes se produit :</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The specified object is in the signaled state.</source>
          <target state="translated">L’objet spécifié est dans l’état signalé.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The time-out interval elapses.</source>
          <target state="translated">L’intervalle de délai d’attente est écoulé.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method checks the current state of the specified object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> méthode vérifie l’état actuel de l’objet spécifié <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">Si l’état de l’objet n’est pas signalé, la méthode inscrit une opération d’attente.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">L’opération d’attente est effectuée par un thread du pool de threads.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">Le délégué est exécuté par un thread de travail lorsque l’état de l’objet est signalé ou que l’intervalle de délai d’attente est écoulé.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">Si le <ph id="ph1">`timeOutInterval`</ph> paramètre n’est pas 0 (zéro) et la <ph id="ph2">`executeOnlyOnce`</ph> paramètre est <ph id="ph3">`false`</ph>, le minuteur est réinitialisé chaque fois que l’événement est signalé ou que l’intervalle de délai d’attente est écoulé.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">À l’aide un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> pour <ph id="ph2">`waitObject`</ph> ne fournit pas l’exclusion mutuelle des rappels, car l’API Win32 sous-jacente utilise la valeur par défaut <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> indicateur, de sorte que chaque rappel est distribué sur un thread distinct.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Instead of a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> with a maximum count of 1.</source>
          <target state="translated">Au lieu d’un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, utilisez un <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> avec un nombre maximal de 1.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>To cancel the wait operation, call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pour annuler l’opération d’attente, appelez le <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">Le thread d’attente utilise Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> fonction pour surveiller les opérations d’attente inscrite.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, you must duplicate the handle using the Win32 <ph id="ph2">`DuplicateHandle`</ph> function.</source>
          <target state="translated">Par conséquent, si vous devez utiliser le même handle de système d’exploitation natif dans plusieurs appels à <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, vous devez dupliquer le handle à l’aide de Win32 <ph id="ph2">`DuplicateHandle`</ph> (fonction).</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Note that you should not pulse an event object passed to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">Notez que vous ne devez pas impulsion passé à un objet d’événement <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, car le thread d’attente peut ne pas détecte que l’événement est signalé avant la réinitialisation.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">Avant de retourner, la fonction modifie l’état de certains types d’objets de synchronisation.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">Modification se produit uniquement pour l’objet dont l’état signalé a provoqué la condition d’attente être satisfait.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">Par exemple, le nombre d’un sémaphore est diminué d’une unité.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Version Information</source>
          <target state="translated">Informations sur la version</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
          <target state="translated">En commençant par le .NET Framework version 2.0, le <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> valeur de propriété est propagée aux threads de travail en file d’attente à l’aide de la <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">Dans les versions antérieures, les informations du principal ne sont pas propagées.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> est inférieur à -1.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> à inscrire.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Utilisez un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> autre que <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> à appeler quand le paramètre <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> est signalé.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The object passed to the delegate.</source>
          <target state="translated">Objet passé au délégué.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Délai en millisecondes.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Si le paramètre <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> a la valeur zéro (0), la fonction teste l’état de l’objet et procède à un retour immédiat.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> a la valeur -1, le délai d’expiration de la fonction ne prend jamais fin.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour indiquer que le thread ne tient plus compte du paramètre <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> une fois le délégué appelé ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> pour indiquer que la minuterie est réinitialisée à chaque achèvement d’opération d’attente, jusqu’à annulation de l’inscription de l’attente.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 64-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">Inscrit un délégué pour attendre un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, en utilisant, pour indiquer le délai en millisecondes, un entier 64 bits signé.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> that encapsulates the native handle.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> qui encapsule le handle natif.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Lorsque vous avez terminé à l’aide de la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> qui est retourné par cette méthode, appelez sa <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> méthode pour libérer les références au handle d’attente.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Nous vous recommandons de toujours appeler la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> (méthode), même si vous spécifiez <ph id="ph2">`true`</ph> pour <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Le garbage collection fonctionne plus efficacement si vous appelez le <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> méthode plutôt qu’en fonction de finaliseur du handle d’attente inscrite.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method queues the specified delegate to the thread pool.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> méthode files d’attente le délégué spécifié pour le pool de threads.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>A worker thread will execute the delegate when one of the following occurs:</source>
          <target state="translated">Un thread de travail exécute le délégué lorsqu’une des actions suivantes se produit :</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The specified object is in the signaled state.</source>
          <target state="translated">L’objet spécifié est dans l’état signalé.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The time-out interval elapses.</source>
          <target state="translated">L’intervalle de délai d’attente est écoulé.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method checks the current state of the specified object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> méthode vérifie l’état actuel de l’objet spécifié <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">Si l’état de l’objet n’est pas signalé, la méthode inscrit une opération d’attente.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">L’opération d’attente est effectuée par un thread du pool de threads.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">Le délégué est exécuté par un thread de travail lorsque l’état de l’objet est signalé ou que l’intervalle de délai d’attente est écoulé.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">Si le <ph id="ph1">`timeOutInterval`</ph> paramètre n’est pas 0 (zéro) et la <ph id="ph2">`executeOnlyOnce`</ph> paramètre est <ph id="ph3">`false`</ph>, le minuteur est réinitialisé chaque fois que l’événement est signalé ou que l’intervalle de délai d’attente est écoulé.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">À l’aide un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> pour <ph id="ph2">`waitObject`</ph> ne fournit pas l’exclusion mutuelle des rappels, car l’API Win32 sous-jacente utilise la valeur par défaut <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> indicateur, de sorte que chaque rappel est distribué sur un thread distinct.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Instead of a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> with a maximum count of 1.</source>
          <target state="translated">Au lieu d’un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, utilisez un <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> avec un nombre maximal de 1.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>To cancel the wait operation, call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pour annuler l’opération d’attente, appelez le <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">Le thread d’attente utilise Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> fonction pour surveiller les opérations d’attente inscrite.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, you must duplicate the handle using the Win32 <ph id="ph2">`DuplicateHandle`</ph> function.</source>
          <target state="translated">Par conséquent, si vous devez utiliser le même handle de système d’exploitation natif dans plusieurs appels à <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, vous devez dupliquer le handle à l’aide de Win32 <ph id="ph2">`DuplicateHandle`</ph> (fonction).</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Note that you should not pulse an event object passed to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">Notez que vous ne devez pas impulsion passé à un objet d’événement <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, car le thread d’attente peut ne pas détecte que l’événement est signalé avant la réinitialisation.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">Avant de retourner, la fonction modifie l’état de certains types d’objets de synchronisation.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">Modification se produit uniquement pour l’objet dont l’état signalé a provoqué la condition d’attente être satisfait.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">Par exemple, le nombre d’un sémaphore est diminué d’une unité.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Version Information</source>
          <target state="translated">Informations sur la version</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
          <target state="translated">En commençant par le .NET Framework version 2.0, le <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> valeur de propriété est propagée aux threads de travail en file d’attente à l’aide de la <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">Dans les versions antérieures, les informations du principal ne sont pas propagées.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> est inférieur à -1.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> à inscrire.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Utilisez un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> autre que <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> à appeler quand le paramètre <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> est signalé.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The object passed to the delegate.</source>
          <target state="translated">Objet passé au délégué.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The time-out represented by a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>.</source>
          <target state="translated">Délai représenté par <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Si le paramètre <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> a la valeur 0 (zéro), la fonction teste l’état de l’objet et procède à un retour immédiat.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> a la valeur -1, le délai d’expiration de la fonction ne prend jamais fin.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour indiquer que le thread ne tient plus compte du paramètre <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> une fois le délégué appelé ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> pour indiquer que la minuterie est réinitialisée à chaque achèvement d’opération d’attente, jusqu’à annulation de l’inscription de l’attente.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value for the time-out.</source>
          <target state="translated">Inscrit un délégué en attente de <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, en spécifiant une valeur <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> pour indiquer le délai.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> that encapsulates the native handle.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> qui encapsule le handle natif.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Lorsque vous avez terminé à l’aide de la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> qui est retourné par cette méthode, appelez sa <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> méthode pour libérer les références au handle d’attente.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Nous vous recommandons de toujours appeler la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> (méthode), même si vous spécifiez <ph id="ph2">`true`</ph> pour <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Le garbage collection fonctionne plus efficacement si vous appelez le <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> méthode plutôt qu’en fonction de finaliseur du handle d’attente inscrite.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method queues the specified delegate to the thread pool.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> méthode files d’attente le délégué spécifié pour le pool de threads.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>A worker thread will execute the delegate when one of the following occurs:</source>
          <target state="translated">Un thread de travail exécute le délégué lorsqu’une des actions suivantes se produit :</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The specified object is in the signaled state.</source>
          <target state="translated">L’objet spécifié est dans l’état signalé.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The time-out interval elapses.</source>
          <target state="translated">L’intervalle de délai d’attente est écoulé.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method checks the current state of the specified object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> méthode vérifie l’état actuel de l’objet spécifié <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">Si l’état de l’objet n’est pas signalé, la méthode inscrit une opération d’attente.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">L’opération d’attente est effectuée par un thread du pool de threads.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">Le délégué est exécuté par un thread de travail lorsque l’état de l’objet est signalé ou que l’intervalle de délai d’attente est écoulé.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">Si le <ph id="ph1">`timeOutInterval`</ph> paramètre n’est pas 0 (zéro) et la <ph id="ph2">`executeOnlyOnce`</ph> paramètre est <ph id="ph3">`false`</ph>, le minuteur est réinitialisé chaque fois que l’événement est signalé ou que l’intervalle de délai d’attente est écoulé.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">À l’aide un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> pour <ph id="ph2">`waitObject`</ph> ne fournit pas l’exclusion mutuelle des rappels, car l’API Win32 sous-jacente utilise la valeur par défaut <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> indicateur, de sorte que chaque rappel est distribué sur un thread distinct.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Instead of a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> with a maximum count of 1.</source>
          <target state="translated">Au lieu d’un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, utilisez un <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> avec un nombre maximal de 1.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>To cancel the wait operation, call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pour annuler l’opération d’attente, appelez le <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">Le thread d’attente utilise Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> fonction pour surveiller les opérations d’attente inscrite.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, you must duplicate the handle using the Win32 <ph id="ph2">`DuplicateHandle`</ph> function.</source>
          <target state="translated">Par conséquent, si vous devez utiliser le même handle de système d’exploitation natif dans plusieurs appels à <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, vous devez dupliquer le handle à l’aide de Win32 <ph id="ph2">`DuplicateHandle`</ph> (fonction).</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Note that you should not pulse an event object passed to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">Notez que vous ne devez pas impulsion passé à un objet d’événement <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, car le thread d’attente peut ne pas détecte que l’événement est signalé avant la réinitialisation.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">Avant de retourner, la fonction modifie l’état de certains types d’objets de synchronisation.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">Modification se produit uniquement pour l’objet dont l’état signalé a provoqué la condition d’attente être satisfait.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">Par exemple, le nombre d’un sémaphore est diminué d’une unité.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Version Information</source>
          <target state="translated">Informations sur la version</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
          <target state="translated">En commençant par le .NET Framework version 2.0, le <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> valeur de propriété est propagée aux threads de travail en file d’attente à l’aide de la <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">Dans les versions antérieures, les informations du principal ne sont pas propagées.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> est inférieur à -1.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> est supérieur à <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> à inscrire.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Utilisez un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> autre que <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> à appeler quand le paramètre <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> est signalé.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The object passed to the delegate.</source>
          <target state="translated">Objet passé au délégué.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Délai en millisecondes.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Si le paramètre <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> a la valeur zéro (0), la fonction teste l’état de l’objet et procède à un retour immédiat.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> a la valeur -1, le délai d’expiration de la fonction ne prend jamais fin.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour indiquer que le thread ne tient plus compte du paramètre <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> une fois le délégué appelé ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> pour indiquer que la minuterie est réinitialisée à chaque achèvement d’opération d’attente, jusqu’à annulation de l’inscription de l’attente.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 32-bit unsigned integer for the time-out in milliseconds.</source>
          <target state="translated">Inscrit un délégué pour attendre un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, en utilisant, pour indiquer le délai en millisecondes, un entier 32 bits non signé.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> that can be used to cancel the registered wait operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> pouvant être utilisé pour annuler l'opération d'attente inscrite.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Lorsque vous avez terminé à l’aide de la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> qui est retourné par cette méthode, appelez sa <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> méthode pour libérer les références au handle d’attente.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Nous vous recommandons de toujours appeler la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> (méthode), même si vous spécifiez <ph id="ph2">`true`</ph> pour <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Le garbage collection fonctionne plus efficacement si vous appelez le <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> méthode plutôt qu’en fonction de finaliseur du handle d’attente inscrite.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method queues the specified delegate to the thread pool.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> méthode files d’attente le délégué spécifié pour le pool de threads.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>A worker thread will execute the delegate when one of the following occurs:</source>
          <target state="translated">Un thread de travail exécute le délégué lorsqu’une des actions suivantes se produit :</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The specified object is in the signaled state.</source>
          <target state="translated">L’objet spécifié est dans l’état signalé.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The time-out interval elapses.</source>
          <target state="translated">L’intervalle de délai d’attente est écoulé.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method checks the current state of the specified object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> méthode vérifie l’état actuel de l’objet spécifié <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">Si l’état de l’objet n’est pas signalé, la méthode inscrit une opération d’attente.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">L’opération d’attente est effectuée par un thread du pool de threads.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">Le délégué est exécuté par un thread de travail lorsque l’état de l’objet est signalé ou que l’intervalle de délai d’attente est écoulé.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">Si le <ph id="ph1">`timeOutInterval`</ph> paramètre n’est pas 0 (zéro) et la <ph id="ph2">`executeOnlyOnce`</ph> paramètre est <ph id="ph3">`false`</ph>, le minuteur est réinitialisé chaque fois que l’événement est signalé ou que l’intervalle de délai d’attente est écoulé.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">À l’aide un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> pour <ph id="ph2">`waitObject`</ph> ne fournit pas l’exclusion mutuelle des rappels, car l’API Win32 sous-jacente utilise la valeur par défaut <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> indicateur, de sorte que chaque rappel est distribué sur un thread distinct.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Instead of a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> with a maximum count of 1.</source>
          <target state="translated">Au lieu d’un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, utilisez un <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> avec un nombre maximal de 1.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>To cancel the wait operation, call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pour annuler l’opération d’attente, appelez le <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">Le thread d’attente utilise Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> fonction pour surveiller les opérations d’attente inscrite.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, you must duplicate the handle using the Win32 <ph id="ph2">`DuplicateHandle`</ph> function.</source>
          <target state="translated">Par conséquent, si vous devez utiliser le même handle de système d’exploitation natif dans plusieurs appels à <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, vous devez dupliquer le handle à l’aide de Win32 <ph id="ph2">`DuplicateHandle`</ph> (fonction).</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Note that you should not pulse an event object passed to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">Notez que vous ne devez pas impulsion passé à un objet d’événement <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, car le thread d’attente peut ne pas détecte que l’événement est signalé avant la réinitialisation.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">Avant de retourner, la fonction modifie l’état de certains types d’objets de synchronisation.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">Modification se produit uniquement pour l’objet dont l’état signalé a provoqué la condition d’attente être satisfait.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">Par exemple, le nombre d’un sémaphore est diminué d’une unité.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Version Information</source>
          <target state="translated">Informations sur la version</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
          <target state="translated">En commençant par le .NET Framework version 2.0, le <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> valeur de propriété est propagée aux threads de travail en file d’attente à l’aide de la <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">Dans les versions antérieures, les informations du principal ne sont pas propagées.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method to execute a specified callback method when a specified wait handle is signaled.</source>
          <target state="translated">L’exemple suivant montre comment utiliser la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> méthode pour exécuter une méthode de rappel spécifiée lorsqu’un handle d’attente spécifié est signalé.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>In this example, the callback method is <ph id="ph1">`WaitProc`</ph>, and the wait handle is an <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</source>
          <target state="translated">Dans cet exemple, la méthode de rappel est <ph id="ph1">`WaitProc`</ph>, et le handle d’attente est un <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The example defines a <ph id="ph1">`TaskInfo`</ph> class to hold the information that is passed to the callback when it executes.</source>
          <target state="translated">L’exemple définit un <ph id="ph1">`TaskInfo`</ph> classe pour contenir les informations qui sont passées au rappel lors de son exécution.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The example creates a <ph id="ph1">`TaskInfo`</ph> object and assigns it some string data.</source>
          <target state="translated">L’exemple crée un <ph id="ph1">`TaskInfo`</ph> de l’objet et lui assigne des données de chaîne.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method is assigned to the <ph id="ph3">`Handle`</ph> field of the <ph id="ph4">`TaskInfo`</ph> object so that the callback method has access to the <ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> qui est retourné par la <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> est assigné à la méthode de la <ph id="ph3">`Handle`</ph> champ le <ph id="ph4">`TaskInfo`</ph> afin que la méthode de rappel a accès à l’objet le <ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>In addition to specifying <ph id="ph1">`TaskInfo`</ph> as the object to pass to the callback method, the call to the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method specifies the <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> that the task will wait for, a <ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate that represents the <ph id="ph5">`WaitProc`</ph> callback method, a one second time-out interval, and multiple callbacks.</source>
          <target state="translated">En plus de spécifier <ph id="ph1">`TaskInfo`</ph> en tant que l’objet à passer à la méthode de rappel, l’appel à la <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> méthode spécifie les <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> qui attend la tâche, un <ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> délégué qui représente le <ph id="ph5">`WaitProc`</ph> méthode de rappel, une intervalle du délai d’attente d’une seconde et plusieurs rappels.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>When the main thread signals the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> by calling its <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate is invoked.</source>
          <target state="translated">Lorsque le thread principal signale le <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> en appelant son <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> (méthode), la <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> délégué est appelé.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">`WaitProc`</ph> method tests <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> to determine whether a time-out occurred.</source>
          <target state="translated">Le <ph id="ph1">`WaitProc`</ph> méthode tests <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> pour déterminer si un délai d’attente s’est produite.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the callback was invoked because the wait handle was signaled, the <ph id="ph1">`WaitProc`</ph> method unregisters the <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>, stopping additional callbacks.</source>
          <target state="translated">Si le rappel a été appelé parce que le handle d’attente a été signalé, le <ph id="ph1">`WaitProc`</ph> annule l’inscription de la méthode la <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>, l’arrêt de rappels supplémentaires.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>In the case of a time-out, the task continues to wait.</source>
          <target state="translated">Dans le cas d’un délai d’attente, la tâche continue à attendre.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">`WaitProc`</ph> method ends by printing a message to the console.</source>
          <target state="translated">Le <ph id="ph1">`WaitProc`</ph> méthode se termine en imprimant un message sur la console.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> est inférieur à -1.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>The maximum number of worker threads in the thread pool.</source>
          <target state="translated">Nombre maximal de threads de travail dans le pool de threads.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>The maximum number of asynchronous I/O threads in the thread pool.</source>
          <target state="translated">Nombre maximal de threads d'E/S asynchrones dans le pool de threads.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>Sets the number of requests to the thread pool that can be active concurrently.</source>
          <target state="translated">Définit le nombre de demandes au pool de threads pouvant être simultanément actives.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>All requests above that number remain queued until thread pool threads become available.</source>
          <target state="translated">Toutes les demandes excédant ce nombre restent dans la file d'attente jusqu'à ce que des threads du pool soient disponibles.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the change is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la modification aboutit ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>You cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the number of processors on the computer.</source>
          <target state="translated">Impossible de définir le nombre maximal de threads de travail ou threads de terminaison d’e/s à un nombre plus petit que le nombre de processeurs sur l’ordinateur.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>To determine how many processors are present, retrieve the value of the <ph id="ph1">&lt;xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Pour déterminer le nombre de processeurs est présent, récupérer la valeur de la <ph id="ph1">&lt;xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>In addition, you cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the corresponding minimum number of worker threads or I/O completion threads.</source>
          <target state="translated">En outre, vous ne peut pas définir le nombre maximal de threads de travail ou des threads de terminaison d’e/s pour un nombre plus petit que le nombre minimal correspondant de threads de travail ou des threads de terminaison d’e/s.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>To determine the minimum thread pool size,  call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph> method.</source>
          <target state="translated">Pour déterminer la taille de pool de threads minimale, appelez le <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>If the common language runtime is hosted, for example by Internet Information Services (IIS) or SQL Server, the host can limit or prevent changes to the thread pool size.</source>
          <target state="translated">Si le common language runtime est hébergé, par exemple par Internet Information Services (IIS) ou SQL Server, l’hôte peut limiter ou empêcher la modification de la taille de pool de threads.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>Use caution when changing the maximum number of threads in the thread pool.</source>
          <target state="translated">Soyez prudent lorsque vous modifiez le nombre maximal de threads dans le pool de threads.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>While your code might benefit, the changes might have an adverse effect on code libraries you use.</source>
          <target state="translated">Pendant que votre code pourrait bénéficier, les modifications peuvent avoir un effet négatif sur les bibliothèques de code que vous utilisez.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>Setting the thread pool size too large can cause performance problems.</source>
          <target state="translated">Définition de la taille de pool de threads trop volumineux peut entraîner des problèmes de performances.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>If too many threads are executing at the same time, the task switching overhead becomes a significant factor.</source>
          <target state="translated">Si trop de threads sont exécutent en même temps, le basculement de la tâche devient surcharge un facteur important.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>for the ability to control threads.</source>
          <target state="translated">pour la possibilité de contrôler les threads.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>Permission value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></source>
          <target state="translated">Valeur d’autorisation : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>The minimum number of worker threads that the thread pool creates on demand.</source>
          <target state="translated">Nombre minimal de threads de travail que le pool de threads crée à la demande.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>The minimum number of asynchronous I/O threads that the thread pool creates on demand.</source>
          <target state="translated">Nombre minimal de threads d'E/S asynchrones que le pool de threads crée à la demande.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</source>
          <target state="translated">Définit le nombre minimal de threads que le pool de threads crée à la demande, au fur et à mesure que de nouvelles requêtes sont effectuées, avant de basculer sur un algorithme pour la gestion de la création et de la suppression des threads.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the change is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la modification aboutit ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">Le pool de threads fournit de nouveaux threads de travail ou threads de terminaison d’e/s à la demande jusqu'à ce qu’il atteigne le minimum pour chaque catégorie.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">Lorsque la valeur minimale est atteinte, le pool de threads peut créer des threads supplémentaires dans cette catégorie ou attendre que certaines tâches soient terminées.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">Compter les <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, le pool de threads crée et détruit des threads pour optimiser le débit, qui est défini comme le nombre de tâches exécutées par unité de temps.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">Un nombre trop bas de threads peut ne pas permettre une utilisation optimale des ressources disponibles, tandis qu'un nombre trop élevé de threads peut augmenter les conflits de ressources.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">Quand la demande est faible, le nombre réel de threads du pool peut être inférieur aux valeurs minimales.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>If you specify a negative number or a number larger than the maximum number of active thread pool threads (obtained using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph>), <ph id="ph2">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> returns <ph id="ph3">`false`</ph> and does not change either of the minimum values.</source>
          <target state="translated">Si vous spécifiez un nombre négatif ou un nombre plus grand que le nombre maximal de threads de pool de threads actifs (obtenu à l’aide de <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph>), <ph id="ph2">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> renvoie <ph id="ph3">`false`</ph> et ne change pas une des valeurs minimales.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>By default, the minimum number of threads is set to the number of processors on a system.</source>
          <target state="translated">Par défaut, le nombre minimal de threads est défini pour le nombre de processeurs sur un système.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> method to increase the minimum number ofthreads.</source>
          <target state="translated">Vous pouvez utiliser la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> méthode pour augmenter l’ofthreads nombre minimal.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>However, unnecessarily increasing these values can cause performance problems.</source>
          <target state="translated">Toutefois, une augmentation non nécessaire de ces valeurs peut entraîner des problèmes de performances.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>If too many tasks start at the same time, all of them might appear to be slow.</source>
          <target state="translated">Si vous démarrez trop de tâches en même temps, celles-ci seront lentes.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>In most cases, the thread pool will perform better with its own algorithm for allocating threads.</source>
          <target state="translated">Dans la plupart des cas, le pool de threads sera plus performant avec son propre algorithme d’allocation de threads.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Reducing the minimum to less than the number of processors can also hurt performance.</source>
          <target state="translated">Réduction de la valeur minimale à moins que le nombre de processeurs peut également dégrader les performances.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</source>
          <target state="translated">L’exemple suivant définit le nombre minimal de threads de travail à quatre et conserve la valeur d’origine pour le nombre minimal de threads de terminaison d’e/s asynchrones.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>for the ability to control threads.</source>
          <target state="translated">pour la possibilité de contrôler les threads.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Permission value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></source>
          <target state="translated">Valeur d’autorisation : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure to queue.</source>
          <target state="translated">Structure <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> à placer en file d'attente.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Queues an overlapped I/O operation for execution.</source>
          <target state="translated">Met en file d'attente l'exécution d'une opération d'E/S avec chevauchement.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation was successfully queued to an I/O completion port; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'opération a été mise en file d'attente dans un port de terminaison d'E/S ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>For information about using native Win32 overlapped I/O, see the <ph id="ph1">&lt;xref:System.Threading.Overlapped&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure, and the <ph id="ph3">`OVERLAPPED`</ph> structure in the Win32 Platform SDK.</source>
          <target state="translated">Pour plus d’informations sur l’aide de Win32 natif chevauchent d’e/s, consultez le <ph id="ph1">&lt;xref:System.Threading.Overlapped&gt;</ph> (classe), le <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure et le <ph id="ph3">`OVERLAPPED`</ph> structure dans le Kit de développement de plate-forme Win32.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Using the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A&gt;</ph> method could inadvertently open up a security hole.</source>
          <target state="translated">À l’aide de la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A&gt;</ph> méthode peut accidentellement ouvrir une faille de sécurité.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Sécurité d’accès du code base ses vérifications d’autorisations sur les autorisations de tous les appelants sur la pile.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A&gt;</ph>, the stack of the thread pool thread does not have the context of the actual callers.</source>
          <target state="translated">Lorsque le travail est en file d’attente sur un thread de pool de threads à l’aide <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A&gt;</ph>, la pile du thread du pool ne dispose pas du contexte des appelants réels.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Un code malveillant peut être en mesure d’exploiter ceci pour éviter les vérifications d’autorisations.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> that represents the delegate to invoke when a thread in the thread pool picks up the work item.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> représentant le délégué à appeler lorsqu'un thread du pool de threads sélectionne l'élément de travail.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The object that is passed to the delegate when serviced from the thread pool.</source>
          <target state="translated">Objet passé au délégué lors de son traitement dans le pool de threads.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Met le délégué spécifié en file d'attente dans le pool de threads, mais ne propage pas la pile d'appels vers le thread de travail.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the method succeeds; <ph id="ph2">&lt;see cref="T:System.OutOfMemoryException" /&gt;</ph> is thrown if the work item could not be queued.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la méthode est exécutée avec succès ; <ph id="ph2">&lt;see cref="T:System.OutOfMemoryException" /&gt;</ph> est levée si l'élément de travail n'a pas pu être placé en file d'attente.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Contrairement à la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> méthode <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph> ne propage pas la pile appelante vers le thread de travail.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">Cela permet au code de perdre la pile appelante et ainsi d’élever leurs privilèges de sécurité.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">À l’aide de <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph> peut accidentellement ouvrir une faille de sécurité.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Sécurité d’accès du code base ses vérifications d’autorisations sur les autorisations de tous les appelants sur la pile.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Lorsque le travail est en file d’attente sur un thread de pool de threads à l’aide <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph>, la pile du thread du pool n’aura pas le contexte des appelants réels.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Un code malveillant peut être en mesure d’exploiter ceci pour éviter les vérifications d’autorisations.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">L'appelant n'a pas l'autorisation requise.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>An out-of-memory condition was encountered.</source>
          <target state="translated">Une condition de mémoire insuffisante a été rencontrée.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The work item could not be queued.</source>
          <target state="translated">L'élément de travail n'a pas pu être placé en file d'attente.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, but does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Inscrit un délégué pour attendre un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, mais ne propage pas la pile appelante vers le thread de travail.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> à inscrire.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Utilisez un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> autre que <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Délégué à appeler quand le paramètre <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> est signalé.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">Objet passé au délégué.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Délai en millisecondes.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Si le paramètre <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> a la valeur zéro (0), la fonction teste l’état de l’objet et procède à un retour immédiat.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> a la valeur -1, le délai d’expiration de la fonction ne prend jamais fin.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour indiquer que le thread ne tient plus compte du paramètre <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> une fois le délégué appelé ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> pour indiquer que la minuterie est réinitialisée à chaque achèvement d’opération d’attente, jusqu’à annulation de l’inscription de l’attente.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, using a 32-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">Inscrit un délégué pour attendre un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, en utilisant, pour indiquer le délai en millisecondes, un entier signé 32 bits.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Cette méthode ne propage pas la pile appelante vers le thread de travail.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> object that can be used to cancel the registered wait operation.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> pouvant être utilisé pour annuler l'opération d'attente inscrite.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Contrairement à la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> méthode <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> ne propage pas la pile appelante vers le thread de travail.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">Cela permet au code de perdre la pile appelante et ainsi d’élever leurs privilèges de sécurité.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">À l’aide de <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> peut accidentellement ouvrir une faille de sécurité.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Sécurité d’accès du code base ses vérifications d’autorisations sur les autorisations de tous les appelants sur la pile.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Lorsque le travail est en file d’attente sur un thread de pool de threads à l’aide <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, la pile du thread du pool n’aura pas le contexte des appelants réels.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Un code malveillant peut être en mesure d’exploiter ceci pour éviter les vérifications d’autorisations.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">À l’aide un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> pour <ph id="ph2">`waitObject`</ph> ne fournit pas l’exclusion mutuelle des rappels, car l’API Win32 sous-jacente utilise la valeur par défaut <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> indicateur, de sorte que chaque rappel est distribué sur un thread distinct.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Lorsque vous avez terminé à l’aide de la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> qui est retourné par cette méthode, appelez sa <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> méthode pour libérer les références au handle d’attente.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Nous vous recommandons de toujours appeler la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> (méthode), même si vous spécifiez <ph id="ph2">`true`</ph> pour <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Le garbage collection fonctionne plus efficacement si vous appelez le <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> méthode plutôt qu’en fonction de finaliseur du handle d’attente inscrite.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> est inférieur à -1.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">L'appelant n'a pas l'autorisation requise.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> à inscrire.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Utilisez un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> autre que <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Délégué à appeler quand le paramètre <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> est signalé.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">Objet passé au délégué.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Délai en millisecondes.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Si le paramètre <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> a la valeur zéro (0), la fonction teste l’état de l’objet et procède à un retour immédiat.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> a la valeur -1, le délai d’expiration de la fonction ne prend jamais fin.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour indiquer que le thread ne tient plus compte du paramètre <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> une fois le délégué appelé ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> pour indiquer que la minuterie est réinitialisée à chaque achèvement d’opération d’attente, jusqu’à annulation de l’inscription de l’attente.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 64-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">Inscrit un délégué pour attendre un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, en utilisant, pour indiquer le délai en millisecondes, un entier 64 bits signé.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Cette méthode ne propage pas la pile appelante vers le thread de travail.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> object that can be used to cancel the registered wait operation.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> pouvant être utilisé pour annuler l'opération d'attente inscrite.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Contrairement à la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> méthode <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> ne propage pas la pile appelante vers le thread de travail.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">Cela permet au code de perdre la pile appelante et ainsi d’élever leurs privilèges de sécurité.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">À l’aide de <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> peut accidentellement ouvrir une faille de sécurité.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Sécurité d’accès du code base ses vérifications d’autorisations sur les autorisations de tous les appelants sur la pile.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Lorsque le travail est en file d’attente sur un thread de pool de threads à l’aide <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, la pile du thread du pool n’aura pas le contexte des appelants réels.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Un code malveillant peut être en mesure d’exploiter ceci pour éviter les vérifications d’autorisations.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">À l’aide un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> pour <ph id="ph2">`waitObject`</ph> ne fournit pas l’exclusion mutuelle des rappels, car l’API Win32 sous-jacente utilise la valeur par défaut <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> indicateur, de sorte que chaque rappel est distribué sur un thread distinct.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Lorsque vous avez terminé à l’aide de la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> qui est retourné par cette méthode, appelez sa <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> méthode pour libérer les références au handle d’attente.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Nous vous recommandons de toujours appeler la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> (méthode), même si vous spécifiez <ph id="ph2">`true`</ph> pour <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Le garbage collection fonctionne plus efficacement si vous appelez le <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> méthode plutôt qu’en fonction de finaliseur du handle d’attente inscrite.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> est inférieur à -1.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">L'appelant n'a pas l'autorisation requise.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> à inscrire.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Utilisez un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> autre que <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Délégué à appeler quand le paramètre <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> est signalé.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">Objet passé au délégué.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The time-out represented by a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>.</source>
          <target state="translated">Délai représenté par <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Si le paramètre <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> a la valeur 0 (zéro), la fonction teste l’état de l’objet et procède à un retour immédiat.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> a la valeur -1, le délai d’expiration de la fonction ne prend jamais fin.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour indiquer que le thread ne tient plus compte du paramètre <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> une fois le délégué appelé ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> pour indiquer que la minuterie est réinitialisée à chaque achèvement d’opération d’attente, jusqu’à annulation de l’inscription de l’attente.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value for the time-out. This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Inscrit un délégué en attente de <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, en spécifiant une valeur <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> pour indiquer le délai. Cette méthode ne propage pas la pile appelante vers le thread de travail.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> object that can be used to cancel the registered wait operation.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> pouvant être utilisé pour annuler l'opération d'attente inscrite.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Contrairement à la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> méthode <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> ne propage pas la pile appelante vers le thread de travail.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">Cela permet au code de perdre la pile appelante et ainsi d’élever leurs privilèges de sécurité.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">À l’aide de <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> peut accidentellement ouvrir une faille de sécurité.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Sécurité d’accès du code base ses vérifications d’autorisations sur les autorisations de tous les appelants sur la pile.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Lorsque le travail est en file d’attente sur un thread de pool de threads à l’aide <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, la pile du thread du pool n’aura pas le contexte des appelants réels.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Un code malveillant peut être en mesure d’exploiter ceci pour éviter les vérifications d’autorisations.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">À l’aide un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> pour <ph id="ph2">`waitObject`</ph> ne fournit pas l’exclusion mutuelle des rappels, car l’API Win32 sous-jacente utilise la valeur par défaut <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> indicateur, de sorte que chaque rappel est distribué sur un thread distinct.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Lorsque vous avez terminé à l’aide de la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> qui est retourné par cette méthode, appelez sa <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> méthode pour libérer les références au handle d’attente.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Nous vous recommandons de toujours appeler la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> (méthode), même si vous spécifiez <ph id="ph2">`true`</ph> pour <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Le garbage collection fonctionne plus efficacement si vous appelez le <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> méthode plutôt qu’en fonction de finaliseur du handle d’attente inscrite.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> est inférieur à -1.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> est supérieur à <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">L'appelant n'a pas l'autorisation requise.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> à inscrire.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Utilisez un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> autre que <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Délégué à appeler quand le paramètre <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> est signalé.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">Objet passé au délégué.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Délai en millisecondes.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Si le paramètre <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> a la valeur zéro (0), la fonction teste l’état de l’objet et procède à un retour immédiat.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> a la valeur -1, le délai d’expiration de la fonction ne prend jamais fin.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour indiquer que le thread ne tient plus compte du paramètre <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> une fois le délégué appelé ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> pour indiquer que la minuterie est réinitialisée à chaque achèvement d’opération d’attente, jusqu’à annulation de l’inscription de l’attente.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 32-bit unsigned integer for the time-out in milliseconds.</source>
          <target state="translated">Inscrit un délégué pour attendre un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, en utilisant, pour indiquer le délai en millisecondes, un entier 32 bits non signé.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Cette méthode ne propage pas la pile appelante vers le thread de travail.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> object that can be used to cancel the registered wait operation.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> pouvant être utilisé pour annuler l'opération d'attente inscrite.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Contrairement à la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> méthode <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> ne propage pas la pile appelante vers le thread de travail.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">Cela permet au code de perdre la pile appelante et ainsi d’élever leurs privilèges de sécurité.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">À l’aide de <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> peut accidentellement ouvrir une faille de sécurité.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Sécurité d’accès du code base ses vérifications d’autorisations sur les autorisations de tous les appelants sur la pile.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Lorsque le travail est en file d’attente sur un thread de pool de threads à l’aide <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, la pile du thread du pool n’aura pas le contexte des appelants réels.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Un code malveillant peut être en mesure d’exploiter ceci pour éviter les vérifications d’autorisations.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">À l’aide un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> pour <ph id="ph2">`waitObject`</ph> ne fournit pas l’exclusion mutuelle des rappels, car l’API Win32 sous-jacente utilise la valeur par défaut <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> indicateur, de sorte que chaque rappel est distribué sur un thread distinct.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Lorsque vous avez terminé à l’aide de la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> qui est retourné par cette méthode, appelez sa <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> méthode pour libérer les références au handle d’attente.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Nous vous recommandons de toujours appeler la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> (méthode), même si vous spécifiez <ph id="ph2">`true`</ph> pour <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Le garbage collection fonctionne plus efficacement si vous appelez le <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> méthode plutôt qu’en fonction de finaliseur du handle d’attente inscrite.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">L'appelant n'a pas l'autorisation requise.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>