<Type Name="ThreadAbortException" FullName="System.Threading.ThreadAbortException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="642bdf298b5600df673cba5ad753a6954831737b" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39988736" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ThreadAbortException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ThreadAbortException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadAbortException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ThreadAbortException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadAbortException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type ThreadAbortException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Exception levée lors d'un appel adressé à la méthode <see cref="M:System.Threading.Thread.Abort(System.Object)" />. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’un appel est effectué à la <xref:System.Threading.Thread.Abort%2A> méthode pour détruire un thread, le common language runtime lève un <xref:System.Threading.ThreadAbortException>. <xref:System.Threading.ThreadAbortException> est une exception spéciale qui peut être interceptée, mais il sera automatiquement déclenchée à nouveau à la fin de la `catch` bloc. Lorsque cette exception est levée, le runtime exécute tous les `finally` blocs avant de mettre fin au thread. Étant donné que le thread peut effectuer un calcul d’unbounded le `finally` blocs ou appel <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=nameWithType> pour annuler l’abandon, il n’existe aucune garantie que le thread prenne fin. Si vous souhaitez attendre que le thread abandonné a terminé, vous pouvez appeler la <xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType> (méthode). <xref:System.Threading.Thread.Join%2A> est un appel bloquant qui ne retourne pas jusqu'à ce que le thread en fait s’arrête.  
  
> [!NOTE]
>  Lorsque le common language runtime (CLR) s’arrête threadsafter arrière-plan tous les threads de premier plan dans un fichier exécutable managé ont pris fin, il n’utilise pas <xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType>. Par conséquent, vous ne pouvez pas utiliser <xref:System.Threading.ThreadAbortException> pour détecter quand les threads d’arrière-plan sont terminés par le CLR.  
  
 <xref:System.Threading.ThreadAbortException> utilise le HRESULT COR_E_THREADABORTED, dont la valeur est 0 x 80131530.  
  
> [!NOTE]
>  La valeur de l’élément hérité <xref:System.Exception.Data%2A> propriété est toujours `null`.  
  
   
  
## Examples  
 L’exemple suivant montre l’abandon d’un thread. Le thread qui reçoit le `ThreadAbortException` utilise le <xref:System.Threading.Thread.ResetAbort%2A> méthode pour annuler la demande d’abandon et de continuer à s’exécuter.  
  
 [!code-cpp[ThreadAbEx#1](~/samples/snippets/cpp/VS_Snippets_CLR/ThreadAbEx/CPP/threadabex.cpp#1)]
 [!code-csharp[ThreadAbEx#1](~/samples/snippets/csharp/VS_Snippets_CLR/ThreadAbEx/CS/threadabex.cs#1)]
 [!code-vb[ThreadAbEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ThreadAbEx/VB/threadabex.vb#1)]  
  
 Ce code génère la sortie suivante :  
  
```  
Thread - working.  
Main - aborting my thread.  
Thread - caught ThreadAbortException - resetting.  
Exception message: Thread was being aborted.  
Thread - still alive and working.  
Thread - finished working.  
Main ending.  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="M:System.Threading.Thread.Abort(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName="ExceptionState">
      <MemberSignature Language="C#" Value="public object ExceptionState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ExceptionState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadAbortException.ExceptionState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExceptionState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ExceptionState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionState : obj" Usage="System.Threading.ThreadAbortException.ExceptionState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet contenant des informations spécifiques de l'application et liées à l'abandon de thread.</summary>
        <value>Objet contenant des informations spécifiques de l'application.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’objet retourné par cette propriété est spécifiée via la `stateInfo` paramètre de la <xref:System.Threading.Thread.Abort%2A> (méthode). Le contenu exact et l’utilisation de cet objet est défini ; application Il est généralement utilisé pour transmettre des informations qui est significatives pour le thread en cours d’abandon.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment transmettre des informations à un thread qui est en cours d’abandon.  
  
 [!code-cpp[System.Threading.Thread.Abort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Abort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Abort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Thread.CurrentThread" />
        <altmember cref="M:System.Threading.Thread.Abort(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>