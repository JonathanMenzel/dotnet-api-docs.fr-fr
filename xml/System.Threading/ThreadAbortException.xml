<Type Name="ThreadAbortException" FullName="System.Threading.ThreadAbortException">
  <TypeSignature Language="C#" Value="public sealed class ThreadAbortException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ThreadAbortException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadAbortException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ThreadAbortException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadAbortException sealed : SystemException" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e95e9-101">Exception levée lors d'un appel adressé à la méthode <see cref="M:System.Threading.Thread.Abort(System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="e95e9-101">The exception that is thrown when a call is made to the <see cref="M:System.Threading.Thread.Abort(System.Object)" /> method.</span></span> <span data-ttu-id="e95e9-102">Cette classe ne peut pas être héritée.</span><span class="sxs-lookup"><span data-stu-id="e95e9-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e95e9-103">Lorsqu’un appel est effectué à la <xref:System.Threading.Thread.Abort%2A> méthode pour détruire un thread, le common language runtime lève une <xref:System.Threading.ThreadAbortException>.</span><span class="sxs-lookup"><span data-stu-id="e95e9-103">When a call is made to the <xref:System.Threading.Thread.Abort%2A> method to destroy a thread, the common language runtime throws a <xref:System.Threading.ThreadAbortException>.</span></span> <span data-ttu-id="e95e9-104"><xref:System.Threading.ThreadAbortException> est une exception spéciale qui peut être interceptée, mais il sera automatiquement déclenchée à nouveau à la fin de la `catch` bloc.</span><span class="sxs-lookup"><span data-stu-id="e95e9-104"><xref:System.Threading.ThreadAbortException> is a special exception that can be caught, but it will automatically be raised again at the end of the `catch` block.</span></span> <span data-ttu-id="e95e9-105">Lorsque cette exception est levée, le runtime exécute tous les `finally` blocs avant de mettre fin au thread.</span><span class="sxs-lookup"><span data-stu-id="e95e9-105">When this exception is raised, the runtime executes all the `finally` blocks before ending the thread.</span></span> <span data-ttu-id="e95e9-106">Étant donné que le thread peut réaliser un nombre illimité de calculs les `finally` blocs ou appelez <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=nameWithType> pour annuler l’abandon, il n’existe aucune garantie que le thread prenne fin.</span><span class="sxs-lookup"><span data-stu-id="e95e9-106">Because the thread can do an unbounded computation in the `finally` blocks or call <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=nameWithType> to cancel the abort, there is no guarantee that the thread will ever end.</span></span> <span data-ttu-id="e95e9-107">Si vous souhaitez attendre que le thread interrompu soit terminé, vous pouvez appeler la <xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e95e9-107">If you want to wait until the aborted thread has ended, you can call the <xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e95e9-108"><xref:System.Threading.Thread.Join%2A> est un appel bloquant qui ne retourne pas jusqu'à ce que le thread arrête l’exécution.</span><span class="sxs-lookup"><span data-stu-id="e95e9-108"><xref:System.Threading.Thread.Join%2A> is a blocking call that does not return until the thread actually stops executing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e95e9-109">Lorsque le common language runtime (CLR) s’arrête threadsafter arrière-plan tous les threads de premier plan dans un fichier exécutable managé ont pris fin, il n’utilise pas <xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e95e9-109">When the common language runtime (CLR) stops background threadsafter all foreground threads in a managed executable have ended, it does not use <xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e95e9-110">Par conséquent, vous ne pouvez pas utiliser <xref:System.Threading.ThreadAbortException> détecter quand les threads d’arrière-plan sont terminés par le CLR.</span><span class="sxs-lookup"><span data-stu-id="e95e9-110">Therefore, you cannot use <xref:System.Threading.ThreadAbortException> to detect when background threads are being terminated by the CLR.</span></span>  
  
 <span data-ttu-id="e95e9-111"><xref:System.Threading.ThreadAbortException> utilise le HRESULT COR_E_THREADABORTED dont la valeur est 0 x 80131530.</span><span class="sxs-lookup"><span data-stu-id="e95e9-111"><xref:System.Threading.ThreadAbortException> uses the HRESULT COR_E_THREADABORTED, which has the value 0x80131530.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e95e9-112">La valeur de l’élément hérité <xref:System.Exception.Data%2A> propriété est toujours `null`.</span><span class="sxs-lookup"><span data-stu-id="e95e9-112">The value of the inherited <xref:System.Exception.Data%2A> property is always `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e95e9-113">L’exemple suivant montre l’abandon d’un thread.</span><span class="sxs-lookup"><span data-stu-id="e95e9-113">The following example demonstrates aborting a thread.</span></span> <span data-ttu-id="e95e9-114">Le thread qui reçoit le `ThreadAbortException` utilise le <xref:System.Threading.Thread.ResetAbort%2A> méthode pour annuler la demande d’abandon et poursuivre l’exécution.</span><span class="sxs-lookup"><span data-stu-id="e95e9-114">The thread that receives the `ThreadAbortException` uses the <xref:System.Threading.Thread.ResetAbort%2A> method to cancel the abort request and continue executing.</span></span>  
  
 [!code-cpp[ThreadAbEx#1](~/samples/snippets/cpp/VS_Snippets_CLR/ThreadAbEx/CPP/threadabex.cpp#1)]
 [!code-csharp[ThreadAbEx#1](~/samples/snippets/csharp/VS_Snippets_CLR/ThreadAbEx/CS/threadabex.cs#1)]
 [!code-vb[ThreadAbEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ThreadAbEx/VB/threadabex.vb#1)]  
  
 <span data-ttu-id="e95e9-115">Ce code génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="e95e9-115">This code produces the following output:</span></span>  
  
```  
Thread - working.  
Main - aborting my thread.  
Thread - caught ThreadAbortException - resetting.  
Exception message: Thread was being aborted.  
Thread - still alive and working.  
Thread - finished working.  
Main ending.  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="M:System.Threading.Thread.Abort(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName="ExceptionState">
      <MemberSignature Language="C#" Value="public object ExceptionState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ExceptionState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadAbortException.ExceptionState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExceptionState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ExceptionState { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e95e9-116">Obtient un objet contenant des informations spécifiques de l'application et liées à l'abandon de thread.</span><span class="sxs-lookup"><span data-stu-id="e95e9-116">Gets an object that contains application-specific information related to the thread abort.</span></span></summary>
        <value><span data-ttu-id="e95e9-117">Objet contenant des informations spécifiques de l'application.</span><span class="sxs-lookup"><span data-stu-id="e95e9-117">An object containing application-specific information.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e95e9-118">L’objet retourné par cette propriété est spécifiée via la `stateInfo` paramètre de la <xref:System.Threading.Thread.Abort%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e95e9-118">The object returned by this property is specified through the `stateInfo` parameter of the <xref:System.Threading.Thread.Abort%2A> method.</span></span> <span data-ttu-id="e95e9-119">Le contenu exact et l’utilisation de cet objet est l’application définie ; Il est généralement utilisé pour transmettre des informations qui est significatives pour le thread en cours d’abandon.</span><span class="sxs-lookup"><span data-stu-id="e95e9-119">The exact content and usage of this object is application defined; it is typically used to convey information that is meaningful to the thread being aborted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e95e9-120">L’exemple de code suivant montre comment passer des informations à un thread en cours d’abandon.</span><span class="sxs-lookup"><span data-stu-id="e95e9-120">The following code example shows how to pass information to a thread that is being aborted.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Abort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Abort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Abort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Thread.CurrentThread" />
        <altmember cref="M:System.Threading.Thread.Abort(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>