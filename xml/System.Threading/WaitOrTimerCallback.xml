<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b1a2dd4ad85878912bdbddf89cd8d606de47b160" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36605449" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">An object containing information to be used by the callback method each time it executes.</param>
    <param name="timedOut">
      <see langword="true" /> if the <see cref="T:System.Threading.WaitHandle" /> timed out; <see langword="false" /> if it was signaled.</param>
    <summary>Represents a method to be called when a <see cref="T:System.Threading.WaitHandle" /> is signaled or times out.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitOrTimerCallback> représente une méthode de rappel à exécuter lorsqu’un handle d’attente inscrit expire ou est signalé. Créer le délégué en passant votre méthode de rappel à le <xref:System.Threading.WaitOrTimerCallback> constructeur. Votre méthode doit avoir la signature illustrée ici.  
  
 Créez le handle d’attente inscrit en passant le <xref:System.Threading.WaitOrTimerCallback> délégué et un <xref:System.Threading.WaitHandle> à <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>. Votre méthode de rappel s’exécute chaque fois que le <xref:System.Threading.WaitHandle> expire ou est signalé.  
  
  
> [!NOTE]
>  Les utilisateurs de Visual Basic peuvent omettre la <xref:System.Threading.WaitOrTimerCallback> constructeur et utiliser simplement la `AddressOf` opérateur lors du passage de la méthode de rappel à <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>. Visual Basic appelle automatiquement le constructeur délégué approprié.  
  
 Si vous souhaitez passer des informations à votre méthode de rappel, créez un objet qui contient les informations nécessaires et passez-le à <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> lorsque vous créez le handle d’attente inscrite. Chaque fois que votre méthode de rappel s’exécute, le `state` paramètre contient cet objet.  
  
 Pour plus d’informations sur l’utilisation des méthodes de rappel pour synchroniser les threads du pool, consultez [le Pool de threads gérés](~/docs/standard/threading/the-managed-thread-pool.md).  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Threading.WaitOrTimerCallback> délégué pour représenter une méthode de rappel qui est exécutée lorsqu’un handle d’attente est signalé.  
  
 L’exemple montre également comment utiliser le <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode pour exécuter une méthode de rappel spécifiée lorsqu’un handle d’attente spécifié est signalé. Dans cet exemple, la méthode de rappel est `WaitProc` et le handle d’attente est un <xref:System.Threading.AutoResetEvent>.  
  
 L’exemple définit un `TaskInfo` classe pour contenir les informations qui sont passées au rappel lors de son exécution. L’exemple crée un `TaskInfo` de l’objet et lui assigne des données de chaîne. Le <xref:System.Threading.RegisteredWaitHandle> qui est retourné par la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> est assigné à la méthode de la `Handle` champ le `TaskInfo` de l’objet, afin que la méthode de rappel a accès à la <xref:System.Threading.RegisteredWaitHandle>.  
  
 En plus de la `TaskInfo` objet, l’appel à la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode spécifie les <xref:System.Threading.AutoResetEvent> attend la tâche, un <xref:System.Threading.WaitOrTimerCallback> délégué qui représente le `WaitProc` méthode de rappel, un intervalle de délai d’une seconde et plusieurs rappels .  
  
 Lorsque le thread principal signale le <xref:System.Threading.AutoResetEvent> en appelant son <xref:System.Threading.EventWaitHandle.Set%2A> (méthode), la <xref:System.Threading.WaitOrTimerCallback> délégué est appelé. Le `WaitProc` méthode tests <xref:System.Threading.RegisteredWaitHandle> pour déterminer si un délai d’attente s’est produite. Si le rappel a été appelé parce que le handle d’attente a été signalé, le `WaitProc` méthode annule l’inscription du <xref:System.Threading.RegisteredWaitHandle>, l’arrêt du rappels. Dans le cas d’un délai d’attente, la tâche continue à attendre. Le `WaitProc` méthode se termine en imprimant un message sur la console.  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>