<Type Name="Timer" FullName="System.Threading.Timer">
  <TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="97e7b-101">Fournit un mécanisme permettant d'exécuter une méthode sur un thread de pool de threads à intervalles spécifiés.</span><span class="sxs-lookup"><span data-stu-id="97e7b-101">Provides a mechanism for executing a method on a thread pool thread at specified intervals.</span></span> <span data-ttu-id="97e7b-102">Cette classe ne peut pas être héritée.</span><span class="sxs-lookup"><span data-stu-id="97e7b-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97e7b-103">Utilisez un <xref:System.Threading.TimerCallback> délégué pour spécifier la méthode que vous souhaitez le <xref:System.Threading.Timer> à exécuter.</span><span class="sxs-lookup"><span data-stu-id="97e7b-103">Use a <xref:System.Threading.TimerCallback> delegate to specify the method you want the <xref:System.Threading.Timer> to execute.</span></span> <span data-ttu-id="97e7b-104">La signature de la <xref:System.Threading.TimerCallback> délégué est :</span><span class="sxs-lookup"><span data-stu-id="97e7b-104">The signature of the <xref:System.Threading.TimerCallback> delegate is:</span></span>  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 <span data-ttu-id="97e7b-105">Le délégué de la minuterie est spécifié lors de la minuterie est construite et ne peut pas être modifiée.</span><span class="sxs-lookup"><span data-stu-id="97e7b-105">The timer delegate is specified when the timer is constructed, and cannot be changed.</span></span> <span data-ttu-id="97e7b-106">La méthode ne s’exécute pas sur le thread qui a créé la minuterie ; Il s’exécute sur un <xref:System.Threading.ThreadPool> thread fourni par le système.</span><span class="sxs-lookup"><span data-stu-id="97e7b-106">The method does not execute on the thread that created the timer; it executes on a <xref:System.Threading.ThreadPool> thread supplied by the system.</span></span>  
  
> [!TIP]
> <span data-ttu-id="97e7b-107">.NET comprend quatre classes nommées `Timer`, chaque de qui offre des fonctionnalités différentes :</span><span class="sxs-lookup"><span data-stu-id="97e7b-107">.NET includes four classes named `Timer`, each of which offers different functionality:</span></span>  
>
> - <span data-ttu-id="97e7b-108"><xref:System.Timers.Timer?displayProperty=nameWithType>, qui déclenche un événement et exécute le code dans un ou plusieurs événements récepteurs à intervalles réguliers.</span><span class="sxs-lookup"><span data-stu-id="97e7b-108"><xref:System.Timers.Timer?displayProperty=nameWithType>, which fires an event and executes the code in one or more event sinks at regular intervals.</span></span> <span data-ttu-id="97e7b-109">La classe est destinée à en tant que la basée sur un serveur ou les composants de service dans un environnement multithread ; Il ne dispose d’aucune interface utilisateur et n’est pas visible lors de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="97e7b-109">The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>
> - <span data-ttu-id="97e7b-110"><xref:System.Threading.Timer?displayProperty=nameWithType>, qui exécute une méthode de rappel unique sur un thread de pool de threads à intervalles réguliers.</span><span class="sxs-lookup"><span data-stu-id="97e7b-110"><xref:System.Threading.Timer?displayProperty=nameWithType>, which executes a single callback method on a thread pool thread at regular intervals.</span></span> <span data-ttu-id="97e7b-111">La méthode de rappel est définie lorsque la minuterie est instanciée et ne peut pas être modifiée.</span><span class="sxs-lookup"><span data-stu-id="97e7b-111">The callback method is defined when the timer is instantiated and cannot be changed.</span></span> <span data-ttu-id="97e7b-112">Comme le <xref:System.Timers.Timer?displayProperty=nameWithType> (classe), cette classe est destinée à être utilisée comme un composant basé sur le serveur ou le service dans un environnement multithread ; elle ne dispose d’aucune interface utilisateur et n’est pas visible lors de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="97e7b-112">Like the <xref:System.Timers.Timer?displayProperty=nameWithType> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>
> - <span data-ttu-id="97e7b-113"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET framework uniquement), un composant Windows Forms qui déclenche un événement et exécute le code dans un ou plusieurs récepteurs d’événements à intervalles réguliers.</span><span class="sxs-lookup"><span data-stu-id="97e7b-113"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework only), a Windows Forms component that fires an event and executes the code in one or more event sinks at regular intervals.</span></span> <span data-ttu-id="97e7b-114">Le composant a pas d’interface utilisateur et est conçu pour une utilisation dans un environnement monothread. Il s’exécute sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="97e7b-114">The component has no user interface and is designed for use in a single-threaded environment; it executes on the UI thread.</span></span>
> - <span data-ttu-id="97e7b-115"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET framework uniquement), un composant ASP.NET qui effectue des publications de pages web asynchrones ou synchrones à intervalles réguliers.</span><span class="sxs-lookup"><span data-stu-id="97e7b-115"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework only), an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</span></span>
  
 <span data-ttu-id="97e7b-116">Lorsque vous créez un minuteur, vous pouvez spécifier un intervalle de temps à attendre avant la première exécution de la méthode (délai d’attente) et un intervalle de temps d’attente entre les exécutions suivantes (période).</span><span class="sxs-lookup"><span data-stu-id="97e7b-116">When you create a timer, you can specify an amount of time to wait before the first execution of the method (due time), and an amount of time to wait between subsequent executions (period).</span></span> <span data-ttu-id="97e7b-117">La <xref:System.Threading.Timer> classe a la même résolution que l’horloge système.</span><span class="sxs-lookup"><span data-stu-id="97e7b-117">The <xref:System.Threading.Timer> class has the same resolution as the system clock.</span></span> <span data-ttu-id="97e7b-118">Cela signifie que si la période est inférieure à la résolution de l’horloge système, le <xref:System.Threading.TimerCallback> délégué s’exécute à intervalles définis par la résolution de l’horloge système, qui est d’environ 15 millisecondes sur les systèmes Windows 7 et Windows 8.</span><span class="sxs-lookup"><span data-stu-id="97e7b-118">This means that if the period is less than the resolution of the system clock, the <xref:System.Threading.TimerCallback> delegate will execute at intervals defined by the resolution of the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems.</span></span> <span data-ttu-id="97e7b-119">Vous pouvez modifier le montant dû heure et un point ou désactiver la minuterie, à l’aide de la <xref:System.Threading.Timer.Change%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="97e7b-119">You can change the due time and period, or disable the timer, by using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97e7b-120">Tant que vous utilisez un <xref:System.Threading.Timer>, vous devez conserver une référence à celui-ci.</span><span class="sxs-lookup"><span data-stu-id="97e7b-120">As long as you are using a <xref:System.Threading.Timer>, you must keep a reference to it.</span></span> <span data-ttu-id="97e7b-121">Comme avec n’importe quel objet géré, un <xref:System.Threading.Timer> est soumis au garbage collection lorsqu’il n’existe aucune référence à celle-ci.</span><span class="sxs-lookup"><span data-stu-id="97e7b-121">As with any managed object, a <xref:System.Threading.Timer> is subject to garbage collection when there are no references to it.</span></span> <span data-ttu-id="97e7b-122">Le fait qu’un <xref:System.Threading.Timer> est toujours actif ne pas empêche d’être récupéré.</span><span class="sxs-lookup"><span data-stu-id="97e7b-122">The fact that a <xref:System.Threading.Timer> is still active does not prevent it from being collected.</span></span>  
  
 <span data-ttu-id="97e7b-123">Lorsqu’un minuteur n’est plus nécessaire, utilisez la <xref:System.Threading.Timer.Dispose%2A> méthode pour libérer les ressources détenues par la minuterie.</span><span class="sxs-lookup"><span data-stu-id="97e7b-123">When a timer is no longer needed, use the <xref:System.Threading.Timer.Dispose%2A> method to free the resources held by the timer.</span></span> <span data-ttu-id="97e7b-124">Notez que les rappels peuvent se produire après la <xref:System.Threading.Timer.Dispose> surcharge de méthode a été appelée, car le minuteur de files d’attente des rappels pour l’exécution par les threads du pool.</span><span class="sxs-lookup"><span data-stu-id="97e7b-124">Note that callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads.</span></span> <span data-ttu-id="97e7b-125">Vous pouvez utiliser la <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> la surcharge de méthode pour attendre que tous les rappels.</span><span class="sxs-lookup"><span data-stu-id="97e7b-125">You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.</span></span>  
  
 <span data-ttu-id="97e7b-126">La méthode de rappel exécutée par la minuterie doit être réentrante, parce qu’elle est appelée sur <xref:System.Threading.ThreadPool> threads.</span><span class="sxs-lookup"><span data-stu-id="97e7b-126">The callback method executed by the timer should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="97e7b-127">Le rappel peut être exécuté simultanément sur deux threads du pool si l’intervalle de minuterie est inférieur au temps requis pour exécuter le rappel, ou si tous les threads du pool sont en cours d’utilisation et le rappel est en file d’attente plusieurs fois.</span><span class="sxs-lookup"><span data-stu-id="97e7b-127">The callback can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the callback, or if all thread pool threads are in use and the callback is queued multiple times.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97e7b-128"><xref:System.Threading.Timer?displayProperty=nameWithType> est une minuterie simple et léger qui utilise des méthodes de rappel et est pris en charge par les threads du pool.</span><span class="sxs-lookup"><span data-stu-id="97e7b-128"><xref:System.Threading.Timer?displayProperty=nameWithType> is a simple, lightweight timer that uses callback methods and is served by thread pool threads.</span></span> <span data-ttu-id="97e7b-129">Il n’est pas recommandé pour une utilisation avec Windows Forms, car ses rappels ne se produisent pas sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="97e7b-129">It is not recommended for use with Windows Forms, because its callbacks do not occur on the user interface thread.</span></span> <span data-ttu-id="97e7b-130"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> est un meilleur choix pour une utilisation avec Windows Forms.</span><span class="sxs-lookup"><span data-stu-id="97e7b-130"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> is a better choice for use with Windows Forms.</span></span> <span data-ttu-id="97e7b-131">Pour les fonctionnalités de minuterie serveur, vous pouvez envisager d’utiliser <xref:System.Timers.Timer?displayProperty=nameWithType>, qui déclenche des événements et comporte des fonctionnalités supplémentaires.</span><span class="sxs-lookup"><span data-stu-id="97e7b-131">For server-based timer functionality, you might consider using <xref:System.Timers.Timer?displayProperty=nameWithType>, which raises events and has additional features.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97e7b-132">L’exemple suivant définit un `StatusChecker` classe inclut un `CheckStatus` méthode dont la signature est le même comme le <xref:System.Threading.TimerCallback> déléguer.</span><span class="sxs-lookup"><span data-stu-id="97e7b-132">The following example defines a `StatusChecker` class  that includes a `CheckStatus` method whose signature is the same as the <xref:System.Threading.TimerCallback> delegate.</span></span> <span data-ttu-id="97e7b-133">Le `state` argument de la `CheckStatus` méthode est un <xref:System.Threading.AutoResetEvent> objet qui est utilisé pour synchroniser le thread d’application et le thread qui exécute le délégué de rappel.</span><span class="sxs-lookup"><span data-stu-id="97e7b-133">The  `state` argument of the `CheckStatus` method is an <xref:System.Threading.AutoResetEvent> object that is used to synchronize the application thread and the thread pool thread that executes the callback delegate.</span></span> <span data-ttu-id="97e7b-134">La `StatusChecker` classe inclut également deux variables de l’état :</span><span class="sxs-lookup"><span data-stu-id="97e7b-134">The `StatusChecker` class also includes two state variables:</span></span>  
  
 `invokeCount`  
 <span data-ttu-id="97e7b-135">Indique le nombre de fois où que la méthode de rappel a été appelée.</span><span class="sxs-lookup"><span data-stu-id="97e7b-135">Indicates the number of times the callback method has been invoked.</span></span>  
  
 `maxCount`  
 <span data-ttu-id="97e7b-136">Détermine le nombre maximal de fois où que la méthode de rappel doit être appelée.</span><span class="sxs-lookup"><span data-stu-id="97e7b-136">Determines the maximum number of times the callback method should be invoked.</span></span>  
  
 <span data-ttu-id="97e7b-137">Le thread d’application crée l’horloge, qui attend une seconde, puis exécute la `CheckStatus` méthode de rappel chaque 250 millisecondes.</span><span class="sxs-lookup"><span data-stu-id="97e7b-137">The application thread creates the timer, which waits one second and then executes  the `CheckStatus` callback method every 250 milliseconds.</span></span> <span data-ttu-id="97e7b-138">Puis, le thread d’application se bloque jusqu'à ce que le <xref:System.Threading.AutoResetEvent> objet est signalé.</span><span class="sxs-lookup"><span data-stu-id="97e7b-138">The application thread then blocks until the <xref:System.Threading.AutoResetEvent> object is signaled.</span></span> <span data-ttu-id="97e7b-139">Lorsque le `CheckStatus` méthode de rappel s’exécute `maxCount` fois, il appelle la `AutoResetEvent.Set` pour définir l’état de la <xref:System.Threading.AutoResetEvent> objet signalé.</span><span class="sxs-lookup"><span data-stu-id="97e7b-139">When the `CheckStatus` callback method executes `maxCount` times, it calls the `AutoResetEvent.Set` method to set the state of the <xref:System.Threading.AutoResetEvent> object to signaled.</span></span> <span data-ttu-id="97e7b-140">La première fois dans ce cas, le thread d’application appelle la <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> méthode afin que la méthode de rappel s’exécute maintenant chaque seconde moitié.</span><span class="sxs-lookup"><span data-stu-id="97e7b-140">The first time this happens, the application thread calls the <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> method so that the callback method now executes every half second.</span></span> <span data-ttu-id="97e7b-141">Il bloque de nouveau jusqu'à ce que le <xref:System.Threading.AutoResetEvent> objet est signalé.</span><span class="sxs-lookup"><span data-stu-id="97e7b-141">It once again blocks until the <xref:System.Threading.AutoResetEvent> object is signaled.</span></span> <span data-ttu-id="97e7b-142">Dans ce cas, la minuterie est détruite en appelant son <xref:System.Threading.Timer.Dispose%2A> (méthode) et l’application se termine.</span><span class="sxs-lookup"><span data-stu-id="97e7b-142">When this happens, the timer is destroyed by calling its <xref:System.Threading.Timer.Dispose%2A> method, and the application terminates.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="97e7b-143">Ce type est thread-safe.</span><span class="sxs-lookup"><span data-stu-id="97e7b-143">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97e7b-144">Initialise une nouvelle instance de la classe <see langword="Timer" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-144">Initializes a new instance of the <see langword="Timer" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="97e7b-145">Délégué <see cref="T:System.Threading.TimerCallback" /> représentant une méthode à exécuter.</span><span class="sxs-lookup"><span data-stu-id="97e7b-145">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span></span></param>
        <summary><span data-ttu-id="97e7b-146">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Timer" /> avec une période infinie et un délai d'attente infini, à l'aide de l'objet <see cref="T:System.Threading.Timer" /> créé récemment comme objet d'état.</span><span class="sxs-lookup"><span data-stu-id="97e7b-146">Initializes a new instance of the <see cref="T:System.Threading.Timer" /> class with an infinite period and an infinite due time, using the newly created <see cref="T:System.Threading.Timer" /> object as the state object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97e7b-147">Appeler ce constructeur lorsque vous souhaitez utiliser le <xref:System.Threading.Timer> objet lui-même en tant que l’objet d’état.</span><span class="sxs-lookup"><span data-stu-id="97e7b-147">Call this constructor when you want to use the <xref:System.Threading.Timer> object itself as the state object.</span></span> <span data-ttu-id="97e7b-148">Après avoir créé la minuterie, utilisez le <xref:System.Threading.Timer.Change%2A> pour définir l’intervalle et le délai d’attente.</span><span class="sxs-lookup"><span data-stu-id="97e7b-148">After creating the timer, use the <xref:System.Threading.Timer.Change%2A> method to set the interval and due time.</span></span>  
  
 <span data-ttu-id="97e7b-149">Ce constructeur spécifie une attente infini avant le premier rappel et un intervalle infini entre les rappels, pour empêcher le premier rappel avant le <xref:System.Threading.Timer> objet est assigné à l’objet d’état.</span><span class="sxs-lookup"><span data-stu-id="97e7b-149">This constructor specifies an infinite due time before the first callback and an infinite interval between callbacks, in order to prevent the first callback from occurring before the <xref:System.Threading.Timer> object is assigned to the state object.</span></span>  
  
 <span data-ttu-id="97e7b-150">La méthode spécifiée pour `callback` doit être réentrante, parce qu’elle est appelée sur <xref:System.Threading.ThreadPool> threads.</span><span class="sxs-lookup"><span data-stu-id="97e7b-150">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="97e7b-151">La méthode peut être exécutée simultanément sur deux threads du pool si l’intervalle de minuterie est inférieur au temps nécessaire à l’exécution de la méthode, ou si tous les threads du pool sont en cours d’utilisation et la méthode est en file d’attente plusieurs fois.</span><span class="sxs-lookup"><span data-stu-id="97e7b-151">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97e7b-152">L’exemple de code suivant crée une minuterie, en utilisant la minuterie comme objet d’état.</span><span class="sxs-lookup"><span data-stu-id="97e7b-152">The following code example creates a new timer, using the timer itself as the state object.</span></span> <span data-ttu-id="97e7b-153">Le <xref:System.Threading.Timer.Change%2A> méthode est utilisée pour démarrer la minuterie.</span><span class="sxs-lookup"><span data-stu-id="97e7b-153">The <xref:System.Threading.Timer.Change%2A> method is used to start the timer.</span></span> <span data-ttu-id="97e7b-154">Lorsque le rappel timer se produit, l’objet d’état est utilisé pour désactiver la minuterie.</span><span class="sxs-lookup"><span data-stu-id="97e7b-154">When the timer callback occurs, the state object is used to turn the timer off.</span></span>  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="97e7b-155">Délégué <see cref="T:System.Threading.TimerCallback" /> représentant une méthode à exécuter.</span><span class="sxs-lookup"><span data-stu-id="97e7b-155">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span></span></param>
        <param name="state"><span data-ttu-id="97e7b-156">Objet contenant les informations que la méthode de rappel doit utiliser ou <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-156">An object containing information to be used by the callback method, or <see langword="null" />.</span></span></param>
        <param name="dueTime"><span data-ttu-id="97e7b-157">Délai d’attente, en millisecondes, avant que <c>callback</c> soit appelé.</span><span class="sxs-lookup"><span data-stu-id="97e7b-157">The amount of time to delay before <c>callback</c> is invoked, in milliseconds.</span></span> <span data-ttu-id="97e7b-158">Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour empêcher le démarrage de la minuterie.</span><span class="sxs-lookup"><span data-stu-id="97e7b-158">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span></span> <span data-ttu-id="97e7b-159">Spécifiez zéro (0) pour démarrer la minuterie immédiatement.</span><span class="sxs-lookup"><span data-stu-id="97e7b-159">Specify zero (0) to start the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="97e7b-160">Intervalle de temps, en millisecondes, entre les appels de <c>callback</c>.</span><span class="sxs-lookup"><span data-stu-id="97e7b-160">The time interval between invocations of <c>callback</c>, in milliseconds.</span></span> <span data-ttu-id="97e7b-161">Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour désactiver la signalisation périodique.</span><span class="sxs-lookup"><span data-stu-id="97e7b-161">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="97e7b-162">Initialise une nouvelle instance de la classe <see langword="Timer" /> utilisant un entier signé 32 bits pour spécifier l'intervalle de temps.</span><span class="sxs-lookup"><span data-stu-id="97e7b-162">Initializes a new instance of the <see langword="Timer" /> class, using a 32-bit signed integer to specify the time interval.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97e7b-163">Le délégué spécifié par le `callback` paramètre est appelé une seule fois après `dueTime` expiration et par la suite chaque fois que le `period` expiration de l’intervalle de temps.</span><span class="sxs-lookup"><span data-stu-id="97e7b-163">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="97e7b-164">Si `dueTime` est zéro (0), `callback` est appelé immédiatement.</span><span class="sxs-lookup"><span data-stu-id="97e7b-164">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="97e7b-165">Si `dueTime` est <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` n’est pas appelé ; la minuterie est désactivée, mais peut être réactivée en appelant le <xref:System.Threading.Timer.Change%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="97e7b-165">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="97e7b-166">Étant donné que la <xref:System.Threading.Timer> classe a la même résolution que l’horloge système, qui est d’environ 15 millisecondes sur les systèmes Windows 7 et Windows 8, le `callback` délégué s’exécute à intervalles définis par la résolution de l’horloge système si `period`est inférieure à la résolution de l’horloge système.</span><span class="sxs-lookup"><span data-stu-id="97e7b-166">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="97e7b-167">Si `period` est zéro (0) ou <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> et `dueTime` n’est pas <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` est appelé une seule fois ; le comportement périodique de la minuterie est désactivé, mais peut être réactivé à l’aide de la <xref:System.Threading.Timer.Change%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="97e7b-167">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="97e7b-168">La méthode spécifiée pour `callback` doit être réentrante, parce qu’elle est appelée sur <xref:System.Threading.ThreadPool> threads.</span><span class="sxs-lookup"><span data-stu-id="97e7b-168">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="97e7b-169">La méthode peut être exécutée simultanément sur deux threads du pool si l’intervalle de minuterie est inférieur au temps nécessaire à l’exécution de la méthode, ou si tous les threads du pool sont en cours d’utilisation et la méthode est en file d’attente plusieurs fois.</span><span class="sxs-lookup"><span data-stu-id="97e7b-169">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97e7b-170">L’exemple de code suivant montre comment créer un `TimerCallback` déléguer et initialiser une nouvelle instance de la `Timer` classe.</span><span class="sxs-lookup"><span data-stu-id="97e7b-170">The following code example shows how to create a `TimerCallback` delegate and initialize a new instance of the `Timer` class.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="97e7b-171">Le paramètre <paramref name="dueTime" /> ou <paramref name="period" /> est négatif et différent de <see cref="F:System.Threading.Timeout.Infinite" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-171">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97e7b-172">Le paramètre <paramref name="callback" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-172">The <paramref name="callback" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="97e7b-173">Délégué <see cref="T:System.Threading.TimerCallback" /> représentant une méthode à exécuter.</span><span class="sxs-lookup"><span data-stu-id="97e7b-173">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span></span></param>
        <param name="state"><span data-ttu-id="97e7b-174">Objet contenant les informations que la méthode de rappel doit utiliser ou <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-174">An object containing information to be used by the callback method, or <see langword="null" />.</span></span></param>
        <param name="dueTime"><span data-ttu-id="97e7b-175">Délai d’attente, en millisecondes, avant que <c>callback</c> soit appelé.</span><span class="sxs-lookup"><span data-stu-id="97e7b-175">The amount of time to delay before <c>callback</c> is invoked, in milliseconds.</span></span> <span data-ttu-id="97e7b-176">Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour empêcher le démarrage de la minuterie.</span><span class="sxs-lookup"><span data-stu-id="97e7b-176">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span></span> <span data-ttu-id="97e7b-177">Spécifiez zéro (0) pour démarrer la minuterie immédiatement.</span><span class="sxs-lookup"><span data-stu-id="97e7b-177">Specify zero (0) to start the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="97e7b-178">Intervalle de temps, en millisecondes, entre les appels de <c>callback</c>.</span><span class="sxs-lookup"><span data-stu-id="97e7b-178">The time interval between invocations of <c>callback</c>, in milliseconds.</span></span> <span data-ttu-id="97e7b-179">Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour désactiver la signalisation périodique.</span><span class="sxs-lookup"><span data-stu-id="97e7b-179">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="97e7b-180">Initialise une nouvelle instance de la classe <see langword="Timer" /> utilisant des entiers 64 bits signés pour mesurer les intervalles de temps.</span><span class="sxs-lookup"><span data-stu-id="97e7b-180">Initializes a new instance of the <see langword="Timer" /> class, using 64-bit signed integers to measure time intervals.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97e7b-181">Le délégué spécifié par le `callback` paramètre est appelé une seule fois après `dueTime` expiration et par la suite chaque fois que le `period` expiration de l’intervalle de temps.</span><span class="sxs-lookup"><span data-stu-id="97e7b-181">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="97e7b-182">Si `dueTime` est zéro (0), `callback` est appelé immédiatement.</span><span class="sxs-lookup"><span data-stu-id="97e7b-182">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="97e7b-183">Si `dueTime` est <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` n’est pas appelé ; la minuterie est désactivée, mais peut être réactivée en appelant le <xref:System.Threading.Timer.Change%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="97e7b-183">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="97e7b-184">Étant donné que la <xref:System.Threading.Timer> classe a la même résolution que l’horloge système, qui est d’environ 15 millisecondes sur les systèmes Windows 7 et Windows 8, le `callback` délégué s’exécute à intervalles définis par la résolution de l’horloge système si `period`est inférieure à la résolution de l’horloge système.</span><span class="sxs-lookup"><span data-stu-id="97e7b-184">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="97e7b-185">Si `period` est zéro (0) ou <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> et `dueTime` n’est pas <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` est appelé une seule fois ; le comportement périodique de la minuterie est désactivé, mais peut être réactivé à l’aide de la <xref:System.Threading.Timer.Change%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="97e7b-185">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="97e7b-186">La méthode spécifiée pour `callback` doit être réentrante, parce qu’elle est appelée sur <xref:System.Threading.ThreadPool> threads.</span><span class="sxs-lookup"><span data-stu-id="97e7b-186">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="97e7b-187">La méthode peut être exécutée simultanément sur deux threads du pool si l’intervalle de minuterie est inférieur au temps nécessaire à l’exécution de la méthode, ou si tous les threads du pool sont en cours d’utilisation et la méthode est en file d’attente plusieurs fois.</span><span class="sxs-lookup"><span data-stu-id="97e7b-187">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="97e7b-188">Le paramètre <paramref name="dueTime" /> ou <paramref name="period" /> est négatif et différent de <see cref="F:System.Threading.Timeout.Infinite" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-188">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="97e7b-189">Le paramètre <paramref name="dueTime" /> ou <paramref name="period" />  est supérieur à 4 294 967 294.</span><span class="sxs-lookup"><span data-stu-id="97e7b-189">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is greater than 4294967294.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="97e7b-190">Délégué représentant une méthode à exécuter.</span><span class="sxs-lookup"><span data-stu-id="97e7b-190">A delegate representing a method to be executed.</span></span></param>
        <param name="state"><span data-ttu-id="97e7b-191">Objet contenant les informations que la méthode de rappel doit utiliser ou <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-191">An object containing information to be used by the callback method, or <see langword="null" />.</span></span></param>
        <param name="dueTime"><span data-ttu-id="97e7b-192">Délai d’attente avant que le paramètre <c>callback</c> appelle ses méthodes.</span><span class="sxs-lookup"><span data-stu-id="97e7b-192">The amount of time to delay before the <c>callback</c> parameter invokes its methods.</span></span> <span data-ttu-id="97e7b-193">Spécifiez -1 milliseconde pour empêcher le démarrage de la minuterie.</span><span class="sxs-lookup"><span data-stu-id="97e7b-193">Specify negative one (-1) milliseconds to prevent the timer from starting.</span></span> <span data-ttu-id="97e7b-194">Spécifiez zéro (0) pour démarrer la minuterie immédiatement.</span><span class="sxs-lookup"><span data-stu-id="97e7b-194">Specify zero (0) to start the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="97e7b-195">Intervalle de temps entre les appels des méthodes référencées par <c>callback</c>.</span><span class="sxs-lookup"><span data-stu-id="97e7b-195">The time interval between invocations of the methods referenced by <c>callback</c>.</span></span> <span data-ttu-id="97e7b-196">Spécifiez -1 milliseconde pour désactiver la signalisation périodique.</span><span class="sxs-lookup"><span data-stu-id="97e7b-196">Specify negative one (-1) milliseconds to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="97e7b-197">Initialise une nouvelle instance de la classe <see langword="Timer" /> utilisant des valeurs <see cref="T:System.TimeSpan" /> pour mesurer les intervalles de temps.</span><span class="sxs-lookup"><span data-stu-id="97e7b-197">Initializes a new instance of the <see langword="Timer" /> class, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97e7b-198">Le délégué spécifié par le `callback` paramètre est appelé une seule fois après `dueTime` expiration et par la suite chaque fois que le `period` expiration de l’intervalle de temps.</span><span class="sxs-lookup"><span data-stu-id="97e7b-198">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="97e7b-199">Si `dueTime` est zéro (0), `callback` est appelé immédiatement.</span><span class="sxs-lookup"><span data-stu-id="97e7b-199">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="97e7b-200">Si `dueTime` est négatif (-1) millisecondes, `callback` n’est pas appelé ; la minuterie est désactivée, mais peut être réactivée en appelant le <xref:System.Threading.Timer.Change%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="97e7b-200">If `dueTime` is negative one (-1) milliseconds, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="97e7b-201">Étant donné que la <xref:System.Threading.Timer> classe a la même résolution que l’horloge système, qui est d’environ 15 millisecondes sur les systèmes Windows 7 et Windows 8, le `callback` délégué s’exécute à intervalles définis par la résolution de l’horloge système si `period`est inférieure à la résolution de l’horloge système.</span><span class="sxs-lookup"><span data-stu-id="97e7b-201">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="97e7b-202">Si `period` est zéro (0) ou négatif (-1) milliseconde et `dueTime` est un nombre positif, `callback` est appelé une seule fois ; le comportement périodique de la minuterie est désactivé, mais peut être réactivé à l’aide de la <xref:System.Threading.Timer.Change%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="97e7b-202">If `period` is zero (0) or negative one (-1) milliseconds and `dueTime` is positive, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="97e7b-203">La méthode spécifiée pour `callback` doit être réentrante, parce qu’elle est appelée sur <xref:System.Threading.ThreadPool> threads.</span><span class="sxs-lookup"><span data-stu-id="97e7b-203">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="97e7b-204">La méthode peut être exécutée simultanément sur deux threads du pool si l’intervalle de minuterie est inférieur au temps nécessaire à l’exécution de la méthode, ou si tous les threads du pool sont en cours d’utilisation et la méthode est en file d’attente plusieurs fois.</span><span class="sxs-lookup"><span data-stu-id="97e7b-204">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97e7b-205">L’exemple de code suivant montre comment créer un `TimerCallback` déléguer et initialiser une nouvelle instance de la `Timer` classe.</span><span class="sxs-lookup"><span data-stu-id="97e7b-205">The following code example shows how to create a `TimerCallback` delegate and initialize a new instance of the `Timer` class.</span></span>  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="97e7b-206">Le nombre de millisecondes indiqué dans la valeur de <paramref name="dueTime" /> ou de <paramref name="period" /> est négatif et différent de <see cref="F:System.Threading.Timeout.Infinite" /> ou est supérieur à <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-206">The number of milliseconds in the value of <paramref name="dueTime" /> or <paramref name="period" /> is negative and not equal to <see cref="F:System.Threading.Timeout.Infinite" />, or is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97e7b-207">Le paramètre <paramref name="callback" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-207">The <paramref name="callback" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="97e7b-208">Délégué représentant une méthode à exécuter.</span><span class="sxs-lookup"><span data-stu-id="97e7b-208">A delegate representing a method to be executed.</span></span></param>
        <param name="state"><span data-ttu-id="97e7b-209">Objet contenant les informations que la méthode de rappel doit utiliser ou <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-209">An object containing information to be used by the callback method, or <see langword="null" />.</span></span></param>
        <param name="dueTime"><span data-ttu-id="97e7b-210">Délai d’attente, en millisecondes, avant que <c>callback</c> soit appelé.</span><span class="sxs-lookup"><span data-stu-id="97e7b-210">The amount of time to delay before <c>callback</c> is invoked, in milliseconds.</span></span> <span data-ttu-id="97e7b-211">Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour empêcher le démarrage de la minuterie.</span><span class="sxs-lookup"><span data-stu-id="97e7b-211">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span></span> <span data-ttu-id="97e7b-212">Spécifiez zéro (0) pour démarrer la minuterie immédiatement.</span><span class="sxs-lookup"><span data-stu-id="97e7b-212">Specify zero (0) to start the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="97e7b-213">Intervalle de temps, en millisecondes, entre les appels de <c>callback</c>.</span><span class="sxs-lookup"><span data-stu-id="97e7b-213">The time interval between invocations of <c>callback</c>, in milliseconds.</span></span> <span data-ttu-id="97e7b-214">Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour désactiver la signalisation périodique.</span><span class="sxs-lookup"><span data-stu-id="97e7b-214">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="97e7b-215">Initialise une nouvelle instance de la classe <see langword="Timer" /> utilisant des entiers 32 bits non signés pour mesurer les intervalles de temps.</span><span class="sxs-lookup"><span data-stu-id="97e7b-215">Initializes a new instance of the <see langword="Timer" /> class, using 32-bit unsigned integers to measure time intervals.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97e7b-216">Le délégué spécifié par le `callback` paramètre est appelé une seule fois après `dueTime` expiration et par la suite chaque fois que le `period` expiration de l’intervalle de temps.</span><span class="sxs-lookup"><span data-stu-id="97e7b-216">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="97e7b-217">Si `dueTime` est zéro (0), `callback` est appelé immédiatement.</span><span class="sxs-lookup"><span data-stu-id="97e7b-217">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="97e7b-218">Si `dueTime` est <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` n’est pas appelé ; la minuterie est désactivée, mais peut être réactivée en appelant le <xref:System.Threading.Timer.Change%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="97e7b-218">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="97e7b-219">Étant donné que la <xref:System.Threading.Timer> classe a la même résolution que l’horloge système, qui est d’environ 15 millisecondes sur les systèmes Windows 7 et Windows 8, le `callback` délégué s’exécute à intervalles définis par la résolution de l’horloge système si `period`est inférieure à la résolution de l’horloge système.</span><span class="sxs-lookup"><span data-stu-id="97e7b-219">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="97e7b-220">Si `period` est zéro (0) ou <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> et `dueTime` n’est pas <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` est appelé une seule fois ; le comportement périodique de la minuterie est désactivé, mais peut être réactivé à l’aide de la <xref:System.Threading.Timer.Change%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="97e7b-220">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="97e7b-221">La méthode spécifiée pour `callback` doit être réentrante, parce qu’elle est appelée sur <xref:System.Threading.ThreadPool> threads.</span><span class="sxs-lookup"><span data-stu-id="97e7b-221">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="97e7b-222">La méthode peut être exécutée simultanément sur deux threads du pool si l’intervalle de minuterie est inférieur au temps nécessaire à l’exécution de la méthode, ou si tous les threads du pool sont en cours d’utilisation et la méthode est en file d’attente plusieurs fois.</span><span class="sxs-lookup"><span data-stu-id="97e7b-222">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="97e7b-223">Le paramètre <paramref name="dueTime" /> ou <paramref name="period" /> est négatif et différent de <see cref="F:System.Threading.Timeout.Infinite" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-223">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97e7b-224">Le paramètre <paramref name="callback" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-224">The <paramref name="callback" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97e7b-225">Modifie l'heure de début et l'intervalle entre les appels de méthode d'une minuterie.</span><span class="sxs-lookup"><span data-stu-id="97e7b-225">Changes the start time and the interval between method invocations for a timer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime"><span data-ttu-id="97e7b-226">Délai d'attente, en millisecondes, avant l'appel de la méthode de rappel spécifiée au moment de la construction de <see cref="T:System.Threading.Timer" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-226">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="97e7b-227">Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour empêcher le redémarrage de la minuterie.</span><span class="sxs-lookup"><span data-stu-id="97e7b-227">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span></span> <span data-ttu-id="97e7b-228">Spécifiez zéro (0) pour redémarrer la minuterie immédiatement.</span><span class="sxs-lookup"><span data-stu-id="97e7b-228">Specify zero (0) to restart the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="97e7b-229">Intervalle de temps, en millisecondes, entre les appels de la méthode de rappel spécifiée au moment de la construction de <see cref="T:System.Threading.Timer" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-229">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="97e7b-230">Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour désactiver la signalisation périodique.</span><span class="sxs-lookup"><span data-stu-id="97e7b-230">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="97e7b-231">Modifie l'heure de début et l'intervalle entre les appels de méthode d'une minuterie ; les intervalles de temps sont mesurés à l'aide d'entiers 32 bits signés.</span><span class="sxs-lookup"><span data-stu-id="97e7b-231">Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.</span></span></summary>
        <returns>
          <span data-ttu-id="97e7b-232"><see langword="true" /> si le minuteur a été correctement mis à jour ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-232"><see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97e7b-233">La méthode de rappel est appelée une seule fois après `dueTime` expiration, puis chaque fois que l’intervalle de temps spécifié par `period` s’écoule.</span><span class="sxs-lookup"><span data-stu-id="97e7b-233">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="97e7b-234">Si `dueTime` est zéro (0), la méthode de rappel est appelée immédiatement.</span><span class="sxs-lookup"><span data-stu-id="97e7b-234">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="97e7b-235">Si `dueTime` est <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, la méthode de rappel n’est jamais appelée ; la minuterie est désactivée, mais peut être réactivé en appelant <xref:System.Threading.Timer.Change%2A> et en spécifiant une valeur positive pour `dueTime`.</span><span class="sxs-lookup"><span data-stu-id="97e7b-235">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="97e7b-236">Si `period` est zéro (0) ou <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, et `dueTime` n’est pas <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, la méthode de rappel est appelée une seule fois ; le comportement périodique de la minuterie est désactivé, mais peut être réactivé en appelant <xref:System.Threading.Timer.Change%2A> et en spécifiant une valeur positive pour `period`.</span><span class="sxs-lookup"><span data-stu-id="97e7b-236">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="97e7b-237">Le <xref:System.Threading.Timer.Change%2A> méthode peut être appelée à partir de la <xref:System.Threading.TimerCallback> déléguer.</span><span class="sxs-lookup"><span data-stu-id="97e7b-237">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97e7b-238">L’exemple de code suivant montre comment démarrer un `Timer` et, après un nombre défini d’appels, modifier sa période.</span><span class="sxs-lookup"><span data-stu-id="97e7b-238">The following code example demonstrates how to start a `Timer` and, after a set number of invocations, change its period.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="97e7b-239"><see cref="T:System.Threading.Timer" /> a déjà été supprimé.</span><span class="sxs-lookup"><span data-stu-id="97e7b-239">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="97e7b-240">Le paramètre <paramref name="dueTime" /> ou <paramref name="period" /> est négatif et différent de <see cref="F:System.Threading.Timeout.Infinite" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-240">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dueTime"><span data-ttu-id="97e7b-241">Délai d'attente, en millisecondes, avant l'appel de la méthode de rappel spécifiée au moment de la construction de <see cref="T:System.Threading.Timer" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-241">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="97e7b-242">Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour empêcher le redémarrage de la minuterie.</span><span class="sxs-lookup"><span data-stu-id="97e7b-242">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span></span> <span data-ttu-id="97e7b-243">Spécifiez zéro (0) pour redémarrer la minuterie immédiatement.</span><span class="sxs-lookup"><span data-stu-id="97e7b-243">Specify zero (0) to restart the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="97e7b-244">Intervalle de temps, en millisecondes, entre les appels de la méthode de rappel spécifiée au moment de la construction de <see cref="T:System.Threading.Timer" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-244">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="97e7b-245">Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour désactiver la signalisation périodique.</span><span class="sxs-lookup"><span data-stu-id="97e7b-245">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="97e7b-246">Modifie l'heure de début et l'intervalle entre les appels de méthode d'une minuterie ; les intervalles de temps sont mesurés à l'aide d'entiers 64 bits signés.</span><span class="sxs-lookup"><span data-stu-id="97e7b-246">Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.</span></span></summary>
        <returns>
          <span data-ttu-id="97e7b-247"><see langword="true" /> si le minuteur a été correctement mis à jour ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-247"><see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97e7b-248">La méthode de rappel est appelée une seule fois après `dueTime` expiration, puis chaque fois que l’intervalle de temps spécifié par `period` s’écoule.</span><span class="sxs-lookup"><span data-stu-id="97e7b-248">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="97e7b-249">Si `dueTime` est zéro (0), la méthode de rappel est appelée immédiatement.</span><span class="sxs-lookup"><span data-stu-id="97e7b-249">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="97e7b-250">Si `dueTime` est <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, la méthode de rappel n’est jamais appelée ; la minuterie est désactivée, mais peut être réactivé en appelant <xref:System.Threading.Timer.Change%2A> et en spécifiant une valeur positive pour `dueTime`.</span><span class="sxs-lookup"><span data-stu-id="97e7b-250">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="97e7b-251">Si `period` est zéro (0) ou <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, et `dueTime` n’est pas <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, la méthode de rappel est appelée une seule fois ; le comportement périodique de la minuterie est désactivé, mais peut être réactivé en appelant <xref:System.Threading.Timer.Change%2A> et en spécifiant une valeur positive pour `period`.</span><span class="sxs-lookup"><span data-stu-id="97e7b-251">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="97e7b-252">Le <xref:System.Threading.Timer.Change%2A> méthode peut être appelée à partir de la <xref:System.Threading.TimerCallback> déléguer.</span><span class="sxs-lookup"><span data-stu-id="97e7b-252">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="97e7b-253"><see cref="T:System.Threading.Timer" /> a déjà été supprimé.</span><span class="sxs-lookup"><span data-stu-id="97e7b-253">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="97e7b-254">Le paramètre <paramref name="dueTime" /> ou <paramref name="period" />  est inférieur à -1.</span><span class="sxs-lookup"><span data-stu-id="97e7b-254">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is less than -1.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="97e7b-255">Le paramètre <paramref name="dueTime" /> ou <paramref name="period" />  est supérieur à 4 294 967 294.</span><span class="sxs-lookup"><span data-stu-id="97e7b-255">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is greater than 4294967294.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime"><span data-ttu-id="97e7b-256"><see cref="T:System.TimeSpan" /> représentant le délai d'attente avant l'appel de la méthode de rappel spécifiée au moment de la construction de <see cref="T:System.Threading.Timer" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-256">A <see cref="T:System.TimeSpan" /> representing the amount of time to delay before invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed.</span></span> <span data-ttu-id="97e7b-257">Spécifiez -1 milliseconde pour empêcher le démarrage de la minuterie.</span><span class="sxs-lookup"><span data-stu-id="97e7b-257">Specify negative one (-1) milliseconds to prevent the timer from restarting.</span></span> <span data-ttu-id="97e7b-258">Spécifiez zéro (0) pour redémarrer la minuterie immédiatement.</span><span class="sxs-lookup"><span data-stu-id="97e7b-258">Specify zero (0) to restart the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="97e7b-259">Intervalle de temps entre les appels de la méthode de rappel spécifiée au moment de la construction de <see cref="T:System.Threading.Timer" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-259">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed.</span></span> <span data-ttu-id="97e7b-260">Spécifiez -1 milliseconde pour désactiver la signalisation périodique.</span><span class="sxs-lookup"><span data-stu-id="97e7b-260">Specify negative one (-1) milliseconds to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="97e7b-261">Modifie l'heure de début et l'intervalle entre les appels de méthode d'une minuterie ; les intervalles de temps sont mesurés à l'aide de valeurs <see cref="T:System.TimeSpan" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-261">Changes the start time and the interval between method invocations for a timer, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</span></span></summary>
        <returns>
          <span data-ttu-id="97e7b-262"><see langword="true" /> si le minuteur a été correctement mis à jour ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-262"><see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97e7b-263">La méthode de rappel est appelée une seule fois après `dueTime` expiration, puis chaque fois que l’intervalle de temps spécifié par `period` s’écoule.</span><span class="sxs-lookup"><span data-stu-id="97e7b-263">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="97e7b-264">Si `dueTime` est zéro (0), la méthode de rappel est appelée immédiatement.</span><span class="sxs-lookup"><span data-stu-id="97e7b-264">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="97e7b-265">Si `dueTime` est millisecondes négatif (-1), la méthode de rappel n’est jamais appelée ; la minuterie est désactivée, mais peut être réactivé en appelant <xref:System.Threading.Timer.Change%2A> et en spécifiant une valeur positive pour `dueTime`.</span><span class="sxs-lookup"><span data-stu-id="97e7b-265">If `dueTime` is negative one (-1) milliseconds, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="97e7b-266">Si `period` est zéro (0) ou négatif (-1) millisecondes, et `dueTime` est un nombre positif, la méthode de rappel est appelée une seule fois ; le comportement périodique de la minuterie est désactivé, mais peut être réactivé en appelant <xref:System.Threading.Timer.Change%2A> et en spécifiant une valeur supérieure à zéro pour `period`.</span><span class="sxs-lookup"><span data-stu-id="97e7b-266">If `period` is zero (0) or negative one (-1) milliseconds, and `dueTime` is positive, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a value greater than zero for `period`.</span></span>  
  
 <span data-ttu-id="97e7b-267">Le <xref:System.Threading.Timer.Change%2A> méthode peut être appelée à partir de la <xref:System.Threading.TimerCallback> déléguer.</span><span class="sxs-lookup"><span data-stu-id="97e7b-267">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97e7b-268">L’exemple de code suivant montre comment démarrer un `Timer` et, après un nombre défini d’appels, modifier sa période.</span><span class="sxs-lookup"><span data-stu-id="97e7b-268">The following code example demonstrates how to start a `Timer` and, after a set number of invocations, change its period.</span></span>  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="97e7b-269"><see cref="T:System.Threading.Timer" /> a déjà été supprimé.</span><span class="sxs-lookup"><span data-stu-id="97e7b-269">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="97e7b-270">Le paramètre <paramref name="dueTime" /> ou <paramref name="period" />, exprimé en millisecondes, est inférieur à -1.</span><span class="sxs-lookup"><span data-stu-id="97e7b-270">The <paramref name="dueTime" /> or <paramref name="period" /> parameter, in milliseconds, is less than -1.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="97e7b-271">Le paramètre <paramref name="dueTime" /> ou <paramref name="period" />, exprimé en millisecondes, est supérieur à 4294967294.</span><span class="sxs-lookup"><span data-stu-id="97e7b-271">The <paramref name="dueTime" /> or <paramref name="period" /> parameter, in milliseconds, is greater than 4294967294.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="dueTime"><span data-ttu-id="97e7b-272">Délai d'attente, en millisecondes, avant l'appel de la méthode de rappel spécifiée au moment de la construction de <see cref="T:System.Threading.Timer" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-272">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="97e7b-273">Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour empêcher le redémarrage de la minuterie.</span><span class="sxs-lookup"><span data-stu-id="97e7b-273">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span></span> <span data-ttu-id="97e7b-274">Spécifiez zéro (0) pour redémarrer la minuterie immédiatement.</span><span class="sxs-lookup"><span data-stu-id="97e7b-274">Specify zero (0) to restart the timer immediately.</span></span></param>
        <param name="period"><span data-ttu-id="97e7b-275">Intervalle de temps, en millisecondes, entre les appels de la méthode de rappel spécifiée au moment de la construction de <see cref="T:System.Threading.Timer" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-275">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span></span> <span data-ttu-id="97e7b-276">Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour désactiver la signalisation périodique.</span><span class="sxs-lookup"><span data-stu-id="97e7b-276">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span></span></param>
        <summary><span data-ttu-id="97e7b-277">Modifie l'heure de début et l'intervalle entre les appels de méthode d'une minuterie ; les intervalles de temps sont mesurés à l'aide d'entiers 32 bits non signés.</span><span class="sxs-lookup"><span data-stu-id="97e7b-277">Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.</span></span></summary>
        <returns>
          <span data-ttu-id="97e7b-278"><see langword="true" /> si le minuteur a été correctement mis à jour ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-278"><see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97e7b-279">La méthode de rappel est appelée une seule fois après `dueTime` expiration, puis chaque fois que l’intervalle de temps spécifié par `period` s’écoule.</span><span class="sxs-lookup"><span data-stu-id="97e7b-279">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="97e7b-280">Si `dueTime` est zéro (0), la méthode de rappel est appelée immédiatement.</span><span class="sxs-lookup"><span data-stu-id="97e7b-280">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="97e7b-281">Si `dueTime` est <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, la méthode de rappel n’est jamais appelée ; la minuterie est désactivée, mais peut être réactivé en appelant <xref:System.Threading.Timer.Change%2A> et en spécifiant une valeur positive pour `dueTime`.</span><span class="sxs-lookup"><span data-stu-id="97e7b-281">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="97e7b-282">Si `period` est zéro (0) ou <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, et `dueTime` n’est pas <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, la méthode de rappel est appelée une seule fois ; le comportement périodique de la minuterie est désactivé, mais peut être réactivé en appelant <xref:System.Threading.Timer.Change%2A> et en spécifiant une valeur positive pour `period`.</span><span class="sxs-lookup"><span data-stu-id="97e7b-282">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="97e7b-283">Le <xref:System.Threading.Timer.Change%2A> méthode peut être appelée à partir de la <xref:System.Threading.TimerCallback> déléguer.</span><span class="sxs-lookup"><span data-stu-id="97e7b-283">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="97e7b-284"><see cref="T:System.Threading.Timer" /> a déjà été supprimé.</span><span class="sxs-lookup"><span data-stu-id="97e7b-284">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97e7b-285">Libère toutes les ressources utilisées par l'instance actuelle de <see cref="T:System.Threading.Timer" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-285">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97e7b-286">Libère toutes les ressources utilisées par l'instance actuelle de <see cref="T:System.Threading.Timer" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-286">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97e7b-287">Appel de `Dispose` autorise les ressources utilisées par le <xref:System.Threading.Timer> à être réaffectés à d’autres fins.</span><span class="sxs-lookup"><span data-stu-id="97e7b-287">Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes.</span></span> <span data-ttu-id="97e7b-288">Pour plus d’informations sur `Dispose`, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="97e7b-288">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97e7b-289">Rappels peuvent se produire après la <xref:System.Threading.Timer.Dispose> surcharge de méthode a été appelée, car le minuteur de files d’attente des rappels pour l’exécution par les threads du pool.</span><span class="sxs-lookup"><span data-stu-id="97e7b-289">Callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads.</span></span> <span data-ttu-id="97e7b-290">Vous pouvez utiliser la <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> la surcharge de méthode pour attendre que tous les rappels.</span><span class="sxs-lookup"><span data-stu-id="97e7b-290">You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97e7b-291">L’exemple de code suivant montre comment libérer les ressources détenues par un `Timer`.</span><span class="sxs-lookup"><span data-stu-id="97e7b-291">The following code example shows how to free the resources held by a `Timer`.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="notifyObject"><span data-ttu-id="97e7b-292"><see cref="T:System.Threading.WaitHandle" /> à signaler lorsque <see langword="Timer" /> a été supprimé.</span><span class="sxs-lookup"><span data-stu-id="97e7b-292">The <see cref="T:System.Threading.WaitHandle" /> to be signaled when the <see langword="Timer" /> has been disposed of.</span></span></param>
        <summary><span data-ttu-id="97e7b-293">Libère toutes les ressources utilisées par l'instance actuelle de <see cref="T:System.Threading.Timer" /> et signale le moment où la minuterie a été supprimée.</span><span class="sxs-lookup"><span data-stu-id="97e7b-293">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" /> and signals when the timer has been disposed of.</span></span></summary>
        <returns>
          <span data-ttu-id="97e7b-294"><see langword="true" /> si la fonction aboutit ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-294"><see langword="true" /> if the function succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97e7b-295">Appel de `Dispose` autorise les ressources utilisées par le <xref:System.Threading.Timer> à être réaffectés à d’autres fins.</span><span class="sxs-lookup"><span data-stu-id="97e7b-295">Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes.</span></span> <span data-ttu-id="97e7b-296">Pour plus d’informations sur `Dispose`, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="97e7b-296">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 <span data-ttu-id="97e7b-297">Quand cette méthode se termine, il signale le <xref:System.Threading.WaitHandle> spécifié par le `notifyObject` paramètre. Utilisez cette surcharge de la <xref:System.Threading.Timer.Dispose%2A> méthode si vous souhaitez être en mesure de bloquer jusqu'à ce que vous êtes certain que la minuterie a été supprimée.</span><span class="sxs-lookup"><span data-stu-id="97e7b-297">When this method completes, it signals the <xref:System.Threading.WaitHandle> specified by the `notifyObject` parameter.Use this overload of the <xref:System.Threading.Timer.Dispose%2A> method if you want to be able to block until you are certain that the timer has been disposed.</span></span> <span data-ttu-id="97e7b-298">La minuterie n’est pas supprimée jusqu'à ce que tous les rappels actuellement en file d’attente s’est terminé.</span><span class="sxs-lookup"><span data-stu-id="97e7b-298">The timer is not disposed until all currently queued callbacks have completed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97e7b-299">Si le rappel utilise le <xref:System.Threading.Timer.Change%2A> pour définir le `dueTime` paramètre zéro, une condition de concurrence peut se produire lorsque le <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> surcharge de méthode est appelée : si la minuterie des files d’attente un nouveau rappel avant que le <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> surcharge de méthode détecte qu’il aucun rappel n’est en attente, <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> continue à bloquer ; sinon, la minuterie est supprimée pendant le rappel nouvelle est en file d’attente et qu’un <xref:System.ObjectDisposedException> est levée lorsque le nouveau rappel appelle le <xref:System.Threading.Timer.Change%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="97e7b-299">If the callback uses the <xref:System.Threading.Timer.Change%2A> method to set the `dueTime` parameter to zero, a race condition can occur when the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload is called: If the timer queues a new callback before the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload detects that there are no callbacks queued, <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> continues to block; otherwise, the timer is disposed while the new callback is being queued, and an <xref:System.ObjectDisposedException> is thrown when the new callback calls the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97e7b-300">Le paramètre <paramref name="notifyObject" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="97e7b-300">The <paramref name="notifyObject" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>