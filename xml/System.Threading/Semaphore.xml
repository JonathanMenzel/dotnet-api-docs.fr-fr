<Type Name="Semaphore" FullName="System.Threading.Semaphore">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="312a73b1d0f299dfb59a7dcba73d3cf9dbc2bb2c" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37609194" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Semaphore : System.Threading.WaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Semaphore extends System.Threading.WaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Semaphore" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Semaphore&#xA;Inherits WaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class Semaphore sealed : System::Threading::WaitHandle" />
  <TypeSignature Language="F#" Value="type Semaphore = class&#xA;    inherit WaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="764e1-101">Limits the number of threads that can access a resource or pool of resources concurrently.</span>
      <span class="sxs-lookup">
        <span data-stu-id="764e1-101">Limits the number of threads that can access a resource or pool of resources concurrently.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="764e1-102">Utilisez la <xref:System.Threading.Semaphore> classe pour contrôler l’accès à un pool de ressources.</span><span class="sxs-lookup"><span data-stu-id="764e1-102">Use the <xref:System.Threading.Semaphore> class to control access to a pool of resources.</span></span> <span data-ttu-id="764e1-103">Threads entrent dans le sémaphore en appelant le <xref:System.Threading.WaitHandle.WaitOne%2A> (méthode), qui est hérité de la <xref:System.Threading.WaitHandle> classe et de libérer le sémaphore en appelant le <xref:System.Threading.Semaphore.Release%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="764e1-103">Threads enter the semaphore by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method, which is inherited from the <xref:System.Threading.WaitHandle> class, and release the semaphore by calling the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 <span data-ttu-id="764e1-104">Le nombre sur un sémaphore est décrémenté à chaque fois qu’un thread entre dans le sémaphore et incrémenté lorsqu’un thread libère le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-104">The count on a semaphore is decremented each time a thread enters the semaphore, and incremented when a thread releases the semaphore.</span></span> <span data-ttu-id="764e1-105">Lorsque le nombre est zéro, les demandes suivantes bloquent jusqu'à ce que les autres threads libèrent le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-105">When the count is zero, subsequent requests block until other threads release the semaphore.</span></span> <span data-ttu-id="764e1-106">Lorsque tous les threads ont libéré le sémaphore, le nombre est à la valeur maximale spécifié lors de la création du sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-106">When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.</span></span>  
  
 <span data-ttu-id="764e1-107">Il n’existe aucun ordre garanti, telles que FIFO ou LIFO, dans lequel les threads bloqués entrent dans le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-107">There is no guaranteed order, such as FIFO or LIFO, in which blocked threads enter the semaphore.</span></span>  
  
 <span data-ttu-id="764e1-108">Un thread peut entrer le sémaphore plusieurs fois, en appelant le <xref:System.Threading.WaitHandle.WaitOne%2A> méthode à plusieurs reprises.</span><span class="sxs-lookup"><span data-stu-id="764e1-108">A thread can enter the semaphore multiple times, by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method repeatedly.</span></span> <span data-ttu-id="764e1-109">Pour libérer certaines ou toutes ces entrées, le thread peut appeler sans paramètre <xref:System.Threading.Semaphore.Release> plusieurs fois, ou il peut appeler la surcharge de méthode le <xref:System.Threading.Semaphore.Release%28System.Int32%29> surcharge de méthode qui spécifie le nombre d’entrées à libérer.</span><span class="sxs-lookup"><span data-stu-id="764e1-109">To release some or all of these entries, the thread can call the parameterless <xref:System.Threading.Semaphore.Release> method overload multiple times, or it can call the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload that specifies the number of entries to be released.</span></span>  
  
 <span data-ttu-id="764e1-110">Le <xref:System.Threading.Semaphore> classe n’applique pas l’identité du thread sur les appels à <xref:System.Threading.WaitHandle.WaitOne%2A> ou <xref:System.Threading.Semaphore.Release%2A>.</span><span class="sxs-lookup"><span data-stu-id="764e1-110">The <xref:System.Threading.Semaphore> class does not enforce thread identity on calls to <xref:System.Threading.WaitHandle.WaitOne%2A> or <xref:System.Threading.Semaphore.Release%2A>.</span></span> <span data-ttu-id="764e1-111">Il est la responsabilité du programmeur pour vous assurer que threads ne libèrent pas le sémaphore trop souvent.</span><span class="sxs-lookup"><span data-stu-id="764e1-111">It is the programmer's responsibility to ensure that threads do not release the semaphore too many times.</span></span> <span data-ttu-id="764e1-112">Supposons, par exemple, qu'un sémaphore ait un nombre maximal égal à deux et que le thread A et le thread B entrent dans le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-112">For example, suppose a semaphore has a maximum count of two, and that thread A and thread B both enter the semaphore.</span></span> <span data-ttu-id="764e1-113">Si une erreur de programmation dans le thread B le conduit à appeler <xref:System.Threading.Semaphore.Release%2A> à deux reprises, les deux appels aboutiront.</span><span class="sxs-lookup"><span data-stu-id="764e1-113">If a programming error in thread B causes it to call <xref:System.Threading.Semaphore.Release%2A> twice, both calls succeed.</span></span> <span data-ttu-id="764e1-114">Le nombre maximal du sémaphore sera alors atteint, et quand le thread A appellera <xref:System.Threading.Semaphore.Release%2A>, une exception <xref:System.Threading.SemaphoreFullException> sera levée.</span><span class="sxs-lookup"><span data-stu-id="764e1-114">The count on the semaphore is full, and when thread A eventually calls <xref:System.Threading.Semaphore.Release%2A>, a <xref:System.Threading.SemaphoreFullException> is thrown.</span></span>  
  
 <span data-ttu-id="764e1-115">Les sémaphores sont de deux types : local et les sémaphores de système nommé.</span><span class="sxs-lookup"><span data-stu-id="764e1-115">Semaphores are of two types: local semaphores and named system semaphores.</span></span> <span data-ttu-id="764e1-116">Si vous créez un <xref:System.Threading.Semaphore> de l’objet à l’aide d’un constructeur qui accepte un nom, il est associé à un sémaphore système d’exploitation portant ce nom.</span><span class="sxs-lookup"><span data-stu-id="764e1-116">If you create a <xref:System.Threading.Semaphore> object using a constructor that accepts a name, it is associated with an operating-system semaphore of that name.</span></span> <span data-ttu-id="764e1-117">Système nommé sémaphores sont visibles dans tout le système d’exploitation, peuvent être utilisés pour synchroniser les activités de processus.</span><span class="sxs-lookup"><span data-stu-id="764e1-117">Named system semaphores are visible throughout the operating system, and can be used to synchronize the activities of processes.</span></span> <span data-ttu-id="764e1-118">Vous pouvez créer plusieurs <xref:System.Threading.Semaphore> les objets qui représentent le même de sémaphore système nommé, et vous pouvez utiliser le <xref:System.Threading.Semaphore.OpenExisting%2A> sémaphore système nommé de méthode pour ouvrir un existant.</span><span class="sxs-lookup"><span data-stu-id="764e1-118">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore, and you can use the <xref:System.Threading.Semaphore.OpenExisting%2A> method to open an existing named system semaphore.</span></span>  
  
 <span data-ttu-id="764e1-119">Un sémaphore local existe uniquement dans votre processus.</span><span class="sxs-lookup"><span data-stu-id="764e1-119">A local semaphore exists only within your process.</span></span> <span data-ttu-id="764e1-120">Il peut être utilisé par tout thread de votre processus qui a une référence à l’objet <xref:System.Threading.Semaphore> local.</span><span class="sxs-lookup"><span data-stu-id="764e1-120">It can be used by any thread in your process that has a reference to the local <xref:System.Threading.Semaphore> object.</span></span> <span data-ttu-id="764e1-121">Chaque <xref:System.Threading.Semaphore> objet est un sémaphore local distinct.</span><span class="sxs-lookup"><span data-stu-id="764e1-121">Each <xref:System.Threading.Semaphore> object is a separate local semaphore.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="764e1-122">L’exemple de code suivant crée un sémaphore avec un nombre maximal de trois et un nombre initial de zéro.</span><span class="sxs-lookup"><span data-stu-id="764e1-122">The following code example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="764e1-123">L’exemple démarre cinq threads, qui bloquent en attendant le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-123">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="764e1-124">Le thread principal utilise le <xref:System.Threading.Semaphore.Release%28System.Int32%29> surcharge de méthode pour augmenter le compteur du sémaphore à sa valeur maximale, en autorisant trois threads à entrer dans le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-124">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="764e1-125">Chaque thread utilise la <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> méthode pour attendre une seconde, pour simuler le travail, puis appelle le <xref:System.Threading.Semaphore.Release> surcharge de méthode pour libérer le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-125">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span> <span data-ttu-id="764e1-126">Chaque fois que le sémaphore est libéré, le compteur du sémaphore précédent s’affiche.</span><span class="sxs-lookup"><span data-stu-id="764e1-126">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="764e1-127">Console messages suivre l’utilisation sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-127">Console messages track semaphore use.</span></span> <span data-ttu-id="764e1-128">L’intervalle de travail simulé augmente légèrement à chaque thread, pour faciliter la lecture de la sortie.</span><span class="sxs-lookup"><span data-stu-id="764e1-128">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="764e1-129">Ce type est thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="764e1-129">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="764e1-130">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-130">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="764e1-131">The initial number of requests for the semaphore that can be granted concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-131">The initial number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <param name="maximumCount">
          <span data-ttu-id="764e1-132">The maximum number of requests for the semaphore that can be granted concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-132">The maximum number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="764e1-133">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-133">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="764e1-134">Ce constructeur initialise un sémaphore sans nom.</span><span class="sxs-lookup"><span data-stu-id="764e1-134">This constructor initializes an unnamed semaphore.</span></span> <span data-ttu-id="764e1-135">Tous les threads qui utilisent une instance de ce sémaphore doivent disposer de références à l’instance.</span><span class="sxs-lookup"><span data-stu-id="764e1-135">All threads that use an instance of such a semaphore must have references to the instance.</span></span>  
  
 <span data-ttu-id="764e1-136">Si `initialCount` est inférieure à `maximumCount`, l’effet est le même que si le thread actuel avait appelé <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` moins `initialCount`) fois.</span><span class="sxs-lookup"><span data-stu-id="764e1-136">If `initialCount` is less than `maximumCount`, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span> <span data-ttu-id="764e1-137">Si vous ne souhaitez pas réserver d’entrées pour le thread qui crée le sémaphore, utilisez le même nombre de `maximumCount` et `initialCount`.</span><span class="sxs-lookup"><span data-stu-id="764e1-137">If you do not want to reserve any entries for the thread that creates the semaphore, use the same number for `maximumCount` and `initialCount`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="764e1-138">L’exemple suivant crée un sémaphore avec un nombre maximal de trois et un nombre initial de zéro.</span><span class="sxs-lookup"><span data-stu-id="764e1-138">The following example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="764e1-139">L’exemple démarre cinq threads, qui bloquent en attendant le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-139">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="764e1-140">Le thread principal utilise le <xref:System.Threading.Semaphore.Release%28System.Int32%29> surcharge de méthode pour augmenter le compteur du sémaphore à sa valeur maximale, en autorisant trois threads à entrer dans le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-140">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="764e1-141">Chaque thread utilise la <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> méthode pour attendre une seconde, pour simuler le travail, puis appelle le <xref:System.Threading.Semaphore.Release> surcharge de méthode pour libérer le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-141">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span> <span data-ttu-id="764e1-142">Chaque fois que le sémaphore est libéré, le compteur du sémaphore précédent s’affiche.</span><span class="sxs-lookup"><span data-stu-id="764e1-142">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="764e1-143">Console messages suivre l’utilisation sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-143">Console messages track semaphore use.</span></span> <span data-ttu-id="764e1-144">L’intervalle de travail simulé augmente légèrement à chaque thread, pour faciliter la lecture de la sortie.</span><span class="sxs-lookup"><span data-stu-id="764e1-144">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="764e1-145">
            <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-145">
              <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="764e1-146">
            <paramref name="maximumCount" /> is less than 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-146">
              <paramref name="maximumCount" /> is less than 1.</span>
          </span>
          <span data-ttu-id="764e1-147">-or-  <paramref name="initialCount" /> is less than 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-147">-or-  <paramref name="initialCount" /> is less than 0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="764e1-148">The initial number of requests for the semaphore that can be granted concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-148">The initial number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <param name="maximumCount">
          <span data-ttu-id="764e1-149">The maximum number of requests for the semaphore that can be granted concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-149">The maximum number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="764e1-150">The name of a named system semaphore object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-150">The name of a named system semaphore object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="764e1-151">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, and optionally specifying the name of a system semaphore object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-151">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, and optionally specifying the name of a system semaphore object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="764e1-152">Ce constructeur initialise un <xref:System.Threading.Semaphore> objet qui représente un sémaphore système nommé.</span><span class="sxs-lookup"><span data-stu-id="764e1-152">This constructor initializes a <xref:System.Threading.Semaphore> object that represents a named system semaphore.</span></span> <span data-ttu-id="764e1-153">Vous pouvez créer plusieurs <xref:System.Threading.Semaphore> objets qui représentent le même de sémaphore système nommé.</span><span class="sxs-lookup"><span data-stu-id="764e1-153">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="764e1-154">Si le sémaphore système nommé n’existe pas, il est créé avec le nombre initial et le nombre maximal spécifié par `initialCount` et `maximumCount`.</span><span class="sxs-lookup"><span data-stu-id="764e1-154">If the named system semaphore does not exist, it is created with the initial count and maximum count specified by `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="764e1-155">Si le sémaphore système nommé existe déjà, `initialCount` et `maximumCount` ne sont pas utilisés, bien que les valeurs non valides provoquent encore des exceptions.</span><span class="sxs-lookup"><span data-stu-id="764e1-155">If the named system semaphore already exists, `initialCount` and `maximumCount` are not used, although invalid values still cause exceptions.</span></span> <span data-ttu-id="764e1-156">Si vous avez besoin déterminer si un sémaphore système nommé a été créé, utilisez la <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.String%2CSystem.Boolean%40%29> plutôt la surcharge de constructeur.</span><span class="sxs-lookup"><span data-stu-id="764e1-156">If you need to determine whether or not a named system semaphore was created, use the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.String%2CSystem.Boolean%40%29> constructor overload instead.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="764e1-157">Lorsque vous utilisez cette surcharge de constructeur, la pratique recommandée consiste à spécifier le même nombre de `initialCount` et `maximumCount`.</span><span class="sxs-lookup"><span data-stu-id="764e1-157">When you use this constructor overload, the recommended practice is to specify the same number for `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="764e1-158">Si `initialCount` est inférieure à `maximumCount`et un sémaphore système nommé est créé, l’effet est le même que si le thread actuel avait appelé <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` moins `initialCount`) fois.</span><span class="sxs-lookup"><span data-stu-id="764e1-158">If `initialCount` is less than `maximumCount`, and a named system semaphore is created, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span> <span data-ttu-id="764e1-159">Toutefois, avec cette surcharge de constructeur il n’existe aucun moyen pour déterminer si un sémaphore système nommé a été créé.</span><span class="sxs-lookup"><span data-stu-id="764e1-159">However, with this constructor overload there is no way to determine whether a named system semaphore was created.</span></span>  
  
 <span data-ttu-id="764e1-160">Si vous spécifiez `null` ou une chaîne vide pour `name`, un sémaphore local est créé, comme si vous aviez appelé le <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> surcharge de constructeur.</span><span class="sxs-lookup"><span data-stu-id="764e1-160">If you specify `null` or an empty string for `name`, a local semaphore is created, as if you had called the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> constructor overload.</span></span>  
  
 <span data-ttu-id="764e1-161">Étant donné que les sémaphores nommés sont visibles dans le système d’exploitation, elles peuvent servir pour coordonner l’utilisation des ressources au-delà des limites de processus.</span><span class="sxs-lookup"><span data-stu-id="764e1-161">Because named semaphores are visible throughout the operating system, they can be used to coordinate resource use across process boundaries.</span></span>  
  
 <span data-ttu-id="764e1-162">Si vous souhaitez savoir si un sémaphore système nommé existe, utilisez le <xref:System.Threading.Semaphore.OpenExisting%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="764e1-162">If you want to find out whether a named system semaphore exists, use the <xref:System.Threading.Semaphore.OpenExisting%2A> method.</span></span> <span data-ttu-id="764e1-163">Le <xref:System.Threading.Semaphore.OpenExisting%2A> méthode tente d’ouvrir un sémaphore nommé existant et lève une exception si le sémaphore système n’existe pas.</span><span class="sxs-lookup"><span data-stu-id="764e1-163">The <xref:System.Threading.Semaphore.OpenExisting%2A> method attempts to open an existing named semaphore, and throws an exception if the system semaphore does not exist.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="764e1-164">L’exemple de code suivant illustre le comportement interprocessus d’un sémaphore nommé.</span><span class="sxs-lookup"><span data-stu-id="764e1-164">The following code example demonstrates the cross-process behavior of a named semaphore.</span></span> <span data-ttu-id="764e1-165">L’exemple crée un sémaphore nommé avec un nombre maximal de cinq et un nombre initial de cinq.</span><span class="sxs-lookup"><span data-stu-id="764e1-165">The example creates a named semaphore with a maximum count of five and an initial count of five.</span></span> <span data-ttu-id="764e1-166">Le programme fait trois appels à la <xref:System.Threading.WaitHandle.WaitOne%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="764e1-166">The program makes three calls to the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="764e1-167">Par conséquent, si vous exécutez l’exemple compilé à partir de deux fenêtres de commande, la deuxième copie bloquera le troisième appel à <xref:System.Threading.WaitHandle.WaitOne%2A>.</span><span class="sxs-lookup"><span data-stu-id="764e1-167">Thus, if you run the compiled example from two command windows, the second copy will block on the third call to <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="764e1-168">Libérer une ou plusieurs entrées dans la première copie du programme pour débloquer la deuxième.</span><span class="sxs-lookup"><span data-stu-id="764e1-168">Release one or more entries in the first copy of the program to unblock the second.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="764e1-169">
            <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-169">
              <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          </span>
          <span data-ttu-id="764e1-170">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-170">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="764e1-171">
            <paramref name="maximumCount" /> is less than 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-171">
              <paramref name="maximumCount" /> is less than 1.</span>
          </span>
          <span data-ttu-id="764e1-172">-or-  <paramref name="initialCount" /> is less than 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-172">-or-  <paramref name="initialCount" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="764e1-173">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-173">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="764e1-174">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-174">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="764e1-175">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-175">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="764e1-176">pour appeler du code non managé pour créer un sémaphore système nommé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-176">for calling unmanaged code to create a named system semaphore.</span>
          </span>
          <span data-ttu-id="764e1-177">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-177">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
          <span data-ttu-id="764e1-178">Action de sécurité : <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-178">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name, [out] bool&amp; createdNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer, name As String, ByRef createdNew As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string *  -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name, createdNew)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="764e1-179">The initial number of requests for the semaphore that can be satisfied concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-179">The initial number of requests for the semaphore that can be satisfied concurrently.</span>
          </span>
        </param>
        <param name="maximumCount">
          <span data-ttu-id="764e1-180">The maximum number of requests for the semaphore that can be satisfied concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-180">The maximum number of requests for the semaphore that can be satisfied concurrently.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="764e1-181">The name of a named system semaphore object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-181">The name of a named system semaphore object.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="764e1-182">When this method returns, contains <see langword="true" /> if a local semaphore was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system semaphore was created; <see langword="false" /> if the specified named system semaphore already existed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-182">When this method returns, contains <see langword="true" /> if a local semaphore was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system semaphore was created; <see langword="false" /> if the specified named system semaphore already existed.</span>
          </span>
          <span data-ttu-id="764e1-183">This parameter is passed uninitialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-183">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="764e1-184">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, and specifying a variable that receives a value indicating whether a new system semaphore was created.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-184">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, and specifying a variable that receives a value indicating whether a new system semaphore was created.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="764e1-185">Ce constructeur initialise un <xref:System.Threading.Semaphore> objet qui représente un sémaphore système nommé.</span><span class="sxs-lookup"><span data-stu-id="764e1-185">This constructor initializes a <xref:System.Threading.Semaphore> object that represents a named system semaphore.</span></span> <span data-ttu-id="764e1-186">Vous pouvez créer plusieurs <xref:System.Threading.Semaphore> objets qui représentent le même de sémaphore système nommé.</span><span class="sxs-lookup"><span data-stu-id="764e1-186">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="764e1-187">Si le sémaphore système nommé n’existe pas, il est créé avec le nombre initial et le nombre maximal spécifié par `initialCount` et `maximumCount`.</span><span class="sxs-lookup"><span data-stu-id="764e1-187">If the named system semaphore does not exist, it is created with the initial count and maximum count specified by `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="764e1-188">Si le sémaphore système nommé existe déjà, `initialCount` et `maximumCount` ne sont pas utilisés, bien que les valeurs non valides provoquent encore des exceptions.</span><span class="sxs-lookup"><span data-stu-id="764e1-188">If the named system semaphore already exists, `initialCount` and `maximumCount` are not used, although invalid values still cause exceptions.</span></span> <span data-ttu-id="764e1-189">Utilisez `createdNew` pour déterminer si le sémaphore système a été créé.</span><span class="sxs-lookup"><span data-stu-id="764e1-189">Use `createdNew` to determine whether the system semaphore was created.</span></span>  
  
 <span data-ttu-id="764e1-190">Si `initialCount` est inférieure à `maximumCount`, et `createdNew` est `true`, l’effet est le même que si le thread actuel avait appelé <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` moins `initialCount`) fois.</span><span class="sxs-lookup"><span data-stu-id="764e1-190">If `initialCount` is less than `maximumCount`, and `createdNew` is `true`, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span>  
  
 <span data-ttu-id="764e1-191">Si vous spécifiez `null` ou une chaîne vide pour `name`, un sémaphore local est créé, comme si vous aviez appelé le <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> surcharge de constructeur.</span><span class="sxs-lookup"><span data-stu-id="764e1-191">If you specify `null` or an empty string for `name`, a local semaphore is created, as if you had called the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> constructor overload.</span></span> <span data-ttu-id="764e1-192">Dans ce cas, `createdNew` est toujours `true`.</span><span class="sxs-lookup"><span data-stu-id="764e1-192">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="764e1-193">Étant donné que les sémaphores nommés sont visibles dans le système d’exploitation, elles peuvent servir pour coordonner l’utilisation des ressources au-delà des limites de processus.</span><span class="sxs-lookup"><span data-stu-id="764e1-193">Because named semaphores are visible throughout the operating system, they can be used to coordinate resource use across process boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="764e1-194">L’exemple de code suivant illustre le comportement interprocessus d’un sémaphore nommé.</span><span class="sxs-lookup"><span data-stu-id="764e1-194">The following code example demonstrates the cross-process behavior of a named semaphore.</span></span> <span data-ttu-id="764e1-195">L’exemple crée un sémaphore nommé avec un nombre maximal de cinq et un nombre initial de deux.</span><span class="sxs-lookup"><span data-stu-id="764e1-195">The example creates a named semaphore with a maximum count of five and an initial count of two.</span></span> <span data-ttu-id="764e1-196">Autrement dit, il réserve trois entrées pour le thread qui appelle le constructeur.</span><span class="sxs-lookup"><span data-stu-id="764e1-196">That is, it reserves three entries for the thread that calls the constructor.</span></span> <span data-ttu-id="764e1-197">Si `createNew` est `false`, le programme fait trois appels à la <xref:System.Threading.WaitHandle.WaitOne%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="764e1-197">If `createNew` is `false`, the program makes three calls to the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="764e1-198">Par conséquent, si vous exécutez l’exemple compilé à partir de deux fenêtres de commande, la deuxième copie bloquera le troisième appel à <xref:System.Threading.WaitHandle.WaitOne%2A>.</span><span class="sxs-lookup"><span data-stu-id="764e1-198">Thus, if you run the compiled example from two command windows, the second copy will block on the third call to <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="764e1-199">Libérer une ou plusieurs entrées dans la première copie du programme pour débloquer la deuxième.</span><span class="sxs-lookup"><span data-stu-id="764e1-199">Release one or more entries in the first copy of the program to unblock the second.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="764e1-200">
            <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-200">
              <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          </span>
          <span data-ttu-id="764e1-201">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-201">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="764e1-202">
            <paramref name="maximumCount" /> is less than 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-202">
              <paramref name="maximumCount" /> is less than 1.</span>
          </span>
          <span data-ttu-id="764e1-203">-or-  <paramref name="initialCount" /> is less than 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-203">-or-  <paramref name="initialCount" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="764e1-204">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-204">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="764e1-205">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-205">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="764e1-206">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-206">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="764e1-207">pour appeler du code non managé pour créer un sémaphore système nommé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-207">for calling unmanaged code to create a named system semaphore.</span>
          </span>
          <span data-ttu-id="764e1-208">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-208">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
          <span data-ttu-id="764e1-209">Action de sécurité : <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-209">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew, System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@,System.Security.AccessControl.SemaphoreSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::SemaphoreSecurity ^ semaphoreSecurity);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string *  * System.Security.AccessControl.SemaphoreSecurity -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name, createdNew, semaphoreSecurity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean&amp;" RefType="out" />
        <Parameter Name="semaphoreSecurity" Type="System.Security.AccessControl.SemaphoreSecurity" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="764e1-210">The initial number of requests for the semaphore that can be satisfied concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-210">The initial number of requests for the semaphore that can be satisfied concurrently.</span>
          </span>
        </param>
        <param name="maximumCount">
          <span data-ttu-id="764e1-211">The maximum number of requests for the semaphore that can be satisfied concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-211">The maximum number of requests for the semaphore that can be satisfied concurrently.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="764e1-212">The name of a named system semaphore object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-212">The name of a named system semaphore object.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="764e1-213">When this method returns, contains <see langword="true" /> if a local semaphore was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system semaphore was created; <see langword="false" /> if the specified named system semaphore already existed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-213">When this method returns, contains <see langword="true" /> if a local semaphore was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system semaphore was created; <see langword="false" /> if the specified named system semaphore already existed.</span>
          </span>
          <span data-ttu-id="764e1-214">This parameter is passed uninitialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-214">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <param name="semaphoreSecurity">
          <span data-ttu-id="764e1-215">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security to be applied to the named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-215">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security to be applied to the named system semaphore.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="764e1-216">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, specifying a variable that receives a value indicating whether a new system semaphore was created, and specifying security access control for the system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-216">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, specifying a variable that receives a value indicating whether a new system semaphore was created, and specifying security access control for the system semaphore.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="764e1-217">Utilisez ce constructeur pour appliquer la sécurité de contrôle d’accès pour un sémaphore système nommé lors de sa création, en empêchant l’autre code de prendre le contrôle du sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-217">Use this constructor to apply access control security to a named system semaphore when it is created, preventing other code from taking control of the semaphore.</span></span>  
  
 <span data-ttu-id="764e1-218">Ce constructeur initialise un <xref:System.Threading.Semaphore> objet qui représente un sémaphore système nommé.</span><span class="sxs-lookup"><span data-stu-id="764e1-218">This constructor initializes a <xref:System.Threading.Semaphore> object that represents a named system semaphore.</span></span> <span data-ttu-id="764e1-219">Vous pouvez créer plusieurs <xref:System.Threading.Semaphore> objets qui représentent le même de sémaphore système nommé.</span><span class="sxs-lookup"><span data-stu-id="764e1-219">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="764e1-220">Si le sémaphore système nommé n’existe pas, il est créé avec la sécurité de contrôle d’accès spécifié.</span><span class="sxs-lookup"><span data-stu-id="764e1-220">If the named system semaphore does not exist, it is created with the specified access control security.</span></span> <span data-ttu-id="764e1-221">Si le sémaphore nommé existe, la sécurité de contrôle d’accès spécifié est ignorée.</span><span class="sxs-lookup"><span data-stu-id="764e1-221">If the named semaphore exists, the specified access control security is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="764e1-222">L’appelant a un contrôle total sur nouvellement créé <xref:System.Threading.Semaphore> objet voire si `semaphoreSecurity` refuse ou ne parvient pas à accorder des droits d’accès à l’utilisateur actuel.</span><span class="sxs-lookup"><span data-stu-id="764e1-222">The caller has full control over the newly created <xref:System.Threading.Semaphore> object even if `semaphoreSecurity` denies or fails to grant some access rights to the current user.</span></span> <span data-ttu-id="764e1-223">Toutefois, si l’utilisateur actuel tente d’obtenir un autre <xref:System.Threading.Semaphore> pour représenter le même nommé sémaphore, en utilisant un constructeur de l’objet ou le <xref:System.Threading.Semaphore.OpenExisting%2A> (méthode), Windows sécurité de contrôle d’accès est appliquée.</span><span class="sxs-lookup"><span data-stu-id="764e1-223">However, if the current user attempts to get another <xref:System.Threading.Semaphore> object to represent the same named semaphore, using either a constructor or the <xref:System.Threading.Semaphore.OpenExisting%2A> method, Windows access control security is applied.</span></span>  
  
 <span data-ttu-id="764e1-224">Si le sémaphore système nommé n’existe pas, il est créé avec le nombre initial et le nombre maximal spécifié par `initialCount` et `maximumCount`.</span><span class="sxs-lookup"><span data-stu-id="764e1-224">If the named system semaphore does not exist, it is created with the initial count and maximum count specified by `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="764e1-225">Si le sémaphore système nommé existe déjà, `initialCount` et `maximumCount` ne sont pas utilisés, bien que les valeurs non valides provoquent encore des exceptions.</span><span class="sxs-lookup"><span data-stu-id="764e1-225">If the named system semaphore already exists, `initialCount` and `maximumCount` are not used, although invalid values still cause exceptions.</span></span> <span data-ttu-id="764e1-226">Utilisez le `createdNew` paramètre pour déterminer si le sémaphore système a été créé par ce constructeur.</span><span class="sxs-lookup"><span data-stu-id="764e1-226">Use the `createdNew` parameter to determine whether the system semaphore was created by this constructor.</span></span>  
  
 <span data-ttu-id="764e1-227">Si `initialCount` est inférieure à `maximumCount`, et `createdNew` est `true`, l’effet est le même que si le thread actuel avait appelé <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` moins `initialCount`) fois.</span><span class="sxs-lookup"><span data-stu-id="764e1-227">If `initialCount` is less than `maximumCount`, and `createdNew` is `true`, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span>  
  
 <span data-ttu-id="764e1-228">Si vous spécifiez `null` ou une chaîne vide pour `name`, un sémaphore local est créé, comme si vous aviez appelé le <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> surcharge de constructeur.</span><span class="sxs-lookup"><span data-stu-id="764e1-228">If you specify `null` or an empty string for `name`, a local semaphore is created, as if you had called the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> constructor overload.</span></span> <span data-ttu-id="764e1-229">Dans ce cas, `createdNew` est toujours `true`.</span><span class="sxs-lookup"><span data-stu-id="764e1-229">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="764e1-230">Étant donné que les sémaphores nommés sont visibles dans le système d’exploitation, elles peuvent servir pour coordonner l’utilisation des ressources au-delà des limites de processus.</span><span class="sxs-lookup"><span data-stu-id="764e1-230">Because named semaphores are visible throughout the operating system, they can be used to coordinate resource use across process boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="764e1-231">L’exemple de code suivant illustre le comportement interprocessus d’un sémaphore nommé avec une sécurité de contrôle d’accès.</span><span class="sxs-lookup"><span data-stu-id="764e1-231">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="764e1-232">L’exemple utilise le <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> surcharge de méthode pour tester l’existence d’un sémaphore nommé.</span><span class="sxs-lookup"><span data-stu-id="764e1-232">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span> <span data-ttu-id="764e1-233">Si le sémaphore n’existe pas, il est créé avec un nombre maximal de deux et avec la sécurité de contrôle d’accès qui refuse l’utilisateur actuel le droit d’utiliser le sémaphore mais accorde le droit de lire et modifier les autorisations sur le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-233">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore but grants the right to read and change permissions on the semaphore.</span></span> <span data-ttu-id="764e1-234">Si vous exécutez l’exemple compilé à partir de deux fenêtres de commande, la deuxième copie lève une exception de violation d’accès sur l’appel à la <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="764e1-234">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="764e1-235">L’exception est interceptée et l’exemple utilise le <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> surcharge de méthode pour ouvrir le sémaphore avec les droits nécessaires pour lire et modifier les autorisations.</span><span class="sxs-lookup"><span data-stu-id="764e1-235">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="764e1-236">Une fois que les autorisations sont modifiées, le sémaphore est ouvert avec les droits nécessaires à l’entrée et de libération.</span><span class="sxs-lookup"><span data-stu-id="764e1-236">After the permissions are changed, the semaphore is opened with the rights required to enter and release.</span></span> <span data-ttu-id="764e1-237">Si vous exécutez l’exemple compilé à partir d’une troisième fenêtre de commande, il s’exécute à l’aide des nouvelles autorisations.</span><span class="sxs-lookup"><span data-stu-id="764e1-237">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="764e1-238">
            <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-238">
              <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          </span>
          <span data-ttu-id="764e1-239">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-239">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="764e1-240">
            <paramref name="maximumCount" /> is less than 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-240">
              <paramref name="maximumCount" /> is less than 1.</span>
          </span>
          <span data-ttu-id="764e1-241">-or-  <paramref name="initialCount" /> is less than 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-241">-or-  <paramref name="initialCount" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="764e1-242">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-242">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="764e1-243">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-243">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="764e1-244">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-244">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="764e1-245">pour appeler du code non managé pour créer un sémaphore système nommé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-245">for calling unmanaged code to create a named system semaphore.</span>
          </span>
          <span data-ttu-id="764e1-246">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-246">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
          <span data-ttu-id="764e1-247">Action de sécurité : <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-247">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.SemaphoreSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.SemaphoreSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As SemaphoreSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::SemaphoreSecurity ^ GetAccessControl();" />
      <MemberSignature Language="F#" Value="member this.GetAccessControl : unit -&gt; System.Security.AccessControl.SemaphoreSecurity" Usage="semaphore.GetAccessControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="764e1-248">Gets the access control security for a named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-248">Gets the access control security for a named system semaphore.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="764e1-249">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security for the named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-249">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security for the named system semaphore.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="764e1-250">Le <xref:System.Threading.Semaphore.GetAccessControl%2A> méthode utilise la combinaison d’indicateurs (combinées à l’aide de l’opération OR au niveau du bit) suivante pour rechercher des autorisations : <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, et <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="764e1-250">The <xref:System.Threading.Semaphore.GetAccessControl%2A> method uses the following combination of flags (combined using the bitwise OR operation) to search for permissions: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, and <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="764e1-251">L’utilisateur doit avoir <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> droits pour appeler cette méthode et le sémaphore doivent avoir été ouvert avec <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> droits.</span><span class="sxs-lookup"><span data-stu-id="764e1-251">The user must have <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> rights to call this method, and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> rights.</span></span>  
  
 <span data-ttu-id="764e1-252">Sur un sémaphore local, la sécurité de contrôle d’accès est sans importance.</span><span class="sxs-lookup"><span data-stu-id="764e1-252">On a local semaphore, access control security is irrelevant.</span></span> <span data-ttu-id="764e1-253">Si le <xref:System.Threading.Semaphore> objet ne représente pas un sémaphore système nommé, cette méthode retourne un <xref:System.Security.AccessControl.SemaphoreSecurity> objet qui accorde tous les droits à tout utilisateur.</span><span class="sxs-lookup"><span data-stu-id="764e1-253">If the <xref:System.Threading.Semaphore> object does not represent a named system semaphore, this method returns a <xref:System.Security.AccessControl.SemaphoreSecurity> object that grants all rights to any user.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="764e1-254">L’exemple de code suivant illustre le comportement interprocessus d’un sémaphore nommé avec une sécurité de contrôle d’accès.</span><span class="sxs-lookup"><span data-stu-id="764e1-254">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="764e1-255">L’exemple utilise le <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> surcharge de méthode pour tester l’existence d’un sémaphore nommé.</span><span class="sxs-lookup"><span data-stu-id="764e1-255">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="764e1-256">Si le sémaphore n’existe pas, il est créé avec un nombre maximal de deux et avec la sécurité de contrôle d’accès qui refuse l’utilisateur actuel le droit d’utiliser le sémaphore, mais qui accorde le droit de lire et modifier les autorisations sur le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-256">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore, but grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="764e1-257">Si vous exécutez l’exemple compilé à partir de deux fenêtres de commande, la deuxième copie lève une exception de violation d’accès sur l’appel à la <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="764e1-257">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="764e1-258">L’exception est interceptée et l’exemple utilise le <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> surcharge de méthode pour ouvrir le sémaphore avec les droits nécessaires pour lire et modifier les autorisations.</span><span class="sxs-lookup"><span data-stu-id="764e1-258">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span> <span data-ttu-id="764e1-259">La sécurité de contrôle d’accès pour le sémaphore système est obtenue en utilisant la <xref:System.Threading.Semaphore.GetAccessControl%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="764e1-259">The access control security for the system semaphore is obtained using the <xref:System.Threading.Semaphore.GetAccessControl%2A> method.</span></span>  
  
 <span data-ttu-id="764e1-260">Une fois que les autorisations sont modifiées, le sémaphore est ouvert avec les droits nécessaires à l’entrée et de libération.</span><span class="sxs-lookup"><span data-stu-id="764e1-260">After the permissions are changed, the semaphore is opened with the rights required to enter and release.</span></span> <span data-ttu-id="764e1-261">Si vous exécutez l’exemple compilé à partir d’une troisième fenêtre de commande, il s’exécute à l’aide des nouvelles autorisations.</span><span class="sxs-lookup"><span data-stu-id="764e1-261">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="764e1-262">The current <see cref="T:System.Threading.Semaphore" /> object represents a named system semaphore, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-262">The current <see cref="T:System.Threading.Semaphore" /> object represents a named system semaphore, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> rights.</span>
          </span>
          <span data-ttu-id="764e1-263">-or-  The current <see cref="T:System.Threading.Semaphore" /> object represents a named system semaphore and was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-263">-or-  The current <see cref="T:System.Threading.Semaphore" /> object represents a named system semaphore and was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> rights.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="764e1-264">Not supported for Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-264">Not supported for Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="764e1-265">Opens a specified named semaphore, if it already exists.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-265">Opens a specified named semaphore, if it already exists.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Semaphore OpenExisting (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Semaphore OpenExisting(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.OpenExisting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String) As Semaphore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Semaphore ^ OpenExisting(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string -&gt; System.Threading.Semaphore" Usage="System.Threading.Semaphore.OpenExisting name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Semaphore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="764e1-266">The name of the system semaphore to open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-266">The name of the system semaphore to open.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="764e1-267">Opens the specified named semaphore, if it already exists.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-267">Opens the specified named semaphore, if it already exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="764e1-268">An object that represents the named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-268">An object that represents the named system semaphore.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="764e1-269">Le <xref:System.Threading.Semaphore.OpenExisting%2A> méthode tente d’ouvrir le sémaphore nommé spécifié.</span><span class="sxs-lookup"><span data-stu-id="764e1-269">The <xref:System.Threading.Semaphore.OpenExisting%2A> method tries to open the specified named semaphore.</span></span> <span data-ttu-id="764e1-270">Si le sémaphore système n’existe pas, cette méthode lève une exception au lieu de créer le sémaphore système.</span><span class="sxs-lookup"><span data-stu-id="764e1-270">If the system semaphore does not exist, this method throws an exception instead of creating the system semaphore.</span></span> <span data-ttu-id="764e1-271">Pour créer le sémaphore système lorsqu’il n’existe pas déjà, utilisez une de la <xref:System.Threading.Semaphore.%23ctor%2A> constructeurs qui a un `name` paramètre.</span><span class="sxs-lookup"><span data-stu-id="764e1-271">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="764e1-272">Plusieurs appels à cette méthode qui utilisent la même valeur pour `name` ne retournent pas nécessairement le même <xref:System.Threading.Semaphore> de l’objet, même si les objets retournés représentent le même sémaphore système nommé.</span><span class="sxs-lookup"><span data-stu-id="764e1-272">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Semaphore> object, even though the objects that are returned represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="764e1-273">Cette surcharge de méthode revient à appeler le <xref:System.Threading.Semaphore.OpenExisting%2A> surcharge de méthode et en spécifiant <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> et <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> droits, combinés à l’aide de l’opération OR au niveau du bit.</span><span class="sxs-lookup"><span data-stu-id="764e1-273">This method overload is equivalent to calling the <xref:System.Threading.Semaphore.OpenExisting%2A> method overload and specifying <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span>  
  
 <span data-ttu-id="764e1-274">En spécifiant le <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> indicateur permet d’entrer dans le sémaphore, un thread et en spécifiant le <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> indicateur permet à un thread d’appeler le <xref:System.Threading.Semaphore.Release%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="764e1-274">Specifying the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag allows a thread to enter the semaphore, and specifying the <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="764e1-275">L’exemple de code suivant illustre le comportement interprocessus d’un sémaphore nommé avec une sécurité de contrôle d’accès.</span><span class="sxs-lookup"><span data-stu-id="764e1-275">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="764e1-276">L’exemple utilise le <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> surcharge de méthode pour tester l’existence d’un sémaphore nommé.</span><span class="sxs-lookup"><span data-stu-id="764e1-276">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="764e1-277">Si le sémaphore n’existe pas, il est créé avec un nombre maximal de deux et avec la sécurité de contrôle d’accès qui refuse à l’utilisateur actuel le droit d’utiliser le sémaphore, mais qui accorde le droit de lire et modifier les autorisations sur le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-277">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore, but which grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="764e1-278">Si vous exécutez l’exemple compilé à partir de deux fenêtres de commande, la deuxième copie lève une exception de violation d’accès sur l’appel à la <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="764e1-278">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload.</span></span> <span data-ttu-id="764e1-279">L’exception est interceptée et l’exemple utilise le <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> surcharge de méthode pour ouvrir le sémaphore avec les droits nécessaires pour lire et modifier les autorisations.</span><span class="sxs-lookup"><span data-stu-id="764e1-279">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="764e1-280">Une fois que les autorisations sont modifiées, le sémaphore est ouvert avec les droits nécessaires à l’entrée et de libération.</span><span class="sxs-lookup"><span data-stu-id="764e1-280">After the permissions are changed, the semaphore is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="764e1-281">Si vous exécutez l’exemple compilé à partir d’une troisième fenêtre de commande, il s’exécute à l’aide des nouvelles autorisations.</span><span class="sxs-lookup"><span data-stu-id="764e1-281">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="764e1-282">
            <paramref name="name" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-282">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="764e1-283">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-283">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="764e1-284">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-284">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="764e1-285">The named semaphore does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-285">The named semaphore does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="764e1-286">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-286">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="764e1-287">The named semaphore exists, but the user does not have the security access required to use it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-287">The named semaphore exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="764e1-288">pour appeler du code non managé pour ouvrir un sémaphore système nommé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-288">for calling unmanaged code to open a named system semaphore.</span>
          </span>
          <span data-ttu-id="764e1-289">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-289">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
          <span data-ttu-id="764e1-290">Action de sécurité : <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-290">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Semaphore OpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Semaphore OpenExisting(string name, valuetype System.Security.AccessControl.SemaphoreRights rights) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.OpenExisting(System.String,System.Security.AccessControl.SemaphoreRights)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String, rights As SemaphoreRights) As Semaphore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Semaphore ^ OpenExisting(System::String ^ name, System::Security::AccessControl::SemaphoreRights rights);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string * System.Security.AccessControl.SemaphoreRights -&gt; System.Threading.Semaphore" Usage="System.Threading.Semaphore.OpenExisting (name, rights)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Semaphore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.SemaphoreRights" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="764e1-291">The name of the system semaphore to open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-291">The name of the system semaphore to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="764e1-292">A bitwise combination of the enumeration values that represent the desired security access.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-292">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="764e1-293">Opens the specified named semaphore, if it already exists, with the desired security access.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-293">Opens the specified named semaphore, if it already exists, with the desired security access.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="764e1-294">An object that represents the named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-294">An object that represents the named system semaphore.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="764e1-295">Le `rights` paramètre doit inclure le <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> indicateur pour permettre aux threads d’entrer dans le sémaphore et le <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> indicateur pour permettre d’appeler le <xref:System.Threading.Semaphore.Release%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="764e1-295">The `rights` parameter must include the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag to allow threads to enter the semaphore, and the <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 <span data-ttu-id="764e1-296">Le <xref:System.Threading.Semaphore.OpenExisting%2A> méthode tente d’ouvrir un sémaphore nommé existant.</span><span class="sxs-lookup"><span data-stu-id="764e1-296">The <xref:System.Threading.Semaphore.OpenExisting%2A> method tries to open an existing named semaphore.</span></span> <span data-ttu-id="764e1-297">Si le sémaphore système n’existe pas, cette méthode lève une exception au lieu de créer le sémaphore système.</span><span class="sxs-lookup"><span data-stu-id="764e1-297">If the system semaphore does not exist, this method throws an exception instead of creating the system semaphore.</span></span> <span data-ttu-id="764e1-298">Pour créer le sémaphore système lorsqu’il n’existe pas déjà, utilisez une de la <xref:System.Threading.Semaphore.%23ctor%2A> constructeurs qui a un `name` paramètre.</span><span class="sxs-lookup"><span data-stu-id="764e1-298">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="764e1-299">Plusieurs appels à cette méthode qui utilisent la même valeur pour `name` ne retournent pas nécessairement le même <xref:System.Threading.Semaphore> de l’objet, même si les objets retournés représentent le même sémaphore système nommé.</span><span class="sxs-lookup"><span data-stu-id="764e1-299">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Semaphore> object, even though the objects that are returned represent the same named system semaphore.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="764e1-300">L’exemple de code suivant illustre le comportement interprocessus d’un sémaphore nommé avec une sécurité de contrôle d’accès.</span><span class="sxs-lookup"><span data-stu-id="764e1-300">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="764e1-301">L’exemple utilise le <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> surcharge de méthode pour tester l’existence d’un sémaphore nommé.</span><span class="sxs-lookup"><span data-stu-id="764e1-301">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="764e1-302">Si le sémaphore n’existe pas, il est créé avec un nombre maximal de deux et avec la sécurité de contrôle d’accès qui refuse l’utilisateur actuel le droit d’utiliser le sémaphore, mais qui accorde le droit de lire et modifier les autorisations sur le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-302">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore, but grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="764e1-303">Si vous exécutez l’exemple compilé à partir de deux fenêtres de commande, la deuxième copie lève une exception de violation d’accès sur l’appel à la <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="764e1-303">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="764e1-304">L’exception est interceptée et l’exemple utilise le <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> surcharge de méthode pour ouvrir le sémaphore avec les droits nécessaires pour lire et modifier les autorisations.</span><span class="sxs-lookup"><span data-stu-id="764e1-304">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="764e1-305">Une fois que les autorisations sont modifiées, le sémaphore est ouvert avec les droits nécessaires à l’entrée et de libération.</span><span class="sxs-lookup"><span data-stu-id="764e1-305">After the permissions are changed, the semaphore is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="764e1-306">Si vous exécutez l’exemple compilé à partir d’une troisième fenêtre de commande, il s’exécute à l’aide des nouvelles autorisations.</span><span class="sxs-lookup"><span data-stu-id="764e1-306">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="764e1-307">
            <paramref name="name" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-307">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="764e1-308">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-308">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="764e1-309">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-309">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="764e1-310">The named semaphore does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-310">The named semaphore does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="764e1-311">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-311">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="764e1-312">The named semaphore exists, but the user does not have the desired security access rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-312">The named semaphore exists, but the user does not have the desired security access rights.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="764e1-313">pour appeler du code non managé pour créer un sémaphore système nommé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-313">for calling unmanaged code to create a named system semaphore.</span>
          </span>
          <span data-ttu-id="764e1-314">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-314">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
          <span data-ttu-id="764e1-315">Action de sécurité : <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-315">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Release">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="764e1-316">Exits the semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-316">Exits the semaphore.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.Release" />
      <MemberSignature Language="VB.NET" Value="Public Function Release () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release();" />
      <MemberSignature Language="F#" Value="member this.Release : unit -&gt; int" Usage="semaphore.Release " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.PrePrepareMethod</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="764e1-317">Exits the semaphore and returns the previous count.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-317">Exits the semaphore and returns the previous count.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="764e1-318">The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release" /> method was called.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-318">The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release" /> method was called.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="764e1-319">Les threads utilisent généralement le <xref:System.Threading.WaitHandle.WaitOne%2A> méthode permet d’entrer le sémaphore et ils généralement utiliser cette surcharge de méthode pour quitter.</span><span class="sxs-lookup"><span data-stu-id="764e1-319">Threads typically use the <xref:System.Threading.WaitHandle.WaitOne%2A> method to enter the semaphore, and they typically use this method overload to exit.</span></span>  
  
 <span data-ttu-id="764e1-320">Si un <xref:System.Threading.SemaphoreFullException> est levée par le <xref:System.Threading.Semaphore.Release%2A> (méthode), il n’indique pas nécessairement un problème avec le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="764e1-320">If a <xref:System.Threading.SemaphoreFullException> is thrown by the <xref:System.Threading.Semaphore.Release%2A> method, it does not necessarily indicate a problem with the calling thread.</span></span> <span data-ttu-id="764e1-321">Une erreur de programmation dans un autre thread peut avoir provoqué ce thread quitte le sémaphore fois plus important qu’il a entré.</span><span class="sxs-lookup"><span data-stu-id="764e1-321">A programming error in another thread might have caused that thread to exit the semaphore more times than it entered.</span></span>  
  
 <span data-ttu-id="764e1-322">Si actuel <xref:System.Threading.Semaphore> objet représente un sémaphore système nommé, l’utilisateur doit avoir <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> droits et le sémaphore doivent avoir été ouvert avec <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> droits.</span><span class="sxs-lookup"><span data-stu-id="764e1-322">If the current <xref:System.Threading.Semaphore> object represents a named system semaphore, the user must have <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="764e1-323">L’exemple de code suivant crée un sémaphore avec un nombre maximal de trois et un nombre initial de zéro.</span><span class="sxs-lookup"><span data-stu-id="764e1-323">The following code example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="764e1-324">L’exemple démarre cinq threads, qui bloquent en attendant le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-324">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="764e1-325">Le thread principal utilise le <xref:System.Threading.Semaphore.Release%28System.Int32%29> surcharge de méthode pour augmenter le compteur du sémaphore à sa valeur maximale, en autorisant trois threads à entrer dans le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-325">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="764e1-326">Chaque thread utilise la <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> méthode pour attendre une seconde, pour simuler le travail, puis appelle le <xref:System.Threading.Semaphore.Release> surcharge de méthode pour libérer le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-326">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span>  
  
 <span data-ttu-id="764e1-327">Chaque fois que le sémaphore est libéré, le compteur du sémaphore précédent s’affiche.</span><span class="sxs-lookup"><span data-stu-id="764e1-327">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="764e1-328">Console messages suivre l’utilisation sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-328">Console messages track semaphore use.</span></span> <span data-ttu-id="764e1-329">L’intervalle de travail simulé augmente légèrement à chaque thread, pour faciliter la lecture de la sortie.</span><span class="sxs-lookup"><span data-stu-id="764e1-329">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SemaphoreFullException">
          <span data-ttu-id="764e1-330">The semaphore count is already at the maximum value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-330">The semaphore count is already at the maximum value.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="764e1-331">A Win32 error occurred with a named semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-331">A Win32 error occurred with a named semaphore.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="764e1-332">The current semaphore represents a named system semaphore, but the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-332">The current semaphore represents a named system semaphore, but the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span>
          </span>
          <span data-ttu-id="764e1-333">-or-  The current semaphore represents a named system semaphore, but it was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-333">-or-  The current semaphore represents a named system semaphore, but it was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release (int releaseCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release(int32 releaseCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.Release(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Release (releaseCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release(int releaseCount);" />
      <MemberSignature Language="F#" Value="member this.Release : int -&gt; int" Usage="semaphore.Release releaseCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="releaseCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="releaseCount">
          <span data-ttu-id="764e1-334">The number of times to exit the semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-334">The number of times to exit the semaphore.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="764e1-335">Exits the semaphore a specified number of times and returns the previous count.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-335">Exits the semaphore a specified number of times and returns the previous count.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="764e1-336">The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release" /> method was called.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-336">The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release" /> method was called.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="764e1-337">Si un thread a entré le sémaphore plusieurs fois, cette surcharge de méthode permet le compteur du sémaphore entière à être restaurée avec un seul appel.</span><span class="sxs-lookup"><span data-stu-id="764e1-337">If a thread has entered the semaphore multiple times, this method overload allows the entire semaphore count to be restored with one call.</span></span>  
  
 <span data-ttu-id="764e1-338">Si un <xref:System.Threading.SemaphoreFullException> est levée par le <xref:System.Threading.Semaphore.Release%2A> (méthode), il n’indique pas nécessairement un problème avec le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="764e1-338">If a <xref:System.Threading.SemaphoreFullException> is thrown by the <xref:System.Threading.Semaphore.Release%2A> method, it does not necessarily indicate a problem with the calling thread.</span></span> <span data-ttu-id="764e1-339">Une erreur de programmation dans un autre thread peut avoir provoqué ce thread quitte le sémaphore fois plus important qu’il a entré.</span><span class="sxs-lookup"><span data-stu-id="764e1-339">A programming error in another thread might have caused that thread to exit the semaphore more times than it entered.</span></span>  
  
 <span data-ttu-id="764e1-340">Si actuel <xref:System.Threading.Semaphore> objet représente un sémaphore système nommé, l’utilisateur doit avoir <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> droits et le sémaphore doivent avoir été ouvert avec <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> droits.</span><span class="sxs-lookup"><span data-stu-id="764e1-340">If the current <xref:System.Threading.Semaphore> object represents a named system semaphore, the user must have <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="764e1-341">L’exemple de code suivant crée un sémaphore avec un nombre maximal de trois et un nombre initial de zéro.</span><span class="sxs-lookup"><span data-stu-id="764e1-341">The following code example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="764e1-342">L’exemple démarre cinq threads, qui bloquent en attendant le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-342">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="764e1-343">Le thread principal utilise le <xref:System.Threading.Semaphore.Release%28System.Int32%29> surcharge de méthode pour augmenter le compteur du sémaphore à sa valeur maximale, en autorisant trois threads à entrer dans le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-343">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="764e1-344">Chaque thread utilise la <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> méthode pour attendre une seconde, pour simuler le travail, puis appelle le <xref:System.Threading.Semaphore.Release> surcharge de méthode pour libérer le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-344">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span>  
  
 <span data-ttu-id="764e1-345">Chaque fois que le sémaphore est libéré, le compteur du sémaphore précédent s’affiche.</span><span class="sxs-lookup"><span data-stu-id="764e1-345">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="764e1-346">Console messages suivre l’utilisation sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-346">Console messages track semaphore use.</span></span> <span data-ttu-id="764e1-347">L’intervalle de travail simulé augmente légèrement à chaque thread, pour faciliter la lecture de la sortie.</span><span class="sxs-lookup"><span data-stu-id="764e1-347">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="764e1-348">
            <paramref name="releaseCount" /> is less than 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-348">
              <paramref name="releaseCount" /> is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SemaphoreFullException">
          <span data-ttu-id="764e1-349">The semaphore count is already at the maximum value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-349">The semaphore count is already at the maximum value.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="764e1-350">A Win32 error occurred with a named semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-350">A Win32 error occurred with a named semaphore.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="764e1-351">The current semaphore represents a named system semaphore, but the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-351">The current semaphore represents a named system semaphore, but the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> rights.</span>
          </span>
          <span data-ttu-id="764e1-352">-or-  The current semaphore represents a named system semaphore, but it was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-352">-or-  The current semaphore represents a named system semaphore, but it was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> rights.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::SemaphoreSecurity ^ semaphoreSecurity);" />
      <MemberSignature Language="F#" Value="member this.SetAccessControl : System.Security.AccessControl.SemaphoreSecurity -&gt; unit" Usage="semaphore.SetAccessControl semaphoreSecurity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semaphoreSecurity" Type="System.Security.AccessControl.SemaphoreSecurity" />
      </Parameters>
      <Docs>
        <param name="semaphoreSecurity">
          <span data-ttu-id="764e1-353">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security to be applied to the named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-353">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security to be applied to the named system semaphore.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="764e1-354">Sets the access control security for a named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-354">Sets the access control security for a named system semaphore.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="764e1-355">Vous pouvez définir la sécurité de contrôle d’accès uniquement sur <xref:System.Threading.Semaphore> objets qui représentent des sémaphores de système nommé.</span><span class="sxs-lookup"><span data-stu-id="764e1-355">You can set access control security only on <xref:System.Threading.Semaphore> objects that represent named system semaphores.</span></span>  
  
 <span data-ttu-id="764e1-356">L’utilisateur doit avoir <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> droits pour appeler cette méthode et le sémaphore doivent avoir été ouvert avec <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> droits.</span><span class="sxs-lookup"><span data-stu-id="764e1-356">The user must have <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> rights to call this method, and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> rights.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="764e1-357">L’exemple de code suivant illustre le comportement interprocessus d’un sémaphore nommé avec une sécurité de contrôle d’accès.</span><span class="sxs-lookup"><span data-stu-id="764e1-357">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="764e1-358">L’exemple utilise le <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> surcharge de méthode pour tester l’existence d’un sémaphore nommé.</span><span class="sxs-lookup"><span data-stu-id="764e1-358">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="764e1-359">Si le sémaphore n’existe pas, il est créé avec un nombre maximal de deux et avec la sécurité de contrôle d’accès qui refuse l’utilisateur actuel le droit d’utiliser le sémaphore mais accorde le droit de lire et modifier les autorisations sur le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="764e1-359">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore but grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="764e1-360">Si vous exécutez l’exemple compilé à partir de deux fenêtres de commande, la deuxième copie lève une exception de violation d’accès sur l’appel à la <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="764e1-360">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="764e1-361">L’exception est interceptée et l’exemple utilise le <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> surcharge de méthode pour ouvrir le sémaphore avec les droits nécessaires pour lire et modifier les autorisations.</span><span class="sxs-lookup"><span data-stu-id="764e1-361">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="764e1-362">Une fois que les autorisations sont modifiées, à l’aide de la <xref:System.Threading.Semaphore.SetAccessControl%2A> (méthode), le sémaphore est ouvert avec les droits nécessaires à l’entrée et de libération.</span><span class="sxs-lookup"><span data-stu-id="764e1-362">After the permissions are changed, using the <xref:System.Threading.Semaphore.SetAccessControl%2A> method, the semaphore is opened with the rights required to enter and release.</span></span> <span data-ttu-id="764e1-363">Si vous exécutez l’exemple compilé à partir d’une troisième fenêtre de commande, il s’exécute à l’aide des nouvelles autorisations.</span><span class="sxs-lookup"><span data-stu-id="764e1-363">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="764e1-364">
            <paramref name="semaphoreSecurity" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-364">
              <paramref name="semaphoreSecurity" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="764e1-365">The user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-365">The user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> rights.</span>
          </span>
          <span data-ttu-id="764e1-366">-or-  The semaphore was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-366">-or-  The semaphore was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> rights.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="764e1-367">The current <see cref="T:System.Threading.Semaphore" /> object does not represent a named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-367">The current <see cref="T:System.Threading.Semaphore" /> object does not represent a named system semaphore.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryOpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="764e1-368">Opens a specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-368">Opens a specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, out System.Threading.Semaphore result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, [out] class System.Threading.Semaphore&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, ByRef result As Semaphore) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, [Runtime::InteropServices::Out] System::Threading::Semaphore ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string *  -&gt; bool" Usage="System.Threading.Semaphore.TryOpenExisting (name, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="result" Type="System.Threading.Semaphore&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="764e1-369">The name of the system semaphore to open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-369">The name of the system semaphore to open.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="764e1-370">When this method returns, contains a <see cref="T:System.Threading.Semaphore" /> object that represents the named semaphore if the call succeeded, or <see langword="null" /> if the call failed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-370">When this method returns, contains a <see cref="T:System.Threading.Semaphore" /> object that represents the named semaphore if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="764e1-371">This parameter is treated as uninitialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-371">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="764e1-372">Opens the specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-372">Opens the specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="764e1-373">
            <see langword="true" /> if the named semaphore was opened successfully; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-373">
              <see langword="true" /> if the named semaphore was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="764e1-374">Si le sémaphore nommé n’existe pas, cette méthode ne le crée pas.</span><span class="sxs-lookup"><span data-stu-id="764e1-374">If the named semaphore does not exist, this method does not create it.</span></span> <span data-ttu-id="764e1-375">Pour créer le sémaphore système lorsqu’il n’existe pas déjà, utilisez une de la <xref:System.Threading.Semaphore.%23ctor%2A> constructeurs qui a un `name` paramètre.</span><span class="sxs-lookup"><span data-stu-id="764e1-375">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="764e1-376">Si vous ne savez pas si un sémaphore nommé existe, utilisez cette surcharge de méthode au lieu du <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> surcharge de méthode qui lève une exception si le sémaphore n’existe pas.</span><span class="sxs-lookup"><span data-stu-id="764e1-376">If you are uncertain whether a named semaphore exists, use this method overload instead of the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload, which throws an exception if the semaphore does not exist.</span></span>  
  
 <span data-ttu-id="764e1-377">Cette surcharge de méthode revient à appeler le <xref:System.Threading.Semaphore.TryOpenExisting%2A> surcharge de méthode et en spécifiant <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> et <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> droits, combinés à l’aide de l’opération OR au niveau du bit.</span><span class="sxs-lookup"><span data-stu-id="764e1-377">This method overload is equivalent to calling the <xref:System.Threading.Semaphore.TryOpenExisting%2A> method overload and specifying <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span> <span data-ttu-id="764e1-378">En spécifiant le <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> indicateur permet d’entrer dans le sémaphore, un thread et en spécifiant le <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> indicateur permet à un thread d’appeler le <xref:System.Threading.Semaphore.Release%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="764e1-378">Specifying the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag allows a thread to enter the semaphore, and specifying the   <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="764e1-379">
            <paramref name="name" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-379">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="764e1-380">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-380">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="764e1-381">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-381">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="764e1-382">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-382">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="764e1-383">The named semaphore exists, but the user does not have the security access required to use it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-383">The named semaphore exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights, out System.Threading.Semaphore result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, valuetype System.Security.AccessControl.SemaphoreRights rights, [out] class System.Threading.Semaphore&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Security.AccessControl.SemaphoreRights,System.Threading.Semaphore@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, rights As SemaphoreRights, ByRef result As Semaphore) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, System::Security::AccessControl::SemaphoreRights rights, [Runtime::InteropServices::Out] System::Threading::Semaphore ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string * System.Security.AccessControl.SemaphoreRights *  -&gt; bool" Usage="System.Threading.Semaphore.TryOpenExisting (name, rights, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.SemaphoreRights" />
        <Parameter Name="result" Type="System.Threading.Semaphore&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="764e1-384">The name of the system semaphore to open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-384">The name of the system semaphore to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="764e1-385">A bitwise combination of the enumeration values that represent the desired security access.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-385">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="764e1-386">When this method returns, contains a <see cref="T:System.Threading.Semaphore" /> object that represents the named semaphore if the call succeeded, or <see langword="null" /> if the call failed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-386">When this method returns, contains a <see cref="T:System.Threading.Semaphore" /> object that represents the named semaphore if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="764e1-387">This parameter is treated as uninitialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-387">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="764e1-388">Opens the specified named semaphore, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-388">Opens the specified named semaphore, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="764e1-389">
            <see langword="true" /> if the named semaphore was opened successfully; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-389">
              <see langword="true" /> if the named semaphore was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="764e1-390">Si le sémaphore nommé n’existe pas, cette méthode ne le crée pas.</span><span class="sxs-lookup"><span data-stu-id="764e1-390">If the named semaphore does not exist, this method does not create it.</span></span> <span data-ttu-id="764e1-391">Pour créer le sémaphore système lorsqu’il n’existe pas déjà, utilisez une de la <xref:System.Threading.Semaphore.%23ctor%2A> constructeurs qui a un `name` paramètre.</span><span class="sxs-lookup"><span data-stu-id="764e1-391">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="764e1-392">Si vous ne savez pas si un sémaphore nommé existe, utilisez cette surcharge de méthode au lieu du <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> surcharge de méthode qui lève une exception si le sémaphore n’existe pas.</span><span class="sxs-lookup"><span data-stu-id="764e1-392">If you are uncertain whether a named semaphore exists, use this method overload instead of the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload, which throws an exception if the semaphore does not exist.</span></span>  
  
 <span data-ttu-id="764e1-393">Le `rights` paramètre doit inclure le <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> indicateur pour permettre aux threads d’entrer dans le sémaphore et le <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> indicateur pour permettre d’appeler le <xref:System.Threading.Semaphore.Release%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="764e1-393">The `rights` parameter must include the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag to allow threads to enter the semaphore, and the <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 <span data-ttu-id="764e1-394">Plusieurs appels à cette méthode qui utilisent la même valeur pour `name` ne retournent pas nécessairement le même <xref:System.Threading.Semaphore> de l’objet, même si les objets retournés représentent le même sémaphore système nommé.</span><span class="sxs-lookup"><span data-stu-id="764e1-394">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Semaphore> object, even though the objects that are returned represent the same named system semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="764e1-395">
            <paramref name="name" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-395">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="764e1-396">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-396">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="764e1-397">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-397">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="764e1-398">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-398">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="764e1-399">The named semaphore exists, but the user does not have the security access required to use it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="764e1-399">The named semaphore exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>