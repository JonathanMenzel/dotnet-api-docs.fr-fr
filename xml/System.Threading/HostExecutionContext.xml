<Type Name="HostExecutionContext" FullName="System.Threading.HostExecutionContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="86fd19cb38423cc3d28ee101130679b486f94e87" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30528073" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HostExecutionContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HostExecutionContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.HostExecutionContext" />
  <TypeSignature Language="VB.NET" Value="Public Class HostExecutionContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class HostExecutionContext : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="7e802-101">Encapsule et propage le contexte d'exécution de l'hôte à travers des threads.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7e802-101">Encapsulates and propagates the host execution context across threads.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e802-102">Le <xref:System.Threading.HostExecutionContext> fait partie d’une plus grande <xref:System.Threading.ExecutionContext>.</span><span class="sxs-lookup"><span data-stu-id="7e802-102">The <xref:System.Threading.HostExecutionContext> is part of a larger <xref:System.Threading.ExecutionContext>.</span></span> <span data-ttu-id="7e802-103">Le contexte hôte migre, ou circule, avec le contexte d’exécution.</span><span class="sxs-lookup"><span data-stu-id="7e802-103">The host context migrates, or flows, with the execution context.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7e802-104">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.HostExecutionContext" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e802-104">Initializes a new instance of the <see cref="T:System.Threading.HostExecutionContext" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HostExecutionContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.HostExecutionContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HostExecutionContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7e802-105">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.HostExecutionContext" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e802-105">Initializes a new instance of the <see cref="T:System.Threading.HostExecutionContext" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e802-106">Le constructeur par défaut crée un contexte d’exécution hôte dont <xref:System.Threading.HostExecutionContext.State%2A> valeur de propriété est `null`.</span><span class="sxs-lookup"><span data-stu-id="7e802-106">The default constructor creates a host execution context whose <xref:System.Threading.HostExecutionContext.State%2A> property value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HostExecutionContext (object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.HostExecutionContext.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HostExecutionContext(System::Object ^ state);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">
          <span data-ttu-id="7e802-107">Objet représentant l'état du contexte d'exécution de l'hôte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e802-107">An object representing the host execution context state.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e802-108">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.HostExecutionContext" /> avec l'état spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e802-108">Initializes a new instance of the <see cref="T:System.Threading.HostExecutionContext" /> class using the specified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e802-109">Le <xref:System.Threading.HostExecutionContext> est inclus dans le <xref:System.Threading.ExecutionContext>.</span><span class="sxs-lookup"><span data-stu-id="7e802-109">The <xref:System.Threading.HostExecutionContext> is included with the <xref:System.Threading.ExecutionContext>.</span></span> <span data-ttu-id="7e802-110">Le `state` représente un handle sécurisé qui contient le `IUnknown` pointeur pour l’hôte.</span><span class="sxs-lookup"><span data-stu-id="7e802-110">The `state` represents a safe handle containing the `IUnknown` pointer for the host.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCopy">
      <MemberSignature Language="C#" Value="public virtual System.Threading.HostExecutionContext CreateCopy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.HostExecutionContext CreateCopy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.HostExecutionContext.CreateCopy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCopy () As HostExecutionContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::HostExecutionContext ^ CreateCopy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.HostExecutionContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7e802-111">Crée une copie du contexte d'exécution de l'hôte en cours.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e802-111">Creates a copy of the current host execution context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e802-112">Objet <see cref="T:System.Threading.HostExecutionContext" /> capturant le contexte de l'hôte du thread actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e802-112">A <see cref="T:System.Threading.HostExecutionContext" /> object representing the host context for the current thread.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e802-113">La copie peut être utilisée en tant que paramètre à un <xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=nameWithType> appel de méthode.</span><span class="sxs-lookup"><span data-stu-id="7e802-113">The copy can be used as the parameter to a <xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=nameWithType> method call.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7e802-114">Libère les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Threading.HostExecutionContext" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e802-114">Releases resources used by the current instance of the <see cref="T:System.Threading.HostExecutionContext" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.HostExecutionContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7e802-115">Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Threading.HostExecutionContext" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e802-115">Releases all resources used by the current instance of the <see cref="T:System.Threading.HostExecutionContext" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e802-116">Appelez la méthode `Dispose` une fois que vous avez terminé d'utiliser <xref:System.Threading.HostExecutionContext>.</span><span class="sxs-lookup"><span data-stu-id="7e802-116">Call `Dispose` when you are finished using the <xref:System.Threading.HostExecutionContext>.</span></span> <span data-ttu-id="7e802-117">La méthode `Dispose` rend le <xref:System.Threading.HostExecutionContext> inutilisable.</span><span class="sxs-lookup"><span data-stu-id="7e802-117">The `Dispose` method leaves the <xref:System.Threading.HostExecutionContext> in an unusable state.</span></span> <span data-ttu-id="7e802-118">Après avoir appelé `Dispose`, vous devez libérer toutes les références à la <xref:System.Threading.HostExecutionContext> pour que le garbage collector puisse récupérer la mémoire qui le <xref:System.Threading.HostExecutionContext> occupée.</span><span class="sxs-lookup"><span data-stu-id="7e802-118">After calling `Dispose`, you must release all references to the <xref:System.Threading.HostExecutionContext> so the garbage collector can reclaim the memory that the <xref:System.Threading.HostExecutionContext> was occupying.</span></span>  
  
 <span data-ttu-id="7e802-119">Pour plus d’informations, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md) et [implémentant une méthode de suppression](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="7e802-119">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e802-120">Appelez toujours `Dispose` avant de libérer votre dernière référence à <xref:System.Threading.HostExecutionContext>.</span><span class="sxs-lookup"><span data-stu-id="7e802-120">Always call `Dispose` before you release your last reference to the <xref:System.Threading.HostExecutionContext>.</span></span> <span data-ttu-id="7e802-121">Sinon, les ressources utilisées ne seront pas libérées tant que le garbage collector n'aura pas appelé la méthode <xref:System.Threading.HostExecutionContext> de l'objet `Finalize`.</span><span class="sxs-lookup"><span data-stu-id="7e802-121">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.HostExecutionContext> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="7e802-122">
            <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e802-122">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e802-123">En cas de substitution dans une classe dérivée, libère les ressources non managées utilisées par <see cref="T:System.Threading.WaitHandle" /> et libère éventuellement les ressources managées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e802-123">When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e802-124">Cette méthode est appelée par le <xref:System.Threading.HostExecutionContext.Dispose> surcharge de méthode et le finaliseur.</span><span class="sxs-lookup"><span data-stu-id="7e802-124">This method is called by the <xref:System.Threading.HostExecutionContext.Dispose> method overload and the finalizer.</span></span> <span data-ttu-id="7e802-125"><xref:System.Threading.HostExecutionContext.Dispose> appelle cette méthode protégée avec le `disposing` paramètre la valeur `true`.</span><span class="sxs-lookup"><span data-stu-id="7e802-125"><xref:System.Threading.HostExecutionContext.Dispose> invokes this protected method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="7e802-126">Le finaliseur appelle cette méthode avec `disposing` la valeur `false`.</span><span class="sxs-lookup"><span data-stu-id="7e802-126">The finalizer invokes this method with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="7e802-127">Si le paramètre `disposing` a la valeur `true`, cette méthode libère toutes les ressources détenues par les objets managés référencés par ce <xref:System.Threading.HostExecutionContext>.</span><span class="sxs-lookup"><span data-stu-id="7e802-127">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Threading.HostExecutionContext> references.</span></span> <span data-ttu-id="7e802-128">Cette méthode appelle la méthode `Dispose` de chaque objet référencé.</span><span class="sxs-lookup"><span data-stu-id="7e802-128">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 <span data-ttu-id="7e802-129">Cette méthode peut être appelée plusieurs fois par d’autres objets.</span><span class="sxs-lookup"><span data-stu-id="7e802-129">This method can be called multiple times by other objects.</span></span> <span data-ttu-id="7e802-130">Lorsque vous substituez cette méthode, veillez à ne pas référencer des objets qui ont été préalablement supprimés lors d’un appel précédent.</span><span class="sxs-lookup"><span data-stu-id="7e802-130">When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="protected internal object State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object State" />
      <MemberSignature Language="DocId" Value="P:System.Threading.HostExecutionContext.State" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property State As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Object ^ State { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7e802-131">Obtient ou définit l'état du contexte d'exécution de l'hôte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e802-131">Gets or sets the state of the host execution context.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7e802-132">Objet représentant l'état du contexte d'exécution de l'hôte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e802-132">An object representing the host execution context state.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e802-133">Le <xref:System.Threading.HostExecutionContext.State%2A> valeur de la propriété représente un handle sécurisé contenant le `IUnknown` pointeur pour l’hôte.</span><span class="sxs-lookup"><span data-stu-id="7e802-133">The <xref:System.Threading.HostExecutionContext.State%2A> property value represents a safe handle containing the `IUnknown` pointer for the host.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>