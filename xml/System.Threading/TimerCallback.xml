<Type Name="TimerCallback" FullName="System.Threading.TimerCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7eb37b05e229ff2ea62febacee5e756f827e5505" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39829622" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void TimerCallback(object state);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed TimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.TimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub TimerCallback(state As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void TimerCallback(System::Object ^ state);" />
  <TypeSignature Language="F#" Value="type TimerCallback = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">Objet contenant des informations spécifiques à l'application et concernant la méthode appelée par ce délégué, ou <see langword="null" />.</param>
    <summary>Représente la méthode qui gère des appels d'un <see cref="T:System.Threading.Timer" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez un `TimerCallback` délégué pour spécifier la méthode est appelée par un <xref:System.Threading.Timer>. Cette méthode ne s’exécute pas dans le thread qui a créé la minuterie ; Il s’exécute dans un thread de pool de thread distinct est fourni par le système. Le `TimerCallback` délégué appelle la méthode une fois après le démarrage et continue à appeler une fois par intervalle de minuterie jusqu'à ce que le <xref:System.Threading.Timer.Dispose%2A> méthode est appelée, ou jusqu'à ce que le <xref:System.Threading.Timer.Change%2A?displayProperty=nameWithType> méthode est appelée avec la valeur d’intervalle <xref:System.Threading.Timeout.Infinite>.  
  
> [!NOTE]
>  Rappels peuvent se produire après la <xref:System.Threading.Timer.Dispose> surcharge de méthode a été appelée, étant donné que le minuteur de files d’attente des rappels pour l’exécution par les threads du pool. Vous pouvez utiliser le <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> surcharge de méthode pour attendre jusqu'à ce que tous les rappels.  
  
 Le délégué de la minuterie est spécifié lors de la minuterie est construite et ne peut pas être modifiée. L’heure de début pour un `Timer` est passé dans le `dueTime` paramètre de la `Timer` constructeurs et la période est passée dans le `period` paramètre. Pour obtenir un exemple qui montre comment créer et à l’aide un `TimerCallback` le délégué, consultez <xref:System.Threading.Timer?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer le délégué utilisé avec la `Timer` classe.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Timer" />
    <altmember cref="T:System.Threading.ThreadPool" />
  </Docs>
</Type>