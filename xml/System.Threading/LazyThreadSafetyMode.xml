<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bffe15f7432e9c6a32d5ebae79cbf8cad97790ab" />
    <Meta Name="ms.sourcegitcommit" Value="d0bb31ec8354fa58c62c2a646057eec11d3e2150" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/17/2018" />
    <Meta Name="ms.locfileid" Value="36605917" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Spécifie comment une instance de <see cref="T:System.Lazy`1" /> synchronise l’accès entre plusieurs threads.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette énumération pour spécifier le `mode` paramètre de <xref:System.Lazy%601> constructeurs. Les effets de tous les constructeurs sur la synchronisation de thread peuvent être décrits en termes de cette énumération, s’ils ont `mode` paramètres.  
  
 Un <xref:System.Lazy%601> instance est initialisée par une méthode d’initialisation spécifié par l’utilisateur ou par le constructeur par défaut `T`. La méthode d’initialisation est spécifiée par le `valueFactory` paramètre d’un <xref:System.Lazy%601> constructeur. La méthode retourne une instance de `T`, qui est le type instancié tardivement par l’instance de <xref:System.Lazy%601>. Si un constructeur n’est pas un `valueFactory` paramètre, le constructeur par défaut `T` est utilisée pour initialiser le <xref:System.Lazy%601> instance. Dans les deux cas, l’initialisation se produit la première fois que vous appelez le <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propriété.  
  
 Outre la spécification de la sécurité des threads d’un <xref:System.Lazy%601> instance, cette énumération affecte la mise en cache de l’exception. Lorsque les exceptions sont mises en cache pour un <xref:System.Lazy%601> instance, vous obtenez uniquement une chance pour initialiser l’instance. Si une exception est levée la première fois que vous appelez le <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propriété, que l’exception est mis en cache et levée à nouveau sur tous les appels ultérieurs à la <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propriété. L’avantage de la mise en cache des exceptions est que deux threads toujours obtiennent le même résultat, même lorsque des erreurs se produisent.  
  
 Lorsque vous spécifiez le mode PublicationOnly, les exceptions ne sont jamais mises en cache. Lorsque vous spécifiez None ou ExecutionAndPublication, la mise en cache varie selon que vous spécifiez une méthode d’initialisation ou autoriser le constructeur par défaut `T` à utiliser. La spécification d’une méthode d’initialisation permet la mise en cache des exceptions pour ces deux modes. La méthode d’initialisation peut être très simple. Par exemple, elle peut appeler le constructeur par défaut de `T` (`new Lazy<Contents>(() => new Contents(), mode)` en C# ou `New Lazy(Of Contents)(Function() New Contents())` en Visual Basic). Si vous utilisez un constructeur qui ne spécifie pas une méthode d’initialisation, les exceptions levées par le constructeur par défaut `T` ne sont pas mises en cache. Le tableau suivant récapitule le comportement de mise en cache des exceptions.  
  
|Mode|À l’aide de la méthode d’initialisation|À l’aide du constructeur par défaut `T`|  
|----------|---------------------------------|---------------------------------------|  
|Aucun.|Mis en cache|Non mis en cache|  
|PublicationOnly|Non mis en cache|Non mis en cache|  
|ExecutionAndPublication|Mis en cache|Non mis en cache|  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Des verrous sont utilisés pour qu’un seul thread puisse initialiser une instance de <see cref="T:System.Lazy`1" /> d’une façon thread-safe. Si la méthode d’initialisation (ou le constructeur par défaut, s’il n’existe aucune méthode d’initialisation) utilise des verrous en interne, des blocages peuvent se produire. Si vous utilisez un constructeur <see cref="T:System.Lazy`1" /> qui spécifie une méthode d’initialisation (paramètre <paramref name="valueFactory" />) et si cette méthode d’initialisation lève une exception (ou échoue à gérer une exception), la première fois que vous appelez la propriété <see cref="P:System.Lazy`1.Value" />, l’exception est mise en cache et levée à nouveau lors des appels ultérieurs à la propriété <see cref="P:System.Lazy`1.Value" />. Si vous utilisez un constructeur <see cref="T:System.Lazy`1" /> qui ne spécifie pas une méthode d’initialisation, les exceptions levées par le constructeur par défaut pour <paramref name="T" /> ne sont pas mises en cache. Dans ce cas, un appel ultérieur à la propriété <see cref="P:System.Lazy`1.Value" /> peut initialiser correctement l’instance de <see cref="T:System.Lazy`1" />. Si la méthode d’initialisation accède de façon récursive à la propriété <see cref="P:System.Lazy`1.Value" /> de l’instance de <see cref="T:System.Lazy`1" />, une <see cref="T:System.InvalidOperationException" /> est levée.</summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>L’instance de <see cref="T:System.Lazy`1" /> n’est pas thread-safe ; si plusieurs threads accèdent à l’instance, son comportement est non défini. Utilisez ce mode seulement quand des performances élevées sont cruciales et s’il est certain que l’instance de <see cref="T:System.Lazy`1" /> n’est jamais initialisée par plusieurs threads. Si vous utilisez un constructeur <see cref="T:System.Lazy`1" /> qui spécifie une méthode d’initialisation (paramètre <paramref name="valueFactory" />) et si cette méthode d’initialisation lève une exception (ou échoue à gérer une exception), la première fois que vous appelez la propriété <see cref="P:System.Lazy`1.Value" />, l’exception est mise en cache et levée à nouveau lors des appels ultérieurs à la propriété <see cref="P:System.Lazy`1.Value" />. Si vous utilisez un constructeur <see cref="T:System.Lazy`1" /> qui ne spécifie pas une méthode d’initialisation, les exceptions levées par le constructeur par défaut pour <paramref name="T" /> ne sont pas mises en cache. Dans ce cas, un appel ultérieur à la propriété <see cref="P:System.Lazy`1.Value" /> peut initialiser correctement l’instance de <see cref="T:System.Lazy`1" />. Si la méthode d’initialisation accède de façon récursive à la propriété <see cref="P:System.Lazy`1.Value" /> de l’instance de <see cref="T:System.Lazy`1" />, une <see cref="T:System.InvalidOperationException" /> est levée.</summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Quand plusieurs threads tentent simultanément d’initialiser une instance de <see cref="T:System.Lazy`1" />, tous les threads sont autorisés à exécuter la méthode d’initialisation (ou le constructeur par défaut, s’il n’existe aucune méthode d’initialisation). Le premier thread qui termine l’initialisation définit la valeur de l’instance de <see cref="T:System.Lazy`1" />. Cette valeur est retournée à tous les autres threads qui exécutaient simultanément la méthode d’initialisation, à moins que la méthode d’initialisation lève des exceptions sur ces threads. Toutes les instances de <paramref name="T" /> qui ont été créées par les threads concurrents sont abandonnées. Si la méthode d’initialisation lève une exception sur un thread, l’exception est propagée à partir de la propriété <see cref="P:System.Lazy`1.Value" /> sur ce thread. L’exception n’est pas mise en cache. La valeur de la propriété <see cref="P:System.Lazy`1.IsValueCreated" /> reste <see langword="false" />, et les appels suivants à la propriété <see cref="P:System.Lazy`1.Value" /> par le thread où l’exception a été levée ou par d’autres threads provoquent la réexécution de la méthode d’initialisation. Si la méthode d’initialisation accède de façon récursive à la propriété <see cref="P:System.Lazy`1.Value" /> de l’instance de <see cref="T:System.Lazy`1" />, aucune exception n’est levée.</summary>
      </Docs>
    </Member>
  </Members>
</Type>