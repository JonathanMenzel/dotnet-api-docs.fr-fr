<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="3aeee-101">Spécifie comment une instance de <see cref="T:System.Lazy`1" /> synchronise l’accès entre plusieurs threads.</span><span class="sxs-lookup"><span data-stu-id="3aeee-101">Specifies how a <see cref="T:System.Lazy`1" /> instance synchronizes access among multiple threads.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aeee-102">Utilisez cette énumération pour spécifier le `mode` paramètre de <xref:System.Lazy%601> constructeurs.</span><span class="sxs-lookup"><span data-stu-id="3aeee-102">Use this enumeration to specify the `mode` parameter of <xref:System.Lazy%601> constructors.</span></span> <span data-ttu-id="3aeee-103">Les effets de tous les constructeurs sur la synchronisation de threads peuvent être décrit en termes de cette énumération, qu’ils disposent ou non `mode` paramètres.</span><span class="sxs-lookup"><span data-stu-id="3aeee-103">The effects of all constructors on thread synchronization can be described in terms of this enumeration, whether or not they have `mode` parameters.</span></span>  
  
 <span data-ttu-id="3aeee-104">A <xref:System.Lazy%601> instance est initialisée par une méthode d’initialisation spécifiée par l’utilisateur ou par le constructeur par défaut `T`.</span><span class="sxs-lookup"><span data-stu-id="3aeee-104">A <xref:System.Lazy%601> instance is initialized either by a user-specified initialization method or by the default constructor for `T`.</span></span> <span data-ttu-id="3aeee-105">La méthode d’initialisation est spécifiée par le `valueFactory` paramètre d’un <xref:System.Lazy%601> constructeur.</span><span class="sxs-lookup"><span data-stu-id="3aeee-105">The initialization method is specified by the `valueFactory` parameter of a <xref:System.Lazy%601> constructor.</span></span> <span data-ttu-id="3aeee-106">La méthode retourne une instance de `T`, qui est le type instancié tardivement par l’instance de <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="3aeee-106">The method returns an instance of `T`, which is the type that is lazily instantiated by the instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="3aeee-107">Si un constructeur n’est pas un `valueFactory` paramètre, le constructeur par défaut `T` est utilisé pour initialiser le <xref:System.Lazy%601> instance.</span><span class="sxs-lookup"><span data-stu-id="3aeee-107">If a constructor does not have a `valueFactory` parameter, the default constructor for `T` is used to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="3aeee-108">Dans les deux cas, l’initialisation se produit la première fois que vous appelez le <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propriété.</span><span class="sxs-lookup"><span data-stu-id="3aeee-108">In either case, initialization occurs the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="3aeee-109">Outre la spécification de la sécurité des threads d’un <xref:System.Lazy%601> instance, cette énumération affecte la mise en cache de l’exception.</span><span class="sxs-lookup"><span data-stu-id="3aeee-109">In addition to specifying the thread safety of a <xref:System.Lazy%601> instance, this enumeration affects exception caching.</span></span> <span data-ttu-id="3aeee-110">Lorsque les exceptions sont mises en cache pour un <xref:System.Lazy%601> instance, vous obtenez uniquement une chance pour initialiser l’instance.</span><span class="sxs-lookup"><span data-stu-id="3aeee-110">When exceptions are cached for a <xref:System.Lazy%601> instance, you get only one chance to initialize the instance.</span></span> <span data-ttu-id="3aeee-111">Si une exception est levée la première fois que vous appelez le <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propriété, que l’exception est mis en cache et levée à nouveau sur tous les appels suivants à la <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propriété.</span><span class="sxs-lookup"><span data-stu-id="3aeee-111">If an exception is thrown the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property, that exception is cached and rethrown on all subsequent calls to the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="3aeee-112">L’avantage de la mise en cache d’exceptions est que deux threads obtiennent toujours le même résultat, même lorsque des erreurs se produisent.</span><span class="sxs-lookup"><span data-stu-id="3aeee-112">The advantage of caching exceptions is that any two threads always get the same result, even when errors occur.</span></span>  
  
 <span data-ttu-id="3aeee-113">Lorsque vous spécifiez le mode PublicationOnly, les exceptions ne sont jamais mises en cache.</span><span class="sxs-lookup"><span data-stu-id="3aeee-113">When you specify the PublicationOnly mode, exceptions are never cached.</span></span> <span data-ttu-id="3aeee-114">Lorsque vous sélectionnez aucun ou ExecutionAndPublication, la mise en cache varie selon que vous spécifiez une méthode d’initialisation ou autoriser le constructeur par défaut `T` à utiliser.</span><span class="sxs-lookup"><span data-stu-id="3aeee-114">When you specify None or ExecutionAndPublication, caching depends on whether you specify an initialization method or allow the default constructor for `T` to be used.</span></span> <span data-ttu-id="3aeee-115">La spécification d’une méthode d’initialisation permet la mise en cache des exceptions pour ces deux modes.</span><span class="sxs-lookup"><span data-stu-id="3aeee-115">Specifying an initialization method enables exception caching for these two modes.</span></span> <span data-ttu-id="3aeee-116">La méthode d’initialisation peut être très simple.</span><span class="sxs-lookup"><span data-stu-id="3aeee-116">The initialization method can be very simple.</span></span> <span data-ttu-id="3aeee-117">Par exemple, elle peut appeler le constructeur par défaut de `T` (`new Lazy<Contents>(() => new Contents(), mode)` en C# ou `New Lazy(Of Contents)(Function() New Contents())` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="3aeee-117">For example, it might call the default constructor for `T`: `new Lazy<Contents>(() => new Contents(), mode)` in C#, or `New Lazy(Of Contents)(Function() New Contents())` in Visual Basic.</span></span> <span data-ttu-id="3aeee-118">Si vous utilisez un constructeur qui ne spécifie pas une méthode d’initialisation, les exceptions sont levées par le constructeur par défaut `T` ne sont pas mises en cache.</span><span class="sxs-lookup"><span data-stu-id="3aeee-118">If you use a constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for `T` are not cached.</span></span> <span data-ttu-id="3aeee-119">Le tableau suivant résume le comportement de mise en cache des exceptions.</span><span class="sxs-lookup"><span data-stu-id="3aeee-119">The following table summarizes exception caching behavior.</span></span>  
  
|<span data-ttu-id="3aeee-120">Mode</span><span class="sxs-lookup"><span data-stu-id="3aeee-120">Mode</span></span>|<span data-ttu-id="3aeee-121">À l’aide de la méthode d’initialisation</span><span class="sxs-lookup"><span data-stu-id="3aeee-121">Using initialization method</span></span>|<span data-ttu-id="3aeee-122">À l’aide du constructeur par défaut `T`</span><span class="sxs-lookup"><span data-stu-id="3aeee-122">Using default constructor for `T`</span></span>|  
|----------|---------------------------------|---------------------------------------|  
|<span data-ttu-id="3aeee-123">Aucun.</span><span class="sxs-lookup"><span data-stu-id="3aeee-123">None</span></span>|<span data-ttu-id="3aeee-124">Mis en cache</span><span class="sxs-lookup"><span data-stu-id="3aeee-124">Cached</span></span>|<span data-ttu-id="3aeee-125">Non mis en cache</span><span class="sxs-lookup"><span data-stu-id="3aeee-125">Not cached</span></span>|  
|<span data-ttu-id="3aeee-126">PublicationOnly</span><span class="sxs-lookup"><span data-stu-id="3aeee-126">PublicationOnly</span></span>|<span data-ttu-id="3aeee-127">Non mis en cache</span><span class="sxs-lookup"><span data-stu-id="3aeee-127">Not cached</span></span>|<span data-ttu-id="3aeee-128">Non mis en cache</span><span class="sxs-lookup"><span data-stu-id="3aeee-128">Not cached</span></span>|  
|<span data-ttu-id="3aeee-129">ExecutionAndPublication</span><span class="sxs-lookup"><span data-stu-id="3aeee-129">ExecutionAndPublication</span></span>|<span data-ttu-id="3aeee-130">Mis en cache</span><span class="sxs-lookup"><span data-stu-id="3aeee-130">Cached</span></span>|<span data-ttu-id="3aeee-131">Non mis en cache</span><span class="sxs-lookup"><span data-stu-id="3aeee-131">Not cached</span></span>|  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="3aeee-132">Des verrous sont utilisés pour qu’un seul thread puisse initialiser une instance de <see cref="T:System.Lazy`1" /> d’une façon thread-safe.</span><span class="sxs-lookup"><span data-stu-id="3aeee-132">Locks are used to ensure that only a single thread can initialize a <see cref="T:System.Lazy`1" /> instance in a thread-safe manner.</span></span> <span data-ttu-id="3aeee-133">Si la méthode d’initialisation (ou le constructeur par défaut, s’il n’existe aucune méthode d’initialisation) utilise des verrous en interne, des blocages peuvent se produire.</span><span class="sxs-lookup"><span data-stu-id="3aeee-133">If the initialization method (or the default constructor, if there is no initialization method) uses locks internally, deadlocks can occur.</span></span> <span data-ttu-id="3aeee-134">Si vous utilisez un constructeur <see cref="T:System.Lazy`1" /> qui spécifie une méthode d’initialisation (paramètre <paramref name="valueFactory" />) et si cette méthode d’initialisation lève une exception (ou échoue à gérer une exception), la première fois que vous appelez la propriété <see cref="P:System.Lazy`1.Value" />, l’exception est mise en cache et levée à nouveau lors des appels ultérieurs à la propriété <see cref="P:System.Lazy`1.Value" />.</span><span class="sxs-lookup"><span data-stu-id="3aeee-134">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span></span> <span data-ttu-id="3aeee-135">Si vous utilisez un constructeur <see cref="T:System.Lazy`1" /> qui ne spécifie pas une méthode d’initialisation, les exceptions levées par le constructeur par défaut pour <paramref name="T" /> ne sont pas mises en cache.</span><span class="sxs-lookup"><span data-stu-id="3aeee-135">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <paramref name="T" /> are not cached.</span></span> <span data-ttu-id="3aeee-136">Dans ce cas, un appel ultérieur à la propriété <see cref="P:System.Lazy`1.Value" /> peut initialiser correctement l’instance de <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="3aeee-136">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span></span> <span data-ttu-id="3aeee-137">Si la méthode d’initialisation accède de façon récursive à la propriété <see cref="P:System.Lazy`1.Value" /> de l’instance de <see cref="T:System.Lazy`1" />, une <see cref="T:System.InvalidOperationException" /> est levée.</span><span class="sxs-lookup"><span data-stu-id="3aeee-137">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="3aeee-138">L’instance de <see cref="T:System.Lazy`1" /> n’est pas thread-safe ; si plusieurs threads accèdent à l’instance, son comportement est non défini.</span><span class="sxs-lookup"><span data-stu-id="3aeee-138">The <see cref="T:System.Lazy`1" /> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined.</span></span> <span data-ttu-id="3aeee-139">Utilisez ce mode seulement quand des performances élevées sont cruciales et s’il est certain que l’instance de <see cref="T:System.Lazy`1" /> n’est jamais initialisée par plusieurs threads.</span><span class="sxs-lookup"><span data-stu-id="3aeee-139">Use this mode only when high performance is crucial and the <see cref="T:System.Lazy`1" /> instance is guaranteed never to be initialized from more than one thread.</span></span> <span data-ttu-id="3aeee-140">Si vous utilisez un constructeur <see cref="T:System.Lazy`1" /> qui spécifie une méthode d’initialisation (paramètre <paramref name="valueFactory" />) et si cette méthode d’initialisation lève une exception (ou échoue à gérer une exception), la première fois que vous appelez la propriété <see cref="P:System.Lazy`1.Value" />, l’exception est mise en cache et levée à nouveau lors des appels ultérieurs à la propriété <see cref="P:System.Lazy`1.Value" />.</span><span class="sxs-lookup"><span data-stu-id="3aeee-140">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span></span> <span data-ttu-id="3aeee-141">Si vous utilisez un constructeur <see cref="T:System.Lazy`1" /> qui ne spécifie pas une méthode d’initialisation, les exceptions levées par le constructeur par défaut pour <paramref name="T" /> ne sont pas mises en cache.</span><span class="sxs-lookup"><span data-stu-id="3aeee-141">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <paramref name="T" /> are not cached.</span></span> <span data-ttu-id="3aeee-142">Dans ce cas, un appel ultérieur à la propriété <see cref="P:System.Lazy`1.Value" /> peut initialiser correctement l’instance de <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="3aeee-142">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span></span> <span data-ttu-id="3aeee-143">Si la méthode d’initialisation accède de façon récursive à la propriété <see cref="P:System.Lazy`1.Value" /> de l’instance de <see cref="T:System.Lazy`1" />, une <see cref="T:System.InvalidOperationException" /> est levée.</span><span class="sxs-lookup"><span data-stu-id="3aeee-143">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="3aeee-144">Quand plusieurs threads tentent simultanément d’initialiser une instance de <see cref="T:System.Lazy`1" />, tous les threads sont autorisés à exécuter la méthode d’initialisation (ou le constructeur par défaut, s’il n’existe aucune méthode d’initialisation).</span><span class="sxs-lookup"><span data-stu-id="3aeee-144">When multiple threads try to initialize a <see cref="T:System.Lazy`1" /> instance simultaneously, all threads are allowed to run the initialization method (or the default constructor, if there is no initialization method).</span></span> <span data-ttu-id="3aeee-145">Le premier thread qui termine l’initialisation définit la valeur de l’instance de <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="3aeee-145">The first thread to complete initialization sets the value of the <see cref="T:System.Lazy`1" /> instance.</span></span> <span data-ttu-id="3aeee-146">Cette valeur est retournée à tous les autres threads qui exécutaient simultanément la méthode d’initialisation, à moins que la méthode d’initialisation lève des exceptions sur ces threads.</span><span class="sxs-lookup"><span data-stu-id="3aeee-146">That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads.</span></span> <span data-ttu-id="3aeee-147">Toutes les instances de <paramref name="T" /> qui ont été créées par les threads concurrents sont abandonnées.</span><span class="sxs-lookup"><span data-stu-id="3aeee-147">Any instances of <paramref name="T" /> that were created by the competing threads are discarded.</span></span> <span data-ttu-id="3aeee-148">Si la méthode d’initialisation lève une exception sur un thread, l’exception est propagée à partir de la propriété <see cref="P:System.Lazy`1.Value" /> sur ce thread.</span><span class="sxs-lookup"><span data-stu-id="3aeee-148">If the initialization method throws an exception on any thread, the exception is propagated out of the <see cref="P:System.Lazy`1.Value" /> property on that thread.</span></span> <span data-ttu-id="3aeee-149">L’exception n’est pas mise en cache.</span><span class="sxs-lookup"><span data-stu-id="3aeee-149">The exception is not cached.</span></span> <span data-ttu-id="3aeee-150">La valeur de la propriété <see cref="P:System.Lazy`1.IsValueCreated" /> reste <see langword="false" />, et les appels suivants à la propriété <see cref="P:System.Lazy`1.Value" /> par le thread où l’exception a été levée ou par d’autres threads provoquent la réexécution de la méthode d’initialisation.</span><span class="sxs-lookup"><span data-stu-id="3aeee-150">The value of the <see cref="P:System.Lazy`1.IsValueCreated" /> property remains <see langword="false" />, and subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again.</span></span> <span data-ttu-id="3aeee-151">Si la méthode d’initialisation accède de façon récursive à la propriété <see cref="P:System.Lazy`1.Value" /> de l’instance de <see cref="T:System.Lazy`1" />, aucune exception n’est levée.</span><span class="sxs-lookup"><span data-stu-id="3aeee-151">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, no exception is thrown.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>