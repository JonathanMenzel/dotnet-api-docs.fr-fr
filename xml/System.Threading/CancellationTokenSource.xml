<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CancellationTokenSource.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac594e623c10b8f5fb941b4f23eb30c7dcadd826d47.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94e623c10b8f5fb941b4f23eb30c7dcadd826d47</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Signals to a <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that it should be canceled.</source>
          <target state="translated">Signale à un <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> qu'il doit être annulé.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the .NET Framework uses a unified model for cooperative cancellation of asynchronous or long-running synchronous operations that involves two objects:</source>
          <target state="translated">En commençant par le <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, le .NET Framework utilise un modèle unifié pour l’annulation coopérative des opérations asynchrones ou long terme synchrones qui implique deux objets :</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>A <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object, which provides a cancellation token through its <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> property and sends a cancellation message by calling its <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> method.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> objet, qui fournit un jeton d’annulation via son <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> propriété et envoie une annulation de message en appelant son <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph> ou <ph id="ph4">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>A <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> object, which indicates whether cancellation is requested.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> objet, qui indique si l’annulation est demandée.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>The general pattern for implementing the cooperative cancellation model is:</source>
          <target state="translated">Le modèle général d'implémentation du modèle d'annulation coopérative est le suivant :</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Instantiate a <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object, which manages and sends cancellation notification to the individual cancellation tokens.</source>
          <target state="translated">Instanciez un objet <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> qui gère et envoie une notification d'annulation pour chaque jeton d'annulation.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Pass the token returned by the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType&gt;</ph> property to each task or thread that listens for cancellation.</source>
          <target state="translated">Passez le jeton retourné par la propriété <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType&gt;</ph> à chaque tâche ou thread qui écoute l'annulation.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Call the <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> method from operations that receive the cancellation token.</source>
          <target state="translated">Appelez le <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> méthode à partir d’opérations qui reçoivent le jeton d’annulation.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Provide a mechanism for each task or thread to respond to a cancellation request.</source>
          <target state="translated">Fournissent un mécanisme pour chaque tâche ou thread pour répondre à une demande d’annulation.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Whether you choose to cancel an operation, and exactly how you do it, depends on your application logic.</source>
          <target state="translated">Vous pouvez choisir d’annuler une opération et exactement comment procéder, dépend de votre logique d’application.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Call the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType&gt;</ph> method to provide notification of cancellation.</source>
          <target state="translated">Appelez la méthode <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType&gt;</ph> pour fournir une notification d'annulation.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>This sets the <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> property on every copy of the cancellation token to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Cela permet de définir la <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> propriété sur chaque copie du jeton d’annulation à <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Call the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Dispose%2A&gt;</ph> method when you are finished with the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object.</source>
          <target state="translated">Appelez le <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Dispose%2A&gt;</ph> méthode lorsque vous avez terminé avec le <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>For more information, see <bpt id="p1">[</bpt>Cancellation in Managed Threads<ept id="p1">](~/docs/standard/threading/cancellation-in-managed-threads.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>Annulation dans les threads managés<ept id="p1">](~/docs/standard/threading/cancellation-in-managed-threads.md)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Ce type implémente le <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>When you have finished using an instance of the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Lorsque vous avez fini d’utiliser une instance du type, vous devez la supprimer directement ou indirectement.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Pour supprimer le type directement, vous devez appeler sa <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> méthode dans un <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Pour la supprimer indirectement, utiliser une construction de langage telles que <ph id="ph1">`using`</ph> (en c#) ou <ph id="ph2">`Using`</ph> (en Visual Basic).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Pour plus d’informations, consultez la section « Utilisant un objet qui implémente IDisposable » dans la <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> rubrique de l’interface.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</source>
          <target state="translated">L’exemple suivant utilise un générateur de nombres aléatoires pour émuler une application de collecte de données qui lit les valeurs intégrales 10 onze instruments différents.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</source>
          <target state="translated">La valeur zéro indique que la mesure a échoué pour un instrument, auquel cas l’opération doit être annulée et aucune globale moyenne doivent être calculées.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>To handle the possible cancellation of the operation, the example instantiates a <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object that generates a cancellation token which is passed to a <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object.</source>
          <target state="translated">Pour gérer l’annulation possible de l’opération, l’exemple instancie un <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> objet qui génère un jeton d’annulation qui est passé à un <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> objet à son tour transmet le jeton d’annulation à chacune des tâches chargée de collecter les lectures d’un instrument particulier.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> méthode est appelée pour vous assurer que la moyenne est calculée uniquement une fois toutes les valeurs ont été collectées avec succès.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>If a task has not because it has been cancelled, the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType&gt;</ph> method throws an exception.</source>
          <target state="translated">Si une tâche ne comporte pas, car elle a été annulée, l’appel à la <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType&gt;</ph> méthode lève une exception.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads, with the exception of <ph id="ph2">&lt;see cref="M:System.Threading.CancellationTokenSource.Dispose" /&gt;</ph>, which must only be used when all other operations on the <ph id="ph3">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> object have completed.</source>
          <target state="translated">Tous les membres publics et protégés de <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> sont thread-safe et peuvent être utilisés simultanément à partir de plusieurs threads, à l’exception de <ph id="ph2">&lt;see cref="M:System.Threading.CancellationTokenSource.Dispose" /&gt;</ph>, qui doit être utilisée uniquement lorsque toutes les autres opérations sur le <ph id="ph3">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> objet s’est terminé.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Initializes the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Initialise la <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source>The time interval in milliseconds to wait before canceling this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Intervalle de temps d'attente en millisecondes avant d'annuler cet élément <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class that will be canceled after the specified delay in milliseconds.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> qui sera annulée après le délai spécifié en millisecondes.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source>The countdown for the <ph id="ph1">`millisecondsDelay`</ph> starts during the call to the constructor.</source>
          <target state="translated">Le compte à rebours pour le <ph id="ph1">`millisecondsDelay`</ph> démarre lors de l’appel au constructeur.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source>When the <ph id="ph1">`millisecondsDelay`</ph> expires, the constructed <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> is canceled (if it has not been canceled already).</source>
          <target state="translated">Lorsque le <ph id="ph1">`millisecondsDelay`</ph> arrive à expiration, construit <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> est annulée (si elle n’a pas été annulé déjà).</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source>Subsequent calls to <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> will reset the <ph id="ph2">`millisecondsDelay`</ph> for the constructed <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, if it has not been canceled already.</source>
          <target state="translated">Les appels suivants à <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> réinitialisera le <ph id="ph2">`millisecondsDelay`</ph> pour construit <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, si elle n’a pas déjà été annulée.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsDelay" /&gt;</ph> is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsDelay" /&gt;</ph> est inférieur à -1.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source>The time interval to wait before canceling this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Intervalle de temps d'attente avant d'annuler cet élément <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class that will be canceled after the specified time span.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> qui sera annulée après l'intervalle de temps spécifié.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source>The countdown for the delay starts during the call to the constructor.</source>
          <target state="translated">Le compte à rebours pour le délai d’attente démarre lors de l’appel au constructeur.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source>When the delay expires, the constructed <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> is canceled, if it has not been canceled already.</source>
          <target state="translated">Lorsque le délai expire, construit <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> est annulé, si elle n’a pas déjà été annulée.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source>Subsequent calls to <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> will reset the delay for the constructed <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, if it has not been canceled already.</source>
          <target state="translated">Les appels suivants à <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> réinitialise le délai de construit <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, si elle n’a pas déjà été annulée.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="delay" /&gt;</ph><ph id="ph2">
</ph><ph id="ph3">&lt;see langword="." /&gt;</ph><ph id="ph4">
</ph><ph id="ph5">&lt;see cref="P:System.TimeSpan.TotalMilliseconds" /&gt;</ph> is less than -1 or greater than <ph id="ph6">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="delay" /&gt;</ph><ph id="ph2">
</ph><ph id="ph3">&lt;see langword="." /&gt;</ph><ph id="ph4">
</ph><ph id="ph5">&lt;see cref="P:System.TimeSpan.TotalMilliseconds" /&gt;</ph> est inférieur à -1 ou supérieur à <ph id="ph6">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="delay" /&gt;</ph><ph id="ph2">
</ph><ph id="ph3">&lt;see langword="." /&gt;</ph><ph id="ph4">
</ph><ph id="ph5">&lt;see cref="P:System.TimeSpan.TotalMilliseconds" /&gt;</ph> is less than -1 or greater than <ph id="ph6">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="delay" /&gt;</ph><ph id="ph2">
</ph><ph id="ph3">&lt;see langword="." /&gt;</ph><ph id="ph4">
</ph><ph id="ph5">&lt;see cref="P:System.TimeSpan.TotalMilliseconds" /&gt;</ph> est inférieur à -1 ou supérieur à <ph id="ph6">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Communicates a request for cancellation.</source>
          <target state="translated">Transmet une demande d'annulation.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>Communicates a request for cancellation.</source>
          <target state="translated">Transmet une demande d'annulation.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>The associated <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> will be notified of the cancellation and will transition to a state where <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> returns true.</source>
          <target state="translated">Associé <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> seront informés de l’annulation et passera à un état où <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> retourne la valeur true.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>Any callbacks or cancelable operations registered with the <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> will be executed.</source>
          <target state="translated">Tous les rappels ou opérations annulables inscrits avec le <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> sera exécuté.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>We recommend that cancelable operations and callbacks registered with <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> not throw exceptions.</source>
          <target state="translated">Nous recommandons que les opérations annulables et rappels enregistrés avec <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> pas lever d’exceptions.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>This overload of Cancel will aggregate any exceptions thrown into an <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.</source>
          <target state="translated">Cette surcharge de la méthode Cancel regroupera toutes les exceptions levées dans un <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph>, telles qu’un rappel levant une exception n’empêchera pas l’en cours d’exécution des autres rappels inscrits.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</source>
          <target state="translated">L’exemple suivant utilise un générateur de nombres aléatoires pour émuler une application de collecte de données qui lit les valeurs intégrales 10 onze instruments différents.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</source>
          <target state="translated">La valeur zéro indique que la mesure a échoué pour un instrument, auquel cas l’opération doit être annulée et aucune globale moyenne doivent être calculées.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>To handle the possible cancellation of the operation, the example instantiates a <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object that generates a cancellation token which is passed to a <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object.</source>
          <target state="translated">Pour gérer l’annulation possible de l’opération, l’exemple instancie un <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> objet qui génère un jeton d’annulation qui est passé à un <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> objet à son tour transmet le jeton d’annulation à chacune des tâches chargée de collecter les lectures d’un instrument particulier.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> méthode est appelée pour vous assurer que la moyenne est calculée uniquement une fois toutes les valeurs ont été collectées avec succès.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>If a task has not because it has been cancelled, the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType&gt;</ph> method throws an exception.</source>
          <target state="translated">Si une tâche ne comporte pas, car elle a été annulée, l’appel à la <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType&gt;</ph> méthode lève une exception.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>This <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">Ce <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> a été supprimé.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Exception globale qui contient toutes les exceptions levées par les rappels inscrits sur le <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> associé.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if exceptions should immediately propagate; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si les exceptions doivent se propager immédiatement ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>Communicates a request for cancellation, and specifies whether remaining callbacks and cancelable operations should be processed if an exception occurs.</source>
          <target state="translated">Communique une demande d’annulation, et spécifie si les rappels restants et les opérations annulables doivent être traités si une exception se produit.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>The associated <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> will be notified of the cancellation and will transition to a state where <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> returns <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Associé <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> seront informés de l’annulation et passera à un état où <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> retourne <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>Any callbacks or cancelable operations registered with the <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> will be executed.</source>
          <target state="translated">Tous les rappels ou opérations annulables inscrits avec le <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> sera exécuté.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>Callbacks will be executed synchronously in LIFO order.</source>
          <target state="translated">Rappels seront exécutées de façon synchrone dans un ordre LIFO.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>We recommend that cancelable operations and callbacks registered with <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> not throw exceptions.</source>
          <target state="translated">Nous recommandons que les opérations annulables et rappels enregistrés avec <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> pas lever d’exceptions.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>If <ph id="ph1">`throwOnFirstException`</ph> is <ph id="ph2">`true`</ph>, an exception will immediately propagate out of the call to <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph>, preventing the remaining callbacks and cancelable operations from being processed.</source>
          <target state="translated">Si <ph id="ph1">`throwOnFirstException`</ph> est <ph id="ph2">`true`</ph>, une exception se propagera immédiatement en dehors de l’appel à <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph>, empêchant les rappels restants et en cours de traitement des opérations annulables.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>If <ph id="ph1">`throwOnFirstException`</ph> is <ph id="ph2">`false`</ph>, this overload will aggregate any exceptions thrown into an <ph id="ph3">&lt;xref:System.AggregateException&gt;</ph>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.</source>
          <target state="translated">Si <ph id="ph1">`throwOnFirstException`</ph> est <ph id="ph2">`false`</ph>, cette surcharge regroupera toutes les exceptions levées dans un <ph id="ph3">&lt;xref:System.AggregateException&gt;</ph>, telles qu’un rappel levant une exception n’empêchera pas l’en cours d’exécution des autres rappels inscrits.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>This <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">Ce <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> a été supprimé.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Exception globale qui contient toutes les exceptions levées par les rappels inscrits sur le <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> associé.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Schedules a cancel operation on this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Planifie une opération d'annulation sur cette <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>The time span to wait before canceling this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Intervalle de temps avant l'annulation de cette <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>Schedules a cancel operation on this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> after the specified number of milliseconds.</source>
          <target state="translated">Planifie une opération d'annulation sur cette <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> après le nombre spécifié de millisecondes.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>The countdown for the <ph id="ph1">`millisecondsDelay`</ph> starts during this call.</source>
          <target state="translated">Le compte à rebours pour le <ph id="ph1">`millisecondsDelay`</ph> démarre pendant cet appel.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>When the <ph id="ph1">`millisecondsDelay`</ph> expires, this <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> is canceled, if it has not been canceled already.</source>
          <target state="translated">Lorsque le <ph id="ph1">`millisecondsDelay`</ph> arrive à expiration, cela <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> est annulé, si elle n’a pas déjà été annulée.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>Subsequent calls to CancelAfter will reset the <ph id="ph1">`millisecondsDelay`</ph> for this <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, if it has not been canceled already.</source>
          <target state="translated">Les appels suivants à CancelAfter va réinitialiser la <ph id="ph1">`millisecondsDelay`</ph> pour ce <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, si elle n’a pas déjà été annulée.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>The exception thrown when this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">Exception levée lorsque ce <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> a été supprimé.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>The exception thrown when <ph id="ph1">&lt;paramref name="millisecondsDelay" /&gt;</ph> is less than -1.</source>
          <target state="translated">Exception levée lorsque <ph id="ph1">&lt;paramref name="millisecondsDelay" /&gt;</ph> est inférieur à -1.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
          <source>The time span to wait before canceling this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Intervalle de temps avant l'annulation de cette <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
          <source>Schedules a cancel operation on this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> after the specified time span.</source>
          <target state="translated">Planifie une opération d'annulation sur cette <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> après l'intervalle de temps spécifié.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
          <source>The exception thrown when this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">Exception levée lorsque ce <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> a été supprimé.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
          <source>The exception that is thrown when <ph id="ph1">&lt;paramref name="delay" /&gt;</ph> is less than -1 or greater than Int32.MaxValue.</source>
          <target state="translated">Exception levée lorsque <ph id="ph1">&lt;paramref name="delay" /&gt;</ph> est inférieur à -1 ou supérieur à Int32.MaxValue.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that will be in the canceled state when any of the source tokens are in the canceled state.</source>
          <target state="translated">Crée une <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> qui est à l'état annulé quand l'un des jetons source est à l'état annulé.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source>An array that contains the cancellation token instances to observe.</source>
          <target state="translated">Tableau qui contient les instances de jeton d'annulation à observer.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that will be in the canceled state when any of the source tokens in the specified array are in the canceled state.</source>
          <target state="translated">Crée une <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> qui est à l'état « annulé » quand l'un des jetons sources du tableau spécifié est à l'état « annulé ».</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that is linked to the source tokens.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> qui est liée aux jetons sources.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> associated with one of the source tokens has been disposed.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> associé avec l'un des jetons sources a été supprimé.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source><ph id="ph1">&lt;paramref name="tokens" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="tokens" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source><ph id="ph1">&lt;paramref name="tokens" /&gt;</ph> is empty.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="tokens" /&gt;</ph> est vide.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>The first cancellation token to observe.</source>
          <target state="translated">Premier jeton d'annulation à observer.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>The second cancellation token to observe.</source>
          <target state="translated">Second jeton d'annulation à observer.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that will be in the canceled state when any of the source tokens are in the canceled state.</source>
          <target state="translated">Crée une <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> qui est à l'état annulé quand l'un des jetons source est à l'état annulé.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that is linked to the source tokens.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> qui est liée aux jetons sources.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> associated with one of the source tokens has been disposed.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> associé avec l'un des jetons sources a été supprimé.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class.</source>
          <target state="translated">Libère toutes les ressources utilisées par l'instance actuelle de la classe <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class.</source>
          <target state="translated">Libère toutes les ressources utilisées par l'instance actuelle de la classe <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</source>
          <target state="translated">Appelez la méthode <ph id="ph1">`Dispose`</ph> une fois que vous avez terminé d'utiliser <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> in an unusable state.</source>
          <target state="translated">La méthode <ph id="ph1">`Dispose`</ph> rend le <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> inutilisable.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> was occupying.</source>
          <target state="translated">Après avoir appelé <ph id="ph1">`Dispose`</ph>, vous devez libérer toutes les références à la <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> pour que le garbage collector puisse récupérer la mémoire qui le <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> occupée.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>de nettoyage des ressources non managées<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> et <bpt id="p2">[</bpt>implémentant une méthode de suppression<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</source>
          <target state="translated">Appelez toujours <ph id="ph1">`Dispose`</ph> avant de libérer votre dernière référence à <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">Sinon, les ressources utilisées ne seront pas libérées tant que le garbage collector n'aura pas appelé la méthode <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> de l'objet <ph id="ph2">`Finalize`</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour libérer les ressources managées et non managées ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> pour ne libérer que les ressources non managées.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class and optionally releases the managed resources.</source>
          <target state="translated">Libère les ressources non managées utilisées par la classe <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> et libère éventuellement les ressources managées.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source>Gets whether cancellation has been requested for this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Détermine si l'annulation a été demandée pour cette <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if cancellation has been requested for this <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'annulation a été demandée pour cette <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source>This property indicates whether cancellation has been requested for this token source, such as due to a call to its <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph> method.</source>
          <target state="translated">Cette propriété indique si l’annulation a été demandée pour cette source de jeton, par exemple en raison d’un appel à son <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source>If this property returns <ph id="ph1">`true`</ph>, it only guarantees that cancellation has been requested.</source>
          <target state="translated">Si cette propriété retourne <ph id="ph1">`true`</ph>, elle garantit uniquement que l’annulation a été demandée.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source>It does not guarantee that every handler registered with the corresponding token has finished executing, nor that cancellation requests have finished propagating to all registered handlers.</source>
          <target state="translated">Il ne garantit pas que l’exécution de chaque gestionnaire inscrit avec le jeton correspondant est terminée, ni que les demandes d’annulation ont été propagées à tous les gestionnaires inscrits.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source>Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.</source>
          <target state="translated">Synchronisation supplémentaire peut être requise, notamment dans des situations où les objets connexes sont annulés simultanément.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="P:System.Threading.CancellationTokenSource.Token">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> associated with this <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Obtient l'<ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> associée à cette <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.Token">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> associated with this <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> associé à ce <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="P:System.Threading.CancellationTokenSource.Token">
          <source>The token source has been disposed.</source>
          <target state="translated">La source de jeton a été supprimée.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>