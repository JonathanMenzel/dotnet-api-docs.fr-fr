<Type Name="SpinLock" FullName="System.Threading.SpinLock">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="10f26e6ab91a3ed621e096451edb0d7cae5bcc16" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48595429" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct SpinLock" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpinLock extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SpinLock" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpinLock" />
  <TypeSignature Language="C++ CLI" Value="public value class SpinLock" />
  <TypeSignature Language="F#" Value="type SpinLock = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsHeld = {IsHeld}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.SpinLock/SystemThreading_SpinLockDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="7895b-101">Fournit une primitive de verrou d'exclusion mutuelle où un thread, qui tente d'acquérir le verrou, attend dans une boucle en effectuant des vérifications de manière répétée jusqu'à ce que le verrou devienne disponible.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7895b-101">Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7895b-102">Pour obtenir un exemple montrant comment utiliser un verrou de rotation, consultez [Comment : utiliser le verrouillage SpinLock pour une synchronisation de bas niveau](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md).</span><span class="sxs-lookup"><span data-stu-id="7895b-102">For an example of how to use a Spin Lock, see [How to: Use SpinLock for Low-Level Synchronization](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md).</span></span>  
  
 <span data-ttu-id="7895b-103">Verrous de rotation peuvent servir pour les verrous de niveau feuille où l’allocation d’objet implicite à l’aide un <xref:System.Threading.Monitor>, taille, ou en raison de la pression du garbage collection, est trop coûteuse.</span><span class="sxs-lookup"><span data-stu-id="7895b-103">Spin locks can be used for leaf-level locks where the object allocation implied by using a <xref:System.Threading.Monitor>, in size or due to garbage collection pressure, is overly expensive.</span></span> <span data-ttu-id="7895b-104">Un verrou de rotation peut être utile pour éviter les blocages ; Toutefois, si vous prévoyez une quantité importante de blocage, vous devez probablement pas utiliser les verrous de rotation en raison de la rotation excessive.</span><span class="sxs-lookup"><span data-stu-id="7895b-104">A spin lock can be useful to avoid blocking; however, if you expect a significant amount of blocking, you should probably not use spin locks due to excessive spinning.</span></span> <span data-ttu-id="7895b-105">Rotation peut s’avérer utile lorsque les verrous sont et affinés nombre (par exemple, un verrou par nœud dans une liste liée) et également lorsque les durées de blocage du verrou sont toujours très courtes.</span><span class="sxs-lookup"><span data-stu-id="7895b-105">Spinning can be beneficial when locks are fine-grained and large in number (for example, a lock per node in a linked list) and also when lock hold-times are always extremely short.</span></span> <span data-ttu-id="7895b-106">En règle générale, tout en maintenant un verrou de rotation, un doit éviter une de ces actions :</span><span class="sxs-lookup"><span data-stu-id="7895b-106">In general, while holding a spin lock, one should avoid any of these actions:</span></span>  
  
-   <span data-ttu-id="7895b-107">blocage,</span><span class="sxs-lookup"><span data-stu-id="7895b-107">blocking,</span></span>  
  
-   <span data-ttu-id="7895b-108">appel de tout élément pouvant lui-même se bloquer,</span><span class="sxs-lookup"><span data-stu-id="7895b-108">calling anything that itself may block,</span></span>  
  
-   <span data-ttu-id="7895b-109">contenant à la fois de plus d’un verrou de rotation</span><span class="sxs-lookup"><span data-stu-id="7895b-109">holding more than one spin lock at once,</span></span>  
  
-   <span data-ttu-id="7895b-110">passer dynamiquement des appels (interface et virtuels), distribués</span><span class="sxs-lookup"><span data-stu-id="7895b-110">making dynamically dispatched calls (interface and virtuals),</span></span>  
  
-   <span data-ttu-id="7895b-111">passer de manière statique des appels dans du code non possédé, distribués ou</span><span class="sxs-lookup"><span data-stu-id="7895b-111">making statically dispatched calls into any code one doesn't own, or</span></span>  
  
-   <span data-ttu-id="7895b-112">allocation de mémoire.</span><span class="sxs-lookup"><span data-stu-id="7895b-112">allocating memory.</span></span>  
  
 <span data-ttu-id="7895b-113"><xref:System.Threading.SpinLock> doit être utilisé uniquement une fois que vous avez déterminé que cela améliorera les performances d’une application.</span><span class="sxs-lookup"><span data-stu-id="7895b-113"><xref:System.Threading.SpinLock> should only be used after you have been determined that doing so will improve an application's performance.</span></span> <span data-ttu-id="7895b-114">Il est également important de noter que <xref:System.Threading.SpinLock> est un type valeur, pour des raisons de performances.</span><span class="sxs-lookup"><span data-stu-id="7895b-114">It is also important to note that <xref:System.Threading.SpinLock> is a value type, for performance reasons.</span></span> <span data-ttu-id="7895b-115">Pour cette raison, vous devez être très attention à ne pas copier par erreur une <xref:System.Threading.SpinLock> de l’instance, comme les deux instances (d’origine et la copie) serait alors indépendamment les uns des autres, ce qui pourrait engendrer un comportement incorrect de l’application.</span><span class="sxs-lookup"><span data-stu-id="7895b-115">For this reason, you must be very careful not to accidentally copy a <xref:System.Threading.SpinLock> instance, as the two instances (the original and the copy) would then be completely independent of one another, which would likely lead to erroneous behavior of the application.</span></span> <span data-ttu-id="7895b-116">Si un <xref:System.Threading.SpinLock> instance doit être passée, il doit être passé par référence plutôt que par valeur.</span><span class="sxs-lookup"><span data-stu-id="7895b-116">If a <xref:System.Threading.SpinLock> instance must be passed around, it should be passed by reference rather than by value.</span></span>  
  
 <span data-ttu-id="7895b-117">Ne stockez pas <xref:System.Threading.SpinLock> instances dans les champs en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="7895b-117">Do not store <xref:System.Threading.SpinLock> instances in readonly fields.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7895b-118">L’exemple suivant montre comment utiliser un <xref:System.Threading.SpinLock>:</span><span class="sxs-lookup"><span data-stu-id="7895b-118">The following example shows how to use a <xref:System.Threading.SpinLock>:</span></span>  
  
 [!code-csharp[System.Threading.SpinLock#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.spinlock/cs/spinlock.cs#01)]
 [!code-vb[System.Threading.SpinLock#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.spinlock/vb/spinlock.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="7895b-119">Tous les membres de <see cref="T:System.Threading.SpinLock" /> sont thread-safe et peuvent être utilisés à partir de plusieurs threads simultanément.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7895b-119">All members of <see cref="T:System.Threading.SpinLock" /> are thread-safe and may be used from multiple threads concurrently.</span>
      </span>
    </threadsafe>
    <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
      <span data-ttu-id="7895b-120">SpinLock</span>
      <span class="sxs-lookup">
        <span data-stu-id="7895b-120">SpinLock</span>
      </span>
    </related>
    <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
      <span data-ttu-id="7895b-121">Comment : utiliser SpinWait et verrouillage SpinLock</span>
      <span class="sxs-lookup">
        <span data-stu-id="7895b-121">How to: Use SpinWait and SpinLock</span>
      </span>
    </related>
    <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
      <span data-ttu-id="7895b-122">Comment : activer le mode de suivi des threads dans le verrouillage Spinlock</span>
      <span class="sxs-lookup">
        <span data-stu-id="7895b-122">How to: Enable Thread-Tracking Mode in SpinLock</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpinLock (bool enableThreadOwnerTracking);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableThreadOwnerTracking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableThreadOwnerTracking As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpinLock(bool enableThreadOwnerTracking);" />
      <MemberSignature Language="F#" Value="new System.Threading.SpinLock : bool -&gt; System.Threading.SpinLock" Usage="new System.Threading.SpinLock enableThreadOwnerTracking" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enableThreadOwnerTracking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableThreadOwnerTracking">
          <span data-ttu-id="7895b-123">Indique s'il faut capturer et utiliser des ID de thread à des fins de débogage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-123">Whether to capture and use thread IDs for debugging purposes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7895b-124">Initialise une nouvelle instance de la structure de <see cref="T:System.Threading.SpinLock" /> avec l'option permettant de suivre les ID de thread afin d'améliorer le débogage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-124">Initializes a new instance of the <see cref="T:System.Threading.SpinLock" /> structure with the option to track thread IDs to improve debugging.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7895b-125">Le constructeur par défaut <xref:System.Threading.SpinLock> suit la propriété de thread.</span><span class="sxs-lookup"><span data-stu-id="7895b-125">The default constructor for <xref:System.Threading.SpinLock> tracks thread ownership.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7895b-126">L’exemple suivant montre comment un SpinLock peut être utilisé.</span><span class="sxs-lookup"><span data-stu-id="7895b-126">The following example demonstrates how a SpinLock may be used.</span></span>  
  
```csharp  
// C#  
public class MyType  
{  
    private SpinLock _spinLock = new SpinLock();  
  
    public void DoWork()  
    {  
        bool lockTaken = false;   
        try  
        {  
           _spinLock.Enter(ref lockTaken);  
           // do work here protected by the lock  
        }  
        finally  
        {  
            if (lockTaken) _spinLock.Exit();  
        }  
    }  
}  
```  
  
```vb  
' Visual Basic  
  
Class MyType  
   Private _spinLock As New SpinLock()  
  
   Public Sub DoWork()  
      Dim lockTaken As Boolean = False  
      Try  
         _spinLock.Enter(lockTaken)  
         ' do work here protected by the lock  
      Finally  
         If lockTaken Then _spinLock.Exit()  
      End Try  
   End Sub  
End Class  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7895b-127">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-127">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7895b-128">Comment : utiliser le verrouillage spinlock pour une synchronisation de bas niveau</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-128">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7895b-129">Comment : activer le mode de suivi des threads dans le verrouillage Spinlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-129">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public void Enter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Enter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enter(bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.Enter :  -&gt; unit" Usage="spinLock.Enter lockTaken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken">
          <span data-ttu-id="7895b-130">True si le verrou est acquis ; sinon, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-130">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="7895b-131">
            <c>lockTaken</c> doit être initialisé avec la valeur false avant l’appel à cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-131">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7895b-132">Acquiert le verrou de façon fiable, de sorte que même si une exception se produit dans l'appel de méthode, <paramref name="lockTaken" /> peut être examiné de façon fiable pour déterminer si le verrou a été acquis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-132">Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7895b-133"><xref:System.Threading.SpinLock> est un verrou non réentrant, ce qui signifie que si un thread détient le verrou, il n’est pas autorisé à entrer de nouveau le verrou.</span><span class="sxs-lookup"><span data-stu-id="7895b-133"><xref:System.Threading.SpinLock> is a non-reentrant lock, meaning that if a thread holds the lock, it is not allowed to enter the lock again.</span></span> <span data-ttu-id="7895b-134">Si le suivi de la propriété du thread est activée (s’il est activé est disponible via <xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>), une exception est levée lorsqu’un thread essaie d’entrer à nouveau un verrou qu’il détient déjà.</span><span class="sxs-lookup"><span data-stu-id="7895b-134">If thread ownership tracking is enabled (whether it's enabled is available through <xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>), an exception will be thrown when a thread tries to re-enter a lock it already holds.</span></span> <span data-ttu-id="7895b-135">Toutefois, si le suivi de la propriété du thread est désactivée, toute tentative d’entrer un verrou déjà détenu entraîne un blocage.</span><span class="sxs-lookup"><span data-stu-id="7895b-135">However, if thread ownership tracking is disabled, attempting to enter a lock already held will result in deadlock.</span></span>  
  
 <span data-ttu-id="7895b-136">Si vous appelez <xref:System.Threading.SpinLock.Exit%2A> sans avoir au préalable appelé <xref:System.Threading.SpinLock.Enter%2A> l’état interne de la <xref:System.Threading.SpinLock> peut être endommagé.</span><span class="sxs-lookup"><span data-stu-id="7895b-136">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7895b-137">L'argument <paramref name="lockTaken" /> doit être initialisé sur false avant d'appeler ENTRÉE.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-137">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling Enter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="7895b-138">Le suivi de la propriété du thread est activé et le thread actuel a déjà acquis ce verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-138">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7895b-139">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-139">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7895b-140">Comment : utiliser le verrouillage spinlock pour une synchronisation de bas niveau</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-140">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7895b-141">Comment : activer le mode de suivi des threads dans le verrouillage Spinlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-141">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Exit">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7895b-142">Libère le verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-142">Releases the lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit();" />
      <MemberSignature Language="F#" Value="member this.Exit : unit -&gt; unit" Usage="spinLock.Exit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7895b-143">Libère le verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-143">Releases the lock.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7895b-144">La surcharge par défaut de <xref:System.Threading.SpinLock.Exit%2A> présente le même comportement que si l’appel <xref:System.Threading.SpinLock.Exit%2A> à l’aide de la valeur true comme argument.</span><span class="sxs-lookup"><span data-stu-id="7895b-144">The default overload of <xref:System.Threading.SpinLock.Exit%2A> provides the same behavior as if calling <xref:System.Threading.SpinLock.Exit%2A> using true as the argument.</span></span>  
  
 <span data-ttu-id="7895b-145">Si vous appelez <xref:System.Threading.SpinLock.Exit%2A> sans avoir au préalable appelé <xref:System.Threading.SpinLock.Enter%2A> l’état interne de la <xref:System.Threading.SpinLock> peut être endommagé.</span><span class="sxs-lookup"><span data-stu-id="7895b-145">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="7895b-146">Le suivi de la propriété du thread est autorisé, et le thread actuel n'est pas le propriétaire de ce verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-146">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7895b-147">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-147">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7895b-148">Comment : utiliser le verrouillage spinlock pour une synchronisation de bas niveau</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-148">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7895b-149">Comment : activer le mode de suivi des threads dans le verrouillage Spinlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-149">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit (bool useMemoryBarrier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit(bool useMemoryBarrier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit (useMemoryBarrier As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit(bool useMemoryBarrier);" />
      <MemberSignature Language="F#" Value="member this.Exit : bool -&gt; unit" Usage="spinLock.Exit useMemoryBarrier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useMemoryBarrier" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useMemoryBarrier">
          <span data-ttu-id="7895b-150">Valeur booléenne qui indique si une barrière mémoire doit être émise pour publier immédiatement l'opération de sortie sur d'autres threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-150">A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7895b-151">Libère le verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-151">Releases the lock.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7895b-152">Appel <xref:System.Threading.SpinLock.Exit%2A> avec la `useMemoryBarrier` argument défini sur true améliorera l’équité du verrou au détriment des performances.</span><span class="sxs-lookup"><span data-stu-id="7895b-152">Calling <xref:System.Threading.SpinLock.Exit%2A> with the `useMemoryBarrier` argument set to true will improve the fairness of the lock at the expense of some performance.</span></span> <span data-ttu-id="7895b-153">La valeur par défaut <xref:System.Threading.SpinLock.Exit%2A> surcharge se comporte comme si la valeur true pour `useMemoryBarrier`.</span><span class="sxs-lookup"><span data-stu-id="7895b-153">The default <xref:System.Threading.SpinLock.Exit%2A> overload behaves as if specifying true for `useMemoryBarrier`.</span></span>  
  
 <span data-ttu-id="7895b-154">Si vous appelez <xref:System.Threading.SpinLock.Exit%2A> sans avoir au préalable appelé <xref:System.Threading.SpinLock.Enter%2A> l’état interne de la <xref:System.Threading.SpinLock> peut être endommagé.</span><span class="sxs-lookup"><span data-stu-id="7895b-154">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="7895b-155">Le suivi de la propriété du thread est autorisé, et le thread actuel n'est pas le propriétaire de ce verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-155">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7895b-156">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-156">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7895b-157">Comment : utiliser le verrouillage spinlock pour une synchronisation de bas niveau</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-157">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7895b-158">Comment : activer le mode de suivi des threads dans le verrouillage Spinlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-158">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsHeld">
      <MemberSignature Language="C#" Value="public bool IsHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHeld : bool" Usage="System.Threading.SpinLock.IsHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7895b-159">Obtient une valeur qui indique si le verrou est actuellement détenu par un thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-159">Gets whether the lock is currently held by any thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7895b-160">True si le verrou est actuellement détenu par un thread ; sinon, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-160">true if the lock is currently held by any thread; otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7895b-161">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-161">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7895b-162">Comment : utiliser le verrouillage spinlock pour une synchronisation de bas niveau</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-162">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7895b-163">Comment : activer le mode de suivi des threads dans le verrouillage Spinlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-163">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsHeldByCurrentThread">
      <MemberSignature Language="C#" Value="public bool IsHeldByCurrentThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeldByCurrentThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeldByCurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeldByCurrentThread As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeldByCurrentThread { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHeldByCurrentThread : bool" Usage="System.Threading.SpinLock.IsHeldByCurrentThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7895b-164">Obtient une valeur qui indique si le verrou est détenu par le thread actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-164">Gets whether the lock is held by the current thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7895b-165">True si le verrou est détenu par le thread actuel ; sinon, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-165">true if the lock is held by the current thread; otherwise false.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7895b-166">Si le verrou a été initialisé pour effectuer le suivi des threads de propriétaire, cela renverra si le verrou est acquis par le thread actuel.</span><span class="sxs-lookup"><span data-stu-id="7895b-166">If the lock was initialized to track owner threads, this will return whether the lock is acquired by the current thread.</span></span> <span data-ttu-id="7895b-167">Il n’est pas valide pour utiliser cette propriété lorsque le verrou a été initialisé pour ne pas effectuer le suivi de la propriété du thread.</span><span class="sxs-lookup"><span data-stu-id="7895b-167">It is invalid to use this property when the lock was initialized to not track thread ownership.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7895b-168">Le suivi de la propriété du thread est désactivé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-168">Thread ownership tracking is disabled.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7895b-169">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-169">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7895b-170">Comment : utiliser le verrouillage spinlock pour une synchronisation de bas niveau</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-170">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7895b-171">Comment : activer le mode de suivi des threads dans le verrouillage Spinlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-171">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsThreadOwnerTrackingEnabled">
      <MemberSignature Language="C#" Value="public bool IsThreadOwnerTrackingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsThreadOwnerTrackingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsThreadOwnerTrackingEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsThreadOwnerTrackingEnabled : bool" Usage="System.Threading.SpinLock.IsThreadOwnerTrackingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7895b-172">Obtient une valeur qui indique si le suivi de la propriété des threads est activé pour cette instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-172">Gets whether thread ownership tracking is enabled for this instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7895b-173">True si le suivi de la propriété du thread est autorisé pour cette instance ; sinon, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-173">true if thread ownership tracking is enabled for this instance; otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7895b-174">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-174">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7895b-175">Comment : utiliser le verrouillage spinlock pour une synchronisation de bas niveau</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-175">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7895b-176">Comment : activer le mode de suivi des threads dans le verrouillage Spinlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-176">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7895b-177">Tente d'acquérir le verrou de façon fiable, de sorte que même si une exception se produit dans l'appel de méthode, <paramref name="lockTaken" /> peut être examiné de façon fiable pour déterminer si le verrou a été acquis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-177">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7895b-178">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-178">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7895b-179">Comment : utiliser le verrouillage spinlock pour une synchronisation de bas niveau</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-179">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7895b-180">Comment : activer le mode de suivi des threads dans le verrouillage Spinlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-180">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter :  -&gt; unit" Usage="spinLock.TryEnter lockTaken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken">
          <span data-ttu-id="7895b-181">True si le verrou est acquis ; sinon, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-181">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="7895b-182">
            <c>lockTaken</c> doit être initialisé avec la valeur false avant l’appel à cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-182">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7895b-183">Tente d'acquérir le verrou de façon fiable, de sorte que même si une exception se produit dans l'appel de méthode, <paramref name="lockTaken" /> peut être examiné de façon fiable pour déterminer si le verrou a été acquis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-183">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7895b-184">Contrairement à <xref:System.Threading.SpinLock.Enter%2A>, TryEnter ne bloquera pas attendre le verrou soit disponible.</span><span class="sxs-lookup"><span data-stu-id="7895b-184">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block waiting for the lock to be available.</span></span> <span data-ttu-id="7895b-185">Si le verrou n’est pas disponible lors de la méthode TryEnter est appelée, elle retournera immédiatement sans aucune autre rotation.</span><span class="sxs-lookup"><span data-stu-id="7895b-185">If the lock is not available when TryEnter is called, it will return immediately without any further spinning.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7895b-186">L'argument <paramref name="lockTaken" /> doit être initialisé sur false avant d'appeler TryEnter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-186">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="7895b-187">Le suivi de la propriété du thread est activé et le thread actuel a déjà acquis ce verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-187">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7895b-188">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-188">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7895b-189">Comment : utiliser le verrouillage spinlock pour une synchronisation de bas niveau</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-189">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7895b-190">Comment : activer le mode de suivi des threads dans le verrouillage Spinlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-190">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter : int *  -&gt; unit" Usage="spinLock.TryEnter (millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="7895b-191">Nombre de millisecondes à attendre, ou <see cref="F:System.Threading.Timeout.Infinite" /> (-1) pour un délai d'attente infini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-191">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="7895b-192">True si le verrou est acquis ; sinon, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-192">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="7895b-193">
            <c>lockTaken</c> doit être initialisé avec la valeur false avant l’appel à cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-193">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7895b-194">Tente d'acquérir le verrou de façon fiable, de sorte que même si une exception se produit dans l'appel de méthode, <paramref name="lockTaken" /> peut être examiné de façon fiable pour déterminer si le verrou a été acquis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-194">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7895b-195">Contrairement à <xref:System.Threading.SpinLock.Enter%2A>, TryEnter ne bloquera pas indéfiniment attend le verrou soit disponible.</span><span class="sxs-lookup"><span data-stu-id="7895b-195">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="7895b-196">Il se bloque jusqu'à ce que le verrou soit disponible ou jusqu'à ce que le `millisecondsTimeout` a expiré.</span><span class="sxs-lookup"><span data-stu-id="7895b-196">It will block until either the lock is available or until the `millisecondsTimeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7895b-197">
            <paramref name="millisecondsTimeout" /> est un nombre négatif différent de -1, qui représente un délai d’attente infini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-197">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7895b-198">L'argument <paramref name="lockTaken" /> doit être initialisé sur false avant d'appeler TryEnter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-198">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="7895b-199">Le suivi de la propriété du thread est activé et le thread actuel a déjà acquis ce verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-199">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7895b-200">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-200">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7895b-201">Comment : utiliser le verrouillage spinlock pour une synchronisation de bas niveau</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-201">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7895b-202">Comment : activer le mode de suivi des threads dans le verrouillage Spinlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-202">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter : TimeSpan *  -&gt; unit" Usage="spinLock.TryEnter (timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="7895b-203">
            <see cref="T:System.TimeSpan" /> qui représente le nombre de millièmes de secondes à attendre ou <see cref="T:System.TimeSpan" /> qui représente -1 millième de seconde, pour attendre indéfiniment.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-203">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="7895b-204">True si le verrou est acquis ; sinon, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-204">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="7895b-205">
            <c>lockTaken</c> doit être initialisé avec la valeur false avant l’appel à cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-205">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7895b-206">Tente d'acquérir le verrou de façon fiable, de sorte que même si une exception se produit dans l'appel de méthode, <paramref name="lockTaken" /> peut être examiné de façon fiable pour déterminer si le verrou a été acquis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-206">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7895b-207">Contrairement à <xref:System.Threading.SpinLock.Enter%2A>, TryEnter ne bloquera pas indéfiniment attend le verrou soit disponible.</span><span class="sxs-lookup"><span data-stu-id="7895b-207">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="7895b-208">Il se bloque jusqu'à ce que le verrou soit disponible ou jusqu'à ce que le `timeout` a expiré.</span><span class="sxs-lookup"><span data-stu-id="7895b-208">It will block until either the lock is available or until the `timeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7895b-209">
            <paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d'attente infini - ou - le délai d'attente est supérieur à <see cref="F:System.Int32.MaxValue" /> millisecondes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-209">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7895b-210">L'argument <paramref name="lockTaken" /> doit être initialisé sur false avant d'appeler TryEnter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-210">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="7895b-211">Le suivi de la propriété du thread est activé et le thread actuel a déjà acquis ce verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-211">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="7895b-212">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-212">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="7895b-213">Comment : utiliser le verrouillage spinlock pour une synchronisation de bas niveau</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-213">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="7895b-214">Comment : activer le mode de suivi des threads dans le verrouillage Spinlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="7895b-214">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>