<Type Name="Monitor" FullName="System.Threading.Monitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="954622f2462225c1791594afeb678ab93b5bb509" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39989886" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Monitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Monitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Monitor" />
  <TypeSignature Language="VB.NET" Value="Public Class Monitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class Monitor abstract sealed" />
  <TypeSignature Language="F#" Value="type Monitor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="30391-101">Fournit un mécanisme qui synchronise l'accès aux objets.</span>
      <span class="sxs-lookup">
        <span data-stu-id="30391-101">Provides a mechanism that synchronizes access to objects.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30391-102">Le <xref:System.Threading.Monitor> classe permet de synchroniser l’accès à une région de code en prenant et en libérant un verrou sur un objet particulier en appelant le <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, et <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> méthodes.</span><span class="sxs-lookup"><span data-stu-id="30391-102">The <xref:System.Threading.Monitor> class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="30391-103">Les verrous d’objets permettent de restreindre l’accès à un bloc de code, généralement appelé une section critique.</span><span class="sxs-lookup"><span data-stu-id="30391-103">Object locks provide the ability to restrict access to a block of code, commonly called a critical section.</span></span> <span data-ttu-id="30391-104">Pendant un thread possède le verrou d’un objet, aucun autre thread ne peut acquérir ce verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-104">While a thread owns the lock for an object, no other thread can acquire that lock.</span></span> <span data-ttu-id="30391-105">Vous pouvez également utiliser le <xref:System.Threading.Monitor> classe pour vous assurer qu’aucun autre thread n’est autorisé à accéder à une section de l’application de code en cours d’exécution par le propriétaire du verrou, sauf si l’autre thread exécute le code à l’aide d’un autre objet verrouillé.</span><span class="sxs-lookup"><span data-stu-id="30391-105">You can also use the <xref:System.Threading.Monitor> class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.</span></span>  
  
 <span data-ttu-id="30391-106">Dans cet article :</span><span class="sxs-lookup"><span data-stu-id="30391-106">In this article:</span></span>  
  
 <span data-ttu-id="30391-107">[La classe Monitor : une vue d’ensemble](#Overview) </span><span class="sxs-lookup"><span data-stu-id="30391-107">[The Monitor class: An overview](#Overview) </span></span>  
 <span data-ttu-id="30391-108">[L’objet de verrouillage](#Lock) </span><span class="sxs-lookup"><span data-stu-id="30391-108">[The lock object](#Lock) </span></span>  
 <span data-ttu-id="30391-109">[La section critique](#CriticalSection) </span><span class="sxs-lookup"><span data-stu-id="30391-109">[The critical section](#CriticalSection) </span></span>  
 <span data-ttu-id="30391-110">[Wait, Pulse et PulseAll](#Pulse) </span><span class="sxs-lookup"><span data-stu-id="30391-110">[Pulse, PulseAll, and Wait](#Pulse) </span></span>  
 [<span data-ttu-id="30391-111">Moniteurs et les handles d’attente</span><span class="sxs-lookup"><span data-stu-id="30391-111">Monitors and wait handles</span></span>](#WaitHandles)  
  
<a name="Overview"></a>   
## <a name="the-monitor-class-an-overview"></a><span data-ttu-id="30391-112">La classe Monitor : une vue d’ensemble</span><span class="sxs-lookup"><span data-stu-id="30391-112">The Monitor class: An overview</span></span>  
 <span data-ttu-id="30391-113"><xref:System.Threading.Monitor> présente les caractéristiques suivantes :</span><span class="sxs-lookup"><span data-stu-id="30391-113"><xref:System.Threading.Monitor> has the following features:</span></span>  
  
-   <span data-ttu-id="30391-114">Il est associé à un objet à la demande.</span><span class="sxs-lookup"><span data-stu-id="30391-114">It is associated with an object on demand.</span></span>  
  
-   <span data-ttu-id="30391-115">Il est indépendant, ce qui signifie qu’elle peut être appelée directement à partir de n’importe quel contexte.</span><span class="sxs-lookup"><span data-stu-id="30391-115">It is unbound, which means it can be called directly from any context.</span></span>  
  
-   <span data-ttu-id="30391-116">Une instance de la <xref:System.Threading.Monitor> classe ne peut pas être créée ; les méthodes de la <xref:System.Threading.Monitor> classe sont tous statiques.</span><span class="sxs-lookup"><span data-stu-id="30391-116">An instance of the <xref:System.Threading.Monitor> class cannot be created; the methods of the <xref:System.Threading.Monitor> class are all static.</span></span> <span data-ttu-id="30391-117">Chaque méthode est passée à l’objet synchronisé qui contrôle l’accès à la section critique.</span><span class="sxs-lookup"><span data-stu-id="30391-117">Each method is passed the synchronized object that controls access to the critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="30391-118">Utilisez le <xref:System.Threading.Monitor> classe pour verrouiller les objets autres que des chaînes (autrement dit, les types référence autres que <xref:System.String>), pas des types valeur.</span><span class="sxs-lookup"><span data-stu-id="30391-118">Use the <xref:System.Threading.Monitor> class to lock objects other than strings (that is, reference types other than <xref:System.String>), not value types.</span></span> <span data-ttu-id="30391-119">Pour plus d’informations, consultez les surcharges de la <xref:System.Threading.Monitor.Enter%2A> (méthode) et [l’objet verrou](#Lock) section plus loin dans cet article.</span><span class="sxs-lookup"><span data-stu-id="30391-119">For details, see the overloads of the <xref:System.Threading.Monitor.Enter%2A> method and [The lock object](#Lock) section later in this article.</span></span>  
  
 <span data-ttu-id="30391-120">Le tableau suivant décrit les actions qui peuvent être effectuées par les threads qui accèdent à des objets synchronisés :</span><span class="sxs-lookup"><span data-stu-id="30391-120">The following table describes the actions that can be taken by threads that access synchronized objects:</span></span>  
  
|<span data-ttu-id="30391-121">Action</span><span class="sxs-lookup"><span data-stu-id="30391-121">Action</span></span>|<span data-ttu-id="30391-122">Description </span><span class="sxs-lookup"><span data-stu-id="30391-122">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="30391-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span><span class="sxs-lookup"><span data-stu-id="30391-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span></span>|<span data-ttu-id="30391-124">Acquiert un verrou pour un objet.</span><span class="sxs-lookup"><span data-stu-id="30391-124">Acquires a lock for an object.</span></span> <span data-ttu-id="30391-125">Cette action marque également le début d’une section critique.</span><span class="sxs-lookup"><span data-stu-id="30391-125">This action also marks the beginning of a critical section.</span></span> <span data-ttu-id="30391-126">Aucun autre thread ne peut entrer la section critique, sauf si elle s’exécute les instructions dans la section critique à l’aide d’un autre objet verrouillé.</span><span class="sxs-lookup"><span data-stu-id="30391-126">No other thread can enter the critical section unless it is executing the instructions in the critical section using a different locked object.</span></span>|  
|<xref:System.Threading.Monitor.Wait%2A>|<span data-ttu-id="30391-127">Libère le verrou sur un objet afin de permettre d’autres threads pour verrouiller et accéder à l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-127">Releases the lock on an object in order to permit other threads to lock and access the object.</span></span> <span data-ttu-id="30391-128">Le thread appelant attend qu’un autre thread accède à l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-128">The calling thread waits while another thread accesses the object.</span></span> <span data-ttu-id="30391-129">Signaux d’impulsion sont utilisés pour informer les threads en attente sur les modifications apportées à un état d’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-129">Pulse signals are used to notify waiting threads about changes to an object's state.</span></span>|  
|<span data-ttu-id="30391-130"><xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A></span><span class="sxs-lookup"><span data-stu-id="30391-130"><xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A></span></span>|<span data-ttu-id="30391-131">Envoie un signal à un ou plusieurs threads en attente.</span><span class="sxs-lookup"><span data-stu-id="30391-131">Sends a signal to one or more waiting threads.</span></span> <span data-ttu-id="30391-132">Le signal avertit un thread en attente que l’état de l’objet verrouillé a changé, et le propriétaire du verrou est prêt à libérer le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-132">The signal notifies a waiting thread that the state of the locked object has changed, and the owner of the lock is ready to release the lock.</span></span> <span data-ttu-id="30391-133">Le thread en attente est placé dans la file d’attente opérationnelle de l’objet afin qu’il peut finir par recevoir le verrou pour l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-133">The waiting thread is placed in the object's ready queue so that it might eventually receive the lock for the object.</span></span> <span data-ttu-id="30391-134">Une fois que le thread dispose le verrou, il peut vérifier le nouvel état de l’objet pour voir si l’état requis a été atteint.</span><span class="sxs-lookup"><span data-stu-id="30391-134">Once the thread has the lock, it can check the new state of the object to see if the required state has been reached.</span></span>|  
|<xref:System.Threading.Monitor.Exit%2A>|<span data-ttu-id="30391-135">Libère le verrou sur un objet.</span><span class="sxs-lookup"><span data-stu-id="30391-135">Releases the lock on an object.</span></span> <span data-ttu-id="30391-136">Cette action marque également la fin d’une section critique protégée par l’objet verrouillé.</span><span class="sxs-lookup"><span data-stu-id="30391-136">This action also marks the end of a critical section protected by the locked object.</span></span>|  
  
 <span data-ttu-id="30391-137">Compter les [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], il existe deux ensembles de surcharges pour les <xref:System.Threading.Monitor.Enter%2A> et <xref:System.Threading.Monitor.TryEnter%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="30391-137">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], there are two sets of overloads for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.TryEnter%2A> methods.</span></span> <span data-ttu-id="30391-138">Un ensemble de surcharges a un `ref` (en c#) ou `ByRef` (en Visual Basic) <xref:System.Boolean> paramètre qui est défini atomiquement sur `true` si le verrou est acquis, même si une exception est levée lors de l’acquisition du verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-138">One set of overloads has a `ref` (in C#) or `ByRef` (in Visual Basic) <xref:System.Boolean> parameter that is atomically set to `true` if the lock is acquired, even if an exception is thrown when acquiring the lock.</span></span> <span data-ttu-id="30391-139">Utilisez ces surcharges s’il est essentiel pour libérer le verrou dans tous les cas, même lorsque les ressources que protège le verrou ne peuvent pas être dans un état cohérent.</span><span class="sxs-lookup"><span data-stu-id="30391-139">Use these overloads if it is critical to release the lock in all cases, even when the resources the lock is protecting might not be in a consistent state.</span></span>  
  
<a name="Lock"></a>   
## <a name="the-lock-object"></a><span data-ttu-id="30391-140">L’objet de verrouillage</span><span class="sxs-lookup"><span data-stu-id="30391-140">The lock object</span></span>  
 <span data-ttu-id="30391-141">La classe Monitor se compose de `static` (en c#) ou `Shared` (en Visual Basic) méthodes qui opèrent sur un objet qui contrôle l’accès à la section critique.</span><span class="sxs-lookup"><span data-stu-id="30391-141">The Monitor class consists of `static` (in C#) or  `Shared` (in Visual Basic) methods that operate on an object that controls access to the critical section.</span></span>  <span data-ttu-id="30391-142">Les informations suivantes sont conservées pour chaque objet synchronisé :</span><span class="sxs-lookup"><span data-stu-id="30391-142">The following information is maintained for each synchronized object:</span></span>  
  
-   <span data-ttu-id="30391-143">Une référence au thread qui détient actuellement le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-143">A reference to the thread that currently holds the lock.</span></span>  
  
-   <span data-ttu-id="30391-144">Une référence à une file d’attente opérationnelle, qui contient les threads prêts à obtenir le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-144">A reference to a ready queue, which contains the threads that are ready to obtain the lock.</span></span>  
  
-   <span data-ttu-id="30391-145">Une référence à une file d’attente, qui contient les threads qui attendent pour la notification d’un changement de l’état de l’objet verrouillé.</span><span class="sxs-lookup"><span data-stu-id="30391-145">A reference to a waiting queue, which contains the threads that are waiting for notification of a change in the state of the locked object.</span></span>  
  
 <span data-ttu-id="30391-146"><xref:System.Threading.Monitor> verrouille des objets (c'est-à-dire des types référence), mais pas des types valeur.</span><span class="sxs-lookup"><span data-stu-id="30391-146"><xref:System.Threading.Monitor> locks objects (that is, reference types), not value types.</span></span> <span data-ttu-id="30391-147">Il est possible de passer un type valeur à <xref:System.Threading.Monitor.Enter%2A> et à <xref:System.Threading.Monitor.Exit%2A>, mais il est converti (boxed) séparément pour chaque appel.</span><span class="sxs-lookup"><span data-stu-id="30391-147">While you can pass a value type to <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, it is boxed separately for each call.</span></span> <span data-ttu-id="30391-148">Étant donné que chaque appel crée un objet distinct, <xref:System.Threading.Monitor.Enter%2A> n'est jamais bloqué, et le code qu'il est censé protéger n'est pas correctement synchronisé.</span><span class="sxs-lookup"><span data-stu-id="30391-148">Since each call creates a separate object, <xref:System.Threading.Monitor.Enter%2A> never blocks, and the code it is supposedly protecting is not really synchronized.</span></span> <span data-ttu-id="30391-149">Comme l'objet passé à <xref:System.Threading.Monitor.Exit%2A> est en plus différent de l'objet passé à <xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor> lève l'exception <xref:System.Threading.SynchronizationLockException> avec le message suivant : « La méthode de synchronisation de l'objet a été appelée à partir d'un bloc de code non synchronisé ».</span><span class="sxs-lookup"><span data-stu-id="30391-149">In addition, the object passed to <xref:System.Threading.Monitor.Exit%2A> is different from the object passed to <xref:System.Threading.Monitor.Enter%2A>, so <xref:System.Threading.Monitor> throws <xref:System.Threading.SynchronizationLockException> exception with the message "Object synchronization method was called from an unsynchronized block of code."</span></span>  
  
 <span data-ttu-id="30391-150">L'exemple de code suivant illustre ce problème.</span><span class="sxs-lookup"><span data-stu-id="30391-150">The following example illustrates this problem.</span></span> <span data-ttu-id="30391-151">Il lance dix tâches, chacune d'elles restant en veille pendant 250 millisecondes seulement.</span><span class="sxs-lookup"><span data-stu-id="30391-151">It launches ten tasks, each of which just sleeps for 250 milliseconds.</span></span> <span data-ttu-id="30391-152">Ensuite, chaque tâche met à jour une variable de compteur, `nTasks`, qui sert à compter le nombre de tâches ayant été lancées et exécutées.</span><span class="sxs-lookup"><span data-stu-id="30391-152">Each task then updates a counter variable, `nTasks`, which is intended to count the number of tasks that actually launched and executed.</span></span> <span data-ttu-id="30391-153">`nTasks` est une variable globale qui peut être modifiée par plusieurs tâches simultanément. Pour empêcher cela, un gestionnaire (monitor) est utilisé.</span><span class="sxs-lookup"><span data-stu-id="30391-153">Because `nTasks` is a global variable that can be updated by multiple tasks simultaneously, a monitor is used to protect it from simultaneous modification by multiple tasks.</span></span> <span data-ttu-id="30391-154">Toutefois, chaque tâche lève une exception <xref:System.Threading.SynchronizationLockException>, comme le montre le résultat de l'exemple.</span><span class="sxs-lookup"><span data-stu-id="30391-154">However, as the output from the example shows, each of the tasks throws a <xref:System.Threading.SynchronizationLockException> exception.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badlock1.cs#2)]
 [!code-vb[Conceptual.Monitors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badlock1.vb#2)]  
  
 <span data-ttu-id="30391-155">Chaque tâche lève une exception <xref:System.Threading.SynchronizationLockException>, car la variable `nTasks` est convertie (boxed) avant l'appel à la méthode <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> dans chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="30391-155">Each task throws a <xref:System.Threading.SynchronizationLockException> exception because the `nTasks` variable is boxed before the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method in each task.</span></span> <span data-ttu-id="30391-156">En d'autres termes, chaque appel de méthode est passé à une variable distincte, qui est indépendante des autres variables.</span><span class="sxs-lookup"><span data-stu-id="30391-156">In other words, each method call is passed a separate variable that is independent of the others.</span></span> <span data-ttu-id="30391-157">`nTasks` est de nouveau convertie (boxed) dans l'appel à la méthode <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="30391-157">`nTasks` is boxed again in the call to the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="30391-158">Cette opération crée encore dix variables boxed qui sont indépendantes les unes des autres, `nTasks`, et les dix variables boxed dans l'appel à la méthode <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="30391-158">Once again, this creates ten new boxed variables, which are independent of each other, `nTasks`, and the ten boxed variables created in the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="30391-159">L'exception est levée, car le code tente de libérer un verrou sur une nouvelle variable qui n'était pas précédemment verrouillée.</span><span class="sxs-lookup"><span data-stu-id="30391-159">The exception is thrown, then, because our code is attempting to release a lock on a newly created variable that was not previously locked.</span></span>  
  
 <span data-ttu-id="30391-160">Vous pouvez convertir (box) une variable de type valeur avant d'appeler <xref:System.Threading.Monitor.Enter%2A> et <xref:System.Threading.Monitor.Exit%2A>, comme dans l'exemple suivant, et passer le même objet boxed aux deux méthodes, mais cette opération n'offre aucun avantage.</span><span class="sxs-lookup"><span data-stu-id="30391-160">Although you can box a value type variable before calling <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, as shown in the following example, and pass the same boxed object to both methods, there is no advantage to doing this.</span></span> <span data-ttu-id="30391-161">En effet, les modifications apportées à la variable non convertie (unboxed) ne sont pas répercutées dans la copie convertie (boxed), et il n'est pas possible de modifier la valeur de cette copie.</span><span class="sxs-lookup"><span data-stu-id="30391-161">Changes to the unboxed variable are not reflected in the boxed copy, and there is no way to change the value of the boxed copy.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badbox1.cs#3)]
 [!code-vb[Conceptual.Monitors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badbox1.vb#3)]  
  
 <span data-ttu-id="30391-162">Lorsque vous sélectionnez un objet sur lequel effectuer la synchronisation, vous devez verrouiller l’uniquement sur les objets privés ou internes.</span><span class="sxs-lookup"><span data-stu-id="30391-162">When selecting an object on which to synchronize, you should lock only on private or internal objects.</span></span> <span data-ttu-id="30391-163">Verrouillage d’objets externes peut entraîner des blocages, étant donné que le code non lié peut choisir les mêmes verrouiller objets à des fins différentes.</span><span class="sxs-lookup"><span data-stu-id="30391-163">Locking on external objects might result in deadlocks, because unrelated code could choose the same objects to lock on for different purposes.</span></span>  
  
 <span data-ttu-id="30391-164">Notez que vous pouvez synchroniser sur un objet dans plusieurs domaines d’application si l’objet utilisé comme verrou dérive <xref:System.MarshalByRefObject>.</span><span class="sxs-lookup"><span data-stu-id="30391-164">Note that you can synchronize on an object in multiple application domains if the object used for the lock derives from <xref:System.MarshalByRefObject>.</span></span>  
  
<a name="CriticalSection"></a>   
## <a name="the-critical-section"></a><span data-ttu-id="30391-165">La section critique</span><span class="sxs-lookup"><span data-stu-id="30391-165">The critical section</span></span>  
 <span data-ttu-id="30391-166">Utilisez le <xref:System.Threading.Monitor.Enter%2A> et <xref:System.Threading.Monitor.Exit%2A> méthodes pour marquer le début et la fin d’une section critique.</span><span class="sxs-lookup"><span data-stu-id="30391-166">Use the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods to mark the beginning and end of a critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="30391-167">La fonctionnalité fournie par le <xref:System.Threading.Monitor.Enter%2A> et <xref:System.Threading.Monitor.Exit%2A> méthodes est identique à celle fournie par le [verrou](~/docs/csharp/language-reference/keywords/lock-statement.md) instruction en langage c# et le [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) instruction en Visual Basic, à ceci près que le constructions de langage de type wrap le <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> surcharge de méthode et la <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> méthode dans un `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="30391-167">The functionality provided by the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods is identical to that provided by the [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement in C# and the [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement in Visual Basic, except that the language constructs wrap the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> method overload and the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method in a `try`…`finally`</span></span> <span data-ttu-id="30391-168">bloc pour garantir que la libération du moniteur.</span><span class="sxs-lookup"><span data-stu-id="30391-168">block to ensure that the monitor is released.</span></span>  
  
 <span data-ttu-id="30391-169">Si la section critique est un ensemble d’instructions contiguës, puis le verrou acquis par la <xref:System.Threading.Monitor.Enter%2A> méthode ne garantit qu’un seul thread peut exécuter le code délimité avec l’objet verrouillé.</span><span class="sxs-lookup"><span data-stu-id="30391-169">If the critical section is a set of contiguous instructions, then the lock acquired by the <xref:System.Threading.Monitor.Enter%2A> method guarantees that only a single thread can execute the enclosed code with the locked object.</span></span> <span data-ttu-id="30391-170">Dans ce cas, nous vous recommandons de placer ce code dans un `try` bloquer et placer l’appel à la <xref:System.Threading.Monitor.Exit%2A> méthode dans un `finally` bloc.</span><span class="sxs-lookup"><span data-stu-id="30391-170">In this case, we recommend that you place that code in a `try` block and place the call to the <xref:System.Threading.Monitor.Exit%2A> method in a `finally` block.</span></span> <span data-ttu-id="30391-171">Cela garantit la libération du verrou même si une exception se produit.</span><span class="sxs-lookup"><span data-stu-id="30391-171">This ensures that the lock is released even if an exception occurs.</span></span> <span data-ttu-id="30391-172">Le fragment de code suivant illustre ce modèle.</span><span class="sxs-lookup"><span data-stu-id="30391-172">The following code fragment illustrates this pattern.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#2)]
 [!code-vb[System.Threading.Monitor.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#2)]  
  
 <span data-ttu-id="30391-173">Cette fonctionnalité est généralement utilisée pour synchroniser l’accès à un mappage statique ou méthode d’instance d’une classe.</span><span class="sxs-lookup"><span data-stu-id="30391-173">This facility is typically used to synchronize access to a static or instance method of a class.</span></span>  
  
 <span data-ttu-id="30391-174">Si une section critique s’étend sur l’ensemble d’une méthode, l’outil de verrouillage peut être obtenue en plaçant le <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> sur la méthode et en spécifiant le <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> valeur dans le constructeur de <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="30391-174">If a critical section spans an entire method, the locking facility can be achieved by placing the <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> on the method, and specifying the <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> value in the constructor of <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span></span> <span data-ttu-id="30391-175">Lorsque vous utilisez cet attribut, le <xref:System.Threading.Monitor.Enter%2A> et <xref:System.Threading.Monitor.Exit%2A> les appels de méthode ne sont pas nécessaires.</span><span class="sxs-lookup"><span data-stu-id="30391-175">When you use this attribute, the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> method calls are not needed.</span></span> <span data-ttu-id="30391-176">Le fragment de code suivant illustre ce modèle :</span><span class="sxs-lookup"><span data-stu-id="30391-176">The following code fragment illustrates this pattern:</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#3)]
 [!code-vb[System.Threading.Monitor.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#3)]  
  
 <span data-ttu-id="30391-177">Notez que l’attribut oblige le thread actuel détient le verrou jusqu'à ce que la méthode est retournée ; Si le verrou peut être libéré plus tôt, utilisez la <xref:System.Threading.Monitor> classe c# [verrou](~/docs/csharp/language-reference/keywords/lock-statement.md) instruction ou Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) instruction à l’intérieur de la méthode au lieu de l’attribut.</span><span class="sxs-lookup"><span data-stu-id="30391-177">Note that the attribute causes the current thread to hold the lock until the method returns; if the lock can be released sooner, use the <xref:System.Threading.Monitor> class, the C# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement, or the Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement inside of the method instead of the attribute.</span></span>  
  
 <span data-ttu-id="30391-178">S’il est possible pour le <xref:System.Threading.Monitor.Enter%2A> et <xref:System.Threading.Monitor.Exit%2A> les instructions qui verrouillent et libèrent un objet donné à l’intersection des membres ou les limites de classe ou les deux, cette pratique n’est pas recommandée.</span><span class="sxs-lookup"><span data-stu-id="30391-178">While it is possible for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> statements that lock and release a given object to cross member or class boundaries or both, this practice is not recommended.</span></span>  
  
<a name="Pulse"></a>   
## <a name="pulse-pulseall-and-wait"></a><span data-ttu-id="30391-179">Wait, Pulse et PulseAll</span><span class="sxs-lookup"><span data-stu-id="30391-179">Pulse, PulseAll, and Wait</span></span>  
 <span data-ttu-id="30391-180">Une fois un thread possède le verrou et a entré dans la section critique qui protège le verrou, elle peut appeler le <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, et <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> méthodes.</span><span class="sxs-lookup"><span data-stu-id="30391-180">Once a thread owns the lock and has entered the critical section that the lock protects, it can call the <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="30391-181"><xref:System.Threading.Monitor.Wait%2A> Libère le verrou si celui-ci est maintenu, permet à un thread en attente ou threads pour obtenir le verrou et entrez la section critique et attend d’être averti par un appel à la <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> ou <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="30391-181"><xref:System.Threading.Monitor.Wait%2A> releases the lock if it is held, allows a waiting thread or threads to obtain the lock and enter the critical section,   and waits to be notified by a call to the <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> or <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="30391-182">Quand la méthode <xref:System.Threading.Monitor.Wait%2A> reçoit la notification, elle retourne le verrou, puis le reprend.</span><span class="sxs-lookup"><span data-stu-id="30391-182">When <xref:System.Threading.Monitor.Wait%2A> is notified, it returns and obtains the lock again.</span></span>  
  
 <span data-ttu-id="30391-183"><xref:System.Threading.Monitor.Pulse%2A> et <xref:System.Threading.Monitor.PulseAll%2A> envoient le signal d'exécution du thread suivant dans la file d'attente.</span><span class="sxs-lookup"><span data-stu-id="30391-183">Both <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.PulseAll%2A> signal for the next thread in the wait queue to proceed.</span></span>  
  
<a name="WaitHandles"></a>   
## <a name="monitors-and-wait-handles"></a><span data-ttu-id="30391-184">Moniteurs et les handles d’attente</span><span class="sxs-lookup"><span data-stu-id="30391-184">Monitors and wait handles</span></span>  
 <span data-ttu-id="30391-185">Il est important de noter la distinction entre l’utilisation de la <xref:System.Threading.Monitor> classe et <xref:System.Threading.WaitHandle> objets.</span><span class="sxs-lookup"><span data-stu-id="30391-185">It is important to note the distinction between the use of the <xref:System.Threading.Monitor> class and <xref:System.Threading.WaitHandle> objects.</span></span>  
  
-   <span data-ttu-id="30391-186">Le <xref:System.Threading.Monitor> classe est purement managés, entièrement portables et peuvent être plus efficace en termes de besoins en ressources de système d’exploitation.</span><span class="sxs-lookup"><span data-stu-id="30391-186">The <xref:System.Threading.Monitor> class is purely managed, fully portable, and might be more efficient in terms of operating-system resource requirements.</span></span>  
  
-   <span data-ttu-id="30391-187">Les objets <xref:System.Threading.WaitHandle> représentent des objets d'attente de système d'exploitation et sont utiles pour la synchronisation entre le code managé et le code non managé. Ils exposent certaines fonctionnalités avancées de système d'exploitation, comme la possibilité d'attendre plusieurs objets à la fois.</span><span class="sxs-lookup"><span data-stu-id="30391-187"><xref:System.Threading.WaitHandle> objects represent operating-system waitable objects, are useful for synchronizing between managed and unmanaged code, and expose some advanced operating-system features like the ability to wait on many objects at once.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="30391-188">L’exemple suivant utilise le <xref:System.Threading.Monitor> classe pour synchroniser l’accès à une seule instance d’un générateur de nombres aléatoire représenté par la <xref:System.Random> classe.</span><span class="sxs-lookup"><span data-stu-id="30391-188">The following example uses the <xref:System.Threading.Monitor> class to synchronize access to a single instance of a random number generator represented by the <xref:System.Random> class.</span></span> <span data-ttu-id="30391-189">L’exemple crée dix tâches, chacun d’eux exécute de façon asynchrone sur un thread de pool de threads.</span><span class="sxs-lookup"><span data-stu-id="30391-189">The example creates ten tasks, each of which executes asynchronously on a thread pool thread.</span></span> <span data-ttu-id="30391-190">Chaque tâche génère des nombres aléatoires 10 000, calcule leur moyenne et met à jour les deux variables de niveau de la procédure permettant de maintenir un total en cours d’exécution du nombre de nombres aléatoires et leur somme.</span><span class="sxs-lookup"><span data-stu-id="30391-190">Each task generates 10,000 random numbers, calculates their average, and updates two procedure-level variables that maintain a running total of the number of random numbers generated and their sum.</span></span> <span data-ttu-id="30391-191">Une fois que toutes les tâches ont été exécutées, ces deux valeurs sont ensuite utilisées pour calculer la moyenne globale.</span><span class="sxs-lookup"><span data-stu-id="30391-191">After all tasks have executed, these two values are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Monitor.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="30391-192">Car ils sont accessibles à partir de n’importe quelle tâche en cours d’exécution sur un thread de pool de threads, accéder aux variables `total` et `n` doivent également être synchronisés.</span><span class="sxs-lookup"><span data-stu-id="30391-192">Because they can be accessed from any task running on a thread pool thread, access to the variables `total` and `n` must also be synchronized.</span></span> <span data-ttu-id="30391-193">Le <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> méthode est utilisée à cet effet.</span><span class="sxs-lookup"><span data-stu-id="30391-193">The <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> method is used for this purpose.</span></span>  
  
 <span data-ttu-id="30391-194">L’exemple suivant illustre l’utilisation combinée de la <xref:System.Threading.Monitor> classe (implémentée avec le `lock` ou `SyncLock` construction de langage), le <xref:System.Threading.Interlocked> (classe) et le <xref:System.Threading.AutoResetEvent> classe.</span><span class="sxs-lookup"><span data-stu-id="30391-194">The following example demonstrates the combined use of the <xref:System.Threading.Monitor> class (implemented with the `lock` or `SyncLock` language construct), the <xref:System.Threading.Interlocked> class, and the <xref:System.Threading.AutoResetEvent> class.</span></span> <span data-ttu-id="30391-195">Il définit deux `internal` (en c#) ou `Friend` (en Visual Basic), les classes `SyncResource` et `UnSyncResource`, qui fournissent respectivement un accès synchronisé et non synchronisé à une ressource.</span><span class="sxs-lookup"><span data-stu-id="30391-195">It defines two `internal` (in C#) or `Friend` (in Visual Basic) classes, `SyncResource` and `UnSyncResource`, that respectively provide synchronized and unsynchronized access to a resource.</span></span> <span data-ttu-id="30391-196">Pour vous assurer que l’exemple illustre la différence entre l’accès synchronisé et non synchronisé (ce qui serait le cas si chaque appel de méthode se termine rapidement), la méthode inclut un délai aléatoire : pour les threads dont <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> propriété est pair, le appels de méthode <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> pour introduire un délai de 2 000 millisecondes.</span><span class="sxs-lookup"><span data-stu-id="30391-196">To ensure that the example illustrates the difference between the synchronized and unsynchronized access (which could be the case if each method call completes rapidly), the method includes a random delay: for threads whose <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> property is even, the method calls <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> to introduce a delay of 2,000 milliseconds.</span></span> <span data-ttu-id="30391-197">Notez que, étant donné que la `SyncResource` classe n’est pas publique, le code client acquiert un verrou sur la ressource synchronisée ; la classe interne proprement dite qui acquiert le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-197">Note that, because the `SyncResource` class is not public, none of the client code takes a lock on the synchronized resource; the internal class itself takes the lock.</span></span> <span data-ttu-id="30391-198">Cela empêche que du code malveillant acquière un verrou sur un objet public.</span><span class="sxs-lookup"><span data-stu-id="30391-198">This prevents malicious code from taking a lock on a public object.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/source.cs#1)]
 [!code-vb[Conceptual.Monitors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/source.vb#1)]  
  
 <span data-ttu-id="30391-199">L’exemple définit une variable, `numOps`, qui définit le nombre de threads qui tentera d’accéder à la ressource.</span><span class="sxs-lookup"><span data-stu-id="30391-199">The example defines a variable, `numOps`, that defines the number of threads that will attempt to access the resource.</span></span> <span data-ttu-id="30391-200">Le thread d’application appelle le <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> méthode pour synchronisé et non synchronisé accéder à cinq fois chacune.</span><span class="sxs-lookup"><span data-stu-id="30391-200">The application thread calls the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method for synchronized and unsynchronized access five times each.</span></span> <span data-ttu-id="30391-201">Le <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> méthode possède un seul paramètre, un délégué qui n’accepte aucun paramètre et ne retourne aucune valeur.</span><span class="sxs-lookup"><span data-stu-id="30391-201">The <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method has a single parameter, a delegate that accepts no parameters and returns no value.</span></span> <span data-ttu-id="30391-202">Pour l’accès synchronisé, elle appelle le `SyncUpdateResource` méthode ; pour l’accès non synchronisé, elle appelle le `UnSyncUpdateResource` (méthode).</span><span class="sxs-lookup"><span data-stu-id="30391-202">For synchronized access, it invokes the `SyncUpdateResource` method; for unsynchronized access, it invokes the `UnSyncUpdateResource` method.</span></span> <span data-ttu-id="30391-203">Après chaque ensemble d’appels de méthode, le thread d’application appelle le [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) méthode afin qu’elle se bloque jusqu'à ce que le <xref:System.Threading.AutoResetEvent> instance est signalée.</span><span class="sxs-lookup"><span data-stu-id="30391-203">After each set of method calls, the application thread calls the [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) method so that it blocks until the <xref:System.Threading.AutoResetEvent> instance is signaled.</span></span>  
  
 <span data-ttu-id="30391-204">Chaque appel à la `SyncUpdateResource` méthode appelle en interne `SyncResource.Access` (méthode), puis appelle la <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> méthode pour décrémenter le `numOps` compteur.</span><span class="sxs-lookup"><span data-stu-id="30391-204">Each call to the `SyncUpdateResource` method calls the internal `SyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="30391-205">Le <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> méthode est utilisée pour décrémenter le compteur, car sinon vous ne pouvez pas être certain qu’un deuxième thread accéder à la valeur avant du d’un thread de premier décrémenté valeur ayant été stockée dans la variable.</span><span class="sxs-lookup"><span data-stu-id="30391-205">The <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter, because otherwise you cannot be certain that a second thread will access the value before a first thread's decremented value has been stored in the variable.</span></span> <span data-ttu-id="30391-206">Lors de la dernière synchronisation décrémente de thread de travail le compteur à zéro, indiquant que tous les threads synchronisés ont terminé d’accéder à la ressource, le `SyncUpdateResource` les appels de méthode le <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> (méthode), qui signale au thread principal de continuer exécution.</span><span class="sxs-lookup"><span data-stu-id="30391-206">When the last synchronized worker thread decrements the counter to zero, indicating that all synchronized threads have completed accessing the resource, the `SyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="30391-207">Chaque appel à la `UnSyncUpdateResource` méthode appelle en interne `UnSyncResource.Access` (méthode), puis appelle la <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> méthode pour décrémenter le `numOps` compteur.</span><span class="sxs-lookup"><span data-stu-id="30391-207">Each call to the `UnSyncUpdateResource` method calls the internal `UnSyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="30391-208">Une fois encore, le <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> méthode est utilisée pour décrémenter le compteur pour vous assurer qu’un deuxième thread n’accède pas à la valeur avant valeur décrémentée d’un premier thread ait été attribuée à la variable.</span><span class="sxs-lookup"><span data-stu-id="30391-208">Once again, the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter to ensure that a second thread does not access the value before a first thread's decremented value has been assigned to the variable.</span></span> <span data-ttu-id="30391-209">Lors de la dernière non synchronisé décrémente de thread de travail le compteur à zéro, indiquant qu’aucun autre non synchronisé threads doivent accéder à la ressource, le `UnSyncUpdateResource` les appels de méthode le <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> (méthode), qui signale le thread principal pour continuer l’exécution .</span><span class="sxs-lookup"><span data-stu-id="30391-209">When the last unsynchronized worker thread decrements the counter to zero, indicating that no more unsynchronized threads need to access the resource, the `UnSyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="30391-210">Comme le montre la sortie de l’exemple, l’accès synchronisé garantit que le thread appelant quitte la ressource protégée avant qu’un autre thread puisse y accéder ; chaque thread attend son prédécesseur.</span><span class="sxs-lookup"><span data-stu-id="30391-210">As the output from  the example shows, synchronized access ensures that the calling thread exits the protected resource before another thread can access it; each thread waits on its predecessor.</span></span> <span data-ttu-id="30391-211">En revanche, sans verrou, le `UnSyncResource.Access` méthode est appelée dans l’ordre dans lequel les threads l’atteignent.</span><span class="sxs-lookup"><span data-stu-id="30391-211">On the other hand, without the lock, the `UnSyncResource.Access` method is called in the order in which threads reach it.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="30391-212">Ce type est thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="30391-212">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.Thread" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Enter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="30391-213">Acquiert un verrou exclusif sur l'objet spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-213">Acquires an exclusive lock on a specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Enter : obj -&gt; unit" Usage="System.Threading.Monitor.Enter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="30391-214">Objet sur lequel acquérir le verrou du moniteur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-214">The object on which to acquire the monitor lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="30391-215">Acquiert un verrou exclusif sur l'objet spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-215">Acquires an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30391-216">Utilisez `Enter` pour acquérir le <xref:System.Threading.Monitor> sur l’objet passé comme paramètre.</span><span class="sxs-lookup"><span data-stu-id="30391-216">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the parameter.</span></span> <span data-ttu-id="30391-217">Si un autre thread a exécuté une `Enter` sur l’objet, mais le n'a pas encore exécuté correspondant <xref:System.Threading.Monitor.Exit%2A>, bloque le thread actuel jusqu'à ce que l’autre thread libère l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-217">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="30391-218">Il est autorisé pour le même thread appeler `Enter` plusieurs fois sans se bloquer ; Toutefois, un nombre égal de `Exit` appels doivent être appelées avant que les autres threads en attente sur l’objet débloque.</span><span class="sxs-lookup"><span data-stu-id="30391-218">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="30391-219">Utilisez <xref:System.Threading.Monitor> pour verrouiller les objets (autrement dit, les types référence), pas des types valeur.</span><span class="sxs-lookup"><span data-stu-id="30391-219">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="30391-220">Lorsque vous passez une variable de type valeur à `Enter`, il est converti (boxed) en tant qu’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-220">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="30391-221">Si vous transmettez la même variable à `Enter` là encore, il est converti (boxed) en tant qu’objet distinct et le thread ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="30391-221">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="30391-222">Dans ce cas, le code qui `Monitor` est censé protéger n’est pas protégé.</span><span class="sxs-lookup"><span data-stu-id="30391-222">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="30391-223">En outre, lorsque vous passez la variable à `Exit`, toujours à un autre objet distinct est créé.</span><span class="sxs-lookup"><span data-stu-id="30391-223">Furthermore, when you pass the variable to `Exit`, still another separate object is created.</span></span> <span data-ttu-id="30391-224">Étant donné que l’objet passé à `Exit` est différent de l’objet passé à `Enter`, `Monitor` lève <xref:System.Threading.SynchronizationLockException>.</span><span class="sxs-lookup"><span data-stu-id="30391-224">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="30391-225">Pour plus d’informations, consultez la rubrique conceptuelle [moniteurs](xref:System.Threading.Monitor).</span><span class="sxs-lookup"><span data-stu-id="30391-225">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="30391-226"><xref:System.Threading.Thread.Interrupt%2A> peut interrompre des threads qui attendent pour entrer un `Monitor` sur un objet.</span><span class="sxs-lookup"><span data-stu-id="30391-226"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="30391-227">Un <xref:System.Threading.ThreadInterruptedException> sera levée.</span><span class="sxs-lookup"><span data-stu-id="30391-227">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
 <span data-ttu-id="30391-228">Utiliser C# `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="30391-228">Use a C# `try`…`finally`</span></span> <span data-ttu-id="30391-229">bloc (`Try`...`Finally`</span><span class="sxs-lookup"><span data-stu-id="30391-229">block (`Try`…`Finally`</span></span> <span data-ttu-id="30391-230">en Visual Basic) pour vous assurer que vous le moniteur de mise en production, ou utilisez le c# `lock` instruction (`SyncLock` instruction en Visual Basic), qui encapsule le <xref:System.Threading.Monitor.Enter%2A> et <xref:System.Threading.Monitor.Exit%2A> méthodes dans un `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="30391-230">in Visual Basic) to ensure that you release the monitor, or use the C# `lock` statement (`SyncLock` statement in Visual Basic), which wraps the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods in a `try`…`finally`</span></span> <span data-ttu-id="30391-231">bloc.</span><span class="sxs-lookup"><span data-stu-id="30391-231">block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="30391-232">L'exemple suivant décrit comment utiliser la méthode `Enter`.</span><span class="sxs-lookup"><span data-stu-id="30391-232">The following example demonstrates how to use the `Enter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30391-233">Le paramètre <paramref name="obj" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-233">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member Enter : obj *  -&gt; unit" Usage="System.Threading.Monitor.Enter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="30391-234">Objet sur lequel attendre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-234">The object on which to wait.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="30391-235">Résultat de la tentative d'acquisition du verrou, passé par la référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-235">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="30391-236">L'entrée doit avoir la valeur <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-236">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="30391-237">La sortie a la valeur <see langword="true" /> si un verrou est acquis ; sinon, elle a la valeur <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-237">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="30391-238">La sortie est définie même si une exception se produit lors de la tentative d'acquisition du verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-238">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
          <span data-ttu-id="30391-239">Remarque   Si aucune exception ne se produit, la sortie de cette méthode est toujours <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-239">Note   If no exception occurs, the output of this method is always <see langword="true" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="30391-240">Acquiert un verrou exclusif sur l'objet spécifié et définit de manière atomique une valeur qui indique si le verrou a été pris.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-240">Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30391-241">Utilisez `Enter` pour acquérir le <xref:System.Threading.Monitor> sur l’objet passé comme le `obj` paramètre.</span><span class="sxs-lookup"><span data-stu-id="30391-241">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the `obj` parameter.</span></span> <span data-ttu-id="30391-242">Si un autre thread a exécuté une `Enter` sur l’objet, mais le n'a pas encore exécuté correspondant <xref:System.Threading.Monitor.Exit%2A>, bloque le thread actuel jusqu'à ce que l’autre thread libère l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-242">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="30391-243">Il est autorisé pour le même thread appeler `Enter` plusieurs fois sans se bloquer ; Toutefois, un nombre égal de `Exit` appels doivent être appelées avant que les autres threads en attente sur l’objet débloque.</span><span class="sxs-lookup"><span data-stu-id="30391-243">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="30391-244">Si le verrou n’a pas été appliqué, car une exception a été levée, la variable spécifiée pour le `lockTaken` paramètre est `false` après la fin de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="30391-244">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="30391-245">Cela permet au programme déterminer, dans tous les cas, s’il est nécessaire libérer le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-245">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span> <span data-ttu-id="30391-246">Si cette méthode retourne sans lever d’exception, la variable spécifiée pour le `lockTaken` paramètre est toujours `true`, et il n’est pas nécessaire pour le tester.</span><span class="sxs-lookup"><span data-stu-id="30391-246">If this method returns without throwing an exception, the variable specified for the `lockTaken` parameter is always `true`, and there is no need to test it.</span></span>  
  
 <span data-ttu-id="30391-247">Utilisez <xref:System.Threading.Monitor> pour verrouiller les objets (autrement dit, les types référence), pas des types valeur.</span><span class="sxs-lookup"><span data-stu-id="30391-247">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="30391-248">Lorsque vous passez une variable de type valeur à `Enter`, il est converti (boxed) en tant qu’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-248">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="30391-249">Si vous transmettez la même variable à `Enter` là encore, il est converti (boxed) en tant qu’objet distinct et le thread ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="30391-249">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="30391-250">Dans ce cas, le code qui `Monitor` est censé protéger n’est pas protégé.</span><span class="sxs-lookup"><span data-stu-id="30391-250">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="30391-251">En outre, lorsque vous passez la variable à `Exit`, un autre objet distinct est créé.</span><span class="sxs-lookup"><span data-stu-id="30391-251">Furthermore, when you pass the variable to `Exit`, another separate object is created.</span></span> <span data-ttu-id="30391-252">Étant donné que l’objet passé à `Exit` est différent de l’objet passé à `Enter`, `Monitor` lève <xref:System.Threading.SynchronizationLockException>.</span><span class="sxs-lookup"><span data-stu-id="30391-252">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="30391-253">Pour plus d’informations, consultez la rubrique conceptuelle [moniteurs](xref:System.Threading.Monitor).</span><span class="sxs-lookup"><span data-stu-id="30391-253">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="30391-254"><xref:System.Threading.Thread.Interrupt%2A> peut interrompre des threads qui attendent pour entrer un `Monitor` sur un objet.</span><span class="sxs-lookup"><span data-stu-id="30391-254"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="30391-255">Un <xref:System.Threading.ThreadInterruptedException> sera levée.</span><span class="sxs-lookup"><span data-stu-id="30391-255">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="30391-256">Le code suivant montre le modèle de base pour l’utilisation de la <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="30391-256">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="30391-257">Cette surcharge définit toujours la valeur de la variable est passée à la `ref` paramètre (`ByRef` en Visual Basic) `lockTaken`, même si la méthode lève une exception, afin que la valeur de la variable de façon fiable pour déterminer si le verrou doit être publié.</span><span class="sxs-lookup"><span data-stu-id="30391-257">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#2)]
 [!code-vb[System.Threading.Monitor.Enter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="30391-258">L’entrée de <paramref name="lockTaken" /> est <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-258">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30391-259">Le paramètre <paramref name="obj" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-259">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Exit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Exit : obj -&gt; unit" Usage="System.Threading.Monitor.Exit obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="30391-260">Objet sur lequel libérer le verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-260">The object on which to release the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="30391-261">Libère un verrou exclusif sur l’objet spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-261">Releases an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30391-262">Le thread appelant doit posséder le verrou sur le `obj` paramètre.</span><span class="sxs-lookup"><span data-stu-id="30391-262">The calling thread must own the lock on the `obj` parameter.</span></span> <span data-ttu-id="30391-263">Si le thread appelant possède le verrou sur l’objet spécifié et a effectué un nombre égal de `Exit` et <xref:System.Threading.Monitor.Enter%2A> appelle pour l’objet, puis le verrou est libéré.</span><span class="sxs-lookup"><span data-stu-id="30391-263">If the calling thread owns the lock on the specified object, and has made an equal number of `Exit` and <xref:System.Threading.Monitor.Enter%2A> calls for the object, then the lock is released.</span></span> <span data-ttu-id="30391-264">Si le thread appelant n’a pas appelé `Exit` autant de fois en tant que `Enter`, le verrou n’est pas libéré.</span><span class="sxs-lookup"><span data-stu-id="30391-264">If the calling thread has not invoked `Exit` as many times as `Enter`, the lock is not released.</span></span>  
  
 <span data-ttu-id="30391-265">Si le verrou est libéré et d’autres threads se trouvent dans la file d’attente prêt pour l’objet, un des threads acquiert le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-265">If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock.</span></span> <span data-ttu-id="30391-266">Si d’autres threads se trouvent dans la file d’attente attend pour acquérir le verrou, ils ne sont pas déplacés automatiquement vers la file d’attente opérationnelle lorsque le propriétaire du verrou appelle `Exit`.</span><span class="sxs-lookup"><span data-stu-id="30391-266">If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls `Exit`.</span></span> <span data-ttu-id="30391-267">Pour déplacer un ou plusieurs threads en attente dans la file d’attente opérationnelle, appelez <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A> avant d’appeler `Exit`.</span><span class="sxs-lookup"><span data-stu-id="30391-267">To move one or more waiting threads into the ready queue, call <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> before invoking `Exit`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="30391-268">L'exemple suivant décrit comment utiliser la méthode `Exit`.</span><span class="sxs-lookup"><span data-stu-id="30391-268">The following example demonstrates how to use the `Exit` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30391-269">Le paramètre <paramref name="obj" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-269">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="30391-270">Le thread en cours ne possède pas le verrou pour l'objet spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-270">The current thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="IsEntered">
      <MemberSignature Language="C#" Value="public static bool IsEntered (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntered(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.IsEntered(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEntered (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEntered(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member IsEntered : obj -&gt; bool" Usage="System.Threading.Monitor.IsEntered obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="30391-271">Objet à tester.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-271">The object to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="30391-272">Détermine si le thread actuel détient le verrou sur l'objet spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-272">Determines whether the current thread holds the lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="30391-273">
            <see langword="true" /> si le thread actuel détient le verrou sur <paramref name="obj" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-273">
              <see langword="true" /> if the current thread holds the lock on <paramref name="obj" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30391-274">Cette méthode fonctionne uniquement pour les verrous acquis en utilisant les méthodes de la <xref:System.Threading.Monitor> classe, ou en utilisant c# `lock` instruction ou Visual Basic `SyncLock` instruction, qui sont implémentées avec <xref:System.Threading.Monitor>.</span><span class="sxs-lookup"><span data-stu-id="30391-274">This method works only for locks that are acquired by using the methods of the <xref:System.Threading.Monitor> class, or by using the C# `lock` statement or the Visual Basic `SyncLock` statement, which are implemented with <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="30391-275">Utilisez cette méthode avec les outils de diagnostic, comme le <xref:System.Diagnostics.Debug.Assert%2A> (méthode) et le <xref:System.Diagnostics.Contracts.Contract> (classe), pour déboguer les problèmes de verrouillage qui impliquent la <xref:System.Threading.Monitor> classe.</span><span class="sxs-lookup"><span data-stu-id="30391-275">Use this method with diagnostic tools, such as the <xref:System.Diagnostics.Debug.Assert%2A> method and the <xref:System.Diagnostics.Contracts.Contract> class, to debug locking issues that involve the <xref:System.Threading.Monitor> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30391-276">
            <paramref name="obj" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-276">
              <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Pulse">
      <MemberSignature Language="C#" Value="public static void Pulse (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pulse(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Pulse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Pulse (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Pulse(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Pulse : obj -&gt; unit" Usage="System.Threading.Monitor.Pulse obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="30391-277">Objet attendu par un thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-277">The object a thread is waiting for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="30391-278">Avertit un thread situé dans la file d'attente en suspens d'un changement d'état de l'objet verrouillé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-278">Notifies a thread in the waiting queue of a change in the locked object's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30391-279">Seul le propriétaire actuel du verrou peut signaler un objet en attente à l’aide `Pulse`.</span><span class="sxs-lookup"><span data-stu-id="30391-279">Only the current owner of the lock can signal a waiting object using `Pulse`.</span></span>  
  
 <span data-ttu-id="30391-280">Le thread qui possède actuellement le verrou sur l’objet spécifié appelle cette méthode pour signaler au thread suivant dans la ligne du verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-280">The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock.</span></span> <span data-ttu-id="30391-281">Lors de la réception de l’impulsion, le thread en attente est déplacé vers la file d’attente opérationnelle.</span><span class="sxs-lookup"><span data-stu-id="30391-281">Upon receiving the pulse, the waiting thread is moved to the ready queue.</span></span> <span data-ttu-id="30391-282">Lorsque le thread qui a appelé `Pulse` libère le verrou, le thread suivant dans la file d’attente opérationnelle (qui n’est pas nécessairement le thread qui a été impulsions) acquiert le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-282">When the thread that invoked `Pulse` releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="30391-283">Le <xref:System.Threading.Monitor> classe ne conserve pas l’état indiquant que le <xref:System.Threading.Monitor.Pulse%2A> méthode a été appelée.</span><span class="sxs-lookup"><span data-stu-id="30391-283">The <xref:System.Threading.Monitor> class does not maintain state indicating that the <xref:System.Threading.Monitor.Pulse%2A> method has been called.</span></span> <span data-ttu-id="30391-284">Par conséquent, si vous appelez <xref:System.Threading.Monitor.Pulse%2A> lorsque aucun thread n’attend, le thread suivant qui appelle <xref:System.Threading.Monitor.Wait%2A> blocs comme si <xref:System.Threading.Monitor.Pulse%2A> n’avait jamais été appelée.</span><span class="sxs-lookup"><span data-stu-id="30391-284">Thus, if you call <xref:System.Threading.Monitor.Pulse%2A> when no threads are waiting, the next thread that calls <xref:System.Threading.Monitor.Wait%2A> blocks as if <xref:System.Threading.Monitor.Pulse%2A> had never been called.</span></span> <span data-ttu-id="30391-285">Si deux threads utilisent <xref:System.Threading.Monitor.Pulse%2A> et <xref:System.Threading.Monitor.Wait%2A> pour interagir, cela peut provoquer un interblocage.</span><span class="sxs-lookup"><span data-stu-id="30391-285">If two threads are using <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.Wait%2A> to interact, this could result in a deadlock.</span></span> <span data-ttu-id="30391-286">Comparez ceci avec le comportement de la <xref:System.Threading.AutoResetEvent> classe : Si vous signalez un <xref:System.Threading.AutoResetEvent> en appelant son <xref:System.Threading.EventWaitHandle.Set%2A> (méthode) et il n’y aucun thread n’attend, le <xref:System.Threading.AutoResetEvent> reste dans un état signalé jusqu'à ce qu’un thread appelle <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, ou <xref:System.Threading.WaitHandle.WaitAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="30391-286">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class: If you signal an <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, and there are no threads waiting, the <xref:System.Threading.AutoResetEvent> remains in a signaled state until a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A>.</span></span> <span data-ttu-id="30391-287">Le <xref:System.Threading.AutoResetEvent> libère ce thread et retourne à l’état non signalé.</span><span class="sxs-lookup"><span data-stu-id="30391-287">The <xref:System.Threading.AutoResetEvent> releases that thread and returns to the unsignaled state.</span></span>  
  
 <span data-ttu-id="30391-288">Notez qu’un objet synchronisé comprend plusieurs références, y compris une référence au thread qui détient actuellement le verrou, une référence à la file d’attente opérationnelle, qui contient les threads prêts à obtenir le verrou, et une référence à la file d’attente, qui contient les threads qui attendent pour la notification d’un changement d’état de l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-288">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="30391-289">Le `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, et <xref:System.Threading.Monitor.Wait%2A> méthodes doivent être appelées à partir d’un bloc de code synchronisé.</span><span class="sxs-lookup"><span data-stu-id="30391-289">The `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="30391-290">Pour signaler plusieurs threads, utilisez le <xref:System.Threading.Monitor.PulseAll%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="30391-290">To signal multiple threads, use the <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30391-291">Le paramètre <paramref name="obj" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-291">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="30391-292">Le thread appelant ne possède pas le verrou pour l'objet spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-292">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="PulseAll">
      <MemberSignature Language="C#" Value="public static void PulseAll (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PulseAll(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.PulseAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PulseAll (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PulseAll(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member PulseAll : obj -&gt; unit" Usage="System.Threading.Monitor.PulseAll obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="30391-293">Objet qui envoie l'impulsion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-293">The object that sends the pulse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="30391-294">Avertit tous les threads en attente d'un changement d'état de l'objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-294">Notifies all waiting threads of a change in the object's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30391-295">Le thread qui possède actuellement le verrou sur l’objet spécifié appelle cette méthode pour signaler tous les threads attendant d’acquérir le verrou sur l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-295">The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object.</span></span> <span data-ttu-id="30391-296">Une fois que le signal est envoyé, les threads en attente sont déplacés vers la file d’attente opérationnelle.</span><span class="sxs-lookup"><span data-stu-id="30391-296">After the signal is sent, the waiting threads are moved to the ready queue.</span></span> <span data-ttu-id="30391-297">Lorsque le thread qui a appelé `PulseAll` libère le verrou, le thread suivant dans la file d’attente opérationnelle acquiert le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-297">When the thread that invoked `PulseAll` releases the lock, the next thread in the ready queue acquires the lock.</span></span>  
  
 <span data-ttu-id="30391-298">Notez qu’un objet synchronisé comprend plusieurs références, y compris une référence au thread qui détient actuellement le verrou, une référence à la file d’attente opérationnelle, qui contient les threads prêts à obtenir le verrou, et une référence à la file d’attente, qui contient les threads qui attendent pour la notification d’un changement d’état de l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-298">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="30391-299">Le <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, et <xref:System.Threading.Monitor.Wait%2A> méthodes doivent être appelées à partir d’un bloc de code synchronisé.</span><span class="sxs-lookup"><span data-stu-id="30391-299">The <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="30391-300">Les notes relatives à la <xref:System.Threading.Monitor.Pulse%2A> méthode expliquent ce qui se passe si <xref:System.Threading.Monitor.Pulse%2A> est appelé lorsque aucun thread n’attend.</span><span class="sxs-lookup"><span data-stu-id="30391-300">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 <span data-ttu-id="30391-301">Pour signaler un thread unique, utilisez le `Pulse` (méthode).</span><span class="sxs-lookup"><span data-stu-id="30391-301">To signal a single thread, use the `Pulse` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30391-302">Le paramètre <paramref name="obj" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-302">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="30391-303">Le thread appelant ne possède pas le verrou pour l'objet spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-303">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="30391-304">Essaie d'acquérir un verrou exclusif sur l'objet spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-304">Attempts to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj -&gt; bool" Usage="System.Threading.Monitor.TryEnter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="30391-305">Objet sur lequel acquérir le verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-305">The object on which to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="30391-306">Essaie d'acquérir un verrou exclusif sur l'objet spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-306">Attempts to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="30391-307">
            <see langword="true" /> si le thread actuel acquiert le verrou ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-307">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30391-308">Si réussie, cette méthode acquiert un verrou exclusif sur la `obj` paramètre.</span><span class="sxs-lookup"><span data-stu-id="30391-308">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="30391-309">Cette méthode retourne immédiatement, si le verrou est disponible ou non.</span><span class="sxs-lookup"><span data-stu-id="30391-309">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="30391-310">Cette méthode est similaire à <xref:System.Threading.Monitor.Enter%2A>, mais il ne se bloque jamais le thread actuel.</span><span class="sxs-lookup"><span data-stu-id="30391-310">This method is similar to <xref:System.Threading.Monitor.Enter%2A>, but it will never block the current thread.</span></span> <span data-ttu-id="30391-311">Si le thread ne peut pas entrer sans se bloquer, la méthode retourne `false,`.</span><span class="sxs-lookup"><span data-stu-id="30391-311">If the thread cannot enter without blocking, the method returns `false,`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="30391-312">Utilisez <xref:System.Threading.Monitor> pour verrouiller les objets (autrement dit, les types référence), pas des types valeur.</span><span class="sxs-lookup"><span data-stu-id="30391-312">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="30391-313">Pour plus d’informations, consultez le <xref:System.Threading.Monitor> article.</span><span class="sxs-lookup"><span data-stu-id="30391-313">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="30391-314">Pour vous assurer que le thread n’entre pas de la section critique, vous devez examiner la valeur de retour et exécuter du code dans la section critique uniquement si sa valeur de retour est `true`.</span><span class="sxs-lookup"><span data-stu-id="30391-314">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="30391-315">Le fragment de code suivant montre le modèle utilisé pour appeler cette méthode.</span><span class="sxs-lookup"><span data-stu-id="30391-315">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="30391-316">Notez que vous devez appeler <xref:System.Threading.Monitor.Exit%2A> dans un `finally` bloc pour vous assurer que le thread appelant libère son verrou sur la section critique si une exception se produit.</span><span class="sxs-lookup"><span data-stu-id="30391-316">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#1)]
 [!code-vb[System.Threading.Monitor.TryEnter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="30391-317">L'exemple de code suivant illustre l'utilisation de la méthode `TryEnter`.</span><span class="sxs-lookup"><span data-stu-id="30391-317">The following code example demonstrates how to use the `TryEnter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30391-318">Le paramètre <paramref name="obj" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-318">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="30391-319">Objet sur lequel acquérir le verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-319">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="30391-320">Résultat de la tentative d'acquisition du verrou, passé par la référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-320">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="30391-321">L'entrée doit avoir la valeur <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-321">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="30391-322">La sortie a la valeur <see langword="true" /> si un verrou est acquis ; sinon, elle a la valeur <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-322">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="30391-323">La sortie est définie même si une exception se produit lors de la tentative d'acquisition du verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-323">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="30391-324">Tente d'acquérir un verrou exclusif sur l'objet spécifié et définit de manière atomique une valeur qui indique si le verrou a été pris.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-324">Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30391-325">Si réussie, cette méthode acquiert un verrou exclusif sur la `obj` paramètre.</span><span class="sxs-lookup"><span data-stu-id="30391-325">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="30391-326">Cette méthode retourne immédiatement, si le verrou est disponible ou non.</span><span class="sxs-lookup"><span data-stu-id="30391-326">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="30391-327">Si le verrou n’a pas été appliqué, car une exception a été levée, la variable spécifiée pour le `lockTaken` paramètre est `false` après la fin de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="30391-327">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="30391-328">Cela permet au programme déterminer, dans tous les cas, s’il est nécessaire libérer le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-328">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
 <span data-ttu-id="30391-329">Cette méthode est similaire à <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, mais il ne se bloque jamais le thread actuel.</span><span class="sxs-lookup"><span data-stu-id="30391-329">This method is similar to <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, but it will never block the current thread.</span></span> <span data-ttu-id="30391-330">Si le thread ne peut pas entrer sans se bloquer, le `lockTaken` argument a la valeur `false` lorsque la méthode est retournée.</span><span class="sxs-lookup"><span data-stu-id="30391-330">If the thread cannot enter without blocking, the `lockTaken` argument is set to `false` when the method returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="30391-331">Utilisez <xref:System.Threading.Monitor> pour verrouiller les objets (autrement dit, les types référence), pas des types valeur.</span><span class="sxs-lookup"><span data-stu-id="30391-331">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="30391-332">Pour plus d'informations, voir l'article <xref:System.Threading.Monitor>.</span><span class="sxs-lookup"><span data-stu-id="30391-332">For more information, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="30391-333">Pour vous assurer que le thread n’entre pas de la section critique, vous devez examiner la valeur de `lockTaken` et exécuter du code dans la section critique uniquement si sa valeur est `true`.</span><span class="sxs-lookup"><span data-stu-id="30391-333">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="30391-334">Le fragment de code suivant montre le modèle utilisé pour appeler cette méthode.</span><span class="sxs-lookup"><span data-stu-id="30391-334">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="30391-335">Notez que vous devez appeler <xref:System.Threading.Monitor.Exit%2A> dans un `finally` bloc pour vous assurer que le thread appelant libère son verrou sur la section critique si une exception se produit.</span><span class="sxs-lookup"><span data-stu-id="30391-335">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#2)]
 [!code-vb[System.Threading.Monitor.TryEnter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="30391-336">Le code suivant montre le modèle de base pour l’utilisation de la <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="30391-336">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="30391-337">Cette surcharge définit toujours la valeur de la variable est passée à la `ref` paramètre (`ByRef` en Visual Basic) `lockTaken`, même si la méthode lève une exception, afin que la valeur de la variable de façon fiable pour déterminer si le verrou doit être publié.</span><span class="sxs-lookup"><span data-stu-id="30391-337">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#3)]
 [!code-vb[System.Threading.Monitor.Enter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="30391-338">L’entrée de <paramref name="lockTaken" /> est <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-338">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30391-339">Le paramètre <paramref name="obj" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-339">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="30391-340">Objet sur lequel acquérir le verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-340">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="30391-341">Délai d'attente du verrou en millisecondes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-341">The number of milliseconds to wait for the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="30391-342">Tentatives d'acquisition d'un verrou exclusif sur l'objet spécifié au cours du nombre spécifié de millisecondes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-342">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="30391-343">
            <see langword="true" /> si le thread actuel acquiert le verrou ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-343">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30391-344">Si le `millisecondsTimeout` paramètre est égal à <xref:System.Threading.Timeout.Infinite>, cette méthode équivaut à <xref:System.Threading.Monitor.Enter%2A>.</span><span class="sxs-lookup"><span data-stu-id="30391-344">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="30391-345">Si `millisecondsTimeout` est égal à 0, cette méthode équivaut à <xref:System.Threading.Monitor.TryEnter%2A>.</span><span class="sxs-lookup"><span data-stu-id="30391-345">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="30391-346">Utilisez <xref:System.Threading.Monitor> pour verrouiller les objets (autrement dit, les types référence), pas des types valeur.</span><span class="sxs-lookup"><span data-stu-id="30391-346">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="30391-347">Pour plus d’informations, consultez le <xref:System.Threading.Monitor> article.</span><span class="sxs-lookup"><span data-stu-id="30391-347">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="30391-348">Pour vous assurer que le thread n’entre pas de la section critique, vous devez examiner la valeur de retour et exécuter du code dans la section critique uniquement si sa valeur de retour est `true`.</span><span class="sxs-lookup"><span data-stu-id="30391-348">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="30391-349">Le fragment de code suivant montre le modèle utilisé pour appeler cette méthode.</span><span class="sxs-lookup"><span data-stu-id="30391-349">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="30391-350">Notez que vous devez appeler <xref:System.Threading.Monitor.Exit%2A> dans un `finally` bloc pour vous assurer que le thread appelant libère son verrou sur la section critique si une exception se produit.</span><span class="sxs-lookup"><span data-stu-id="30391-350">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#3)]
 [!code-vb[System.Threading.Monitor.TryEnter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30391-351">Le paramètre <paramref name="obj" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-351">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="30391-352">
            <paramref name="millisecondsTimeout" /> est négatif et n’est pas égal à <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-352">
              <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="30391-353">Objet sur lequel acquérir le verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-353">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="30391-354">
            <see cref="T:System.TimeSpan" /> représentant le délai d'attente du verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-354">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock.</span>
          </span>
          <span data-ttu-id="30391-355">Une valeur de –1 milliseconde spécifie une attente infinie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-355">A value of –1 millisecond specifies an infinite wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="30391-356">Tentatives d'acquisition d'un verrou exclusif sur l'objet spécifié au cours de la période spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-356">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="30391-357">
            <see langword="true" /> si le thread actuel acquiert le verrou ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-357">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30391-358">Si la valeur de la `timeout` paramètre convertie en millisecondes est égale à – 1, cette méthode équivaut à <xref:System.Threading.Monitor.Enter%2A>.</span><span class="sxs-lookup"><span data-stu-id="30391-358">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="30391-359">Si la valeur de `timeout` est égal à 0, cette méthode équivaut à <xref:System.Threading.Monitor.TryEnter%2A>.</span><span class="sxs-lookup"><span data-stu-id="30391-359">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="30391-360">Utilisez <xref:System.Threading.Monitor> pour verrouiller les objets (autrement dit, les types référence), pas des types valeur.</span><span class="sxs-lookup"><span data-stu-id="30391-360">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="30391-361">Pour plus d’informations, consultez le <xref:System.Threading.Monitor> rubrique de la classe.</span><span class="sxs-lookup"><span data-stu-id="30391-361">For details, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="30391-362">Pour vous assurer que le thread n’entre pas de la section critique, vous devez examiner la valeur de retour et exécuter du code dans la section critique uniquement si sa valeur de retour est `true`.</span><span class="sxs-lookup"><span data-stu-id="30391-362">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="30391-363">Le fragment de code suivant montre le modèle utilisé pour appeler cette méthode.</span><span class="sxs-lookup"><span data-stu-id="30391-363">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="30391-364">Notez que vous devez appeler <xref:System.Threading.Monitor.Exit%2A> dans un `finally` bloc pour vous assurer que le thread appelant libère son verrou sur la section critique si une exception se produit.</span><span class="sxs-lookup"><span data-stu-id="30391-364">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#5)]
 [!code-vb[System.Threading.Monitor.TryEnter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30391-365">Le paramètre <paramref name="obj" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-365">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="30391-366">La valeur de <paramref name="timeout" /> en millisecondes est négative et n’est pas égale à <see cref="F:System.Threading.Timeout.Infinite" /> (–1 milliseconde), ou est supérieure à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-366">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="30391-367">Objet sur lequel acquérir le verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-367">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="30391-368">Délai d'attente du verrou en millisecondes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-368">The number of milliseconds to wait for the lock.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="30391-369">Résultat de la tentative d'acquisition du verrou, passé par la référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-369">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="30391-370">L'entrée doit avoir la valeur <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-370">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="30391-371">La sortie a la valeur <see langword="true" /> si un verrou est acquis ; sinon, elle a la valeur <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-371">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="30391-372">La sortie est définie même si une exception se produit lors de la tentative d'acquisition du verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-372">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="30391-373">Tente, pendant le nombre spécifié de millisecondes, d'acquérir un verrou exclusif sur l'objet spécifié et définit de manière atomique une valeur qui indique si le verrou a été pris.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-373">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30391-374">Si le `millisecondsTimeout` paramètre est égal à <xref:System.Threading.Timeout.Infinite>, cette méthode équivaut à <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="30391-374">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="30391-375">Si `millisecondsTimeout` est égal à 0, cette méthode équivaut à <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="30391-375">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="30391-376">Si le verrou n’a pas été appliqué, car une exception a été levée, la variable spécifiée pour le `lockTaken` paramètre est `false` après la fin de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="30391-376">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="30391-377">Cela permet au programme déterminer, dans tous les cas, s’il est nécessaire libérer le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-377">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="30391-378">Utilisez <xref:System.Threading.Monitor> pour verrouiller les objets (autrement dit, les types référence), pas des types valeur.</span><span class="sxs-lookup"><span data-stu-id="30391-378">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="30391-379">Pour plus d’informations, consultez le <xref:System.Threading.Monitor> rubrique de la classe.</span><span class="sxs-lookup"><span data-stu-id="30391-379">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="30391-380">Pour vous assurer que le thread n’entre pas de la section critique, vous devez examiner la valeur de `lockTaken` et exécuter du code dans la section critique uniquement si sa valeur est `true`.</span><span class="sxs-lookup"><span data-stu-id="30391-380">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="30391-381">Le fragment de code suivant montre le modèle utilisé pour appeler cette méthode.</span><span class="sxs-lookup"><span data-stu-id="30391-381">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="30391-382">Notez que vous devez appeler <xref:System.Threading.Monitor.Exit%2A> dans un `finally` bloc pour vous assurer que le thread appelant libère son verrou sur la section critique si une exception se produit.</span><span class="sxs-lookup"><span data-stu-id="30391-382">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#4)]
 [!code-vb[System.Threading.Monitor.TryEnter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="30391-383">Le code suivant montre le modèle de base pour l’utilisation de la <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="30391-383">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="30391-384">Cette surcharge définit toujours la valeur de la variable est passée à la `ref` paramètre (`ByRef` en Visual Basic) `lockTaken`, même si la méthode lève une exception, afin que la valeur de la variable de façon fiable pour déterminer si le verrou doit être publié.</span><span class="sxs-lookup"><span data-stu-id="30391-384">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#4)]
 [!code-vb[System.Threading.Monitor.Enter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="30391-385">L’entrée de <paramref name="lockTaken" /> est <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-385">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30391-386">Le paramètre <paramref name="obj" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-386">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="30391-387">
            <paramref name="millisecondsTimeout" /> est négatif et n’est pas égal à <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-387">
              <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="30391-388">Objet sur lequel acquérir le verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-388">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="30391-389">Délai d'attente du verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-389">The amount of time to wait for the lock.</span>
          </span>
          <span data-ttu-id="30391-390">Une valeur de –1 milliseconde spécifie une attente infinie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-390">A value of –1 millisecond specifies an infinite wait.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="30391-391">Résultat de la tentative d'acquisition du verrou, passé par la référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-391">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="30391-392">L'entrée doit avoir la valeur <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-392">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="30391-393">La sortie a la valeur <see langword="true" /> si un verrou est acquis ; sinon, elle a la valeur <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-393">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="30391-394">La sortie est définie même si une exception se produit lors de la tentative d'acquisition du verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-394">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="30391-395">Tente, pendant le délai spécifié, d'acquérir un verrou exclusif sur l'objet spécifié et définit de manière atomique une valeur qui indique si le verrou a été pris.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-395">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30391-396">Si la valeur de la `timeout` paramètre convertie en millisecondes est égale à – 1, cette méthode équivaut à <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="30391-396">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="30391-397">Si la valeur de `timeout` est égal à 0, cette méthode équivaut à <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="30391-397">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="30391-398">Si le verrou n’a pas été appliqué, car une exception a été levée, la variable spécifiée pour le `lockTaken` paramètre est `false` après la fin de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="30391-398">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="30391-399">Cela permet au programme déterminer, dans tous les cas, s’il est nécessaire libérer le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-399">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="30391-400">Utilisez <xref:System.Threading.Monitor> pour verrouiller les objets (autrement dit, les types référence), pas des types valeur.</span><span class="sxs-lookup"><span data-stu-id="30391-400">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="30391-401">Pour plus d’informations, consultez le <xref:System.Threading.Monitor> rubrique de la classe.</span><span class="sxs-lookup"><span data-stu-id="30391-401">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="30391-402">Pour vous assurer que le thread n’entre pas de la section critique, vous devez examiner la valeur de `lockTaken` et exécuter du code dans la section critique uniquement si sa valeur est `true`.</span><span class="sxs-lookup"><span data-stu-id="30391-402">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="30391-403">Le fragment de code suivant montre le modèle utilisé pour appeler cette méthode.</span><span class="sxs-lookup"><span data-stu-id="30391-403">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="30391-404">Notez que vous devez appeler <xref:System.Threading.Monitor.Exit%2A> dans un `finally` bloc pour vous assurer que le thread appelant libère son verrou sur la section critique si une exception se produit.</span><span class="sxs-lookup"><span data-stu-id="30391-404">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#6)]
 [!code-vb[System.Threading.Monitor.TryEnter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="30391-405">L’entrée de <paramref name="lockTaken" /> est <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-405">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30391-406">Le paramètre <paramref name="obj" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-406">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="30391-407">La valeur de <paramref name="timeout" /> en millisecondes est négative et n’est pas égale à <see cref="F:System.Threading.Timeout.Infinite" /> (–1 milliseconde), ou est supérieure à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-407">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="30391-408">Libère le verrou d’un objet et bloque le thread actuel jusqu’à ce qu’il acquière à nouveau le verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-408">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Wait : obj -&gt; bool" Usage="System.Threading.Monitor.Wait obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="30391-409">Objet sur lequel attendre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-409">The object on which to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="30391-410">Libère le verrou d’un objet et bloque le thread actuel jusqu’à ce qu’il acquière à nouveau le verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-410">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="30391-411">
            <see langword="true" /> si l'appel est retourné parce que l'appelant a de nouveau acquis le verrou pour l'objet spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-411">
              <see langword="true" /> if the call returned because the caller reacquired the lock for the specified object.</span>
          </span>
          <span data-ttu-id="30391-412">Cette méthode ne retourne rien si le verrou n'est pas acquis à nouveau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-412">This method does not return if the lock is not reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30391-413">Le thread qui possède actuellement le verrou sur l’objet spécifié appelle cette méthode afin de libérer l’objet afin qu’un autre thread peut y accéder.</span><span class="sxs-lookup"><span data-stu-id="30391-413">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="30391-414">L’appelant est bloqué en attendant d’acquérir le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-414">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="30391-415">Cette méthode est appelée lorsque l’appelant doit attendre un changement d’état qui se produit suite à des opérations d’un autre thread.</span><span class="sxs-lookup"><span data-stu-id="30391-415">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="30391-416">Lorsqu’un thread appelle `Wait`, il libère le verrou sur l’objet et passe la file d’attente de l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-416">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="30391-417">Le thread suivant dans la file d’attente opérationnelle de l’objet (le cas échéant) acquiert le verrou et a l’usage exclusif de l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-417">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="30391-418">Tous les threads qui appellent `Wait` restent dans la file d’attente jusqu'à ce qu’ils reçoivent un signal de <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A>, envoyé par le propriétaire du verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-418">All threads that call `Wait` remain in the waiting queue until they receive a signal from <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>, sent by the owner of the lock.</span></span> <span data-ttu-id="30391-419">Si `Pulse` est envoyé, seul le thread à la tête de la file d’attente est affecté.</span><span class="sxs-lookup"><span data-stu-id="30391-419">If `Pulse` is sent, only the thread at the head of the waiting queue is affected.</span></span> <span data-ttu-id="30391-420">Si `PulseAll` est envoyé, tous les threads qui attendent l’objet sont affectées.</span><span class="sxs-lookup"><span data-stu-id="30391-420">If `PulseAll` is sent, all threads that are waiting for the object are affected.</span></span> <span data-ttu-id="30391-421">Lorsque le signal est reçu, un ou plusieurs threads laisser la file d’attente et la file d’attente opérationnelle.</span><span class="sxs-lookup"><span data-stu-id="30391-421">When the signal is received, one or more threads leave the waiting queue and enter the ready queue.</span></span> <span data-ttu-id="30391-422">Un thread dans la file d’attente opérationnelle est autorisé à réacquérir le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-422">A thread in the ready queue is permitted to reacquire the lock.</span></span>  
  
 <span data-ttu-id="30391-423">Cette méthode est retournée lorsque le thread appelant acquiert le verrou sur l’objet à nouveau.</span><span class="sxs-lookup"><span data-stu-id="30391-423">This method returns when the calling thread reacquires the lock on the object.</span></span> <span data-ttu-id="30391-424">Notez que cette méthode se bloque indéfiniment si le détenteur du verrou n’appelle pas `Pulse` ou `PulseAll`.</span><span class="sxs-lookup"><span data-stu-id="30391-424">Note that this method blocks indefinitely if the holder of the lock does not call `Pulse` or `PulseAll`.</span></span>  
  
 <span data-ttu-id="30391-425">L’appelant exécute `Wait` une seule fois, quel que soit le nombre de fois <xref:System.Threading.Monitor.Enter%2A> a été appelée pour l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="30391-425">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="30391-426">Conceptuellement, la `Wait` méthode stocke le nombre de fois que l’appelant appelé `Enter` sur l’objet et appelle `Exit` autant de fois que nécessaire pour libérer complètement l’objet verrouillé.</span><span class="sxs-lookup"><span data-stu-id="30391-426">Conceptually, the `Wait` method stores the number of times the caller invoked `Enter` on the object and invokes `Exit` as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="30391-427">L’appelant se bloque en attendant d’acquérir de nouveau l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-427">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="30391-428">Lorsque l’appelant acquiert le verrou à nouveau, le système appelle `Enter` autant de fois que nécessaire pour restaurer l’enregistré `Enter` nombre pour l’appelant.</span><span class="sxs-lookup"><span data-stu-id="30391-428">When the caller reacquires the lock, the system calls `Enter` as many times as necessary to restore the saved `Enter` count for the caller.</span></span> <span data-ttu-id="30391-429">Appel `Wait` libère le verrou pour l’objet spécifié uniquement ; si l’appelant est le propriétaire de verrous sur d’autres objets, ces verrous sont libérés pas.</span><span class="sxs-lookup"><span data-stu-id="30391-429">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
 <span data-ttu-id="30391-430">Notez qu’un objet synchronisé comprend plusieurs références, y compris une référence au thread qui détient actuellement le verrou, une référence à la file d’attente opérationnelle, qui contient les threads prêts à obtenir le verrou, et une référence à la file d’attente, qui contient les threads qui attendent pour la notification d’un changement d’état de l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-430">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="30391-431">Le <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, et `Wait` méthodes doivent être appelées à partir d’un bloc de code synchronisé.</span><span class="sxs-lookup"><span data-stu-id="30391-431">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="30391-432">Les notes relatives à la <xref:System.Threading.Monitor.Pulse%2A> méthode expliquent ce qui se passe si <xref:System.Threading.Monitor.Pulse%2A> est appelé lorsque aucun thread n’attend.</span><span class="sxs-lookup"><span data-stu-id="30391-432">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30391-433">Le paramètre <paramref name="obj" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-433">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="30391-434">Le thread appelant ne possède pas le verrou pour l'objet spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-434">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="30391-435">Le thread qui appelle <see langword="Wait" /> quitte ensuite l'état d'attente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-435">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="30391-436">Cela se produit lorsqu’un autre thread appelle la méthode <see cref="M:System.Threading.Thread.Interrupt" /> de ce thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-436">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="30391-437">Objet sur lequel attendre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-437">The object on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="30391-438">Nombre de millisecondes à attendre avant que le thread intègre la file d'attente opérationnelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-438">The number of milliseconds to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="30391-439">Libère le verrou d’un objet et bloque le thread actuel jusqu’à ce qu’il acquière à nouveau le verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-439">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="30391-440">Si le délai d'attente spécifié est écoulé, le thread intègre la file d'attente opérationnelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-440">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="30391-441">
            <see langword="true" /> si le verrou a fait l'objet d'une nouvelle acquisition avant l'expiration du délai spécifié ; <see langword="false" /> si le verrou a fait l'objet d'une nouvelle acquisition après l'expiration du délai spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-441">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="30391-442">La méthode ne retourne pas de valeur tant que le verrou n'est pas acquis à nouveau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-442">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30391-443">Cette méthode ne retourne pas jusqu'à ce qu’il acquière à nouveau un verrou exclusif sur la `obj` paramètre.</span><span class="sxs-lookup"><span data-stu-id="30391-443">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="30391-444">Le thread qui possède actuellement le verrou sur l’objet spécifié appelle cette méthode afin de libérer l’objet afin qu’un autre thread peut y accéder.</span><span class="sxs-lookup"><span data-stu-id="30391-444">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="30391-445">L’appelant est bloqué en attendant d’acquérir le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-445">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="30391-446">Cette méthode est appelée lorsque l’appelant doit attendre un changement d’état qui se produit suite à des opérations d’un autre thread.</span><span class="sxs-lookup"><span data-stu-id="30391-446">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="30391-447">Le délai d’expiration garantit que le thread actuel ne se bloque pas indéfiniment si un autre thread libère le verrou sans appeler d’abord la <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="30391-447">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="30391-448">Il déplace également le thread à la file d’attente opérationnelle, en contournant les autres threads en avance dans la file d’attente, afin que d’acquérir à nouveau le verrou plus tôt.</span><span class="sxs-lookup"><span data-stu-id="30391-448">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="30391-449">Le thread peut tester la valeur de retour de la <xref:System.Threading.Monitor.Wait%2A> méthode pour déterminer si elle a de nouveau acquis le verrou avant le délai d’expiration. Le thread peut évaluer les conditions qui a causé l’attente, et si nécessaire, appeler le <xref:System.Threading.Monitor.Wait%2A> méthode à nouveau.</span><span class="sxs-lookup"><span data-stu-id="30391-449">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="30391-450">Lorsqu’un thread appelle `Wait`, il libère le verrou sur l’objet et passe la file d’attente de l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-450">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="30391-451">Le thread suivant dans la file d’attente opérationnelle de l’objet (le cas échéant) acquiert le verrou et a l’usage exclusif de l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-451">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="30391-452">Le thread qui a appelé `Wait` appelle d’un thread qui détient le verrou reste dans la file d’attente jusqu'à ce que <xref:System.Threading.Monitor.PulseAll%2A>, ou il est le suivant dans la file d’attente et un thread qui détient le verrou appelle <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="30391-452">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="30391-453">Toutefois, si `millisecondsTimeout` s’écoule avant qu’un autre thread appelle de cet objet <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A> (méthode), le thread d’origine est déplacé vers la file d’attente opérationnelle pour récupérer le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-453">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="30391-454">Si <xref:System.Threading.Timeout.Infinite> est spécifié pour le `millisecondsTimeout` paramètre, cette méthode se bloque indéfiniment, sauf si le détenteur du verrou appelle <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="30391-454">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="30391-455">Si `millisecondsTimeout` est égal à 0, le thread qui appelle `Wait` libère le verrou et intègre immédiatement la file d’attente opérationnelle pour récupérer le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-455">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="30391-456">L’appelant exécute `Wait` une seule fois, quel que soit le nombre de fois <xref:System.Threading.Monitor.Enter%2A> a été appelée pour l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="30391-456">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="30391-457">Conceptuellement, la `Wait` méthode stocke le nombre de fois que l’appelant appelé <xref:System.Threading.Monitor.Enter%2A> sur l’objet et appelle <xref:System.Threading.Monitor.Exit%2A> autant de fois que nécessaire pour libérer complètement l’objet verrouillé.</span><span class="sxs-lookup"><span data-stu-id="30391-457">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="30391-458">L’appelant se bloque en attendant d’acquérir de nouveau l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-458">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="30391-459">Lorsque l’appelant acquiert le verrou à nouveau, le système appelle <xref:System.Threading.Monitor.Enter%2A> autant de fois que nécessaire pour restaurer l’enregistré <xref:System.Threading.Monitor.Enter%2A> nombre pour l’appelant.</span><span class="sxs-lookup"><span data-stu-id="30391-459">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="30391-460">Appel `Wait` libère le verrou pour l’objet spécifié uniquement ; si l’appelant est le propriétaire de verrous sur d’autres objets, ces verrous sont libérés pas.</span><span class="sxs-lookup"><span data-stu-id="30391-460">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="30391-461">Un objet synchronisé comprend plusieurs références, y compris une référence au thread qui détient actuellement le verrou, une référence à la file d’attente opérationnelle, qui contient les threads prêts à obtenir le verrou, et une référence à la file d’attente, qui contient le threads qui attendent pour la notification d’un changement d’état de l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-461">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="30391-462">Le <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, et `Wait` méthodes doivent être appelées à partir d’un bloc de code synchronisé.</span><span class="sxs-lookup"><span data-stu-id="30391-462">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="30391-463">Les notes relatives à la <xref:System.Threading.Monitor.Pulse%2A> méthode expliquent ce qui se passe si <xref:System.Threading.Monitor.Pulse%2A> est appelé lorsque aucun thread n’attend.</span><span class="sxs-lookup"><span data-stu-id="30391-463">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30391-464">Le paramètre <paramref name="obj" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-464">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="30391-465">Le thread appelant ne possède pas le verrou pour l'objet spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-465">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="30391-466">Le thread qui appelle <see langword="Wait" /> quitte ensuite l'état d'attente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-466">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="30391-467">Cela se produit lorsqu’un autre thread appelle la méthode <see cref="M:System.Threading.Thread.Interrupt" /> de ce thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-467">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="30391-468">La valeur du paramètre <paramref name="millisecondsTimeout" /> est négative et différente de <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-468">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="30391-469">Objet sur lequel attendre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-469">The object on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="30391-470">
            <see cref="T:System.TimeSpan" /> qui représente le temps à attendre avant que le thread n'intègre la file d'attente opérationnelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-470">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="30391-471">Libère le verrou d’un objet et bloque le thread actuel jusqu’à ce qu’il acquière à nouveau le verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-471">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="30391-472">Si le délai d'attente spécifié est écoulé, le thread intègre la file d'attente opérationnelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-472">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="30391-473">
            <see langword="true" /> si le verrou a fait l'objet d'une nouvelle acquisition avant l'expiration du délai spécifié ; <see langword="false" /> si le verrou a fait l'objet d'une nouvelle acquisition après l'expiration du délai spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-473">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="30391-474">La méthode ne retourne pas de valeur tant que le verrou n'est pas acquis à nouveau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-474">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30391-475">Cette méthode ne retourne pas jusqu'à ce qu’il acquière à nouveau un verrou exclusif sur la `obj` paramètre.</span><span class="sxs-lookup"><span data-stu-id="30391-475">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="30391-476">Le thread qui possède actuellement le verrou sur l’objet spécifié appelle cette méthode afin de libérer l’objet afin qu’un autre thread peut y accéder.</span><span class="sxs-lookup"><span data-stu-id="30391-476">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="30391-477">L’appelant est bloqué en attendant d’acquérir le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-477">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="30391-478">Cette méthode est appelée lorsque l’appelant doit attendre un changement d’état qui se produit suite à des opérations d’un autre thread.</span><span class="sxs-lookup"><span data-stu-id="30391-478">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="30391-479">Le délai d’expiration garantit que le thread actuel ne se bloque pas indéfiniment si un autre thread libère le verrou sans appeler d’abord la <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="30391-479">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="30391-480">Il déplace également le thread à la file d’attente opérationnelle, en contournant les autres threads en avance dans la file d’attente, afin que d’acquérir à nouveau le verrou plus tôt.</span><span class="sxs-lookup"><span data-stu-id="30391-480">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="30391-481">Le thread peut tester la valeur de retour de la <xref:System.Threading.Monitor.Wait%2A> méthode pour déterminer si elle a de nouveau acquis le verrou avant le délai d’expiration. Le thread peut évaluer les conditions qui a causé l’attente, et si nécessaire, appeler le <xref:System.Threading.Monitor.Wait%2A> méthode à nouveau.</span><span class="sxs-lookup"><span data-stu-id="30391-481">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="30391-482">Lorsqu’un thread appelle `Wait`, il libère le verrou sur l’objet et passe la file d’attente de l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-482">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="30391-483">Le thread suivant dans la file d’attente opérationnelle de l’objet (le cas échéant) acquiert le verrou et a l’usage exclusif de l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-483">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="30391-484">Le thread qui a appelé `Wait` appelle d’un thread qui détient le verrou reste dans la file d’attente jusqu'à ce que <xref:System.Threading.Monitor.PulseAll%2A>, ou il est le suivant dans la file d’attente et un thread qui détient le verrou appelle <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="30391-484">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="30391-485">Toutefois, si `timeout` s’écoule avant qu’un autre thread appelle de cet objet <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A> (méthode), le thread d’origine est déplacé vers la file d’attente opérationnelle pour récupérer le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-485">However, if `timeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="30391-486">Si un <xref:System.TimeSpan> représentant – 1 milliseconde est spécifié pour le `timeout` paramètre, cette méthode se bloque indéfiniment, sauf si le détenteur du verrou appelle <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="30391-486">If a <xref:System.TimeSpan> representing –1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="30391-487">Si `timeout` est 0 milliseconde, le thread qui appelle `Wait` libère le verrou et intègre immédiatement la file d’attente opérationnelle pour récupérer le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-487">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="30391-488">L’appelant exécute `Wait` une seule fois, quel que soit le nombre de fois <xref:System.Threading.Monitor.Enter%2A> a été appelée pour l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="30391-488">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="30391-489">Conceptuellement, la `Wait` méthode stocke le nombre de fois que l’appelant appelé <xref:System.Threading.Monitor.Enter%2A> sur l’objet et appelle <xref:System.Threading.Monitor.Exit%2A> autant de fois que nécessaire pour libérer complètement l’objet verrouillé.</span><span class="sxs-lookup"><span data-stu-id="30391-489">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="30391-490">L’appelant se bloque en attendant d’acquérir de nouveau l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-490">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="30391-491">Lorsque l’appelant acquiert le verrou à nouveau, le système appelle <xref:System.Threading.Monitor.Enter%2A> autant de fois que nécessaire pour restaurer l’enregistré <xref:System.Threading.Monitor.Enter%2A> nombre pour l’appelant.</span><span class="sxs-lookup"><span data-stu-id="30391-491">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="30391-492">Appel `Wait` libère le verrou pour l’objet spécifié uniquement ; si l’appelant est le propriétaire de verrous sur d’autres objets, ces verrous sont libérés pas.</span><span class="sxs-lookup"><span data-stu-id="30391-492">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="30391-493">Un objet synchronisé comprend plusieurs références, y compris une référence au thread qui détient actuellement le verrou, une référence à la file d’attente opérationnelle, qui contient les threads prêts à obtenir le verrou, et une référence à la file d’attente, qui contient le threads qui attendent pour la notification d’un changement d’état de l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-493">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="30391-494">Le <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, et `Wait` méthodes doivent être appelées à partir d’un bloc de code synchronisé.</span><span class="sxs-lookup"><span data-stu-id="30391-494">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="30391-495">Les notes relatives à la <xref:System.Threading.Monitor.Pulse%2A> méthode expliquent ce qui se passe si <xref:System.Threading.Monitor.Pulse%2A> est appelé lorsque aucun thread n’attend.</span><span class="sxs-lookup"><span data-stu-id="30391-495">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30391-496">Le paramètre <paramref name="obj" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-496">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="30391-497">Le thread appelant ne possède pas le verrou pour l'objet spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-497">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="30391-498">Le thread qui appelle <see langword="Wait" /> quitte ensuite l'état d'attente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-498">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="30391-499">Cela se produit lorsqu’un autre thread appelle la méthode <see cref="M:System.Threading.Thread.Interrupt" /> de ce thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-499">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="30391-500">La valeur en millisecondes du paramètre <paramref name="timeout" /> est négative et ne représente pas <see cref="F:System.Threading.Timeout.Infinite" /> (–1 milliseconde) ou est supérieure à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-500">The value of the <paramref name="timeout" /> parameter in milliseconds is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="30391-501">Objet sur lequel attendre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-501">The object on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="30391-502">Nombre de millisecondes à attendre avant que le thread intègre la file d'attente opérationnelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-502">The number of milliseconds to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="30391-503">
            <see langword="true" /> pour abandonner et acquérir à nouveau le domaine de synchronisation associé au contexte (dans le cas d'un contexte synchronisé) avant l'attente ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-503">
              <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="30391-504">Libère le verrou d’un objet et bloque le thread actuel jusqu’à ce qu’il acquière à nouveau le verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-504">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="30391-505">Si le délai d'attente spécifié est écoulé, le thread intègre la file d'attente opérationnelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-505">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
          <span data-ttu-id="30391-506">Cette méthode spécifie également si le domaine de synchronisation associé au contexte (dans le cas d’un contexte synchronisé) est abandonné avant l’attente et acquis à nouveau par la suite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-506">This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="30391-507">
            <see langword="true" /> si le verrou a fait l'objet d'une nouvelle acquisition avant l'expiration du délai spécifié ; <see langword="false" /> si le verrou a fait l'objet d'une nouvelle acquisition après l'expiration du délai spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-507">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="30391-508">La méthode ne retourne pas de valeur tant que le verrou n'est pas acquis à nouveau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-508">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30391-509">Cette méthode ne retourne pas jusqu'à ce qu’il acquière à nouveau un verrou exclusif sur la `obj` paramètre.</span><span class="sxs-lookup"><span data-stu-id="30391-509">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="30391-510">Le thread qui possède actuellement le verrou sur l’objet spécifié appelle cette méthode afin de libérer l’objet afin qu’un autre thread peut y accéder.</span><span class="sxs-lookup"><span data-stu-id="30391-510">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="30391-511">L’appelant est bloqué en attendant d’acquérir le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-511">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="30391-512">Cette méthode est appelée lorsque l’appelant doit attendre un changement d’état qui se produit suite à des opérations d’un autre thread.</span><span class="sxs-lookup"><span data-stu-id="30391-512">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="30391-513">Le délai d’expiration garantit que le thread actuel ne se bloque pas indéfiniment si un autre thread libère le verrou sans appeler d’abord la <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="30391-513">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="30391-514">Il déplace également le thread à la file d’attente opérationnelle, en contournant les autres threads en avance dans la file d’attente, afin que d’acquérir à nouveau le verrou plus tôt.</span><span class="sxs-lookup"><span data-stu-id="30391-514">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="30391-515">Le thread peut tester la valeur de retour de la <xref:System.Threading.Monitor.Wait%2A> méthode pour déterminer si elle a de nouveau acquis le verrou avant le délai d’expiration. Le thread peut évaluer les conditions qui a causé l’attente, et si nécessaire, appeler le <xref:System.Threading.Monitor.Wait%2A> méthode à nouveau.</span><span class="sxs-lookup"><span data-stu-id="30391-515">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="30391-516">Lorsqu’un thread appelle `Wait`, il libère le verrou et intègre la file d’attente en attente.</span><span class="sxs-lookup"><span data-stu-id="30391-516">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="30391-517">À ce stade, le thread suivant dans la file d’attente opérationnelle (le cas échéant) est autorisé à prendre le contrôle du verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-517">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="30391-518">Le thread qui a appelé `Wait` appelle d’un thread qui détient le verrou reste dans la file d’attente jusqu'à ce que <xref:System.Threading.Monitor.PulseAll%2A>, ou il est le suivant dans la file d’attente et un thread qui détient le verrou appelle <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="30391-518">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="30391-519">Toutefois, si `millisecondsTimeout` s’écoule avant qu’un autre thread appelle de cet objet <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A> (méthode), le thread d’origine est déplacé vers la file d’attente opérationnelle pour récupérer le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-519">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="30391-520">Si <xref:System.Threading.Timeout.Infinite> est spécifié pour le `millisecondsTimeout` paramètre, cette méthode se bloque indéfiniment, sauf si le détenteur du verrou appelle <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="30391-520">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="30391-521">Si `millisecondsTimeout` est égal à 0, le thread qui appelle `Wait` libère le verrou et intègre immédiatement la file d’attente opérationnelle pour récupérer le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-521">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="30391-522">L’appelant exécute `Wait` une seule fois, quel que soit le nombre de fois <xref:System.Threading.Monitor.Enter%2A> a été appelée pour l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="30391-522">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="30391-523">Conceptuellement, la `Wait` méthode stocke le nombre de fois que l’appelant appelé <xref:System.Threading.Monitor.Enter%2A> sur l’objet et appelle <xref:System.Threading.Monitor.Exit%2A> autant de fois que nécessaire pour libérer complètement l’objet verrouillé.</span><span class="sxs-lookup"><span data-stu-id="30391-523">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="30391-524">L’appelant se bloque en attendant d’acquérir de nouveau l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-524">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="30391-525">Lorsque l’appelant acquiert le verrou à nouveau, le système appelle <xref:System.Threading.Monitor.Enter%2A> autant de fois que nécessaire pour restaurer l’enregistré <xref:System.Threading.Monitor.Enter%2A> nombre pour l’appelant.</span><span class="sxs-lookup"><span data-stu-id="30391-525">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="30391-526">Appel `Wait` libère le verrou pour l’objet spécifié uniquement ; si l’appelant est le propriétaire de verrous sur d’autres objets, ces verrous sont libérés pas.</span><span class="sxs-lookup"><span data-stu-id="30391-526">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="30391-527">Un objet synchronisé comprend plusieurs références, y compris une référence au thread qui détient actuellement le verrou, une référence à la file d’attente opérationnelle, qui contient les threads prêts à obtenir le verrou, et une référence à la file d’attente, qui contient le threads qui attendent pour la notification d’un changement d’état de l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-527">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="30391-528">Le <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, et `Wait` méthodes doivent être appelées à partir d’un bloc de code synchronisé.</span><span class="sxs-lookup"><span data-stu-id="30391-528">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="30391-529">Les notes relatives à la <xref:System.Threading.Monitor.Pulse%2A> méthode expliquent ce qui se passe si <xref:System.Threading.Monitor.Pulse%2A> est appelé lorsque aucun thread n’attend.</span><span class="sxs-lookup"><span data-stu-id="30391-529">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="30391-530">Remarques sur la sortie de contexte</span><span class="sxs-lookup"><span data-stu-id="30391-530">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="30391-531">Le`exitContext` paramètre n’a aucun effet à moins que le <xref:System.Threading.Monitor.Wait%2A> méthode est appelée à partir d’un contexte managé non défini par défaut.</span><span class="sxs-lookup"><span data-stu-id="30391-531">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="30391-532">Cela peut se produire si votre thread se trouve à l’intérieur d’un appel à une instance d’une classe dérivée de <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="30391-532">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="30391-533">Même si vous exécutez actuellement une méthode sur une classe qui n’est pas dérivée <xref:System.ContextBoundObject>, comme <xref:System.String>, vous pouvez être dans un contexte non défini par défaut si un <xref:System.ContextBoundObject> se trouve sur votre pile dans le domaine d’application actuel.</span><span class="sxs-lookup"><span data-stu-id="30391-533">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="30391-534">Lorsque votre code s’exécute dans un contexte non défini par défaut, en spécifiant `true` pour `exitContext` oblige le thread quitter le contexte managé non défini par défaut (autrement dit, pour effectuer la transition vers le contexte par défaut) avant d’exécuter le <xref:System.Threading.Monitor.Wait%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="30391-534">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="30391-535">Il retourne au contexte d’origine non défini par défaut après l’appel à la <xref:System.Threading.Monitor.Wait%2A> méthode se termine.</span><span class="sxs-lookup"><span data-stu-id="30391-535">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="30391-536">Cela peut être utile lorsque la classe liée au contexte comporte la <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribut appliqué.</span><span class="sxs-lookup"><span data-stu-id="30391-536">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="30391-537">Dans ce cas, tous les appels aux membres de la classe sont automatiquement synchronisés, et le domaine de synchronisation est le corps de code pour la classe.</span><span class="sxs-lookup"><span data-stu-id="30391-537">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="30391-538">Si le code dans la pile des appels d’un membre appelle le <xref:System.Threading.Monitor.Wait%2A> (méthode) et spécifie `true` pour `exitContext`, le thread quitte le domaine de synchronisation, permettant à un thread est bloqué sur un appel à n’importe quel membre de l’objet pour continuer.</span><span class="sxs-lookup"><span data-stu-id="30391-538">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="30391-539">Lorsque le <xref:System.Threading.Monitor.Wait%2A> méthode est retournée, le thread qui a effectué l’appel doit attendre pour rentrer dans le domaine de synchronisation.</span><span class="sxs-lookup"><span data-stu-id="30391-539">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30391-540">Le paramètre <paramref name="obj" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-540">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="30391-541">
            <see langword="Wait" /> n’est pas appelé à partir d’un bloc de code synchronisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-541">
              <see langword="Wait" /> is not invoked from within a synchronized block of code.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="30391-542">Le thread qui appelle <see langword="Wait" /> quitte ensuite l'état d'attente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-542">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="30391-543">Cela se produit lorsqu’un autre thread appelle la méthode <see cref="M:System.Threading.Thread.Interrupt" /> de ce thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-543">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="30391-544">La valeur du paramètre <paramref name="millisecondsTimeout" /> est négative et différente de <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-544">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="30391-545">Objet sur lequel attendre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-545">The object on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="30391-546">
            <see cref="T:System.TimeSpan" /> qui représente le temps à attendre avant que le thread n'intègre la file d'attente opérationnelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-546">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="30391-547">
            <see langword="true" /> pour abandonner et acquérir à nouveau le domaine de synchronisation associé au contexte (dans le cas d'un contexte synchronisé) avant l'attente ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-547">
              <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="30391-548">Libère le verrou d’un objet et bloque le thread actuel jusqu’à ce qu’il acquière à nouveau le verrou.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-548">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="30391-549">Si le délai d'attente spécifié est écoulé, le thread intègre la file d'attente opérationnelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-549">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
          <span data-ttu-id="30391-550">Le domaine de synchronisation associé au contexte synchronisé peut être abandonné avant l’attente et acquis de nouveau par la suite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-550">Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="30391-551">
            <see langword="true" /> si le verrou a fait l'objet d'une nouvelle acquisition avant l'expiration du délai spécifié ; <see langword="false" /> si le verrou a fait l'objet d'une nouvelle acquisition après l'expiration du délai spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-551">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="30391-552">La méthode ne retourne pas de valeur tant que le verrou n'est pas acquis à nouveau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-552">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30391-553">Cette méthode ne retourne pas jusqu'à ce qu’il acquière à nouveau un verrou exclusif sur la `obj` paramètre.</span><span class="sxs-lookup"><span data-stu-id="30391-553">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="30391-554">Le thread qui possède actuellement le verrou sur l’objet spécifié appelle cette méthode afin de libérer l’objet afin qu’un autre thread peut y accéder.</span><span class="sxs-lookup"><span data-stu-id="30391-554">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="30391-555">L’appelant est bloqué en attendant d’acquérir le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-555">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="30391-556">Cette méthode est appelée lorsque l’appelant doit attendre un changement d’état qui se produit suite à des opérations d’un autre thread.</span><span class="sxs-lookup"><span data-stu-id="30391-556">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="30391-557">Le délai d’expiration garantit que le thread actuel ne se bloque pas indéfiniment si un autre thread libère le verrou sans appeler d’abord la <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="30391-557">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="30391-558">Il déplace également le thread à la file d’attente opérationnelle, en contournant les autres threads en avance dans la file d’attente, afin que d’acquérir à nouveau le verrou plus tôt.</span><span class="sxs-lookup"><span data-stu-id="30391-558">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="30391-559">Le thread peut tester la valeur de retour de la <xref:System.Threading.Monitor.Wait%2A> méthode pour déterminer si elle a de nouveau acquis le verrou avant le délai d’expiration. Le thread peut évaluer les conditions qui a causé l’attente, et si nécessaire, appeler le <xref:System.Threading.Monitor.Wait%2A> méthode à nouveau.</span><span class="sxs-lookup"><span data-stu-id="30391-559">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="30391-560">Lorsqu’un thread appelle `Wait`, il libère le verrou et intègre la file d’attente en attente.</span><span class="sxs-lookup"><span data-stu-id="30391-560">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="30391-561">À ce stade, le thread suivant dans la file d’attente opérationnelle (le cas échéant) est autorisé à prendre le contrôle du verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-561">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="30391-562">Le thread qui a appelé `Wait` appelle d’un thread qui détient le verrou reste dans la file d’attente jusqu'à ce que <xref:System.Threading.Monitor.PulseAll%2A>, ou il est le suivant dans la file d’attente et un thread qui détient le verrou appelle <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="30391-562">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="30391-563">Toutefois, si `timeout` millisecondes écoulent avant un autre thread appelle de cet objet <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A> (méthode), le thread d’origine est déplacé vers la file d’attente opérationnelle pour récupérer le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-563">However, if `timeout` milliseconds elapse before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="30391-564">Si un <xref:System.TimeSpan> représentant-1 milliseconde est spécifié pour le `timeout` paramètre, cette méthode se bloque indéfiniment, sauf si le détenteur du verrou appelle <xref:System.Threading.Monitor.Pulse%2A> ou <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="30391-564">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="30391-565">Si `timeout` est 0 milliseconde, le thread qui appelle `Wait` libère le verrou et intègre immédiatement la file d’attente opérationnelle pour récupérer le verrou.</span><span class="sxs-lookup"><span data-stu-id="30391-565">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="30391-566">L’appelant exécute `Wait` une seule fois, quel que soit le nombre de fois <xref:System.Threading.Monitor.Enter%2A> a été appelée pour l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="30391-566">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="30391-567">Conceptuellement, la `Wait` méthode stocke le nombre de fois que l’appelant appelé <xref:System.Threading.Monitor.Enter%2A> sur l’objet et appelle <xref:System.Threading.Monitor.Exit%2A> autant de fois que nécessaire pour libérer complètement l’objet verrouillé.</span><span class="sxs-lookup"><span data-stu-id="30391-567">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="30391-568">L’appelant se bloque en attendant d’acquérir de nouveau l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-568">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="30391-569">Lorsque l’appelant acquiert le verrou à nouveau, le système appelle <xref:System.Threading.Monitor.Enter%2A> autant de fois que nécessaire pour restaurer l’enregistré <xref:System.Threading.Monitor.Enter%2A> nombre pour l’appelant.</span><span class="sxs-lookup"><span data-stu-id="30391-569">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="30391-570">Appel `Wait` libère le verrou pour l’objet spécifié uniquement ; si l’appelant est le propriétaire de verrous sur d’autres objets, ces verrous sont libérés pas.</span><span class="sxs-lookup"><span data-stu-id="30391-570">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="30391-571">Un objet synchronisé comprend plusieurs références, y compris une référence au thread qui détient actuellement le verrou, une référence à la file d’attente opérationnelle, qui contient les threads prêts à obtenir le verrou, et une référence à la file d’attente, qui contient le threads qui attendent pour la notification d’un changement d’état de l’objet.</span><span class="sxs-lookup"><span data-stu-id="30391-571">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="30391-572">Le <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, et `Wait` méthodes doivent être appelées à partir d’un bloc de code synchronisé.</span><span class="sxs-lookup"><span data-stu-id="30391-572">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="30391-573">Les notes relatives à la <xref:System.Threading.Monitor.Pulse%2A> méthode expliquent ce qui se passe si <xref:System.Threading.Monitor.Pulse%2A> est appelé lorsque aucun thread n’attend.</span><span class="sxs-lookup"><span data-stu-id="30391-573">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="30391-574">Remarques sur la sortie de contexte</span><span class="sxs-lookup"><span data-stu-id="30391-574">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="30391-575">Le`exitContext` paramètre n’a aucun effet à moins que le <xref:System.Threading.Monitor.Wait%2A> méthode est appelée à partir d’un contexte managé non défini par défaut.</span><span class="sxs-lookup"><span data-stu-id="30391-575">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="30391-576">Cela peut se produire si votre thread se trouve à l’intérieur d’un appel à une instance d’une classe dérivée de <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="30391-576">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="30391-577">Même si vous exécutez actuellement une méthode sur une classe qui n’est pas dérivée <xref:System.ContextBoundObject>, comme <xref:System.String>, vous pouvez être dans un contexte non défini par défaut si un <xref:System.ContextBoundObject> se trouve sur votre pile dans le domaine d’application actuel.</span><span class="sxs-lookup"><span data-stu-id="30391-577">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="30391-578">Lorsque votre code s’exécute dans un contexte non défini par défaut, en spécifiant `true` pour `exitContext` oblige le thread quitter le contexte managé non défini par défaut (autrement dit, pour effectuer la transition vers le contexte par défaut) avant d’exécuter le <xref:System.Threading.Monitor.Wait%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="30391-578">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="30391-579">Il retourne au contexte d’origine non défini par défaut après l’appel à la <xref:System.Threading.Monitor.Wait%2A> méthode se termine.</span><span class="sxs-lookup"><span data-stu-id="30391-579">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="30391-580">Cela peut être utile lorsque la classe liée au contexte comporte la <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribut appliqué.</span><span class="sxs-lookup"><span data-stu-id="30391-580">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="30391-581">Dans ce cas, tous les appels aux membres de la classe sont automatiquement synchronisés, et le domaine de synchronisation est le corps de code pour la classe.</span><span class="sxs-lookup"><span data-stu-id="30391-581">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="30391-582">Si le code dans la pile des appels d’un membre appelle le <xref:System.Threading.Monitor.Wait%2A> (méthode) et spécifie `true` pour `exitContext`, le thread quitte le domaine de synchronisation, permettant à un thread est bloqué sur un appel à n’importe quel membre de l’objet pour continuer.</span><span class="sxs-lookup"><span data-stu-id="30391-582">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="30391-583">Lorsque le <xref:System.Threading.Monitor.Wait%2A> méthode est retournée, le thread qui a effectué l’appel doit attendre pour rentrer dans le domaine de synchronisation.</span><span class="sxs-lookup"><span data-stu-id="30391-583">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="30391-584">Le paramètre <paramref name="obj" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-584">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="30391-585">
            <see langword="Wait" /> n’est pas appelé à partir d’un bloc de code synchronisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-585">
              <see langword="Wait" /> is not invoked from within a synchronized block of code.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="30391-586">Le thread qui appelle Wait quitte ensuite l’état d’attente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-586">The thread that invokes Wait is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="30391-587">Cela se produit lorsqu’un autre thread appelle la méthode <see cref="M:System.Threading.Thread.Interrupt" /> de ce thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-587">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="30391-588">Le paramètre <paramref name="timeout" /> est négatif et ne représente pas <see cref="F:System.Threading.Timeout.Infinite" /> (-1 milliseconde), ou est supérieur à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="30391-588">The <paramref name="timeout" /> parameter is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
  </Members>
</Type>