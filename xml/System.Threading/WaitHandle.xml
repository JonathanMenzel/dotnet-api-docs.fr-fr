<Type Name="WaitHandle" FullName="System.Threading.WaitHandle">
  <TypeSignature Language="C#" Value="public abstract class WaitHandle : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit WaitHandle extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WaitHandle&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class WaitHandle abstract : MarshalByRefObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="9bec6-101">Encapsule les objets spécifiques au système d'exploitation qui attendent un accès exclusif aux ressources partagées.</span><span class="sxs-lookup"><span data-stu-id="9bec6-101">Encapsulates operating system–specific objects that wait for exclusive access to shared resources.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-102">La <xref:System.Threading.WaitHandle> classe encapsule les descripteurs de synchronisation Win32 et est utilisé pour représenter tous les objets de synchronisation dans le runtime qui permettent plusieurs opérations d’attente.</span><span class="sxs-lookup"><span data-stu-id="9bec6-102">The <xref:System.Threading.WaitHandle> class encapsulates Win32 synchronization handles, and is used to represent all synchronization objects in the runtime that allow multiple wait operations.</span></span> <span data-ttu-id="9bec6-103">Pour une comparaison des handles d’attente avec d’autres objets de synchronisation, consultez [vue d’ensemble des Primitives de synchronisation](~/docs/standard/threading/overview-of-synchronization-primitives.md).</span><span class="sxs-lookup"><span data-stu-id="9bec6-103">For a comparison of wait handles with other synchronization objects, see [Overview of Synchronization Primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md).</span></span>  
  
 <span data-ttu-id="9bec6-104">La <xref:System.Threading.WaitHandle> classe elle-même est abstraite.</span><span class="sxs-lookup"><span data-stu-id="9bec6-104">The <xref:System.Threading.WaitHandle> class itself is abstract.</span></span> <span data-ttu-id="9bec6-105">Les classes dérivées de <xref:System.Threading.WaitHandle> définissent un mécanisme de signalisation pour indiquer la capture ou la libération d’un accès à une ressource partagée, mais elles hérité <xref:System.Threading.WaitHandle> méthodes bloquer lors de l’attente pour l’accès à des ressources partagées.</span><span class="sxs-lookup"><span data-stu-id="9bec6-105">Classes derived from <xref:System.Threading.WaitHandle> define a signaling mechanism to indicate taking or releasing access to a shared resource, but they use the inherited <xref:System.Threading.WaitHandle> methods to block while waiting for access to shared resources.</span></span> <span data-ttu-id="9bec6-106">Les classes dérivées de <xref:System.Threading.WaitHandle> incluent :</span><span class="sxs-lookup"><span data-stu-id="9bec6-106">The classes derived from <xref:System.Threading.WaitHandle> include:</span></span>  
  
-   <span data-ttu-id="9bec6-107">La classe <xref:System.Threading.Mutex>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-107">The <xref:System.Threading.Mutex> class.</span></span> <span data-ttu-id="9bec6-108">Consultez [mutex](~/docs/standard/threading/mutexes.md).</span><span class="sxs-lookup"><span data-stu-id="9bec6-108">See [Mutexes](~/docs/standard/threading/mutexes.md).</span></span>  
  
-   <span data-ttu-id="9bec6-109">Le <xref:System.Threading.EventWaitHandle> classe et ses classes dérivées, <xref:System.Threading.AutoResetEvent> et <xref:System.Threading.ManualResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-109">The <xref:System.Threading.EventWaitHandle> class and its derived classes, <xref:System.Threading.AutoResetEvent> and <xref:System.Threading.ManualResetEvent>.</span></span> <span data-ttu-id="9bec6-110">Voir [EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md).</span><span class="sxs-lookup"><span data-stu-id="9bec6-110">See [EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md).</span></span>  
  
-   <span data-ttu-id="9bec6-111">La classe <xref:System.Threading.Semaphore>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-111">The <xref:System.Threading.Semaphore> class.</span></span> <span data-ttu-id="9bec6-112">Consultez [Semaphore et SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md).</span><span class="sxs-lookup"><span data-stu-id="9bec6-112">See [Semaphore and SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md).</span></span>  
  
 <span data-ttu-id="9bec6-113">Les threads peuvent bloquer un handle d’attente individuel en appelant la méthode d’instance <xref:System.Threading.WaitHandle.WaitOne%2A>, qui est hérité par les classes dérivées de <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-113">Threads can block on an individual wait handle by calling the instance method <xref:System.Threading.WaitHandle.WaitOne%2A>, which is inherited by classes derived from <xref:System.Threading.WaitHandle>.</span></span>  
  
 <span data-ttu-id="9bec6-114">Les classes dérivées de <xref:System.Threading.WaitHandle> diffèrent dans leur affinité de thread.</span><span class="sxs-lookup"><span data-stu-id="9bec6-114">The derived classes of <xref:System.Threading.WaitHandle> differ in their thread affinity.</span></span> <span data-ttu-id="9bec6-115">Handles d’attente d’événement (<xref:System.Threading.EventWaitHandle>, <xref:System.Threading.AutoResetEvent>, et <xref:System.Threading.ManualResetEvent>) et les sémaphores n’ont pas d’affinité de thread ; n’importe quel thread peut signaler un handle d’attente d’événement ou d’un sémaphore.</span><span class="sxs-lookup"><span data-stu-id="9bec6-115">Event wait handles (<xref:System.Threading.EventWaitHandle>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.ManualResetEvent>) and semaphores do not have thread affinity; any thread can signal an event wait handle or semaphore.</span></span> <span data-ttu-id="9bec6-116">En revanche, les mutex, ont une affinité de thread ; le thread qui détient un mutex doit libérer et une exception est levée si un thread appelle la <xref:System.Threading.Mutex.ReleaseMutex%2A> méthode sur un mutex qu’il ne possède pas.</span><span class="sxs-lookup"><span data-stu-id="9bec6-116">Mutexes, on the other hand, do have thread affinity; the thread that owns a mutex must release it, and an exception is thrown if a thread calls the <xref:System.Threading.Mutex.ReleaseMutex%2A> method on a mutex that it does not own.</span></span>  
  
 <span data-ttu-id="9bec6-117">Étant donné que la <xref:System.Threading.WaitHandle> dérive de la classe <xref:System.MarshalByRefObject>, ces classes peuvent être utilisées pour synchroniser les activités des threads au-delà des limites de domaine application.</span><span class="sxs-lookup"><span data-stu-id="9bec6-117">Because the <xref:System.Threading.WaitHandle> class derives from <xref:System.MarshalByRefObject>, these classes can be used to synchronize the activities of threads across application domain boundaries.</span></span>  
  
 <span data-ttu-id="9bec6-118">En plus de ses classes dérivées, la <xref:System.Threading.WaitHandle> classe a un nombre de méthodes statiques qui bloque un thread jusqu'à ce qu’une ou plusieurs objets de synchronisation reçoivent un signal...</span><span class="sxs-lookup"><span data-stu-id="9bec6-118">In addition to its derived classes, the <xref:System.Threading.WaitHandle> class has a number of static methods that block a thread until one or more synchronization objects receive a signal..</span></span> <span data-ttu-id="9bec6-119">Elles incluent notamment :</span><span class="sxs-lookup"><span data-stu-id="9bec6-119">These include:</span></span>  
  
-   <span data-ttu-id="9bec6-120"><xref:System.Threading.WaitHandle.SignalAndWait%2A>, qui permet à un thread de signaler un handle d’attente et d’attendre immédiatement un autre.</span><span class="sxs-lookup"><span data-stu-id="9bec6-120"><xref:System.Threading.WaitHandle.SignalAndWait%2A>, which allows a thread to signal one wait handle and immediately wait on another.</span></span>  
  
-   <span data-ttu-id="9bec6-121"><xref:System.Threading.WaitHandle.WaitAll%2A>, qui permet à un thread d’attendre que tous les handles d’attente dans un tableau reçoivent un signal.</span><span class="sxs-lookup"><span data-stu-id="9bec6-121"><xref:System.Threading.WaitHandle.WaitAll%2A>, which allows a thread to wait until all the wait handles in an array receive a signal.</span></span>  
  
-   <span data-ttu-id="9bec6-122"><xref:System.Threading.WaitHandle.WaitAny%2A>, qui permet à un thread d’attendre que l’un d’un jeu spécifié de handles d’attente a été signalé.</span><span class="sxs-lookup"><span data-stu-id="9bec6-122"><xref:System.Threading.WaitHandle.WaitAny%2A>, which allows a thread to wait until any one of a specified set of wait handles has been signaled .</span></span>  
  
 <span data-ttu-id="9bec6-123">Les surcharges de ces méthodes fournissent des intervalles de délai d’attente pour abandonner l’attente et la possibilité de quitter un contexte de synchronisation avant de commencer l’attente, ce qui permet d’utiliser le contexte de synchronisation des autres threads.</span><span class="sxs-lookup"><span data-stu-id="9bec6-123">The overloads of these methods provide timeout intervals for abandoning the wait, and the opportunity to exit a synchronization context before entering the wait, allowing other threads to use the synchronization context.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9bec6-124">Ce type implémente le <xref:System.IDisposable> interface.</span><span class="sxs-lookup"><span data-stu-id="9bec6-124">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="9bec6-125">Lorsque vous avez fini d’utiliser le type ou un type dérivé, vous devez la supprimer directement ou indirectement.</span><span class="sxs-lookup"><span data-stu-id="9bec6-125">When you have finished using the type or a type derived from it, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="9bec6-126">Pour supprimer le type directement, vous devez appeler sa <xref:System.Threading.WaitHandle.Close%2A> méthode dans un `try` / `catch` bloc.</span><span class="sxs-lookup"><span data-stu-id="9bec6-126">To dispose of the type directly, call its <xref:System.Threading.WaitHandle.Close%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="9bec6-127">Pour la supprimer indirectement, utiliser une construction de langage telles que `using` (en c#) ou `Using` (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9bec6-127">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="9bec6-128">Pour plus d’informations, consultez la section « Utilisant un objet qui implémente IDisposable » dans la <xref:System.IDisposable> rubrique de l’interface.</span><span class="sxs-lookup"><span data-stu-id="9bec6-128">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="9bec6-129"><xref:System.Threading.WaitHandle> implémente la <xref:System.IDisposable.Dispose%2A> modèle.</span><span class="sxs-lookup"><span data-stu-id="9bec6-129"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="9bec6-130">Consultez [modèle de suppression](~/docs/standard/design-guidelines/dispose-pattern.md).</span><span class="sxs-lookup"><span data-stu-id="9bec6-130">See [Dispose Pattern](~/docs/standard/design-guidelines/dispose-pattern.md).</span></span> <span data-ttu-id="9bec6-131">Lorsque vous dérivez de <xref:System.Threading.WaitHandle>, utilisez le <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> propriété pour stocker votre handle de système d’exploitation natif.</span><span class="sxs-lookup"><span data-stu-id="9bec6-131">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native handle operating system handle.</span></span> <span data-ttu-id="9bec6-132">Vous n’avez pas besoin de substituer la méthode protégée <xref:System.Threading.WaitHandle.Dispose%2A> (méthode), sauf si vous utilisez les ressources non managées supplémentaires.</span><span class="sxs-lookup"><span data-stu-id="9bec6-132">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bec6-133">Le code suivant montre d’exemple comment deux threads peuvent effectuent les tâches en arrière-plan lors de la Main thread attend que les tâches se terminent à l’aide de la méthode statique <xref:System.Threading.WaitHandle.WaitAny%2A> et <xref:System.Threading.WaitHandle.WaitAll%2A> méthodes de la <xref:System.Threading.WaitHandle> classe.</span><span class="sxs-lookup"><span data-stu-id="9bec6-133">The following code example shows how two threads can do background tasks while the Main thread waits for the tasks to complete using the static <xref:System.Threading.WaitHandle.WaitAny%2A> and <xref:System.Threading.WaitHandle.WaitAll%2A> methods of the <xref:System.Threading.WaitHandle> class.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="9bec6-134">Ce type est thread-safe.</span><span class="sxs-lookup"><span data-stu-id="9bec6-134">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WaitHandle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9bec6-135">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.WaitHandle" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-135">Initializes a new instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9bec6-136">Libère toutes les ressources détenues par le <see cref="T:System.Threading.WaitHandle" /> actuel.</span><span class="sxs-lookup"><span data-stu-id="9bec6-136">Releases all resources held by the current <see cref="T:System.Threading.WaitHandle" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-137">Cette méthode est l’implémentation publique de la <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> méthode pour la <xref:System.Threading.WaitHandle> classe et ses classes dérivées.</span><span class="sxs-lookup"><span data-stu-id="9bec6-137">This method is the public implementation of the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method for the <xref:System.Threading.WaitHandle> class and its derived classes.</span></span> <span data-ttu-id="9bec6-138">Il fournit une implémentation standard qui appelle le `Dispose(Boolean)` surcharge avec un `true` argument, puis appelle la <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="9bec6-138">It provides a standard implementation that calls the `Dispose(Boolean)` overload with a `true` argument and then calls the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9bec6-139">Appelez cette méthode pour libérer toutes les ressources détenues par une instance de `WaitHandle` ou une classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-139">Call this method to release all resources held by an instance of `WaitHandle` or a derived class.</span></span>  
  
 <span data-ttu-id="9bec6-140">Une fois que cette méthode est appelée, les références à l’instance actuelle provoquent un comportement non défini.</span><span class="sxs-lookup"><span data-stu-id="9bec6-140">Once this method is called, references to the current instance cause undefined behavior.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9bec6-141">Appelez toujours <xref:System.Threading.WaitHandle.Close%2A> ou <xref:System.Threading.WaitHandle.Dispose> avant de libérer votre dernière référence à le <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-141">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="9bec6-142">Sinon, les ressources qu’il utilise ne seront pas libérées.</span><span class="sxs-lookup"><span data-stu-id="9bec6-142">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="9bec6-143">Vous devez substituer la <see langword="Dispose(Boolean)" /> méthode pour libérer les ressources allouées dans les classes dérivées.</span><span class="sxs-lookup"><span data-stu-id="9bec6-143">You should override the <see langword="Dispose(Boolean)" /> method to release resources allocated in derived classes.</span></span></para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9bec6-144">Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Threading.WaitHandle" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-144">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9bec6-145">Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Threading.WaitHandle" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-145">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-146">Cette méthode est équivalente à la <xref:System.Threading.WaitHandle.Close%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="9bec6-146">This method is equivalent to the <xref:System.Threading.WaitHandle.Close%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9bec6-147">Appelez toujours <xref:System.Threading.WaitHandle.Close%2A> ou <xref:System.Threading.WaitHandle.Dispose> avant de libérer votre dernière référence à le <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-147">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="9bec6-148">Sinon, les ressources qu’il utilise ne seront pas libérées.</span><span class="sxs-lookup"><span data-stu-id="9bec6-148">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool explicitDisposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool explicitDisposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (explicitDisposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool explicitDisposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="explicitDisposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="explicitDisposing">
          <span data-ttu-id="9bec6-149"><see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</span><span class="sxs-lookup"><span data-stu-id="9bec6-149"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="9bec6-150">En cas de substitution dans une classe dérivée, libère les ressources non managées utilisées par <see cref="T:System.Threading.WaitHandle" /> et libère éventuellement les ressources managées.</span><span class="sxs-lookup"><span data-stu-id="9bec6-150">When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-151">Cette méthode est appelée par le <xref:System.Threading.WaitHandle.Close%2A> et <xref:System.Threading.WaitHandle.Dispose> méthodes avec les `explicitDisposing` paramètre la valeur `true`.</span><span class="sxs-lookup"><span data-stu-id="9bec6-151">This method is called by the <xref:System.Threading.WaitHandle.Close%2A> and the <xref:System.Threading.WaitHandle.Dispose> methods with the `explicitDisposing` parameter set to `true`.</span></span>  <span data-ttu-id="9bec6-152">Lorsque le `explicitDisposing` paramètre est `true`, cette méthode libère toutes les ressources détenues par les objets managés référencés par ce <xref:System.Threading.WaitHandle> références d’objet.</span><span class="sxs-lookup"><span data-stu-id="9bec6-152">When the `explicitDisposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Threading.WaitHandle> object references.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="9bec6-153">Vous devez substituer la <see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" /> méthode pour libérer les ressources allouées dans les classes dérivées.</span><span class="sxs-lookup"><span data-stu-id="9bec6-153">You should override the <see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" /> method to release resources allocated in derived classes.</span></span>  
  
 <span data-ttu-id="9bec6-154">Le <see cref="M:System.Threading.WaitHandle.Close" /> ou <see cref="M:System.Threading.WaitHandle.Dispose" /> méthode peut être appelée plusieurs fois par d’autres objets.</span><span class="sxs-lookup"><span data-stu-id="9bec6-154">The <see cref="M:System.Threading.WaitHandle.Close" /> or <see cref="M:System.Threading.WaitHandle.Dispose" /> method can be called multiple times by other objects.</span></span> <span data-ttu-id="9bec6-155">Lorsque vous substituez cette méthode, veillez à ne pas référencer des objets qui ont été préalablement supprimés lors d’un appel antérieur à <see langword="Dispose" /> ou <see langword="Close" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-155">When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" /> or <see langword="Close" />.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public virtual IntPtr Handle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.Handle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property IntPtr Handle { IntPtr get(); void set(IntPtr value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use the SafeWaitHandle property instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9bec6-156">Obtient ou définit le handle du système d'exploitation natif.</span><span class="sxs-lookup"><span data-stu-id="9bec6-156">Gets or sets the native operating system handle.</span></span></summary>
        <value><span data-ttu-id="9bec6-157"><see langword="IntPtr" /> représentant le handle du système d'exploitation natif.</span><span class="sxs-lookup"><span data-stu-id="9bec6-157">An <see langword="IntPtr" /> representing the native operating system handle.</span></span> <span data-ttu-id="9bec6-158">La valeur par défaut est celle du champ <see cref="F:System.Threading.WaitHandle.InvalidHandle" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-158">The default is the value of the <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> field.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-159">Affectation d’une nouvelle valeur à la <xref:System.Threading.WaitHandle.Handle%2A> propriété ne ferme pas le handle précédent.</span><span class="sxs-lookup"><span data-stu-id="9bec6-159">Assigning a new value to the <xref:System.Threading.WaitHandle.Handle%2A> property does not close the previous handle.</span></span> <span data-ttu-id="9bec6-160">Cela peut entraîner une fuite du handle.</span><span class="sxs-lookup"><span data-stu-id="9bec6-160">This can result in a leaked handle.</span></span>  
  
 <span data-ttu-id="9bec6-161">N’utilisez pas cette propriété dans le .NET Framework version 2.0 ou version ultérieure ; Utilisez le <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> propriété à la place.</span><span class="sxs-lookup"><span data-stu-id="9bec6-161">Do not use this property in the .NET Framework version 2.0 or later; use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property instead.</span></span> <span data-ttu-id="9bec6-162">Définition de cette propriété pour un handle valide définit également la <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> propriété, mais la valeur <xref:System.Threading.WaitHandle.InvalidHandle> peut entraîner une fuite du handle.</span><span class="sxs-lookup"><span data-stu-id="9bec6-162">Setting this property to a valid handle also sets the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, but setting it to <xref:System.Threading.WaitHandle.InvalidHandle> can result in a leaked handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="9bec6-163">Requiert une confiance totale pour l’appelant immédiat définir la valeur de propriété.</span><span class="sxs-lookup"><span data-stu-id="9bec6-163">Requires full trust for the immediate caller to set the property value.</span></span> <span data-ttu-id="9bec6-164">Ce membre ne peut pas être défini par le code de confiance partielle ou transparent.</span><span class="sxs-lookup"><span data-stu-id="9bec6-164">This member cannot be set by partially trusted or transparent code.</span></span></permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="9bec6-165">Types dérivés doivent avoir <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> pour définir la valeur de propriété.</span><span class="sxs-lookup"><span data-stu-id="9bec6-165">Derived types must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> to set the property value.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="InvalidHandle">
      <MemberSignature Language="C#" Value="protected static readonly IntPtr InvalidHandle;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly native int InvalidHandle" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.InvalidHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly InvalidHandle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly IntPtr InvalidHandle;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9bec6-166">Représente un handle du système d'exploitation natif non valide.</span><span class="sxs-lookup"><span data-stu-id="9bec6-166">Represents an invalid native operating system handle.</span></span> <span data-ttu-id="9bec6-167">Ce champ est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="9bec6-167">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-168">Utilisé en interne pour initialiser le <xref:System.Threading.WaitHandle.Handle%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="9bec6-168">Used internally to initialize the <xref:System.Threading.WaitHandle.Handle%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="9bec6-169">Vous pouvez utiliser cette valeur pour déterminer si le <see cref="P:System.Threading.WaitHandle.Handle" /> propriété contient un handle valide de système d’exploitation natif.</span><span class="sxs-lookup"><span data-stu-id="9bec6-169">You can use this value to determine whether the <see cref="P:System.Threading.WaitHandle.Handle" /> property contains a valid native operating system handle.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SafeWaitHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public Property SafeWaitHandle As SafeWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::SafeHandles::SafeWaitHandle ^ SafeWaitHandle { Microsoft::Win32::SafeHandles::SafeWaitHandle ^ get(); void set(Microsoft::Win32::SafeHandles::SafeWaitHandle ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeWaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9bec6-170">Obtient ou définit le handle du système d'exploitation natif.</span><span class="sxs-lookup"><span data-stu-id="9bec6-170">Gets or sets the native operating system handle.</span></span></summary>
        <value><span data-ttu-id="9bec6-171"><see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> représentant le handle du système d'exploitation natif.</span><span class="sxs-lookup"><span data-stu-id="9bec6-171">A <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> representing the native operating system handle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-172">Lorsque vous attribuez une nouvelle valeur à la <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> propriété, le handle précédent est fermé lorsque le précédent <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> objet est collecté.</span><span class="sxs-lookup"><span data-stu-id="9bec6-172">When you assign a new value to the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, the previous handle will be closed when the previous <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> object is collected.</span></span> <span data-ttu-id="9bec6-173">Ne fermez pas manuellement le handle, car cela entraîne une <xref:System.ObjectDisposedException> lorsque le <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> essaie de fermer le handle.</span><span class="sxs-lookup"><span data-stu-id="9bec6-173">Do not manually close the handle, because this results in an <xref:System.ObjectDisposedException> when the <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> attempts to close the handle.</span></span>  
  
 <span data-ttu-id="9bec6-174"><xref:System.Threading.WaitHandle> implémente la <xref:System.IDisposable.Dispose%2A> modèle.</span><span class="sxs-lookup"><span data-stu-id="9bec6-174"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="9bec6-175">Consultez [modèle de suppression](~/docs/standard/design-guidelines/dispose-pattern.md).</span><span class="sxs-lookup"><span data-stu-id="9bec6-175">See [Dispose Pattern](~/docs/standard/design-guidelines/dispose-pattern.md).</span></span> <span data-ttu-id="9bec6-176">Lorsque vous dérivez de <xref:System.Threading.WaitHandle>, utilisez le <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> propriété pour stocker votre handle de système d’exploitation natif.</span><span class="sxs-lookup"><span data-stu-id="9bec6-176">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native handle operating system handle.</span></span> <span data-ttu-id="9bec6-177">Vous n’avez pas besoin de substituer la méthode protégée <xref:System.Threading.WaitHandle.Dispose%2A> (méthode), sauf si vous utilisez les ressources non managées supplémentaires.</span><span class="sxs-lookup"><span data-stu-id="9bec6-177">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="9bec6-178">requiert une confiance totale pour l’appelant immédiat.</span><span class="sxs-lookup"><span data-stu-id="9bec6-178">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="9bec6-179">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</span><span class="sxs-lookup"><span data-stu-id="9bec6-179">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="9bec6-180">Types dérivés doivent avoir <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> pour appeler ce membre.</span><span class="sxs-lookup"><span data-stu-id="9bec6-180">Derived types must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> to call this member.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignalAndWait">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9bec6-181">Signale un <see cref="T:System.Threading.WaitHandle" /> et attend un autre.</span><span class="sxs-lookup"><span data-stu-id="9bec6-181">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="toSignal"><span data-ttu-id="9bec6-182"><see cref="T:System.Threading.WaitHandle" /> à signaler.</span><span class="sxs-lookup"><span data-stu-id="9bec6-182">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span></span></param>
        <param name="toWaitOn"><span data-ttu-id="9bec6-183"><see cref="T:System.Threading.WaitHandle" /> à attendre.</span><span class="sxs-lookup"><span data-stu-id="9bec6-183">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span></span></param>
        <summary><span data-ttu-id="9bec6-184">Signale un <see cref="T:System.Threading.WaitHandle" /> et attend un autre.</span><span class="sxs-lookup"><span data-stu-id="9bec6-184">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span></span></summary>
        <returns>
          <span data-ttu-id="9bec6-185"><see langword="true" /> si le signal et l'attente se terminent avec succès ; si l'attente ne se termine pas, la méthode ne retourne pas.</span><span class="sxs-lookup"><span data-stu-id="9bec6-185"><see langword="true" /> if both the signal and the wait complete successfully; if the wait does not complete, the method does not return.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-186">Cette opération n’est pas garantie atomique.</span><span class="sxs-lookup"><span data-stu-id="9bec6-186">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="9bec6-187">Après les signaux de thread en cours `toSignal` mais avant qu’il attende `toWaitOn`, un thread qui s’exécute sur un autre processeur peut signaler `toWaitOn` ou attendre.</span><span class="sxs-lookup"><span data-stu-id="9bec6-187">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bec6-188">Le code suivant exemple utilise le <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> surcharge de méthode pour permettre au thread principal de signaler un thread bloqué et d’attendre jusqu'à ce que le thread termine une tâche.</span><span class="sxs-lookup"><span data-stu-id="9bec6-188">The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</span></span>  
  
 <span data-ttu-id="9bec6-189">L’exemple démarre cinq threads et leur permet de bloquer sur un <xref:System.Threading.EventWaitHandle> créé avec le <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> indicateur, puis libère un thread chaque fois que l’utilisateur appuie sur la touche ENTRÉE.</span><span class="sxs-lookup"><span data-stu-id="9bec6-189">The example starts five threads, allows them to block on an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> flag, and then releases one thread each time the user presses the ENTER key.</span></span> <span data-ttu-id="9bec6-190">L’exemple, puis les files d’attente cinq autres threads et ne les libère tout en utilisant une <xref:System.Threading.EventWaitHandle> créé avec le <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="9bec6-190">The example then queues another five threads and releases them all using an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> flag.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9bec6-191"><paramref name="toSignal" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-191"><paramref name="toSignal" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="9bec6-192">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-192">-or-</span></span>  
  
 <span data-ttu-id="9bec6-193"><paramref name="toWaitOn" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-193"><paramref name="toWaitOn" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9bec6-194">La méthode a été appelée sur un thread qui comporte l'attribut <see cref="T:System.STAThreadAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-194">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="9bec6-195">Cette méthode n'est pas prise en charge dans Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-195">This method is not supported on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9bec6-196"><paramref name="toSignal" /> est un sémaphore, et possède déjà un nombre complet.</span><span class="sxs-lookup"><span data-stu-id="9bec6-196"><paramref name="toSignal" /> is a semaphore, and it already has a full count.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="9bec6-197">L’attente s’est arrêtée, car un thread s’est terminé sans libérer de mutex.</span><span class="sxs-lookup"><span data-stu-id="9bec6-197">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="9bec6-198">Cette exception n’est pas levée sur Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-198">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="toSignal"><span data-ttu-id="9bec6-199"><see cref="T:System.Threading.WaitHandle" /> à signaler.</span><span class="sxs-lookup"><span data-stu-id="9bec6-199">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span></span></param>
        <param name="toWaitOn"><span data-ttu-id="9bec6-200"><see cref="T:System.Threading.WaitHandle" /> à attendre.</span><span class="sxs-lookup"><span data-stu-id="9bec6-200">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="9bec6-201">Entier qui représente l'intervalle à attendre.</span><span class="sxs-lookup"><span data-stu-id="9bec6-201">An integer that represents the interval to wait.</span></span> <span data-ttu-id="9bec6-202">Si la valeur est <see cref="F:System.Threading.Timeout.Infinite" />, c'est-à-dire -1, l'attente est infinie.</span><span class="sxs-lookup"><span data-stu-id="9bec6-202">If the value is <see cref="F:System.Threading.Timeout.Infinite" />, that is, -1, the wait is infinite.</span></span></param>
        <param name="exitContext">
          <span data-ttu-id="9bec6-203"><see langword="true" /> pour quitter le domaine de synchronisation du contexte avant l'attente (dans le cas d'un contexte synchronisé) et l'acquérir à nouveau ensuite ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-203"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="9bec6-204">Signale un <see cref="T:System.Threading.WaitHandle" /> et en attend un autre, en spécifiant un délai sous la forme d'un entier signé 32 bits et en spécifiant s'il faut quitter le domaine de synchronisation du contexte avant de commencer l'attente.</span><span class="sxs-lookup"><span data-stu-id="9bec6-204">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying a time-out interval as a 32-bit signed integer and specifying whether to exit the synchronization domain for the context before entering the wait.</span></span></summary>
        <returns>
          <span data-ttu-id="9bec6-205"><see langword="true" /> si le signal et l'attente se sont terminés avec succès ou <see langword="false" /> si le signal s'est terminé mais que l'attente a expiré.</span><span class="sxs-lookup"><span data-stu-id="9bec6-205"><see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-206">Cette opération n’est pas garantie atomique.</span><span class="sxs-lookup"><span data-stu-id="9bec6-206">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="9bec6-207">Après les signaux de thread en cours `toSignal` mais avant qu’il attende `toWaitOn`, un thread qui s’exécute sur un autre processeur peut signaler `toWaitOn` ou attendre.</span><span class="sxs-lookup"><span data-stu-id="9bec6-207">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="9bec6-208">Si `millisecondsTimeout` est égal à zéro, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="9bec6-208">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="9bec6-209">Elle teste l’état de la `toWaitOn` et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="9bec6-209">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="9bec6-210">Remarques sur la sortie de contexte</span><span class="sxs-lookup"><span data-stu-id="9bec6-210">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="9bec6-211">Le `exitContext` paramètre n’a aucun effet à moins que le <xref:System.Threading.WaitHandle.SignalAndWait%2A> méthode appelée à partir d’un contexte managé non défini par défaut.</span><span class="sxs-lookup"><span data-stu-id="9bec6-211">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="9bec6-212">Cela peut se produire si votre thread se trouve à l’intérieur d’un appel à une instance d’une classe dérivée de <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-212">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="9bec6-213">Même si vous exécutez actuellement une méthode sur une classe qui ne dérive pas de <xref:System.ContextBoundObject>, comme <xref:System.String>, vous pouvez être dans un contexte non défini par défaut si un <xref:System.ContextBoundObject> se trouve sur votre pile dans le domaine d’application actuel.</span><span class="sxs-lookup"><span data-stu-id="9bec6-213">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="9bec6-214">Lorsque votre code s’exécute dans un contexte non défini par défaut, en spécifiant `true` pour `exitContext` oblige le thread quitter le contexte managé non défini par défaut (autrement dit, pour effectuer la transition vers le contexte par défaut) avant d’exécuter le <xref:System.Threading.WaitHandle.SignalAndWait%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="9bec6-214">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="9bec6-215">Le thread retourne au contexte d’origine non défini par défaut après l’appel à la <xref:System.Threading.WaitHandle.SignalAndWait%2A> méthode se termine.</span><span class="sxs-lookup"><span data-stu-id="9bec6-215">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="9bec6-216">Cela peut être utile lorsque la classe liée au contexte comporte <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-216">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="9bec6-217">Dans ce cas, tous les appels aux membres de la classe sont automatiquement synchronisés, et le domaine de synchronisation est le corps de code pour la classe.</span><span class="sxs-lookup"><span data-stu-id="9bec6-217">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="9bec6-218">Si le code dans la pile des appels d’un membre appelle la <xref:System.Threading.WaitHandle.SignalAndWait%2A> (méthode) et spécifie `true` pour `exitContext`, le thread quitte le domaine de synchronisation, ce qui permet un thread qui est bloqué sur un appel à n’importe quel membre de l’objet pour continuer.</span><span class="sxs-lookup"><span data-stu-id="9bec6-218">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="9bec6-219">Lorsque la <xref:System.Threading.WaitHandle.SignalAndWait%2A> méthode est retournée, le thread qui a effectué l’appel doit attendre pour rentrer dans le domaine de synchronisation.</span><span class="sxs-lookup"><span data-stu-id="9bec6-219">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9bec6-220"><paramref name="toSignal" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-220"><paramref name="toSignal" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="9bec6-221">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-221">-or-</span></span>  
  
 <span data-ttu-id="9bec6-222"><paramref name="toWaitOn" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-222"><paramref name="toWaitOn" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9bec6-223">La méthode est appelée sur un thread qui comporte l'attribut <see cref="T:System.STAThreadAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-223">The method is called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="9bec6-224">Cette méthode n'est pas prise en charge dans Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-224">This method is not supported on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bec6-225"><see cref="T:System.Threading.WaitHandle" /> ne peut pas être signalé, car il dépasse sa valeur maximale.</span><span class="sxs-lookup"><span data-stu-id="9bec6-225">The <see cref="T:System.Threading.WaitHandle" /> cannot be signaled because it would exceed its maximum count.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9bec6-226"><paramref name="millisecondsTimeout" /> est un nombre négatif différent de -1, qui représente un délai d’attente infini.</span><span class="sxs-lookup"><span data-stu-id="9bec6-226"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="9bec6-227">L’attente s’est arrêtée, car un thread s’est terminé sans libérer de mutex.</span><span class="sxs-lookup"><span data-stu-id="9bec6-227">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="9bec6-228">Cette exception n’est pas levée sur Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-228">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="toSignal"><span data-ttu-id="9bec6-229"><see cref="T:System.Threading.WaitHandle" /> à signaler.</span><span class="sxs-lookup"><span data-stu-id="9bec6-229">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span></span></param>
        <param name="toWaitOn"><span data-ttu-id="9bec6-230"><see cref="T:System.Threading.WaitHandle" /> à attendre.</span><span class="sxs-lookup"><span data-stu-id="9bec6-230">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span></span></param>
        <param name="timeout"><span data-ttu-id="9bec6-231"><see cref="T:System.TimeSpan" /> qui représente l'intervalle à attendre.</span><span class="sxs-lookup"><span data-stu-id="9bec6-231">A <see cref="T:System.TimeSpan" /> that represents the interval to wait.</span></span> <span data-ttu-id="9bec6-232">Si la valeur est -1, l'attente est infinie.</span><span class="sxs-lookup"><span data-stu-id="9bec6-232">If the value is -1, the wait is infinite.</span></span></param>
        <param name="exitContext">
          <span data-ttu-id="9bec6-233"><see langword="true" /> pour quitter le domaine de synchronisation du contexte avant l'attente (dans le cas d'un contexte synchronisé) et l'acquérir à nouveau ensuite ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-233"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="9bec6-234">Signale un <see cref="T:System.Threading.WaitHandle" /> et en attend un autre, en spécifiant le délai sous la forme d'une valeur <see cref="T:System.TimeSpan" /> et en spécifiant s'il faut quitter le domaine de synchronisation du contexte avant de commencer l'attente.</span><span class="sxs-lookup"><span data-stu-id="9bec6-234">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying the time-out interval as a <see cref="T:System.TimeSpan" /> and specifying whether to exit the synchronization domain for the context before entering the wait.</span></span></summary>
        <returns>
          <span data-ttu-id="9bec6-235"><see langword="true" /> si le signal et l'attente se sont terminés avec succès ou <see langword="false" /> si le signal s'est terminé mais que l'attente a expiré.</span><span class="sxs-lookup"><span data-stu-id="9bec6-235"><see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-236">Cette opération n’est pas garantie atomique.</span><span class="sxs-lookup"><span data-stu-id="9bec6-236">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="9bec6-237">Après les signaux de thread en cours `toSignal` mais avant qu’il attende `toWaitOn`, un thread qui s’exécute sur un autre processeur peut signaler `toWaitOn` ou attendre.</span><span class="sxs-lookup"><span data-stu-id="9bec6-237">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="9bec6-238">La valeur maximale de `timeout` est <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-238">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="9bec6-239">Si `timeout` est égal à zéro, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="9bec6-239">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="9bec6-240">Elle teste l’état de la `toWaitOn` et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="9bec6-240">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="9bec6-241">Remarques sur la sortie de contexte</span><span class="sxs-lookup"><span data-stu-id="9bec6-241">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="9bec6-242">Le `exitContext` paramètre n’a aucun effet à moins que le <xref:System.Threading.WaitHandle.SignalAndWait%2A> méthode appelée à partir d’un contexte managé non défini par défaut.</span><span class="sxs-lookup"><span data-stu-id="9bec6-242">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="9bec6-243">Cela peut se produire si votre thread se trouve à l’intérieur d’un appel à une instance d’une classe dérivée de <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-243">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="9bec6-244">Même si vous exécutez actuellement une méthode sur une classe qui ne dérive pas de <xref:System.ContextBoundObject>, comme <xref:System.String>, vous pouvez être dans un contexte non défini par défaut si un <xref:System.ContextBoundObject> se trouve sur votre pile dans le domaine d’application actuel.</span><span class="sxs-lookup"><span data-stu-id="9bec6-244">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="9bec6-245">Lorsque votre code s’exécute dans un contexte non défini par défaut, en spécifiant `true` pour `exitContext` oblige le thread quitter le contexte managé non défini par défaut (autrement dit, pour effectuer la transition vers le contexte par défaut) avant d’exécuter le <xref:System.Threading.WaitHandle.SignalAndWait%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="9bec6-245">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="9bec6-246">Le thread retourne au contexte d’origine non défini par défaut après l’appel à la <xref:System.Threading.WaitHandle.SignalAndWait%2A> méthode se termine.</span><span class="sxs-lookup"><span data-stu-id="9bec6-246">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="9bec6-247">Cela peut être utile lorsque la classe liée au contexte comporte <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-247">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="9bec6-248">Dans ce cas, tous les appels aux membres de la classe sont automatiquement synchronisés, et le domaine de synchronisation est le corps de code pour la classe.</span><span class="sxs-lookup"><span data-stu-id="9bec6-248">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="9bec6-249">Si le code dans la pile des appels d’un membre appelle la <xref:System.Threading.WaitHandle.SignalAndWait%2A> (méthode) et spécifie `true` pour `exitContext`, le thread quitte le domaine de synchronisation, ce qui permet un thread qui est bloqué sur un appel à n’importe quel membre de l’objet pour continuer.</span><span class="sxs-lookup"><span data-stu-id="9bec6-249">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="9bec6-250">Lorsque la <xref:System.Threading.WaitHandle.SignalAndWait%2A> méthode est retournée, le thread qui a effectué l’appel doit attendre pour rentrer dans le domaine de synchronisation.</span><span class="sxs-lookup"><span data-stu-id="9bec6-250">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9bec6-251"><paramref name="toSignal" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-251"><paramref name="toSignal" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="9bec6-252">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-252">-or-</span></span>  
  
 <span data-ttu-id="9bec6-253"><paramref name="toWaitOn" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-253"><paramref name="toWaitOn" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9bec6-254">La méthode a été appelée sur un thread qui comporte l'attribut <see cref="T:System.STAThreadAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-254">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="9bec6-255">Cette méthode n'est pas prise en charge dans Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-255">This method is not supported on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9bec6-256"><paramref name="toSignal" /> est un sémaphore, et possède déjà un nombre complet.</span><span class="sxs-lookup"><span data-stu-id="9bec6-256"><paramref name="toSignal" /> is a semaphore, and it already has a full count.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9bec6-257"><paramref name="timeout" /> prend comme valeur un nombre négatif de millièmes de secondes autre que -1.</span><span class="sxs-lookup"><span data-stu-id="9bec6-257"><paramref name="timeout" /> evaluates to a negative number of milliseconds other than -1.</span></span>  
  
 <span data-ttu-id="9bec6-258">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-258">-or-</span></span>  
  
 <span data-ttu-id="9bec6-259"><paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-259"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="9bec6-260">L’attente s’est arrêtée, car un thread s’est terminé sans libérer de mutex.</span><span class="sxs-lookup"><span data-stu-id="9bec6-260">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="9bec6-261">Cette exception n’est pas levée sur Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-261">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAll">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9bec6-262">Attend que tous les éléments du tableau spécifié reçoivent un signal.</span><span class="sxs-lookup"><span data-stu-id="9bec6-262">Waits for all the elements in the specified array to receive a signal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="9bec6-263">Tableau <see langword="WaitHandle" /> qui contient les objets que l'instance actuelle attendra.</span><span class="sxs-lookup"><span data-stu-id="9bec6-263">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="9bec6-264">Ce tableau ne peut pas contenir plusieurs références au même objet.</span><span class="sxs-lookup"><span data-stu-id="9bec6-264">This array cannot contain multiple references to the same object.</span></span></param>
        <summary><span data-ttu-id="9bec6-265">Attend que tous les éléments du tableau spécifié reçoivent un signal.</span><span class="sxs-lookup"><span data-stu-id="9bec6-265">Waits for all the elements in the specified array to receive a signal.</span></span></summary>
        <returns>
          <span data-ttu-id="9bec6-266"><see langword="true" /> quand tous les éléments de <paramref name="waitHandles" /> ont reçu un signal ; sinon, la méthode ne retourne jamais.</span><span class="sxs-lookup"><span data-stu-id="9bec6-266"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise the method never returns.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-267"><xref:System.Threading.AbandonedMutexException> est une nouveauté de .NET Framework version 2.0.</span><span class="sxs-lookup"><span data-stu-id="9bec6-267"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="9bec6-268">Dans les versions précédentes, le <xref:System.Threading.WaitHandle.WaitAll%2A> méthode renvoie `true` quand un mutex est abandonné.</span><span class="sxs-lookup"><span data-stu-id="9bec6-268">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="9bec6-269">Un mutex abandonné indique souvent une grave erreur de codage.</span><span class="sxs-lookup"><span data-stu-id="9bec6-269">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="9bec6-270">Dans le cas d’un mutex à l’échelle du système, il peut indiquer qu’une application a été arrêtée soudainement (par exemple, en utilisant le Gestionnaire des tâches de Windows).</span><span class="sxs-lookup"><span data-stu-id="9bec6-270">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="9bec6-271">L’exception contient des informations utiles pour le débogage.</span><span class="sxs-lookup"><span data-stu-id="9bec6-271">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="9bec6-272">Le <xref:System.Threading.WaitHandle.WaitAll%2A> méthode est retournée lorsque tous les handles sont signalés.</span><span class="sxs-lookup"><span data-stu-id="9bec6-272">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when all the handles are signaled.</span></span> <span data-ttu-id="9bec6-273">Dans certaines implémentations, si plus de 64 handles sont passés, un <xref:System.NotSupportedException> est levée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-273">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="9bec6-274">Si le tableau contient des doublons, l’appel échoue avec une <xref:System.DuplicateWaitObjectException>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-274">If the array contains duplicates, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9bec6-275">Le <xref:System.Threading.WaitHandle.WaitAll%2A> méthode n’est pas prise en charge sur les threads qui ont <xref:System.STAThreadAttribute>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-275">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="9bec6-276">Appel de cette surcharge de méthode équivaut à appeler le <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> surcharge de méthode et en spécifiant -1 (ou <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) pour `millisecondsTimeout` et `true` pour `exitContext`.</span><span class="sxs-lookup"><span data-stu-id="9bec6-276">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bec6-277">L’exemple de code suivant montre comment utiliser le pool de threads à créer de façon asynchrone et d’écrire dans un groupe de fichiers.</span><span class="sxs-lookup"><span data-stu-id="9bec6-277">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="9bec6-278">Chaque opération d’écriture est en attente comme un élément de travail et des signaux lorsqu’elle est terminée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-278">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="9bec6-279">Le thread principal attend que tous les éléments signaler et se termine.</span><span class="sxs-lookup"><span data-stu-id="9bec6-279">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9bec6-280">Le paramètre <paramref name="waitHandles" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-280">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span> <span data-ttu-id="9bec6-281">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-281">-or-</span></span>  
  
 <span data-ttu-id="9bec6-282">Un ou plusieurs des objets dans le tableau <paramref name="waitHandles" /> sont <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-282">One or more of the objects in the <paramref name="waitHandles" /> array are <see langword="null" />.</span></span>  
  
 <span data-ttu-id="9bec6-283">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-283">-or-</span></span>  
  
 <span data-ttu-id="9bec6-284"><paramref name="waitHandles" /> est un tableau sans éléments, et que la version de .NET Framework est 2.0 ou ultérieure.</span><span class="sxs-lookup"><span data-stu-id="9bec6-284"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="9bec6-285">Dans [.NET pour les applications du Windows Store](http://go.microsoft.com/fwlink/?LinkID=247912) ou la [Bibliothèque de classes portable](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), interceptez l’exception de la classe de base, <see cref="T:System.ArgumentException" />, à la place.</span><span class="sxs-lookup"><span data-stu-id="9bec6-285">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="9bec6-286">Le tableau <paramref name="waitHandles" /> contient des éléments qui sont des doublons.</span><span class="sxs-lookup"><span data-stu-id="9bec6-286">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9bec6-287">Le nombre d’objets dans <paramref name="waitHandles" /> est supérieur à ce que le système autorise.</span><span class="sxs-lookup"><span data-stu-id="9bec6-287">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
 <span data-ttu-id="9bec6-288">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-288">-or-</span></span>  
  
 <span data-ttu-id="9bec6-289">L’attribut <see cref="T:System.STAThreadAttribute" /> est appliqué à la procédure de thread pour le thread actuel, et <paramref name="waitHandles" /> contient plusieurs éléments.</span><span class="sxs-lookup"><span data-stu-id="9bec6-289">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="9bec6-290"><paramref name="waitHandles" /> est un tableau sans éléments, et que la version de .NET Framework est 1.0 ou 1.1.</span><span class="sxs-lookup"><span data-stu-id="9bec6-290"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="9bec6-291">L’attente a été arrêtée, car un thread s’est terminé sans libérer de mutex.</span><span class="sxs-lookup"><span data-stu-id="9bec6-291">The wait terminated because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="9bec6-292">Cette exception n’est pas levée sur Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-292">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bec6-293">Le tableau <paramref name="waitHandles" /> contient un proxy transparent pour un <see cref="T:System.Threading.WaitHandle" /> dans un autre domaine d’application.</span><span class="sxs-lookup"><span data-stu-id="9bec6-293">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="9bec6-294">Tableau <see langword="WaitHandle" /> qui contient les objets que l'instance actuelle attendra.</span><span class="sxs-lookup"><span data-stu-id="9bec6-294">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="9bec6-295">Ce tableau ne peut pas contenir plusieurs références au même objet (doublons).</span><span class="sxs-lookup"><span data-stu-id="9bec6-295">This array cannot contain multiple references to the same object (duplicates).</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="9bec6-296">Nombre de millisecondes à attendre, ou <see cref="F:System.Threading.Timeout.Infinite" /> (-1) pour un délai d'attente infini.</span><span class="sxs-lookup"><span data-stu-id="9bec6-296">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="9bec6-297">Attend que tous les éléments du tableau spécifié reçoivent un signal, en utilisant une valeur <see cref="T:System.Int32" /> pour spécifier l'intervalle de temps.</span><span class="sxs-lookup"><span data-stu-id="9bec6-297">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval.</span></span></summary>
        <returns>
          <span data-ttu-id="9bec6-298"><see langword="true" /> quand tous les éléments de <paramref name="waitHandles" /> ont reçu un signal ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-298"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-299">Si `millisecondsTimeout` est égal à zéro, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="9bec6-299">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="9bec6-300">Il teste l’état des handles d’attente et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="9bec6-300">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="9bec6-301">Le <xref:System.Threading.WaitHandle.WaitAll%2A> méthode est retournée lorsque l’attente se termine, ce qui signifie que lorsque tous les handles sont signalés ou un délai d’attente se produit.</span><span class="sxs-lookup"><span data-stu-id="9bec6-301">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="9bec6-302">Dans certaines implémentations, si plus de 64 handles sont passés, un <xref:System.NotSupportedException> est levée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-302">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="9bec6-303">Si le tableau contient des doublons, l’appel échoue avec une <xref:System.DuplicateWaitObjectException>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-303">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9bec6-304">Le <xref:System.Threading.WaitHandle.WaitAll%2A> méthode n’est pas prise en charge sur les threads qui ont <xref:System.STAThreadAttribute>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-304">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="9bec6-305">Appel de cette surcharge de méthode est le même que d’appeler le <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> surcharge et en spécifiant `false` pour `exitContext`.</span><span class="sxs-lookup"><span data-stu-id="9bec6-305">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9bec6-306">Le paramètre <paramref name="waitHandles" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-306">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="9bec6-307">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-307">-or-</span></span>  
  
 <span data-ttu-id="9bec6-308">Un ou plusieurs des objets dans le tableau <paramref name="waitHandles" /> sont <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-308">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="9bec6-309">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-309">-or-</span></span>  
  
 <span data-ttu-id="9bec6-310"><paramref name="waitHandles" /> est un tableau sans éléments.</span><span class="sxs-lookup"><span data-stu-id="9bec6-310"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="9bec6-311">Dans [.NET pour les applications du Windows Store](http://go.microsoft.com/fwlink/?LinkID=247912) ou la [Bibliothèque de classes portable](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), interceptez l’exception de la classe de base, <see cref="T:System.ArgumentException" />, à la place.</span><span class="sxs-lookup"><span data-stu-id="9bec6-311">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="9bec6-312">Le tableau <paramref name="waitHandles" /> contient des éléments qui sont des doublons.</span><span class="sxs-lookup"><span data-stu-id="9bec6-312">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9bec6-313">Le nombre d’objets dans <paramref name="waitHandles" /> est supérieur à ce que le système autorise.</span><span class="sxs-lookup"><span data-stu-id="9bec6-313">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
 <span data-ttu-id="9bec6-314">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-314">-or-</span></span>  
  
 <span data-ttu-id="9bec6-315">L’attribut <see cref="T:System.STAThreadAttribute" /> est appliqué à la procédure de thread pour le thread actuel, et <paramref name="waitHandles" /> contient plusieurs éléments.</span><span class="sxs-lookup"><span data-stu-id="9bec6-315">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9bec6-316"><paramref name="millisecondsTimeout" /> est un nombre négatif différent de -1, qui représente un délai d’attente infini.</span><span class="sxs-lookup"><span data-stu-id="9bec6-316"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="9bec6-317">L’attente s’est arrêtée, car un thread s’est terminé sans libérer de mutex.</span><span class="sxs-lookup"><span data-stu-id="9bec6-317">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="9bec6-318">Cette exception n’est pas levée sur Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-318">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bec6-319">Le tableau <paramref name="waitHandles" /> contient un proxy transparent pour un <see cref="T:System.Threading.WaitHandle" /> dans un autre domaine d’application.</span><span class="sxs-lookup"><span data-stu-id="9bec6-319">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="9bec6-320">Tableau <see langword="WaitHandle" /> qui contient les objets que l'instance actuelle attendra.</span><span class="sxs-lookup"><span data-stu-id="9bec6-320">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="9bec6-321">Ce tableau ne peut pas contenir plusieurs références au même objet.</span><span class="sxs-lookup"><span data-stu-id="9bec6-321">This array cannot contain multiple references to the same object.</span></span></param>
        <param name="timeout"><span data-ttu-id="9bec6-322"><see cref="T:System.TimeSpan" /> qui représente le nombre de millisecondes à attendre ou <see cref="T:System.TimeSpan" /> qui représente -1 milliseconde, pour attendre indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="9bec6-322">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="9bec6-323">Attend que tous les éléments du tableau spécifié reçoivent un signal, en utilisant une valeur <see cref="T:System.TimeSpan" /> pour spécifier l'intervalle de temps.</span><span class="sxs-lookup"><span data-stu-id="9bec6-323">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval.</span></span></summary>
        <returns>
          <span data-ttu-id="9bec6-324"><see langword="true" /> quand tous les éléments de <paramref name="waitHandles" /> ont reçu un signal ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-324"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-325">Si `timeout` est égal à zéro, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="9bec6-325">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="9bec6-326">Il teste l’état des handles d’attente et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="9bec6-326">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="9bec6-327">Le <xref:System.Threading.WaitHandle.WaitAll%2A> méthode est retournée lorsque l’attente se termine, ce qui signifie que tous les handles sont signalés ou un dépassement de délai se produit.</span><span class="sxs-lookup"><span data-stu-id="9bec6-327">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="9bec6-328">Dans certaines implémentations, si plus de 64 handles sont passés, un <xref:System.NotSupportedException> est levée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-328">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="9bec6-329">Si le tableau contient des doublons, l’appel échoue.</span><span class="sxs-lookup"><span data-stu-id="9bec6-329">If the array contains duplicates, the call will fail.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9bec6-330">Le <xref:System.Threading.WaitHandle.WaitAll%2A> méthode n’est pas prise en charge sur les threads qui ont <xref:System.STAThreadAttribute>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-330">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="9bec6-331">La valeur maximale de `timeout` est <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-331">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="9bec6-332">Appel de cette surcharge de méthode est le même que d’appeler le <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> surcharge et en spécifiant `false` pour `exitContext`.</span><span class="sxs-lookup"><span data-stu-id="9bec6-332">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9bec6-333">Le paramètre <paramref name="waitHandles" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-333">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="9bec6-334">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-334">-or-</span></span>  
  
 <span data-ttu-id="9bec6-335">Un ou plusieurs des objets dans le tableau <paramref name="waitHandles" /> sont <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-335">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="9bec6-336">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-336">-or-</span></span>  
  
 <span data-ttu-id="9bec6-337"><paramref name="waitHandles" /> est un tableau sans éléments.</span><span class="sxs-lookup"><span data-stu-id="9bec6-337"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="9bec6-338">Dans [.NET pour les applications du Windows Store](http://go.microsoft.com/fwlink/?LinkID=247912) ou la [Bibliothèque de classes portable](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), interceptez l’exception de la classe de base, <see cref="T:System.ArgumentException" />, à la place.</span><span class="sxs-lookup"><span data-stu-id="9bec6-338">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="9bec6-339">Le tableau <paramref name="waitHandles" /> contient des éléments qui sont des doublons.</span><span class="sxs-lookup"><span data-stu-id="9bec6-339">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9bec6-340">Le nombre d’objets dans <paramref name="waitHandles" /> est supérieur à ce que le système autorise.</span><span class="sxs-lookup"><span data-stu-id="9bec6-340">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
 <span data-ttu-id="9bec6-341">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-341">-or-</span></span>  
  
 <span data-ttu-id="9bec6-342">L’attribut <see cref="T:System.STAThreadAttribute" /> est appliqué à la procédure de thread pour le thread actuel, et <paramref name="waitHandles" /> contient plusieurs éléments.</span><span class="sxs-lookup"><span data-stu-id="9bec6-342">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9bec6-343"><paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d’attente infini.</span><span class="sxs-lookup"><span data-stu-id="9bec6-343"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span>  
  
 <span data-ttu-id="9bec6-344">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-344">-or-</span></span>  
  
 <span data-ttu-id="9bec6-345"><paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-345"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="9bec6-346">L’attente a été arrêtée, car un thread s’est terminé sans libérer de mutex.</span><span class="sxs-lookup"><span data-stu-id="9bec6-346">The wait terminated because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="9bec6-347">Cette exception n’est pas levée sur Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-347">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bec6-348">Le tableau <paramref name="waitHandles" /> contient un proxy transparent pour un <see cref="T:System.Threading.WaitHandle" /> dans un autre domaine d’application.</span><span class="sxs-lookup"><span data-stu-id="9bec6-348">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="9bec6-349">Tableau <see langword="WaitHandle" /> qui contient les objets que l'instance actuelle attendra.</span><span class="sxs-lookup"><span data-stu-id="9bec6-349">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="9bec6-350">Ce tableau ne peut pas contenir plusieurs références au même objet (doublons).</span><span class="sxs-lookup"><span data-stu-id="9bec6-350">This array cannot contain multiple references to the same object (duplicates).</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="9bec6-351">Nombre de millisecondes à attendre, ou <see cref="F:System.Threading.Timeout.Infinite" /> (-1) pour un délai d'attente infini.</span><span class="sxs-lookup"><span data-stu-id="9bec6-351">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="exitContext">
          <span data-ttu-id="9bec6-352"><see langword="true" /> pour quitter le domaine de synchronisation du contexte avant l'attente (dans le cas d'un contexte synchronisé) et l'acquérir à nouveau ensuite ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-352"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="9bec6-353">Attend que tous les éléments du tableau spécifié reçoivent un signal, en utilisant une valeur <see cref="T:System.Int32" /> pour spécifier l'intervalle de temps et en spécifiant s'il faut quitter le domaine de synchronisation avant l'attente.</span><span class="sxs-lookup"><span data-stu-id="9bec6-353">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns>
          <span data-ttu-id="9bec6-354"><see langword="true" /> quand tous les éléments de <paramref name="waitHandles" /> ont reçu un signal ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-354"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-355">Si `millisecondsTimeout` est égal à zéro, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="9bec6-355">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="9bec6-356">Il teste l’état des handles d’attente et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="9bec6-356">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="9bec6-357"><xref:System.Threading.AbandonedMutexException> est une nouveauté de .NET Framework version 2.0.</span><span class="sxs-lookup"><span data-stu-id="9bec6-357"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="9bec6-358">Dans les versions précédentes, le <xref:System.Threading.WaitHandle.WaitAll%2A> méthode renvoie `true` quand un mutex est abandonné.</span><span class="sxs-lookup"><span data-stu-id="9bec6-358">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="9bec6-359">Un mutex abandonné indique souvent une grave erreur de codage.</span><span class="sxs-lookup"><span data-stu-id="9bec6-359">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="9bec6-360">Dans le cas d’un mutex à l’échelle du système, il peut indiquer qu’une application a été arrêtée soudainement (par exemple, en utilisant le Gestionnaire des tâches de Windows).</span><span class="sxs-lookup"><span data-stu-id="9bec6-360">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="9bec6-361">L’exception contient des informations utiles pour le débogage.</span><span class="sxs-lookup"><span data-stu-id="9bec6-361">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="9bec6-362">Le <xref:System.Threading.WaitHandle.WaitAll%2A> méthode est retournée lorsque l’attente se termine, ce qui signifie que lorsque tous les handles sont signalés ou un délai d’attente se produit.</span><span class="sxs-lookup"><span data-stu-id="9bec6-362">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="9bec6-363">Dans certaines implémentations, si plus de 64 handles sont passés, un <xref:System.NotSupportedException> est levée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-363">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="9bec6-364">Si le tableau contient des doublons, l’appel échoue avec une <xref:System.DuplicateWaitObjectException>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-364">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9bec6-365">Le <xref:System.Threading.WaitHandle.WaitAll%2A> méthode n’est pas prise en charge sur les threads qui ont <xref:System.STAThreadAttribute>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-365">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="9bec6-366">Remarques sur la sortie de contexte</span><span class="sxs-lookup"><span data-stu-id="9bec6-366">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="9bec6-367">Le `exitContext` paramètre n’a aucun effet à moins que le <xref:System.Threading.WaitHandle.WaitAll%2A> méthode appelée à partir d’un contexte managé non défini par défaut.</span><span class="sxs-lookup"><span data-stu-id="9bec6-367">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="9bec6-368">Cela peut se produire si votre thread se trouve à l’intérieur d’un appel à une instance d’une classe dérivée de <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-368">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="9bec6-369">Même si vous exécutez actuellement une méthode sur une classe qui n’est pas dérivée <xref:System.ContextBoundObject>, comme <xref:System.String>, vous pouvez être dans un contexte non défini par défaut si un <xref:System.ContextBoundObject> se trouve sur votre pile dans le domaine d’application actuel.</span><span class="sxs-lookup"><span data-stu-id="9bec6-369">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="9bec6-370">Lorsque votre code s’exécute dans un contexte non défini par défaut, en spécifiant `true` pour `exitContext` oblige le thread quitter le contexte managé non défini par défaut (autrement dit, pour effectuer la transition vers le contexte par défaut) avant d’exécuter le <xref:System.Threading.WaitHandle.WaitAll%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="9bec6-370">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="9bec6-371">Le thread retourne au contexte d’origine non défini par défaut après l’appel à la <xref:System.Threading.WaitHandle.WaitAll%2A> méthode se termine.</span><span class="sxs-lookup"><span data-stu-id="9bec6-371">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="9bec6-372">Cela peut être utile lorsque la classe liée au contexte comporte la <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribut.</span><span class="sxs-lookup"><span data-stu-id="9bec6-372">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute.</span></span> <span data-ttu-id="9bec6-373">Dans ce cas, tous les appels aux membres de la classe sont automatiquement synchronisés, et le domaine de synchronisation est le corps de code pour la classe.</span><span class="sxs-lookup"><span data-stu-id="9bec6-373">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="9bec6-374">Si le code dans la pile des appels d’un membre appelle la <xref:System.Threading.WaitHandle.WaitAll%2A> (méthode) et spécifie `true` pour `exitContext`, le thread quitte le domaine de synchronisation, ce qui permet un thread qui est bloqué sur un appel à n’importe quel membre de l’objet pour continuer.</span><span class="sxs-lookup"><span data-stu-id="9bec6-374">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="9bec6-375">Lorsque la <xref:System.Threading.WaitHandle.WaitAll%2A> méthode est retournée, le thread qui a effectué l’appel doit attendre pour rentrer dans le domaine de synchronisation.</span><span class="sxs-lookup"><span data-stu-id="9bec6-375">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bec6-376">L’exemple de code suivant montre comment utiliser le pool de threads à créer de façon asynchrone et d’écrire dans un groupe de fichiers.</span><span class="sxs-lookup"><span data-stu-id="9bec6-376">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="9bec6-377">Chaque opération d’écriture est en attente comme un élément de travail et des signaux lorsqu’elle est terminée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-377">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="9bec6-378">Le thread principal attend que tous les éléments signaler et se termine.</span><span class="sxs-lookup"><span data-stu-id="9bec6-378">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9bec6-379">Le paramètre <paramref name="waitHandles" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-379">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="9bec6-380">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-380">-or-</span></span>  
  
 <span data-ttu-id="9bec6-381">Un ou plusieurs des objets dans le tableau <paramref name="waitHandles" /> sont <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-381">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="9bec6-382">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-382">-or-</span></span>  
  
 <span data-ttu-id="9bec6-383"><paramref name="waitHandles" /> est un tableau sans éléments, et que la version de .NET Framework est 2.0 ou ultérieure.</span><span class="sxs-lookup"><span data-stu-id="9bec6-383"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><span data-ttu-id="9bec6-384">Le tableau <paramref name="waitHandles" /> contient des éléments qui sont des doublons.</span><span class="sxs-lookup"><span data-stu-id="9bec6-384">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9bec6-385">Le nombre d’objets dans <paramref name="waitHandles" /> est supérieur à ce que le système autorise.</span><span class="sxs-lookup"><span data-stu-id="9bec6-385">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
 <span data-ttu-id="9bec6-386">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-386">-or-</span></span>  
  
 <span data-ttu-id="9bec6-387">L’attribut <see cref="T:System.STAThreadAttribute" /> est appliqué à la procédure de thread pour le thread actuel, et <paramref name="waitHandles" /> contient plusieurs éléments.</span><span class="sxs-lookup"><span data-stu-id="9bec6-387">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="9bec6-388"><paramref name="waitHandles" /> est un tableau sans éléments, et que la version de .NET Framework est 1.0 ou 1.1.</span><span class="sxs-lookup"><span data-stu-id="9bec6-388"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9bec6-389"><paramref name="millisecondsTimeout" /> est un nombre négatif différent de -1, qui représente un délai d’attente infini.</span><span class="sxs-lookup"><span data-stu-id="9bec6-389"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="9bec6-390">L’attente s’est arrêtée, car un thread s’est terminé sans libérer de mutex.</span><span class="sxs-lookup"><span data-stu-id="9bec6-390">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="9bec6-391">Cette exception n’est pas levée sur Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-391">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bec6-392">Le tableau <paramref name="waitHandles" /> contient un proxy transparent pour un <see cref="T:System.Threading.WaitHandle" /> dans un autre domaine d’application.</span><span class="sxs-lookup"><span data-stu-id="9bec6-392">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="9bec6-393">Tableau <see langword="WaitHandle" /> qui contient les objets que l'instance actuelle attendra.</span><span class="sxs-lookup"><span data-stu-id="9bec6-393">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="9bec6-394">Ce tableau ne peut pas contenir plusieurs références au même objet.</span><span class="sxs-lookup"><span data-stu-id="9bec6-394">This array cannot contain multiple references to the same object.</span></span></param>
        <param name="timeout"><span data-ttu-id="9bec6-395"><see cref="T:System.TimeSpan" /> qui représente le nombre de millisecondes à attendre ou <see cref="T:System.TimeSpan" /> qui représente -1 milliseconde, pour attendre indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="9bec6-395">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span></span></param>
        <param name="exitContext">
          <span data-ttu-id="9bec6-396"><see langword="true" /> pour quitter le domaine de synchronisation du contexte avant l'attente (dans le cas d'un contexte synchronisé) et l'acquérir à nouveau ensuite ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-396"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="9bec6-397">Attend que tous les éléments du tableau spécifié reçoivent un signal, en utilisant une valeur <see cref="T:System.TimeSpan" /> pour spécifier l'intervalle de temps et en spécifiant s'il faut quitter le domaine de synchronisation avant l'attente.</span><span class="sxs-lookup"><span data-stu-id="9bec6-397">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns>
          <span data-ttu-id="9bec6-398"><see langword="true" /> lorsque tous les éléments de <paramref name="waitHandles" /> ont reçu un signal ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-398"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-399">Si `timeout` est égal à zéro, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="9bec6-399">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="9bec6-400">Il teste l’état des handles d’attente et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="9bec6-400">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="9bec6-401"><xref:System.Threading.AbandonedMutexException> est une nouveauté de .NET Framework version 2.0.</span><span class="sxs-lookup"><span data-stu-id="9bec6-401"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="9bec6-402">Dans les versions précédentes, le <xref:System.Threading.WaitHandle.WaitAll%2A> méthode renvoie `true` quand un mutex est abandonné.</span><span class="sxs-lookup"><span data-stu-id="9bec6-402">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="9bec6-403">Un mutex abandonné indique souvent une grave erreur de codage.</span><span class="sxs-lookup"><span data-stu-id="9bec6-403">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="9bec6-404">Dans le cas d’un mutex à l’échelle du système, il peut indiquer qu’une application a été arrêtée soudainement (par exemple, en utilisant le Gestionnaire des tâches de Windows).</span><span class="sxs-lookup"><span data-stu-id="9bec6-404">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="9bec6-405">L’exception contient des informations utiles pour le débogage.</span><span class="sxs-lookup"><span data-stu-id="9bec6-405">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="9bec6-406">Le <xref:System.Threading.WaitHandle.WaitAll%2A> méthode est retournée lorsque l’attente se termine, ce qui signifie que tous les handles sont signalés ou un dépassement de délai se produit.</span><span class="sxs-lookup"><span data-stu-id="9bec6-406">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="9bec6-407">Dans certaines implémentations, si plus de 64 handles sont passés, un <xref:System.NotSupportedException> est levée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-407">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="9bec6-408">Si le tableau contient des doublons, l’appel échoue.</span><span class="sxs-lookup"><span data-stu-id="9bec6-408">If the array contains duplicates, the call will fail.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9bec6-409">Le <xref:System.Threading.WaitHandle.WaitAll%2A> méthode n’est pas prise en charge sur les threads qui ont <xref:System.STAThreadAttribute>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-409">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="9bec6-410">La valeur maximale de `timeout` est <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-410">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="9bec6-411">Remarques sur la sortie de contexte</span><span class="sxs-lookup"><span data-stu-id="9bec6-411">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="9bec6-412">Le `exitContext` paramètre n’a aucun effet à moins que le <xref:System.Threading.WaitHandle.WaitAll%2A> méthode appelée à partir d’un contexte managé non défini par défaut.</span><span class="sxs-lookup"><span data-stu-id="9bec6-412">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="9bec6-413">Cela peut se produire si votre thread se trouve à l’intérieur d’un appel à une instance d’une classe dérivée de <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-413">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="9bec6-414">Même si vous exécutez actuellement une méthode sur une classe qui n’est pas dérivée <xref:System.ContextBoundObject>, comme <xref:System.String>, vous pouvez être dans un contexte non défini par défaut si un <xref:System.ContextBoundObject> se trouve sur votre pile dans le domaine d’application actuel.</span><span class="sxs-lookup"><span data-stu-id="9bec6-414">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="9bec6-415">Lorsque votre code s’exécute dans un contexte non défini par défaut, en spécifiant `true` pour `exitContext` oblige le thread quitter le contexte managé non défini par défaut (autrement dit, pour effectuer la transition vers le contexte par défaut) avant d’exécuter le <xref:System.Threading.WaitHandle.WaitAll%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="9bec6-415">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="9bec6-416">Il retourne au contexte par défaut d’origine après l’appel à la <xref:System.Threading.WaitHandle.WaitAll%2A> méthode se termine.</span><span class="sxs-lookup"><span data-stu-id="9bec6-416">It returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="9bec6-417">Cela peut être utile lorsque la classe liée au contexte comporte <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-417">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="9bec6-418">Dans ce cas, tous les appels aux membres de la classe sont automatiquement synchronisés, et le domaine de synchronisation est le corps de code pour la classe.</span><span class="sxs-lookup"><span data-stu-id="9bec6-418">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="9bec6-419">Si le code dans la pile des appels d’un membre appelle la <xref:System.Threading.WaitHandle.WaitAll%2A> (méthode) et spécifie `true` pour `exitContext`, le thread quitte le domaine de synchronisation, ce qui permet un thread qui est bloqué sur un appel à n’importe quel membre de l’objet pour continuer.</span><span class="sxs-lookup"><span data-stu-id="9bec6-419">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="9bec6-420">Lorsque la <xref:System.Threading.WaitHandle.WaitAll%2A> méthode est retournée, le thread qui a effectué l’appel doit attendre pour rentrer dans le domaine de synchronisation.</span><span class="sxs-lookup"><span data-stu-id="9bec6-420">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bec6-421">L’exemple de code suivant montre comment utiliser le pool de threads à créer de façon asynchrone et d’écrire dans un groupe de fichiers.</span><span class="sxs-lookup"><span data-stu-id="9bec6-421">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="9bec6-422">Chaque opération d’écriture est en attente comme un élément de travail et des signaux lorsqu’elle est terminée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-422">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="9bec6-423">Le thread principal attend que tous les éléments signaler et se termine.</span><span class="sxs-lookup"><span data-stu-id="9bec6-423">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9bec6-424">Le paramètre <paramref name="waitHandles" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-424">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="9bec6-425">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-425">-or-</span></span>  
  
 <span data-ttu-id="9bec6-426">Un ou plusieurs des objets dans le tableau <paramref name="waitHandles" /> sont <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-426">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="9bec6-427">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-427">-or-</span></span>  
  
 <span data-ttu-id="9bec6-428"><paramref name="waitHandles" /> est un tableau sans éléments, et que la version de .NET Framework est 2.0 ou ultérieure.</span><span class="sxs-lookup"><span data-stu-id="9bec6-428"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><span data-ttu-id="9bec6-429">Le tableau <paramref name="waitHandles" /> contient des éléments qui sont des doublons.</span><span class="sxs-lookup"><span data-stu-id="9bec6-429">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9bec6-430">Le nombre d’objets dans <paramref name="waitHandles" /> est supérieur à ce que le système autorise.</span><span class="sxs-lookup"><span data-stu-id="9bec6-430">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
 <span data-ttu-id="9bec6-431">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-431">-or-</span></span>  
  
 <span data-ttu-id="9bec6-432">L’attribut <see cref="T:System.STAThreadAttribute" /> est appliqué à la procédure de thread pour le thread actuel, et <paramref name="waitHandles" /> contient plusieurs éléments.</span><span class="sxs-lookup"><span data-stu-id="9bec6-432">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="9bec6-433"><paramref name="waitHandles" /> est un tableau sans éléments, et que la version de .NET Framework est 1.0 ou 1.1.</span><span class="sxs-lookup"><span data-stu-id="9bec6-433"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9bec6-434"><paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d’attente infini.</span><span class="sxs-lookup"><span data-stu-id="9bec6-434"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span>  
  
 <span data-ttu-id="9bec6-435">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-435">-or-</span></span>  
  
 <span data-ttu-id="9bec6-436"><paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-436"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="9bec6-437">L’attente a été arrêtée, car un thread s’est terminé sans libérer de mutex.</span><span class="sxs-lookup"><span data-stu-id="9bec6-437">The wait terminated because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="9bec6-438">Cette exception n’est pas levée sur Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-438">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bec6-439">Le tableau <paramref name="waitHandles" /> contient un proxy transparent pour un <see cref="T:System.Threading.WaitHandle" /> dans un autre domaine d’application.</span><span class="sxs-lookup"><span data-stu-id="9bec6-439">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9bec6-440">Attend que l'un des éléments du tableau spécifié reçoive un signal.</span><span class="sxs-lookup"><span data-stu-id="9bec6-440">Waits for any of the elements in the specified array to receive a signal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="9bec6-441">Tableau <see langword="WaitHandle" /> qui contient les objets que l'instance actuelle attendra.</span><span class="sxs-lookup"><span data-stu-id="9bec6-441">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <summary><span data-ttu-id="9bec6-442">Attend que l'un des éléments du tableau spécifié reçoive un signal.</span><span class="sxs-lookup"><span data-stu-id="9bec6-442">Waits for any of the elements in the specified array to receive a signal.</span></span></summary>
        <returns><span data-ttu-id="9bec6-443">Index du tableau de l'objet ayant respecté l'attente.</span><span class="sxs-lookup"><span data-stu-id="9bec6-443">The array index of the object that satisfied the wait.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-444"><xref:System.Threading.AbandonedMutexException> est une nouveauté de .NET Framework version 2.0.</span><span class="sxs-lookup"><span data-stu-id="9bec6-444"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="9bec6-445">Dans les versions précédentes, le <xref:System.Threading.WaitHandle.WaitAny%2A> retourne de la méthode `true` si l’attente se termine parce qu’un mutex est abandonné.</span><span class="sxs-lookup"><span data-stu-id="9bec6-445">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="9bec6-446">Un mutex abandonné indique souvent une grave erreur de codage.</span><span class="sxs-lookup"><span data-stu-id="9bec6-446">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="9bec6-447">Dans le cas d’un mutex à l’échelle du système, il peut indiquer qu’une application a été arrêtée soudainement (par exemple, en utilisant le Gestionnaire des tâches de Windows).</span><span class="sxs-lookup"><span data-stu-id="9bec6-447">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="9bec6-448">L’exception contient des informations utiles pour le débogage.</span><span class="sxs-lookup"><span data-stu-id="9bec6-448">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="9bec6-449">Le <xref:System.Threading.WaitHandle.WaitAny%2A> méthode lève une exception une <xref:System.Threading.AbandonedMutexException> uniquement lorsque l’attente se termine en raison d’un mutex abandonné.</span><span class="sxs-lookup"><span data-stu-id="9bec6-449">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="9bec6-450">Si `waitHandles` contient un mutex libéré avec un numéro d’index inférieur à celui du mutex abandonné, le <xref:System.Threading.WaitHandle.WaitAny%2A> méthode se termine normalement et l’exception n’est levée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-450">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9bec6-451">Dans les versions du .NET Framework antérieures à la version 2.0, si un thread se termine ou s’interrompt sans libérer explicitement un <xref:System.Threading.Mutex>et qui `Mutex` est à l’index 0 (zéro) dans un `WaitAny` tableau sur un autre thread, l’index retourné par `WaitAny` est 128 au lieu de 0.</span><span class="sxs-lookup"><span data-stu-id="9bec6-451">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="9bec6-452">Cette méthode retourne quand un handle est signalé.</span><span class="sxs-lookup"><span data-stu-id="9bec6-452">This method returns when any handle is signaled.</span></span> <span data-ttu-id="9bec6-453">Si plusieurs objets sont signalés pendant l’appel, la valeur de retour est l’index de tableau de l’objet signalé ayant la plus petite valeur d’index de tous les objets signalés.</span><span class="sxs-lookup"><span data-stu-id="9bec6-453">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="9bec6-454">Dans certaines implémentations, si plus de 64 handles sont passés, un <xref:System.NotSupportedException> est levée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-454">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="9bec6-455">Appel de cette surcharge de méthode équivaut à appeler le <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> surcharge de méthode et en spécifiant -1 (ou <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) pour `millisecondsTimeout` et `true` pour `exitContext`.</span><span class="sxs-lookup"><span data-stu-id="9bec6-455">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bec6-456">L’exemple de code suivant montre l’appel du <xref:System.Threading.WaitHandle.WaitAny%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="9bec6-456">The following code example demonstrates calling the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9bec6-457">Le paramètre <paramref name="waitHandles" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-457">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="9bec6-458">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-458">-or-</span></span>  
  
 <span data-ttu-id="9bec6-459">Un ou plusieurs des objets dans le tableau <paramref name="waitHandles" /> sont <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-459">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9bec6-460">Le nombre d’objets dans <paramref name="waitHandles" /> est supérieur à ce que le système autorise.</span><span class="sxs-lookup"><span data-stu-id="9bec6-460">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="9bec6-461"><paramref name="waitHandles" /> est un tableau qui ne contient aucun élément et la version du .NET Framework est 1.0 ou 1.1.</span><span class="sxs-lookup"><span data-stu-id="9bec6-461"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="9bec6-462">L’attente s’est arrêtée, car un thread s’est terminé sans libérer de mutex.</span><span class="sxs-lookup"><span data-stu-id="9bec6-462">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="9bec6-463">Cette exception n’est pas levée sur Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-463">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9bec6-464"><paramref name="waitHandles" /> est un tableau qui ne contient aucun élément et la version du .NET Framework est 2.0 ou ultérieure.</span><span class="sxs-lookup"><span data-stu-id="9bec6-464"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bec6-465">Le tableau <paramref name="waitHandles" /> contient un proxy transparent pour un <see cref="T:System.Threading.WaitHandle" /> dans un autre domaine d’application.</span><span class="sxs-lookup"><span data-stu-id="9bec6-465">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="9bec6-466">Tableau <see langword="WaitHandle" /> qui contient les objets que l'instance actuelle attendra.</span><span class="sxs-lookup"><span data-stu-id="9bec6-466">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="9bec6-467">Nombre de millisecondes à attendre, ou <see cref="F:System.Threading.Timeout.Infinite" /> (-1) pour un délai d'attente infini.</span><span class="sxs-lookup"><span data-stu-id="9bec6-467">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="9bec6-468">Attend que l'un des éléments du tableau spécifié reçoive un signal, en utilisant un entier signé 32 bits pour spécifier l'intervalle de temps.</span><span class="sxs-lookup"><span data-stu-id="9bec6-468">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="9bec6-469">Index de tableau de l'objet ayant respecté l'attente ou <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> si aucun objet n'a respecté l'attente et qu'un intervalle de temps équivalent à <paramref name="millisecondsTimeout" /> s'est écoulé.</span><span class="sxs-lookup"><span data-stu-id="9bec6-469">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-470">Si `millisecondsTimeout` est égal à zéro, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="9bec6-470">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="9bec6-471">Il teste l’état des handles d’attente et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="9bec6-471">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="9bec6-472">Le <xref:System.Threading.WaitHandle.WaitAny%2A> méthode lève une exception une <xref:System.Threading.AbandonedMutexException> uniquement lorsque l’attente se termine en raison d’un mutex abandonné.</span><span class="sxs-lookup"><span data-stu-id="9bec6-472">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="9bec6-473">Si `waitHandles` contient un mutex libéré avec un numéro d’index inférieur à celui du mutex abandonné, le <xref:System.Threading.WaitHandle.WaitAny%2A> méthode se termine normalement et l’exception n’est levée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-473">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="9bec6-474">Cette méthode retourne lorsque l’attente se termine lorsqu’une des poignées sont signalée soit lorsqu’un dépassement de délai se produit.</span><span class="sxs-lookup"><span data-stu-id="9bec6-474">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="9bec6-475">Si plusieurs objets sont signalés pendant l’appel, la valeur de retour est l’index de tableau de l’objet signalé ayant la plus petite valeur d’index de tous les objets signalés.</span><span class="sxs-lookup"><span data-stu-id="9bec6-475">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="9bec6-476">Dans certaines implémentations, si plus de 64 handles sont passés, un <xref:System.NotSupportedException> est levée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-476">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="9bec6-477">Appel de cette surcharge de méthode est le même que d’appeler le <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> surcharge et en spécifiant `false` pour `exitContext`.</span><span class="sxs-lookup"><span data-stu-id="9bec6-477">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9bec6-478">Le paramètre <paramref name="waitHandles" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-478">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="9bec6-479">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-479">-or-</span></span>  
  
 <span data-ttu-id="9bec6-480">Un ou plusieurs des objets dans le tableau <paramref name="waitHandles" /> sont <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-480">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9bec6-481">Le nombre d’objets dans <paramref name="waitHandles" /> est supérieur à ce que le système autorise.</span><span class="sxs-lookup"><span data-stu-id="9bec6-481">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9bec6-482"><paramref name="millisecondsTimeout" /> est un nombre négatif différent de -1, qui représente un délai d’attente infini.</span><span class="sxs-lookup"><span data-stu-id="9bec6-482"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="9bec6-483">L’attente s’est arrêtée, car un thread s’est terminé sans libérer de mutex.</span><span class="sxs-lookup"><span data-stu-id="9bec6-483">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="9bec6-484">Cette exception n’est pas levée sur Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-484">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9bec6-485"><paramref name="waitHandles" /> est un tableau sans éléments.</span><span class="sxs-lookup"><span data-stu-id="9bec6-485"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bec6-486">Le tableau <paramref name="waitHandles" /> contient un proxy transparent pour un <see cref="T:System.Threading.WaitHandle" /> dans un autre domaine d’application.</span><span class="sxs-lookup"><span data-stu-id="9bec6-486">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="9bec6-487">Tableau <see langword="WaitHandle" /> qui contient les objets que l'instance actuelle attendra.</span><span class="sxs-lookup"><span data-stu-id="9bec6-487">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="9bec6-488">
          <see cref="T:System.TimeSpan" /> qui représente le nombre de millièmes de secondes à attendre ou <see cref="T:System.TimeSpan" /> qui représente -1 millième de seconde, pour attendre indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="9bec6-488">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="9bec6-489">Attend que l'un des éléments du tableau spécifié reçoive un signal, en utilisant une valeur <see cref="T:System.TimeSpan" /> pour spécifier l'intervalle de temps.</span><span class="sxs-lookup"><span data-stu-id="9bec6-489">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="9bec6-490">Index de tableau de l'objet ayant respecté l'attente ou <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> si aucun objet n'a respecté l'attente et qu'un intervalle de temps équivalent à <paramref name="timeout" /> s'est écoulé.</span><span class="sxs-lookup"><span data-stu-id="9bec6-490">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-491">Si `timeout` est égal à zéro, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="9bec6-491">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="9bec6-492">Il teste l’état des handles d’attente et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="9bec6-492">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="9bec6-493">Le <xref:System.Threading.WaitHandle.WaitAny%2A> méthode lève une exception une <xref:System.Threading.AbandonedMutexException> uniquement lorsque l’attente se termine en raison d’un mutex abandonné.</span><span class="sxs-lookup"><span data-stu-id="9bec6-493">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="9bec6-494">Si `waitHandles` contient un mutex libéré avec un numéro d’index inférieur à celui du mutex abandonné, le <xref:System.Threading.WaitHandle.WaitAny%2A> méthode se termine normalement et l’exception n’est levée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-494">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="9bec6-495">Cette méthode retourne lorsque l’attente se termine lorsqu’une des poignées sont signalée soit lorsqu’un dépassement de délai se produit.</span><span class="sxs-lookup"><span data-stu-id="9bec6-495">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="9bec6-496">Si plusieurs objets sont signalés pendant l’appel, la valeur de retour est l’index de tableau de l’objet signalé ayant la plus petite valeur d’index de tous les objets signalés.</span><span class="sxs-lookup"><span data-stu-id="9bec6-496">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="9bec6-497">Dans certaines implémentations, si plus de 64 handles sont passés, un <xref:System.NotSupportedException> est levée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-497">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="9bec6-498">La valeur maximale de `timeout` est <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-498">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="9bec6-499">Appel de cette surcharge de méthode est le même que d’appeler le <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> surcharge et en spécifiant `false` pour `exitContext`.</span><span class="sxs-lookup"><span data-stu-id="9bec6-499">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9bec6-500">Le paramètre <paramref name="waitHandles" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-500">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="9bec6-501">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-501">-or-</span></span>  
  
 <span data-ttu-id="9bec6-502">Un ou plusieurs des objets dans le tableau <paramref name="waitHandles" /> sont <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-502">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9bec6-503">Le nombre d’objets dans <paramref name="waitHandles" /> est supérieur à ce que le système autorise.</span><span class="sxs-lookup"><span data-stu-id="9bec6-503">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9bec6-504"><paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d’attente infini.</span><span class="sxs-lookup"><span data-stu-id="9bec6-504"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span>  
  
 <span data-ttu-id="9bec6-505">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-505">-or-</span></span>  
  
 <span data-ttu-id="9bec6-506"><paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-506"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="9bec6-507">L’attente s’est arrêtée, car un thread s’est terminé sans libérer de mutex.</span><span class="sxs-lookup"><span data-stu-id="9bec6-507">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="9bec6-508">Cette exception n’est pas levée sur Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-508">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9bec6-509"><paramref name="waitHandles" /> est un tableau sans éléments.</span><span class="sxs-lookup"><span data-stu-id="9bec6-509"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bec6-510">Le tableau <paramref name="waitHandles" /> contient un proxy transparent pour un <see cref="T:System.Threading.WaitHandle" /> dans un autre domaine d’application.</span><span class="sxs-lookup"><span data-stu-id="9bec6-510">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="9bec6-511">Tableau <see langword="WaitHandle" /> qui contient les objets que l'instance actuelle attendra.</span><span class="sxs-lookup"><span data-stu-id="9bec6-511">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="9bec6-512">Nombre de millisecondes à attendre, ou <see cref="F:System.Threading.Timeout.Infinite" /> (-1) pour un délai d'attente infini.</span><span class="sxs-lookup"><span data-stu-id="9bec6-512">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="exitContext">
          <span data-ttu-id="9bec6-513"><see langword="true" /> pour quitter le domaine de synchronisation du contexte avant l'attente (dans le cas d'un contexte synchronisé) et l'acquérir à nouveau ensuite ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-513"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="9bec6-514">Attend que l’un des éléments du tableau spécifié reçoive un signal, en utilisant un entier signé 32 bits pour spécifier l’intervalle de temps et en spécifiant s’il faut quitter le domaine de synchronisation avant l’attente.</span><span class="sxs-lookup"><span data-stu-id="9bec6-514">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="9bec6-515">Index de tableau de l'objet ayant respecté l'attente ou <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> si aucun objet n'a respecté l'attente et qu'un intervalle de temps équivalent à <paramref name="millisecondsTimeout" /> s'est écoulé.</span><span class="sxs-lookup"><span data-stu-id="9bec6-515">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-516">Si `millisecondsTimeout` est égal à zéro, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="9bec6-516">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="9bec6-517">Il teste l’état des handles d’attente et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="9bec6-517">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="9bec6-518"><xref:System.Threading.AbandonedMutexException> est une nouveauté de .NET Framework version 2.0.</span><span class="sxs-lookup"><span data-stu-id="9bec6-518"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="9bec6-519">Dans les versions précédentes, le <xref:System.Threading.WaitHandle.WaitAny%2A> retourne de la méthode `true` si l’attente se termine parce qu’un mutex est abandonné.</span><span class="sxs-lookup"><span data-stu-id="9bec6-519">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="9bec6-520">Un mutex abandonné indique souvent une grave erreur de codage.</span><span class="sxs-lookup"><span data-stu-id="9bec6-520">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="9bec6-521">Dans le cas d’un mutex à l’échelle du système, il peut indiquer qu’une application a été arrêtée soudainement (par exemple, en utilisant le Gestionnaire des tâches de Windows).</span><span class="sxs-lookup"><span data-stu-id="9bec6-521">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="9bec6-522">L’exception contient des informations utiles pour le débogage.</span><span class="sxs-lookup"><span data-stu-id="9bec6-522">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="9bec6-523">Le <xref:System.Threading.WaitHandle.WaitAny%2A> méthode lève une exception une <xref:System.Threading.AbandonedMutexException> uniquement lorsque l’attente se termine en raison d’un mutex abandonné.</span><span class="sxs-lookup"><span data-stu-id="9bec6-523">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="9bec6-524">Si `waitHandles` contient un mutex libéré avec un numéro d’index inférieur à celui du mutex abandonné, le <xref:System.Threading.WaitHandle.WaitAny%2A> méthode se termine normalement et l’exception n’est levée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-524">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9bec6-525">Dans les versions du .NET Framework antérieures à la version 2.0, si un thread se termine ou s’interrompt sans libérer explicitement un <xref:System.Threading.Mutex>et qui `Mutex` est à l’index 0 (zéro) dans un `WaitAny` tableau sur un autre thread, l’index retourné par `WaitAny` est 128 au lieu de 0.</span><span class="sxs-lookup"><span data-stu-id="9bec6-525">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="9bec6-526">Cette méthode retourne lorsque l’attente se termine lorsqu’une des poignées sont signalée soit lorsqu’un dépassement de délai se produit.</span><span class="sxs-lookup"><span data-stu-id="9bec6-526">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="9bec6-527">Si plusieurs objets sont signalés pendant l’appel, la valeur de retour est l’index de tableau de l’objet signalé ayant la plus petite valeur d’index de tous les objets signalés.</span><span class="sxs-lookup"><span data-stu-id="9bec6-527">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="9bec6-528">Dans certaines implémentations, si plus de 64 handles sont passés, un <xref:System.NotSupportedException> est levée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-528">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="9bec6-529">Remarques sur la sortie de contexte</span><span class="sxs-lookup"><span data-stu-id="9bec6-529">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="9bec6-530">Le `exitContext` paramètre n’a aucun effet à moins que le <xref:System.Threading.WaitHandle.WaitAny%2A> méthode appelée à partir d’un contexte managé non défini par défaut.</span><span class="sxs-lookup"><span data-stu-id="9bec6-530">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="9bec6-531">Cela peut se produire si votre thread se trouve à l’intérieur d’un appel à une instance d’une classe dérivée de <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-531">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="9bec6-532">Même si vous exécutez actuellement une méthode sur une classe qui ne dérive pas de <xref:System.ContextBoundObject>, comme <xref:System.String>, vous pouvez être dans un contexte non défini par défaut si un <xref:System.ContextBoundObject> se trouve sur votre pile dans le domaine d’application actuel.</span><span class="sxs-lookup"><span data-stu-id="9bec6-532">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="9bec6-533">Lorsque votre code s’exécute dans un contexte non défini par défaut, en spécifiant `true` pour `exitContext` oblige le thread quitter le contexte managé non défini par défaut (autrement dit, pour effectuer la transition vers le contexte par défaut) avant d’exécuter le <xref:System.Threading.WaitHandle.WaitAny%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="9bec6-533">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="9bec6-534">Le thread retourne au contexte d’origine non défini par défaut après l’appel à la <xref:System.Threading.WaitHandle.WaitAny%2A> méthode se termine.</span><span class="sxs-lookup"><span data-stu-id="9bec6-534">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="9bec6-535">Cela peut être utile lorsque la classe liée au contexte comporte <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-535">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="9bec6-536">Dans ce cas, tous les appels aux membres de la classe sont automatiquement synchronisés, et le domaine de synchronisation est le corps de code pour la classe.</span><span class="sxs-lookup"><span data-stu-id="9bec6-536">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="9bec6-537">Si le code dans la pile des appels d’un membre appelle la <xref:System.Threading.WaitHandle.WaitAny%2A> (méthode) et spécifie `true` pour `exitContext`, le thread quitte le domaine de synchronisation, ce qui permet un thread qui est bloqué sur un appel à n’importe quel membre de l’objet pour continuer.</span><span class="sxs-lookup"><span data-stu-id="9bec6-537">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="9bec6-538">Lorsque la <xref:System.Threading.WaitHandle.WaitAny%2A> méthode est retournée, le thread qui a effectué l’appel doit attendre pour rentrer dans le domaine de synchronisation.</span><span class="sxs-lookup"><span data-stu-id="9bec6-538">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bec6-539">L’exemple de code suivant montre comment utiliser le pool de threads pour la recherche simultanée d’un fichier sur plusieurs disques.</span><span class="sxs-lookup"><span data-stu-id="9bec6-539">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="9bec6-540">Pour des raisons d’espace, uniquement le répertoire racine de chaque disque est recherché.</span><span class="sxs-lookup"><span data-stu-id="9bec6-540">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9bec6-541">Le paramètre <paramref name="waitHandles" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-541">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="9bec6-542">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-542">-or-</span></span>  
  
 <span data-ttu-id="9bec6-543">Un ou plusieurs des objets dans le tableau <paramref name="waitHandles" /> sont <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-543">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9bec6-544">Le nombre d’objets dans <paramref name="waitHandles" /> est supérieur à ce que le système autorise.</span><span class="sxs-lookup"><span data-stu-id="9bec6-544">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="9bec6-545"><paramref name="waitHandles" /> est un tableau qui ne contient aucun élément et la version du .NET Framework est 1.0 ou 1.1.</span><span class="sxs-lookup"><span data-stu-id="9bec6-545"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9bec6-546"><paramref name="millisecondsTimeout" /> est un nombre négatif différent de -1, qui représente un délai d’attente infini.</span><span class="sxs-lookup"><span data-stu-id="9bec6-546"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="9bec6-547">L’attente s’est arrêtée, car un thread s’est terminé sans libérer de mutex.</span><span class="sxs-lookup"><span data-stu-id="9bec6-547">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="9bec6-548">Cette exception n’est pas levée sur Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-548">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9bec6-549"><paramref name="waitHandles" /> est un tableau qui ne contient aucun élément et la version du .NET Framework est 2.0 ou ultérieure.</span><span class="sxs-lookup"><span data-stu-id="9bec6-549"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bec6-550">Le tableau <paramref name="waitHandles" /> contient un proxy transparent pour un <see cref="T:System.Threading.WaitHandle" /> dans un autre domaine d’application.</span><span class="sxs-lookup"><span data-stu-id="9bec6-550">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="9bec6-551">Tableau <see langword="WaitHandle" /> qui contient les objets que l'instance actuelle attendra.</span><span class="sxs-lookup"><span data-stu-id="9bec6-551">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="9bec6-552">
          <see cref="T:System.TimeSpan" /> qui représente le nombre de millièmes de secondes à attendre ou <see cref="T:System.TimeSpan" /> qui représente -1 millième de seconde, pour attendre indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="9bec6-552">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="exitContext">
          <span data-ttu-id="9bec6-553"><see langword="true" /> pour quitter le domaine de synchronisation du contexte avant l'attente (dans le cas d'un contexte synchronisé) et l'acquérir à nouveau ensuite ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-553"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="9bec6-554">Attend que l'un des éléments du tableau spécifié reçoive un signal ; en utilisant une valeur <see cref="T:System.TimeSpan" /> pour spécifier l'intervalle de temps et en spécifiant s'il faut quitter le domaine de synchronisation avant l'attente.</span><span class="sxs-lookup"><span data-stu-id="9bec6-554">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="9bec6-555">Index de tableau de l'objet ayant respecté l'attente ou <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> si aucun objet n'a respecté l'attente et qu'un intervalle de temps équivalent à <paramref name="timeout" /> s'est écoulé.</span><span class="sxs-lookup"><span data-stu-id="9bec6-555">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-556">Si `timeout` est égal à zéro, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="9bec6-556">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="9bec6-557">Il teste l’état des handles d’attente et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="9bec6-557">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="9bec6-558"><xref:System.Threading.AbandonedMutexException> est une nouveauté de .NET Framework version 2.0.</span><span class="sxs-lookup"><span data-stu-id="9bec6-558"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="9bec6-559">Dans les versions précédentes, le <xref:System.Threading.WaitHandle.WaitAny%2A> retourne de la méthode `true` si l’attente se termine parce qu’un mutex est abandonné.</span><span class="sxs-lookup"><span data-stu-id="9bec6-559">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="9bec6-560">Un mutex abandonné indique souvent une grave erreur de codage.</span><span class="sxs-lookup"><span data-stu-id="9bec6-560">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="9bec6-561">Dans le cas d’un mutex à l’échelle du système, il peut indiquer qu’une application a été arrêtée soudainement (par exemple, en utilisant le Gestionnaire des tâches de Windows).</span><span class="sxs-lookup"><span data-stu-id="9bec6-561">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="9bec6-562">L’exception contient des informations utiles pour le débogage.</span><span class="sxs-lookup"><span data-stu-id="9bec6-562">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="9bec6-563">Le <xref:System.Threading.WaitHandle.WaitAny%2A> méthode lève une exception une <xref:System.Threading.AbandonedMutexException> uniquement lorsque l’attente se termine en raison d’un mutex abandonné.</span><span class="sxs-lookup"><span data-stu-id="9bec6-563">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="9bec6-564">Si `waitHandles` contient un mutex libéré avec un numéro d’index inférieur à celui du mutex abandonné, le <xref:System.Threading.WaitHandle.WaitAny%2A> méthode se termine normalement et l’exception n’est levée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-564">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9bec6-565">Dans les versions du .NET Framework antérieures à la version 2.0, si un thread se termine ou s’interrompt sans libérer explicitement un <xref:System.Threading.Mutex>et qui `Mutex` est à l’index 0 (zéro) dans un `WaitAny` tableau sur un autre thread, l’index retourné par `WaitAny` est 128 au lieu de 0.</span><span class="sxs-lookup"><span data-stu-id="9bec6-565">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="9bec6-566">Cette méthode retourne lorsque l’attente se termine lorsqu’une des poignées sont signalée soit lorsqu’un dépassement de délai se produit.</span><span class="sxs-lookup"><span data-stu-id="9bec6-566">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="9bec6-567">Si plusieurs objets sont signalés pendant l’appel, la valeur de retour est l’index de tableau de l’objet signalé ayant la plus petite valeur d’index de tous les objets signalés.</span><span class="sxs-lookup"><span data-stu-id="9bec6-567">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="9bec6-568">Dans certaines implémentations, si plus de 64 handles sont passés, un <xref:System.NotSupportedException> est levée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-568">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="9bec6-569">La valeur maximale de `timeout` est <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-569">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="9bec6-570">Remarques sur la sortie de contexte</span><span class="sxs-lookup"><span data-stu-id="9bec6-570">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="9bec6-571">Le `exitContext` paramètre n’a aucun effet à moins que le <xref:System.Threading.WaitHandle.WaitAny%2A> méthode appelée à partir d’un contexte managé non défini par défaut.</span><span class="sxs-lookup"><span data-stu-id="9bec6-571">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="9bec6-572">Cela peut se produire si votre thread se trouve à l’intérieur d’un appel à une instance d’une classe dérivée de <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-572">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="9bec6-573">Même si vous exécutez actuellement une méthode sur une classe qui ne dérive pas de <xref:System.ContextBoundObject>, comme <xref:System.String>, vous pouvez être dans un contexte non défini par défaut si un <xref:System.ContextBoundObject> se trouve sur votre pile dans le domaine d’application actuel.</span><span class="sxs-lookup"><span data-stu-id="9bec6-573">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="9bec6-574">Lorsque votre code s’exécute dans un contexte non défini par défaut, en spécifiant `true` pour `exitContext` oblige le thread quitter le contexte managé non défini par défaut (autrement dit, pour effectuer la transition vers le contexte par défaut) avant d’exécuter le <xref:System.Threading.WaitHandle.WaitAny%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="9bec6-574">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="9bec6-575">Le thread retourne au contexte d’origine non défini par défaut après l’appel à la <xref:System.Threading.WaitHandle.WaitAny%2A> méthode se termine.</span><span class="sxs-lookup"><span data-stu-id="9bec6-575">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="9bec6-576">Cela peut être utile lorsque la classe liée au contexte comporte <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-576">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="9bec6-577">Dans ce cas, tous les appels aux membres de la classe sont automatiquement synchronisés, et le domaine de synchronisation est le corps de code pour la classe.</span><span class="sxs-lookup"><span data-stu-id="9bec6-577">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="9bec6-578">Si le code dans la pile des appels d’un membre appelle la <xref:System.Threading.WaitHandle.WaitAny%2A> (méthode) et spécifie `true` pour `exitContext`, le thread quitte le domaine de synchronisation, ce qui permet un thread qui est bloqué sur un appel à n’importe quel membre de l’objet pour continuer.</span><span class="sxs-lookup"><span data-stu-id="9bec6-578">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="9bec6-579">Lorsque la <xref:System.Threading.WaitHandle.WaitAny%2A> méthode est retournée, le thread qui a effectué l’appel doit attendre pour rentrer dans le domaine de synchronisation.</span><span class="sxs-lookup"><span data-stu-id="9bec6-579">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bec6-580">L’exemple de code suivant montre comment utiliser le pool de threads pour la recherche simultanée d’un fichier sur plusieurs disques.</span><span class="sxs-lookup"><span data-stu-id="9bec6-580">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="9bec6-581">Pour des raisons d’espace, uniquement le répertoire racine de chaque disque est recherché.</span><span class="sxs-lookup"><span data-stu-id="9bec6-581">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9bec6-582">Le paramètre <paramref name="waitHandles" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-582">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="9bec6-583">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-583">-or-</span></span>  
  
 <span data-ttu-id="9bec6-584">Un ou plusieurs des objets dans le tableau <paramref name="waitHandles" /> sont <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-584">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9bec6-585">Le nombre d’objets dans <paramref name="waitHandles" /> est supérieur à ce que le système autorise.</span><span class="sxs-lookup"><span data-stu-id="9bec6-585">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="9bec6-586"><paramref name="waitHandles" /> est un tableau qui ne contient aucun élément et la version du .NET Framework est 1.0 ou 1.1.</span><span class="sxs-lookup"><span data-stu-id="9bec6-586"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9bec6-587"><paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d’attente infini.</span><span class="sxs-lookup"><span data-stu-id="9bec6-587"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span>  
  
 <span data-ttu-id="9bec6-588">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-588">-or-</span></span>  
  
 <span data-ttu-id="9bec6-589"><paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-589"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="9bec6-590">L’attente s’est arrêtée, car un thread s’est terminé sans libérer de mutex.</span><span class="sxs-lookup"><span data-stu-id="9bec6-590">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="9bec6-591">Cette exception n’est pas levée sur Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-591">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9bec6-592"><paramref name="waitHandles" /> est un tableau qui ne contient aucun élément et la version du .NET Framework est 2.0 ou ultérieure.</span><span class="sxs-lookup"><span data-stu-id="9bec6-592"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bec6-593">Le tableau <paramref name="waitHandles" /> contient un proxy transparent pour un <see cref="T:System.Threading.WaitHandle" /> dans un autre domaine d’application.</span><span class="sxs-lookup"><span data-stu-id="9bec6-593">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitOne">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9bec6-594">Bloque le thread actuel jusqu'à ce que le <see cref="T:System.Threading.WaitHandle" /> actuel reçoive un signal.</span><span class="sxs-lookup"><span data-stu-id="9bec6-594">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9bec6-595">Bloque le thread actuel jusqu'à ce que le <see cref="T:System.Threading.WaitHandle" /> actuel reçoive un signal.</span><span class="sxs-lookup"><span data-stu-id="9bec6-595">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span></span></summary>
        <returns>
          <span data-ttu-id="9bec6-596"><see langword="true" /> si l'instance actuelle reçoit un signal.</span><span class="sxs-lookup"><span data-stu-id="9bec6-596"><see langword="true" /> if the current instance receives a signal.</span></span> <span data-ttu-id="9bec6-597">Si l'instance actuelle ne reçoit jamais de signal, <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> ne retourne jamais.</span><span class="sxs-lookup"><span data-stu-id="9bec6-597">If the current instance is never signaled, <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> never returns.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-598"><xref:System.Threading.AbandonedMutexException> est une nouveauté de .NET Framework version 2.0.</span><span class="sxs-lookup"><span data-stu-id="9bec6-598"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="9bec6-599">Dans les versions précédentes, le <xref:System.Threading.WaitHandle.WaitOne%2A> méthode renvoie `true` quand un mutex est abandonné.</span><span class="sxs-lookup"><span data-stu-id="9bec6-599">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="9bec6-600">Un mutex abandonné indique souvent une grave erreur de codage.</span><span class="sxs-lookup"><span data-stu-id="9bec6-600">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="9bec6-601">Dans le cas d’un mutex à l’échelle du système, il peut indiquer qu’une application a été arrêtée soudainement (par exemple, en utilisant le Gestionnaire des tâches de Windows).</span><span class="sxs-lookup"><span data-stu-id="9bec6-601">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="9bec6-602">L’exception contient des informations utiles pour le débogage.</span><span class="sxs-lookup"><span data-stu-id="9bec6-602">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="9bec6-603">L’appelant de cette méthode bloque indéfiniment jusqu'à ce que l’instance actuelle reçoive un signal.</span><span class="sxs-lookup"><span data-stu-id="9bec6-603">The caller of this method blocks indefinitely until the current instance receives a signal.</span></span> <span data-ttu-id="9bec6-604">Utilisez cette méthode pour bloquer jusqu'à un <xref:System.Threading.WaitHandle> reçoive un signal d’un autre thread, tel qu’est générée lorsqu’une opération asynchrone se termine.</span><span class="sxs-lookup"><span data-stu-id="9bec6-604">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="9bec6-605">Pour plus d’informations, consultez le <xref:System.IAsyncResult> interface.</span><span class="sxs-lookup"><span data-stu-id="9bec6-605">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="9bec6-606">Appel de cette surcharge de méthode équivaut à appeler le <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> surcharge de méthode et en spécifiant -1 ou <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> pour le premier paramètre et `false` pour le deuxième paramètre.</span><span class="sxs-lookup"><span data-stu-id="9bec6-606">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload and specifying -1 or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for the first parameter and `false` for the second parameter.</span></span>  
  
 <span data-ttu-id="9bec6-607">Substituez cette méthode pour personnaliser le comportement des classes dérivées.</span><span class="sxs-lookup"><span data-stu-id="9bec6-607">Override this method to customize the behavior of derived classes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bec6-608">L’exemple de code suivant montre comment utiliser un handle d’attente pour conserver un processus de s’arrêter alors qu’il attend la fin de l’exécution d’un thread d’arrière-plan.</span><span class="sxs-lookup"><span data-stu-id="9bec6-608">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9bec6-609">L’instance actuelle a déjà été supprimée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-609">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="9bec6-610">L’attente s’est arrêtée, car un thread s’est terminé sans libérer de mutex.</span><span class="sxs-lookup"><span data-stu-id="9bec6-610">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="9bec6-611">Cette exception n’est pas levée sur Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-611">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bec6-612">L'instance actuelle est un proxy transparent pour un <see cref="T:System.Threading.WaitHandle" /> dans un autre domaine d'application.</span><span class="sxs-lookup"><span data-stu-id="9bec6-612">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="9bec6-613">Nombre de millisecondes à attendre, ou <see cref="F:System.Threading.Timeout.Infinite" /> (-1) pour un délai d'attente infini.</span><span class="sxs-lookup"><span data-stu-id="9bec6-613">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="9bec6-614">Bloque le thread actuel jusqu'à ce que le <see cref="T:System.Threading.WaitHandle" /> actuel reçoive un signal, en utilisant un entier signé 32 bits pour spécifier l'intervalle de temps.</span><span class="sxs-lookup"><span data-stu-id="9bec6-614">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.</span></span></summary>
        <returns>
          <span data-ttu-id="9bec6-615"><see langword="true" /> si l'instance actuelle reçoit un signal ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-615"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-616">Si `millisecondsTimeout` est égal à zéro, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="9bec6-616">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="9bec6-617">Il teste l’état du handle d’attente et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="9bec6-617">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="9bec6-618">L’appelant de cette méthode bloque jusqu'à ce que l’instance actuelle reçoive un signal ou un délai d’attente se produit.</span><span class="sxs-lookup"><span data-stu-id="9bec6-618">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="9bec6-619">Utilisez cette méthode pour bloquer jusqu'à un <xref:System.Threading.WaitHandle> reçoive un signal d’un autre thread, tel qu’est générée lorsqu’une opération asynchrone se termine.</span><span class="sxs-lookup"><span data-stu-id="9bec6-619">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="9bec6-620">Pour plus d’informations, consultez le <xref:System.IAsyncResult> interface.</span><span class="sxs-lookup"><span data-stu-id="9bec6-620">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="9bec6-621">Substituez cette méthode pour personnaliser le comportement des classes dérivées.</span><span class="sxs-lookup"><span data-stu-id="9bec6-621">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="9bec6-622">Appel de cette surcharge de méthode est le même que d’appeler le <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> surcharge et en spécifiant `false` pour `exitContext`.</span><span class="sxs-lookup"><span data-stu-id="9bec6-622">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bec6-623">L’exemple de code suivant montre comment utiliser un handle d’attente pour conserver un processus de s’arrêter alors qu’il attend la fin de l’exécution d’un thread d’arrière-plan.</span><span class="sxs-lookup"><span data-stu-id="9bec6-623">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9bec6-624">L’instance actuelle a déjà été supprimée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-624">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9bec6-625"><paramref name="millisecondsTimeout" /> est un nombre négatif différent de -1, qui représente un délai d’attente infini.</span><span class="sxs-lookup"><span data-stu-id="9bec6-625"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="9bec6-626">L’attente s’est arrêtée, car un thread s’est terminé sans libérer de mutex.</span><span class="sxs-lookup"><span data-stu-id="9bec6-626">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="9bec6-627">Cette exception n’est pas levée sur Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-627">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bec6-628">L'instance actuelle est un proxy transparent pour un <see cref="T:System.Threading.WaitHandle" /> dans un autre domaine d'application.</span><span class="sxs-lookup"><span data-stu-id="9bec6-628">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="9bec6-629">
          <see cref="T:System.TimeSpan" /> qui représente le nombre de millièmes de secondes à attendre ou <see cref="T:System.TimeSpan" /> qui représente -1 millième de seconde, pour attendre indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="9bec6-629">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="9bec6-630">Bloque le thread actuel jusqu'à ce que l'instance actuelle reçoive un signal, en utilisant une valeur <see cref="T:System.TimeSpan" /> pour spécifier l'intervalle de temps.</span><span class="sxs-lookup"><span data-stu-id="9bec6-630">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span></span></summary>
        <returns>
          <span data-ttu-id="9bec6-631"><see langword="true" /> si l'instance actuelle reçoit un signal ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-631"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-632">Si `timeout` est égal à zéro, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="9bec6-632">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="9bec6-633">Il teste l’état du handle d’attente et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="9bec6-633">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="9bec6-634">L’appelant de cette méthode bloque jusqu'à ce que l’instance actuelle reçoive un signal ou un délai d’attente se produit.</span><span class="sxs-lookup"><span data-stu-id="9bec6-634">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="9bec6-635">Utilisez cette méthode pour bloquer jusqu'à un <xref:System.Threading.WaitHandle> reçoive un signal d’un autre thread, tel qu’est générée lorsqu’une opération asynchrone se termine.</span><span class="sxs-lookup"><span data-stu-id="9bec6-635">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="9bec6-636">Pour plus d’informations, consultez le <xref:System.IAsyncResult> interface.</span><span class="sxs-lookup"><span data-stu-id="9bec6-636">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="9bec6-637">Substituez cette méthode pour personnaliser le comportement des classes dérivées.</span><span class="sxs-lookup"><span data-stu-id="9bec6-637">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="9bec6-638">La valeur maximale de `timeout` est <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-638">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="9bec6-639">Appel de cette surcharge de méthode est le même que d’appeler le <xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29> surcharge et en spécifiant `false` pour `exitContext`.</span><span class="sxs-lookup"><span data-stu-id="9bec6-639">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9bec6-640">L’instance actuelle a déjà été supprimée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-640">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9bec6-641"><paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d’attente infini.</span><span class="sxs-lookup"><span data-stu-id="9bec6-641"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span>  
  
 <span data-ttu-id="9bec6-642">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-642">-or-</span></span>  
  
 <span data-ttu-id="9bec6-643"><paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-643"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="9bec6-644">L’attente s’est arrêtée, car un thread s’est terminé sans libérer de mutex.</span><span class="sxs-lookup"><span data-stu-id="9bec6-644">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="9bec6-645">Cette exception n’est pas levée sur Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-645">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bec6-646">L'instance actuelle est un proxy transparent pour un <see cref="T:System.Threading.WaitHandle" /> dans un autre domaine d'application.</span><span class="sxs-lookup"><span data-stu-id="9bec6-646">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="9bec6-647">Nombre de millisecondes à attendre, ou <see cref="F:System.Threading.Timeout.Infinite" /> (-1) pour un délai d'attente infini.</span><span class="sxs-lookup"><span data-stu-id="9bec6-647">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="exitContext">
          <span data-ttu-id="9bec6-648"><see langword="true" /> pour quitter le domaine de synchronisation du contexte avant l'attente (dans le cas d'un contexte synchronisé) et l'acquérir à nouveau ensuite ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-648"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="9bec6-649">Bloque le thread actuel jusqu'à ce que le <see cref="T:System.Threading.WaitHandle" /> actuel reçoive un signal, en utilisant un entier signé 32 bits pour spécifier l'intervalle de temps et en spécifiant s'il faut quitter le domaine de synchronisation avant l'attente.</span><span class="sxs-lookup"><span data-stu-id="9bec6-649">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns>
          <span data-ttu-id="9bec6-650"><see langword="true" /> si l'instance actuelle reçoit un signal ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-650"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-651">Si `millisecondsTimeout` est égal à zéro, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="9bec6-651">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="9bec6-652">Il teste l’état du handle d’attente et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="9bec6-652">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="9bec6-653"><xref:System.Threading.AbandonedMutexException> est une nouveauté de .NET Framework version 2.0.</span><span class="sxs-lookup"><span data-stu-id="9bec6-653"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="9bec6-654">Dans les versions précédentes, le <xref:System.Threading.WaitHandle.WaitOne%2A> méthode renvoie `true` quand un mutex est abandonné.</span><span class="sxs-lookup"><span data-stu-id="9bec6-654">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="9bec6-655">Un mutex abandonné indique souvent une grave erreur de codage.</span><span class="sxs-lookup"><span data-stu-id="9bec6-655">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="9bec6-656">Dans le cas d’un mutex à l’échelle du système, il peut indiquer qu’une application a été arrêtée soudainement (par exemple, en utilisant le Gestionnaire des tâches de Windows).</span><span class="sxs-lookup"><span data-stu-id="9bec6-656">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="9bec6-657">L’exception contient des informations utiles pour le débogage.</span><span class="sxs-lookup"><span data-stu-id="9bec6-657">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="9bec6-658">L’appelant de cette méthode bloque jusqu'à ce que l’instance actuelle reçoive un signal ou un délai d’attente se produit.</span><span class="sxs-lookup"><span data-stu-id="9bec6-658">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="9bec6-659">Utilisez cette méthode pour bloquer jusqu'à un <xref:System.Threading.WaitHandle> reçoive un signal d’un autre thread, tel qu’est générée lorsqu’une opération asynchrone se termine.</span><span class="sxs-lookup"><span data-stu-id="9bec6-659">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="9bec6-660">Pour plus d’informations, consultez le <xref:System.IAsyncResult> interface.</span><span class="sxs-lookup"><span data-stu-id="9bec6-660">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="9bec6-661">Substituez cette méthode pour personnaliser le comportement des classes dérivées.</span><span class="sxs-lookup"><span data-stu-id="9bec6-661">Override this method to customize the behavior of derived classes.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="9bec6-662">Remarques sur la sortie de contexte</span><span class="sxs-lookup"><span data-stu-id="9bec6-662">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="9bec6-663">Le `exitContext` paramètre n’a aucun effet à moins que le <xref:System.Threading.WaitHandle.WaitOne%2A> méthode appelée à partir d’un contexte managé non défini par défaut.</span><span class="sxs-lookup"><span data-stu-id="9bec6-663">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="9bec6-664">Cela peut se produire si votre thread se trouve à l’intérieur d’un appel à une instance d’une classe dérivée de <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-664">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="9bec6-665">Même si vous exécutez actuellement une méthode sur une classe qui ne dérive pas de <xref:System.ContextBoundObject>, comme <xref:System.String>, vous pouvez être dans un contexte non défini par défaut si un <xref:System.ContextBoundObject> se trouve sur votre pile dans le domaine d’application actuel.</span><span class="sxs-lookup"><span data-stu-id="9bec6-665">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="9bec6-666">Lorsque votre code s’exécute dans un contexte non défini par défaut, en spécifiant `true` pour `exitContext` oblige le thread quitter le contexte managé non défini par défaut (autrement dit, pour effectuer la transition vers le contexte par défaut) avant d’exécuter le <xref:System.Threading.WaitHandle.WaitOne%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="9bec6-666">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="9bec6-667">Le thread retourne au contexte d’origine non défini par défaut après l’appel à la <xref:System.Threading.WaitHandle.WaitOne%2A> méthode se termine.</span><span class="sxs-lookup"><span data-stu-id="9bec6-667">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="9bec6-668">Cela peut être utile lorsque la classe liée au contexte comporte <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-668">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="9bec6-669">Dans ce cas, tous les appels aux membres de la classe sont automatiquement synchronisés, et le domaine de synchronisation est le corps de code pour la classe.</span><span class="sxs-lookup"><span data-stu-id="9bec6-669">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="9bec6-670">Si le code dans la pile des appels d’un membre appelle la <xref:System.Threading.WaitHandle.WaitOne%2A> (méthode) et spécifie `true` pour `exitContext`, le thread quitte le domaine de synchronisation, ce qui permet un thread qui est bloqué sur un appel à n’importe quel membre de l’objet pour continuer.</span><span class="sxs-lookup"><span data-stu-id="9bec6-670">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="9bec6-671">Lorsque la <xref:System.Threading.WaitHandle.WaitOne%2A> méthode est retournée, le thread qui a effectué l’appel doit attendre pour rentrer dans le domaine de synchronisation.</span><span class="sxs-lookup"><span data-stu-id="9bec6-671">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bec6-672">L’exemple suivant montre comment la <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> surcharge de méthode se comporte lorsqu’elle est appelée au sein d’un domaine de synchronisation.</span><span class="sxs-lookup"><span data-stu-id="9bec6-672">The following example shows how the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload behaves when it is called within a synchronization domain.</span></span> <span data-ttu-id="9bec6-673">Tout d’abord, un thread attend avec `exitContext` la valeur `false` et se bloque jusqu'à ce que le délai d’attente expire.</span><span class="sxs-lookup"><span data-stu-id="9bec6-673">First, a thread waits with `exitContext` set to `false` and blocks until the wait timeout expires.</span></span> <span data-ttu-id="9bec6-674">Un deuxième thread s’exécute après que le premier thread s’arrête et attend avec `exitContext` la valeur `true`.</span><span class="sxs-lookup"><span data-stu-id="9bec6-674">A second thread executes after the first thread terminates and waits with `exitContext` set to `true`.</span></span> <span data-ttu-id="9bec6-675">L’appel pour signaler le handle d’attente de ce deuxième thread n’est pas bloqué, et le thread se termine avant le délai d’attente.</span><span class="sxs-lookup"><span data-stu-id="9bec6-675">The call to signal the wait handle for this second thread is not blocked, and the thread completes before the wait timeout.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cpp/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cs/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9bec6-676">L’instance actuelle a déjà été supprimée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-676">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9bec6-677"><paramref name="millisecondsTimeout" /> est un nombre négatif différent de -1, qui représente un délai d’attente infini.</span><span class="sxs-lookup"><span data-stu-id="9bec6-677"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="9bec6-678">L’attente s’est arrêtée, car un thread s’est terminé sans libérer de mutex.</span><span class="sxs-lookup"><span data-stu-id="9bec6-678">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="9bec6-679">Cette exception n’est pas levée sur Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-679">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bec6-680">L'instance actuelle est un proxy transparent pour un <see cref="T:System.Threading.WaitHandle" /> dans un autre domaine d'application.</span><span class="sxs-lookup"><span data-stu-id="9bec6-680">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="9bec6-681">
          <see cref="T:System.TimeSpan" /> qui représente le nombre de millièmes de secondes à attendre ou <see cref="T:System.TimeSpan" /> qui représente -1 millième de seconde, pour attendre indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="9bec6-681">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="exitContext">
          <span data-ttu-id="9bec6-682"><see langword="true" /> pour quitter le domaine de synchronisation du contexte avant l'attente (dans le cas d'un contexte synchronisé) et l'acquérir à nouveau ensuite ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-682"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="9bec6-683">Bloque le thread actuel jusqu'à ce que l'instance actuelle reçoive un signal, en utilisant une valeur <see cref="T:System.TimeSpan" /> pour spécifier l'intervalle de temps et en spécifiant s'il faut quitter le domaine de synchronisation avant l'attente.</span><span class="sxs-lookup"><span data-stu-id="9bec6-683">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns>
          <span data-ttu-id="9bec6-684"><see langword="true" /> si l'instance actuelle reçoit un signal ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-684"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-685">Si `timeout` est égal à zéro, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="9bec6-685">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="9bec6-686">Il teste l’état du handle d’attente et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="9bec6-686">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="9bec6-687"><xref:System.Threading.AbandonedMutexException> est une nouveauté de .NET Framework version 2.0.</span><span class="sxs-lookup"><span data-stu-id="9bec6-687"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="9bec6-688">Dans les versions précédentes, le <xref:System.Threading.WaitHandle.WaitOne%2A> méthode renvoie `true` quand un mutex est abandonné.</span><span class="sxs-lookup"><span data-stu-id="9bec6-688">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="9bec6-689">Un mutex abandonné indique souvent une grave erreur de codage.</span><span class="sxs-lookup"><span data-stu-id="9bec6-689">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="9bec6-690">Dans le cas d’un mutex à l’échelle du système, il peut indiquer qu’une application a été arrêtée soudainement (par exemple, en utilisant le Gestionnaire des tâches de Windows).</span><span class="sxs-lookup"><span data-stu-id="9bec6-690">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="9bec6-691">L’exception contient des informations utiles pour le débogage.</span><span class="sxs-lookup"><span data-stu-id="9bec6-691">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="9bec6-692">L’appelant de cette méthode bloque jusqu'à ce que l’instance actuelle reçoive un signal ou un délai d’attente se produit.</span><span class="sxs-lookup"><span data-stu-id="9bec6-692">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="9bec6-693">Utilisez cette méthode pour bloquer jusqu'à un <xref:System.Threading.WaitHandle> reçoive un signal d’un autre thread, tel qu’est générée lorsqu’une opération asynchrone se termine.</span><span class="sxs-lookup"><span data-stu-id="9bec6-693">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="9bec6-694">Pour plus d’informations, consultez le <xref:System.IAsyncResult> interface.</span><span class="sxs-lookup"><span data-stu-id="9bec6-694">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="9bec6-695">Substituez cette méthode pour personnaliser le comportement des classes dérivées.</span><span class="sxs-lookup"><span data-stu-id="9bec6-695">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="9bec6-696">La valeur maximale de `timeout` est <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-696">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="9bec6-697">Remarques sur la sortie de contexte</span><span class="sxs-lookup"><span data-stu-id="9bec6-697">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="9bec6-698">Le `exitContext` paramètre n’a aucun effet à moins que le <xref:System.Threading.WaitHandle.WaitOne%2A> méthode appelée à partir d’un contexte managé non défini par défaut.</span><span class="sxs-lookup"><span data-stu-id="9bec6-698">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="9bec6-699">Cela peut se produire si votre thread se trouve à l’intérieur d’un appel à une instance d’une classe dérivée de <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-699">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="9bec6-700">Même si vous exécutez actuellement une méthode sur une classe qui ne dérive pas de <xref:System.ContextBoundObject>, comme <xref:System.String>, vous pouvez être dans un contexte non défini par défaut si un <xref:System.ContextBoundObject> se trouve sur votre pile dans le domaine d’application actuel.</span><span class="sxs-lookup"><span data-stu-id="9bec6-700">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="9bec6-701">Lorsque votre code s’exécute dans un contexte non défini par défaut, en spécifiant `true` pour `exitContext` oblige le thread quitter le contexte managé non défini par défaut (autrement dit, pour effectuer la transition vers le contexte par défaut) avant d’exécuter le <xref:System.Threading.WaitHandle.WaitOne%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="9bec6-701">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="9bec6-702">Le thread retourne au contexte d’origine non défini par défaut après l’appel à la <xref:System.Threading.WaitHandle.WaitOne%2A> méthode se termine.</span><span class="sxs-lookup"><span data-stu-id="9bec6-702">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="9bec6-703">Cela peut être utile lorsque la classe liée au contexte comporte <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span><span class="sxs-lookup"><span data-stu-id="9bec6-703">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="9bec6-704">Dans ce cas, tous les appels aux membres de la classe sont automatiquement synchronisés, et le domaine de synchronisation est le corps de code pour la classe.</span><span class="sxs-lookup"><span data-stu-id="9bec6-704">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="9bec6-705">Si le code dans la pile des appels d’un membre appelle la <xref:System.Threading.WaitHandle.WaitOne%2A> (méthode) et spécifie `true` pour `exitContext`, le thread quitte le domaine de synchronisation, ce qui permet un thread qui est bloqué sur un appel à n’importe quel membre de l’objet pour continuer.</span><span class="sxs-lookup"><span data-stu-id="9bec6-705">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="9bec6-706">Lorsque la <xref:System.Threading.WaitHandle.WaitOne%2A> méthode est retournée, le thread qui a effectué l’appel doit attendre pour rentrer dans le domaine de synchronisation.</span><span class="sxs-lookup"><span data-stu-id="9bec6-706">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bec6-707">L’exemple de code suivant montre comment utiliser un handle d’attente pour conserver un processus de s’arrêter alors qu’il attend la fin de l’exécution d’un thread d’arrière-plan.</span><span class="sxs-lookup"><span data-stu-id="9bec6-707">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9bec6-708">L’instance actuelle a déjà été supprimée.</span><span class="sxs-lookup"><span data-stu-id="9bec6-708">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9bec6-709"><paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d’attente infini.</span><span class="sxs-lookup"><span data-stu-id="9bec6-709"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span>  
  
 <span data-ttu-id="9bec6-710">- ou -</span><span class="sxs-lookup"><span data-stu-id="9bec6-710">-or-</span></span>  
  
 <span data-ttu-id="9bec6-711"><paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="9bec6-711"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="9bec6-712">L’attente s’est arrêtée, car un thread s’est terminé sans libérer de mutex.</span><span class="sxs-lookup"><span data-stu-id="9bec6-712">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="9bec6-713">Cette exception n’est pas levée sur Windows 98 ou Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="9bec6-713">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9bec6-714">L'instance actuelle est un proxy transparent pour un <see cref="T:System.Threading.WaitHandle" /> dans un autre domaine d'application.</span><span class="sxs-lookup"><span data-stu-id="9bec6-714">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitTimeout">
      <MemberSignature Language="C#" Value="public const int WaitTimeout = 258;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 WaitTimeout = (258)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.WaitTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Const WaitTimeout As Integer  = 258" />
      <MemberSignature Language="C++ CLI" Value="public: int WaitTimeout = 258;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>258</MemberValue>
      <Docs>
        <summary><span data-ttu-id="9bec6-715">Indique que le délai fixé pour une opération <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> a été dépassé sans qu'aucun des handles d'attente n'ait été signalé.</span><span class="sxs-lookup"><span data-stu-id="9bec6-715">Indicates that a <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> operation timed out before any of the wait handles were signaled.</span></span> <span data-ttu-id="9bec6-716">Ce champ est constant.</span><span class="sxs-lookup"><span data-stu-id="9bec6-716">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bec6-717">Ce champ est une des valeurs de retour possibles de `WaitAny`.</span><span class="sxs-lookup"><span data-stu-id="9bec6-717">This field is one of the possible return values of `WaitAny`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9bec6-718">L’exemple de code suivant montre comment utiliser le pool de threads pour la recherche simultanée d’un fichier sur plusieurs disques.</span><span class="sxs-lookup"><span data-stu-id="9bec6-718">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="9bec6-719">Pour des raisons d’espace, uniquement le répertoire racine de chaque disque est recherché.</span><span class="sxs-lookup"><span data-stu-id="9bec6-719">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>