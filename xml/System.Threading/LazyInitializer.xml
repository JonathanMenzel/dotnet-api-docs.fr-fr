<Type Name="LazyInitializer" FullName="System.Threading.LazyInitializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d1c692878647ef3be78c25566da40339bbd95b07" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52251088" /></Metadata><TypeSignature Language="C#" Value="public static class LazyInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LazyInitializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Class LazyInitializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class LazyInitializer abstract sealed" />
  <TypeSignature Language="F#" Value="type LazyInitializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="43a4e-101">Fournit des routines d'initialisation tardives.</span><span class="sxs-lookup"><span data-stu-id="43a4e-101">Provides lazy initialization routines.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43a4e-102">Ces routines évitent d’avoir à allouer une instance d’initialisation tardive dédiée, au lieu d’utiliser les références pour vous assurer de cibles ont été initialisées lorsqu’elles sont consultées.</span><span class="sxs-lookup"><span data-stu-id="43a4e-102">These routines avoid needing to allocate a dedicated, lazy-initialization instance, instead using references to ensure targets have been initialized as they are accessed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43a4e-103">L’exemple suivant montre comment utiliser EnsureInitialized pour initialiser tardivement une valeur à l’aide d’une valeur booléenne pour déterminer si l’initialisation a déjà eu lieu et un objet à utiliser en tant que le verrou d’exclusion mutuelle.</span><span class="sxs-lookup"><span data-stu-id="43a4e-103">The following example demonstrates how to use EnsureInitialized to lazily initialize a value using a Boolean value to track whether initialization has already happened and an object to use as the mutual exclusion lock.</span></span>  
  
```vb  
Dim _data As ExpensiveData = Nothing  
Dim _dataInitialized As Boolean = False  
Dim _dataLock As Object = Nothing  
'    ...  
Dim name = LazyInitializer.EnsureInitialized(_data, _dataInitialized, _dataLock)  
```  
  
```csharp  
ExpensiveData _data = null;  
                     bool _dataInitialized = false;  
                     object _dataLock = new object();  
                  //  ...  
  
                    ExpensiveData dataToUse = LazyInitializer.EnsureInitialized(ref _data, ref _dataInitialized, ref _dataLock);  
```  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="43a4e-104">Les méthodes de <see cref="T:System.Threading.LazyInitializer" /> sont thread-safe et peuvent être appelés à partir de plusieurs threads simultanément.</span><span class="sxs-lookup"><span data-stu-id="43a4e-104">The methods of <see cref="T:System.Threading.LazyInitializer" /> are thread-safe and may be called from multiple threads concurrently.</span></span></threadsafe>
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="43a4e-105">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="43a4e-105">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="EnsureInitialized&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="43a4e-106">Initialise un type cible si ce n'est pas déjà fait.</span><span class="sxs-lookup"><span data-stu-id="43a4e-106">Initializes a target type if it hasn't already been initialized.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="43a4e-107">Type de la référence à initialiser.</span><span class="sxs-lookup"><span data-stu-id="43a4e-107">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="43a4e-108">Référence de type <c>T</c> à initialiser si elle ne l’a pas déjà été.</span><span class="sxs-lookup"><span data-stu-id="43a4e-108">A reference of type <c>T</c> to initialize if it has not already been initialized.</span></span></param>
        <summary><span data-ttu-id="43a4e-109">Initialise un type référence cible avec le constructeur par défaut du type s'il n'a pas déjà été initialisé.</span><span class="sxs-lookup"><span data-stu-id="43a4e-109">Initializes a target reference type with the type's default constructor if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="43a4e-110">Référence initialisée de type <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="43a4e-110">The initialized reference of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43a4e-111">Cette méthode peut uniquement être utilisée sur les types référence.</span><span class="sxs-lookup"><span data-stu-id="43a4e-111">This method may only be used on reference types.</span></span> <span data-ttu-id="43a4e-112">Pour garantir l’initialisation des types valeur, consultez les autres surcharges de EnsureInitialized.</span><span class="sxs-lookup"><span data-stu-id="43a4e-112">To ensure initialization of value types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="43a4e-113">Cette méthode peut être utilisée simultanément par plusieurs threads pour initialiser `target`.</span><span class="sxs-lookup"><span data-stu-id="43a4e-113">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="43a4e-114">Dans le cas où plusieurs threads accèdent simultanément, cette méthode plusieurs instances de `T` peuvent être créées, mais qu’un seul sera stockée dans `target`.</span><span class="sxs-lookup"><span data-stu-id="43a4e-114">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="43a4e-115">Dans une telle situation, cette méthode ne supprimera pas les objets qui n’étaient pas stockées.</span><span class="sxs-lookup"><span data-stu-id="43a4e-115">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="43a4e-116">Si ces objets doivent être supprimés, c’est à l’appelant pour déterminer si un objet n’a pas été utilisé et dispose de l’objet de manière appropriée.</span><span class="sxs-lookup"><span data-stu-id="43a4e-116">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="43a4e-117">Autorisations pour accéder au constructeur de type <paramref name="T" /> manquant.</span><span class="sxs-lookup"><span data-stu-id="43a4e-117">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="43a4e-118">Le type <paramref name="T" /> n'a pas de constructeur par défaut.</span><span class="sxs-lookup"><span data-stu-id="43a4e-118">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="43a4e-119">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="43a4e-119">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="43a4e-120">Type référence de la référence à initialiser.</span><span class="sxs-lookup"><span data-stu-id="43a4e-120">The reference type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="43a4e-121">Référence de type <c>T</c> à initialiser si elle ne l’a pas déjà été.</span><span class="sxs-lookup"><span data-stu-id="43a4e-121">The reference of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="43a4e-122">Fonction appelée pour initialiser la référence.</span><span class="sxs-lookup"><span data-stu-id="43a4e-122">The function that is called to initialize the reference.</span></span></param>
        <summary><span data-ttu-id="43a4e-123">Initialise un type référence cible à l'aide d'une fonction spécifiée s'il n'a pas déjà été initialisé.</span><span class="sxs-lookup"><span data-stu-id="43a4e-123">Initializes a target reference type by using a specified function if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="43a4e-124">Valeur initialisée de type <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="43a4e-124">The initialized value of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43a4e-125">Cette méthode peut uniquement être utilisée sur les types référence, et `valueFactory` peut ne pas retourner une référence null (Nothing en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="43a4e-125">This method may only be used on reference types, and `valueFactory` may not return a null reference (Nothing in Visual Basic).</span></span> <span data-ttu-id="43a4e-126">Pour garantir l’initialisation des types valeur ou pour autoriser les types de référence null, consultez les autres surcharges de EnsureInitialized.</span><span class="sxs-lookup"><span data-stu-id="43a4e-126">To ensure initialization of value types or to allow null reference types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="43a4e-127">Cette méthode peut être utilisée simultanément par plusieurs threads pour initialiser `target`.</span><span class="sxs-lookup"><span data-stu-id="43a4e-127">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="43a4e-128">Dans le cas où plusieurs threads accèdent simultanément, cette méthode plusieurs instances de `T` peuvent être créées, mais qu’un seul sera stockée dans `target`.</span><span class="sxs-lookup"><span data-stu-id="43a4e-128">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="43a4e-129">Dans une telle situation, cette méthode ne supprimera pas les objets qui n’étaient pas stockées.</span><span class="sxs-lookup"><span data-stu-id="43a4e-129">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="43a4e-130">Si ces objets doivent être supprimés, c’est à l’appelant pour déterminer si un objet n’a pas été utilisé et dispose de l’objet de manière appropriée.</span><span class="sxs-lookup"><span data-stu-id="43a4e-130">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="43a4e-131">Le type <paramref name="T" /> n'a pas de constructeur par défaut.</span><span class="sxs-lookup"><span data-stu-id="43a4e-131">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="43a4e-132"><paramref name="valueFactory" /> a retourné null (Nothing en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="43a4e-132"><paramref name="valueFactory" /> returned null (Nothing in Visual Basic).</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="43a4e-133">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="43a4e-133">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  *  -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="43a4e-134">Type de la référence à initialiser.</span><span class="sxs-lookup"><span data-stu-id="43a4e-134">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="43a4e-135">Référence ou valeur de type <c>T</c> à initialiser si elle ne l’a pas déjà été.</span><span class="sxs-lookup"><span data-stu-id="43a4e-135">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="initialized"><span data-ttu-id="43a4e-136">Référence à une valeur booléenne qui détermine si la cible a déjà été initialisée.</span><span class="sxs-lookup"><span data-stu-id="43a4e-136">A reference to a Boolean value that determines whether the target has already been initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="43a4e-137">Référence à un objet utilisé comme verrou mutuellement exclusif pour l'initialisation de <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="43a4e-137">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />.</span></span> <span data-ttu-id="43a4e-138">Si <paramref name="syncLock" /> est <see langword="null" /> null, un nouvel objet est instancié.</span><span class="sxs-lookup"><span data-stu-id="43a4e-138">If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <summary><span data-ttu-id="43a4e-139">Initialise un type référence cible ou un type valeur avec son constructeur par défaut s'il n'a pas déjà été initialisé.</span><span class="sxs-lookup"><span data-stu-id="43a4e-139">Initializes a target reference or value type with its default constructor if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="43a4e-140">Valeur initialisée de type <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="43a4e-140">The initialized value of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43a4e-141">Si `intialized` est spécifié comme true, aucune initialisation supplémentaire ne se produit.</span><span class="sxs-lookup"><span data-stu-id="43a4e-141">If `intialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="43a4e-142">Autorisations pour accéder au constructeur de type <paramref name="T" /> manquant.</span><span class="sxs-lookup"><span data-stu-id="43a4e-142">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="43a4e-143">Le type <paramref name="T" /> n'a pas de constructeur par défaut.</span><span class="sxs-lookup"><span data-stu-id="43a4e-143">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="43a4e-144">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="43a4e-144">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref object syncLock, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">To be added.</param>
        <param name="syncLock">To be added.</param>
        <param name="valueFactory">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock, Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  *  * Func&lt;'T&gt; -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="43a4e-145">Type de la référence à initialiser.</span><span class="sxs-lookup"><span data-stu-id="43a4e-145">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="43a4e-146">Référence ou valeur de type <c>T</c> à initialiser si elle ne l’a pas déjà été.</span><span class="sxs-lookup"><span data-stu-id="43a4e-146">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="initialized"><span data-ttu-id="43a4e-147">Référence à une valeur booléenne qui détermine si la cible a déjà été initialisée.</span><span class="sxs-lookup"><span data-stu-id="43a4e-147">A reference to a Boolean value that determines whether the target has already been initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="43a4e-148">Référence à un objet utilisé comme verrou mutuellement exclusif pour l'initialisation de <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="43a4e-148">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />.</span></span> <span data-ttu-id="43a4e-149">Si <paramref name="syncLock" /> est <see langword="null" /> null, un nouvel objet est instancié.</span><span class="sxs-lookup"><span data-stu-id="43a4e-149">If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="43a4e-150">Fonction appelée pour initialiser la référence ou la valeur.</span><span class="sxs-lookup"><span data-stu-id="43a4e-150">The function that is called to initialize the reference or value.</span></span></param>
        <summary><span data-ttu-id="43a4e-151">Initialise un type référence cible ou un type valeur à l'aide d'une fonction spécifiée s'il n'a pas déjà été initialisé.</span><span class="sxs-lookup"><span data-stu-id="43a4e-151">Initializes a target reference or value type by using a specified function if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="43a4e-152">Valeur initialisée de type <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="43a4e-152">The initialized value of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43a4e-153">Si `intialized` est spécifié comme true, aucune initialisation supplémentaire ne se produit.</span><span class="sxs-lookup"><span data-stu-id="43a4e-153">If `intialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="43a4e-154">Autorisations pour accéder au constructeur de type <paramref name="T" /> manquant.</span><span class="sxs-lookup"><span data-stu-id="43a4e-154">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="43a4e-155">Le type <paramref name="T" /> n'a pas de constructeur par défaut.</span><span class="sxs-lookup"><span data-stu-id="43a4e-155">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="43a4e-156">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="43a4e-156">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>