<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ThreadLocal`1.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b0866e1f64c7260da8823cd7e69e0b2646eebf23.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b0866e1f64c7260da8823cd7e69e0b2646eebf23</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadLocal`1">
          <source>Specifies the type of data stored per-thread.</source>
          <target state="translated">Spécifie le type de données stockées par thread.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadLocal`1">
          <source>Provides thread-local storage of data.</source>
          <target state="translated">Fournit le stockage local des données de thread.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadLocal`1">
          <source>The following example shows how to use <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph>:</source>
          <target state="translated">L'exemple suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> :</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadLocal`1">
          <source>With the exception of <ph id="ph1">&lt;see cref="M:System.Threading.ThreadLocal`1.Dispose" /&gt;</ph>, all public and protected members of <ph id="ph2">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads.</source>
          <target state="translated">À l’exception de <ph id="ph1">&lt;see cref="M:System.Threading.ThreadLocal`1.Dispose" /&gt;</ph>, tous les publics et les membres protégés des <ph id="ph2">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> sont thread-safe et peuvent être utilisés simultanément à partir de plusieurs threads.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadLocal`1">
          <source>The value returned for the <ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> and <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.IsValueCreated" /&gt;</ph> properties is specific for the thread on which the property is accessed.</source>
          <target state="translated">La valeur retournée pour le <ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> et <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.IsValueCreated" /&gt;</ph> propriétés est spécifique au thread sur lequel la propriété est accessible.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadLocal`1">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance.</source>
          <target state="translated">Initialise une instance <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.#ctor">
          <source>Initializes the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance.</source>
          <target state="translated">Initialise l’instance <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.#ctor">
          <source>The default value of <ph id="ph1">`T`</ph> is used to initialize the instance when <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601.Value%2A&gt;</ph> is accessed for the first time.</source>
          <target state="translated">La valeur par défaut <ph id="ph1">`T`</ph> est utilisé pour initialiser l’instance lorsque <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601.Value%2A&gt;</ph> est accessible pour la première fois.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.#ctor">
          <source>This constructor is equivalent to calling the <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.%23ctor%28System.Boolean%29&gt;</ph> constructor with a value of <ph id="ph2">`false`</ph> for the <ph id="ph3">`trackAllValues`</ph> argument.</source>
          <target state="translated">Ce constructeur équivaut à appeler le <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.%23ctor%28System.Boolean%29&gt;</ph> constructeur avec une valeur de <ph id="ph2">`false`</ph> pour la <ph id="ph3">`trackAllValues`</ph> argument.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to track all values set on the instance and expose them through the <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.Values" /&gt;</ph> property; <ph id="ph3">&lt;see langword="false" /&gt;</ph> otherwise.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour suivre toutes les valeurs définies dans l’instance et les exposer par le biais de la propriété <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.Values" /&gt;</ph> ; <ph id="ph3">&lt;see langword="false" /&gt;</ph> sinon.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Boolean)">
          <source>Initializes the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance and specifies whether all values are accessible from any thread.</source>
          <target state="translated">Initialise l’instance <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> et spécifie si toutes les valeurs sont accessibles à partir de n’importe quel thread.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Boolean)">
          <source>If <ph id="ph1">`trackAllValues`</ph> is <ph id="ph2">`false`</ph>, only the value of this instance for the current thread is accessible.</source>
          <target state="translated">Si <ph id="ph1">`trackAllValues`</ph> est <ph id="ph2">`false`</ph>, seule la valeur de cette instance pour le thread actuel est accessible.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Boolean)">
          <source>Attempting to use the <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Values%2A&gt;</ph> property to retrieve all values throws an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> exception.</source>
          <target state="translated">Essayez d’utiliser le <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Values%2A&gt;</ph> lève une exception de valeurs de propriété pour récupérer tous les un <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> exception.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0})">
          <source>The  <ph id="ph1">&lt;see cref="T:System.Func`1" /&gt;</ph> invoked to produce a lazily-initialized value when an attempt is made to retrieve <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> without it having been previously initialized.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Func`1" /&gt;</ph> appelé pour produire une valeur initialisée tardivement quand une tentative est effectuée pour récupérer <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> sans qu’il ait été précédemment initialisé.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0})">
          <source>Initializes the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance with the specified <ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> function.</source>
          <target state="translated">Initialise l'instance de <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> avec la fonction <ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> spécifiée.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0})">
          <source><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> is a null reference (Nothing in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> est une référence Null (Nothing en Visual Basic).</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Func`1" /&gt;</ph> invoked to produce a lazily-initialized value when an attempt is made to retrieve <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> without it having been previously initialized.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Func`1" /&gt;</ph> appelé pour produire une valeur initialisée tardivement lorsqu'une tentative est effectuée pour récupérer <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> sans qu'il ait été précédemment initialisé.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to track all values set on the instance and expose them through the <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.Values" /&gt;</ph> property; <ph id="ph3">&lt;see langword="false" /&gt;</ph> otherwise.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour suivre toutes les valeurs définies dans l’instance et les exposer par le biais de la propriété <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.Values" /&gt;</ph> ; <ph id="ph3">&lt;see langword="false" /&gt;</ph> sinon.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)">
          <source>Initializes the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance with the specified <ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> function and a flag that indicates whether all values are accessible from any thread.</source>
          <target state="translated">Initialise l’instance <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> avec la fonction <ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> spécifiée et un indicateur qui indique si toutes les valeurs sont accessibles à partir de n’importe quel thread.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)">
          <source>If <ph id="ph1">`trackAllValues`</ph> is <ph id="ph2">`false`</ph>, only the value of this instance for the current thread is accessible.</source>
          <target state="translated">Si <ph id="ph1">`trackAllValues`</ph> est <ph id="ph2">`false`</ph>, seule la valeur de cette instance pour le thread actuel est accessible.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)">
          <source>Attempting to use the <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Values%2A&gt;</ph> property to retrieve all values throws an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> exception.</source>
          <target state="translated">Essayez d’utiliser le <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Values%2A&gt;</ph> lève une exception de valeurs de propriété pour récupérer tous les un <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> exception.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> is a <ph id="ph2">&lt;see langword="null" /&gt;</ph> reference (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> est une référence <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph> en Visual Basic).</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadLocal`1">
          <source>Releases the resources used by this <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance.</source>
          <target state="translated">Libère les ressources utilisées par cette instance de <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> class.</source>
          <target state="translated">Libère toutes les ressources utilisées par l'instance actuelle de la classe <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph>.</source>
          <target state="translated">Appelez la méthode <ph id="ph1">`Dispose`</ph> une fois que vous avez terminé d'utiliser <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> in an unusable state.</source>
          <target state="translated">La méthode <ph id="ph1">`Dispose`</ph> rend le <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> inutilisable.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> was occupying.</source>
          <target state="translated">Après avoir appelé <ph id="ph1">`Dispose`</ph>, vous devez libérer toutes les références à la <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> pour que le garbage collector puisse récupérer la mémoire qui le <ph id="ph3">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> occupée.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>de nettoyage des ressources non managées<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> et <bpt id="p2">[</bpt>implémentant une méthode de suppression<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph>.</source>
          <target state="translated">Appelez toujours <ph id="ph1">`Dispose`</ph> avant de libérer votre dernière référence à <ph id="ph2">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">Sinon, les ressources utilisées ne seront pas libérées tant que le garbage collector n'aura pas appelé la méthode <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph> de l'objet <ph id="ph2">`Finalize`</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.Dispose(System.Boolean)">
          <source>A Boolean value that indicates whether this method is being called due to a call to <ph id="ph1">&lt;see cref="M:System.Threading.ThreadLocal`1.Dispose" /&gt;</ph>.</source>
          <target state="translated">Valeur booléenne qui indique si cette méthode est appelée en raison d'un appel à <ph id="ph1">&lt;see cref="M:System.Threading.ThreadLocal`1.Dispose" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.Dispose(System.Boolean)">
          <source>Releases the resources used by this <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance.</source>
          <target state="translated">Libère les ressources utilisées par cette instance de <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.Dispose(System.Boolean)">
          <source>Unlike most of the members of <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph>, this method is not thread-safe.</source>
          <target state="translated">Contrairement à la plupart des membres de <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601&gt;</ph>, cette méthode n’est pas thread-safe.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.Finalize">
          <source>Releases the resources used by this <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance.</source>
          <target state="translated">Libère les ressources utilisées par cette instance de <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadLocal`1.IsValueCreated">
          <source>Gets whether <ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> is initialized on the current thread.</source>
          <target state="translated">Obtient une valeur qui indique si <ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> est initialisé sur le thread actuel.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadLocal`1.IsValueCreated">
          <source>true if <ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> is initialized on the current thread; otherwise false.</source>
          <target state="translated">True si <ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> est initialisé sur le thread actuel ; sinon, false.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadLocal`1.IsValueCreated">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance has been disposed.</source>
          <target state="translated">L’instance <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> a été supprimée.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.ToString">
          <source>Creates and returns a string representation of this instance for the current thread.</source>
          <target state="translated">Crée et retourne une représentation sous forme de chaîne de cette instance pour le thread actuel.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.ToString">
          <source>The result of calling <ph id="ph1">&lt;see cref="M:System.Object.ToString" /&gt;</ph> on the <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph>.</source>
          <target state="translated">Résultat de l'appel à <ph id="ph1">&lt;see cref="M:System.Object.ToString" /&gt;</ph> sur <ph id="ph2">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadLocal`1.ToString">
          <source>Calling this method forces initialization for the current thread, as is the case with accessing <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Value%2A&gt;</ph> directly.</source>
          <target state="translated">Appel de cette méthode force l’initialisation pour le thread actuel, comme dans le cas de l’accès <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Value%2A&gt;</ph> directement.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.ToString">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance has been disposed.</source>
          <target state="translated">L’instance <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> a été supprimée.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.ToString">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> for the current thread is a null reference (Nothing in Visual Basic).</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> du thread actuel est une référence null (Nothing en Visual Basic).</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.ToString">
          <source>The initialization function attempted to reference <ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> recursively.</source>
          <target state="translated">La fonction d'initialisation a tenté de référencer <ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> de manière récursive.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadLocal`1.ToString">
          <source>No default constructor is provided and no value factory is supplied.</source>
          <target state="translated">Aucun constructeur par défaut n'est fourni et aucune fabrique de valeurs n'est fournie.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadLocal`1.Value">
          <source>Gets or sets the value of this instance for the current thread.</source>
          <target state="translated">Obtient ou définit la valeur de cette instance pour le thread actuel.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadLocal`1.Value">
          <source>Returns an instance of the object that this ThreadLocal is responsible for initializing.</source>
          <target state="translated">Retourne une instance de l'objet dont ce ThreadLocal est chargé de l'initialisation.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadLocal`1.Value">
          <source>If this instance was not previously initialized for the current thread, accessing <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Value%2A&gt;</ph> will attempt to initialize it.</source>
          <target state="translated">Si cette instance n’a pas été précédemment initialisée pour le thread actuel, l’accès à <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Value%2A&gt;</ph> tente d’initialiser.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadLocal`1.Value">
          <source>If an initialization function was supplied during the construction, that initialization will happen by invoking the function to retrieve the initial value for <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Value%2A&gt;</ph>.</source>
          <target state="translated">Si une fonction d’initialisation a été fournie lors de la construction, cette initialisation s’effectuera en appelant la fonction pour récupérer la valeur initiale pour <ph id="ph1">&lt;xref:System.Threading.ThreadLocal%601.Value%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadLocal`1.Value">
          <source>Otherwise, the default value of will be used.</source>
          <target state="translated">Sinon, la valeur par défaut servira.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadLocal`1.Value">
          <source>If an exception is thrown, that exception is cached and thrown on each subsequent access of the property.</source>
          <target state="translated">Si une exception est levée, cette exception est mis en cache et levée à chaque accès suivant de la propriété.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadLocal`1.Value">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance has been disposed.</source>
          <target state="translated">L’instance <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> a été supprimée.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadLocal`1.Value">
          <source>The initialization function attempted to reference <ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> recursively.</source>
          <target state="translated">La fonction d'initialisation a tenté de référencer <ph id="ph1">&lt;see cref="P:System.Threading.ThreadLocal`1.Value" /&gt;</ph> de manière récursive.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadLocal`1.Value">
          <source>No default constructor is provided and no value factory is supplied.</source>
          <target state="translated">Aucun constructeur par défaut n'est fourni et aucune fabrique de valeurs n'est fournie.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadLocal`1.Values">
          <source>Gets a list for all of the values currently stored by all of the threads that have accessed this instance.</source>
          <target state="translated">Obtient une liste de toutes les valeurs actuellement stockées par tous les threads qui ont accès à cette instance.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadLocal`1.Values">
          <source>A list for all of the values currently stored by all of the threads that have accessed this instance.</source>
          <target state="translated">Liste de toutes les valeurs actuellement stockées par tous les threads qui ont accès à cette instance.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadLocal`1.Values">
          <source>Values stored by all threads are not available because this instance was initialized with the <ph id="ph1">&lt;paramref name="trackAllValues" /&gt;</ph> argument set to <ph id="ph2">&lt;see langword="false" /&gt;</ph> in the call to a class constructor.</source>
          <target state="translated">Les valeurs stockées par tous les threads ne sont pas disponibles, car cette instance a été initialisée avec l’argument <ph id="ph1">&lt;paramref name="trackAllValues" /&gt;</ph> défini sur <ph id="ph2">&lt;see langword="false" /&gt;</ph> dans l’appel à un constructeur de classe.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadLocal`1.Values">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> instance has been disposed.</source>
          <target state="translated">L’instance <ph id="ph1">&lt;see cref="T:System.Threading.ThreadLocal`1" /&gt;</ph> a été supprimée.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>