<Type Name="ThreadLocal&lt;T&gt;" FullName="System.Threading.ThreadLocal&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="966e361f6e657dd282f5dbeb1f81887de7e4d8cf" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57918101" /></Metadata><TypeSignature Language="C#" Value="public class ThreadLocal&lt;T&gt; : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ThreadLocal`1&lt;T&gt; extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadLocal`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadLocal(Of T)&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ThreadLocal : IDisposable" />
  <TypeSignature Language="F#" Value="type ThreadLocal&lt;'T&gt; = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsValueCreated={IsValueCreated}, Value={ValueForDebugDisplay}, Count={ValuesCountForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.SystemThreading_ThreadLocalDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsValueCreated={IsValueCreated}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="295fa-101">Spécifie le type de données stockées par thread.</span><span class="sxs-lookup"><span data-stu-id="295fa-101">Specifies the type of data stored per-thread.</span></span></typeparam>
    <summary><span data-ttu-id="295fa-102">Fournit le stockage local des données de thread.</span><span class="sxs-lookup"><span data-stu-id="295fa-102">Provides thread-local storage of data.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="295fa-103">L'exemple suivant montre comment utiliser <xref:System.Threading.ThreadLocal%601> :</span><span class="sxs-lookup"><span data-stu-id="295fa-103">The following example shows how to use <xref:System.Threading.ThreadLocal%601>:</span></span>  
  
 [!code-csharp[System.Threading.ThreadLocal#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.threadlocal/cs/threadlocal.cs#01)]
 [!code-vb[System.Threading.ThreadLocal#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.threadlocal/vb/threadlocal.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="295fa-104">À l’exception de <see cref="M:System.Threading.ThreadLocal`1.Dispose" />, tous les publics et les membres protégés des <see cref="T:System.Threading.ThreadLocal`1" /> sont thread-safe et peuvent être utilisés simultanément par plusieurs threads.</span><span class="sxs-lookup"><span data-stu-id="295fa-104">With the exception of <see cref="M:System.Threading.ThreadLocal`1.Dispose" />, all public and protected members of <see cref="T:System.Threading.ThreadLocal`1" /> are thread-safe and may be used concurrently from multiple threads.</span></span> <span data-ttu-id="295fa-105">La valeur retournée pour le <see cref="P:System.Threading.ThreadLocal`1.Value" /> et <see cref="P:System.Threading.ThreadLocal`1.IsValueCreated" /> propriétés est spécifique au thread sur lequel la propriété est accessible.</span><span class="sxs-lookup"><span data-stu-id="295fa-105">The value returned for the <see cref="P:System.Threading.ThreadLocal`1.Value" /> and <see cref="P:System.Threading.ThreadLocal`1.IsValueCreated" /> properties is specific for the thread on which the property is accessed.</span></span></threadsafe>
    <altmember cref="T:System.Lazy`1" />
    <altmember cref="T:System.Threading.AsyncLocal`1" />
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="295fa-106">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="295fa-106">Lazy Initialization</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/8cd68620-dcc3-4f20-8835-c728a6820e71"><span data-ttu-id="295fa-107">Comment : effectuer une initialisation tardive d'objets</span><span class="sxs-lookup"><span data-stu-id="295fa-107">How to: Perform Lazy Initialization of Objects</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="295fa-108">Initialise une instance <see cref="T:System.Threading.ThreadLocal`1" />.</span><span class="sxs-lookup"><span data-stu-id="295fa-108">Initializes a <see cref="T:System.Threading.ThreadLocal`1" /> instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadLocal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadLocal`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ThreadLocal();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="295fa-109">Initialise l’instance <see cref="T:System.Threading.ThreadLocal`1" />.</span><span class="sxs-lookup"><span data-stu-id="295fa-109">Initializes the <see cref="T:System.Threading.ThreadLocal`1" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="295fa-110">La valeur par défaut `T` est utilisée pour initialiser l’instance lorsque <xref:System.Threading.ThreadLocal%601.Value%2A> est accessible pour la première fois.</span><span class="sxs-lookup"><span data-stu-id="295fa-110">The default value of `T` is used to initialize the instance when <xref:System.Threading.ThreadLocal%601.Value%2A> is accessed for the first time.</span></span>  
  
 <span data-ttu-id="295fa-111">Ce constructeur est équivalent à l’appel le <xref:System.Threading.ThreadLocal%601.%23ctor%28System.Boolean%29> constructeur avec une valeur de `false` pour le `trackAllValues` argument.</span><span class="sxs-lookup"><span data-stu-id="295fa-111">This constructor is equivalent to calling the <xref:System.Threading.ThreadLocal%601.%23ctor%28System.Boolean%29> constructor with a value of `false` for the `trackAllValues` argument.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Lazy`1" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="295fa-112">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="295fa-112">Lazy Initialization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8cd68620-dcc3-4f20-8835-c728a6820e71"><span data-ttu-id="295fa-113">Comment : effectuer une initialisation tardive d'objets</span><span class="sxs-lookup"><span data-stu-id="295fa-113">How to: Perform Lazy Initialization of Objects</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadLocal (bool trackAllValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool trackAllValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadLocal`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (trackAllValues As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ThreadLocal(bool trackAllValues);" />
      <MemberSignature Language="F#" Value="new System.Threading.ThreadLocal&lt;'T&gt; : bool -&gt; System.Threading.ThreadLocal&lt;'T&gt;" Usage="new System.Threading.ThreadLocal&lt;'T&gt; trackAllValues" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="trackAllValues" Type="System.Boolean" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="trackAllValues"><span data-ttu-id="295fa-114"><see langword="true" /> pour suivre toutes les valeurs définies dans l’instance et les exposer par le biais de la propriété <see cref="P:System.Threading.ThreadLocal`1.Values" /> ; <see langword="false" /> sinon.</span><span class="sxs-lookup"><span data-stu-id="295fa-114"><see langword="true" /> to track all values set on the instance and expose them through the <see cref="P:System.Threading.ThreadLocal`1.Values" /> property; <see langword="false" /> otherwise.</span></span></param>
        <summary><span data-ttu-id="295fa-115">Initialise l’instance <see cref="T:System.Threading.ThreadLocal`1" /> et spécifie si toutes les valeurs sont accessibles à partir de n’importe quel thread.</span><span class="sxs-lookup"><span data-stu-id="295fa-115">Initializes the <see cref="T:System.Threading.ThreadLocal`1" /> instance and specifies whether all values are accessible from any thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="295fa-116">Si `trackAllValues` est `false`, seule la valeur de cette instance pour le thread actuel est accessible.</span><span class="sxs-lookup"><span data-stu-id="295fa-116">If `trackAllValues` is `false`, only the value of this instance for the current thread is accessible.</span></span> <span data-ttu-id="295fa-117">Tente d’utiliser le <xref:System.Threading.ThreadLocal%601.Values%2A> propriété à récupérer toutes les valeurs lève une <xref:System.InvalidOperationException> exception.</span><span class="sxs-lookup"><span data-stu-id="295fa-117">Attempting to use the <xref:System.Threading.ThreadLocal%601.Values%2A> property to retrieve all values throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadLocal (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ThreadLocal(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new System.Threading.ThreadLocal&lt;'T&gt; : Func&lt;'T&gt; -&gt; System.Threading.ThreadLocal&lt;'T&gt;" Usage="new System.Threading.ThreadLocal&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="295fa-118"><see cref="T:System.Func`1" /> appelé pour produire une valeur initialisée tardivement quand une tentative est effectuée pour récupérer <see cref="P:System.Threading.ThreadLocal`1.Value" /> sans qu’il ait été précédemment initialisé.</span><span class="sxs-lookup"><span data-stu-id="295fa-118">The  <see cref="T:System.Func`1" /> invoked to produce a lazily-initialized value when an attempt is made to retrieve <see cref="P:System.Threading.ThreadLocal`1.Value" /> without it having been previously initialized.</span></span></param>
        <summary><span data-ttu-id="295fa-119">Initialise l'instance de <see cref="T:System.Threading.ThreadLocal`1" /> avec la fonction <paramref name="valueFactory" /> spécifiée.</span><span class="sxs-lookup"><span data-stu-id="295fa-119">Initializes the <see cref="T:System.Threading.ThreadLocal`1" /> instance with the specified <paramref name="valueFactory" /> function.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="295fa-120"><paramref name="valueFactory" /> est une référence Null (Nothing en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="295fa-120"><paramref name="valueFactory" /> is a null reference (Nothing in Visual Basic).</span></span></exception>
        <altmember cref="T:System.Lazy`1" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="295fa-121">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="295fa-121">Lazy Initialization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8cd68620-dcc3-4f20-8835-c728a6820e71"><span data-ttu-id="295fa-122">Comment : effectuer une initialisation tardive d'objets</span><span class="sxs-lookup"><span data-stu-id="295fa-122">How to: Perform Lazy Initialization of Objects</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadLocal (Func&lt;T&gt; valueFactory, bool trackAllValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool trackAllValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), trackAllValues As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ThreadLocal(Func&lt;T&gt; ^ valueFactory, bool trackAllValues);" />
      <MemberSignature Language="F#" Value="new System.Threading.ThreadLocal&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; System.Threading.ThreadLocal&lt;'T&gt;" Usage="new System.Threading.ThreadLocal&lt;'T&gt; (valueFactory, trackAllValues)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="trackAllValues" Type="System.Boolean" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="295fa-123"><see cref="T:System.Func`1" /> appelé pour produire une valeur initialisée tardivement lorsqu'une tentative est effectuée pour récupérer <see cref="P:System.Threading.ThreadLocal`1.Value" /> sans qu'il ait été précédemment initialisé.</span><span class="sxs-lookup"><span data-stu-id="295fa-123">The <see cref="T:System.Func`1" /> invoked to produce a lazily-initialized value when an attempt is made to retrieve <see cref="P:System.Threading.ThreadLocal`1.Value" /> without it having been previously initialized.</span></span></param>
        <param name="trackAllValues"><span data-ttu-id="295fa-124"><see langword="true" /> pour suivre toutes les valeurs définies dans l’instance et les exposer par le biais de la propriété <see cref="P:System.Threading.ThreadLocal`1.Values" /> ; <see langword="false" /> sinon.</span><span class="sxs-lookup"><span data-stu-id="295fa-124"><see langword="true" /> to track all values set on the instance and expose them through the <see cref="P:System.Threading.ThreadLocal`1.Values" /> property; <see langword="false" /> otherwise.</span></span></param>
        <summary><span data-ttu-id="295fa-125">Initialise l’instance <see cref="T:System.Threading.ThreadLocal`1" /> avec la fonction <paramref name="valueFactory" /> spécifiée et un indicateur qui indique si toutes les valeurs sont accessibles à partir de n’importe quel thread.</span><span class="sxs-lookup"><span data-stu-id="295fa-125">Initializes the <see cref="T:System.Threading.ThreadLocal`1" /> instance with the specified <paramref name="valueFactory" /> function and a flag that indicates whether all values are accessible from any thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="295fa-126">Si `trackAllValues` est `false`, seule la valeur de cette instance pour le thread actuel est accessible.</span><span class="sxs-lookup"><span data-stu-id="295fa-126">If `trackAllValues` is `false`, only the value of this instance for the current thread is accessible.</span></span> <span data-ttu-id="295fa-127">Tente d’utiliser le <xref:System.Threading.ThreadLocal%601.Values%2A> propriété à récupérer toutes les valeurs lève une <xref:System.InvalidOperationException> exception.</span><span class="sxs-lookup"><span data-stu-id="295fa-127">Attempting to use the <xref:System.Threading.ThreadLocal%601.Values%2A> property to retrieve all values throws an <xref:System.InvalidOperationException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="295fa-128"><paramref name="valueFactory" /> est une référence <see langword="null" /> (<see langword="Nothing" /> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="295fa-128"><paramref name="valueFactory" /> is a <see langword="null" /> reference (<see langword="Nothing" /> in Visual Basic).</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="295fa-129">Libère les ressources utilisées par cette instance de <see cref="T:System.Threading.ThreadLocal`1" />.</span><span class="sxs-lookup"><span data-stu-id="295fa-129">Releases the resources used by this <see cref="T:System.Threading.ThreadLocal`1" /> instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadLocal`1.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="threadLocal.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="295fa-130">Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Threading.ThreadLocal`1" />.</span><span class="sxs-lookup"><span data-stu-id="295fa-130">Releases all resources used by the current instance of the <see cref="T:System.Threading.ThreadLocal`1" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="295fa-131">Appelez la méthode `Dispose` une fois que vous avez terminé d'utiliser <xref:System.Threading.ThreadLocal%601>.</span><span class="sxs-lookup"><span data-stu-id="295fa-131">Call `Dispose` when you are finished using the <xref:System.Threading.ThreadLocal%601>.</span></span> <span data-ttu-id="295fa-132">La méthode `Dispose` rend le <xref:System.Threading.ThreadLocal%601> inutilisable.</span><span class="sxs-lookup"><span data-stu-id="295fa-132">The `Dispose` method leaves the <xref:System.Threading.ThreadLocal%601> in an unusable state.</span></span> <span data-ttu-id="295fa-133">Après avoir appelé `Dispose`, vous devez libérer toutes les références à la <xref:System.Threading.ThreadLocal%601> pour que le garbage collector puisse récupérer la mémoire qui le <xref:System.Threading.ThreadLocal%601> occupée.</span><span class="sxs-lookup"><span data-stu-id="295fa-133">After calling `Dispose`, you must release all references to the <xref:System.Threading.ThreadLocal%601> so the garbage collector can reclaim the memory that the <xref:System.Threading.ThreadLocal%601> was occupying.</span></span>  
  
 <span data-ttu-id="295fa-134">Pour plus d’informations, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md) et [implémentation d’une méthode Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="295fa-134">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="295fa-135">Appelez toujours `Dispose` avant de libérer votre dernière référence à <xref:System.Threading.ThreadLocal%601>.</span><span class="sxs-lookup"><span data-stu-id="295fa-135">Always call `Dispose` before you release your last reference to the <xref:System.Threading.ThreadLocal%601>.</span></span> <span data-ttu-id="295fa-136">Sinon, les ressources utilisées ne seront pas libérées tant que le garbage collector n'aura pas appelé la méthode <xref:System.Threading.ThreadLocal%601> de l'objet `Finalize`.</span><span class="sxs-lookup"><span data-stu-id="295fa-136">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.ThreadLocal%601> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Lazy`1" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="295fa-137">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="295fa-137">Lazy Initialization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8cd68620-dcc3-4f20-8835-c728a6820e71"><span data-ttu-id="295fa-138">Comment : effectuer une initialisation tardive d'objets</span><span class="sxs-lookup"><span data-stu-id="295fa-138">How to: Perform Lazy Initialization of Objects</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadLocal`1.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="threadLocal.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="295fa-139">Valeur booléenne qui indique si cette méthode est appelée en raison d'un appel à <see cref="M:System.Threading.ThreadLocal`1.Dispose" />.</span><span class="sxs-lookup"><span data-stu-id="295fa-139">A Boolean value that indicates whether this method is being called due to a call to <see cref="M:System.Threading.ThreadLocal`1.Dispose" />.</span></span></param>
        <summary><span data-ttu-id="295fa-140">Libère les ressources utilisées par cette instance de <see cref="T:System.Threading.ThreadLocal`1" />.</span><span class="sxs-lookup"><span data-stu-id="295fa-140">Releases the resources used by this <see cref="T:System.Threading.ThreadLocal`1" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="295fa-141">Contrairement à la plupart des membres de <xref:System.Threading.ThreadLocal%601>, cette méthode n’est pas thread-safe.</span><span class="sxs-lookup"><span data-stu-id="295fa-141">Unlike most of the members of <xref:System.Threading.ThreadLocal%601>, this method is not thread-safe.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Lazy`1" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="295fa-142">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="295fa-142">Lazy Initialization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8cd68620-dcc3-4f20-8835-c728a6820e71"><span data-ttu-id="295fa-143">Comment : effectuer une initialisation tardive d'objets</span><span class="sxs-lookup"><span data-stu-id="295fa-143">How to: Perform Lazy Initialization of Objects</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ThreadLocal ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadLocal`1.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ThreadLocal`1 ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="threadLocal.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="295fa-144">Libère les ressources utilisées par cette instance de <see cref="T:System.Threading.ThreadLocal`1" />.</span><span class="sxs-lookup"><span data-stu-id="295fa-144">Releases the resources used by this <see cref="T:System.Threading.ThreadLocal`1" /> instance.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Lazy`1" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="295fa-145">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="295fa-145">Lazy Initialization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8cd68620-dcc3-4f20-8835-c728a6820e71"><span data-ttu-id="295fa-146">Comment : effectuer une initialisation tardive d'objets</span><span class="sxs-lookup"><span data-stu-id="295fa-146">How to: Perform Lazy Initialization of Objects</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadLocal`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Threading.ThreadLocal&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="295fa-147">Obtient une valeur qui indique si <see cref="P:System.Threading.ThreadLocal`1.Value" /> est initialisé sur le thread actuel.</span><span class="sxs-lookup"><span data-stu-id="295fa-147">Gets whether <see cref="P:System.Threading.ThreadLocal`1.Value" /> is initialized on the current thread.</span></span></summary>
        <value><span data-ttu-id="295fa-148">True si <see cref="P:System.Threading.ThreadLocal`1.Value" /> est initialisé sur le thread actuel ; sinon, false.</span><span class="sxs-lookup"><span data-stu-id="295fa-148">true if <see cref="P:System.Threading.ThreadLocal`1.Value" /> is initialized on the current thread; otherwise false.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="295fa-149">L’instance <see cref="T:System.Threading.ThreadLocal`1" /> a été supprimée.</span><span class="sxs-lookup"><span data-stu-id="295fa-149">The <see cref="T:System.Threading.ThreadLocal`1" /> instance has been disposed.</span></span></exception>
        <altmember cref="T:System.Lazy`1" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="295fa-150">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="295fa-150">Lazy Initialization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8cd68620-dcc3-4f20-8835-c728a6820e71"><span data-ttu-id="295fa-151">Comment : effectuer une initialisation tardive d'objets</span><span class="sxs-lookup"><span data-stu-id="295fa-151">How to: Perform Lazy Initialization of Objects</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadLocal`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="threadLocal.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="295fa-152">Crée et retourne une représentation sous forme de chaîne de cette instance pour le thread actuel.</span><span class="sxs-lookup"><span data-stu-id="295fa-152">Creates and returns a string representation of this instance for the current thread.</span></span></summary>
        <returns><span data-ttu-id="295fa-153">Résultat de l'appel à <see cref="M:System.Object.ToString" /> sur <see cref="P:System.Threading.ThreadLocal`1.Value" />.</span><span class="sxs-lookup"><span data-stu-id="295fa-153">The result of calling <see cref="M:System.Object.ToString" /> on the <see cref="P:System.Threading.ThreadLocal`1.Value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="295fa-154">Appel de cette méthode force l’initialisation pour le thread actuel, comme c’est le cas avec l’accès à <xref:System.Threading.ThreadLocal%601.Value%2A> directement.</span><span class="sxs-lookup"><span data-stu-id="295fa-154">Calling this method forces initialization for the current thread, as is the case with accessing <xref:System.Threading.ThreadLocal%601.Value%2A> directly.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="295fa-155">L’instance <see cref="T:System.Threading.ThreadLocal`1" /> a été supprimée.</span><span class="sxs-lookup"><span data-stu-id="295fa-155">The <see cref="T:System.Threading.ThreadLocal`1" /> instance has been disposed.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="295fa-156">Le <see cref="P:System.Threading.ThreadLocal`1.Value" /> du thread actuel est une référence null (Nothing en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="295fa-156">The <see cref="P:System.Threading.ThreadLocal`1.Value" /> for the current thread is a null reference (Nothing in Visual Basic).</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="295fa-157">La fonction d'initialisation a tenté de référencer <see cref="P:System.Threading.ThreadLocal`1.Value" /> de manière récursive.</span><span class="sxs-lookup"><span data-stu-id="295fa-157">The initialization function attempted to reference <see cref="P:System.Threading.ThreadLocal`1.Value" /> recursively.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="295fa-158">Aucun constructeur par défaut n'est fourni et aucune fabrique de valeurs n'est fournie.</span><span class="sxs-lookup"><span data-stu-id="295fa-158">No default constructor is provided and no value factory is supplied.</span></span></exception>
        <altmember cref="T:System.Lazy`1" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="295fa-159">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="295fa-159">Lazy Initialization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8cd68620-dcc3-4f20-8835-c728a6820e71"><span data-ttu-id="295fa-160">Comment : effectuer une initialisation tardive d'objets</span><span class="sxs-lookup"><span data-stu-id="295fa-160">How to: Perform Lazy Initialization of Objects</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadLocal`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); void set(T value); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T with get, set" Usage="System.Threading.ThreadLocal&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="295fa-161">Obtient ou définit la valeur de cette instance pour le thread actuel.</span><span class="sxs-lookup"><span data-stu-id="295fa-161">Gets or sets the value of this instance for the current thread.</span></span></summary>
        <value><span data-ttu-id="295fa-162">Retourne une instance de l'objet dont ce ThreadLocal est chargé de l'initialisation.</span><span class="sxs-lookup"><span data-stu-id="295fa-162">Returns an instance of the object that this ThreadLocal is responsible for initializing.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="295fa-163">Si cette instance n’a pas été précédemment initialisée pour le thread actuel, l’accès à <xref:System.Threading.ThreadLocal%601.Value%2A> va tenter de l’initialiser.</span><span class="sxs-lookup"><span data-stu-id="295fa-163">If this instance was not previously initialized for the current thread, accessing <xref:System.Threading.ThreadLocal%601.Value%2A> will attempt to initialize it.</span></span> <span data-ttu-id="295fa-164">Si une fonction d’initialisation a été fournie lors de la construction, que l’initialisation se produit en appelant la fonction pour récupérer la valeur initiale pour <xref:System.Threading.ThreadLocal%601.Value%2A>.</span><span class="sxs-lookup"><span data-stu-id="295fa-164">If an initialization function was supplied during the construction, that initialization will happen by invoking the function to retrieve the initial value for <xref:System.Threading.ThreadLocal%601.Value%2A>.</span></span> <span data-ttu-id="295fa-165">Sinon, la valeur par défaut sera être utilisée.</span><span class="sxs-lookup"><span data-stu-id="295fa-165">Otherwise, the default value of will be used.</span></span> <span data-ttu-id="295fa-166">Si une exception est levée, cette exception est mise en cache et levée à chaque accès suivant de la propriété.</span><span class="sxs-lookup"><span data-stu-id="295fa-166">If an exception is thrown, that exception is cached and thrown on each subsequent access of the property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="295fa-167">L’instance <see cref="T:System.Threading.ThreadLocal`1" /> a été supprimée.</span><span class="sxs-lookup"><span data-stu-id="295fa-167">The <see cref="T:System.Threading.ThreadLocal`1" /> instance has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="295fa-168">La fonction d'initialisation a tenté de référencer <see cref="P:System.Threading.ThreadLocal`1.Value" /> de manière récursive.</span><span class="sxs-lookup"><span data-stu-id="295fa-168">The initialization function attempted to reference <see cref="P:System.Threading.ThreadLocal`1.Value" /> recursively.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="295fa-169">Aucun constructeur par défaut n'est fourni et aucune fabrique de valeurs n'est fournie.</span><span class="sxs-lookup"><span data-stu-id="295fa-169">No default constructor is provided and no value factory is supplied.</span></span></exception>
        <altmember cref="T:System.Lazy`1" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="295fa-170">Initialisation tardive</span><span class="sxs-lookup"><span data-stu-id="295fa-170">Lazy Initialization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8cd68620-dcc3-4f20-8835-c728a6820e71"><span data-ttu-id="295fa-171">Comment : effectuer une initialisation tardive d'objets</span><span class="sxs-lookup"><span data-stu-id="295fa-171">How to: Perform Lazy Initialization of Objects</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;T&gt; Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;!T&gt; Values" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadLocal`1.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As IList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;T&gt; ^ Values { System::Collections::Generic::IList&lt;T&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.Generic.IList&lt;'T&gt;" Usage="System.Threading.ThreadLocal&lt;'T&gt;.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="295fa-172">Obtient une liste de toutes les valeurs actuellement stockées par tous les threads qui ont accès à cette instance.</span><span class="sxs-lookup"><span data-stu-id="295fa-172">Gets a list for all of the values currently stored by all of the threads that have accessed this instance.</span></span></summary>
        <value><span data-ttu-id="295fa-173">Liste de toutes les valeurs actuellement stockées par tous les threads qui ont accès à cette instance.</span><span class="sxs-lookup"><span data-stu-id="295fa-173">A list for all of the values currently stored by all of the threads that have accessed this instance.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="295fa-174">Les valeurs stockées par tous les threads ne sont pas disponibles, car cette instance a été initialisée avec l’argument <paramref name="trackAllValues" /> défini sur <see langword="false" /> dans l’appel à un constructeur de classe.</span><span class="sxs-lookup"><span data-stu-id="295fa-174">Values stored by all threads are not available because this instance was initialized with the <paramref name="trackAllValues" /> argument set to <see langword="false" /> in the call to a class constructor.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="295fa-175">L’instance <see cref="T:System.Threading.ThreadLocal`1" /> a été supprimée.</span><span class="sxs-lookup"><span data-stu-id="295fa-175">The <see cref="T:System.Threading.ThreadLocal`1" /> instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>