<Type Name="Thread" FullName="System.Threading.Thread">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7c33ebbf7fda315ea7cdcd851f00c29b10d280bd" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48741628" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Thread : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, System.Runtime.InteropServices._Thread" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Thread extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.Runtime.InteropServices._Thread" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Thread" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Thread&#xA;Inherits CriticalFinalizerObject&#xA;Implements _Thread" />
  <TypeSignature Language="C++ CLI" Value="public ref class Thread sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, System::Runtime::InteropServices::_Thread" />
  <TypeSignature Language="F#" Value="type Thread = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface _Thread" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Thread</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Thread))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="a51b5-101">Crée et contrôle un thread, définit sa priorité et obtient son état.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a51b5-101">Creates and controls a thread, sets its priority, and gets its status.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-102">Quand un processus démarre, le common language runtime crée automatiquement un thread de premier plan pour exécuter le code d’application.</span><span class="sxs-lookup"><span data-stu-id="a51b5-102">When a process starts, the common language runtime automatically creates a single foreground thread to execute application code.</span></span> <span data-ttu-id="a51b5-103">En même temps que ce thread de premier plan principal, un processus peut créer un ou plusieurs threads pour exécuter une partie du code du programme associé au processus.</span><span class="sxs-lookup"><span data-stu-id="a51b5-103">Along with this main foreground thread, a process can create one or more threads to execute a portion of the program code associated with the process.</span></span> <span data-ttu-id="a51b5-104">Ces threads peuvent exécuter au premier plan ou en arrière-plan.</span><span class="sxs-lookup"><span data-stu-id="a51b5-104">These threads can execute either in the foreground or in the background.</span></span> <span data-ttu-id="a51b5-105">En outre, vous pouvez utiliser la <xref:System.Threading.ThreadPool> classe pour exécuter du code sur les threads de travail qui sont gérés par le common language runtime.</span><span class="sxs-lookup"><span data-stu-id="a51b5-105">In addition, you can use the <xref:System.Threading.ThreadPool> class to execute code on worker threads that are managed by the common language runtime.</span></span>  
  
 <span data-ttu-id="a51b5-106">Dans cette section</span><span class="sxs-lookup"><span data-stu-id="a51b5-106">In this section</span></span>  
  
 <span data-ttu-id="a51b5-107">[À partir d’un thread](#Starting) </span><span class="sxs-lookup"><span data-stu-id="a51b5-107">[Starting a thread](#Starting) </span></span>  
 <span data-ttu-id="a51b5-108">[Récupération d’objets de Thread](#Retrieving) </span><span class="sxs-lookup"><span data-stu-id="a51b5-108">[Retrieving Thread objects](#Retrieving) </span></span>  
 <span data-ttu-id="a51b5-109">[Threads de premier plan et d’arrière-plan](#Foreground) </span><span class="sxs-lookup"><span data-stu-id="a51b5-109">[Foreground and background threads](#Foreground) </span></span>  
 <span data-ttu-id="a51b5-110">[Culture et des threads](#Culture) </span><span class="sxs-lookup"><span data-stu-id="a51b5-110">[Culture and threads](#Culture) </span></span>  
 [<span data-ttu-id="a51b5-111">Obtenir des informations sur et contrôler les threads</span><span class="sxs-lookup"><span data-stu-id="a51b5-111">Getting information about and controlling threads</span></span>](#Properties)   
   
<a name="Starting"></a>   
## <a name="starting-a-thread"></a><span data-ttu-id="a51b5-112">À partir d’un thread</span><span class="sxs-lookup"><span data-stu-id="a51b5-112">Starting a thread</span></span>  
 <span data-ttu-id="a51b5-113">Démarrer un thread en fournissant un délégué qui représente la méthode que le thread consiste à exécuter dans son constructeur de classe.</span><span class="sxs-lookup"><span data-stu-id="a51b5-113">You start a thread by supplying a delegate that represents the method the thread is to execute in its class constructor.</span></span> <span data-ttu-id="a51b5-114">Vous appelez ensuite la <xref:System.Threading.Thread.Start%2A> méthode pour commencer l’exécution.</span><span class="sxs-lookup"><span data-stu-id="a51b5-114">You then call the <xref:System.Threading.Thread.Start%2A> method to begin execution.</span></span>  
  
 <span data-ttu-id="a51b5-115">Le <xref:System.Threading.Thread> constructeurs peuvent prendre un des types de délégué deux, selon que vous pouvez passer un argument à la méthode à exécuter :</span><span class="sxs-lookup"><span data-stu-id="a51b5-115">The <xref:System.Threading.Thread> constructors can take either of two delegate types, depending on whether you can pass an argument to the method to be executed:</span></span>  
  
-   <span data-ttu-id="a51b5-116">Si la méthode n’a aucun argument, vous passez un <xref:System.Threading.ThreadStart> déléguer au constructeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-116">If the method has no arguments, you pass a <xref:System.Threading.ThreadStart> delegate to  the constructor.</span></span> <span data-ttu-id="a51b5-117">Il a la signature :</span><span class="sxs-lookup"><span data-stu-id="a51b5-117">It has the signature:</span></span>  
  
    ```csharp  
    public delegate void ThreadStart()  
    ```  
  
    ```vb  
    Public Delegate Sub ThreadStart()  
    ```  
  
     <span data-ttu-id="a51b5-118">L’exemple suivant crée et démarre un thread qui exécute le `ExecuteInForeground` (méthode).</span><span class="sxs-lookup"><span data-stu-id="a51b5-118">The following example creates and starts a thread that executes the `ExecuteInForeground` method.</span></span> <span data-ttu-id="a51b5-119">La méthode affiche des informations sur certaines propriétés de thread, puis exécute une boucle dans laquelle elle s’interrompt pendant une demi-seconde et affiche le nombre de secondes écoulé.</span><span class="sxs-lookup"><span data-stu-id="a51b5-119">The method displays  information about some thread properties, then executes a loop in which it pauses for half a second and displays the elapsed number of seconds.</span></span> <span data-ttu-id="a51b5-120">Lorsque le thread a été exécutée pendant au moins cinq secondes, fin de la boucle et le thread se termine l’exécution.</span><span class="sxs-lookup"><span data-stu-id="a51b5-120">When the thread has executed for at least five seconds, the loop ends and the thread terminates execution.</span></span>  
  
     [!code-csharp[System.Threading.Thread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/ThreadStart1.cs#1)]
     [!code-vb[System.Threading.Thread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/ThreadStart1.vb#1)]  
  
-   <span data-ttu-id="a51b5-121">Si la méthode possède un argument, vous passez un <xref:System.Threading.ParameterizedThreadStart> déléguer au constructeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-121">If the method has an argument, you pass a <xref:System.Threading.ParameterizedThreadStart> delegate to the constructor.</span></span> <span data-ttu-id="a51b5-122">Il a la signature :</span><span class="sxs-lookup"><span data-stu-id="a51b5-122">It has the signature:</span></span>  
  
    ```csharp  
    public delegate void ParameterizedThreadStart(object obj)  
    ```  
  
    ```vb  
    Public Delegate Sub ParameterizedThreadStart(obj As Object)  
    ```  
  
     <span data-ttu-id="a51b5-123">La méthode exécutée par le délégué peut ensuite effectuer un cast (en c#) ou convertir (en Visual Basic) le paramètre du type approprié.</span><span class="sxs-lookup"><span data-stu-id="a51b5-123">The method executed by the delegate can then cast (in C#) or convert (in Visual Basic) the parameter to the appropriate type.</span></span>  
  
     <span data-ttu-id="a51b5-124">L’exemple suivant est identique au précédent, excepté qu’il appelle le <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-124">The following example is identical to the previous one, except that it calls the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor.</span></span> <span data-ttu-id="a51b5-125">Cette version de la `ExecuteInForeground` méthode possède un paramètre unique qui représente le nombre approximatif de millisecondes de la boucle doit s’exécuter.</span><span class="sxs-lookup"><span data-stu-id="a51b5-125">This version of the `ExecuteInForeground` method has a single parameter that represents the approximate number of milliseconds the loop is to execute.</span></span>  
  
     [!code-csharp[System.Threading.Thread#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/ThreadStart2.cs#2)]
     [!code-vb[System.Threading.Thread#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/ThreadStart2.vb#2)]  
  
 <span data-ttu-id="a51b5-126">Il n’est pas nécessaire de conserver une référence à un <xref:System.Threading.Thread> une fois que vous avez démarré le thread de l’objet.</span><span class="sxs-lookup"><span data-stu-id="a51b5-126">It is not necessary to retain a reference to a <xref:System.Threading.Thread> object once you have started the thread.</span></span> <span data-ttu-id="a51b5-127">Le thread continue à s’exécuter jusqu'à la fin de la procédure de thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-127">The thread continues to execute until the thread procedure is complete.</span></span>  
  
<a name="Retrieving"></a>   
## <a name="retrieving-thread-objects"></a><span data-ttu-id="a51b5-128">Récupération d’objets de Thread</span><span class="sxs-lookup"><span data-stu-id="a51b5-128">Retrieving Thread objects</span></span>  
 <span data-ttu-id="a51b5-129">Vous pouvez utiliser la méthode statique (`Shared` en Visual Basic) <xref:System.Threading.Thread.CurrentThread%2A> propriété à récupérer une référence au thread en cours d’exécution à partir du code que le thread s’exécute.</span><span class="sxs-lookup"><span data-stu-id="a51b5-129">You can use the static (`Shared` in Visual Basic)  <xref:System.Threading.Thread.CurrentThread%2A> property to retrieve a reference to the currently executing thread from the code that the thread is executing.</span></span> <span data-ttu-id="a51b5-130">L’exemple suivant utilise le <xref:System.Threading.Thread.CurrentThread%2A> propriété pour afficher des informations sur le thread principal de l’application, un autre thread de premier plan, un thread d’arrière-plan et un thread de pool de threads.</span><span class="sxs-lookup"><span data-stu-id="a51b5-130">The following example uses the <xref:System.Threading.Thread.CurrentThread%2A> property to display information about the main application thread, another foreground thread, a background thread, and a thread pool thread.</span></span>  
  
 [!code-csharp[System.Threading.Thread#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/Instance1.cs#4)]
 [!code-vb[System.Threading.Thread#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/Instance1.vb#4)]  
  
<a name="Foreground"></a>   
## <a name="foreground-and-background-threads"></a><span data-ttu-id="a51b5-131">Threads de premier plan et d’arrière-plan</span><span class="sxs-lookup"><span data-stu-id="a51b5-131">Foreground and background threads</span></span>  
 <span data-ttu-id="a51b5-132">Instances de la <xref:System.Threading.Thread> classe représentent les threads de premier plan ou de threads d’arrière-plan.</span><span class="sxs-lookup"><span data-stu-id="a51b5-132">Instances of the <xref:System.Threading.Thread> class represent either foreground threads or background threads.</span></span> <span data-ttu-id="a51b5-133">Threads d’arrière-plan sont identiques aux threads de premier plan à une exception près : un thread d’arrière-plan ne conserve pas un processus exécuté si tous les threads de premier plan sont terminés.</span><span class="sxs-lookup"><span data-stu-id="a51b5-133">Background threads are identical to foreground threads with one exception: a background thread does not keep a process running if all foreground threads have terminated.</span></span> <span data-ttu-id="a51b5-134">Une fois que tous les threads de premier plan ont été arrêtés, le runtime arrête tous les threads d’arrière-plan et s’arrête.</span><span class="sxs-lookup"><span data-stu-id="a51b5-134">Once all foreground threads have been stopped, the runtime stops all background threads and shuts down.</span></span>  
  
 <span data-ttu-id="a51b5-135">Par défaut, les threads suivants s’exécutent au premier plan :</span><span class="sxs-lookup"><span data-stu-id="a51b5-135">By default, the following threads execute in the foreground:</span></span>  
  
-   <span data-ttu-id="a51b5-136">Le thread principal de l’application.</span><span class="sxs-lookup"><span data-stu-id="a51b5-136">The main application thread.</span></span>  
  
-   <span data-ttu-id="a51b5-137">Tous les threads créés en appelant un <xref:System.Threading.Thread> constructeur de classe.</span><span class="sxs-lookup"><span data-stu-id="a51b5-137">All threads created by calling a <xref:System.Threading.Thread> class constructor.</span></span>  
  
 <span data-ttu-id="a51b5-138">Les threads suivants s’exécutent en arrière-plan par défaut :</span><span class="sxs-lookup"><span data-stu-id="a51b5-138">The following threads execute in the background by default:</span></span>  
  
-   <span data-ttu-id="a51b5-139">Thread du pool de threads, qui constituent un pool de threads de travail géré par le runtime.</span><span class="sxs-lookup"><span data-stu-id="a51b5-139">Thread pool threads, which are a pool of worker threads maintained by the runtime.</span></span>  <span data-ttu-id="a51b5-140">Vous pouvez configurer le travail de pool et de planification de thread sur les threads du pool à l’aide de la <xref:System.Threading.ThreadPool> classe.</span><span class="sxs-lookup"><span data-stu-id="a51b5-140">You can configure the thread pool and schedule work on thread pool threads by using the <xref:System.Threading.ThreadPool> class.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a51b5-141">Opérations asynchrones basées sur la tâche s’exécute automatiquement sur les threads du pool.</span><span class="sxs-lookup"><span data-stu-id="a51b5-141">Task-based asynchronous operations automatically execute on thread pool threads.</span></span> <span data-ttu-id="a51b5-142">Utilisent des opérations asynchrones basées sur une tâche le <xref:System.Threading.Tasks.Task> et <xref:System.Threading.Tasks.Task%601> classes pour implémenter le [modèle asynchrone basé sur les tâches](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md).</span><span class="sxs-lookup"><span data-stu-id="a51b5-142">Task-based asynchronous operations use the <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> classes to implement the [task-based asynchronous pattern](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md).</span></span>  
  
-   <span data-ttu-id="a51b5-143">Tous les threads qui entrent dans l’environnement d’exécution managé à partir de code non managé.</span><span class="sxs-lookup"><span data-stu-id="a51b5-143">All threads that enter the managed execution environment from unmanaged code.</span></span>  
  
 <span data-ttu-id="a51b5-144">Vous pouvez modifier un thread d’exécuter en arrière-plan en définissant le <xref:System.Threading.Thread.IsBackground%2A> propriété à tout moment.</span><span class="sxs-lookup"><span data-stu-id="a51b5-144">You can change a thread to execute in the background by setting the <xref:System.Threading.Thread.IsBackground%2A> property at any time.</span></span>  <span data-ttu-id="a51b5-145">Threads d’arrière-plan sont utiles pour toute opération qui doit se poursuivre tant qu’une application est en cours d’exécution mais ne doit pas empêcher l’application à partir de la fin d’exécution, comme la surveillance des modifications de système de fichiers ou les connexions de socket entrante.</span><span class="sxs-lookup"><span data-stu-id="a51b5-145">Background threads are useful for any operation that should continue as long as an application is running but should not prevent the application from terminating, such as monitoring file system changes or incoming socket connections.</span></span>  
  
 <span data-ttu-id="a51b5-146">L’exemple suivant illustre la différence entre les threads de premier plan et d’arrière-plan.</span><span class="sxs-lookup"><span data-stu-id="a51b5-146">The following example illustrates the difference between foreground and background threads.</span></span> <span data-ttu-id="a51b5-147">C’est comme le premier exemple dans le [à partir d’un thread](#Starting) section, sauf qu’il définit le thread de s’exécuter en arrière-plan avant de le démarrer.</span><span class="sxs-lookup"><span data-stu-id="a51b5-147">It is like the first example in the [Starting a thread](#Starting) section, except that it sets the thread to execute in the background before starting it.</span></span> <span data-ttu-id="a51b5-148">Comme le montre la sortie, la boucle est interrompue avant de s’exécuter pendant cinq secondes.</span><span class="sxs-lookup"><span data-stu-id="a51b5-148">As the output shows, the loop is interrupted before it executes for five seconds.</span></span>  
  
 [!code-csharp[System.Threading.Thread#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/BackgroundEx1.cs#3)]
 [!code-vb[System.Threading.Thread#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/BackgroundEx1.vb#3)]  
  
<a name="Culture"></a>   
## <a name="culture-and-threads"></a><span data-ttu-id="a51b5-149">Culture et des threads</span><span class="sxs-lookup"><span data-stu-id="a51b5-149">Culture and threads</span></span>  
 <span data-ttu-id="a51b5-150">Chaque thread possède une culture, représentée par le <xref:System.Threading.Thread.CurrentCulture%2A> propriété et une culture d’interface utilisateur, représentée par le <xref:System.Threading.Thread.CurrentUICulture%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="a51b5-150">Each thread has a culture, represented by the <xref:System.Threading.Thread.CurrentCulture%2A> property, and a UI culture, represented by the <xref:System.Threading.Thread.CurrentUICulture%2A> property.</span></span>  <span data-ttu-id="a51b5-151">La culture actuelle prend en charge ces opérations dépendantes de la culture en tant que l’analyse et mise en forme, comparaison de chaînes et le tri et contrôle également le système d’écriture et le calendrier utilisé par un thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-151">The current culture supports such culture-sensitive  operations as parsing and formatting, string comparison and sorting, and also controls the writing system and calendar used by a thread.</span></span> <span data-ttu-id="a51b5-152">La culture d’interface utilisateur actuelle fournit pour la récupération de la culture des ressources dans les fichiers de ressources.</span><span class="sxs-lookup"><span data-stu-id="a51b5-152">The current UI culture provides for culture-sensitive retrieval of resources in resource files.</span></span>  
  
 <span data-ttu-id="a51b5-153">Quand un nouveau thread est instancié, sa culture et la culture d’interface utilisateur sont définis par la culture système actuelle et la culture d’interface utilisateur et non par la culture et la culture d’interface utilisateur du thread à partir duquel le nouveau thread est créé.</span><span class="sxs-lookup"><span data-stu-id="a51b5-153">When a new thread is instantiated, its culture and UI culture are defined by the current system culture and UI culture, and not by the culture and UI culture of the thread from which the new thread is created.</span></span> <span data-ttu-id="a51b5-154">Cela signifie, par exemple, que si la culture système actuelle est anglais (États-Unis) et la culture actuelle du thread d’application principal est le Français (France), la culture d’un nouveau thread créé en appelant le <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructeur à partir du thread principal est anglais (États-Unis) et pas Français (France).</span><span class="sxs-lookup"><span data-stu-id="a51b5-154">This means, for example, that if the current system culture is English (United States) and the current culture of the primary application thread is French (France), the culture of a new thread created by calling the   <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor from the primary thread is English (United States), and not French (France).</span></span> <span data-ttu-id="a51b5-155">Pour plus d’informations, consultez la section « Culture et threads » de la <xref:System.Globalization.CultureInfo> rubrique de la classe.</span><span class="sxs-lookup"><span data-stu-id="a51b5-155">For more information, see the "Culture and threads" section of the <xref:System.Globalization.CultureInfo> class topic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a51b5-156">Cela n’est pas vrai pour les threads qui exécutent des opérations asynchrones pour les applications qui ciblent le [!INCLUDE[net_v46](~/includes/net-v46-md.md)] et versions ultérieures, dans ce cas, la culture et la culture d’interface utilisateur fait partie d’une commande asynchrone contexte des opérations ; le thread sur lequel une opération asynchrone s’exécute par défaut hérite de la culture et la culture d’interface utilisateur du thread à partir duquel l’opération asynchrone a été lancée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-156">This is not true of threads that execute asynchronous operations for apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)] and later versions, In this case, the culture and UI culture is part of an asynchronous operations' context; the thread on which an asynchronous operation executes by default inherits the culture and UI culture of the thread from which the asynchronous operation was launched.</span></span> <span data-ttu-id="a51b5-157">Pour plus d'informations, consultez la section « Culture et opérations asynchrones basées sur les tâches » de la rubrique relative à la classe <xref:System.Globalization.CultureInfo>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-157">For more information, see the "Culture and task-based asynchronous operations" section of the <xref:System.Globalization.CultureInfo> class topic.</span></span>  
  
 <span data-ttu-id="a51b5-158">Vous pouvez effectuer l’une des opérations suivantes pour vous assurer que tous les threads de l’exécution dans une application partagent la même culture et la culture d’interface utilisateur :</span><span class="sxs-lookup"><span data-stu-id="a51b5-158">You can do either of the following to ensure that all of the threads executing in an application share the same culture and UI culture:</span></span>  
  
-   <span data-ttu-id="a51b5-159">Vous pouvez passer un <xref:System.Globalization.CultureInfo> objet qui représente cette culture pour le <xref:System.Threading.ParameterizedThreadStart> déléguer ou <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="a51b5-159">You can pass a <xref:System.Globalization.CultureInfo> object that represents that culture to the <xref:System.Threading.ParameterizedThreadStart> delegate or the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="a51b5-160">Pour les applications exécutées le [!INCLUDE[net_v45](~/includes/net-v45-md.md)] et versions ultérieures, vous pouvez définir la culture et la culture d’interface utilisateur qui doit être affecté à tous les threads créés dans un domaine d’application en définissant la valeur de la <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A?displayProperty=nameWithType> et <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=nameWithType> propriétés.</span><span class="sxs-lookup"><span data-stu-id="a51b5-160">For apps running on the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later versions, you can define the culture and UI culture that is to be assigned to all threads created in an application domain by setting the value of the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A?displayProperty=nameWithType> and <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="a51b5-161">Notez qu’il s’agit d’un paramètre par domaine d’application.</span><span class="sxs-lookup"><span data-stu-id="a51b5-161">Note that this is a per-application domain setting.</span></span>  
  
 <span data-ttu-id="a51b5-162">Pour plus d’informations et des exemples, consultez la section « Culture et threads » de la <xref:System.Globalization.CultureInfo> rubrique de la classe.</span><span class="sxs-lookup"><span data-stu-id="a51b5-162">For more information and examples, see the "Culture and threads" section of the <xref:System.Globalization.CultureInfo> class topic.</span></span>  
  
<a name="Properties"></a>   
## <a name="getting-information-about-and-controlling-threads"></a><span data-ttu-id="a51b5-163">Obtenir des informations sur et contrôler les threads</span><span class="sxs-lookup"><span data-stu-id="a51b5-163">Getting information about and controlling threads</span></span>  
 <span data-ttu-id="a51b5-164">Vous pouvez récupérer un nombre de valeurs de propriétés qui fournissent des informations sur un thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-164">You can retrieve a number of property values that provide information about a thread.</span></span> <span data-ttu-id="a51b5-165">Dans certains cas, vous pouvez également définir ces valeurs de propriété pour contrôler le fonctionnement du thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-165">In some cases, you can also set these property values to control the operation of the thread.</span></span> <span data-ttu-id="a51b5-166">Ces propriétés de thread sont les suivantes :</span><span class="sxs-lookup"><span data-stu-id="a51b5-166">These thread properties include:</span></span>  
  
-   <span data-ttu-id="a51b5-167">Nom.</span><span class="sxs-lookup"><span data-stu-id="a51b5-167">A name.</span></span> <span data-ttu-id="a51b5-168"><xref:System.Threading.Thread.Name%2A> est une écriture-propriété une fois que vous pouvez utiliser pour identifier un thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-168"><xref:System.Threading.Thread.Name%2A> is a write-once property that you can use to identify a thread.</span></span>  <span data-ttu-id="a51b5-169">Sa valeur par défaut est `null`.</span><span class="sxs-lookup"><span data-stu-id="a51b5-169">Its default value is `null`.</span></span>  
  
-   <span data-ttu-id="a51b5-170">Un code de hachage, vous pouvez récupérer en appelant le <xref:System.Threading.Thread.GetHashCode%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="a51b5-170">A hash code, which you can retrieve by calling the <xref:System.Threading.Thread.GetHashCode%2A> method.</span></span> <span data-ttu-id="a51b5-171">Le code de hachage peut être utilisé pour identifier de façon unique un thread ; pour la durée de vie de votre thread, son code de hachage ne sera pas entrer en conflit avec la valeur à partir de n’importe quel autre thread, quel que soit le domaine d’application à partir de laquelle vous obtenez la valeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-171">The hash code can be used to uniquely identify a thread; for the lifetime of your thread, its hash code will not collide with the value from any other thread, regardless of the application domain from which you obtain the value.</span></span>  
  
-   <span data-ttu-id="a51b5-172">Un ID de thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-172">A thread ID.</span></span> <span data-ttu-id="a51b5-173">La valeur de la lecture seule <xref:System.Threading.Thread.ManagedThreadId%2A> propriété est attribuée par le runtime et identifie de façon unique un thread au sein de son processus.</span><span class="sxs-lookup"><span data-stu-id="a51b5-173">The value of the read-only <xref:System.Threading.Thread.ManagedThreadId%2A> property is assigned by the runtime and uniquely identifies a thread within its process.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a51b5-174">Un [ThreadId](https://msdn.microsoft.com/library/windows/desktop/ms683233.aspx) de système d’exploitation n’est pas lié de manière fixe à un thread managé, car un hôte non managé peut contrôler la relation entre les threads managés et les threads non managés.</span><span class="sxs-lookup"><span data-stu-id="a51b5-174">An operating-system [ThreadId](https://msdn.microsoft.com/library/windows/desktop/ms683233.aspx) has no fixed relationship to a managed thread, because an unmanaged host can control the relationship between managed and unmanaged threads.</span></span> <span data-ttu-id="a51b5-175">Plus précisément, un hôte élaboré peut utiliser le [API d’hébergement CLR](https://msdn.microsoft.com/library/ms404385.aspx) pour planifier de nombreux threads managés sur le même thread de système d’exploitation, ou pour déplacer un thread managé entre les threads de système d’exploitation différent.</span><span class="sxs-lookup"><span data-stu-id="a51b5-175">Specifically, a sophisticated host can use the [CLR Hosting API](https://msdn.microsoft.com/library/ms404385.aspx) to schedule many managed threads against the same operating system thread, or to move a managed thread between different operating system threads.</span></span>  
  
-   <span data-ttu-id="a51b5-176">L’état du thread actuel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-176">The thread's current state.</span></span> <span data-ttu-id="a51b5-177">Pendant la durée de son existence, un thread se trouve toujours dans un ou plusieurs des états définis par le <xref:System.Threading.ThreadState> propriété.</span><span class="sxs-lookup"><span data-stu-id="a51b5-177">For the duration of its existence, a thread is always in one or more of the states defined by the <xref:System.Threading.ThreadState> property.</span></span>  
  
-   <span data-ttu-id="a51b5-178">Un niveau de priorité de planification est défini par le <xref:System.Threading.ThreadPriority> propriété.</span><span class="sxs-lookup"><span data-stu-id="a51b5-178">A scheduling priority level, which is defined by the <xref:System.Threading.ThreadPriority> property.</span></span> <span data-ttu-id="a51b5-179">Bien que vous pouvez définir cette valeur pour demander une priorité de thread, il n’est pas garanti à être respectées par le système d’exploitation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-179">Although you can set this value to request a thread's priority, it is not guaranteed to be honored by the operating system.</span></span>  
  
-   <span data-ttu-id="a51b5-180">En lecture seule <xref:System.Threading.Thread.IsThreadPoolThread%2A> propriété, qui indique si un thread est un thread de pool de threads.</span><span class="sxs-lookup"><span data-stu-id="a51b5-180">The read-only <xref:System.Threading.Thread.IsThreadPoolThread%2A> property, which indicates whether a thread is  a thread pool thread.</span></span>  
  
-   <span data-ttu-id="a51b5-181">La propriété <xref:System.Threading.Thread.IsBackground%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-181">The <xref:System.Threading.Thread.IsBackground%2A> property.</span></span> <span data-ttu-id="a51b5-182">Pour plus d’informations, consultez le [les threads de premier plan et arrière-plan](#Foreground) section.</span><span class="sxs-lookup"><span data-stu-id="a51b5-182">For more information, see the [Foreground and background threads](#Foreground) section.</span></span>  
  
## Examples  
 <span data-ttu-id="a51b5-183">L’exemple suivant illustre la fonctionnalité de thread simple.</span><span class="sxs-lookup"><span data-stu-id="a51b5-183">The following example demonstrates simple threading functionality.</span></span>  
  
 [!code-cpp[Classic Thread Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Thread Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Thread Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Thread Example/CS/source.cs#1)]
 [!code-vb[Classic Thread Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Thread Example/VB/source.vb#1)]  
  
 <span data-ttu-id="a51b5-184">Ce code produit une sortie similaire à ce qui suit :</span><span class="sxs-lookup"><span data-stu-id="a51b5-184">This code produces output similar to the following:</span></span>  
  
```  
[VB, C++, C#]  
Main thread: Start a second thread.  
Main thread: Do some work.  
ThreadProc: 0  
Main thread: Do some work.  
ThreadProc: 1  
Main thread: Do some work.  
ThreadProc: 2  
Main thread: Do some work.  
ThreadProc: 3  
Main thread: Call Join(), to wait until ThreadProc ends.  
ThreadProc: 4  
ThreadProc: 5  
ThreadProc: 6  
ThreadProc: 7  
ThreadProc: 8  
ThreadProc: 9  
Main thread: ThreadProc.Join has returned.  Press Enter to end program.  
```  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="a51b5-185">Ce type est thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a51b5-185">This type is thread safe.</span>
      </span>
    </threadsafe>
    <related type="Article" href="~/docs/standard/threading/threads-and-threading.md">
      <span data-ttu-id="a51b5-186">Threads et threading</span>
      <span class="sxs-lookup">
        <span data-stu-id="a51b5-186">Threads and Threading</span>
      </span>
    </related>
    <related type="Article" href="~/docs/standard/threading/using-threads-and-threading.md">
      <span data-ttu-id="a51b5-187">Utilisation des threads et du threading</span>
      <span class="sxs-lookup">
        <span data-stu-id="a51b5-187">Using Threads and Threading</span>
      </span>
    </related>
    <related type="ExternalDocumentation" href="http://referencesource.microsoft.com/#mscorlib/system/threading/thread.cs#3980e012bae82e96">
      <span data-ttu-id="a51b5-188">Source de référence pour la classe de Thread</span>
      <span class="sxs-lookup">
        <span data-stu-id="a51b5-188">Reference Source for the Thread Class</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-189">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Thread" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-189">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ParameterizedThreadStart start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ParameterizedThreadStart start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ParameterizedThreadStart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ParameterizedThreadStart ^ start);" />
      <MemberSignature Language="F#" Value="new System.Threading.Thread : System.Threading.ParameterizedThreadStart -&gt; System.Threading.Thread" Usage="new System.Threading.Thread start" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ParameterizedThreadStart" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="a51b5-190">Délégué qui représente les méthodes à appeler au début de l'exécution de ce thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-190">A delegate that represents the methods to be invoked when this thread begins executing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-191">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Thread" />, en spécifiant un délégué qui permet à un objet d'être passé au thread quand le thread est démarré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-191">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying a delegate that allows an object to be passed to the thread when the thread is started.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-192">Un thread d’exécution ne commence pas lors de sa création.</span><span class="sxs-lookup"><span data-stu-id="a51b5-192">A thread does not begin executing when it is created.</span></span> <span data-ttu-id="a51b5-193">Pour planifier l’exécution du thread, appelez le <xref:System.Threading.Thread.Start%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="a51b5-193">To schedule the thread for execution, call the <xref:System.Threading.Thread.Start%2A> method.</span></span> <span data-ttu-id="a51b5-194">Pour passer un objet de données au thread, utilisez la <xref:System.Threading.Thread.Start%28System.Object%29> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="a51b5-194">To pass a data object to the thread, use the <xref:System.Threading.Thread.Start%28System.Object%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-195">Les utilisateurs de Visual Basic peuvent omettre le <xref:System.Threading.ThreadStart> constructeur lors de la création d’un thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-195">Visual Basic users can omit the <xref:System.Threading.ThreadStart> constructor when creating a thread.</span></span> <span data-ttu-id="a51b5-196">Utilisez le `AddressOf` opérateur lorsque vous passez votre méthode, par exemple `Dim t As New Thread(AddressOf ThreadProc)`.</span><span class="sxs-lookup"><span data-stu-id="a51b5-196">Use the `AddressOf` operator when passing your method, for example `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="a51b5-197">Visual Basic appelle automatiquement la <xref:System.Threading.ThreadStart> constructeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-197">Visual Basic automatically calls the <xref:System.Threading.ThreadStart> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-198">L’exemple suivant illustre la syntaxe pour créer et utiliser un <xref:System.Threading.ParameterizedThreadStart> délégué avec une méthode statique et une méthode d’instance.</span><span class="sxs-lookup"><span data-stu-id="a51b5-198">The following example shows the syntax for creating and using a <xref:System.Threading.ParameterizedThreadStart> delegate with a static method and an instance method.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a51b5-199">
            <paramref name="start" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-199">
              <paramref name="start" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.ParameterizedThreadStart" />
        <altmember cref="Overload:System.Threading.Thread.Start" />
        <altmember cref="T:System.AppDomain" />
        <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md">
          <span data-ttu-id="a51b5-200">Création de Threads</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-200">Creating Threads</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ThreadStart start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ThreadStart start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ThreadStart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ThreadStart ^ start);" />
      <MemberSignature Language="F#" Value="new System.Threading.Thread : System.Threading.ThreadStart -&gt; System.Threading.Thread" Usage="new System.Threading.Thread start" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ThreadStart" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="a51b5-201">Délégué <see cref="T:System.Threading.ThreadStart" /> qui représente les méthodes à appeler au début de l'exécution de ce thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-201">A <see cref="T:System.Threading.ThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-202">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Thread" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-202">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-203">Un thread d’exécution ne commence pas lors de sa création.</span><span class="sxs-lookup"><span data-stu-id="a51b5-203">A thread does not begin executing when it is created.</span></span> <span data-ttu-id="a51b5-204">Pour planifier l’exécution du thread, appelez le <xref:System.Threading.Thread.Start%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="a51b5-204">To schedule the thread for execution, call the <xref:System.Threading.Thread.Start%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-205">Les utilisateurs de Visual Basic peuvent omettre le <xref:System.Threading.ThreadStart> constructeur lors de la création d’un thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-205">Visual Basic users can omit the <xref:System.Threading.ThreadStart> constructor when creating a thread.</span></span> <span data-ttu-id="a51b5-206">Utilisez le `AddressOf` opérateur lorsque vous passez votre méthode par exemple `Dim t As New Thread(AddressOf ThreadProc)`.</span><span class="sxs-lookup"><span data-stu-id="a51b5-206">Use the `AddressOf` operator when passing your method for example `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="a51b5-207">Visual Basic appelle automatiquement la <xref:System.Threading.ThreadStart> constructeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-207">Visual Basic automatically calls the <xref:System.Threading.ThreadStart> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-208">L’exemple de code suivant montre comment créer un thread qui exécute une méthode statique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-208">The following code example shows how to create a thread that executes a static method.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.ctor/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.ctor/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.ctor/VB/source.vb#1)]  
  
 <span data-ttu-id="a51b5-209">L’exemple de code suivant montre comment créer un thread qui exécute une méthode d’instance.</span><span class="sxs-lookup"><span data-stu-id="a51b5-209">The following code example shows how to create a thread that executes an instance method.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.ctor2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.ctor2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.ctor2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a51b5-210">Le paramètre <paramref name="start" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-210">The <paramref name="start" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.ThreadStart" />
        <altmember cref="Overload:System.Threading.Thread.Start" />
        <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md">
          <span data-ttu-id="a51b5-211">Création de Threads</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-211">Creating Threads</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ParameterizedThreadStart start, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ParameterizedThreadStart start, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ParameterizedThreadStart, maxStackSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ParameterizedThreadStart ^ start, int maxStackSize);" />
      <MemberSignature Language="F#" Value="new System.Threading.Thread : System.Threading.ParameterizedThreadStart * int -&gt; System.Threading.Thread" Usage="new System.Threading.Thread (start, maxStackSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ParameterizedThreadStart" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="a51b5-212">Délégué <see cref="T:System.Threading.ParameterizedThreadStart" /> qui représente les méthodes à appeler au début de l'exécution de ce thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-212">A <see cref="T:System.Threading.ParameterizedThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</span>
          </span>
        </param>
        <param name="maxStackSize">
          <span data-ttu-id="a51b5-213">Taille de pile maximale, en octets, à utiliser par le thread, ou 0 pour utiliser la taille de pile maximale par défaut spécifiée dans l'en-tête pour le fichier exécutable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-213">The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.</span>
          </span>
          <span data-ttu-id="a51b5-214">Important   Pour le code partiellement fiable, <c>maxStackSize</c> est ignoré s’il est supérieur à la taille de la pile par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-214">Important   For partially trusted code, <c>maxStackSize</c> is ignored if it is greater than the default stack size.</span>
          </span>
          <span data-ttu-id="a51b5-215">Aucune exception n'est levée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-215">No exception is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-216">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Thread" />, en spécifiant un délégué qui permet à un objet d'être passé au thread quand le thread est démarré et en spécifiant la taille de pile maximale pour le thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-216">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying a delegate that allows an object to be passed to the thread when the thread is started and specifying the maximum stack size for the thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-217">Évitez d’utiliser cette surcharge de constructeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-217">Avoid using this constructor overload.</span></span> <span data-ttu-id="a51b5-218">La taille de pile par défaut utilisée par le <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> surcharge de constructeur est la taille de pile recommandée pour les threads.</span><span class="sxs-lookup"><span data-stu-id="a51b5-218">The default stack size used by the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor overload is the recommended stack size for threads.</span></span> <span data-ttu-id="a51b5-219">Si un thread a des problèmes de mémoire, la cause la plus probable est la programmation erreur, telle qu’une récurrence infinie.</span><span class="sxs-lookup"><span data-stu-id="a51b5-219">If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a51b5-220">Compter les [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]uniquement de confiance suffisant pour le code peut définir `maxStackSize` sur une valeur supérieure à celle de la taille de pile par défaut (1 Mo).</span><span class="sxs-lookup"><span data-stu-id="a51b5-220">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], only fully trusted code can set `maxStackSize` to a value that is greater than the default stack size (1 megabyte).</span></span> <span data-ttu-id="a51b5-221">Si une valeur supérieure est spécifiée pour `maxStackSize` lorsque le code s’exécute avec une confiance partielle, `maxStackSize` est ignoré et la taille de pile par défaut est utilisée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-221">If a larger value is specified for `maxStackSize` when code is running with partial trust, `maxStackSize` is ignored and the default stack size is used.</span></span> <span data-ttu-id="a51b5-222">Aucune exception n'est levée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-222">No exception is thrown.</span></span> <span data-ttu-id="a51b5-223">Le code à tout niveau de confiance peut définir `maxStackSize` sur une valeur inférieure à la taille de pile par défaut.</span><span class="sxs-lookup"><span data-stu-id="a51b5-223">Code at any trust level can set `maxStackSize` to a value that is less than the default stack size.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-224">Si vous développez une bibliothèque totalement approuvée qui sera utilisée par du code partiellement fiable, et que vous avez besoin démarrer un thread qui nécessite une importante pile, vous devez déclarer la confiance totale avant de créer le thread ou la taille de pile par défaut sera utilisée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-224">If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used.</span></span> <span data-ttu-id="a51b5-225">Ne le faites pas, sauf si vous contrôlez entièrement le code qui s’exécute sur le thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-225">Do not do this unless you fully control the code that runs on the thread.</span></span>  
  
 <span data-ttu-id="a51b5-226">Si `maxStackSize` est inférieure à la taille minimale de pile, la taille de pile minimale est utilisée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-226">If `maxStackSize` is less than the minimum stack size, the minimum stack size is used.</span></span> <span data-ttu-id="a51b5-227">Si `maxStackSize` n’est pas un multiple de la taille de page, il est arrondi au prochain multiple de la taille de page.</span><span class="sxs-lookup"><span data-stu-id="a51b5-227">If `maxStackSize` is not a multiple of the page size, it is rounded to the next larger multiple of the page size.</span></span> <span data-ttu-id="a51b5-228">Par exemple, si vous utilisez la version 2.0 du .NET Framework sur Windows Vista, 256 Ko (262 144 octets) est la taille de pile minimale et la taille de page est de 64 Ko (65 536 octets).</span><span class="sxs-lookup"><span data-stu-id="a51b5-228">For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-229">Sur les versions de Windows Microsoft antérieurs à Windows XP et Windows Server 2003, `maxStackSize` est ignoré, et la taille de pile spécifiée dans l’en-tête de l’exécutable est utilisée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-229">On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, `maxStackSize` is ignored, and the stack size specified in the executable header is used.</span></span>  
  
 <span data-ttu-id="a51b5-230">Si vous spécifiez une très petite taille de pile, vous devrez peut-être désactiver la détection de débordement de pile.</span><span class="sxs-lookup"><span data-stu-id="a51b5-230">If you specify a very small stack size, you might need to disable stack-overflow probing.</span></span> <span data-ttu-id="a51b5-231">Lors de la pile est sévèrement limitée, la détection peut elle-même provoquer un débordement de pile.</span><span class="sxs-lookup"><span data-stu-id="a51b5-231">When the stack is severely constrained, the probing can itself cause a stack overflow.</span></span> <span data-ttu-id="a51b5-232">Pour désactiver la détection de dépassement de capacité de pile, ajoutez le code suivant au fichier de configuration de votre application.</span><span class="sxs-lookup"><span data-stu-id="a51b5-232">To disable stack overflow probing, add the following to your application configuration file.</span></span>  
  
```xml  
<configuration>  
  <runtime>  
    <disableStackOverflowProbing enabled="true"/>  
  </runtime>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a51b5-233">
            <paramref name="start" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-233">
              <paramref name="start" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a51b5-234">
            <paramref name="maxStackSize" /> est inférieur à zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-234">
              <paramref name="maxStackSize" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ThreadStart start, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ThreadStart start, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ThreadStart, maxStackSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ThreadStart ^ start, int maxStackSize);" />
      <MemberSignature Language="F#" Value="new System.Threading.Thread : System.Threading.ThreadStart * int -&gt; System.Threading.Thread" Usage="new System.Threading.Thread (start, maxStackSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ThreadStart" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="a51b5-235">Délégué <see cref="T:System.Threading.ThreadStart" /> qui représente les méthodes à appeler au début de l'exécution de ce thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-235">A <see cref="T:System.Threading.ThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</span>
          </span>
        </param>
        <param name="maxStackSize">
          <span data-ttu-id="a51b5-236">Taille de pile maximale, en octets, à utiliser par le thread, ou 0 pour utiliser la taille de pile maximale par défaut spécifiée dans l'en-tête pour le fichier exécutable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-236">The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.</span>
          </span>
          <span data-ttu-id="a51b5-237">Important   Pour le code partiellement fiable, <c>maxStackSize</c> est ignoré s’il est supérieur à la taille de la pile par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-237">Important   For partially trusted code, <c>maxStackSize</c> is ignored if it is greater than the default stack size.</span>
          </span>
          <span data-ttu-id="a51b5-238">Aucune exception n'est levée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-238">No exception is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-239">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Thread" />, en spécifiant la taille de pile maximale pour le thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-239">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying the maximum stack size for the thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-240">Évitez d’utiliser cette surcharge de constructeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-240">Avoid using this constructor overload.</span></span> <span data-ttu-id="a51b5-241">La taille de pile par défaut utilisée par le <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29> surcharge de constructeur est la taille de pile recommandée pour les threads.</span><span class="sxs-lookup"><span data-stu-id="a51b5-241">The default stack size used by the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29> constructor overload is the recommended stack size for threads.</span></span> <span data-ttu-id="a51b5-242">Si un thread a des problèmes de mémoire, la cause la plus probable est la programmation erreur, telle qu’une récurrence infinie.</span><span class="sxs-lookup"><span data-stu-id="a51b5-242">If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a51b5-243">Compter les [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]uniquement de confiance suffisant pour le code peut définir `maxStackSize` sur une valeur supérieure à celle de la taille de pile par défaut (1 Mo).</span><span class="sxs-lookup"><span data-stu-id="a51b5-243">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], only fully trusted code can set `maxStackSize` to a value that is greater than the default stack size (1 megabyte).</span></span> <span data-ttu-id="a51b5-244">Si une valeur supérieure est spécifiée pour `maxStackSize` lorsque le code s’exécute avec une confiance partielle, `maxStackSize` est ignoré et la taille de pile par défaut est utilisée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-244">If a larger value is specified for `maxStackSize` when code is running with partial trust, `maxStackSize` is ignored and the default stack size is used.</span></span> <span data-ttu-id="a51b5-245">Aucune exception n'est levée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-245">No exception is thrown.</span></span> <span data-ttu-id="a51b5-246">Le code à tout niveau de confiance peut définir `maxStackSize` sur une valeur inférieure à la taille de pile par défaut.</span><span class="sxs-lookup"><span data-stu-id="a51b5-246">Code at any trust level can set `maxStackSize` to a value that is less than the default stack size.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-247">Si vous développez une bibliothèque totalement approuvée qui sera utilisée par du code partiellement fiable, et que vous avez besoin démarrer un thread qui nécessite une importante pile, vous devez déclarer la confiance totale avant de créer le thread ou la taille de pile par défaut sera utilisée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-247">If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used.</span></span> <span data-ttu-id="a51b5-248">Ne le faites pas, sauf si vous contrôlez entièrement le code qui s’exécute sur le thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-248">Do not do this unless you fully control the code that runs on the thread.</span></span>  
  
 <span data-ttu-id="a51b5-249">Si `maxStackSize` est inférieure à la taille minimale de pile, la taille de pile minimale est utilisée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-249">If `maxStackSize` is less than the minimum stack size, the minimum stack size is used.</span></span> <span data-ttu-id="a51b5-250">Si `maxStackSize` n’est pas un multiple de la taille de page, il est arrondi au prochain multiple de la taille de page.</span><span class="sxs-lookup"><span data-stu-id="a51b5-250">If `maxStackSize` is not a multiple of the page size, it is rounded to the next larger multiple of the page size.</span></span> <span data-ttu-id="a51b5-251">Par exemple, si vous utilisez la version 2.0 du .NET Framework sur Windows Vista, 256 Ko (262 144 octets) est la taille de pile minimale et la taille de page est de 64 Ko (65 536 octets).</span><span class="sxs-lookup"><span data-stu-id="a51b5-251">For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-252">Sur les versions de Windows Microsoft antérieurs à Windows XP et Windows Server 2003, `maxStackSize` est ignoré, et la taille de pile spécifiée dans l’en-tête de l’exécutable est utilisée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-252">On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, `maxStackSize` is ignored, and the stack size specified in the executable header is used.</span></span>  
  
 <span data-ttu-id="a51b5-253">Si vous spécifiez une très petite taille de pile, vous devrez peut-être désactiver la détection de débordement de pile.</span><span class="sxs-lookup"><span data-stu-id="a51b5-253">If you specify a very small stack size, you might need to disable stack-overflow probing.</span></span> <span data-ttu-id="a51b5-254">Lors de la pile est sévèrement limitée, la détection peut elle-même provoquer un débordement de pile.</span><span class="sxs-lookup"><span data-stu-id="a51b5-254">When the stack is severely constrained, the probing can itself cause a stack overflow.</span></span> <span data-ttu-id="a51b5-255">Pour désactiver la détection de dépassement de capacité de pile, ajoutez le code suivant au fichier de configuration de votre application.</span><span class="sxs-lookup"><span data-stu-id="a51b5-255">To disable stack overflow probing, add the following to your application configuration file.</span></span>  
  
```xml  
<configuration>  
  <runtime>  
    <disableStackOverflowProbing enabled="true"/>  
  </runtime>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a51b5-256">
            <paramref name="start" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-256">
              <paramref name="start" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a51b5-257">
            <paramref name="maxStackSize" /> est inférieur à zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-257">
              <paramref name="maxStackSize" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Abort">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-258">Déclenche <see cref="T:System.Threading.ThreadAbortException" /> dans le thread sur lequel l'appel a lieu pour commencer le processus d'arrêt du thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-258">Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread.</span>
          </span>
          <span data-ttu-id="a51b5-259">L'appel de cette méthode arrête généralement le thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-259">Calling this method usually terminates the thread.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="thread.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-260">Déclenche <see cref="T:System.Threading.ThreadAbortException" /> dans le thread sur lequel l'appel a lieu pour commencer le processus d'arrêt du thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-260">Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread.</span>
          </span>
          <span data-ttu-id="a51b5-261">L'appel de cette méthode arrête généralement le thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-261">Calling this method usually terminates the thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-262">Lorsque cette méthode est appelée sur un thread, le système lève une <xref:System.Threading.ThreadAbortException> dans le thread pour l’abandonner.</span><span class="sxs-lookup"><span data-stu-id="a51b5-262">When this method is invoked on a thread, the system throws a <xref:System.Threading.ThreadAbortException> in the thread to abort it.</span></span> <span data-ttu-id="a51b5-263">`ThreadAbortException` est une exception spéciale qui peut être interceptée par le code d’application, mais est à nouveau levée à la fin de la `catch` bloquer, sauf si <xref:System.Threading.Thread.ResetAbort%2A> est appelée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-263">`ThreadAbortException` is a special exception that can be caught by application code, but is re-thrown at the end of the `catch` block unless <xref:System.Threading.Thread.ResetAbort%2A> is called.</span></span> <span data-ttu-id="a51b5-264">`ResetAbort` Annule la demande d’abandon et empêche le `ThreadAbortException` à partir de l’arrêt du thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-264">`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread.</span></span> <span data-ttu-id="a51b5-265">Non `finally` blocs sont exécutés avant l’abandon du thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-265">Unexecuted `finally` blocks are executed before the thread is aborted.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-266">Lorsqu’un thread appelle `Abort` sur lui-même, l’effet est similaire à la levée d’une exception ; le <xref:System.Threading.ThreadAbortException> se produit immédiatement, et le résultat est prévisible.</span><span class="sxs-lookup"><span data-stu-id="a51b5-266">When a thread calls `Abort` on itself, the effect is similar to throwing an exception; the <xref:System.Threading.ThreadAbortException> happens immediately, and the result is predictable.</span></span> <span data-ttu-id="a51b5-267">Toutefois, si un thread appelle `Abort` sur un autre thread, l’abandon interrompt le code est en cours d’exécution.</span><span class="sxs-lookup"><span data-stu-id="a51b5-267">However, if one thread calls `Abort` on another thread, the abort interrupts whatever code is running.</span></span> <span data-ttu-id="a51b5-268">Il est également probable qu’un constructeur statique soit abandonné.</span><span class="sxs-lookup"><span data-stu-id="a51b5-268">There is also a chance that a static constructor could be aborted.</span></span> <span data-ttu-id="a51b5-269">Dans de rares cas, ceci peut empêcher des instances de cette classe d’être créées dans ce domaine d’application.</span><span class="sxs-lookup"><span data-stu-id="a51b5-269">In rare cases, this might prevent instances of that class from being created in that application domain.</span></span> <span data-ttu-id="a51b5-270">Dans les versions 1.0 et 1.1 du .NET Framework, il existe un risque le thread abandonné pendant un `finally` bloc est en cours d’exécution, auquel cas la `finally` bloc est abandonné.</span><span class="sxs-lookup"><span data-stu-id="a51b5-270">In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a `finally` block is running, in which case the `finally` block is aborted.</span></span>  
  
 <span data-ttu-id="a51b5-271">Le thread n’est pas garanti pour abandonner immédiatement, ou du tout.</span><span class="sxs-lookup"><span data-stu-id="a51b5-271">The thread is not guaranteed to abort immediately, or at all.</span></span> <span data-ttu-id="a51b5-272">Cette situation peut se produire si un thread effectue un nombre illimité de calcul dans le `finally` blocs qui sont appelées dans le cadre de la procédure d’abandon, ce qui retarde indéfiniment l’abandon.</span><span class="sxs-lookup"><span data-stu-id="a51b5-272">This situation can occur if a thread does an unbounded amount of computation in the `finally` blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort.</span></span> <span data-ttu-id="a51b5-273">Pour attendre qu’un thread a abandonné, vous pouvez appeler la <xref:System.Threading.Thread.Join%2A> méthode sur le thread après avoir appelé la <xref:System.Threading.Thread.Abort%2A> (méthode), mais il n’existe aucune garantie que l’attente se termine.</span><span class="sxs-lookup"><span data-stu-id="a51b5-273">To wait until a thread has aborted, you can call the <xref:System.Threading.Thread.Join%2A> method on the thread after calling the <xref:System.Threading.Thread.Abort%2A> method, but there is no guarantee the wait will end.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-274">Le thread qui appelle <xref:System.Threading.Thread.Abort%2A> peut se bloquer si le thread qui est en cours d’abandon est dans une zone protégée du code, comme un `catch` bloc, `finally` bloc ou la région d’exécution limitée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-274">The thread that calls <xref:System.Threading.Thread.Abort%2A> might block if the thread that is being aborted is in a protected region of code, such as a `catch` block, `finally` block, or constrained execution region.</span></span> <span data-ttu-id="a51b5-275">Si le thread qui appelle <xref:System.Threading.Thread.Abort%2A> maintient un verrouillage que le thread interrompu requiert, un interblocage peut se produire.</span><span class="sxs-lookup"><span data-stu-id="a51b5-275">If the thread that calls <xref:System.Threading.Thread.Abort%2A> holds a lock that the aborted thread requires, a deadlock can occur.</span></span>  
  
 <span data-ttu-id="a51b5-276">Si `Abort` est appelée sur un thread qui n’a pas été démarré, le thread sera abandonnée lorsque <xref:System.Threading.Thread.Start%2A> est appelée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-276">If `Abort` is called on a thread that has not been started, the thread will abort when <xref:System.Threading.Thread.Start%2A> is called.</span></span> <span data-ttu-id="a51b5-277">Si `Abort` est appelée sur un thread qui est bloqué ou en état de veille, le thread est interrompu et puis abandonné.</span><span class="sxs-lookup"><span data-stu-id="a51b5-277">If `Abort` is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.</span></span>  
  
 <span data-ttu-id="a51b5-278">Si `Abort` est appelée sur un thread qui a été suspendu, un <xref:System.Threading.ThreadStateException> est levée dans le thread qui a appelé <xref:System.Threading.Thread.Abort%2A>, et <xref:System.Threading.ThreadState.AbortRequested> est ajouté à la <xref:System.Threading.Thread.ThreadState%2A> propriété du thread en cours d’abandon.</span><span class="sxs-lookup"><span data-stu-id="a51b5-278">If `Abort` is called on a thread that has been suspended, a <xref:System.Threading.ThreadStateException> is thrown in the thread that called <xref:System.Threading.Thread.Abort%2A>, and <xref:System.Threading.ThreadState.AbortRequested> is added to the <xref:System.Threading.Thread.ThreadState%2A> property of the thread being aborted.</span></span> <span data-ttu-id="a51b5-279">Un <xref:System.Threading.ThreadAbortException> n’est pas levée dans le thread suspendu jusqu'à ce que <xref:System.Threading.Thread.Resume%2A> est appelée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-279">A <xref:System.Threading.ThreadAbortException> is not thrown in the suspended thread until <xref:System.Threading.Thread.Resume%2A> is called.</span></span>  
  
 <span data-ttu-id="a51b5-280">Si `Abort` est appelée sur un thread managé, tandis que l’exécution de code non managé, un `ThreadAbortException` n’est pas levée jusqu'à ce que le thread retourne au code managé.</span><span class="sxs-lookup"><span data-stu-id="a51b5-280">If `Abort` is called on a managed thread while it is executing unmanaged code, a `ThreadAbortException` is not thrown until the thread returns to managed code.</span></span>  
  
 <span data-ttu-id="a51b5-281">Si deux appels à `Abort` sont fournis en même temps, il est possible qu’un seul appel à définir les informations d’état et l’autre appel pour exécuter le `Abort`.</span><span class="sxs-lookup"><span data-stu-id="a51b5-281">If two calls to `Abort` come at the same time, it is possible for one call to set the state information and the other call to execute the `Abort`.</span></span> <span data-ttu-id="a51b5-282">Toutefois, une application ne peut pas détecter cette situation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-282">However, an application cannot detect this situation.</span></span>  
  
 <span data-ttu-id="a51b5-283">Après avoir `Abort` est appelé sur un thread, l’état du thread inclut <xref:System.Threading.ThreadState.AbortRequested>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-283">After `Abort` is invoked on a thread, the state of the thread includes <xref:System.Threading.ThreadState.AbortRequested>.</span></span> <span data-ttu-id="a51b5-284">Une fois que le thread s’est arrêté suite à un appel réussi à `Abort`, l’état du thread est passé à <xref:System.Threading.ThreadState.Stopped>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-284">After the thread has terminated as a result of a successful call to `Abort`, the state of the thread is changed to <xref:System.Threading.ThreadState.Stopped>.</span></span> <span data-ttu-id="a51b5-285">Avec des autorisations suffisantes, un thread qui est la cible d’une `Abort` peut annuler l’abandon à l’aide de la `ResetAbort` (méthode).</span><span class="sxs-lookup"><span data-stu-id="a51b5-285">With sufficient permissions, a thread that is the target of an `Abort` can cancel the abort using the `ResetAbort` method.</span></span> <span data-ttu-id="a51b5-286">Pour obtenir un exemple qui montre comment appeler le `ResetAbort` (méthode), consultez la `ThreadAbortException` classe.</span><span class="sxs-lookup"><span data-stu-id="a51b5-286">For an example that demonstrates calling the `ResetAbort` method, see the `ThreadAbortException` class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="a51b5-287">.NET Core uniquement : ce membre n’est pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-287">.NET Core only: This member is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="a51b5-288">L'appelant n'a pas l'autorisation requise.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-288">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="a51b5-289">Le thread en cours d’abandon est actuellement suspendu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-289">The thread that is being aborted is currently suspended.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="a51b5-290">pour les opérations avancées sur les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-290">for advanced operations on threads.</span>
          </span>
          <span data-ttu-id="a51b5-291">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-291">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Threading.ThreadAbortException" />
        <altmember cref="F:System.Threading.ThreadState.Aborted" />
        <altmember cref="F:System.Threading.ThreadState.AbortRequested" />
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md">
          <span data-ttu-id="a51b5-292">Threads et threading</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-292">Threads and Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/using-threads-and-threading.md">
          <span data-ttu-id="a51b5-293">Utilisation des threads et du threading</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-293">Using threads and threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/destroying-threads.md">
          <span data-ttu-id="a51b5-294">Détruire des threads</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-294">Destroying threads</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort (object stateInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort(object stateInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Abort(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort (stateInfo As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort(System::Object ^ stateInfo);" />
      <MemberSignature Language="F#" Value="member this.Abort : obj -&gt; unit" Usage="thread.Abort stateInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateInfo" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="stateInfo">
          <span data-ttu-id="a51b5-295">Objet contenant des informations spécifiques à l'application, telles que l'état, qui peuvent être utilisées par le thread en cours d'abandon.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-295">An object that contains application-specific information, such as state, which can be used by the thread being aborted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-296">Déclenche une <see cref="T:System.Threading.ThreadAbortException" /> dans le thread sur lequel l'appel a lieu pour commencer le processus d'arrêt du thread, tout en fournissant des informations sur les exceptions relatives à l'arrêt du thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-296">Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread while also providing exception information about the thread termination.</span>
          </span>
          <span data-ttu-id="a51b5-297">L'appel de cette méthode arrête généralement le thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-297">Calling this method usually terminates the thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-298">Lorsque cette méthode est appelée sur un thread, le système lève une <xref:System.Threading.ThreadAbortException> dans le thread pour l’abandonner.</span><span class="sxs-lookup"><span data-stu-id="a51b5-298">When this method is invoked on a thread, the system throws a <xref:System.Threading.ThreadAbortException> in the thread to abort it.</span></span> <span data-ttu-id="a51b5-299">`ThreadAbortException` est une exception spéciale qui peut être interceptée par le code d’application, mais est à nouveau levée à la fin de la `catch` bloquer, sauf si <xref:System.Threading.Thread.ResetAbort%2A> est appelée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-299">`ThreadAbortException` is a special exception that can be caught by application code, but is re-thrown at the end of the `catch` block unless <xref:System.Threading.Thread.ResetAbort%2A> is called.</span></span> <span data-ttu-id="a51b5-300">`ResetAbort` Annule la demande d’abandon et empêche le `ThreadAbortException` à partir de l’arrêt du thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-300">`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread.</span></span> <span data-ttu-id="a51b5-301">Non `finally` blocs sont exécutés avant l’abandon du thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-301">Unexecuted `finally` blocks are executed before the thread is aborted.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-302">Lorsqu’un thread appelle `Abort` sur lui-même, l’effet est similaire à la levée d’une exception ; le <xref:System.Threading.ThreadAbortException> se produit immédiatement, et le résultat est prévisible.</span><span class="sxs-lookup"><span data-stu-id="a51b5-302">When a thread calls `Abort` on itself, the effect is similar to throwing an exception; the <xref:System.Threading.ThreadAbortException> happens immediately, and the result is predictable.</span></span> <span data-ttu-id="a51b5-303">Toutefois, si un thread appelle `Abort` sur un autre thread, l’abandon interrompt le code est en cours d’exécution.</span><span class="sxs-lookup"><span data-stu-id="a51b5-303">However, if one thread calls `Abort` on another thread, the abort interrupts whatever code is running.</span></span> <span data-ttu-id="a51b5-304">Il est probable qu’un constructeur statique soit abandonné.</span><span class="sxs-lookup"><span data-stu-id="a51b5-304">There is a chance that a static constructor could be aborted.</span></span> <span data-ttu-id="a51b5-305">Dans de rares cas, ceci peut empêcher des instances de cette classe d’être créées dans ce domaine d’application.</span><span class="sxs-lookup"><span data-stu-id="a51b5-305">In rare cases, this might prevent instances of that class from being created in that application domain.</span></span> <span data-ttu-id="a51b5-306">Dans les versions 1.0 et 1.1 du .NET Framework, il existe un risque le thread abandonné pendant un `finally` bloc est en cours d’exécution, auquel cas la `finally` bloc est abandonné.</span><span class="sxs-lookup"><span data-stu-id="a51b5-306">In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a `finally` block is running, in which case the `finally` block is aborted.</span></span>  
  
 <span data-ttu-id="a51b5-307">Le thread n’est pas garanti pour abandonner immédiatement, ou du tout.</span><span class="sxs-lookup"><span data-stu-id="a51b5-307">The thread is not guaranteed to abort immediately, or at all.</span></span> <span data-ttu-id="a51b5-308">Cette situation peut se produire si un thread effectue un nombre illimité de calcul dans le `finally` blocs qui sont appelées dans le cadre de la procédure d’abandon, ce qui retarde indéfiniment l’abandon.</span><span class="sxs-lookup"><span data-stu-id="a51b5-308">This situation can occur if a thread does an unbounded amount of computation in the `finally` blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort.</span></span> <span data-ttu-id="a51b5-309">Pour attendre qu’un thread a abandonné, vous pouvez appeler la <xref:System.Threading.Thread.Join%2A> méthode sur le thread après avoir appelé la <xref:System.Threading.Thread.Abort%2A> (méthode), mais il n’existe aucune garantie que l’attente se termine.</span><span class="sxs-lookup"><span data-stu-id="a51b5-309">To wait until a thread has aborted, you can call the <xref:System.Threading.Thread.Join%2A> method on the thread after calling the <xref:System.Threading.Thread.Abort%2A> method, but there is no guarantee that the wait will end.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-310">Le thread qui appelle <xref:System.Threading.Thread.Abort%2A> peut se bloquer si le thread qui est en cours d’abandon est dans une zone protégée du code, comme un `catch` bloc, `finally` bloc ou la région d’exécution limitée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-310">The thread that calls <xref:System.Threading.Thread.Abort%2A> might block if the thread that is being aborted is in a protected region of code, such as a `catch` block, `finally` block, or constrained execution region.</span></span> <span data-ttu-id="a51b5-311">Si le thread qui appelle <xref:System.Threading.Thread.Abort%2A> maintient un verrouillage que le thread interrompu requiert, un interblocage peut se produire.</span><span class="sxs-lookup"><span data-stu-id="a51b5-311">If the thread that calls <xref:System.Threading.Thread.Abort%2A> holds a lock that the aborted thread requires, a deadlock can occur.</span></span>  
  
 <span data-ttu-id="a51b5-312">Si `Abort` est appelée sur un thread qui n’a pas été démarré, le thread sera abandonnée lorsque <xref:System.Threading.Thread.Start%2A> est appelée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-312">If `Abort` is called on a thread that has not been started, the thread will abort when <xref:System.Threading.Thread.Start%2A> is called.</span></span> <span data-ttu-id="a51b5-313">Si `Abort` est appelée sur un thread qui est bloqué ou en état de veille, le thread est interrompu et puis abandonné.</span><span class="sxs-lookup"><span data-stu-id="a51b5-313">If `Abort` is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.</span></span>  
  
 <span data-ttu-id="a51b5-314">Si `Abort` est appelée sur un thread qui a été suspendu, un <xref:System.Threading.ThreadStateException> est levée dans le thread qui a appelé <xref:System.Threading.Thread.Abort%2A>, et <xref:System.Threading.ThreadState.AbortRequested> est ajouté à la <xref:System.Threading.Thread.ThreadState%2A> propriété du thread en cours d’abandon.</span><span class="sxs-lookup"><span data-stu-id="a51b5-314">If `Abort` is called on a thread that has been suspended, a <xref:System.Threading.ThreadStateException> is thrown in the thread that called <xref:System.Threading.Thread.Abort%2A>, and <xref:System.Threading.ThreadState.AbortRequested> is added to the <xref:System.Threading.Thread.ThreadState%2A> property of the thread being aborted.</span></span> <span data-ttu-id="a51b5-315">Un <xref:System.Threading.ThreadAbortException> n’est pas levée dans le thread suspendu jusqu'à ce que <xref:System.Threading.Thread.Resume%2A> est appelée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-315">A <xref:System.Threading.ThreadAbortException> is not thrown in the suspended thread until <xref:System.Threading.Thread.Resume%2A> is called.</span></span>  
  
 <span data-ttu-id="a51b5-316">Si `Abort` est appelée sur un thread managé, tandis que l’exécution de code non managé, un `ThreadAbortException` n’est pas levée jusqu'à ce que le thread retourne au code managé.</span><span class="sxs-lookup"><span data-stu-id="a51b5-316">If `Abort` is called on a managed thread while it is executing unmanaged code, a `ThreadAbortException` is not thrown until the thread returns to managed code.</span></span>  
  
 <span data-ttu-id="a51b5-317">Si deux appels à `Abort` sont fournis en même temps, il est possible qu’un seul appel à définir les informations d’état et l’autre appel pour exécuter le `Abort`.</span><span class="sxs-lookup"><span data-stu-id="a51b5-317">If two calls to `Abort` come at the same time, it is possible for one call to set the state information and the other call to execute the `Abort`.</span></span> <span data-ttu-id="a51b5-318">Toutefois, une application ne peut pas détecter cette situation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-318">However, an application cannot detect this situation.</span></span>  
  
 <span data-ttu-id="a51b5-319">Après avoir `Abort` est appelé sur un thread, l’état du thread inclut <xref:System.Threading.ThreadState.AbortRequested>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-319">After `Abort` is invoked on a thread, the state of the thread includes <xref:System.Threading.ThreadState.AbortRequested>.</span></span> <span data-ttu-id="a51b5-320">Une fois que le thread s’est arrêté suite à un appel réussi à `Abort`, l’état du thread est passé à <xref:System.Threading.ThreadState.Stopped>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-320">After the thread has terminated as a result of a successful call to `Abort`, the state of the thread is changed to <xref:System.Threading.ThreadState.Stopped>.</span></span> <span data-ttu-id="a51b5-321">Avec des autorisations suffisantes, un thread qui est la cible d’une `Abort` peut annuler l’abandon à l’aide de la `ResetAbort` (méthode).</span><span class="sxs-lookup"><span data-stu-id="a51b5-321">With sufficient permissions, a thread that is the target of an `Abort` can cancel the abort using the `ResetAbort` method.</span></span> <span data-ttu-id="a51b5-322">Pour obtenir un exemple qui montre comment appeler le `ResetAbort` (méthode), consultez la `ThreadAbortException` classe.</span><span class="sxs-lookup"><span data-stu-id="a51b5-322">For an example that demonstrates calling the `ResetAbort` method, see the `ThreadAbortException` class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-323">L’exemple de code suivant montre comment transmettre des informations à un thread qui est en cours d’abandon.</span><span class="sxs-lookup"><span data-stu-id="a51b5-323">The following code example shows how to pass information to a thread that is being aborted.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Abort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Abort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Abort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="a51b5-324">.NET Core uniquement : ce membre n’est pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-324">.NET Core only: This member is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="a51b5-325">L'appelant n'a pas l'autorisation requise.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-325">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="a51b5-326">Le thread en cours d’abandon est actuellement suspendu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-326">The thread that is being aborted is currently suspended.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="a51b5-327">pour les opérations avancées sur les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-327">for advanced operations on threads.</span>
          </span>
          <span data-ttu-id="a51b5-328">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-328">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Threading.ThreadAbortException" />
        <altmember cref="F:System.Threading.ThreadState.Aborted" />
        <altmember cref="F:System.Threading.ThreadState.AbortRequested" />
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md">
          <span data-ttu-id="a51b5-329">Threads et threading</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-329">Threads and Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/using-threads-and-threading.md">
          <span data-ttu-id="a51b5-330">Utilisation des threads et du threading</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-330">Using threads and threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/destroying-threads.md">
          <span data-ttu-id="a51b5-331">Détruire des threads</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-331">Destroying threads</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="AllocateDataSlot">
      <MemberSignature Language="C#" Value="public static LocalDataStoreSlot AllocateDataSlot ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.LocalDataStoreSlot AllocateDataSlot() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.AllocateDataSlot" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateDataSlot () As LocalDataStoreSlot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static LocalDataStoreSlot ^ AllocateDataSlot();" />
      <MemberSignature Language="F#" Value="static member AllocateDataSlot : unit -&gt; LocalDataStoreSlot" Usage="System.Threading.Thread.AllocateDataSlot " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.LocalDataStoreSlot</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-332">Alloue sur tous les threads un emplacement de données sans nom.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-332">Allocates an unnamed data slot on all the threads.</span>
          </span>
          <span data-ttu-id="a51b5-333">Pour de meilleures performances, utilisez à la place les champs marqués avec l'attribut <see cref="T:System.ThreadStaticAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-333">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-334">Emplacement de données nommé alloué sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-334">The allocated named data slot on all threads.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="a51b5-335">Le .NET Framework fournit deux mécanismes pour utiliser le stockage local des threads (TLS) : les champs statiques relatifs à un thread (autrement dit, les champs qui sont marqués avec le <xref:System.ThreadStaticAttribute> attribut) et emplacements de données.</span><span class="sxs-lookup"><span data-stu-id="a51b5-335">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="a51b5-336">Les champs statiques relatifs à un thread fournissent de meilleures performances que les emplacements de données et activent la vérification de type au moment de la compilation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-336">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="a51b5-337">Pour plus d’informations sur l’utilisation de TLS, consultez [stockage Local des threads : champs statiques relatifs à un Thread et emplacements de données](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="a51b5-337">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="a51b5-338">L’emplacement est alloué sur tous les threads.</span><span class="sxs-lookup"><span data-stu-id="a51b5-338">The slot is allocated on all threads.</span></span>  
  
 <span data-ttu-id="a51b5-339">Threads utilisent un mécanisme de mémoire de magasin local pour stocker les données propres au thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-339">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="a51b5-340">Le common language runtime alloue un tableau de magasin de données à chaque processus lors de sa création.</span><span class="sxs-lookup"><span data-stu-id="a51b5-340">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="a51b5-341">Le thread peut allouer un emplacement de données dans le magasin de données, stockez et récupérez une données valeur dans l’emplacement et libérer l’emplacement pour une réutilisation après l’expiration du thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-341">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="a51b5-342">Emplacements de données sont uniques pour chaque thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-342">Data slots are unique per thread.</span></span> <span data-ttu-id="a51b5-343">Aucun autre thread (pas même un thread enfant) ne peut obtenir les données.</span><span class="sxs-lookup"><span data-stu-id="a51b5-343">No other thread (not even a child thread) can get that data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-344">Cette section contient deux exemples de code.</span><span class="sxs-lookup"><span data-stu-id="a51b5-344">This section contains two code examples.</span></span> <span data-ttu-id="a51b5-345">Le premier exemple montre comment utiliser un champ est marqué avec le <xref:System.ThreadStaticAttribute> attribut devant contenir les informations spécifiques aux threads.</span><span class="sxs-lookup"><span data-stu-id="a51b5-345">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="a51b5-346">Le deuxième exemple montre comment utiliser un emplacement de données pour faire la même chose.</span><span class="sxs-lookup"><span data-stu-id="a51b5-346">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="a51b5-347">**Premier exemple**</span><span class="sxs-lookup"><span data-stu-id="a51b5-347">**First Example**</span></span>  
  
 <span data-ttu-id="a51b5-348">L’exemple suivant montre comment utiliser un champ est marqué avec <xref:System.ThreadStaticAttribute> pour contenir des informations spécifiques au thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-348">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="a51b5-349">Cette technique offre de meilleures performances que la technique qui est indiquée dans le deuxième exemple.</span><span class="sxs-lookup"><span data-stu-id="a51b5-349">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="a51b5-350">**Deuxième exemple**</span><span class="sxs-lookup"><span data-stu-id="a51b5-350">**Second Example**</span></span>  
  
 <span data-ttu-id="a51b5-351">L’exemple de code suivant montre comment utiliser un emplacement de données pour stocker des informations spécifiques au thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-351">The following code example demonstrates how to use a data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md">
          <span data-ttu-id="a51b5-352">Threads et threading</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-352">Threads and Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md">
          <span data-ttu-id="a51b5-353">Stockage local des threads : champs statiques et emplacements de données relatifs à un thread</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-353">Thread Local Storage: Thread-Relative Static Fields and Data Slots</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="AllocateNamedDataSlot">
      <MemberSignature Language="C#" Value="public static LocalDataStoreSlot AllocateNamedDataSlot (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.LocalDataStoreSlot AllocateNamedDataSlot(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateNamedDataSlot (name As String) As LocalDataStoreSlot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static LocalDataStoreSlot ^ AllocateNamedDataSlot(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member AllocateNamedDataSlot : string -&gt; LocalDataStoreSlot" Usage="System.Threading.Thread.AllocateNamedDataSlot name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.LocalDataStoreSlot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="a51b5-354">Nom de l'emplacement de données à allouer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-354">The name of the data slot to be allocated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-355">Alloue sur tous les threads un emplacement de données nommé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-355">Allocates a named data slot on all threads.</span>
          </span>
          <span data-ttu-id="a51b5-356">Pour de meilleures performances, utilisez à la place les champs marqués avec l'attribut <see cref="T:System.ThreadStaticAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-356">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-357">Emplacement de données nommé alloué sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-357">The allocated named data slot on all threads.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="a51b5-358">Le .NET Framework fournit deux mécanismes pour utiliser le stockage local des threads (TLS) : les champs statiques relatifs à un thread (autrement dit, les champs qui sont marqués avec le <xref:System.ThreadStaticAttribute> attribut) et emplacements de données.</span><span class="sxs-lookup"><span data-stu-id="a51b5-358">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="a51b5-359">Les champs statiques relatifs à un thread fournissent de meilleures performances que les emplacements de données et activent la vérification de type au moment de la compilation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-359">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="a51b5-360">Pour plus d’informations sur l’utilisation de TLS, consultez [stockage Local des threads : champs statiques relatifs à un Thread et emplacements de données](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="a51b5-360">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="a51b5-361">Threads utilisent un mécanisme de mémoire de magasin local pour stocker les données propres au thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-361">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="a51b5-362">Le common language runtime alloue un tableau de magasin de données à chaque processus lors de sa création.</span><span class="sxs-lookup"><span data-stu-id="a51b5-362">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="a51b5-363">Le thread peut allouer un emplacement de données dans le magasin de données, stockez et récupérez une données valeur dans l’emplacement et libérer l’emplacement pour une réutilisation après l’expiration du thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-363">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="a51b5-364">Emplacements de données sont uniques pour chaque thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-364">Data slots are unique per thread.</span></span> <span data-ttu-id="a51b5-365">Aucun autre thread (pas même un thread enfant) ne peut obtenir les données.</span><span class="sxs-lookup"><span data-stu-id="a51b5-365">No other thread (not even a child thread) can get that data.</span></span>  
  
 <span data-ttu-id="a51b5-366">Il n’est pas nécessaire d’utiliser le <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> (méthode) à allouer un emplacement de données, car le <xref:System.Threading.Thread.GetNamedDataSlot%2A> méthode alloue l’emplacement s’il n’a pas déjà été alloué.</span><span class="sxs-lookup"><span data-stu-id="a51b5-366">It is not necessary to use the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method to allocate a named data slot, because the <xref:System.Threading.Thread.GetNamedDataSlot%2A> method allocates the slot if it has not already been allocated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-367">Si le <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> méthode est utilisée, elle doit être appelée dans le thread principal au démarrage du programme, car elle lève une exception si un emplacement avec le nom spécifié a déjà été alloué.</span><span class="sxs-lookup"><span data-stu-id="a51b5-367">If the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method is used, it should be called in the main thread at program startup, because it throws an exception if a slot with the specified name has already been allocated.</span></span> <span data-ttu-id="a51b5-368">Il n’existe aucun moyen pour déterminer si un emplacement a déjà été alloué.</span><span class="sxs-lookup"><span data-stu-id="a51b5-368">There is no way to test whether a slot has already been allocated.</span></span>  
  
 <span data-ttu-id="a51b5-369">Emplacements alloués avec cette méthode doivent être libérées avec <xref:System.Threading.Thread.FreeNamedDataSlot%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-369">Slots allocated with this method must be freed with <xref:System.Threading.Thread.FreeNamedDataSlot%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-370">Cette section contient deux exemples de code.</span><span class="sxs-lookup"><span data-stu-id="a51b5-370">This section contains two code examples.</span></span> <span data-ttu-id="a51b5-371">Le premier exemple montre comment utiliser un champ est marqué avec le <xref:System.ThreadStaticAttribute> attribut devant contenir les informations spécifiques aux threads.</span><span class="sxs-lookup"><span data-stu-id="a51b5-371">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="a51b5-372">Le deuxième exemple montre comment utiliser un emplacement de données pour faire la même chose.</span><span class="sxs-lookup"><span data-stu-id="a51b5-372">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="a51b5-373">**Premier exemple**</span><span class="sxs-lookup"><span data-stu-id="a51b5-373">**First Example**</span></span>  
  
 <span data-ttu-id="a51b5-374">L’exemple suivant montre comment utiliser un champ est marqué avec <xref:System.ThreadStaticAttribute> pour contenir des informations spécifiques au thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-374">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="a51b5-375">Cette technique offre de meilleures performances que la technique qui est indiquée dans le deuxième exemple.</span><span class="sxs-lookup"><span data-stu-id="a51b5-375">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="a51b5-376">**Deuxième exemple**</span><span class="sxs-lookup"><span data-stu-id="a51b5-376">**Second Example**</span></span>  
  
 <span data-ttu-id="a51b5-377">L’exemple suivant montre comment utiliser un emplacement de données pour stocker des informations spécifiques au thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-377">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-378">L’exemple de code n’utilise pas le <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> (méthode), car le <xref:System.Threading.Thread.GetNamedDataSlot%2A> méthode alloue l’emplacement s’il n’a pas déjà été alloué.</span><span class="sxs-lookup"><span data-stu-id="a51b5-378">The example code does not use the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method, because the <xref:System.Threading.Thread.GetNamedDataSlot%2A> method allocates the slot if it has not already been allocated.</span></span> <span data-ttu-id="a51b5-379">Si le <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> méthode est utilisée, elle doit être appelée dans le thread principal au démarrage du programme.</span><span class="sxs-lookup"><span data-stu-id="a51b5-379">If the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method is used, it should be called in the main thread at program startup.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a51b5-380">Un emplacement de données portant le nom spécifié existe déjà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-380">A named data slot with the specified name already exists.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md">
          <span data-ttu-id="a51b5-381">Threads et threading</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-381">Threads and Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md">
          <span data-ttu-id="a51b5-382">Stockage local des threads : champs statiques et emplacements de données relatifs à un thread</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-382">Thread Local Storage: Thread-Relative Static Fields and Data Slots</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ApartmentState">
      <MemberSignature Language="C#" Value="public System.Threading.ApartmentState ApartmentState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.ApartmentState ApartmentState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ApartmentState" />
      <MemberSignature Language="VB.NET" Value="Public Property ApartmentState As ApartmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ApartmentState ApartmentState { System::Threading::ApartmentState get(); void set(System::Threading::ApartmentState value); };" />
      <MemberSignature Language="F#" Value="member this.ApartmentState : System.Threading.ApartmentState with get, set" Usage="System.Threading.Thread.ApartmentState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Deprecated in favor of GetApartmentState, SetApartmentState and TrySetApartmentState.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8">
          <AttributeName>System.Obsolete("The ApartmentState property has been deprecated.  Use GetApartmentState, SetApartmentState or TrySetApartmentState instead.", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ApartmentState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-383">Obtient ou définit l'état de cloisonnement de ce thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-383">Gets or sets the apartment state of this thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a51b5-384">Une des valeurs de <see cref="T:System.Threading.ApartmentState" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-384">One of the <see cref="T:System.Threading.ApartmentState" /> values.</span>
          </span>
          <span data-ttu-id="a51b5-385">La valeur initiale est <see langword="Unknown" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-385">The initial value is <see langword="Unknown" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-386">**Le <xref:System.Threading.Thread.ApartmentState%2A> propriété est obsolète.**</span><span class="sxs-lookup"><span data-stu-id="a51b5-386">**The <xref:System.Threading.Thread.ApartmentState%2A> property is obsolete.**</span></span>  <span data-ttu-id="a51b5-387">Les alternatives non obsolète sont le <xref:System.Threading.Thread.GetApartmentState%2A> méthode pour récupérer l’état de cloisonnement et le <xref:System.Threading.Thread.SetApartmentState%2A> pour définir l’état de cloisonnement.</span><span class="sxs-lookup"><span data-stu-id="a51b5-387">The non-obsolete alternatives are the <xref:System.Threading.Thread.GetApartmentState%2A> method to retrieve the apartment state and the   <xref:System.Threading.Thread.SetApartmentState%2A> method to set the apartment state.</span></span>  
  
 <span data-ttu-id="a51b5-388">Dans les versions de .NET Framework 1.0 et 1.1, le `ApartmentState` propriété marque un thread pour indiquer qu’il s’exécute dans un cloisonnement monothread ou multithread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-388">In the .NET Framework versions 1.0 and 1.1, the `ApartmentState` property marks a thread to indicate that it will execute in a single-threaded or multithreaded apartment.</span></span> <span data-ttu-id="a51b5-389">Cette propriété peut être définie lorsque le thread est dans le `Unstarted` ou `Running` thread état ; Toutefois, elle peut être définie qu’une seule fois pour un thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-389">This property can be set when the thread is in the `Unstarted` or `Running` thread state; however, it can be set only once for a thread.</span></span> <span data-ttu-id="a51b5-390">Si la propriété n’a pas été définie, elle retourne `Unknown`.</span><span class="sxs-lookup"><span data-stu-id="a51b5-390">If the property has not been set, it returns `Unknown`.</span></span>  
  
 <span data-ttu-id="a51b5-391">Une tentative d’utilisation le <xref:System.Threading.Thread.ApartmentState%2A> propriété à définir l’état de cloisonnement d’un thread dont l’état de cloisonnement a déjà été défini est ignorée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-391">An attempt to use the <xref:System.Threading.Thread.ApartmentState%2A> property to set the apartment state of a thread whose apartment state has already been set is ignored.</span></span> <span data-ttu-id="a51b5-392">Toutefois, le <xref:System.Threading.Thread.SetApartmentState%2A> méthode lève un <xref:System.InvalidOperationException> dans ce cas.</span><span class="sxs-lookup"><span data-stu-id="a51b5-392">However, the <xref:System.Threading.Thread.SetApartmentState%2A> method throws a <xref:System.InvalidOperationException> in this case.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a51b5-393">Dans le .NET Framework version 2.0, les nouveaux threads sont initialisés en tant que <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> si leur état de cloisonnement n’a pas été défini avant leur démarrage.</span><span class="sxs-lookup"><span data-stu-id="a51b5-393">In the .NET Framework version 2.0, new threads are initialized as <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> if their apartment state has not been set before they are started.</span></span> <span data-ttu-id="a51b5-394">Le thread principal de l’application est initialisé à <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> par défaut.</span><span class="sxs-lookup"><span data-stu-id="a51b5-394">The main application thread is initialized to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> by default.</span></span> <span data-ttu-id="a51b5-395">Vous ne pouvez plus définir le thread principal de l’application <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> en définissant le <xref:System.Threading.ApartmentState?displayProperty=nameWithType> propriété sur la première ligne de code.</span><span class="sxs-lookup"><span data-stu-id="a51b5-395">You can no longer set the main application thread to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> by setting the <xref:System.Threading.ApartmentState?displayProperty=nameWithType> property on the first line of code.</span></span> <span data-ttu-id="a51b5-396">Utilisez le <xref:System.STAThreadAttribute> à la place.</span><span class="sxs-lookup"><span data-stu-id="a51b5-396">Use the <xref:System.STAThreadAttribute> instead.</span></span>  
  
 <span data-ttu-id="a51b5-397">Dans le .NET Framework version 2.0, vous pouvez spécifier le modèle pour une application C++ à l’aide de thread COM le [/CLRTHREADATTRIBUTE (définir l’attribut de Thread CLR)](http://msdn.microsoft.com/library/4907e9ef-5031-446c-aecf-0a0b32fae1e8) option de l’éditeur de liens.</span><span class="sxs-lookup"><span data-stu-id="a51b5-397">In the .NET Framework version 2.0, you can specify the COM threading model for a C++ application using the [/CLRTHREADATTRIBUTE (Set CLR Thread Attribute)](http://msdn.microsoft.com/library/4907e9ef-5031-446c-aecf-0a0b32fae1e8) linker option.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-398">L’exemple de code suivant montre comment définir l’état de cloisonnement d’un thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-398">The following code example demonstrates how to set the apartment state of a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.ApartmentState/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.ApartmentState/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.ApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.ApartmentState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a51b5-399">Une tentative est effectuée pour définir cette propriété sur un état qui n’est pas un état de cloisonnement valide (un état autre que celui de thread unique cloisonné (<see langword="STA" />) ou de multithread cloisonné (<see langword="MTA" />)).</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-399">An attempt is made to set this property to a state that is not a valid apartment state (a state other than single-threaded apartment (<see langword="STA" />) or multithreaded apartment (<see langword="MTA" />)).</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.ThreadState" />
        <altmember cref="M:System.Threading.Thread.GetApartmentState" />
        <altmember cref="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)" />
      </Docs>
    </Member>
    <Member MemberName="BeginCriticalRegion">
      <MemberSignature Language="C#" Value="public static void BeginCriticalRegion ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeginCriticalRegion() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.BeginCriticalRegion" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BeginCriticalRegion ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BeginCriticalRegion();" />
      <MemberSignature Language="F#" Value="static member BeginCriticalRegion : unit -&gt; unit" Usage="System.Threading.Thread.BeginCriticalRegion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-400">Avertit un hôte que l'exécution est sur le point d'entrer dans une zone de code dans laquelle les effets d'un abandon de thread ou d'une exception non gérée peuvent compromettre d'autres tâches dans le domaine d'application.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-400">Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception might jeopardize other tasks in the application domain.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-401">Les hôtes du common language runtime (CLR), tel que Microsoft SQL Server 2005, peuvent établir des stratégies différentes pour les erreurs dans les régions de code critiques et non critiques.</span><span class="sxs-lookup"><span data-stu-id="a51b5-401">Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code.</span></span> <span data-ttu-id="a51b5-402">Une zone critique est un dans lesquels les effets d’un abandon de thread ou une exception non gérée ne peuvent pas être limités à la tâche actuelle.</span><span class="sxs-lookup"><span data-stu-id="a51b5-402">A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task.</span></span> <span data-ttu-id="a51b5-403">En revanche, un abandon ou une défaillance dans une région de code non critique affecte uniquement la tâche dans laquelle l’erreur se produit.</span><span class="sxs-lookup"><span data-stu-id="a51b5-403">By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.</span></span>  
  
 <span data-ttu-id="a51b5-404">Par exemple, considérez une tâche qui tente d’allouer de la mémoire tout en maintenant un verrou.</span><span class="sxs-lookup"><span data-stu-id="a51b5-404">For example, consider a task that attempts to allocate memory while holding a lock.</span></span> <span data-ttu-id="a51b5-405">Si l’allocation de mémoire échoue, l’abandon de la tâche en cours n’est pas suffisante pour assurer la stabilité de le <xref:System.AppDomain>, car il peut y avoir des autres tâches dans le domaine en attente pour le même verrou.</span><span class="sxs-lookup"><span data-stu-id="a51b5-405">If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <xref:System.AppDomain>, because there can be other tasks in the domain waiting for the same lock.</span></span> <span data-ttu-id="a51b5-406">Si la tâche en cours est arrêtée, les autres tâches peuvent être bloquées.</span><span class="sxs-lookup"><span data-stu-id="a51b5-406">If the current task is terminated, other tasks could be deadlocked.</span></span>  
  
 <span data-ttu-id="a51b5-407">En cas de défaillance dans une zone critique, l’hôte peut décider de décharger l’intégralité de <xref:System.AppDomain> plutôt que de prendre le risque de continuer l’exécution dans un état potentiellement instable.</span><span class="sxs-lookup"><span data-stu-id="a51b5-407">When a failure occurs in a critical region, the host might decide to unload the entire <xref:System.AppDomain> rather than take the risk of continuing execution in a potentially unstable state.</span></span> <span data-ttu-id="a51b5-408">Pour informer l’hôte que votre code entre dans une zone critique, appelez <xref:System.Threading.Thread.BeginCriticalRegion%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-408">To inform the host that your code is entering a critical region, call <xref:System.Threading.Thread.BeginCriticalRegion%2A>.</span></span> <span data-ttu-id="a51b5-409">Appelez <xref:System.Threading.Thread.EndCriticalRegion%2A> lorsque l’exécution retourne dans une région non critique de code.</span><span class="sxs-lookup"><span data-stu-id="a51b5-409">Call <xref:System.Threading.Thread.EndCriticalRegion%2A> when execution returns to a non-critical region of code.</span></span>  
  
 <span data-ttu-id="a51b5-410">À l’aide de cette méthode dans le code qui s’exécute sous SQL Server 2005 nécessite le code à exécuter sur le niveau de protection de l’hôte le plus élevé.</span><span class="sxs-lookup"><span data-stu-id="a51b5-410">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-411">L’exemple suivant illustre l’utilisation de la <xref:System.Threading.Thread.BeginCriticalRegion%2A> et <xref:System.Threading.Thread.EndCriticalRegion%2A> méthodes pour diviser un bloc de code en régions critiques et non critiques.</span><span class="sxs-lookup"><span data-stu-id="a51b5-411">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginCriticalRegion%2A> and <xref:System.Threading.Thread.EndCriticalRegion%2A> methods to divide a block of code into critical and non-critical regions.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.EndCriticalRegion" />
      </Docs>
    </Member>
    <Member MemberName="BeginThreadAffinity">
      <MemberSignature Language="C#" Value="public static void BeginThreadAffinity ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeginThreadAffinity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.BeginThreadAffinity" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BeginThreadAffinity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BeginThreadAffinity();" />
      <MemberSignature Language="F#" Value="static member BeginThreadAffinity : unit -&gt; unit" Usage="System.Threading.Thread.BeginThreadAffinity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-412">Avertit un hôte que le code managé est sur le point d'exécuter des instructions qui dépendent de l'identité du thread du système d'exploitation physique actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-412">Notifies a host that managed code is about to execute instructions that depend on the identity of the current physical operating system thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-413">Certains hôtes du common language runtime, tels que Microsoft SQL Server 2005, fournissent leur propre gestion de threads.</span><span class="sxs-lookup"><span data-stu-id="a51b5-413">Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management.</span></span> <span data-ttu-id="a51b5-414">Un hôte qui fournit sa propre gestion des threads peut déplacer une tâche en cours d’exécution d’un thread de système d’exploitation physique vers un autre à tout moment.</span><span class="sxs-lookup"><span data-stu-id="a51b5-414">A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time.</span></span> <span data-ttu-id="a51b5-415">La plupart des tâches ne sont pas affectées par ce basculement.</span><span class="sxs-lookup"><span data-stu-id="a51b5-415">Most tasks are not affected by this switching.</span></span> <span data-ttu-id="a51b5-416">Toutefois, certaines tâches ont une affinité de thread : autrement dit, ils dépendent de l’identité d’un thread de système d’exploitation physique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-416">However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread.</span></span> <span data-ttu-id="a51b5-417">Ces tâches doivent informer l’hôte lorsqu’elles exécutent du code qui ne doit pas être basculée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-417">These tasks must inform the host when they execute code that should not be switched.</span></span>  
  
 <span data-ttu-id="a51b5-418">Par exemple, si votre application appelle une API système pour acquérir un système d’exploitation de verrouillage qui possède l’affinité de thread, telles que Win32 CRITICAL_SECTION, vous devez appeler <xref:System.Threading.Thread.BeginThreadAffinity%2A> avant d’acquérir le verrou, et <xref:System.Threading.Thread.EndThreadAffinity%2A> après l’avoir libéré le verrou.</span><span class="sxs-lookup"><span data-stu-id="a51b5-418">For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call <xref:System.Threading.Thread.BeginThreadAffinity%2A> before acquiring the lock, and <xref:System.Threading.Thread.EndThreadAffinity%2A> after releasing the lock.</span></span>  
  
 <span data-ttu-id="a51b5-419">À l’aide de cette méthode dans le code qui s’exécute sous SQL Server 2005 nécessite le code à exécuter sur le niveau de protection de l’hôte le plus élevé.</span><span class="sxs-lookup"><span data-stu-id="a51b5-419">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-420">L’exemple suivant illustre l’utilisation de la <xref:System.Threading.Thread.BeginThreadAffinity%2A> et <xref:System.Threading.Thread.EndThreadAffinity%2A> méthodes pour avertir un hôte qu’un bloc de code dépend de l’identité d’un thread de système d’exploitation physique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-420">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginThreadAffinity%2A> and <xref:System.Threading.Thread.EndThreadAffinity%2A> methods to notify a host that a block of code depends on the identity of a physical operating system thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="a51b5-421">L'appelant n'a pas l'autorisation requise.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-421">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="a51b5-422">requiert une confiance totale pour l’appelant immédiat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-422">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="a51b5-423">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-423">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Threading.Thread.EndThreadAffinity" />
      </Docs>
    </Member>
    <Member MemberName="CurrentContext">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.Contexts.Context CurrentContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Runtime.Remoting.Contexts.Context CurrentContext" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentContext As Context" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::Remoting::Contexts::Context ^ CurrentContext { System::Runtime::Remoting::Contexts::Context ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentContext : System.Runtime.Remoting.Contexts.Context" Usage="System.Threading.Thread.CurrentContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Contexts.Context</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-424">Obtient le contexte actuel dans lequel le thread s'exécute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-424">Gets the current context in which the thread is executing.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a51b5-425">
            <see cref="T:System.Runtime.Remoting.Contexts.Context" /> représentant le contexte actuel du thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-425">A <see cref="T:System.Runtime.Remoting.Contexts.Context" /> representing the current thread context.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="a51b5-426">L'appelant n'a pas l'autorisation requise.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-426">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="a51b5-427">requiert une confiance totale pour l’appelant immédiat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-427">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="a51b5-428">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-428">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo CurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Threading.Thread.CurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-429">Obtient ou définit la culture du thread actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-429">Gets or sets the culture for the current thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a51b5-430">Objet qui représente la culture du thread actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-430">An object that represents the culture for the current thread.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-431">Le <xref:System.Globalization.CultureInfo> objet qui est retourné par cette propriété, ainsi que ses objets associés, déterminer le format par défaut pour les dates, heures, nombres, les valeurs de devise, l’ordre de tri du texte, conventions de casse et les comparaisons de chaînes.</span><span class="sxs-lookup"><span data-stu-id="a51b5-431">The <xref:System.Globalization.CultureInfo> object that is returned by this property, together with its associated objects, determine the default format for dates, times, numbers, currency values, the sorting order of text, casing conventions, and string comparisons.</span></span> <span data-ttu-id="a51b5-432">Consultez la <xref:System.Globalization.CultureInfo> classe pour en savoir plus sur les noms de culture et les identificateurs, les différences entre les cultures invariants, neutres et spécifiques, ainsi que les façon dont les informations de culture affectent les domaines d’application et les threads.</span><span class="sxs-lookup"><span data-stu-id="a51b5-432">See the <xref:System.Globalization.CultureInfo> class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains.</span></span> <span data-ttu-id="a51b5-433">Consultez le <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriété pour savoir comment est déterminée la culture par défaut d’un thread, et comment les utilisateurs définir les informations de culture pour leurs ordinateurs.</span><span class="sxs-lookup"><span data-stu-id="a51b5-433">See the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> property to learn how a thread's default culture is determined, and how users set culture information for their computers.</span></span>  
  
 <span data-ttu-id="a51b5-434">Compter les [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], vous pouvez définir le <xref:System.Threading.Thread.CurrentCulture%2A> propriété à une culture neutre.</span><span class="sxs-lookup"><span data-stu-id="a51b5-434">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you can set the <xref:System.Threading.Thread.CurrentCulture%2A> property to a neutral culture.</span></span> <span data-ttu-id="a51b5-435">Il s’agit, car le comportement de la <xref:System.Globalization.CultureInfo> classe a été modifiée : quand elle représente une culture neutre, ses valeurs de propriété (en particulier, le <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, et <xref:System.Globalization.CultureInfo.TextInfo%2A> propriétés) maintenant reflète la culture spécifique associée à la culture neutre.</span><span class="sxs-lookup"><span data-stu-id="a51b5-435">This is because the behavior of the <xref:System.Globalization.CultureInfo> class has changed: When it represents a neutral culture, its property values (in particular, the <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, and <xref:System.Globalization.CultureInfo.TextInfo%2A> properties) now reflect the specific culture that is associated with the neutral culture.</span></span> <span data-ttu-id="a51b5-436">Dans les versions antérieures du .NET Framework, le <xref:System.Threading.Thread.CurrentCulture%2A> propriété a levé une <xref:System.NotSupportedException> exception lorsqu’une culture neutre a été affectée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-436">In earlier versions of the .NET Framework, the <xref:System.Threading.Thread.CurrentCulture%2A> property threw a <xref:System.NotSupportedException> exception when a neutral culture was assigned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-437">L’exemple de code suivant montre l’instruction de thread qui permet à l’interface utilisateur d’un formulaire Windows à afficher dans la culture qui est définie dans le panneau de configuration.</span><span class="sxs-lookup"><span data-stu-id="a51b5-437">The following code example shows the threading statement that allows the user interface of a Windows Forms to display in the culture that is set in Control Panel.</span></span> <span data-ttu-id="a51b5-438">Code supplémentaire est nécessaire.</span><span class="sxs-lookup"><span data-stu-id="a51b5-438">Additional code is needed.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Culture#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Culture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Culture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Culture/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a51b5-439">La propriété est définie sur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-439">The property is set to <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="a51b5-440">Pour définir la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-440">for setting the property.</span>
          </span>
          <span data-ttu-id="a51b5-441">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-441">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="CurrentPrincipal">
      <MemberSignature Language="C#" Value="public static System.Security.Principal.IPrincipal CurrentPrincipal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Security.Principal.IPrincipal CurrentPrincipal" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentPrincipal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentPrincipal As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Security::Principal::IPrincipal ^ CurrentPrincipal { System::Security::Principal::IPrincipal ^ get(); void set(System::Security::Principal::IPrincipal ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentPrincipal : System.Security.Principal.IPrincipal with get, set" Usage="System.Threading.Thread.CurrentPrincipal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-442">Obtient ou définit le principal actuel du thread (pour une sécurité basée sur les rôles).</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-442">Gets or sets the thread's current principal (for role-based security).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a51b5-443">Valeur <see cref="T:System.Security.Principal.IPrincipal" /> représentant le contexte de sécurité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-443">An <see cref="T:System.Security.Principal.IPrincipal" /> value representing the security context.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a51b5-444">L’exemple de code suivant montre comment définir et récupérer l’entité de sécurité d’un thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-444">The following code example shows how to set and retrieve the principal of a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.CurrentPrincipal#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.CurrentPrincipal/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.CurrentPrincipal#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.CurrentPrincipal/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.CurrentPrincipal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.CurrentPrincipal/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="a51b5-445">L’appelant n’a pas l’autorisation nécessaire pour définir le principal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-445">The caller does not have the permission required to set the principal.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="a51b5-446">pour manipuler l’objet principal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-446">to manipulate the principal object.</span>
          </span>
          <span data-ttu-id="a51b5-447">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-447">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="CurrentThread">
      <MemberSignature Language="C#" Value="public static System.Threading.Thread CurrentThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Thread CurrentThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentThread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Thread ^ CurrentThread { System::Threading::Thread ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentThread : System.Threading.Thread" Usage="System.Threading.Thread.CurrentThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-448">Obtient le thread en cours d'exécution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-448">Gets the currently running thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a51b5-449">
            <see cref="T:System.Threading.Thread" /> constituant la représentation du thread en cours d'exécution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-449">A <see cref="T:System.Threading.Thread" /> that is the representation of the currently running thread.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a51b5-450">L’exemple suivant crée une tâche qui crée à son tour 20 tâches enfants.</span><span class="sxs-lookup"><span data-stu-id="a51b5-450">The following example creates a task that in turn creates 20 child tasks.</span></span> <span data-ttu-id="a51b5-451">L’application elle-même, en tant que bien que chaque tâche, appelle le `ShowThreadInformation` (méthode), qui utilise le <xref:System.Threading.Thread.CurrentThread%2A> propriété à afficher des informations sur le thread sur lequel il est en cours d’exécution.</span><span class="sxs-lookup"><span data-stu-id="a51b5-451">The application itself, as well as each task, calls the `ShowThreadInformation` method, which uses the <xref:System.Threading.Thread.CurrentThread%2A> property  to display information about the thread on which it is running.</span></span>  
  
 [!code-csharp[System.Threading.Thread.CurrentThread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.currentthread/cs/currentthread2.cs#1)]
 [!code-vb[System.Threading.Thread.CurrentThread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.currentthread/vb/currentthread2.vb#1)]  
  
 <span data-ttu-id="a51b5-452">Chaque tâche enfant génère 1 million de nombres aléatoires compris entre 1 et 1 million et retourne leur moyenne.</span><span class="sxs-lookup"><span data-stu-id="a51b5-452">Each child task generates 1 million random numbers between 1 and 1 million and returns their mean.</span></span> <span data-ttu-id="a51b5-453">Les appels de la tâche parent la <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> méthode pour vous assurer que les tâches enfants terminées avant d’afficher la moyenne retournée par chaque tâche et en calculant la moyenne des moyens.</span><span class="sxs-lookup"><span data-stu-id="a51b5-453">The parent task calls the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method to ensure that the child tasks have completed before displaying the mean returned by each task and calculating the mean of means.</span></span>  
  
 <span data-ttu-id="a51b5-454">Notez que pendant que l’application s’exécute sur un thread de premier plan, chaque tâche s’exécute sur un thread de pool de threads.</span><span class="sxs-lookup"><span data-stu-id="a51b5-454">Note that while the application runs on a foreground thread, each task runs on a thread pool thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo CurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Threading.Thread.CurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-455">Obtient ou définit la culture actuelle utilisée par le Gestionnaire de ressources pour rechercher des ressources spécifiques à la culture au moment de l'exécution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-455">Gets or sets the current culture used by the Resource Manager to look up culture-specific resources at run time.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a51b5-456">Objet qui représente la culture actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-456">An object that represents the current culture.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-457">La culture d’interface utilisateur spécifie les ressources d’une application doit prendre en charge l’entrée d’utilisateur et de sortie et par défaut est identique à la culture du système d’exploitation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-457">The UI culture specifies the resources an application needs to support user input and output, and by default is the same as the operating system culture.</span></span> <span data-ttu-id="a51b5-458">Consultez la <xref:System.Globalization.CultureInfo> classe pour en savoir plus sur les noms de culture et les identificateurs, les différences entre les cultures invariants, neutres et spécifiques, ainsi que les façon dont les informations de culture affectent les domaines d’application et les threads.</span><span class="sxs-lookup"><span data-stu-id="a51b5-458">See the <xref:System.Globalization.CultureInfo> class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains.</span></span> <span data-ttu-id="a51b5-459">Consultez le <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriété pour en savoir plus de la détermination de la culture d’interface utilisateur d’un thread par défaut.</span><span class="sxs-lookup"><span data-stu-id="a51b5-459">See the <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> property to learn how a thread's default UI culture is determined.</span></span>  
  
 <span data-ttu-id="a51b5-460">Le <xref:System.Globalization.CultureInfo> retourné par cette propriété peut être une culture neutre.</span><span class="sxs-lookup"><span data-stu-id="a51b5-460">The <xref:System.Globalization.CultureInfo> returned by this property can be a neutral culture.</span></span> <span data-ttu-id="a51b5-461">Cultures neutres ne doivent pas être utilisées avec mise en forme de méthodes telles que <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, et <xref:System.Convert.ToString%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-461">Neutral cultures should not be used with formatting methods such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, and <xref:System.Convert.ToString%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a51b5-462">Utiliser le <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> méthode pour obtenir une culture spécifique, ou utilisez le <xref:System.Threading.Thread.CurrentCulture%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="a51b5-462">Use the <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> method to get a specific culture, or use the <xref:System.Threading.Thread.CurrentCulture%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-463">Le <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> méthode lève une exception <xref:System.ArgumentException> pour les cultures neutres « zh-Hant » (« zh-CHT ») et « zh-Hans » (« zh-CHS »).</span><span class="sxs-lookup"><span data-stu-id="a51b5-463">The <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> method throws <xref:System.ArgumentException> for the neutral cultures "zh-Hant" ("zh-CHT") and "zh-Hans" ("zh-CHS").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-464">L’exemple suivant détermine si la langue de la culture d’interface utilisateur du thread actuel est le Français.</span><span class="sxs-lookup"><span data-stu-id="a51b5-464">The following example determines whether the language of the current thread's UI culture is French.</span></span> <span data-ttu-id="a51b5-465">Si elle n’est pas le cas, il définit la culture d’interface utilisateur du thread actuel vers l’anglais (États-Unis).</span><span class="sxs-lookup"><span data-stu-id="a51b5-465">If it is not, it sets the UI culture of the current thread to English (United States).</span></span>  
  
 [!code-csharp[System.Threading.Thread.CurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread.CurrentUICulture/cs/CurrentUICulture1.cs#1)]
 [!code-vb[System.Threading.Thread.CurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread.CurrentUICulture/vb/CurrentUICulture1.vb#1)]  
  
 <span data-ttu-id="a51b5-466">L’exemple de code suivant montre l’instruction de thread qui permet à l’interface utilisateur d’un formulaire Windows à afficher dans la culture qui est définie dans le panneau de configuration.</span><span class="sxs-lookup"><span data-stu-id="a51b5-466">The following code example shows the threading statement that allows the user interface of a Windows Forms to display in the culture that is set in Control Panel.</span></span> <span data-ttu-id="a51b5-467">Code supplémentaire est nécessaire.</span><span class="sxs-lookup"><span data-stu-id="a51b5-467">Additional code is needed.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Culture#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Culture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Culture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Culture/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a51b5-468">La propriété est définie sur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-468">The property is set to <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a51b5-469">La propriété a la valeur d’un nom de culture qui ne peut pas être utilisé pour localiser un fichier de ressources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-469">The property is set to a culture name that cannot be used to locate a resource file.</span>
          </span>
          <span data-ttu-id="a51b5-470">Les noms de fichiers des ressources doivent inclure uniquement des lettres, des chiffres, des traits d’union ou des traits de soulignement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-470">Resource filenames must include only letters, numbers, hyphens or underscores.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DisableComObjectEagerCleanup">
      <MemberSignature Language="C#" Value="public void DisableComObjectEagerCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DisableComObjectEagerCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.DisableComObjectEagerCleanup" />
      <MemberSignature Language="VB.NET" Value="Public Sub DisableComObjectEagerCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DisableComObjectEagerCleanup();" />
      <MemberSignature Language="F#" Value="member this.DisableComObjectEagerCleanup : unit -&gt; unit" Usage="thread.DisableComObjectEagerCleanup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-471">Désactive le nettoyage automatique des wrappers RCW (Runtime Callable Wrapper) pour le thread actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-471">Turns off automatic cleanup of runtime callable wrappers (RCW) for the current thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-472">Par défaut, le common language runtime (CLR) nettoie automatiquement les wrappers RCW.</span><span class="sxs-lookup"><span data-stu-id="a51b5-472">By default, the common language runtime (CLR) cleans up runtime callable wrappers automatically.</span></span> <span data-ttu-id="a51b5-473">Les CLR pompe des messages pendant le nettoyage, ce qui peut provoquer des problèmes de réentrance pour quelques applications qui répondent aux critères inhabituels suivants :</span><span class="sxs-lookup"><span data-stu-id="a51b5-473">The CLR pumps messages during the cleanup, which might cause reentrancy problems for a few applications that meet the following unusual criteria:</span></span>  
  
-   <span data-ttu-id="a51b5-474">L’application effectue son propre pompage des messages.</span><span class="sxs-lookup"><span data-stu-id="a51b5-474">The application does its own message pumping.</span></span>  
  
-   <span data-ttu-id="a51b5-475">L’application doit contrôler précisément lorsque le pompage de messages se produit.</span><span class="sxs-lookup"><span data-stu-id="a51b5-475">The application needs to control precisely when message pumping occurs.</span></span>  
  
 <span data-ttu-id="a51b5-476">Ces applications peuvent utiliser le <xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A> méthode pour empêcher le CLR d’effectuer une récupération automatique du runtime callable wrapper.</span><span class="sxs-lookup"><span data-stu-id="a51b5-476">Such applications can use the <xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A> method to prevent the CLR from doing automatic reclamation of runtime callable wrappers.</span></span>  
  
 <span data-ttu-id="a51b5-477">Lorsque cette méthode a été appelée sur un thread, le nettoyage automatique ne peut pas être réactivé pour ce thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-477">When this method has been called on a thread, automatic cleanup cannot be re-enabled for that thread.</span></span> <span data-ttu-id="a51b5-478">Lorsque votre application est prête nettoyer les wrappers RCW, utilisez le <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A?displayProperty=nameWithType> méthode pour demander au runtime de nettoyer tous les wrappers RCW dans le contexte actuel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-478">When your application is ready to clean up runtime callable wrappers, use the <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A?displayProperty=nameWithType> method to instruct the runtime to clean up all runtime callable wrappers in the current context.</span></span> <span data-ttu-id="a51b5-479">Pompage de messages se produit pendant que la méthode s’exécute.</span><span class="sxs-lookup"><span data-stu-id="a51b5-479">Message pumping occurs while the method executes.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="a51b5-480">requiert une confiance totale pour l’appelant immédiat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-480">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="a51b5-481">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-481">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="EndCriticalRegion">
      <MemberSignature Language="C#" Value="public static void EndCriticalRegion ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndCriticalRegion() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.EndCriticalRegion" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EndCriticalRegion ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EndCriticalRegion();" />
      <MemberSignature Language="F#" Value="static member EndCriticalRegion : unit -&gt; unit" Usage="System.Threading.Thread.EndCriticalRegion " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-482">Avertit un hôte que l’exécution est sur le point d’entrer dans une zone de code dans laquelle les effets d’un abandon de thread ou d’une exception non gérée sont limités à la tâche actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-482">Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception are limited to the current task.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-483">Les hôtes du common language runtime (CLR), tel que Microsoft SQL Server 2005, peuvent établir des stratégies différentes pour les erreurs dans les régions de code critiques et non critiques.</span><span class="sxs-lookup"><span data-stu-id="a51b5-483">Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code.</span></span> <span data-ttu-id="a51b5-484">Une zone critique est un dans lesquels les effets d’un abandon de thread ou une exception non gérée ne peuvent pas être limités à la tâche actuelle.</span><span class="sxs-lookup"><span data-stu-id="a51b5-484">A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task.</span></span> <span data-ttu-id="a51b5-485">En revanche, un abandon ou une défaillance dans une région de code non critique affecte uniquement la tâche dans laquelle l’erreur se produit.</span><span class="sxs-lookup"><span data-stu-id="a51b5-485">By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.</span></span>  
  
 <span data-ttu-id="a51b5-486">Par exemple, considérez une tâche qui tente d’allouer de la mémoire tout en maintenant un verrou.</span><span class="sxs-lookup"><span data-stu-id="a51b5-486">For example, consider a task that attempts to allocate memory while holding a lock.</span></span> <span data-ttu-id="a51b5-487">Si l’allocation de mémoire échoue, l’abandon de la tâche en cours n’est pas suffisante pour assurer la stabilité de le <xref:System.AppDomain>, car il peut y avoir des autres tâches dans le domaine en attente pour le même verrou.</span><span class="sxs-lookup"><span data-stu-id="a51b5-487">If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <xref:System.AppDomain>, because there can be other tasks in the domain waiting for the same lock.</span></span> <span data-ttu-id="a51b5-488">Si la tâche en cours est arrêtée, les autres tâches peuvent être bloquées.</span><span class="sxs-lookup"><span data-stu-id="a51b5-488">If the current task is terminated, other tasks could be deadlocked.</span></span>  
  
 <span data-ttu-id="a51b5-489">En cas de défaillance dans une zone critique, l’hôte peut décider de décharger l’intégralité de <xref:System.AppDomain> plutôt que de prendre le risque de continuer l’exécution dans un état potentiellement instable.</span><span class="sxs-lookup"><span data-stu-id="a51b5-489">When a failure occurs in a critical region, the host might decide to unload the entire <xref:System.AppDomain> rather than take the risk of continuing execution in a potentially unstable state.</span></span> <span data-ttu-id="a51b5-490">Pour informer l’hôte que votre code entre dans une zone critique, appelez <xref:System.Threading.Thread.BeginCriticalRegion%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-490">To inform the host that your code is entering a critical region, call <xref:System.Threading.Thread.BeginCriticalRegion%2A>.</span></span> <span data-ttu-id="a51b5-491">Appelez <xref:System.Threading.Thread.EndCriticalRegion%2A> lorsque l’exécution retourne dans une région non critique de code.</span><span class="sxs-lookup"><span data-stu-id="a51b5-491">Call <xref:System.Threading.Thread.EndCriticalRegion%2A> when execution returns to a non-critical region of code.</span></span>  
  
 <span data-ttu-id="a51b5-492">À l’aide de cette méthode dans le code qui s’exécute sous SQL Server 2005 nécessite le code à exécuter sur le niveau de protection de l’hôte le plus élevé.</span><span class="sxs-lookup"><span data-stu-id="a51b5-492">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-493">L’exemple suivant illustre l’utilisation de la <xref:System.Threading.Thread.BeginCriticalRegion%2A> et <xref:System.Threading.Thread.EndCriticalRegion%2A> méthodes pour diviser un bloc de code en régions critiques et non critiques.</span><span class="sxs-lookup"><span data-stu-id="a51b5-493">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginCriticalRegion%2A> and <xref:System.Threading.Thread.EndCriticalRegion%2A> methods to divide a block of code into critical and non-critical regions.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.BeginCriticalRegion" />
      </Docs>
    </Member>
    <Member MemberName="EndThreadAffinity">
      <MemberSignature Language="C#" Value="public static void EndThreadAffinity ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndThreadAffinity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.EndThreadAffinity" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EndThreadAffinity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EndThreadAffinity();" />
      <MemberSignature Language="F#" Value="static member EndThreadAffinity : unit -&gt; unit" Usage="System.Threading.Thread.EndThreadAffinity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-494">Avertit un hôte que le code managé a terminé l'exécution des instructions qui dépendent de l'identité du thread du système d'exploitation physique actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-494">Notifies a host that managed code has finished executing instructions that depend on the identity of the current physical operating system thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-495">Certains hôtes du common language runtime, tels que Microsoft SQL Server 2005, fournissent leur propre gestion de threads.</span><span class="sxs-lookup"><span data-stu-id="a51b5-495">Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management.</span></span> <span data-ttu-id="a51b5-496">Un hôte qui fournit sa propre gestion des threads peut déplacer une tâche en cours d’exécution d’un thread de système d’exploitation physique vers un autre à tout moment.</span><span class="sxs-lookup"><span data-stu-id="a51b5-496">A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time.</span></span> <span data-ttu-id="a51b5-497">La plupart des tâches ne sont pas affectées par ce basculement.</span><span class="sxs-lookup"><span data-stu-id="a51b5-497">Most tasks are not affected by this switching.</span></span> <span data-ttu-id="a51b5-498">Toutefois, certaines tâches ont une affinité de thread : autrement dit, ils dépendent de l’identité d’un thread de système d’exploitation physique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-498">However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread.</span></span> <span data-ttu-id="a51b5-499">Ces tâches doivent informer l’hôte lorsqu’elles exécutent du code qui ne doit pas être basculée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-499">These tasks must inform the host when they execute code that should not be switched.</span></span>  
  
 <span data-ttu-id="a51b5-500">Par exemple, si votre application appelle une API système pour acquérir un système d’exploitation de verrouillage qui possède l’affinité de thread, telles que Win32 CRITICAL_SECTION, vous devez appeler <xref:System.Threading.Thread.BeginThreadAffinity%2A> avant d’acquérir le verrou, et <xref:System.Threading.Thread.EndThreadAffinity%2A> après l’avoir libéré le verrou.</span><span class="sxs-lookup"><span data-stu-id="a51b5-500">For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call <xref:System.Threading.Thread.BeginThreadAffinity%2A> before acquiring the lock, and <xref:System.Threading.Thread.EndThreadAffinity%2A> after releasing the lock.</span></span>  
  
 <span data-ttu-id="a51b5-501">À l’aide de cette méthode dans le code qui s’exécute sous SQL Server 2005 nécessite le code à exécuter sur le niveau de protection de l’hôte le plus élevé.</span><span class="sxs-lookup"><span data-stu-id="a51b5-501">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-502">L’exemple suivant illustre l’utilisation de la <xref:System.Threading.Thread.BeginThreadAffinity%2A> et <xref:System.Threading.Thread.EndThreadAffinity%2A> méthodes pour avertir un hôte qu’un bloc de code dépend de l’identité d’un thread de système d’exploitation physique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-502">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginThreadAffinity%2A> and <xref:System.Threading.Thread.EndThreadAffinity%2A> methods to notify a host that a block of code depends on the identity of a physical operating system thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="a51b5-503">L'appelant n'a pas l'autorisation requise.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-503">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="a51b5-504">requiert une confiance totale pour l’appelant immédiat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-504">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="a51b5-505">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-505">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Threading.Thread.BeginThreadAffinity" />
      </Docs>
    </Member>
    <Member MemberName="ExecutionContext">
      <MemberSignature Language="C#" Value="public System.Threading.ExecutionContext ExecutionContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.ExecutionContext ExecutionContext" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ExecutionContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecutionContext As ExecutionContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ExecutionContext ^ ExecutionContext { System::Threading::ExecutionContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecutionContext : System.Threading.ExecutionContext" Usage="System.Threading.Thread.ExecutionContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ExecutionContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-506">Obtient un objet <see cref="T:System.Threading.ExecutionContext" /> qui contient des informations relatives aux divers contextes du thread actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-506">Gets an <see cref="T:System.Threading.ExecutionContext" /> object that contains information about the various contexts of the current thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a51b5-507">Objet <see cref="T:System.Threading.ExecutionContext" /> qui consolide des informations de contexte pour le thread actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-507">An <see cref="T:System.Threading.ExecutionContext" /> object that consolidates context information for the current thread.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-508">Le <xref:System.Threading.ExecutionContext> classe fournit un conteneur unique pour toutes les informations relatives à un thread logique d’exécution.</span><span class="sxs-lookup"><span data-stu-id="a51b5-508">The <xref:System.Threading.ExecutionContext> class provides a single container for all information relevant to a logical thread of execution.</span></span> <span data-ttu-id="a51b5-509">Cela inclut le contexte de sécurité, de contexte d’appel, de contexte de synchronisation, de contexte de localisation et de contexte de transaction.</span><span class="sxs-lookup"><span data-stu-id="a51b5-509">This includes security context, call context, synchronization context, localization context, and transaction context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Thread ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Thread ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="thread.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-510">Vérifie que les ressources sont libérées et que toute autre opération de nettoyage est effectuée quand le garbage collector récupère l'objet <see cref="T:System.Threading.Thread" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-510">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Threading.Thread" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-511">Le garbage collector appelle <xref:System.Threading.Thread.Finalize%2A> lorsque l’objet actuel est prêt à être finalisé.</span><span class="sxs-lookup"><span data-stu-id="a51b5-511">The garbage collector calls <xref:System.Threading.Thread.Finalize%2A> when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FreeNamedDataSlot">
      <MemberSignature Language="C#" Value="public static void FreeNamedDataSlot (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FreeNamedDataSlot(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.FreeNamedDataSlot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub FreeNamedDataSlot (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FreeNamedDataSlot(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member FreeNamedDataSlot : string -&gt; unit" Usage="System.Threading.Thread.FreeNamedDataSlot name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="a51b5-512">Nom de l'emplacement de données à libérer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-512">The name of the data slot to be freed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-513">Élimine l'association entre un nom et un emplacement pour tous les threads du processus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-513">Eliminates the association between a name and a slot, for all threads in the process.</span>
          </span>
          <span data-ttu-id="a51b5-514">Pour de meilleures performances, utilisez à la place les champs marqués avec l'attribut <see cref="T:System.ThreadStaticAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-514">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="a51b5-515">Le .NET Framework fournit deux mécanismes pour utiliser le stockage local des threads (TLS) : les champs statiques relatifs à un thread (autrement dit, les champs qui sont marqués avec le <xref:System.ThreadStaticAttribute> attribut) et emplacements de données.</span><span class="sxs-lookup"><span data-stu-id="a51b5-515">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="a51b5-516">Les champs statiques relatifs à un thread fournissent de meilleures performances que les emplacements de données et activent la vérification de type au moment de la compilation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-516">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="a51b5-517">Pour plus d’informations sur l’utilisation de TLS, consultez [stockage Local des threads : champs statiques relatifs à un Thread et emplacements de données](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="a51b5-517">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="a51b5-518">Une fois un thread appelle `FreeNamedDataSlot`, n’importe quel autre thread qui appelle <xref:System.Threading.Thread.GetNamedDataSlot%2A> portant le même nom allouera un nouvel emplacement associé au nom.</span><span class="sxs-lookup"><span data-stu-id="a51b5-518">After any thread calls `FreeNamedDataSlot`, any other thread that calls <xref:System.Threading.Thread.GetNamedDataSlot%2A> with the same name will allocate a new slot associated with the name.</span></span> <span data-ttu-id="a51b5-519">Les appels suivants à `GetNamedDataSlot` par n’importe quel thread retourneront le nouvel emplacement.</span><span class="sxs-lookup"><span data-stu-id="a51b5-519">Subsequent calls to `GetNamedDataSlot` by any thread will return the new slot.</span></span> <span data-ttu-id="a51b5-520">Toutefois, n’importe quel thread qui a toujours un <xref:System.LocalDataStoreSlot?displayProperty=nameWithType> retourné par un appel antérieur à `GetNamedDataSlot` peuvent continuer à utiliser l’ancien emplacement.</span><span class="sxs-lookup"><span data-stu-id="a51b5-520">However, any thread that still has a <xref:System.LocalDataStoreSlot?displayProperty=nameWithType> returned by an earlier call to `GetNamedDataSlot` can continue to use the old slot.</span></span>  
  
 <span data-ttu-id="a51b5-521">Un emplacement qui a été associé à un nom est libéré uniquement lorsque chaque `LocalDataStoreSlot` qui a été obtenu avant l’appel à `FreeNamedDataSlot` a été publié et le garbage collector.</span><span class="sxs-lookup"><span data-stu-id="a51b5-521">A slot that has been associated with a name is released only when every `LocalDataStoreSlot` that was obtained prior to the call to `FreeNamedDataSlot` has been released and garbage-collected.</span></span>  
  
 <span data-ttu-id="a51b5-522">Threads utilisent un mécanisme de mémoire de magasin local pour stocker les données propres au thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-522">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="a51b5-523">Le common language runtime alloue un tableau de magasin de données à chaque processus lors de sa création.</span><span class="sxs-lookup"><span data-stu-id="a51b5-523">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="a51b5-524">Le thread peut allouer un emplacement de données dans le magasin de données, stockez et récupérez une données valeur dans l’emplacement et libérer l’emplacement pour une réutilisation après l’expiration du thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-524">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="a51b5-525">Emplacements de données sont uniques pour chaque thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-525">Data slots are unique per thread.</span></span> <span data-ttu-id="a51b5-526">Aucun autre thread (pas même un thread enfant) ne peut obtenir les données.</span><span class="sxs-lookup"><span data-stu-id="a51b5-526">No other thread (not even a child thread) can get that data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-527">Cette section contient deux exemples de code.</span><span class="sxs-lookup"><span data-stu-id="a51b5-527">This section contains two code examples.</span></span> <span data-ttu-id="a51b5-528">Le premier exemple montre comment utiliser un champ est marqué avec le <xref:System.ThreadStaticAttribute> attribut devant contenir les informations spécifiques aux threads.</span><span class="sxs-lookup"><span data-stu-id="a51b5-528">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="a51b5-529">Le deuxième exemple montre comment utiliser un emplacement de données pour faire la même chose.</span><span class="sxs-lookup"><span data-stu-id="a51b5-529">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="a51b5-530">**Premier exemple**</span><span class="sxs-lookup"><span data-stu-id="a51b5-530">**First Example**</span></span>  
  
 <span data-ttu-id="a51b5-531">L’exemple suivant montre comment utiliser un champ est marqué avec <xref:System.ThreadStaticAttribute> pour contenir des informations spécifiques au thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-531">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="a51b5-532">Cette technique offre de meilleures performances que la technique qui est indiquée dans le deuxième exemple.</span><span class="sxs-lookup"><span data-stu-id="a51b5-532">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="a51b5-533">**Deuxième exemple**</span><span class="sxs-lookup"><span data-stu-id="a51b5-533">**Second Example**</span></span>  
  
 <span data-ttu-id="a51b5-534">L’exemple suivant montre comment utiliser un emplacement de données pour stocker des informations spécifiques au thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-534">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md">
          <span data-ttu-id="a51b5-535">Threads et threading</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-535">Threads and Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md">
          <span data-ttu-id="a51b5-536">Stockage local des threads : champs statiques et emplacements de données relatifs à un thread</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-536">Thread Local Storage: Thread-Relative Static Fields and Data Slots</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetApartmentState">
      <MemberSignature Language="C#" Value="public System.Threading.ApartmentState GetApartmentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.ApartmentState GetApartmentState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetApartmentState" />
      <MemberSignature Language="VB.NET" Value="Public Function GetApartmentState () As ApartmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::ApartmentState GetApartmentState();" />
      <MemberSignature Language="F#" Value="member this.GetApartmentState : unit -&gt; System.Threading.ApartmentState" Usage="thread.GetApartmentState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ApartmentState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-537">Retourne une valeur <see cref="T:System.Threading.ApartmentState" /> qui indique l'état de cloisonnement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-537">Returns an <see cref="T:System.Threading.ApartmentState" /> value indicating the apartment state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-538">Une des valeurs <see cref="T:System.Threading.ApartmentState" /> qui indique l'état de cloisonnement du thread managé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-538">One of the <see cref="T:System.Threading.ApartmentState" /> values indicating the apartment state of the managed thread.</span>
          </span>
          <span data-ttu-id="a51b5-539">La valeur par défaut est <see cref="F:System.Threading.ApartmentState.Unknown" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-539">The default is <see cref="F:System.Threading.ApartmentState.Unknown" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-540">Cette méthode, avec la <xref:System.Threading.Thread.SetApartmentState%2A> (méthode) et le <xref:System.Threading.Thread.TrySetApartmentState%2A> (méthode), remplace le <xref:System.Threading.Thread.ApartmentState%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="a51b5-540">This method, along with the <xref:System.Threading.Thread.SetApartmentState%2A> method and the <xref:System.Threading.Thread.TrySetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-541">L’exemple de code suivant montre le <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, et <xref:System.Threading.Thread.TrySetApartmentState%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="a51b5-541">The following code example demonstrates the <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, and <xref:System.Threading.Thread.TrySetApartmentState%2A> methods.</span></span> <span data-ttu-id="a51b5-542">L’exemple de code crée un thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-542">The code example creates a thread.</span></span> <span data-ttu-id="a51b5-543">Avant que le thread est démarré, <xref:System.Threading.Thread.GetApartmentState%2A> affiche initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> état et <xref:System.Threading.Thread.SetApartmentState%2A> modifie l’état à <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-543">Before the thread is started, <xref:System.Threading.Thread.GetApartmentState%2A> displays the initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> state and <xref:System.Threading.Thread.SetApartmentState%2A> changes the state to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a51b5-544">Le <xref:System.Threading.Thread.TrySetApartmentState%2A> méthode renvoie alors `false` lorsque vous tentez de modifier l’état à <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> , car l’état de cloisonnement est déjà défini.</span><span class="sxs-lookup"><span data-stu-id="a51b5-544">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> because the apartment state is already set.</span></span> <span data-ttu-id="a51b5-545">Si la même opération avait été tentée avec <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> aurait été levée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-545">If the same operation had been attempted with <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> would have been thrown.</span></span>  
  
 <span data-ttu-id="a51b5-546">Une fois que le thread est démarré, le <xref:System.Threading.Thread.TrySetApartmentState%2A> méthode est utilisée à nouveau.</span><span class="sxs-lookup"><span data-stu-id="a51b5-546">After the thread is started, the <xref:System.Threading.Thread.TrySetApartmentState%2A> method is used again.</span></span> <span data-ttu-id="a51b5-547">Cette fois, elle lève <xref:System.Threading.ThreadStateException> , car le thread a déjà été démarré.</span><span class="sxs-lookup"><span data-stu-id="a51b5-547">This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.</span></span>  
  
 [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cpp/source.cpp#1)]
 [!code-csharp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cs/source.cs#1)]
 [!code-vb[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompressedStack">
      <MemberSignature Language="C#" Value="public System.Threading.CompressedStack GetCompressedStack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.CompressedStack GetCompressedStack() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetCompressedStack" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCompressedStack () As CompressedStack" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CompressedStack ^ GetCompressedStack();" />
      <MemberSignature Language="F#" Value="member this.GetCompressedStack : unit -&gt; System.Threading.CompressedStack" Usage="thread.GetCompressedStack " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("Thread.GetCompressedStack is no longer supported. Please use the System.Threading.CompressedStack class")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.CompressedStack</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-548">Retourne un objet <see cref="T:System.Threading.CompressedStack" /> qui peut être utilisé pour capturer la pile pour le thread actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-548">Returns a <see cref="T:System.Threading.CompressedStack" /> object that can be used to capture the stack for the current thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-549">Aucun.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-549">None.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-550">Cette méthode n’est plus pris en charge.</span><span class="sxs-lookup"><span data-stu-id="a51b5-550">This method is no longer supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a51b5-551">Dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-551">In all cases.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="a51b5-552">requiert une confiance totale pour l’appelant immédiat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-552">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="a51b5-553">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-553">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentProcessorId">
      <MemberSignature Language="C#" Value="public static int GetCurrentProcessorId ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetCurrentProcessorId() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetCurrentProcessorId" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrentProcessorId () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetCurrentProcessorId();" />
      <MemberSignature Language="F#" Value="static member GetCurrentProcessorId : unit -&gt; int" Usage="System.Threading.Thread.GetCurrentProcessorId " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object GetData (LocalDataStoreSlot slot);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(class System.LocalDataStoreSlot slot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (slot As LocalDataStoreSlot) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(LocalDataStoreSlot ^ slot);" />
      <MemberSignature Language="F#" Value="static member GetData : LocalDataStoreSlot -&gt; obj" Usage="System.Threading.Thread.GetData slot" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="slot" Type="System.LocalDataStoreSlot" />
      </Parameters>
      <Docs>
        <param name="slot">
          <span data-ttu-id="a51b5-554">
            <see cref="T:System.LocalDataStoreSlot" /> à partir duquel obtenir la valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-554">The <see cref="T:System.LocalDataStoreSlot" /> from which to get the value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-555">Récupère la valeur de l'emplacement spécifié sur le thread actif, dans le domaine actuel du thread actif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-555">Retrieves the value from the specified slot on the current thread, within the current thread's current domain.</span>
          </span>
          <span data-ttu-id="a51b5-556">Pour de meilleures performances, utilisez à la place les champs marqués avec l'attribut <see cref="T:System.ThreadStaticAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-556">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-557">Valeur récupérée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-557">The retrieved value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="a51b5-558">Le .NET Framework fournit deux mécanismes pour utiliser le stockage local des threads (TLS) : les champs statiques relatifs à un thread (autrement dit, les champs qui sont marqués avec le <xref:System.ThreadStaticAttribute> attribut) et emplacements de données.</span><span class="sxs-lookup"><span data-stu-id="a51b5-558">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="a51b5-559">Les champs statiques relatifs à un thread fournissent de meilleures performances que les emplacements de données et activent la vérification de type au moment de la compilation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-559">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="a51b5-560">Pour plus d’informations sur l’utilisation de TLS, consultez [stockage Local des threads : champs statiques relatifs à un Thread et emplacements de données](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="a51b5-560">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="a51b5-561">Threads utilisent un mécanisme de mémoire de magasin local pour stocker les données propres au thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-561">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="a51b5-562">Le common language runtime alloue un tableau de magasin de données à chaque processus lors de sa création.</span><span class="sxs-lookup"><span data-stu-id="a51b5-562">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="a51b5-563">Le thread peut allouer un emplacement de données dans le magasin de données, stockez et récupérez une données valeur dans l’emplacement et libérer l’emplacement pour une réutilisation après l’expiration du thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-563">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="a51b5-564">Emplacements de données sont uniques pour chaque thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-564">Data slots are unique per thread.</span></span> <span data-ttu-id="a51b5-565">Aucun autre thread (pas même un thread enfant) ne peut obtenir les données.</span><span class="sxs-lookup"><span data-stu-id="a51b5-565">No other thread (not even a child thread) can get that data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-566"><xref:System.Threading.Thread.GetData%2A> est un `Shared` méthode s’applique toujours au thread en cours d’exécution, même si vous appelez à l’aide d’une variable qui fait référence à un autre thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-566"><xref:System.Threading.Thread.GetData%2A> is a `Shared` method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread.</span></span> <span data-ttu-id="a51b5-567">Pour éviter toute confusion, utilisez le nom de classe lors de l’appel `Shared` méthodes : `Dim test As Object = Thread.GetData(testSlot)`.</span><span class="sxs-lookup"><span data-stu-id="a51b5-567">To avoid confusion, use the class name when calling `Shared` methods: `Dim test As Object = Thread.GetData(testSlot)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-568">Cette section contient deux exemples de code.</span><span class="sxs-lookup"><span data-stu-id="a51b5-568">This section contains two code examples.</span></span> <span data-ttu-id="a51b5-569">Le premier exemple montre comment utiliser un champ est marqué avec le <xref:System.ThreadStaticAttribute> attribut devant contenir les informations spécifiques aux threads.</span><span class="sxs-lookup"><span data-stu-id="a51b5-569">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="a51b5-570">Le deuxième exemple montre comment utiliser un emplacement de données pour faire la même chose.</span><span class="sxs-lookup"><span data-stu-id="a51b5-570">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="a51b5-571">**Premier exemple**</span><span class="sxs-lookup"><span data-stu-id="a51b5-571">**First Example**</span></span>  
  
 <span data-ttu-id="a51b5-572">L’exemple suivant montre comment utiliser un champ est marqué avec <xref:System.ThreadStaticAttribute> pour contenir des informations spécifiques au thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-572">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="a51b5-573">Cette technique offre de meilleures performances que la technique qui est indiquée dans le deuxième exemple.</span><span class="sxs-lookup"><span data-stu-id="a51b5-573">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="a51b5-574">**Deuxième exemple**</span><span class="sxs-lookup"><span data-stu-id="a51b5-574">**Second Example**</span></span>  
  
 <span data-ttu-id="a51b5-575">L’exemple suivant montre comment utiliser un emplacement de données pour stocker des informations spécifiques au thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-575">The following example demonstrates how to use a data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)" />
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md">
          <span data-ttu-id="a51b5-576">Threads et threading</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-576">Threads and Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md">
          <span data-ttu-id="a51b5-577">Stockage local des threads : champs statiques et emplacements de données relatifs à un thread</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-577">Thread Local Storage: Thread-Relative Static Fields and Data Slots</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetDomain">
      <MemberSignature Language="C#" Value="public static AppDomain GetDomain ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain GetDomain() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetDomain" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDomain () As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ GetDomain();" />
      <MemberSignature Language="F#" Value="static member GetDomain : unit -&gt; AppDomain" Usage="System.Threading.Thread.GetDomain " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-578">Retourne le domaine actuel dans lequel le thread actif est en cours d'exécution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-578">Returns the current domain in which the current thread is running.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-579">
            <see cref="T:System.AppDomain" /> représentant le domaine d'application actuel du thread en cours d'exécution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-579">An <see cref="T:System.AppDomain" /> representing the current application domain of the running thread.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a51b5-580">L’exemple de code suivant montre comment récupérer le nom et l’ID de la `AppDomain` dans lequel le thread s’exécute.</span><span class="sxs-lookup"><span data-stu-id="a51b5-580">The following code example shows how to retrieve the name and ID of the `AppDomain` in which the thread is running.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Domain#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Domain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Domain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Domain/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDomainID">
      <MemberSignature Language="C#" Value="public static int GetDomainID ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDomainID() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetDomainID" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDomainID () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDomainID();" />
      <MemberSignature Language="F#" Value="static member GetDomainID : unit -&gt; int" Usage="System.Threading.Thread.GetDomainID " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-581">Retourne un identificateur unique de domaine d'application.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-581">Returns a unique application domain identifier.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-582">Entier signé 32 bits identifiant de manière unique le domaine d'application.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-582">A 32-bit signed integer uniquely identifying the application domain.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a51b5-583">L’exemple de code suivant montre comment récupérer le nom et l’ID de la `AppDomain` dans lequel le thread s’exécute.</span><span class="sxs-lookup"><span data-stu-id="a51b5-583">The following code example shows how to retrieve the name and ID of the `AppDomain` in which the thread is running.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Domain#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Domain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Domain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Domain/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="thread.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-584">Retourne un code de hachage pour le thread actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-584">Returns a hash code for the current thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-585">Valeur de code de hachage entier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-585">An integer hash code value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-586">Le code de hachage n’est pas garanti pour être unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-586">The hash code is not guaranteed to be unique.</span></span> <span data-ttu-id="a51b5-587">Utilisez le <xref:System.Threading.Thread.ManagedThreadId%2A> propriété si vous avez besoin d’un identificateur unique pour un thread managé.</span><span class="sxs-lookup"><span data-stu-id="a51b5-587">Use the <xref:System.Threading.Thread.ManagedThreadId%2A> property if you need a unique identifier for a managed thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNamedDataSlot">
      <MemberSignature Language="C#" Value="public static LocalDataStoreSlot GetNamedDataSlot (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.LocalDataStoreSlot GetNamedDataSlot(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetNamedDataSlot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNamedDataSlot (name As String) As LocalDataStoreSlot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static LocalDataStoreSlot ^ GetNamedDataSlot(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetNamedDataSlot : string -&gt; LocalDataStoreSlot" Usage="System.Threading.Thread.GetNamedDataSlot name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.LocalDataStoreSlot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="a51b5-588">Nom de l'emplacement de données local.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-588">The name of the local data slot.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-589">Recherche un emplacement de données nommé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-589">Looks up a named data slot.</span>
          </span>
          <span data-ttu-id="a51b5-590">Pour de meilleures performances, utilisez à la place les champs marqués avec l'attribut <see cref="T:System.ThreadStaticAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-590">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-591">
            <see cref="T:System.LocalDataStoreSlot" /> alloué pour ce thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-591">A <see cref="T:System.LocalDataStoreSlot" /> allocated for this thread.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="a51b5-592">Le .NET Framework fournit deux mécanismes pour utiliser le stockage local des threads (TLS) : les champs statiques relatifs à un thread (autrement dit, les champs qui sont marqués avec le <xref:System.ThreadStaticAttribute> attribut) et emplacements de données.</span><span class="sxs-lookup"><span data-stu-id="a51b5-592">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="a51b5-593">Les champs statiques relatifs à un thread fournissent de meilleures performances que les emplacements de données et activent la vérification de type au moment de la compilation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-593">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="a51b5-594">Pour plus d’informations sur l’utilisation de TLS, consultez [stockage Local des threads : champs statiques relatifs à un Thread et emplacements de données](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="a51b5-594">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="a51b5-595">Threads utilisent un mécanisme de mémoire de magasin local pour stocker les données propres au thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-595">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="a51b5-596">Le common language runtime alloue un tableau de magasin de données à chaque processus lors de sa création.</span><span class="sxs-lookup"><span data-stu-id="a51b5-596">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="a51b5-597">Le thread peut allouer un emplacement de données dans le magasin de données, stockez et récupérez une données valeur dans l’emplacement et libérer l’emplacement pour une réutilisation après l’expiration du thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-597">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="a51b5-598">Emplacements de données sont uniques pour chaque thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-598">Data slots are unique per thread.</span></span> <span data-ttu-id="a51b5-599">Aucun autre thread (pas même un thread enfant) ne peut obtenir les données.</span><span class="sxs-lookup"><span data-stu-id="a51b5-599">No other thread (not even a child thread) can get that data.</span></span>  
  
 <span data-ttu-id="a51b5-600">Si l’emplacement nommé n’existe pas, un nouvel emplacement est alloué.</span><span class="sxs-lookup"><span data-stu-id="a51b5-600">If the named slot does not exist, a new slot is allocated.</span></span> <span data-ttu-id="a51b5-601">Emplacements de données nommés sont publiques et peuvent être manipulées par tout le monde.</span><span class="sxs-lookup"><span data-stu-id="a51b5-601">Named data slots are public and can be manipulated by anyone.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-602">Cette section contient deux exemples de code.</span><span class="sxs-lookup"><span data-stu-id="a51b5-602">This section contains two code examples.</span></span> <span data-ttu-id="a51b5-603">Le premier exemple montre comment utiliser un champ est marqué avec le <xref:System.ThreadStaticAttribute> attribut devant contenir les informations spécifiques aux threads.</span><span class="sxs-lookup"><span data-stu-id="a51b5-603">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="a51b5-604">Le deuxième exemple montre comment utiliser un emplacement de données pour faire la même chose.</span><span class="sxs-lookup"><span data-stu-id="a51b5-604">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="a51b5-605">**Premier exemple**</span><span class="sxs-lookup"><span data-stu-id="a51b5-605">**First Example**</span></span>  
  
 <span data-ttu-id="a51b5-606">L’exemple suivant montre comment utiliser un champ est marqué avec <xref:System.ThreadStaticAttribute> pour contenir des informations spécifiques au thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-606">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="a51b5-607">Cette technique offre de meilleures performances que la technique qui est indiquée dans le deuxième exemple.</span><span class="sxs-lookup"><span data-stu-id="a51b5-607">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="a51b5-608">**Deuxième exemple**</span><span class="sxs-lookup"><span data-stu-id="a51b5-608">**Second Example**</span></span>  
  
 <span data-ttu-id="a51b5-609">L’exemple suivant montre comment utiliser un emplacement de données pour stocker des informations spécifiques au thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-609">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md">
          <span data-ttu-id="a51b5-610">Threads et threading</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-610">Threads and Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md">
          <span data-ttu-id="a51b5-611">Stockage local des threads : champs statiques et emplacements de données relatifs à un thread</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-611">Thread Local Storage: Thread-Relative Static Fields and Data Slots</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Interrupt">
      <MemberSignature Language="C#" Value="public void Interrupt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Interrupt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Interrupt" />
      <MemberSignature Language="VB.NET" Value="Public Sub Interrupt ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Interrupt();" />
      <MemberSignature Language="F#" Value="member this.Interrupt : unit -&gt; unit" Usage="thread.Interrupt " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-612">Interrompt un thread dont l'état est <see langword="WaitSleepJoin" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-612">Interrupts a thread that is in the <see langword="WaitSleepJoin" /> thread state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-613">Si ce thread n’est pas actuellement bloqué en attente, de veille ou d’état de jointure, il sera interrompu lorsqu’elle commence ensuite à bloquer.</span><span class="sxs-lookup"><span data-stu-id="a51b5-613">If this thread is not currently blocked in a wait, sleep, or join state, it will be interrupted when it next begins to block.</span></span>  
  
 <span data-ttu-id="a51b5-614"><xref:System.Threading.ThreadInterruptedException> est levée dans le thread interrompu, mais pas jusqu'à ce que le thread se bloque.</span><span class="sxs-lookup"><span data-stu-id="a51b5-614"><xref:System.Threading.ThreadInterruptedException> is thrown in the interrupted thread, but not until the thread blocks.</span></span> <span data-ttu-id="a51b5-615">Si le thread ne bloque jamais, l’exception n’est jamais levée, et par conséquent, le thread peut se terminer sans jamais être interrompu.</span><span class="sxs-lookup"><span data-stu-id="a51b5-615">If the thread never blocks, the exception is never thrown, and thus the thread might complete without ever being interrupted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-616">L’exemple de code suivant montre le comportement d’un thread en cours d’exécution lorsqu’elle est interrompue et par la suite est bloqué.</span><span class="sxs-lookup"><span data-stu-id="a51b5-616">The following code example shows the behavior of a running thread when it is interrupted and subsequently gets blocked.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Interrupt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Interrupt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Interrupt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="a51b5-617">L'appelant n'a pas de <see cref="T:System.Security.Permissions.SecurityPermission" /> appropriée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-617">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="a51b5-618">pour les opérations avancées sur les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-618">for advanced operations on threads.</span>
          </span>
          <span data-ttu-id="a51b5-619">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-619">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Threading.ThreadState" />
        <related type="Article" href="~/docs/standard/threading/pausing-and-resuming-threads.md">
          <span data-ttu-id="a51b5-620">Suspension et interruption de threads</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-620">Pausing and interrupting threads</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/managed-thread-states.md">
          <span data-ttu-id="a51b5-621">États des threads managés</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-621">Managed Thread States</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsAlive">
      <MemberSignature Language="C#" Value="public bool IsAlive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAlive" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.IsAlive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAlive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAlive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAlive : bool" Usage="System.Threading.Thread.IsAlive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-622">Obtient une valeur indiquant l'état de l'exécution du thread actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-622">Gets a value indicating the execution status of the current thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a51b5-623">
            <see langword="true" /> si ce thread a été démarré mais ne s'est pas arrêté normalement ou s'il a été abandonné ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-623">
              <see langword="true" /> if this thread has been started and has not terminated normally or aborted; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBackground">
      <MemberSignature Language="C#" Value="public bool IsBackground { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBackground" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.IsBackground" />
      <MemberSignature Language="VB.NET" Value="Public Property IsBackground As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBackground { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsBackground : bool with get, set" Usage="System.Threading.Thread.IsBackground" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-624">Obtient ou définit une valeur indiquant si le thread est un thread d'arrière-plan ou non.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-624">Gets or sets a value indicating whether or not a thread is a background thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a51b5-625">
            <see langword="true" /> si ce thread est ou doit devenir un thread d'arrière-plan ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-625">
              <see langword="true" /> if this thread is or is to become a background thread; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-626">Un thread est un thread d’arrière-plan ou un thread de premier plan.</span><span class="sxs-lookup"><span data-stu-id="a51b5-626">A thread is either a background thread or a foreground thread.</span></span> <span data-ttu-id="a51b5-627">Threads d’arrière-plan sont identiques aux threads de premier plan, à ceci près que les threads d’arrière-plan n’empêchent pas un processus de se terminer.</span><span class="sxs-lookup"><span data-stu-id="a51b5-627">Background threads are identical to foreground threads, except that background threads do not prevent a process from terminating.</span></span> <span data-ttu-id="a51b5-628">Une fois que tous les threads de premier plan appartenant à un processus sont terminés, le common language runtime termine le processus.</span><span class="sxs-lookup"><span data-stu-id="a51b5-628">Once all foreground threads belonging to a process have terminated, the common language runtime ends the process.</span></span> <span data-ttu-id="a51b5-629">Les threads d’arrière-plan restants sont arrêtées et ne se terminent pas.</span><span class="sxs-lookup"><span data-stu-id="a51b5-629">Any remaining background threads are stopped and do not complete.</span></span>  
  
 <span data-ttu-id="a51b5-630">Par défaut, les threads suivants s’exécutent au premier plan (autrement dit, leur <xref:System.Threading.Thread.IsBackground%2A> retourne de la propriété `false`) :</span><span class="sxs-lookup"><span data-stu-id="a51b5-630">By default, the following threads execute in the foreground (that is, their <xref:System.Threading.Thread.IsBackground%2A> property returns `false`):</span></span>  
  
-   <span data-ttu-id="a51b5-631">Le thread principal (ou le thread d’application principal).</span><span class="sxs-lookup"><span data-stu-id="a51b5-631">The primary thread (or main application thread).</span></span>  
  
-   <span data-ttu-id="a51b5-632">Tous les threads créés en appelant un <xref:System.Threading.Thread> constructeur de classe.</span><span class="sxs-lookup"><span data-stu-id="a51b5-632">All threads created by calling a <xref:System.Threading.Thread> class constructor.</span></span>  
  
 <span data-ttu-id="a51b5-633">Par défaut, les threads suivants s’exécutent en arrière-plan (autrement dit, leur <xref:System.Threading.Thread.IsBackground%2A> retourne de la propriété `true`) :</span><span class="sxs-lookup"><span data-stu-id="a51b5-633">By default, the following threads execute in the background  (that is, their <xref:System.Threading.Thread.IsBackground%2A> property returns `true`):</span></span>  
  
-   <span data-ttu-id="a51b5-634">Thread du pool de threads, qui constituent un pool de threads de travail géré par le runtime.</span><span class="sxs-lookup"><span data-stu-id="a51b5-634">Thread pool threads, which are a pool of worker threads maintained by the runtime.</span></span> <span data-ttu-id="a51b5-635">Vous pouvez configurer le travail de pool et de planification de thread sur les threads du pool à l’aide de la <xref:System.Threading.ThreadPool> classe.</span><span class="sxs-lookup"><span data-stu-id="a51b5-635">You can configure the thread pool and schedule work on thread pool threads by using the <xref:System.Threading.ThreadPool> class.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a51b5-636">Opérations asynchrones basées sur la tâche s’exécute automatiquement sur les threads du pool.</span><span class="sxs-lookup"><span data-stu-id="a51b5-636">Task-based asynchronous operations automatically execute on thread pool threads.</span></span>  
  
-   <span data-ttu-id="a51b5-637">Tous les threads qui entrent dans l’environnement d’exécution managé à partir de code non managé.</span><span class="sxs-lookup"><span data-stu-id="a51b5-637">All threads that enter the managed execution environment from unmanaged code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-638">L’exemple suivant compare le comportement des threads de premier plan et d’arrière-plan.</span><span class="sxs-lookup"><span data-stu-id="a51b5-638">The following example contrasts the behavior of foreground and background threads.</span></span> <span data-ttu-id="a51b5-639">Il crée un thread de premier plan et d’un thread d’arrière-plan.</span><span class="sxs-lookup"><span data-stu-id="a51b5-639">It creates a foreground thread and a background thread.</span></span> <span data-ttu-id="a51b5-640">Le thread de premier plan maintient le processus en cours d’exécution jusqu'à ce que se termine son `for` boucle et se termine.</span><span class="sxs-lookup"><span data-stu-id="a51b5-640">The foreground thread keeps the process running until completes its `for` loop and terminates.</span></span> <span data-ttu-id="a51b5-641">Toutefois, comme le montre la sortie de l’exemple, étant donné que le thread de premier plan a terminé son exécution, le processus est arrêté avant que le thread d’arrière-plan a terminé son exécution.</span><span class="sxs-lookup"><span data-stu-id="a51b5-641">However, as the output from the example shows, because the foreground thread has finished execution, the process is terminated before the background thread has completed execution.</span></span>  
  
 [!code-cpp[System.Threading.Thread.IsBackground#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.IsBackground/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.IsBackground#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.IsBackground/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.IsBackground#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.IsBackground/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="a51b5-642">Le thread est inactif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-642">The thread is dead.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/foreground-and-background-threads.md">
          <span data-ttu-id="a51b5-643">Threads de premier plan et d'arrière-plan</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-643">Foreground and Background Threads</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsThreadPoolThread">
      <MemberSignature Language="C#" Value="public bool IsThreadPoolThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadPoolThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.IsThreadPoolThread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsThreadPoolThread As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsThreadPoolThread { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsThreadPoolThread : bool" Usage="System.Threading.Thread.IsThreadPoolThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-644">Obtient une valeur indiquant si un thread appartient au pool de threads managés ou non.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-644">Gets a value indicating whether or not a thread belongs to the managed thread pool.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a51b5-645">
            <see langword="true" /> si ce thread appartient au pool de threads managés ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-645">
              <see langword="true" /> if this thread belongs to the managed thread pool; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-646">Pour plus d’informations, consultez [le pool de threads managés](~/docs/standard/threading/the-managed-thread-pool.md).</span><span class="sxs-lookup"><span data-stu-id="a51b5-646">For more information see [The managed thread pool](~/docs/standard/threading/the-managed-thread-pool.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-647">L’exemple de code suivant montre comment déterminer si un thread est le pool de threads.</span><span class="sxs-lookup"><span data-stu-id="a51b5-647">The following code example shows how to determine whether a thread is from the thread pool.</span></span>  
  
 [!code-cpp[System.Threading.Thread.IsThreadPoolThread#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.IsThreadPoolThread/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.IsThreadPoolThread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.IsThreadPoolThread/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.IsThreadPoolThread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.IsThreadPoolThread/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.ThreadPool" />
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">
          <span data-ttu-id="a51b5-648">Pool de threads managés</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-648">The Managed Thread Pool</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-649">Bloque le thread appelant jusqu’à l’arrêt du thread représenté par cette instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-649">Blocks the calling thread until the thread represented by this instance terminates.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public void Join ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Join() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Join" />
      <MemberSignature Language="VB.NET" Value="Public Sub Join ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Join();" />
      <MemberSignature Language="F#" Value="member this.Join : unit -&gt; unit" Usage="thread.Join " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-650">Bloque le thread appelant jusqu’à ce que le thread représenté par cette instance s’arrête, tout en continuant d’exécuter le pompage COM et <see langword="SendMessage" /> standard.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-650">Blocks the calling thread until the thread represented by this instance terminates, while continuing to perform standard COM and <see langword="SendMessage" /> pumping.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-651"><xref:System.Threading.Thread.Join%2A> est une méthode de synchronisation qui bloque le thread appelant (autrement dit, le thread qui appelle la méthode) jusqu'à ce que le thread dont <xref:System.Threading.Thread.Join%2A> méthode est appelée est terminée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-651"><xref:System.Threading.Thread.Join%2A> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed.</span></span> <span data-ttu-id="a51b5-652">Utilisez cette méthode pour vous assurer qu’un thread a été arrêté.</span><span class="sxs-lookup"><span data-stu-id="a51b5-652">Use this method to ensure that a thread has been terminated.</span></span> <span data-ttu-id="a51b5-653">L’appelant se bloquera indéfiniment si le thread ne se termine pas.</span><span class="sxs-lookup"><span data-stu-id="a51b5-653">The caller will block indefinitely if the thread does not terminate.</span></span> <span data-ttu-id="a51b5-654">Dans l’exemple suivant, le `Thread1` thread appelle le <xref:System.Threading.Thread.Join> méthode de `Thread2`, ce qui conduit `Thread1` au bloc jusqu'à ce que `Thread2` est terminée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-654">In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block until `Thread2` has completed.</span></span>  
  
 [!code-csharp[System.Threading.Thread.Join#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.join/cs/join1a.cs#1)]
 [!code-vb[System.Threading.Thread.Join#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.join/vb/join1a.vb#1)]  
  
 <span data-ttu-id="a51b5-655">Si le thread s’est déjà arrêté lorsque <xref:System.Threading.Thread.Join%2A> est appelée, la méthode retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="a51b5-655">If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="a51b5-656">Vous ne devez jamais appeler la <xref:System.Threading.Thread.Join%2A> méthode de la <xref:System.Threading.Thread> objet qui représente le thread actuel du thread actuel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-656">You should never call the <xref:System.Threading.Thread.Join%2A> method of the <xref:System.Threading.Thread> object that represents the current thread from the current thread.</span></span> <span data-ttu-id="a51b5-657">Ainsi, votre application se bloque, car le thread actuel attend indéfiniment, à elle-même</span><span class="sxs-lookup"><span data-stu-id="a51b5-657">This causes your app to hang because the current thread waits upon itself indefinitely,</span></span>  
  
 <span data-ttu-id="a51b5-658">Cette méthode modifie l’état du thread appelant pour inclure <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-658">This method changes the state of the calling thread to include <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a51b5-659">Vous ne pouvez pas appeler `Join` sur un thread qui se trouve dans le <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> état.</span><span class="sxs-lookup"><span data-stu-id="a51b5-659">You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="a51b5-660">L’appelant a tenté de joindre un thread dont l’état est <see cref="F:System.Threading.ThreadState.Unstarted" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-660">The caller attempted to join a thread that is in the <see cref="F:System.Threading.ThreadState.Unstarted" /> state.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="a51b5-661">Le thread est interrompu lors de l’attente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-661">The thread is interrupted while waiting.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/managed-thread-states.md">
          <span data-ttu-id="a51b5-662">États des threads managés</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-662">Managed Thread States</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public bool Join (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Join(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Join(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Join(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.Join : int -&gt; bool" Usage="thread.Join millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="a51b5-663">Nombre de millisecondes à attendre l'arrêt du thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-663">The number of milliseconds to wait for the thread to terminate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-664">Bloque le thread appelant jusqu'à ce que le thread représenté par cette instance s'arrête ou que la durée spécifiée soit écoulée, tout en continuant d'exécuter le pompage COM et SendMessage standard.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-664">Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-665">
            <see langword="true" /> si le thread s'est arrêté ; <see langword="false" /> s'il ne s'est pas arrêté après l'expiration du délai spécifié par le paramètre <paramref name="millisecondsTimeout" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-665">
              <see langword="true" /> if the thread has terminated; <see langword="false" /> if the thread has not terminated after the amount of time specified by the <paramref name="millisecondsTimeout" /> parameter has elapsed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-666"><xref:System.Threading.Thread.Join%28System.Int32%29> est une méthode de synchronisation qui bloque le thread appelant (autrement dit, le thread qui appelle la méthode) jusqu'à ce que soit le thread dont <xref:System.Threading.Thread.Join%2A> méthode est appelée est terminée ou l’intervalle de délai d’expiration est écoulé.</span><span class="sxs-lookup"><span data-stu-id="a51b5-666"><xref:System.Threading.Thread.Join%28System.Int32%29> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed or the time-out interval has elapsed.</span></span> <span data-ttu-id="a51b5-667">Dans l’exemple suivant, le `Thread1` thread appelle le <xref:System.Threading.Thread.Join> méthode de `Thread2`, ce qui conduit `Thread1` pour bloquer jusqu'à `Thread2` terminée ou 2 secondes se soient écoulées.</span><span class="sxs-lookup"><span data-stu-id="a51b5-667">In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block either until `Thread2` has completed or 2 seconds have elapsed.</span></span>  
  
 [!code-csharp[System.Threading.Thread.Join#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.join/cs/join1b.cs#2)]
 [!code-vb[System.Threading.Thread.Join#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.join/vb/join1b.vb#2)]  
  
 <span data-ttu-id="a51b5-668">Si <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> est spécifié pour le `millisecondsTimeout` paramètre, cette méthode se comporte comme la <xref:System.Threading.Thread.Join> surcharge de méthode, à l’exception de la valeur de retour.</span><span class="sxs-lookup"><span data-stu-id="a51b5-668">If <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> is specified for the `millisecondsTimeout` parameter, this method behaves identically to the <xref:System.Threading.Thread.Join> method overload, except for the return value.</span></span>  
  
 <span data-ttu-id="a51b5-669">Si le thread s’est déjà arrêté lorsque <xref:System.Threading.Thread.Join%2A> est appelée, la méthode retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="a51b5-669">If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.</span></span>  
  
 <span data-ttu-id="a51b5-670">Cette méthode modifie l’état du thread appelant pour inclure <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-670">This method changes the state of the calling thread to include <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a51b5-671">Vous ne pouvez pas appeler `Join` sur un thread qui se trouve dans le <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> état.</span><span class="sxs-lookup"><span data-stu-id="a51b5-671">You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a51b5-672">La valeur de <paramref name="millisecondsTimeout" /> est négative et n’est pas égale à <see cref="F:System.Threading.Timeout.Infinite" /> en millisecondes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-672">The value of <paramref name="millisecondsTimeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="a51b5-673">Le thread n’a pas été démarré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-673">The thread has not been started.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/managed-thread-states.md">
          <span data-ttu-id="a51b5-674">États des threads managés</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-674">Managed Thread States</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public bool Join (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Join(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Join(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Join(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Join : TimeSpan -&gt; bool" Usage="thread.Join timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="a51b5-675">
            <see cref="T:System.TimeSpan" /> ayant pour valeur la durée à attendre l'arrêt du thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-675">A <see cref="T:System.TimeSpan" /> set to the amount of time to wait for the thread to terminate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-676">Bloque le thread appelant jusqu'à ce que le thread représenté par cette instance s'arrête ou que la durée spécifiée soit écoulée, tout en continuant d'exécuter le pompage COM et SendMessage standard.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-676">Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-677">
            <see langword="true" /> si le thread s'est arrêté ; <see langword="false" /> s'il ne s'est pas arrêté après l'expiration du délai spécifié par le paramètre <paramref name="timeout" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-677">
              <see langword="true" /> if the thread terminated; <see langword="false" /> if the thread has not terminated after the amount of time specified by the <paramref name="timeout" /> parameter has elapsed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-678"><xref:System.Threading.Thread.Join%28System.TimeSpan%29> est une méthode de synchronisation qui bloque le thread appelant (autrement dit, le thread qui appelle la méthode) jusqu'à ce que soit le thread dont <xref:System.Threading.Thread.Join%2A> méthode est appelée est terminée ou l’intervalle de délai d’expiration est écoulé.</span><span class="sxs-lookup"><span data-stu-id="a51b5-678"><xref:System.Threading.Thread.Join%28System.TimeSpan%29> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed or the time-out interval has elapsed.</span></span> <span data-ttu-id="a51b5-679">Dans l’exemple suivant, le `Thread1` thread appelle le <xref:System.Threading.Thread.Join> méthode de `Thread2`, ce qui conduit `Thread1` pour bloquer jusqu'à `Thread2` terminée ou 2 secondes se soient écoulées.</span><span class="sxs-lookup"><span data-stu-id="a51b5-679">In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block either until `Thread2` has completed or 2 seconds have elapsed.</span></span>  
  
 [!code-csharp[System.Threading.Thread.Join#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.join/cs/join1c.cs#3)]
 [!code-vb[System.Threading.Thread.Join#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.join/vb/join1c.vb#3)]  
  
 <span data-ttu-id="a51b5-680">Si <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> est spécifiée pour `timeout`, cette méthode se comporte comme la <xref:System.Threading.Thread.Join> surcharge de méthode, à l’exception de la valeur de retour.</span><span class="sxs-lookup"><span data-stu-id="a51b5-680">If <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> is specified for `timeout`, this method behaves identically to the <xref:System.Threading.Thread.Join> method overload, except for the return value.</span></span>  
  
 <span data-ttu-id="a51b5-681">Si le thread s’est déjà arrêté lorsque <xref:System.Threading.Thread.Join%2A> est appelée, la méthode retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="a51b5-681">If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.</span></span>  
  
 <span data-ttu-id="a51b5-682">Cette méthode modifie l’état du thread actuel pour inclure <xref:System.Threading.ThreadState.WaitSleepJoin>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-682">This method changes the state of the current thread to include <xref:System.Threading.ThreadState.WaitSleepJoin>.</span></span> <span data-ttu-id="a51b5-683">Vous ne pouvez pas appeler `Join` sur un thread qui se trouve dans le <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> état.</span><span class="sxs-lookup"><span data-stu-id="a51b5-683">You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> state.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-684">L’exemple de code suivant montre comment utiliser un `TimeSpan` valeur avec le `Join` (méthode).</span><span class="sxs-lookup"><span data-stu-id="a51b5-684">The following code example demonstrates how to use a `TimeSpan` value with the `Join` method.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Timespan#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Timespan/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Timespan#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Timespan/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Timespan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Timespan/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a51b5-685">La valeur de <paramref name="timeout" /> est négative et n’est pas égale à <see cref="F:System.Threading.Timeout.Infinite" /> en millisecondes, ou est supérieure à <see cref="F:System.Int32.MaxValue" /> millisecondes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-685">The value of <paramref name="timeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds, or is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="a51b5-686">L’appelant a tenté de joindre un thread dont l’état est <see cref="F:System.Threading.ThreadState.Unstarted" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-686">The caller attempted to join a thread that is in the <see cref="F:System.Threading.ThreadState.Unstarted" /> state.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/managed-thread-states.md">
          <span data-ttu-id="a51b5-687">États des threads managés</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-687">Managed Thread States</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ManagedThreadId">
      <MemberSignature Language="C#" Value="public int ManagedThreadId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ManagedThreadId" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ManagedThreadId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ManagedThreadId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ManagedThreadId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ManagedThreadId : int" Usage="System.Threading.Thread.ManagedThreadId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-688">Obtient un identificateur unique pour le thread managé actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-688">Gets a unique identifier for the current managed thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a51b5-689">Entier représentant un identificateur unique pour ce thread managé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-689">An integer that represents a unique identifier for this managed thread.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-690">D’un thread <xref:System.Threading.Thread.ManagedThreadId%2A> sert de valeur de propriété pour identifier de manière unique ce thread au sein de son processus.</span><span class="sxs-lookup"><span data-stu-id="a51b5-690">A thread's <xref:System.Threading.Thread.ManagedThreadId%2A> property value serves to uniquely identify that thread within its process.</span></span>  
  
 <span data-ttu-id="a51b5-691">La valeur de la <xref:System.Threading.Thread.ManagedThreadId%2A> propriété ne varie pas au fil du temps, même si le code non managé qui héberge le common language runtime implémente le thread comme une fibre.</span><span class="sxs-lookup"><span data-stu-id="a51b5-691">The value of the <xref:System.Threading.Thread.ManagedThreadId%2A> property does not vary over time, even if unmanaged code that hosts the common language runtime implements the thread as a fiber.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemoryBarrier">
      <MemberSignature Language="C#" Value="public static void MemoryBarrier ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MemoryBarrier() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.MemoryBarrier" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MemoryBarrier ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MemoryBarrier();" />
      <MemberSignature Language="F#" Value="static member MemoryBarrier : unit -&gt; unit" Usage="System.Threading.Thread.MemoryBarrier " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-692">Synchronise l'accès à la mémoire comme suit : le processeur qui exécute le thread actuel ne peut pas réorganiser les instructions de sorte que les accès à la mémoire antérieurs à l'appel de <see cref="M:System.Threading.Thread.MemoryBarrier" /> s'exécutent après les accès à la mémoire postérieurs à l'appel de <see cref="M:System.Threading.Thread.MemoryBarrier" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-692">Synchronizes memory access as follows: The processor executing the current thread cannot reorder instructions in such a way that memory accesses prior to the call to <see cref="M:System.Threading.Thread.MemoryBarrier" /> execute after memory accesses that follow the call to <see cref="M:System.Threading.Thread.MemoryBarrier" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-693"><xref:System.Threading.Thread.MemoryBarrier%2A> est requis uniquement sur les systèmes multiprocesseurs avec faible ordonnancement en mémoire (par exemple, un système employant plusieurs processeurs Intel Itanium).</span><span class="sxs-lookup"><span data-stu-id="a51b5-693"><xref:System.Threading.Thread.MemoryBarrier%2A> is required only on multiprocessor systems with weak memory ordering (for example, a system employing multiple Intel Itanium processors).</span></span>  
  
 <span data-ttu-id="a51b5-694">La plupart des cas, le C# `lock` instruction, Visual Basic `SyncLock` instruction, ou la <xref:System.Threading.Monitor> classe fournissent des moyens plus simples pour synchroniser les données.</span><span class="sxs-lookup"><span data-stu-id="a51b5-694">For most purposes, the C# `lock` statement, the Visual Basic `SyncLock` statement, or the <xref:System.Threading.Monitor> class provide easier ways to synchronize data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Threading.Thread.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-695">Obtient ou définit le nom du thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-695">Gets or sets the name of the thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a51b5-696">Chaîne contenant le nom du thread ou <see langword="null" /> si aucun nom n'a été défini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-696">A string containing the name of the thread, or <see langword="null" /> if no name was set.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-697">Cette propriété est en écriture-une fois.</span><span class="sxs-lookup"><span data-stu-id="a51b5-697">This property is write-once.</span></span> <span data-ttu-id="a51b5-698">Étant donné que la valeur par défaut d’un thread <xref:System.Threading.Thread.Name%2A> propriété est `null`, vous pouvez déterminer si un nom a déjà été explicitement attribué au thread en le comparant avec `null`.</span><span class="sxs-lookup"><span data-stu-id="a51b5-698">Because the default value of a thread's <xref:System.Threading.Thread.Name%2A> property is `null`, you can determine whether a name has already been explicitly assigned to the thread by comparing it with `null`.</span></span>  
  
 <span data-ttu-id="a51b5-699">La chaîne assignée à la <xref:System.Threading.Thread.Name%2A> propriété peut inclure n’importe quel caractère Unicode.</span><span class="sxs-lookup"><span data-stu-id="a51b5-699">The string assigned to the <xref:System.Threading.Thread.Name%2A> property can include any Unicode character.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-700">L’exemple suivant montre comment nommer un thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-700">The following example shows how to name a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Name#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Name/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Name#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Name/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Name#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Name/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a51b5-701">Une opération ensembliste a été demandée, mais la propriété <see langword="Name" /> a déjà été définie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-701">A set operation was requested, but the <see langword="Name" /> property has already been set.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public System.Threading.ThreadPriority Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.ThreadPriority Priority" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As ThreadPriority" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ThreadPriority Priority { System::Threading::ThreadPriority get(); void set(System::Threading::ThreadPriority value); };" />
      <MemberSignature Language="F#" Value="member this.Priority : System.Threading.ThreadPriority with get, set" Usage="System.Threading.Thread.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadPriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-702">Obtient ou définit une valeur indiquant la priorité de planification d'un thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-702">Gets or sets a value indicating the scheduling priority of a thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a51b5-703">Une des valeurs de <see cref="T:System.Threading.ThreadPriority" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-703">One of the <see cref="T:System.Threading.ThreadPriority" /> values.</span>
          </span>
          <span data-ttu-id="a51b5-704">La valeur par défaut est <see cref="F:System.Threading.ThreadPriority.Normal" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-704">The default value is <see cref="F:System.Threading.ThreadPriority.Normal" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-705">Un thread peut avoir l’une de l’ordre de priorité suivant <xref:System.Threading.ThreadPriority> valeurs :</span><span class="sxs-lookup"><span data-stu-id="a51b5-705">A thread can be assigned any one of the following priority <xref:System.Threading.ThreadPriority> values:</span></span>  
  
-   `Highest`  
  
-   `AboveNormal`  
  
-   `Normal`  
  
-   `BelowNormal`  
  
-   `Lowest`  
  
 <span data-ttu-id="a51b5-706">Systèmes d’exploitation n’êtes pas obligés de respecter la priorité d’un thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-706">Operating systems are not required to honor the priority of a thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-707">L’exemple suivant montre le résultat de la modification de la priorité d’un thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-707">The following example shows the result of changing the priority of a thread.</span></span> <span data-ttu-id="a51b5-708">Trois threads sont créés, la priorité d’un thread est définie sur <xref:System.Threading.ThreadPriority.BelowNormal?displayProperty=nameWithType>, et la priorité de seconde est définie sur <xref:System.Threading.ThreadPriority.AboveNormal?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-708">Three threads are created, the priority of one thread is set to <xref:System.Threading.ThreadPriority.BelowNormal?displayProperty=nameWithType>, and the priority of a second is set to <xref:System.Threading.ThreadPriority.AboveNormal?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a51b5-709">Chaque thread incrémente une variable dans un `while` boucle et s’exécute pour une durée définie.</span><span class="sxs-lookup"><span data-stu-id="a51b5-709">Each thread increments a variable in a `while` loop and runs for a set time.</span></span>  
  
 [!code-csharp[System.Threading.ThreadPriority#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.ThreadPriority/cs/Example1.cs#1)]
 [!code-vb[System.Threading.ThreadPriority#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.ThreadPriority/vb/Example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="a51b5-710">Le thread a atteint un état final, tel que <see cref="F:System.Threading.ThreadState.Aborted" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-710">The thread has reached a final state, such as <see cref="F:System.Threading.ThreadState.Aborted" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a51b5-711">La valeur spécifiée pour une opération ensembliste n'est pas une valeur <see cref="T:System.Threading.ThreadPriority" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-711">The value specified for a set operation is not a valid <see cref="T:System.Threading.ThreadPriority" /> value.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.ThreadPriority" />
        <related type="Article" href="~/docs/standard/threading/scheduling-threads.md">
          <span data-ttu-id="a51b5-712">Planification de threads</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-712">Scheduling threads</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ResetAbort">
      <MemberSignature Language="C#" Value="public static void ResetAbort ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ResetAbort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.ResetAbort" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ResetAbort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ResetAbort();" />
      <MemberSignature Language="F#" Value="static member ResetAbort : unit -&gt; unit" Usage="System.Threading.Thread.ResetAbort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-713">Annule un <see cref="M:System.Threading.Thread.Abort(System.Object)" /> demandé pour le thread actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-713">Cancels an <see cref="M:System.Threading.Thread.Abort(System.Object)" /> requested for the current thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-714">Cette méthode peut uniquement être appelée par le code avec les autorisations appropriées.</span><span class="sxs-lookup"><span data-stu-id="a51b5-714">This method can only be called by code with the proper permissions.</span></span>  
  
 <span data-ttu-id="a51b5-715">Lorsqu’un appel est effectué vers `Abort` pour terminer un thread, le système génère un <xref:System.Threading.ThreadAbortException>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-715">When a call is made to `Abort` to terminate a thread, the system throws a <xref:System.Threading.ThreadAbortException>.</span></span> <span data-ttu-id="a51b5-716">`ThreadAbortException` est une exception spéciale qui peut être interceptée par le code d’application, mais qui est levée de nouveau à la fin du bloc catch, sauf si `ResetAbort` est appelée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-716">`ThreadAbortException` is a special exception that can be caught by application code, but is rethrown at the end of the catch block unless `ResetAbort` is called.</span></span> <span data-ttu-id="a51b5-717">`ResetAbort` Annule la demande d’abandon et empêche le `ThreadAbortException` à partir de l’arrêt du thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-717">`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread.</span></span>  
  
 <span data-ttu-id="a51b5-718">Consultez <xref:System.Threading.ThreadAbortException> pour obtenir un exemple qui montre comment appeler le `ResetAbort` (méthode).</span><span class="sxs-lookup"><span data-stu-id="a51b5-718">See <xref:System.Threading.ThreadAbortException> for an example that demonstrates calling the `ResetAbort` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="a51b5-719">.NET Core uniquement : ce membre n’est pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-719">.NET Core only: This member is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="a51b5-720">
            <see langword="Abort" /> n'a pas été appelé sur le thread en cours.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-720">
              <see langword="Abort" /> was not invoked on the current thread.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="a51b5-721">L’appelant n’a pas l’autorisation de sécurité requise pour le thread actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-721">The caller does not have the required security permission for the current thread.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="a51b5-722">pour les opérations avancées sur les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-722">for advanced operations on threads.</span>
          </span>
          <span data-ttu-id="a51b5-723">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-723">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span>
          </span>
        </permission>
        <related type="Article" href="~/docs/standard/threading/destroying-threads.md">
          <span data-ttu-id="a51b5-724">Détruire des threads</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-724">Destroying threads</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/managed-thread-states.md">
          <span data-ttu-id="a51b5-725">États des threads managés</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-725">Managed Thread States</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="thread.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("Thread.Resume has been deprecated.  Please use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.  http://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-726">Reprend un thread qui a été suspendu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-726">Resumes a thread that has been suspended.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="a51b5-727">N’utilisez pas le <xref:System.Threading.Thread.Suspend%2A> et <xref:System.Threading.Thread.Resume%2A> méthodes pour synchroniser les activités de threads.</span><span class="sxs-lookup"><span data-stu-id="a51b5-727">Do not use the <xref:System.Threading.Thread.Suspend%2A> and <xref:System.Threading.Thread.Resume%2A> methods to synchronize the activities of threads.</span></span> <span data-ttu-id="a51b5-728">Vous ne disposez d’aucun moyen de savoir quel code un thread s’exécute lorsque vous l’interrompez.</span><span class="sxs-lookup"><span data-stu-id="a51b5-728">You have no way of knowing what code a thread is executing when you suspend it.</span></span> <span data-ttu-id="a51b5-729">Si vous suspendez un thread pendant qu’il détient des verrous pendant une évaluation des autorisations de sécurité, d’autres threads le <xref:System.AppDomain> risque d’être bloqué.</span><span class="sxs-lookup"><span data-stu-id="a51b5-729">If you suspend a thread while it holds locks during a security permission evaluation, other threads in the <xref:System.AppDomain> might be blocked.</span></span> <span data-ttu-id="a51b5-730">Si vous suspendez un thread pendant son exécution un constructeur de classe, d’autres threads le <xref:System.AppDomain> qui tente d’utiliser cette classe sera bloqué.</span><span class="sxs-lookup"><span data-stu-id="a51b5-730">If you suspend a thread while it is executing a class constructor, other threads in the <xref:System.AppDomain> that attempt to use that class are blocked.</span></span> <span data-ttu-id="a51b5-731">Blocages peuvent se produire très facilement.</span><span class="sxs-lookup"><span data-stu-id="a51b5-731">Deadlocks can occur very easily.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="a51b5-732">.NET Core uniquement : ce membre n’est pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-732">.NET Core only: This member is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="a51b5-733">Le thread n’a pas été démarré, est inactif ou n’est pas dans l’état interrompu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-733">The thread has not been started, is dead, or is not in the suspended state.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="a51b5-734">L'appelant n'a pas de <see cref="T:System.Security.Permissions.SecurityPermission" /> appropriée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-734">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="a51b5-735">pour les opérations avancées sur les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-735">for advanced operations on threads.</span>
          </span>
          <span data-ttu-id="a51b5-736">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-736">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          </span>
        </permission>
        <related type="Article" href="~/docs/standard/threading/pausing-and-resuming-threads.md">
          <span data-ttu-id="a51b5-737">Suspension et interruption de threads</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-737">Pausing and interrupting threads</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/managed-thread-states.md">
          <span data-ttu-id="a51b5-738">États des threads managés</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-738">Managed Thread States</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SetApartmentState">
      <MemberSignature Language="C#" Value="public void SetApartmentState (System.Threading.ApartmentState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetApartmentState(valuetype System.Threading.ApartmentState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetApartmentState (state As ApartmentState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetApartmentState(System::Threading::ApartmentState state);" />
      <MemberSignature Language="F#" Value="member this.SetApartmentState : System.Threading.ApartmentState -&gt; unit" Usage="thread.SetApartmentState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Threading.ApartmentState" />
      </Parameters>
      <Docs>
        <param name="state">
          <span data-ttu-id="a51b5-739">Nouvel état de cloisonnement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-739">The new apartment state.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-740">Définit l'état de cloisonnement d'un thread avant qu'il ne soit démarré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-740">Sets the apartment state of a thread before it is started.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-741">Nouveaux threads sont initialisés en tant que <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> si leur état de cloisonnement n’a pas été défini avant leur démarrage.</span><span class="sxs-lookup"><span data-stu-id="a51b5-741">New threads are initialized as <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> if their apartment state has not been set before they are started.</span></span> <span data-ttu-id="a51b5-742">État de cloisonnement doit être définie avant le démarrage d’un thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-742">Apartment state must be set before a thread is started.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-743">Le thread principal de l’application est initialisé à <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> par défaut.</span><span class="sxs-lookup"><span data-stu-id="a51b5-743">The main application thread is initialized to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> by default.</span></span> <span data-ttu-id="a51b5-744">La seule façon de définir l’état de cloisonnement du thread principal de l’application à <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> consiste à appliquer le <xref:System.STAThreadAttribute> d’attribut à la méthode de point d’entrée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-744">The only way to set the apartment state of the main application thread to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> is to apply the <xref:System.STAThreadAttribute> attribute to the entry point method.</span></span>  
  
 <span data-ttu-id="a51b5-745">Le <xref:System.Threading.Thread.SetApartmentState%2A> (méthode), avec la <xref:System.Threading.Thread.GetApartmentState%2A> (méthode) et le <xref:System.Threading.Thread.TrySetApartmentState%2A> (méthode), remplace le <xref:System.Threading.Thread.ApartmentState%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="a51b5-745">The <xref:System.Threading.Thread.SetApartmentState%2A> method, along with the <xref:System.Threading.Thread.GetApartmentState%2A> method and the <xref:System.Threading.Thread.TrySetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-746">L’exemple de code suivant montre le <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, et <xref:System.Threading.Thread.TrySetApartmentState%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="a51b5-746">The following code example demonstrates the <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, and <xref:System.Threading.Thread.TrySetApartmentState%2A> methods.</span></span> <span data-ttu-id="a51b5-747">L’exemple de code crée un thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-747">The code example creates a thread.</span></span> <span data-ttu-id="a51b5-748">Avant que le thread est démarré, <xref:System.Threading.Thread.GetApartmentState%2A> affiche initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> état et <xref:System.Threading.Thread.SetApartmentState%2A> modifie l’état à <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-748">Before the thread is started, <xref:System.Threading.Thread.GetApartmentState%2A> displays the initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> state and <xref:System.Threading.Thread.SetApartmentState%2A> changes the state to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a51b5-749">Le <xref:System.Threading.Thread.TrySetApartmentState%2A> méthode renvoie alors `false` lorsque vous tentez de modifier l’état à <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> , car l’état de cloisonnement est déjà défini.</span><span class="sxs-lookup"><span data-stu-id="a51b5-749">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> because the apartment state is already set.</span></span> <span data-ttu-id="a51b5-750">Si la même opération avait été tentée avec <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> aurait été levée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-750">If the same operation had been attempted with <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> would have been thrown.</span></span>  
  
 <span data-ttu-id="a51b5-751">Une fois que le thread est démarré, le <xref:System.Threading.Thread.TrySetApartmentState%2A> méthode est utilisée à nouveau.</span><span class="sxs-lookup"><span data-stu-id="a51b5-751">After the thread is started, the <xref:System.Threading.Thread.TrySetApartmentState%2A> method is used again.</span></span> <span data-ttu-id="a51b5-752">Cette fois, elle lève <xref:System.Threading.ThreadStateException> , car le thread a déjà été démarré.</span><span class="sxs-lookup"><span data-stu-id="a51b5-752">This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.</span></span>  
  
 [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cpp/source.cpp#1)]
 [!code-csharp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cs/source.cs#1)]
 [!code-vb[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="a51b5-753">.NET Core uniquement : ce membre n’est pas pris en charge sur les plateformes macOS et Linux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-753">.NET Core only: This member is not supported on the macOS and Linux platforms.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a51b5-754">
            <paramref name="state" /> n'est pas un état de cloisonnement valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-754">
              <paramref name="state" /> is not a valid apartment state.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="a51b5-755">Le thread a déjà été démarré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-755">The thread has already been started.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a51b5-756">L’état de cloisonnement a déjà été initialisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-756">The apartment state has already been initialized.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetCompressedStack">
      <MemberSignature Language="C#" Value="public void SetCompressedStack (System.Threading.CompressedStack stack);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCompressedStack(class System.Threading.CompressedStack stack) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCompressedStack (stack As CompressedStack)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCompressedStack(System::Threading::CompressedStack ^ stack);" />
      <MemberSignature Language="F#" Value="member this.SetCompressedStack : System.Threading.CompressedStack -&gt; unit" Usage="thread.SetCompressedStack stack" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("Thread.SetCompressedStack is no longer supported. Please use the System.Threading.CompressedStack class")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stack" Type="System.Threading.CompressedStack" />
      </Parameters>
      <Docs>
        <param name="stack">
          <span data-ttu-id="a51b5-757">Objet <see cref="T:System.Threading.CompressedStack" /> à appliquer au thread actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-757">The <see cref="T:System.Threading.CompressedStack" /> object to be applied to the current thread.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-758">Applique une <see cref="T:System.Threading.CompressedStack" /> capturée au thread actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-758">Applies a captured <see cref="T:System.Threading.CompressedStack" /> to the current thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-759">Cette méthode n’est plus pris en charge.</span><span class="sxs-lookup"><span data-stu-id="a51b5-759">This method is no longer supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a51b5-760">Dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-760">In all cases.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="a51b5-761">requiert une confiance totale pour l’appelant immédiat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-761">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="a51b5-762">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-762">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public static void SetData (LocalDataStoreSlot slot, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetData(class System.LocalDataStoreSlot slot, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetData (slot As LocalDataStoreSlot, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetData(LocalDataStoreSlot ^ slot, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="static member SetData : LocalDataStoreSlot * obj -&gt; unit" Usage="System.Threading.Thread.SetData (slot, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="slot" Type="System.LocalDataStoreSlot" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="slot">
          <span data-ttu-id="a51b5-763">
            <see cref="T:System.LocalDataStoreSlot" /> dans lequel définir la valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-763">The <see cref="T:System.LocalDataStoreSlot" /> in which to set the value.</span>
          </span>
        </param>
        <param name="data">
          <span data-ttu-id="a51b5-764">Valeur à définir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-764">The value to be set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-765">Définit les données dans l'emplacement spécifié sur le thread en cours d'exécution, pour le domaine actuel de ce thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-765">Sets the data in the specified slot on the currently running thread, for that thread's current domain.</span>
          </span>
          <span data-ttu-id="a51b5-766">Pour de meilleures performances, utilisez à la place les champs marqués avec l'attribut <see cref="T:System.ThreadStaticAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-766">For better performance, use fields marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="a51b5-767">Le .NET Framework fournit deux mécanismes pour utiliser le stockage local des threads (TLS) : les champs statiques relatifs à un thread (autrement dit, les champs qui sont marqués avec le <xref:System.ThreadStaticAttribute> attribut) et emplacements de données.</span><span class="sxs-lookup"><span data-stu-id="a51b5-767">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="a51b5-768">Les champs statiques relatifs à un thread fournissent de meilleures performances que les emplacements de données et activent la vérification de type au moment de la compilation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-768">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="a51b5-769">Pour plus d’informations sur l’utilisation de TLS, consultez [stockage Local des threads : champs statiques relatifs à un Thread et emplacements de données](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="a51b5-769">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="a51b5-770">Threads utilisent un mécanisme de mémoire de magasin local pour stocker les données propres au thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-770">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="a51b5-771">Le common language runtime alloue un tableau de magasin de données à chaque processus lors de sa création.</span><span class="sxs-lookup"><span data-stu-id="a51b5-771">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="a51b5-772">Le thread peut allouer un emplacement de données dans le magasin de données, stockez et récupérez une données valeur dans l’emplacement et libérer de l’emplacement pour une réutilisation après la fin de la procédure de thread et le <xref:System.Threading.Thread> objet a été récupéré par le garbage collection.</span><span class="sxs-lookup"><span data-stu-id="a51b5-772">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread procedure ends and the <xref:System.Threading.Thread> object has been reclaimed by garbage collection.</span></span> <span data-ttu-id="a51b5-773">Emplacements de données sont uniques pour chaque thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-773">Data slots are unique per thread.</span></span> <span data-ttu-id="a51b5-774">Aucun autre thread (pas même un thread enfant) ne peut obtenir les données.</span><span class="sxs-lookup"><span data-stu-id="a51b5-774">No other thread (not even a child thread) can get that data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-775"><xref:System.Threading.Thread.SetData%2A> est un `Shared` méthode s’applique toujours au thread en cours d’exécution, même si vous appelez à l’aide d’une variable qui fait référence à un autre thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-775"><xref:System.Threading.Thread.SetData%2A> is a `Shared` method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread.</span></span> <span data-ttu-id="a51b5-776">Pour éviter toute confusion, utilisez le nom de classe lors de l’appel `Shared` méthodes : `Thread.SetData(testSlot, "test data")`.</span><span class="sxs-lookup"><span data-stu-id="a51b5-776">To avoid confusion, use the class name when calling `Shared` methods: `Thread.SetData(testSlot, "test data")`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-777">Cette section contient deux exemples de code.</span><span class="sxs-lookup"><span data-stu-id="a51b5-777">This section contains two code examples.</span></span> <span data-ttu-id="a51b5-778">Le premier exemple montre comment utiliser un champ est marqué avec le <xref:System.ThreadStaticAttribute> attribut devant contenir les informations spécifiques aux threads.</span><span class="sxs-lookup"><span data-stu-id="a51b5-778">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="a51b5-779">Le deuxième exemple montre comment utiliser un emplacement de données pour faire la même chose.</span><span class="sxs-lookup"><span data-stu-id="a51b5-779">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="a51b5-780">**Premier exemple**</span><span class="sxs-lookup"><span data-stu-id="a51b5-780">**First Example**</span></span>  
  
 <span data-ttu-id="a51b5-781">L’exemple suivant montre comment utiliser un champ est marqué avec <xref:System.ThreadStaticAttribute> pour contenir des informations spécifiques au thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-781">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="a51b5-782">Cette technique offre de meilleures performances que la technique qui est indiquée dans le deuxième exemple.</span><span class="sxs-lookup"><span data-stu-id="a51b5-782">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="a51b5-783">**Deuxième exemple**</span><span class="sxs-lookup"><span data-stu-id="a51b5-783">**Second Example**</span></span>  
  
 <span data-ttu-id="a51b5-784">L’exemple suivant montre comment utiliser un emplacement de données pour stocker des informations spécifiques au thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-784">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)" />
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md">
          <span data-ttu-id="a51b5-785">Threads et threading</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-785">Threads and Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md">
          <span data-ttu-id="a51b5-786">Stockage local des threads : champs statiques et emplacements de données relatifs à un thread</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-786">Thread Local Storage: Thread-Relative Static Fields and Data Slots</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sleep">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-787">Suspend le thread actuel pendant la durée spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-787">Suspends the current thread for the specified amount of time.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sleep">
      <MemberSignature Language="C#" Value="public static void Sleep (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sleep(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Sleep(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sleep (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sleep(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member Sleep : int -&gt; unit" Usage="System.Threading.Thread.Sleep millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="a51b5-788">Nombre de millisecondes pendant lesquelles le thread est suspendu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-788">The number of milliseconds for which the thread is suspended.</span>
          </span>
          <span data-ttu-id="a51b5-789">Si la valeur de l’argument <c>millisecondsTimeout</c> est égale à zéro, le thread abandonne le reste de sa tranche de temps à n’importe quel thread de priorité égale prêt à être exécuté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-789">If the value of the <c>millisecondsTimeout</c> argument is zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run.</span>
          </span>
          <span data-ttu-id="a51b5-790">S'il n'existe pas d'autres threads de priorité égale prêts à être exécutés, l'exécution du thread actuel n'est pas suspendue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-790">If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-791">Suspend le thread actuel pendant le nombre spécifié de millisecondes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-791">Suspends the current thread for the specified number of milliseconds.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-792">Le thread n’est plus planifié pour l’exécution par le système d’exploitation pendant la durée spécifiée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-792">The thread will not be scheduled for execution by the operating system for the amount of time specified.</span></span> <span data-ttu-id="a51b5-793">Cette méthode modifie l’état du thread pour inclure <xref:System.Threading.ThreadState.WaitSleepJoin>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-793">This method changes the state of the thread to include <xref:System.Threading.ThreadState.WaitSleepJoin>.</span></span>  
  
 <span data-ttu-id="a51b5-794">Vous pouvez spécifier <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> pour le `millisecondsTimeout` paramètre d’interruption du thread indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="a51b5-794">You can specify <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for the `millisecondsTimeout` parameter to suspend the thread indefinitely.</span></span> <span data-ttu-id="a51b5-795">Toutefois, nous vous recommandons d’utiliser des autres <xref:System.Threading?displayProperty=nameWithType> classes telles que <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, ou <xref:System.Threading.Semaphore> au lieu de cela pour synchroniser des threads ou gérer les ressources.</span><span class="sxs-lookup"><span data-stu-id="a51b5-795">However, we recommend that you use other <xref:System.Threading?displayProperty=nameWithType> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources.</span></span>  
  
 <span data-ttu-id="a51b5-796">Les battements d’horloge système à un rythme spécifique appelée la résolution de l’horloge.</span><span class="sxs-lookup"><span data-stu-id="a51b5-796">The system clock ticks at a specific rate called the clock resolution.</span></span> <span data-ttu-id="a51b5-797">Le délai d’expiration réelle peut être pas exactement le délai spécifié, car le délai d’expiration spécifié est ajustée pour coïncider avec battements d’horloge.</span><span class="sxs-lookup"><span data-stu-id="a51b5-797">The actual timeout might not be exactly the specified timeout, because the specified timeout will be adjusted to coincide with clock ticks.</span></span> <span data-ttu-id="a51b5-798">Pour plus d’informations sur la résolution de l’horloge et le temps d’attente, consultez la [veille fonction](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) rubrique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-798">For more information on clock resolution and the waiting time, see the [Sleep function](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) topic.</span></span> <span data-ttu-id="a51b5-799">Cette méthode appelle la [mise en veille de la fonction](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) à partir de l’API du système Windows.</span><span class="sxs-lookup"><span data-stu-id="a51b5-799">This method calls the [Sleep function](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) from the Windows system APIs.</span></span>  
  
 <span data-ttu-id="a51b5-800">Cette méthode n’effectue pas standard pompage COM et SendMessage.</span><span class="sxs-lookup"><span data-stu-id="a51b5-800">This method does not perform standard COM and SendMessage pumping.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-801">Si vous devez mettre en veille sur un thread qui a <xref:System.STAThreadAttribute>, mais que vous souhaitez effectuer standard pompage COM et SendMessage, envisagez d’utiliser une des surcharges de la <xref:System.Threading.Thread.Join%2A> méthode qui spécifie un intervalle de délai d’attente.</span><span class="sxs-lookup"><span data-stu-id="a51b5-801">If you need to sleep on a thread that has <xref:System.STAThreadAttribute>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <xref:System.Threading.Thread.Join%2A> method that specifies a timeout interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-802">L’exemple suivant utilise la <xref:System.Threading.Thread.Sleep%2A> méthode pour bloquer le thread principal de l’application.</span><span class="sxs-lookup"><span data-stu-id="a51b5-802">The following example uses the <xref:System.Threading.Thread.Sleep%2A> method to block the application's main thread.</span></span>  
  
 [!code-cpp[Thread.Sleep#1](~/samples/snippets/cpp/VS_Snippets_CLR/thread.sleep/cpp/example.cpp#1)]
 [!code-csharp[Thread.Sleep#1](~/samples/snippets/csharp/VS_Snippets_CLR/thread.sleep/cs/example.cs#1)]
 [!code-vb[Thread.Sleep#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/thread.sleep/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a51b5-803">La valeur du délai d’attente est négative et n’est pas égale à <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-803">The time-out value is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sleep">
      <MemberSignature Language="C#" Value="public static void Sleep (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sleep(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Sleep(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sleep (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sleep(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Sleep : TimeSpan -&gt; unit" Usage="System.Threading.Thread.Sleep timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="a51b5-804">Durée pendant laquelle le thread est suspendu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-804">The amount of time for which the thread is suspended.</span>
          </span>
          <span data-ttu-id="a51b5-805">Si la valeur de l’argument <c>millisecondsTimeout</c> est <see cref="F:System.TimeSpan.Zero" />, le thread abandonne le reste de sa tranche de temps à n’importe quel thread de priorité égale prêt à être exécuté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-805">If the value of the <c>millisecondsTimeout</c> argument is <see cref="F:System.TimeSpan.Zero" />, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run.</span>
          </span>
          <span data-ttu-id="a51b5-806">S'il n'existe pas d'autres threads de priorité égale prêts à être exécutés, l'exécution du thread actuel n'est pas suspendue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-806">If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-807">Suspend le thread actuel pendant la durée spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-807">Suspends the current thread for the specified amount of time.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-808">Le thread n’est plus planifié pour l’exécution par le système d’exploitation pendant la durée spécifiée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-808">The thread will not be scheduled for execution by the operating system for the amount of time specified.</span></span> <span data-ttu-id="a51b5-809">Cette méthode modifie l’état du thread pour inclure <xref:System.Threading.ThreadState.WaitSleepJoin>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-809">This method changes the state of the thread to include <xref:System.Threading.ThreadState.WaitSleepJoin>.</span></span>  
  
 <span data-ttu-id="a51b5-810">Vous pouvez spécifier <xref:System.Threading.Timeout.InfiniteTimeSpan?displayProperty=nameWithType> pour le `timeout` paramètre d’interruption du thread indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="a51b5-810">You can specify <xref:System.Threading.Timeout.InfiniteTimeSpan?displayProperty=nameWithType> for the `timeout` parameter to suspend the thread indefinitely.</span></span> <span data-ttu-id="a51b5-811">Toutefois, nous vous recommandons d’utiliser des autres <xref:System.Threading?displayProperty=nameWithType> classes telles que <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, ou <xref:System.Threading.Semaphore> au lieu de cela pour synchroniser des threads ou gérer les ressources.</span><span class="sxs-lookup"><span data-stu-id="a51b5-811">However, we recommend that you use other <xref:System.Threading?displayProperty=nameWithType> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources.</span></span>  
  
 <span data-ttu-id="a51b5-812">Cette surcharge de <xref:System.Threading.Thread.Sleep%2A> utilise le nombre total de millisecondes entières dans `timeout`.</span><span class="sxs-lookup"><span data-stu-id="a51b5-812">This overload of <xref:System.Threading.Thread.Sleep%2A> uses the total number of whole milliseconds in `timeout`.</span></span> <span data-ttu-id="a51b5-813">Fractions de milliseconde sont ignorées.</span><span class="sxs-lookup"><span data-stu-id="a51b5-813">Fractional milliseconds are discarded.</span></span>  
  
 <span data-ttu-id="a51b5-814">Cette méthode n’effectue pas standard pompage COM et SendMessage.</span><span class="sxs-lookup"><span data-stu-id="a51b5-814">This method does not perform standard COM and SendMessage pumping.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-815">Si vous devez mettre en veille sur un thread qui a <xref:System.STAThreadAttribute>, mais que vous souhaitez effectuer standard pompage COM et SendMessage, envisagez d’utiliser une des surcharges de la <xref:System.Threading.Thread.Join%2A> méthode qui spécifie un intervalle de délai d’attente.</span><span class="sxs-lookup"><span data-stu-id="a51b5-815">If you need to sleep on a thread that has <xref:System.STAThreadAttribute>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <xref:System.Threading.Thread.Join%2A> method that specifies a timeout interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-816">L’exemple suivant utilise le <xref:System.Threading.Thread.Sleep%28System.TimeSpan%29> surcharge de méthode pour bloquer des cinq fois, thread principal de l’application pendant deux secondes.</span><span class="sxs-lookup"><span data-stu-id="a51b5-816">The following example uses the <xref:System.Threading.Thread.Sleep%28System.TimeSpan%29> method overload to block the application's main thread five times, for two seconds each time.</span></span>  
  
 [!code-cpp[Thread.Sleep_TimeSpan#1](~/samples/snippets/cpp/VS_Snippets_CLR/thread.sleep_timespan/cpp/example.cpp#1)]
 [!code-csharp[Thread.Sleep_TimeSpan#1](~/samples/snippets/csharp/VS_Snippets_CLR/thread.sleep_timespan/cs/example.cs#1)]
 [!code-vb[Thread.Sleep_TimeSpan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/thread.sleep_timespan/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a51b5-817">La valeur de <paramref name="timeout" /> est négative et n’est pas égale à <see cref="F:System.Threading.Timeout.Infinite" /> en millisecondes, ou est supérieure à <see cref="F:System.Int32.MaxValue" /> millisecondes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-817">The value of <paramref name="timeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds, or is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SpinWait">
      <MemberSignature Language="C#" Value="public static void SpinWait (int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SpinWait(int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SpinWait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SpinWait (iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SpinWait(int iterations);" />
      <MemberSignature Language="F#" Value="static member SpinWait : int -&gt; unit" Usage="System.Threading.Thread.SpinWait iterations" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="iterations">
          <span data-ttu-id="a51b5-818">Entier signé 32 bits qui définit le temps pendant lequel un thread doit attendre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-818">A 32-bit signed integer that defines how long a thread is to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-819">Provoque l'attente d'un thread pendant le nombre de fois défini par le paramètre <paramref name="iterations" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-819">Causes a thread to wait the number of times defined by the <paramref name="iterations" /> parameter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-820">Le <xref:System.Threading.Thread.SpinWait%2A> méthode est utile pour implémenter des verrous.</span><span class="sxs-lookup"><span data-stu-id="a51b5-820">The <xref:System.Threading.Thread.SpinWait%2A> method is useful for implementing locks.</span></span> <span data-ttu-id="a51b5-821">Classes dans le .NET Framework, telles que <xref:System.Threading.Monitor> et <xref:System.Threading.ReaderWriterLock>, utilisez cette méthode en interne.</span><span class="sxs-lookup"><span data-stu-id="a51b5-821">Classes in the .NET Framework, such as <xref:System.Threading.Monitor> and <xref:System.Threading.ReaderWriterLock>, use this method internally.</span></span> <span data-ttu-id="a51b5-822"><xref:System.Threading.Thread.SpinWait%2A> met essentiellement le processeur dans une boucle serrée très, avec le nombre de boucles spécifié par le `iterations` paramètre.</span><span class="sxs-lookup"><span data-stu-id="a51b5-822"><xref:System.Threading.Thread.SpinWait%2A> essentially puts the processor into a very tight loop, with the loop count specified by the `iterations` parameter.</span></span> <span data-ttu-id="a51b5-823">Par conséquent, la durée de l’attente dépend de la vitesse du processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-823">The duration of the wait therefore depends on the speed of the processor.</span></span>  
  
 <span data-ttu-id="a51b5-824">Comparez ceci avec la <xref:System.Threading.Thread.Sleep%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="a51b5-824">Contrast this with the <xref:System.Threading.Thread.Sleep%2A> method.</span></span> <span data-ttu-id="a51b5-825">Un thread qui appelle <xref:System.Threading.Thread.Sleep%2A> génère le reste de sa tranche de temps processeur, même si l’intervalle spécifié sont égal à zéro.</span><span class="sxs-lookup"><span data-stu-id="a51b5-825">A thread that calls <xref:System.Threading.Thread.Sleep%2A> yields the rest of its current slice of processor time, even if the specified interval is zero.</span></span> <span data-ttu-id="a51b5-826">En spécifiant un intervalle différent de zéro pour <xref:System.Threading.Thread.Sleep%2A> supprime le thread d’examen par le Planificateur de threads jusqu'à ce que l’intervalle de temps s’est écoulé.</span><span class="sxs-lookup"><span data-stu-id="a51b5-826">Specifying a non-zero interval for <xref:System.Threading.Thread.Sleep%2A> removes the thread from consideration by the thread scheduler until the time interval has elapsed.</span></span>  
  
 <span data-ttu-id="a51b5-827"><xref:System.Threading.Thread.SpinWait%2A> est généralement pas utile pour les applications ordinaires.</span><span class="sxs-lookup"><span data-stu-id="a51b5-827"><xref:System.Threading.Thread.SpinWait%2A> is not generally useful for ordinary applications.</span></span> <span data-ttu-id="a51b5-828">Dans la plupart des cas, vous devez utiliser les classes de synchronisation fournies par le .NET Framework ; par exemple, appeler <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> ou une instruction qui encapsule <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> (`lock` en c# ou `SyncLock` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="a51b5-828">In most cases, you should use the synchronization classes provided by the .NET Framework; for example, call <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> or a statement that wraps <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> (`lock` in C# or `SyncLock` in Visual Basic).</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="a51b5-829">Dans les rares cas où il est avantageux d’éviter un changement de contexte, par exemple lorsque vous savez qu’un changement d’état est imminent, effectuez un appel à la <xref:System.Threading.Thread.SpinWait%2A> méthode dans la boucle.</span><span class="sxs-lookup"><span data-stu-id="a51b5-829">In the rare case where it is advantageous to avoid a context switch, such as when you know that a state change is imminent, make a call to the <xref:System.Threading.Thread.SpinWait%2A> method in your loop.</span></span> <span data-ttu-id="a51b5-830">Le code <xref:System.Threading.Thread.SpinWait%2A> exécute est conçu pour éviter les problèmes qui peuvent se produire sur les ordinateurs avec plusieurs processeurs.</span><span class="sxs-lookup"><span data-stu-id="a51b5-830">The code <xref:System.Threading.Thread.SpinWait%2A> executes is designed to prevent problems that can occur on computers with multiple processors.</span></span> <span data-ttu-id="a51b5-831">Par exemple, sur les ordinateurs avec plusieurs processeurs Intel utilisant la technologie Hyper-Threading, <xref:System.Threading.Thread.SpinWait%2A> empêche la privation de processeur dans certaines situations.</span><span class="sxs-lookup"><span data-stu-id="a51b5-831">For example, on computers with multiple Intel processors employing Hyper-Threading technology, <xref:System.Threading.Thread.SpinWait%2A> prevents processor starvation in certain situations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-832">Entraîne la planification de l'exécution d'un thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-832">Causes a thread to be scheduled for execution.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="thread.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-833">Provoque le changement, par le système d'exploitation, de l'état de l'instance actuelle en <see cref="F:System.Threading.ThreadState.Running" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-833">Causes the operating system to change the state of the current instance to <see cref="F:System.Threading.ThreadState.Running" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-834">Une fois qu’un thread se trouve dans le <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> d’état, le système d’exploitation peut planifier son exécution.</span><span class="sxs-lookup"><span data-stu-id="a51b5-834">Once a thread is in the <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> state, the operating system can schedule it for execution.</span></span> <span data-ttu-id="a51b5-835">Le thread d’exécution commence à la première ligne de la méthode représentée par le <xref:System.Threading.ThreadStart> ou <xref:System.Threading.ParameterizedThreadStart> délégué fourni au constructeur de thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-835">The thread begins executing at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate supplied to the thread constructor.</span></span> <span data-ttu-id="a51b5-836">Notez que l’appel à <xref:System.Threading.Thread.Start%2A> ne bloque pas le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="a51b5-836">Note that the call to <xref:System.Threading.Thread.Start%2A> does not block the calling thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-837">Si cette surcharge est utilisée avec un thread créé à l’aide un <xref:System.Threading.ParameterizedThreadStart> déléguer, `null` est passé à la méthode exécutée par le thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-837">If this overload is used with a thread created using a <xref:System.Threading.ParameterizedThreadStart> delegate, `null` is passed to the method executed by the thread.</span></span>  
  
 <span data-ttu-id="a51b5-838">Une fois que le thread s’arrête, il ne peut pas être redémarré avec un autre appel à `Start`.</span><span class="sxs-lookup"><span data-stu-id="a51b5-838">Once the thread terminates, it cannot be restarted with another call to `Start`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-839">L’exemple suivant crée et démarre un thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-839">The following example creates and starts a thread.</span></span>  
  
 [!code-cpp[ThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR/ThreadStart/CPP/threadstart.cpp#1)]
 [!code-csharp[ThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR/ThreadStart/CS/threadstart.cs#1)]
 [!code-vb[ThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ThreadStart/VB/threadstart.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="a51b5-840">Le thread a déjà été démarré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-840">The thread has already been started.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="a51b5-841">La mémoire disponible est insuffisante pour démarrer ce thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-841">There is not enough memory available to start this thread.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/threads-and-threading.md">
          <span data-ttu-id="a51b5-842">Threads et threading</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-842">Threads and Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md">
          <span data-ttu-id="a51b5-843">Création de threads et passage de données au démarrage</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-843">Creating Threads and Passing Data at Start Time</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Start(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(System::Object ^ parameter);" />
      <MemberSignature Language="F#" Value="member this.Start : obj -&gt; unit" Usage="thread.Start parameter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="a51b5-844">Objet contenant les données que la méthode exécutée par le thread doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-844">An object that contains data to be used by the method the thread executes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-845">Provoque le changement, par le système d'exploitation, de l'état de l'instance actuelle en <see cref="F:System.Threading.ThreadState.Running" />, et fournit éventuellement un objet contenant les données que la méthode exécutée par le thread doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-845">Causes the operating system to change the state of the current instance to <see cref="F:System.Threading.ThreadState.Running" />, and optionally supplies an object containing data to be used by the method the thread executes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-846">Une fois qu’un thread se trouve dans le <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> d’état, le système d’exploitation peut planifier son exécution.</span><span class="sxs-lookup"><span data-stu-id="a51b5-846">Once a thread is in the <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> state, the operating system can schedule it for execution.</span></span> <span data-ttu-id="a51b5-847">Le thread d’exécution commence à la première ligne de la méthode représentée par le <xref:System.Threading.ThreadStart> ou <xref:System.Threading.ParameterizedThreadStart> délégué fourni au constructeur de thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-847">The thread begins executing at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate supplied to the thread constructor.</span></span> <span data-ttu-id="a51b5-848">Notez que l’appel à <xref:System.Threading.Thread.Start%2A> ne bloque pas le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="a51b5-848">Note that the call to <xref:System.Threading.Thread.Start%2A> does not block the calling thread.</span></span>  
  
 <span data-ttu-id="a51b5-849">Une fois que le thread s’arrête, il ne peut pas être redémarré avec un autre appel à `Start`.</span><span class="sxs-lookup"><span data-stu-id="a51b5-849">Once the thread terminates, it cannot be restarted with another call to `Start`.</span></span>  
  
 <span data-ttu-id="a51b5-850">Cette surcharge et la <xref:System.Threading.ParameterizedThreadStart> délégué facilitent l’utilisation passer des données à une procédure de thread, mais la technique n’est pas de type sécurisé, car n’importe quel objet peut être passé à cette surcharge.</span><span class="sxs-lookup"><span data-stu-id="a51b5-850">This overload and the <xref:System.Threading.ParameterizedThreadStart> delegate make it easy to pass data to a thread procedure, but the technique is not type safe because any object can be passed to this overload.</span></span> <span data-ttu-id="a51b5-851">Une façon plus fiable pour transmettre des données à une procédure de thread est de placer la procédure de thread et les champs de données dans un objet de travail.</span><span class="sxs-lookup"><span data-stu-id="a51b5-851">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="a51b5-852">Pour plus d’informations, consultez [création de Threads et passage de données à l’heure de début](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span><span class="sxs-lookup"><span data-stu-id="a51b5-852">For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-853">L’exemple suivant crée un <xref:System.Threading.ParameterizedThreadStart> délégué avec une méthode statique et une méthode d’instance.</span><span class="sxs-lookup"><span data-stu-id="a51b5-853">The following example creates a <xref:System.Threading.ParameterizedThreadStart> delegate with a static method and an instance method.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="a51b5-854">Le thread a déjà été démarré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-854">The thread has already been started.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="a51b5-855">La mémoire disponible est insuffisante pour démarrer ce thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-855">There is not enough memory available to start this thread.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a51b5-856">Ce thread a été créé à l’aide d’un délégué <see cref="T:System.Threading.ThreadStart" /> au lieu d’un délégué <see cref="T:System.Threading.ParameterizedThreadStart" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-856">This thread was created using a <see cref="T:System.Threading.ThreadStart" /> delegate instead of a <see cref="T:System.Threading.ParameterizedThreadStart" /> delegate.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.ParameterizedThreadStart" />
        <altmember cref="T:System.AppDomain" />
        <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md">
          <span data-ttu-id="a51b5-857">Création de Threads</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-857">Creating Threads</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Suspend">
      <MemberSignature Language="C#" Value="public void Suspend ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Suspend() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Suspend" />
      <MemberSignature Language="VB.NET" Value="Public Sub Suspend ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Suspend();" />
      <MemberSignature Language="F#" Value="member this.Suspend : unit -&gt; unit" Usage="thread.Suspend " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("Thread.Suspend has been deprecated.  Please use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.  http://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-858">Suspend le thread ou, s'il est déjà suspendu, n'a aucun effet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-858">Either suspends the thread, or if the thread is already suspended, has no effect.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-859">Si le thread est déjà suspendu, cette méthode n’a aucun effet.</span><span class="sxs-lookup"><span data-stu-id="a51b5-859">If the thread is already suspended, this method has no effect.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="a51b5-860">N’utilisez pas le <xref:System.Threading.Thread.Suspend%2A> et <xref:System.Threading.Thread.Resume%2A> méthodes pour synchroniser les activités de threads.</span><span class="sxs-lookup"><span data-stu-id="a51b5-860">Do not use the <xref:System.Threading.Thread.Suspend%2A> and <xref:System.Threading.Thread.Resume%2A> methods to synchronize the activities of threads.</span></span> <span data-ttu-id="a51b5-861">Vous ne disposez d’aucun moyen de savoir quel code un thread s’exécute lorsque vous l’interrompez.</span><span class="sxs-lookup"><span data-stu-id="a51b5-861">You have no way of knowing what code a thread is executing when you suspend it.</span></span> <span data-ttu-id="a51b5-862">Si vous suspendez un thread pendant qu’il détient des verrous pendant une évaluation des autorisations de sécurité, d’autres threads le <xref:System.AppDomain> risque d’être bloqué.</span><span class="sxs-lookup"><span data-stu-id="a51b5-862">If you suspend a thread while it holds locks during a security permission evaluation, other threads in the <xref:System.AppDomain> might be blocked.</span></span> <span data-ttu-id="a51b5-863">Si vous suspendez un thread pendant son exécution un constructeur de classe, d’autres threads le <xref:System.AppDomain> qui tente d’utiliser cette classe sera bloqué.</span><span class="sxs-lookup"><span data-stu-id="a51b5-863">If you suspend a thread while it is executing a class constructor, other threads in the <xref:System.AppDomain> that attempt to use that class are blocked.</span></span> <span data-ttu-id="a51b5-864">Blocages peuvent se produire très facilement.</span><span class="sxs-lookup"><span data-stu-id="a51b5-864">Deadlocks can occur very easily.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="a51b5-865">.NET Core uniquement : ce membre n’est pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-865">.NET Core only: This member is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="a51b5-866">Le thread n’a pas été démarré ou est inactif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-866">The thread has not been started or is dead.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="a51b5-867">L'appelant n'a pas de <see cref="T:System.Security.Permissions.SecurityPermission" /> appropriée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-867">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="a51b5-868">pour les opérations avancées sur les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-868">for advanced operations on threads.</span>
          </span>
          <span data-ttu-id="a51b5-869">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-869">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span>
          </span>
        </permission>
        <related type="Article" href="~/docs/standard/threading/pausing-and-resuming-threads.md">
          <span data-ttu-id="a51b5-870">Suspension et interruption de threads</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-870">Pausing and interrupting threads</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/managed-thread-states.md">
          <span data-ttu-id="a51b5-871">États des threads managés</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-871">Managed Thread States</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Thread.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _Thread.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_Thread::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="a51b5-872">Réservé à un usage ultérieur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-872">Reserved for future use.</span>
          </span>
          <span data-ttu-id="a51b5-873">Doit être IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-873">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="a51b5-874">Tableau passé des noms à mapper.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-874">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="a51b5-875">Compte des noms à mapper.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-875">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="a51b5-876">Contexte des paramètres régionaux dans lequel interpréter les noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-876">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="a51b5-877">Tableau alloué par l'appelant et recevant les ID qui correspondent aux noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-877">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-878">Mappe un jeu de noms avec un jeu correspondant d'identificateurs de dispatch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-878">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-879">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="a51b5-879">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="a51b5-880">Pour plus d’informations sur `IDispatch::GetIDsOfNames`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="a51b5-880">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="a51b5-881">L’accès à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM n’est pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-881">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Thread.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _Thread.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_Thread::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="a51b5-882">Informations de type à retourner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-882">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="a51b5-883">Identificateur des paramètres régionaux pour les informations de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-883">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="a51b5-884">Reçoit un pointeur vers l'objet d'informations de type demandé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-884">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-885">Récupère les informations de type pour un objet, qui peuvent être utilisées ensuite pour obtenir les informations de type d'une interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-885">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-886">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="a51b5-886">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="a51b5-887">Pour plus d’informations sur `IDispatch::GetTypeInfo`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="a51b5-887">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="a51b5-888">L’accès à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM n’est pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-888">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Thread.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _Thread.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_Thread::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="a51b5-889">Pointe vers un emplacement qui reçoit le nombre d'interfaces d'informations de type fourni par l'objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-889">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-890">Récupère le nombre d'interfaces d'informations de type fourni par un objet (0 ou 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-890">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-891">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="a51b5-891">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="a51b5-892">Pour plus d’informations sur `IDispatch::GetTypeInfoCount`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="a51b5-892">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="a51b5-893">L’accès à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM n’est pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-893">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.Invoke">
      <MemberSignature Language="C#" Value="void _Thread.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _Thread.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_Thread::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="a51b5-894">Identifie le membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-894">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="a51b5-895">Réservé à un usage ultérieur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-895">Reserved for future use.</span>
          </span>
          <span data-ttu-id="a51b5-896">Doit être IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-896">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="a51b5-897">Contexte des paramètres régionaux dans lequel interpréter les arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-897">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="a51b5-898">Indicateurs décrivant le contexte de l'appel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-898">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="a51b5-899">Pointeur vers une structure qui contient un tableau d’arguments, un tableau d’arguments DISPID pour les arguments nommés et le nombre d’éléments de chaque tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-899">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="a51b5-900">Pointeur vers l'emplacement où le résultat doit être stocké.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-900">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="a51b5-901">Pointeur vers une structure qui contient les informations sur les exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-901">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="a51b5-902">Index du premier argument comportant une erreur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-902">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-903">Fournit l'accès aux propriétés et aux méthodes exposées par un objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-903">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-904">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="a51b5-904">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="a51b5-905">Pour plus d’informations sur `IDispatch::Invoke`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="a51b5-905">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="a51b5-906">L’accès à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM n’est pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-906">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ThreadState">
      <MemberSignature Language="C#" Value="public System.Threading.ThreadState ThreadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.ThreadState ThreadState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ThreadState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ThreadState As ThreadState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ThreadState ThreadState { System::Threading::ThreadState get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreadState : System.Threading.ThreadState" Usage="System.Threading.Thread.ThreadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-907">Obtient une valeur contenant les états du thread actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-907">Gets a value containing the states of the current thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a51b5-908">Une des valeurs <see cref="T:System.Threading.ThreadState" /> indiquant l'état du thread actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-908">One of the <see cref="T:System.Threading.ThreadState" /> values indicating the state of the current thread.</span>
          </span>
          <span data-ttu-id="a51b5-909">La valeur initiale est <see langword="Unstarted" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-909">The initial value is <see langword="Unstarted" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-910">Le <xref:System.Threading.Thread.ThreadState%2A> propriété fournit des informations plus spécifiques que le <xref:System.Threading.Thread.IsAlive%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="a51b5-910">The <xref:System.Threading.Thread.ThreadState%2A> property provides more specific information than the <xref:System.Threading.Thread.IsAlive%2A> property.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a51b5-911">État du thread n’est utile dans les scénarios de débogage.</span><span class="sxs-lookup"><span data-stu-id="a51b5-911">Thread state is only of interest in debugging scenarios.</span></span> <span data-ttu-id="a51b5-912">Votre code ne doit jamais utiliser l’état des threads pour synchroniser les activités des threads.</span><span class="sxs-lookup"><span data-stu-id="a51b5-912">Your code should never use thread state to synchronize the activities of threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-913">L’exemple de code suivant illustre l’accès à la `ThreadState` d’un thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-913">The following code example demonstrates accessing the `ThreadState` of a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ThreadState#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.threading.thread.threadstate/cpp/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ThreadState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.threadstate/cs/source.cs#1)]
 [!code-vb[System.Threading.Thread.ThreadState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.threadstate/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/managed-thread-states.md">
          <span data-ttu-id="a51b5-914">États des threads managés</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-914">Managed Thread States</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TrySetApartmentState">
      <MemberSignature Language="C#" Value="public bool TrySetApartmentState (System.Threading.ApartmentState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySetApartmentState(valuetype System.Threading.ApartmentState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySetApartmentState (state As ApartmentState) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySetApartmentState(System::Threading::ApartmentState state);" />
      <MemberSignature Language="F#" Value="member this.TrySetApartmentState : System.Threading.ApartmentState -&gt; bool" Usage="thread.TrySetApartmentState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Threading.ApartmentState" />
      </Parameters>
      <Docs>
        <param name="state">
          <span data-ttu-id="a51b5-915">Nouvel état de cloisonnement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-915">The new apartment state.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-916">Définit l'état de cloisonnement d'un thread avant qu'il ne soit démarré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-916">Sets the apartment state of a thread before it is started.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-917">
            <see langword="true" /> si l'état de cloisonnement est défini ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-917">
              <see langword="true" /> if the apartment state is set; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-918">Nouveaux threads sont initialisés en tant que <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> si leur état de cloisonnement n’a pas été défini avant leur démarrage.</span><span class="sxs-lookup"><span data-stu-id="a51b5-918">New threads are initialized as <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> if their apartment state has not been set before they are started.</span></span> <span data-ttu-id="a51b5-919">État de cloisonnement doit être définie avant le démarrage d’un thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-919">Apartment state must be set before a thread is started.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-920">Le thread principal de l’application est initialisé à <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> par défaut.</span><span class="sxs-lookup"><span data-stu-id="a51b5-920">The main application thread is initialized to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> by default.</span></span> <span data-ttu-id="a51b5-921">La seule façon de définir l’état de cloisonnement du thread principal de l’application à <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> consiste à appliquer le <xref:System.STAThreadAttribute> d’attribut à la méthode de point d’entrée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-921">The only way to set the apartment state of the main application thread to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> is to apply the <xref:System.STAThreadAttribute> attribute to the entry point method.</span></span>  
  
 <span data-ttu-id="a51b5-922">Le <xref:System.Threading.Thread.TrySetApartmentState%2A> (méthode), avec la <xref:System.Threading.Thread.GetApartmentState%2A> (méthode) et le <xref:System.Threading.Thread.SetApartmentState%2A> (méthode), remplace le <xref:System.Threading.Thread.ApartmentState%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="a51b5-922">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method, along with the <xref:System.Threading.Thread.GetApartmentState%2A> method and the <xref:System.Threading.Thread.SetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a51b5-923">L’exemple de code suivant montre le <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, et <xref:System.Threading.Thread.TrySetApartmentState%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="a51b5-923">The following code example demonstrates the <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, and <xref:System.Threading.Thread.TrySetApartmentState%2A> methods.</span></span> <span data-ttu-id="a51b5-924">L’exemple de code crée un thread.</span><span class="sxs-lookup"><span data-stu-id="a51b5-924">The code example creates a thread.</span></span> <span data-ttu-id="a51b5-925">Avant que le thread est démarré, <xref:System.Threading.Thread.GetApartmentState%2A> affiche initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> état et <xref:System.Threading.Thread.SetApartmentState%2A> modifie l’état à <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-925">Before the thread is started, <xref:System.Threading.Thread.GetApartmentState%2A> displays the initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> state and <xref:System.Threading.Thread.SetApartmentState%2A> changes the state to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a51b5-926">Le <xref:System.Threading.Thread.TrySetApartmentState%2A> méthode renvoie alors `false` lorsque vous tentez de modifier l’état à <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> , car l’état de cloisonnement est déjà défini.</span><span class="sxs-lookup"><span data-stu-id="a51b5-926">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> because the apartment state is already set.</span></span> <span data-ttu-id="a51b5-927">Si la même opération avait été tentée avec <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> aurait été levée.</span><span class="sxs-lookup"><span data-stu-id="a51b5-927">If the same operation had been attempted with <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> would have been thrown.</span></span>  
  
 <span data-ttu-id="a51b5-928">Une fois que le thread est démarré, le <xref:System.Threading.Thread.TrySetApartmentState%2A> méthode est utilisée à nouveau.</span><span class="sxs-lookup"><span data-stu-id="a51b5-928">After the thread is started, the <xref:System.Threading.Thread.TrySetApartmentState%2A> method is used again.</span></span> <span data-ttu-id="a51b5-929">Cette fois, elle lève <xref:System.Threading.ThreadStateException> , car le thread a déjà été démarré.</span><span class="sxs-lookup"><span data-stu-id="a51b5-929">This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.</span></span>  
  
 [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cpp/source.cpp#1)]
 [!code-csharp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cs/source.cs#1)]
 [!code-vb[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a51b5-930">
            <paramref name="state" /> n'est pas un état de cloisonnement valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-930">
              <paramref name="state" /> is not a valid apartment state.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="a51b5-931">Le thread a déjà été démarré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-931">The thread has already been started.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="VolatileRead">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-932">Lit la valeur d'un champ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-932">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="a51b5-933">Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-933">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static byte VolatileRead (ref byte address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 VolatileRead(unsigned int8&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte VolatileRead(System::Byte % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; byte" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-934">Champ à lire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-934">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-935">Lit la valeur d'un champ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-935">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="a51b5-936">Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-936">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-937">Dernière valeur écrite dans le champ par un processeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-937">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-938"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-938"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-939">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-939">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-940">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> Obtient la dernière valeur écrite dans un emplacement de mémoire par n’importe quel processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-940">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="a51b5-941">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-941">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-942">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-942">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-943">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-943">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-944">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-944">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-945">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-945">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-946">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-946">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static double VolatileRead (ref double address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 VolatileRead(float64&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double VolatileRead(double % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; double" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-947">Champ à lire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-947">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-948">Lit la valeur d'un champ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-948">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="a51b5-949">Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-949">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-950">Dernière valeur écrite dans le champ par un processeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-950">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-951"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-951"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-952">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-952">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-953">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> Obtient la dernière valeur écrite dans un emplacement de mémoire par n’importe quel processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-953">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="a51b5-954">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-954">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-955">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-955">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-956">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-956">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-957">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-957">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-958">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-958">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-959">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-959">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static short VolatileRead (ref short address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 VolatileRead(int16&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short VolatileRead(short % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; int16" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-960">Champ à lire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-960">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-961">Lit la valeur d'un champ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-961">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="a51b5-962">Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-962">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-963">Dernière valeur écrite dans le champ par un processeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-963">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-964"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-964"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-965">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-965">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-966">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> Obtient la dernière valeur écrite dans un emplacement de mémoire par n’importe quel processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-966">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="a51b5-967">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-967">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-968">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-968">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-969">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-969">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-970">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-970">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-971">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-971">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-972">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-972">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static int VolatileRead (ref int address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 VolatileRead(int32&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int VolatileRead(int % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; int" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-973">Champ à lire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-973">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-974">Lit la valeur d'un champ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-974">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="a51b5-975">Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-975">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-976">Dernière valeur écrite dans le champ par un processeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-976">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-977"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-977"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-978">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-978">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-979">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> Obtient la dernière valeur écrite dans un emplacement de mémoire par n’importe quel processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-979">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="a51b5-980">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-980">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-981">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-981">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-982">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-982">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-983">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-983">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-984">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-984">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-985">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-985">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static long VolatileRead (ref long address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 VolatileRead(int64&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long VolatileRead(long % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; int64" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-986">Champ à lire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-986">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-987">Lit la valeur d'un champ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-987">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="a51b5-988">Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-988">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-989">Dernière valeur écrite dans le champ par un processeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-989">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-990"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-990"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-991">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-991">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-992">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> Obtient la dernière valeur écrite dans un emplacement de mémoire par n’importe quel processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-992">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="a51b5-993">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-993">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-994">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-994">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-995">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-995">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-996">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-996">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-997">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-997">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-998">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-998">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static IntPtr VolatileRead (ref IntPtr address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int VolatileRead(native int&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr VolatileRead(IntPtr % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; nativeint" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.IntPtr" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-999">Champ à lire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-999">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1000">Lit la valeur d'un champ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1000">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="a51b5-1001">Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1001">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-1002">Dernière valeur écrite dans le champ par un processeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1002">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1003"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1003"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1004">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1004">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1005">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> Obtient la dernière valeur écrite dans un emplacement de mémoire par n’importe quel processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1005">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="a51b5-1006">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1006">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1007">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1007">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1008">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1008">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1009">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1009">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1010">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1010">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1011">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1011">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static object VolatileRead (ref object address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object VolatileRead(object&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ VolatileRead(System::Object ^ % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; obj" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-1012">Champ à lire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1012">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1013">Lit la valeur d'un champ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1013">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="a51b5-1014">Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1014">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-1015">Dernière valeur écrite dans le champ par un processeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1015">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1016"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1016"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1017">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1017">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1018">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> Obtient la dernière valeur écrite dans un emplacement de mémoire par n’importe quel processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1018">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="a51b5-1019">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1019">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1020">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1020">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1021">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1021">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1022">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1022">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1023">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1023">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1024">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1024">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static sbyte VolatileRead (ref sbyte address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 VolatileRead(int8&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.SByte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte VolatileRead(System::SByte % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; sbyte" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.SByte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-1025">Champ à lire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1025">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1026">Lit la valeur d'un champ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1026">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="a51b5-1027">Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1027">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-1028">Dernière valeur écrite dans le champ par un processeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1028">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1029"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1029"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1030">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1030">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1031">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> Obtient la dernière valeur écrite dans un emplacement de mémoire par n’importe quel processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1031">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="a51b5-1032">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1032">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1033">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1033">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1034">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1034">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1035">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1035">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1036">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1036">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1037">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1037">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static float VolatileRead (ref float address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 VolatileRead(float32&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float VolatileRead(float % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; single" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-1038">Champ à lire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1038">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1039">Lit la valeur d'un champ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1039">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="a51b5-1040">Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1040">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-1041">Dernière valeur écrite dans le champ par un processeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1041">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1042"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1042"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1043">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1043">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1044">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> Obtient la dernière valeur écrite dans un emplacement de mémoire par n’importe quel processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1044">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="a51b5-1045">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1045">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1046">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1046">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1047">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1047">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1048">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1048">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1049">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1049">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1050">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1050">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static ushort VolatileRead (ref ushort address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 VolatileRead(unsigned int16&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UInt16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 VolatileRead(System::UInt16 % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; uint16" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-1051">Champ à lire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1051">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1052">Lit la valeur d'un champ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1052">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="a51b5-1053">Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1053">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-1054">Dernière valeur écrite dans le champ par un processeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1054">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1055"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1055"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1056">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1056">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1057">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> Obtient la dernière valeur écrite dans un emplacement de mémoire par n’importe quel processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1057">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="a51b5-1058">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1058">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1059">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1059">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1060">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1060">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1061">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1061">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1062">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1062">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1063">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1063">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static uint VolatileRead (ref uint address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 VolatileRead(unsigned int32&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 VolatileRead(System::UInt32 % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; uint32" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-1064">Champ à lire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1064">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1065">Lit la valeur d'un champ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1065">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="a51b5-1066">Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1066">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-1067">Dernière valeur écrite dans le champ par un processeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1067">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1068"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1068"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1069">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1069">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1070">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> Obtient la dernière valeur écrite dans un emplacement de mémoire par n’importe quel processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1070">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="a51b5-1071">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1071">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1072">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1072">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1073">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1073">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1074">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1074">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1075">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1075">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1076">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1076">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static ulong VolatileRead (ref ulong address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 VolatileRead(unsigned int64&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 VolatileRead(System::UInt64 % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; uint64" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-1077">Champ à lire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1077">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1078">Lit la valeur d'un champ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1078">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="a51b5-1079">Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1079">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-1080">Dernière valeur écrite dans le champ par un processeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1080">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1081"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1081"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1082">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1082">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1083">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> Obtient la dernière valeur écrite dans un emplacement de mémoire par n’importe quel processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1083">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="a51b5-1084">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1084">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1085">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1085">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1086">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1086">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1087">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1087">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1088">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1088">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1089">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1089">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static UIntPtr VolatileRead (ref UIntPtr address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native unsigned int VolatileRead(native unsigned int&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As UIntPtr) As UIntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static UIntPtr VolatileRead(UIntPtr % address);" />
      <MemberSignature Language="F#" Value="static member VolatileRead :  -&gt; unativeint" Usage="System.Threading.Thread.VolatileRead address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UIntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UIntPtr" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-1090">Champ à lire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1090">The field to be read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1091">Lit la valeur d'un champ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1091">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="a51b5-1092">Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1092">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-1093">Dernière valeur écrite dans le champ par un processeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1093">The latest value written to the field by any processor.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1094"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1094"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1095">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1095">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1096">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> Obtient la dernière valeur écrite dans un emplacement de mémoire par n’importe quel processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1096">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="a51b5-1097">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1097">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1098">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1098">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1099">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1099">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1100">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1100">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1101">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1101">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1102">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1102">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="VolatileWrite">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-1103">Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1103">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref byte address, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int8&amp; address, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Byte, value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::Byte % address, System::Byte value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * byte -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Byte" RefType="ref" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-1104">Champ dans lequel la valeur doit être écrite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1104">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a51b5-1105">Valeur à écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1105">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1106">Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1106">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1107"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1107"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1108">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1108">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1109">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileWrite%2A> garantit qu’une valeur écrite dans un emplacement de mémoire est immédiatement visible pour tous les processeurs.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1109">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="a51b5-1110">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1110">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1111">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1111">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1112">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1112">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1113">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1113">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1114">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1114">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1115">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1115">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref double address, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(float64&amp; address, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Double, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(double % address, double value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * double -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Double" RefType="ref" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-1116">Champ dans lequel la valeur doit être écrite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1116">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a51b5-1117">Valeur à écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1117">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1118">Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1118">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1119"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1119"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1120">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1120">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1121">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileWrite%2A> garantit qu’une valeur écrite dans un emplacement de mémoire est immédiatement visible pour tous les processeurs.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1121">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="a51b5-1122">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1122">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1123">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1123">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1124">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1124">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1125">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1125">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1126">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1126">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1127">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1127">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref short address, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int16&amp; address, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Short, value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(short % address, short value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * int16 -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int16" RefType="ref" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-1128">Champ dans lequel la valeur doit être écrite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1128">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a51b5-1129">Valeur à écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1129">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1130">Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1130">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1131"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1131"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1132">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1132">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1133">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileWrite%2A> garantit qu’une valeur écrite dans un emplacement de mémoire est immédiatement visible pour tous les processeurs.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1133">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="a51b5-1134">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1134">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1135">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1135">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1136">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1136">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1137">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1137">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1138">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1138">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1139">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1139">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref int address, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int32&amp; address, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Integer, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(int % address, int value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * int -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int32" RefType="ref" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-1140">Champ dans lequel la valeur doit être écrite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1140">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a51b5-1141">Valeur à écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1141">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1142">Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1142">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1143"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1143"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1144">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1144">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1145">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileWrite%2A> garantit qu’une valeur écrite dans un emplacement de mémoire est immédiatement visible pour tous les processeurs.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1145">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="a51b5-1146">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1146">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1147">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1147">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1148">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1148">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1149">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1149">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1150">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1150">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1151">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1151">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref long address, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int64&amp; address, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Long, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(long % address, long value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * int64 -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int64" RefType="ref" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-1152">Champ dans lequel la valeur doit être écrite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1152">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a51b5-1153">Valeur à écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1153">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1154">Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1154">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1155"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1155"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1156">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1156">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1157">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileWrite%2A> garantit qu’une valeur écrite dans un emplacement de mémoire est immédiatement visible pour tous les processeurs.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1157">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="a51b5-1158">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1158">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1159">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1159">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1160">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1160">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1161">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1161">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1162">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1162">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1163">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1163">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref IntPtr address, IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(native int&amp; address, native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As IntPtr, value As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(IntPtr % address, IntPtr value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * nativeint -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.IntPtr" RefType="ref" />
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-1164">Champ dans lequel la valeur doit être écrite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1164">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a51b5-1165">Valeur à écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1165">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1166">Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1166">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1167"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1167"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1168">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1168">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1169">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileWrite%2A> garantit qu’une valeur écrite dans un emplacement de mémoire est immédiatement visible pour tous les processeurs.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1169">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="a51b5-1170">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1170">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1171">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1171">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1172">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1172">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1173">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1173">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1174">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1174">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1175">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1175">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref object address, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(object&amp; address, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::Object ^ % address, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * obj -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Object" RefType="ref" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-1176">Champ dans lequel la valeur doit être écrite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1176">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a51b5-1177">Valeur à écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1177">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1178">Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1178">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1179"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1179"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1180">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1180">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1181">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileWrite%2A> garantit qu’une valeur écrite dans un emplacement de mémoire est immédiatement visible pour tous les processeurs.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1181">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="a51b5-1182">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1182">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1183">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1183">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1184">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1184">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1185">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1185">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1186">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1186">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1187">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1187">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref sbyte address, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int8&amp; address, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As SByte, value As SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::SByte % address, System::SByte value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * sbyte -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.SByte" RefType="ref" />
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-1188">Champ dans lequel la valeur doit être écrite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1188">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a51b5-1189">Valeur à écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1189">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1190">Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1190">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1191"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1191"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1192">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1192">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1193">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileWrite%2A> garantit qu’une valeur écrite dans un emplacement de mémoire est immédiatement visible pour tous les processeurs.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1193">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="a51b5-1194">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1194">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1195">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1195">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1196">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1196">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1197">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1197">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1198">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1198">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1199">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1199">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref float address, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(float32&amp; address, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Single, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(float % address, float value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * single -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Single" RefType="ref" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-1200">Champ dans lequel la valeur doit être écrite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1200">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a51b5-1201">Valeur à écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1201">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1202">Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1202">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1203"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1203"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1204">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1204">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1205">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileWrite%2A> garantit qu’une valeur écrite dans un emplacement de mémoire est immédiatement visible pour tous les processeurs.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1205">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="a51b5-1206">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1206">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1207">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1207">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1208">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1208">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1209">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1209">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1210">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1210">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1211">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1211">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref ushort address, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int16&amp; address, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As UShort, value As UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::UInt16 % address, System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * uint16 -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt16" RefType="ref" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-1212">Champ dans lequel la valeur doit être écrite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1212">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a51b5-1213">Valeur à écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1213">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1214">Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1214">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1215"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1215"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1216">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1216">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1217">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileWrite%2A> garantit qu’une valeur écrite dans un emplacement de mémoire est immédiatement visible pour tous les processeurs.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1217">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="a51b5-1218">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1218">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1219">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1219">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1220">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1220">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1221">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1221">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1222">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1222">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1223">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1223">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref uint address, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int32&amp; address, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As UInteger, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::UInt32 % address, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * uint32 -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt32" RefType="ref" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-1224">Champ dans lequel la valeur doit être écrite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1224">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a51b5-1225">Valeur à écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1225">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1226">Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1226">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1227"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1227"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1228">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1228">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1229">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileWrite%2A> garantit qu’une valeur écrite dans un emplacement de mémoire est immédiatement visible pour tous les processeurs.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1229">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="a51b5-1230">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1230">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1231">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1231">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1232">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1232">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1233">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1233">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1234">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1234">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1235">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1235">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref ulong address, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int64&amp; address, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As ULong, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::UInt64 % address, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * uint64 -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt64" RefType="ref" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-1236">Champ dans lequel la valeur doit être écrite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1236">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a51b5-1237">Valeur à écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1237">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1238">Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1238">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1239"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1239"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1240">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1240">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1241">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileWrite%2A> garantit qu’une valeur écrite dans un emplacement de mémoire est immédiatement visible pour tous les processeurs.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1241">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="a51b5-1242">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1242">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1243">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1243">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1244">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1244">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1245">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1245">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1246">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1246">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1247">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1247">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref UIntPtr address, UIntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(native unsigned int&amp; address, native unsigned int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As UIntPtr, value As UIntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(UIntPtr % address, UIntPtr value);" />
      <MemberSignature Language="F#" Value="static member VolatileWrite :  * unativeint -&gt; unit" Usage="System.Threading.Thread.VolatileWrite (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UIntPtr" RefType="ref" />
        <Parameter Name="value" Type="System.UIntPtr" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="a51b5-1248">Champ dans lequel la valeur doit être écrite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1248">The field to which the value is to be written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a51b5-1249">Valeur à écrire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1249">The value to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a51b5-1250">Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1250">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1251"><xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> sont les cas spéciaux de la synchronisation.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1251"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="a51b5-1252">Dans des circonstances normales, le C# `lock` instruction, Visual Basic `SyncLock` instruction et le <xref:System.Threading.Monitor> classe offrent des alternatives plus facilités.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1252">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="a51b5-1253">Sur un système multiprocesseur, <xref:System.Threading.Thread.VolatileWrite%2A> garantit qu’une valeur écrite dans un emplacement de mémoire est immédiatement visible pour tous les processeurs.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1253">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="a51b5-1254">Vous devrez peut-être vider les caches de processeur.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1254">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="a51b5-1255">Même sur un système monoprocesseur, <xref:System.Threading.Thread.VolatileRead%2A> et <xref:System.Threading.Thread.VolatileWrite%2A> assurent qu’une valeur lire ou écrite dans la mémoire et non mis en cache (par exemple, dans un Registre de processeur).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1255">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="a51b5-1256">Par conséquent, vous pouvez les utiliser pour synchroniser l’accès à un champ pouvant être mis à jour par un autre thread, ou par le matériel.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1256">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="a51b5-1257">Appel de cette méthode affecte uniquement un accès à la mémoire unique.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1257">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="a51b5-1258">Pour fournir une synchronisation efficace pour un champ, tous les accès au champ doivent utiliser <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1258">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51b5-1259">En c#, à l’aide de la `volatile` modificateur sur un champ garantit que tous les accès à ce champ utilisent <xref:System.Threading.Thread.VolatileRead%2A> ou <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1259">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static bool Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; bool" Usage="System.Threading.Thread.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a51b5-1260">Oblige le thread appelant à céder l'exécution à un autre thread prêt à s'exécuter sur le processeur actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1260">Causes the calling thread to yield execution to another thread that is ready to run on the current processor.</span>
          </span>
          <span data-ttu-id="a51b5-1261">Le système d'exploitation sélectionne le thread auquel l'exécution doit être cédée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1261">The operating system selects the thread to yield to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a51b5-1262">
            <see langword="true" /> si le système d'exploitation a basculé l'exécution vers un autre thread ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a51b5-1262">
              <see langword="true" /> if the operating system switched execution to another thread; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51b5-1263">Si cette méthode réussit, le reste de la tranche de temps actuelle du thread est obtenue.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1263">If this method succeeds, the rest of the thread's current time slice is yielded.</span></span> <span data-ttu-id="a51b5-1264">Le système d’exploitation planifie le thread appelant pour une autre tranche de temps, en fonction de sa priorité et l’état des autres threads qui sont disponibles pour l’exécuter.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1264">The operating system schedules the calling thread for another time slice, according to its priority and the status of other threads that are available to run.</span></span>  
  
 <span data-ttu-id="a51b5-1265">Génération de résultats est limitée au processeur qui exécute le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1265">Yielding is limited to the processor that is executing the calling thread.</span></span> <span data-ttu-id="a51b5-1266">Le système d’exploitation ne bascule pas de l’exécution vers un autre processeur, même si ce processeur est inactif ou exécute un thread de priorité inférieure.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1266">The operating system will not switch execution to another processor, even if that processor is idle or is running a thread of lower priority.</span></span> <span data-ttu-id="a51b5-1267">Si aucun autre thread qui sont prêts à exécuter sur le processeur actuel, le système d’exploitation ne suspend pas l’exécution, et cette méthode retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1267">If there are no other threads that are ready to execute on the current processor, the operating system does not yield execution, and this method returns `false`.</span></span>  
  
 <span data-ttu-id="a51b5-1268">Cette méthode est équivalente à l’aide de la plateforme de l’appel pour appeler Win32 natif `SwitchToThread` (fonction).</span><span class="sxs-lookup"><span data-stu-id="a51b5-1268">This method is equivalent to using platform invoke to call the native Win32 `SwitchToThread` function.</span></span> <span data-ttu-id="a51b5-1269">Vous devez appeler la <xref:System.Threading.Thread.Yield%2A> appeler de méthode au lieu d’utiliser la plateforme, car tout comportement de thread personnalisé l’hôte a demandé de contournements non managé.</span><span class="sxs-lookup"><span data-stu-id="a51b5-1269">You should call the <xref:System.Threading.Thread.Yield%2A> method instead of using platform invoke, because platform invoke bypasses any custom threading behavior the host has requested.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>