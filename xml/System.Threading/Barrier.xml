<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Barrier.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac548531a8658006e7834fae9bbf6c23d5474a09270.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">48531a8658006e7834fae9bbf6c23d5474a09270</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Barrier">
          <source>Enables multiple tasks to cooperatively work on an algorithm in parallel through multiple phases.</source>
          <target state="translated">Permet à plusieurs tâches de coopérer en parallèle sur un algorithme via plusieurs phases.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Barrier">
          <source>A group of tasks cooperate by moving through a series of phases, where each in the group signals it has arrived at the <ph id="ph1">&lt;xref:System.Threading.Barrier&gt;</ph> in a given phase and implicitly waits for all others to arrive.</source>
          <target state="translated">Un groupe de tâches de coopérer en passant par une série de phases, où chaque membre du groupe signale qu’il a atteint le <ph id="ph1">&lt;xref:System.Threading.Barrier&gt;</ph> d’une phase donnée et implicitement attend l’arrivée des autres membres.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Barrier">
          <source>The same <ph id="ph1">&lt;xref:System.Threading.Barrier&gt;</ph> can be used for multiple phases.</source>
          <target state="translated">Le même <ph id="ph1">&lt;xref:System.Threading.Barrier&gt;</ph> peut être utilisé pour plusieurs phases.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Barrier">
          <source>The following example shows how to use a barrier:</source>
          <target state="translated">L’exemple suivant montre comment utiliser un cloisonnement :</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Barrier">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads, with the exception of Dispose, which must only be used when all other operations on the <ph id="ph2">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> have completed.</source>
          <target state="translated">Tous les membres publics et protégés de <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> sont thread-safe et peuvent être utilisés simultanément par plusieurs threads, à l’exception de Dispose, qui doit être uniquement utilisé lorsque toutes les autres opérations sur le <ph id="ph2">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> s’est terminé.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.Threading.Barrier">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.#ctor(System.Int32)">
          <source>The number of participating threads.</source>
          <target state="translated">Nombre de threads participants.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="participantCount" /&gt;</ph> is less than 0 or greater than 32,767.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="participantCount" /&gt;</ph> est inférieur à 0 ou supérieur à 32 767.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
          <source>The number of participating threads.</source>
          <target state="translated">Nombre de threads participants.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Action`1" /&gt;</ph> to be executed after each phase.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Action`1" /&gt;</ph> à exécuter après chaque phase.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
          <source>null (Nothing in Visual Basic) may be passed to indicate no action is taken.</source>
          <target state="translated">La valeur Null (Nothing en Visual Basic) peut être passée pour indiquer qu'aucune action n'est exécutée.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
          <source>The <ph id="ph1">`postPhaseAction`</ph> delegate will be executed after all participants have arrived at the barrier in one phase.</source>
          <target state="translated">Le <ph id="ph1">`postPhaseAction`</ph> délégué sera exécuté une fois que tous les participants arrivés à la barrière d’une phase.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
          <source>The participants will not be released to the next phase until the postPhaseAction delegate has completed execution.</source>
          <target state="translated">Les participants à la phase suivante jusqu'à ce que le délégué de postPhaseAction a terminé son exécution ne seront pas libérées.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
          <source><ph id="ph1">&lt;paramref name="participantCount" /&gt;</ph> is less than 0 or greater than 32,767.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="participantCount" /&gt;</ph> est inférieur à 0 ou supérieur à 32 767.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipant">
          <source>Notifies the <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> that there will be an additional participant.</source>
          <target state="translated">Signale à <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> qu'il y aura un participant supplémentaire.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipant">
          <source>The phase number of the barrier in which the new participants will first participate.</source>
          <target state="translated">Numéro de la phase du cloisonnement à laquelle les nouveaux participants participeront en premier.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.AddParticipant">
          <source>If the barrier is currently executing a post phase action, this call is blocked until the post phase action completes and the barrier has moved on to the next phase.</source>
          <target state="translated">Si le cloisonnement exécute actuellement une action de post-phase, cet appel est bloqué jusqu'à ce que l’action de post-phase se termine et le cloisonnement est passée à la phase suivante.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipant">
          <source>The current instance has already been disposed.</source>
          <target state="translated">L’instance actuelle a déjà été supprimée.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipant">
          <source>Adding a participant would cause the barrier's participant count to exceed 32,767.</source>
          <target state="translated">L'ajout d'un participant provoquerait l'augmentation du nombre de participants du cloisonnement au-delà de 32 767.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipant">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipant">
          <source>The method was invoked from within a post-phase action.</source>
          <target state="translated">La méthode a été appelée à partir d'une action post-phase.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipants(System.Int32)">
          <source>The number of additional participants to add to the barrier.</source>
          <target state="translated">Nombre de participants supplémentaires à ajouter au cloisonnement.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipants(System.Int32)">
          <source>Notifies the <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> that there will be additional participants.</source>
          <target state="translated">Signale à <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> qu'il y aura des participants supplémentaires.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipants(System.Int32)">
          <source>The phase number of the barrier in which the new participants will first participate.</source>
          <target state="translated">Numéro de la phase du cloisonnement à laquelle les nouveaux participants participeront en premier.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.AddParticipants(System.Int32)">
          <source>If the barrier is currently executing a post phase action, this call is blocked until the post phase action completes and the barrier has moved on to the next phase.</source>
          <target state="translated">Si le cloisonnement exécute actuellement une action de post-phase, cet appel est bloqué jusqu'à ce que l’action de post-phase se termine et le cloisonnement est passée à la phase suivante.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipants(System.Int32)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">L’instance actuelle a déjà été supprimée.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipants(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="participantCount" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="participantCount" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipants(System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipants(System.Int32)">
          <source>Adding <ph id="ph1">&lt;paramref name="participantCount" /&gt;</ph> participants would cause the barrier's participant count to exceed 32,767.</source>
          <target state="translated">L'ajout de participants (<ph id="ph1">&lt;paramref name="participantCount" /&gt;</ph>) provoquerait l'augmentation du nombre de participants du cloisonnement au-delà de 32 767.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.AddParticipants(System.Int32)">
          <source>The method was invoked from within a post-phase action.</source>
          <target state="translated">La méthode a été appelée à partir d'une action post-phase.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Threading.Barrier.CurrentPhaseNumber">
          <source>Gets the number of the barrier's current phase.</source>
          <target state="translated">Obtient le numéro de la phase actuelle du cloisonnement.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Barrier.CurrentPhaseNumber">
          <source>Returns the number of the barrier's current phase.</source>
          <target state="translated">Retourne le numéro de la phase actuelle du cloisonnement.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="T:System.Threading.Barrier">
          <source>Releases resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> class.</source>
          <target state="translated">Libère les ressources utilisées par l'instance actuelle de la classe <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> class.</source>
          <target state="translated">Libère toutes les ressources utilisées par l'instance actuelle de la classe <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.Barrier&gt;</ph>.</source>
          <target state="translated">Appelez la méthode <ph id="ph1">`Dispose`</ph> une fois que vous avez terminé d'utiliser <ph id="ph2">&lt;xref:System.Threading.Barrier&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.Barrier&gt;</ph> in an unusable state.</source>
          <target state="translated">La méthode <ph id="ph1">`Dispose`</ph> rend le <ph id="ph2">&lt;xref:System.Threading.Barrier&gt;</ph> inutilisable.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.Barrier&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.Barrier&gt;</ph> was occupying.</source>
          <target state="translated">Après avoir appelé <ph id="ph1">`Dispose`</ph>, vous devez libérer toutes les références à la <ph id="ph2">&lt;xref:System.Threading.Barrier&gt;</ph> pour que le garbage collector puisse récupérer la mémoire qui le <ph id="ph3">&lt;xref:System.Threading.Barrier&gt;</ph> occupée.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>de nettoyage des ressources non managées<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> et <bpt id="p2">[</bpt>implémentant une méthode de suppression<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.Barrier&gt;</ph>.</source>
          <target state="translated">Appelez toujours <ph id="ph1">`Dispose`</ph> avant de libérer votre dernière référence à <ph id="ph2">&lt;xref:System.Threading.Barrier&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.Barrier&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">Sinon, les ressources utilisées ne seront pas libérées tant que le garbage collector n'aura pas appelé la méthode <ph id="ph1">&lt;xref:System.Threading.Barrier&gt;</ph> de l'objet <ph id="ph2">`Finalize`</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.Dispose">
          <source>The method was invoked from within a post-phase action.</source>
          <target state="translated">La méthode a été appelée à partir d'une action post-phase.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.Dispose(System.Boolean)">
          <source>true to release both managed and unmanaged resources; false to release only unmanaged resources.</source>
          <target state="translated">true pour libérer les ressources managées et non managées ; false pour libérer uniquement les ressources non managées.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph>, and optionally releases the managed resources.</source>
          <target state="translated">Libère les ressources non managées utilisées par le <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph>, et libère éventuellement les ressources managées.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.Dispose(System.Boolean)">
          <source>Unlike most of the members of <ph id="ph1">&lt;xref:System.Threading.Barrier&gt;</ph>, Dispose is not thread-safe and may not be used concurrently with other members of this instance.</source>
          <target state="translated">Contrairement à la plupart des membres de <ph id="ph1">&lt;xref:System.Threading.Barrier&gt;</ph>, Dispose n’est pas thread-safe et ne peut pas être utilisé en même temps que les autres membres de cette instance.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.Threading.Barrier.ParticipantCount">
          <source>Gets the total number of participants in the barrier.</source>
          <target state="translated">Obtient le nombre total de participants au cloisonnement.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Barrier.ParticipantCount">
          <source>Returns the total number of participants in the barrier.</source>
          <target state="translated">Retourne le nombre total de participants au cloisonnement.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="P:System.Threading.Barrier.ParticipantsRemaining">
          <source>Gets the number of participants in the barrier that haven’t yet signaled in the current phase.</source>
          <target state="translated">Obtient le nombre de participants au cloisonnement qui n'ont pas encore été signalés dans la phase actuelle.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Barrier.ParticipantsRemaining">
          <source>Returns the number of participants in the barrier that haven’t yet signaled in the current phase.</source>
          <target state="translated">Retourne le nombre de participants au cloisonnement qui n'ont pas encore été signalés dans la phase actuelle.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Barrier.ParticipantsRemaining">
          <source>This could be 0 during a post-phase action delegate execution or if the ParticipantCount is 0.</source>
          <target state="translated">Cela peut être égal à 0 lors d’une exécution de délégué d’action post-phase ou si ParticipantCount est égal à 0.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipant">
          <source>Notifies the <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> that there will be one less participant.</source>
          <target state="translated">Signale à <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> qu'il y aura un participant en moins.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipant">
          <source>The current instance has already been disposed.</source>
          <target state="translated">L’instance actuelle a déjà été supprimée.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipant">
          <source>The barrier already has 0 participants.</source>
          <target state="translated">La barrière a déjà 0 participant.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipant">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipant">
          <source>The method was invoked from within a post-phase action.</source>
          <target state="translated">La méthode a été appelée à partir d'une action post-phase.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
          <source>The number of additional participants to remove from the barrier.</source>
          <target state="translated">Nombre de participants supplémentaires à supprimer du cloisonnement.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
          <source>Notifies the <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> that there will be fewer participants.</source>
          <target state="translated">Signale à <ph id="ph1">&lt;see cref="T:System.Threading.Barrier" /&gt;</ph> qu'il y aura moins de participants.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
          <source>If <ph id="ph1">`participantCount`</ph> participants are already waiting on the barrier, this removal fulfills the barrier, the post phase action is executed and all of the participants are woken as if this participant being removed had successfully reached the barrier.</source>
          <target state="translated">Si <ph id="ph1">`participantCount`</ph> participants sont déjà en attente sur le cloisonnement, cette suppression accomplit le cloisonnement, l’action de post-phase est exécutée et tous les participants sont réveillés car le participant supprimé a atteint le cloisonnement.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">L’instance actuelle a déjà été supprimée.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
          <source>The total participant count is less than the specified <ph id="ph1">&lt;paramref name="participantCount" /&gt;</ph></source>
          <target state="translated">Le nombre total de participants est inférieur au <ph id="ph1">&lt;paramref name="participantCount" /&gt;</ph> spécifié</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
          <source>The barrier already has 0 participants.</source>
          <target state="translated">La barrière a déjà 0 participant.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
          <source>The method was invoked from within a post-phase action.</source>
          <target state="translated">La méthode a été appelée à partir d'une action post-phase.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
          <source>current participant count is less than the specified participantCount</source>
          <target state="translated">le nombre de participant actuel est inférieur au participantCount spécifié</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="T:System.Threading.Barrier">
          <source>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well.</source>
          <target state="translated">Signale qu'un participant a atteint le cloisonnement et qu'il attend que tous les autres participants atteignent également le cloisonnement.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait">
          <source>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well.</source>
          <target state="translated">Signale qu'un participant a atteint le cloisonnement et qu'il attend que tous les autres participants atteignent également le cloisonnement.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait">
          <source>The current instance has already been disposed.</source>
          <target state="translated">L’instance actuelle a déjà été supprimée.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait">
          <source>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</source>
          <target state="translated">La méthode a été appelée à partir d'une action post-phase, le cloisonnement comporte actuellement 0 participants, ou il est signalé par un nombre de threads plus important que celui enregistré en tant que participants.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait">
          <source>If an exception is thrown from the post phase action of a Barrier after all participating threads have called SignalAndWait, the exception will be wrapped in a BarrierPostPhaseException and be thrown on all participating threads.</source>
          <target state="translated">Si une exception est levée par l'action de post-phase d'un cloisonnement après que tous les threads participants aient appelé SignalAndWait, l'exception sera incluse dans un wrapper dans une BarrierPostPhaseException et levée pour tous les threads participants.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) to wait indefinitely.</source>
          <target state="translated">Nombre de millisecondes à attendre, ou <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) pour un délai d'attente infini.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
          <source>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a 32-bit signed integer to measure the timeout.</source>
          <target state="translated">Signale qu'un participant a atteint le cloisonnement et qu'il attend que tous les autres participants atteignent également le cloisonnement, à l'aide d'un entier signé 32 bits pour mesurer le délai d'attente.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
          <source>if all participants reached the barrier within the specified time; otherwise false.</source>
          <target state="translated">si tous les participants ont atteint le cloisonnement dans le délai spécifié ; sinon false.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">L’instance actuelle a déjà été supprimée.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> est un nombre négatif différent de -1, qui représente un délai d’attente infini.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
          <source>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</source>
          <target state="translated">La méthode a été appelée à partir d'une action post-phase, le cloisonnement comporte actuellement 0 participants, ou il est signalé par un nombre de threads plus important que celui enregistré en tant que participants.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
          <source>If an exception is thrown from the post phase action of a Barrier after all participating threads have called SignalAndWait, the exception will be wrapped in a BarrierPostPhaseException and be thrown on all participating threads.</source>
          <target state="translated">Si une exception est levée par l'action de post-phase d'un cloisonnement après que tous les threads participants aient appelé SignalAndWait, l'exception sera incluse dans un wrapper dans une BarrierPostPhaseException et levée pour tous les threads participants.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> à observer.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)">
          <source>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier, while observing a cancellation token.</source>
          <target state="translated">Signale qu'un participant a atteint le cloisonnement et qu'il attend que tous les autres participants atteignent également le cloisonnement, tout en observant un jeton d'annulation.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> has been canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> a été annulé.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">L’instance actuelle a déjà été supprimée.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)">
          <source>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</source>
          <target state="translated">La méthode a été appelée à partir d'une action post-phase, le cloisonnement comporte actuellement 0 participants, ou il est signalé par un nombre de threads plus important que celui enregistré en tant que participants.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> qui représente le nombre de millièmes de secondes à attendre ou <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> qui représente -1 millième de seconde, pour attendre indéfiniment.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
          <source>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> object to measure the time interval.</source>
          <target state="translated">Signale qu'un participant a atteint le cloisonnement et qu'il attend que tous les autres participants atteignent également le cloisonnement, à l'aide d'un objet <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> qui mesure l'intervalle de temps.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
          <source>true if all other participants reached the barrier; otherwise, false.</source>
          <target state="translated">true si tous les autres participants ont atteint le cloisonnement ; sinon, false.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">L’instance actuelle a déjà été supprimée.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out, or it is greater than 32,767.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> est un nombre négatif autre que -1 milliseconde, qui représente un délai d’attente infini, ou sa valeur est supérieure à 32 767.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
          <source>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</source>
          <target state="translated">La méthode a été appelée à partir d'une action post-phase, le cloisonnement comporte actuellement 0 participants, ou il est signalé par un nombre de threads plus important que celui enregistré en tant que participants.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) to wait indefinitely.</source>
          <target state="translated">Nombre de millisecondes à attendre, ou <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) pour un délai d'attente infini.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> à observer.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
          <source>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a 32-bit signed integer to measure the timeout, while observing a cancellation token.</source>
          <target state="translated">Signale qu'un participant a atteint le cloisonnement et qu'il attend que tous les autres participants atteignent également le cloisonnement, à l'aide d'un entier signé 32 bits pour mesurer le délai d'attente, tout en observant un jeton d'annulation.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
          <source>if all participants reached the barrier within the specified time; otherwise false</source>
          <target state="translated">si tous les participants ont atteint le cloisonnement dans le délai spécifié ; sinon false.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
          <source>If the <ph id="ph1">`cancellationToken`</ph> was canceled before the signal took effect, then an <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> is thrown and the <ph id="ph3">&lt;xref:System.Threading.Barrier.ParticipantsRemaining%2A&gt;</ph> value is not decreased.</source>
          <target state="translated">Si le <ph id="ph1">`cancellationToken`</ph> a été annulée avant le signal d’entrée en vigueur, alors un <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> est levée et la <ph id="ph3">&lt;xref:System.Threading.Barrier.ParticipantsRemaining%2A&gt;</ph> valeur n’est pas diminuée.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
          <source>If the <ph id="ph1">`cancellationToken`</ph> is not canceled or is canceled after the signal takes effect then <ph id="ph2">&lt;xref:System.Threading.Barrier.ParticipantsRemaining%2A&gt;</ph> is decreased and no <ph id="ph3">&lt;xref:System.OperationCanceledException&gt;</ph> is thrown.</source>
          <target state="translated">Si le <ph id="ph1">`cancellationToken`</ph> n’est pas annulé ou est annulée une fois que le signal en vigueur puis <ph id="ph2">&lt;xref:System.Threading.Barrier.ParticipantsRemaining%2A&gt;</ph> est diminuée et aucune <ph id="ph3">&lt;xref:System.OperationCanceledException&gt;</ph> est levée.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> has been canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> a été annulé.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">L’instance actuelle a déjà été supprimée.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> est un nombre négatif différent de -1, qui représente un délai d’attente infini.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
          <source>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</source>
          <target state="translated">La méthode a été appelée à partir d'une action post-phase, le cloisonnement comporte actuellement 0 participants, ou il est signalé par un nombre de threads plus important que celui enregistré en tant que participants.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> qui représente le nombre de millièmes de secondes à attendre ou <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> qui représente -1 millième de seconde, pour attendre indéfiniment.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> à observer.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> object to measure the time interval, while observing a cancellation token.</source>
          <target state="translated">Signale qu'un participant a atteint le cloisonnement et qu'il attend que tous les autres participants atteignent également le cloisonnement, à l'aide d'un objet <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> qui mesure l'intervalle de temps, tout en observant un jeton d'annulation.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>true if all other participants reached the barrier; otherwise, false.</source>
          <target state="translated">true si tous les autres participants ont atteint le cloisonnement ; sinon, false.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> has been canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> a été annulé.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">L’instance actuelle a déjà été supprimée.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> est un nombre négatif autre que -1 milliseconde, qui représente un délai d’attente infini.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</source>
          <target state="translated">La méthode a été appelée à partir d'une action post-phase, le cloisonnement comporte actuellement 0 participants, ou il est signalé par un nombre de threads plus important que celui enregistré en tant que participants.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>