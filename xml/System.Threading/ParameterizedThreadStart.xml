<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6367040f3868461a31ceec837781de60b418c2f6" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48762350" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj">
      <span data-ttu-id="30eec-101">Objet qui contient les données de la procédure thread.</span>
      <span class="sxs-lookup">
        <span data-stu-id="30eec-101">An object that contains data for the thread procedure.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="30eec-102">Représente la méthode qui s’exécute sur un élément <see cref="T:System.Threading.Thread" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="30eec-102">Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="30eec-103">Lorsqu’un thread managé est créé, la méthode qui s’exécute sur le thread est représentée par :</span><span class="sxs-lookup"><span data-stu-id="30eec-103">When a managed thread is created, the method that executes on the thread is represented by:</span></span>  
  
-   <span data-ttu-id="30eec-104">Un <xref:System.Threading.ThreadStart> délégué qui est passé à la <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> constructeur.</span><span class="sxs-lookup"><span data-stu-id="30eec-104">A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> constructor.</span></span>  <span data-ttu-id="30eec-105">Toute méthode qui n’a aucun paramètre et retourne `void` en c# ou est un `Sub` procédure en Visual Basic peut représenter le délégué.</span><span class="sxs-lookup"><span data-stu-id="30eec-105">Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate.</span></span>  
  
-   <span data-ttu-id="30eec-106">Un <xref:System.Threading.ParameterizedThreadStart> délégué qui est passé à la <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> constructeur.</span><span class="sxs-lookup"><span data-stu-id="30eec-106">A <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="30eec-107">Toute méthode qui a un seul paramètre de type <xref:System.Object> et qui retourne void en c# ou est une procédure Sub en Visual Basic peut représenter le délégué.</span><span class="sxs-lookup"><span data-stu-id="30eec-107">Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.</span></span>  
  
 <span data-ttu-id="30eec-108">Le thread d’exécution ne commence pas tant que le <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="30eec-108">The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="30eec-109">Le <xref:System.Threading.ThreadStart> ou <xref:System.Threading.ParameterizedThreadStart> est appelé sur le thread, et l’exécution commence à la première ligne de la méthode représentée par le délégué.</span><span class="sxs-lookup"><span data-stu-id="30eec-109">The <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.</span></span> <span data-ttu-id="30eec-110">Dans le cas de la <xref:System.Threading.ParameterizedThreadStart> déléguer, l’objet qui est passé à la <xref:System.Threading.Thread.Start%28System.Object%29> méthode est passée au délégué.</span><span class="sxs-lookup"><span data-stu-id="30eec-110">In the case of the <xref:System.Threading.ParameterizedThreadStart> delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="30eec-111">Les utilisateurs de Visual Basic et c# peuvent omettre le <xref:System.Threading.ThreadStart> ou <xref:System.Threading.ParameterizedThreadStart> constructeur délégué lors de la création d’un thread.</span><span class="sxs-lookup"><span data-stu-id="30eec-111">Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread.</span></span> <span data-ttu-id="30eec-112">Dans Visual Basic, utilisez la `AddressOf` opérateur lorsque vous passez votre méthode pour le <xref:System.Threading.Thread.%23ctor%2A> constructeur ; par exemple, `Dim t As New Thread(AddressOf ThreadProc)`.</span><span class="sxs-lookup"><span data-stu-id="30eec-112">In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="30eec-113">En c#, spécifiez simplement le nom de la procédure de thread.</span><span class="sxs-lookup"><span data-stu-id="30eec-113">In C#, simply specify the name of the thread procedure.</span></span> <span data-ttu-id="30eec-114">Le compilateur sélectionne le constructeur délégué approprié.</span><span class="sxs-lookup"><span data-stu-id="30eec-114">The compiler selects the correct delegate constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="30eec-115">Lorsque vous créez un <xref:System.Threading.ParameterizedThreadStart> délégué pour une méthode d’instance en C++, le premier paramètre du constructeur est la variable d’instance.</span><span class="sxs-lookup"><span data-stu-id="30eec-115">When you create a <xref:System.Threading.ParameterizedThreadStart> delegate for an instance method in C++, the first parameter of the constructor is the instance variable.</span></span> <span data-ttu-id="30eec-116">Pour une méthode statique, le premier paramètre du constructeur est égal à zéro.</span><span class="sxs-lookup"><span data-stu-id="30eec-116">For a static method, the first parameter of the constructor is zero.</span></span> <span data-ttu-id="30eec-117">Pour une méthode statique, le constructeur délégué ne requiert qu’un seul paramètre : l’adresse de la méthode de rappel, qualifiée par le nom de classe.</span><span class="sxs-lookup"><span data-stu-id="30eec-117">For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.</span></span>  
  
 <span data-ttu-id="30eec-118">Le <xref:System.Threading.ParameterizedThreadStart> déléguer et <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> surcharge de méthode facilitent l’utilisation passer des données à une procédure de thread, mais cette technique n’est pas de type sécurisé, car n’importe quel objet peut être passé à <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="30eec-118">The <xref:System.Threading.ParameterizedThreadStart> delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="30eec-119">Une façon plus fiable pour transmettre des données à une procédure de thread est de placer la procédure de thread et les champs de données dans un objet de travail.</span><span class="sxs-lookup"><span data-stu-id="30eec-119">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="30eec-120">Pour plus d’informations, consultez [création de Threads et passage de données à l’heure de début](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span><span class="sxs-lookup"><span data-stu-id="30eec-120">For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
 <span data-ttu-id="30eec-121">Le <xref:System.Threading.ParameterizedThreadStart> délégué prend en charge un seul paramètre.</span><span class="sxs-lookup"><span data-stu-id="30eec-121">The <xref:System.Threading.ParameterizedThreadStart> delegate supports only a single parameter.</span></span> <span data-ttu-id="30eec-122">Vous pouvez passer plusieurs éléments de données à le <xref:System.Threading.ParameterizedThreadStart> en rendant ce paramètre l’un des éléments suivants :</span><span class="sxs-lookup"><span data-stu-id="30eec-122">You can pass multiple data items to the <xref:System.Threading.ParameterizedThreadStart> by making that parameter one of the following:</span></span>  
  
-   <span data-ttu-id="30eec-123">Tableau.</span><span class="sxs-lookup"><span data-stu-id="30eec-123">An array.</span></span>  
  
-   <span data-ttu-id="30eec-124">Un type de collection, si tous les éléments de données sont du même type.</span><span class="sxs-lookup"><span data-stu-id="30eec-124">A collection type, if all of the data items are of the same type.</span></span>  
  
-   <span data-ttu-id="30eec-125">Un tuple type, tel que <xref:System.Tuple%602> ou <xref:System.Tuple%604>.</span><span class="sxs-lookup"><span data-stu-id="30eec-125">A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="30eec-126">Le code suivant exemple utilise un <xref:System.Threading.ParameterizedThreadStart> délégué à exécuter une méthode statique et une méthode d’instance.</span><span class="sxs-lookup"><span data-stu-id="30eec-126">The following code example uses a <xref:System.Threading.ParameterizedThreadStart> delegate to execute a static method and an instance method.</span></span> <span data-ttu-id="30eec-127">La première <xref:System.Threading.ParameterizedThreadStart> délégué est représenté par la méthode statique `DoWork` (méthode) et le second est représenté par l’instance `DoMoreWork` (méthode).</span><span class="sxs-lookup"><span data-stu-id="30eec-127">The first <xref:System.Threading.ParameterizedThreadStart> delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method.</span></span> <span data-ttu-id="30eec-128">Les deux méthodes de faire correspondre le <xref:System.Threading.ParameterizedThreadStart> signature du délégué ; autrement dit, ils ont un seul paramètre de type <xref:System.Object> et ne retournant aucune valeur.</span><span class="sxs-lookup"><span data-stu-id="30eec-128">Both methods match the <xref:System.Threading.ParameterizedThreadStart> delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="30eec-129">Les compilateurs Visual Basic et c# déduisent le <xref:System.Threading.ParameterizedThreadStart> déléguer des signatures de la `DoWork` et `DoMoreWork` méthodes, puis appelez le constructeur correct.</span><span class="sxs-lookup"><span data-stu-id="30eec-129">The Visual Basic and C# compilers infer the <xref:System.Threading.ParameterizedThreadStart> delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor.</span></span> <span data-ttu-id="30eec-130">Par conséquent, il n’existe aucun appel de constructeur explicite dans le code.</span><span class="sxs-lookup"><span data-stu-id="30eec-130">Thus, there is no explicit constructor call in the code.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md">
      <span data-ttu-id="30eec-131">Création de Threads</span>
      <span class="sxs-lookup">
        <span data-stu-id="30eec-131">Creating Threads</span>
      </span>
    </related>
  </Docs>
</Type>