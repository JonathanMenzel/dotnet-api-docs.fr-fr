<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="33bf1e7037d4fd595a1fa1ff8e3d19fffbfa234b" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58740082" /></Metadata><TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj">Objet qui contient les données de la procédure thread.</param>
    <summary>Représente la méthode qui s’exécute sur un élément <see cref="T:System.Threading.Thread" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’un thread managé est créé, la méthode qui s’exécute sur le thread est représentée par :  
  
-   Un <xref:System.Threading.ThreadStart> délégué qui est passé à la <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> constructeur.  Toute méthode qui n’a aucun paramètre et retourne `void` en c# ou est un `Sub` procédure en Visual Basic peut représenter le délégué.  
  
-   Un <xref:System.Threading.ParameterizedThreadStart> délégué qui est passé à la <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> constructeur. Toute méthode qui a un seul paramètre de type <xref:System.Object> et qui retourne void en c# ou est une procédure Sub en Visual Basic peut représenter le délégué.  
  
 Le thread d’exécution ne commence pas tant que le <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> méthode est appelée. Le <xref:System.Threading.ThreadStart> ou <xref:System.Threading.ParameterizedThreadStart> est appelé sur le thread, et l’exécution commence à la première ligne de la méthode représentée par le délégué. Dans le cas de la <xref:System.Threading.ParameterizedThreadStart> déléguer, l’objet qui est passé à la <xref:System.Threading.Thread.Start%28System.Object%29> méthode est passée au délégué.  
  
> [!NOTE]
>  Les utilisateurs de Visual Basic et c# peuvent omettre le <xref:System.Threading.ThreadStart> ou <xref:System.Threading.ParameterizedThreadStart> constructeur délégué lors de la création d’un thread. Dans Visual Basic, utilisez la `AddressOf` opérateur lorsque vous passez votre méthode pour le <xref:System.Threading.Thread.%23ctor%2A> constructeur ; par exemple, `Dim t As New Thread(AddressOf ThreadProc)`. En c#, spécifiez simplement le nom de la procédure de thread. Le compilateur sélectionne le constructeur délégué approprié.  
  
> [!NOTE]
>  Lorsque vous créez un <xref:System.Threading.ParameterizedThreadStart> délégué pour une méthode d’instance en C++, le premier paramètre du constructeur est la variable d’instance. Pour une méthode statique, le premier paramètre du constructeur est égal à zéro. Pour une méthode statique, le constructeur délégué ne requiert qu’un seul paramètre : l’adresse de la méthode de rappel, qualifiée par le nom de classe.  
  
 Le <xref:System.Threading.ParameterizedThreadStart> déléguer et <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> surcharge de méthode facilitent l’utilisation passer des données à une procédure de thread, mais cette technique n’est pas de type sécurisé, car n’importe quel objet peut être passé à <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>. Une façon plus fiable pour transmettre des données à une procédure de thread est de placer la procédure de thread et les champs de données dans un objet de travail. Pour plus d’informations, consultez [création de Threads et passage de données à l’heure de début](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).  
  
 Le <xref:System.Threading.ParameterizedThreadStart> délégué prend en charge un seul paramètre. Vous pouvez passer plusieurs éléments de données à le <xref:System.Threading.ParameterizedThreadStart> en rendant ce paramètre l’un des éléments suivants :  
  
-   Tableau.  
  
-   Un type de collection, si tous les éléments de données sont du même type.  
  
-   Un tuple type, tel que <xref:System.Tuple%602> ou <xref:System.Tuple%604>.  
  
   
  
## Examples  
 Le code suivant exemple utilise un <xref:System.Threading.ParameterizedThreadStart> délégué à exécuter une méthode statique et une méthode d’instance. La première <xref:System.Threading.ParameterizedThreadStart> délégué est représenté par la méthode statique `DoWork` (méthode) et le second est représenté par l’instance `DoMoreWork` (méthode). Les deux méthodes de faire correspondre le <xref:System.Threading.ParameterizedThreadStart> signature du délégué ; autrement dit, ils ont un seul paramètre de type <xref:System.Object> et ne retournant aucune valeur.  
  
> [!NOTE]
>  Les compilateurs Visual Basic et c# déduisent le <xref:System.Threading.ParameterizedThreadStart> déléguer des signatures de la `DoWork` et `DoMoreWork` méthodes, puis appelez le constructeur correct. Par conséquent, il n’existe aucun appel de constructeur explicite dans le code.  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md">Création de Threads</related>
  </Docs>
</Type>