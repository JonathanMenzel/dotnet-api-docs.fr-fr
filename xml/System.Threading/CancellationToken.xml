<Type Name="CancellationToken" FullName="System.Threading.CancellationToken">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="aff861d633b172c0996e4351071b31629dbba628" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39804581" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct CancellationToken" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit CancellationToken extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.CancellationToken" />
  <TypeSignature Language="VB.NET" Value="Public Structure CancellationToken" />
  <TypeSignature Language="C++ CLI" Value="public value class CancellationToken" />
  <TypeSignature Language="F#" Value="type CancellationToken = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsCancellationRequested = {IsCancellationRequested}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="20488-101">Propage une notification indiquant que des opérations doivent être annulées.</span>
      <span class="sxs-lookup">
        <span data-stu-id="20488-101">Propagates notification that operations should be canceled.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20488-102">Un <xref:System.Threading.CancellationToken> permet l’annulation coopérative entre les threads, les éléments de travail du pool de threads, ou <xref:System.Threading.Tasks.Task> objets.</span><span class="sxs-lookup"><span data-stu-id="20488-102">A <xref:System.Threading.CancellationToken> enables cooperative cancellation between threads, thread pool work items, or <xref:System.Threading.Tasks.Task> objects.</span></span> <span data-ttu-id="20488-103">Vous créez un jeton d’annulation en instanciant un <xref:System.Threading.CancellationTokenSource> objet, qui gère les jetons d’annulation récupéré à partir de son <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> propriété.</span><span class="sxs-lookup"><span data-stu-id="20488-103">You create a cancellation token by instantiating a <xref:System.Threading.CancellationTokenSource> object, which manages cancellation tokens retrieved from its <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="20488-104">Vous transmettez ensuite le jeton d’annulation à n’importe quel nombre de threads, les tâches ou opérations qui doivent être informés de l’annulation.</span><span class="sxs-lookup"><span data-stu-id="20488-104">You then  pass the cancellation token to any number of threads, tasks, or operations that should receive notice of cancellation.</span></span> <span data-ttu-id="20488-105">Le jeton ne peut pas être utilisé pour initier l’annulation.</span><span class="sxs-lookup"><span data-stu-id="20488-105">The token cannot be used to initiate cancellation.</span></span> <span data-ttu-id="20488-106">Lorsque l’objet propriétaire appelle <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>, le <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> propriété sur chaque copie du jeton d’annulation est définie sur `true`.</span><span class="sxs-lookup"><span data-stu-id="20488-106">When the owning object calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>, the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property on every copy of the cancellation token is set to `true`.</span></span> <span data-ttu-id="20488-107">Les objets qui reçoivent la notification peuvent répondre de quelque manière appropriée.</span><span class="sxs-lookup"><span data-stu-id="20488-107">The objects that receive the notification can respond in whatever manner is appropriate.</span></span>  
  
 <span data-ttu-id="20488-108">Pour plus d’informations et le code des exemples, consultez [l’annulation dans les Threads managés](~/docs/standard/threading/cancellation-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="20488-108">For more information and code examples see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20488-109">L’exemple suivant utilise un générateur de nombres aléatoires pour émuler une application de collecte de données qui lit les 10 valeurs intégrales d’onze instruments différents.</span><span class="sxs-lookup"><span data-stu-id="20488-109">The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</span></span> <span data-ttu-id="20488-110">La valeur zéro indique que la mesure a échoué pour un instrument, auquel cas l’opération doit être annulée et aucune moyenne globale doivent être calculées.</span><span class="sxs-lookup"><span data-stu-id="20488-110">A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</span></span>  
  
 <span data-ttu-id="20488-111">Pour gérer l’annulation possible de l’opération, l’exemple instancie un <xref:System.Threading.CancellationTokenSource> objet qui génère un jeton d’annulation qui est transmis à un <xref:System.Threading.Tasks.TaskFactory> objet.</span><span class="sxs-lookup"><span data-stu-id="20488-111">To handle the possible cancellation of the operation, the example instantiates a <xref:System.Threading.CancellationTokenSource> object that generates a cancellation token which is passed to a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="20488-112">Le <xref:System.Threading.Tasks.TaskFactory> objet à son tour transmet le jeton d’annulation à chacune des tâches chargée de collecter des relevés d’un instrument particulier.</span><span class="sxs-lookup"><span data-stu-id="20488-112">The <xref:System.Threading.Tasks.TaskFactory> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</span></span> <span data-ttu-id="20488-113">Le <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> méthode est appelée pour s’assurer que la moyenne est calculée uniquement une fois que toutes les lectures ont été collectées avec succès.</span><span class="sxs-lookup"><span data-stu-id="20488-113">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</span></span> <span data-ttu-id="20488-114">Si une tâche n’a pas, car elle a été annulée, l’appel à la <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> méthode lève une exception.</span><span class="sxs-lookup"><span data-stu-id="20488-114">If a task has not because it has been cancelled, the call to the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> method throws an exception.</span></span>  
  
 [!code-csharp[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/cs/cancel1.cs#1)]
 [!code-vb[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/vb/cancel1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="20488-115">Tous les membres publics et protégés de <see cref="T:System.Threading.CancellationToken" /> sont thread-safe et peuvent être utilisés simultanément par plusieurs threads.</span>
      <span class="sxs-lookup">
        <span data-stu-id="20488-115">All public and protected members of <see cref="T:System.Threading.CancellationToken" /> are thread-safe and may be used concurrently from multiple threads.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancellationToken (bool canceled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool canceled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (canceled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CancellationToken(bool canceled);" />
      <MemberSignature Language="F#" Value="new System.Threading.CancellationToken : bool -&gt; System.Threading.CancellationToken" Usage="new System.Threading.CancellationToken canceled" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="canceled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="canceled">
          <span data-ttu-id="20488-116">État d'annulation du jeton.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-116">The canceled state for the token.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20488-117">Initialise la <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-117">Initializes the <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20488-118">Les jetons créés avec ce constructeur resteront dans l’état annulé spécifié par le `canceled` paramètre.</span><span class="sxs-lookup"><span data-stu-id="20488-118">Tokens created with this constructor will remain in the canceled state specified by the `canceled` parameter.</span></span> <span data-ttu-id="20488-119">Si `canceled` est `false`, à la fois <xref:System.Threading.CancellationToken.CanBeCanceled%2A> et <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> sera `false`.</span><span class="sxs-lookup"><span data-stu-id="20488-119">If `canceled` is `false`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `false`.</span></span>  
  
 <span data-ttu-id="20488-120">Si `canceled` est `true`, à la fois <xref:System.Threading.CancellationToken.CanBeCanceled%2A> et <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> sera `true`.</span><span class="sxs-lookup"><span data-stu-id="20488-120">If `canceled` is `true`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanBeCanceled">
      <MemberSignature Language="C#" Value="public bool CanBeCanceled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanBeCanceled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.CanBeCanceled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanBeCanceled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanBeCanceled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanBeCanceled : bool" Usage="System.Threading.CancellationToken.CanBeCanceled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="20488-121">Détermine si ce jeton peut être à l'état Annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-121">Gets whether this token is capable of being in the canceled state.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="20488-122">
            <see langword="true" /> si ce jeton peut être dans l’état Annulé ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-122">
              <see langword="true" /> if this token is capable of being in the canceled state; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20488-123">Si <xref:System.Threading.CancellationToken.CanBeCanceled%2A> retourne `false`, il est garanti que le jeton ne passera jamais dans un état annulé, ce qui signifie que <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> ne retournent jamais `true`.</span><span class="sxs-lookup"><span data-stu-id="20488-123">If <xref:System.Threading.CancellationToken.CanBeCanceled%2A> returns `false`, it is guaranteed that the token will never transition into a canceled state, meaning that <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will never return `true`.</span></span> <span data-ttu-id="20488-124">Un jeton d’annulation qui ne peut pas être annulé est retourné par la méthode statique <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType> propriété.</span><span class="sxs-lookup"><span data-stu-id="20488-124">A cancellation token that cannot be canceled is returned by the static <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="20488-125">Vous pouvez éventuellement utiliser cette propriété pour déterminer si un jeton d’annulation peut être annulée avant l’examen de le, la valeur de la <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> propriété afin de déterminer si elle a été annulée.</span><span class="sxs-lookup"><span data-stu-id="20488-125">You can optionally use this property to determine whether a cancellation token can be canceled before examing the value of the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property to determine whether it has been canceled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="20488-126">Détermine si l'instance actuelle de <see cref="T:System.Threading.CancellationToken" /> est égale au jeton spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-126">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cancellationToken.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="20488-127">Autre objet à comparer avec cette instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-127">The other object to compare with this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20488-128">Détermine si l'instance actuelle de <see cref="T:System.Threading.CancellationToken" /> est égale au <see cref="T:System.Object" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-128">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified <see cref="T:System.Object" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20488-129">
            <see langword="true" /> si <paramref name="other" /> est un <see cref="T:System.Threading.CancellationToken" /> et si les deux instances sont égales ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-129">
              <see langword="true" /> if <paramref name="other" /> is a <see cref="T:System.Threading.CancellationToken" /> and if the two instances are equal; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="20488-130">Pour plus d'informations, consultez la section Notes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-130">See the Remarks section for more information.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="20488-131">Deux jetons d’annulation sont égales si l’une des conditions suivantes est vraie :</span><span class="sxs-lookup"><span data-stu-id="20488-131">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="20488-132">Ils sont associés au même <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="20488-132">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="20488-133">Les deux ont été construits à partir de public <xref:System.Threading.CancellationToken> constructeurs, ainsi que leurs <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> valeurs sont égales.</span><span class="sxs-lookup"><span data-stu-id="20488-133">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="20488-134">La valeur de ces deux jetons d’annulation est <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="20488-134">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="20488-135">Une <see cref="T:System.Threading.CancellationTokenSource" /> associée a été supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-135">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Threading.CancellationToken other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Threading.CancellationToken other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Threading::CancellationToken other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Threading.CancellationToken -&gt; bool" Usage="cancellationToken.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="20488-136">Autre <see cref="T:System.Threading.CancellationToken" /> à comparer avec cette instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-136">The other <see cref="T:System.Threading.CancellationToken" /> to compare with this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20488-137">Détermine si l'instance actuelle de <see cref="T:System.Threading.CancellationToken" /> est égale au jeton spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-137">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20488-138">
            <see langword="true" /> si les instances sont égales ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-138">
              <see langword="true" /> if the instances are equal; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="20488-139">Pour plus d'informations, consultez la section Notes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-139">See the Remarks section for more information.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="20488-140">Deux jetons d’annulation sont égales si l’une des conditions suivantes est vraie :</span><span class="sxs-lookup"><span data-stu-id="20488-140">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="20488-141">Ils sont associés au même <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="20488-141">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="20488-142">Les deux ont été construits à partir de public <xref:System.Threading.CancellationToken> constructeurs, ainsi que leurs <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> valeurs sont égales.</span><span class="sxs-lookup"><span data-stu-id="20488-142">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="20488-143">La valeur de ces deux jetons d’annulation est <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="20488-143">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cancellationToken.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="20488-144">Sert de fonction de hachage pour un <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-144">Serves as a hash function for a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20488-145">Code de hachage pour l'instance actuelle de <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-145">A hash code for the current <see cref="T:System.Threading.CancellationToken" /> instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancellationRequested">
      <MemberSignature Language="C#" Value="public bool IsCancellationRequested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancellationRequested" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCancellationRequested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCancellationRequested { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCancellationRequested : bool" Usage="System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="20488-146">Détermine si l'annulation a été demandée pour ce jeton.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-146">Gets whether cancellation has been requested for this token.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="20488-147">
            <see langword="true" /> Si l’annulation a été demandée pour ce jeton ; Sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-147">
              <see langword="true" /> if cancellation has been requested for this token; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20488-148">Cette propriété indique si l’annulation a été demandée pour ce jeton, via le jeton initialement construit dans un état annulé ou via l’appel <xref:System.Threading.CancellationTokenSource.Cancel%2A> sur le jeton associé au <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="20488-148">This property indicates whether cancellation has been requested for this token, either through the token initially being constructed in a canceled state, or through calling <xref:System.Threading.CancellationTokenSource.Cancel%2A> on the token's associated <xref:System.Threading.CancellationTokenSource>.</span></span>  
  
 <span data-ttu-id="20488-149">Si cette propriété est `true`, elle garantit uniquement que l’annulation a été demandée.</span><span class="sxs-lookup"><span data-stu-id="20488-149">If this property is `true`, it only guarantees that cancellation has been requested.</span></span> <span data-ttu-id="20488-150">Il ne garantit pas que l’exécution de chaque gestionnaire inscrit a terminée, ni que les demandes d’annulation ont été propagées à tous les gestionnaires inscrits.</span><span class="sxs-lookup"><span data-stu-id="20488-150">It does not guarantee that every registered handler has finished executing, nor that cancellation requests have finished propagating to all registered handlers.</span></span> <span data-ttu-id="20488-151">Une synchronisation supplémentaire peut être nécessaire, en particulier dans les situations où les objets connexes sont annulés simultanément.</span><span class="sxs-lookup"><span data-stu-id="20488-151">Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20488-152">Voici un exemple simple qui exécute un processus serveur jusqu'à ce que le <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> retourne de la propriété `true`.</span><span class="sxs-lookup"><span data-stu-id="20488-152">The following is a simple example that executes a server process until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property returns `true`.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/cs/cancellation.cs#12)]
 [!code-vb[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/vb/cancelthreads.vb#12)]  
  
 <span data-ttu-id="20488-153">L’exemple instancie un <xref:System.Threading.CancellationTokenSource> objet qui contrôle l’accès au jeton d’annulation.</span><span class="sxs-lookup"><span data-stu-id="20488-153">The example instantiates a <xref:System.Threading.CancellationTokenSource> object, which controls access to the cancellation token.</span></span> <span data-ttu-id="20488-154">Il définit ensuite deux procédures de thread.</span><span class="sxs-lookup"><span data-stu-id="20488-154">It then defines two thread procedures.</span></span> <span data-ttu-id="20488-155">La première est définie comme une expression lambda qui regroupe le clavier et, lorsque la touche « C », appelle <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> pour définir le jeton d’annulation à l’état annulé.</span><span class="sxs-lookup"><span data-stu-id="20488-155">The first is defined as a lambda expression that pools the keyboard and, when the "C" key is pressed, calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> to set the cancellation token to the cancelled state.</span></span> <span data-ttu-id="20488-156">Le second est une méthode paramétrée, `ServerClass.StaticMethod`, qui exécute une boucle jusqu'à ce que le <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> propriété est `true`.</span><span class="sxs-lookup"><span data-stu-id="20488-156">The second is a parameterized method, `ServerClass.StaticMethod`, that executes a loop until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="20488-157">Le thread principal démarre ensuite les deux threads et les blocs jusqu'à ce que le thread qui exécute le `ServerClass.StaticMethod` méthode se termine.</span><span class="sxs-lookup"><span data-stu-id="20488-157">The main thread then starts the two threads and blocks until the thread that executes the `ServerClass.StaticMethod` method terminates.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Threading.CancellationToken None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Threading.CancellationToken None" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::CancellationToken None { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.None : System.Threading.CancellationToken" Usage="System.Threading.CancellationToken.None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="20488-158">Retourne une valeur <see cref="T:System.Threading.CancellationToken" /> vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-158">Returns an empty <see cref="T:System.Threading.CancellationToken" /> value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="20488-159">Jeton d'annulation vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-159">An empty cancellation token.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20488-160">Le jeton d’annulation retourné par cette propriété ne peut pas être annulé ; Autrement dit, son <xref:System.Threading.CancellationToken.CanBeCanceled%2A> propriété est `false`.</span><span class="sxs-lookup"><span data-stu-id="20488-160">The cancellation token returned by this property cannot be canceled; that is, its <xref:System.Threading.CancellationToken.CanBeCanceled%2A> property is `false`.</span></span>  
  
 <span data-ttu-id="20488-161">Vous pouvez également utiliser le langage c# [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) instruction pour créer un jeton d’annulation vide.</span><span class="sxs-lookup"><span data-stu-id="20488-161">You can also use the C#  [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) statement to create an empty cancellation token.</span></span> 

 <span data-ttu-id="20488-162">Deux jetons d’annulation vide sont toujours égaux.</span><span class="sxs-lookup"><span data-stu-id="20488-162">Two empty cancellation tokens are always equal.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="20488-163">Première instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-163">The first instance.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="20488-164">Deuxième instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-164">The second instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20488-165">Détermine si deux instances <see cref="T:System.Threading.CancellationToken" /> sont égales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-165">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20488-166">
            <see langword="true" /> si les instances sont égales ; sinon, <see langword="false" />. Consultez la section Notes pour plus d’informations.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-166">
              <see langword="true" /> if the instances are equal; otherwise, <see langword="false" /> See the Remarks section for more information.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="20488-167">Deux jetons d’annulation sont égales si l’une des conditions suivantes est vraie :</span><span class="sxs-lookup"><span data-stu-id="20488-167">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="20488-168">Ils sont associés au même <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="20488-168">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="20488-169">Les deux ont été construits à partir de public <xref:System.Threading.CancellationToken> constructeurs, ainsi que leurs <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> valeurs sont égales.</span><span class="sxs-lookup"><span data-stu-id="20488-169">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="20488-170">La valeur de ces deux jetons d’annulation est <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="20488-170">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="20488-171">Une <see cref="T:System.Threading.CancellationTokenSource" /> associée a été supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-171">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; bool" Usage="System.Threading.CancellationToken.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="20488-172">Première instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-172">The first instance.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="20488-173">Deuxième instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-173">The second instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20488-174">Détermine si les deux instances de <see cref="T:System.Threading.CancellationToken" /> ne sont pas égales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-174">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20488-175">
            <see langword="true" /> si les instances ne sont pas égales ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-175">
              <see langword="true" /> if the instances are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="20488-176">Pour la définition de l’égalité, consultez le <xref:System.Threading.CancellationToken.Equals%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="20488-176">For the definition of equality, see the <xref:System.Threading.CancellationToken.Equals%2A> method.</span></span> 
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="20488-177">Une <see cref="T:System.Threading.CancellationTokenSource" /> associée a été supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-177">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="20488-178">Inscrit un délégué qui sera appelé lors de l'annulation du <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-178">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Register : Action -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="20488-179">Délégué à exécuter lorsque <see cref="T:System.Threading.CancellationToken" /> est annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-179">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20488-180">Inscrit un délégué qui sera appelé lors de l'annulation du <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-180">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20488-181">Instance de <see cref="T:System.Threading.CancellationTokenRegistration" /> qui peut être utilisée pour désinscrire le rappel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-181">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20488-182">Si ce jeton est déjà dans l’état annulé, le délégué est exécuté immédiatement et de manière synchrone.</span><span class="sxs-lookup"><span data-stu-id="20488-182">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="20488-183">Toute exception que génère le délégué sera propagée hors de cet appel de méthode.</span><span class="sxs-lookup"><span data-stu-id="20488-183">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="20488-184">Actuel <xref:System.Threading.ExecutionContext> est capturée en même temps que le délégué et sera utilisé lors de son exécution.</span><span class="sxs-lookup"><span data-stu-id="20488-184">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="20488-185">Actuel <xref:System.Threading.SynchronizationContext> n’est pas capturée.</span><span class="sxs-lookup"><span data-stu-id="20488-185">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
 
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="20488-186">L’élément <see cref="T:System.Threading.CancellationTokenSource" /> associé a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-186">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="20488-187">
            <paramref name="callback" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-187">
              <paramref name="callback" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback, bool useSynchronizationContext);" />
      <MemberSignature Language="F#" Value="member this.Register : Action * bool -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, useSynchronizationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="20488-188">Délégué à exécuter lorsque <see cref="T:System.Threading.CancellationToken" /> est annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-188">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </param>
        <param name="useSynchronizationContext">
          <span data-ttu-id="20488-189">Valeur qui indique s’il faut capturer le <see cref="T:System.Threading.SynchronizationContext" /> actuel et l’utiliser au moment de l’appel de <c>callback</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-189">A value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <c>callback</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20488-190">Inscrit un délégué qui sera appelé lors de l'annulation du <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-190">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20488-191">Instance de <see cref="T:System.Threading.CancellationTokenRegistration" /> qui peut être utilisée pour désinscrire le rappel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-191">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20488-192">Si ce jeton est déjà dans l’état annulé, le délégué est exécuté immédiatement et de manière synchrone.</span><span class="sxs-lookup"><span data-stu-id="20488-192">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="20488-193">Toute exception que génère le délégué sera propagée hors de cet appel de méthode.</span><span class="sxs-lookup"><span data-stu-id="20488-193">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="20488-194">Actuel <xref:System.Threading.ExecutionContext> est capturée en même temps que le délégué et sera utilisé lors de son exécution.</span><span class="sxs-lookup"><span data-stu-id="20488-194">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="20488-195">Si `useSynchronizationContext` est `true`, actuel <xref:System.Threading.SynchronizationContext>, s’il en existe, est également capturé avec le délégué et sera utilisé lors de son exécution.</span><span class="sxs-lookup"><span data-stu-id="20488-195">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="20488-196">Sinon, <xref:System.Threading.SynchronizationContext> n’est pas capturée.</span><span class="sxs-lookup"><span data-stu-id="20488-196">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="20488-197">L’élément <see cref="T:System.Threading.CancellationTokenSource" /> associé a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-197">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="20488-198">
            <paramref name="callback" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-198">
              <paramref name="callback" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.Register : Action&lt;obj&gt; * obj -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="20488-199">Délégué à exécuter lorsque <see cref="T:System.Threading.CancellationToken" /> est annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-199">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="20488-200">État à passer à <c>callback</c> quand le délégué est appelé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-200">The state to pass to the <c>callback</c> when the delegate is invoked.</span>
          </span>
          <span data-ttu-id="20488-201">Il peut s'agir d'une valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-201">This may be null.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20488-202">Inscrit un délégué qui sera appelé lors de l'annulation du <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-202">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20488-203">Instance de <see cref="T:System.Threading.CancellationTokenRegistration" /> qui peut être utilisée pour désinscrire le rappel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-203">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20488-204">Si ce jeton est déjà dans l’état annulé, le délégué est exécuté immédiatement et de manière synchrone.</span><span class="sxs-lookup"><span data-stu-id="20488-204">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="20488-205">Toute exception que génère le délégué sera propagée hors de cet appel de méthode.</span><span class="sxs-lookup"><span data-stu-id="20488-205">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="20488-206">Actuel <xref:System.Threading.ExecutionContext> est capturée en même temps que le délégué et sera utilisé lors de son exécution.</span><span class="sxs-lookup"><span data-stu-id="20488-206">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="20488-207">Actuel <xref:System.Threading.SynchronizationContext> n’est pas capturée.</span><span class="sxs-lookup"><span data-stu-id="20488-207">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="20488-208">L’élément <see cref="T:System.Threading.CancellationTokenSource" /> associé a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-208">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="20488-209">
            <paramref name="callback" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-209">
              <paramref name="callback" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state, bool useSynchronizationContext);" />
      <MemberSignature Language="F#" Value="member this.Register : Action&lt;obj&gt; * obj * bool -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, state, useSynchronizationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="20488-210">Délégué à exécuter lorsque <see cref="T:System.Threading.CancellationToken" /> est annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-210">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="20488-211">État à passer à <c>callback</c> quand le délégué est appelé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-211">The state to pass to the <c>callback</c> when the delegate is invoked.</span>
          </span>
          <span data-ttu-id="20488-212">Il peut s'agir d'une valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-212">This may be null.</span>
          </span>
        </param>
        <param name="useSynchronizationContext">
          <span data-ttu-id="20488-213">Valeur booléenne qui indique s’il faut capturer le <see cref="T:System.Threading.SynchronizationContext" /> actuel et l’utiliser au moment de l’appel de <c>callback</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-213">A Boolean value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <c>callback</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="20488-214">Inscrit un délégué qui sera appelé lors de l'annulation du <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-214">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="20488-215">Instance de <see cref="T:System.Threading.CancellationTokenRegistration" /> qui peut être utilisée pour désinscrire le rappel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-215">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20488-216">Si ce jeton est déjà dans l’état annulé, le délégué est exécuté immédiatement et de manière synchrone.</span><span class="sxs-lookup"><span data-stu-id="20488-216">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="20488-217">Toute exception que génère le délégué sera propagée hors de cet appel de méthode.</span><span class="sxs-lookup"><span data-stu-id="20488-217">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="20488-218">Actuel <xref:System.Threading.ExecutionContext> est capturée en même temps que le délégué et sera utilisé lors de son exécution.</span><span class="sxs-lookup"><span data-stu-id="20488-218">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="20488-219">Si `useSynchronizationContext` est `true`, actuel <xref:System.Threading.SynchronizationContext>, s’il en existe, est également capturé avec le délégué et sera utilisé lors de son exécution.</span><span class="sxs-lookup"><span data-stu-id="20488-219">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="20488-220">Sinon, <xref:System.Threading.SynchronizationContext> n’est pas capturée.</span><span class="sxs-lookup"><span data-stu-id="20488-220">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="20488-221">L’élément <see cref="T:System.Threading.CancellationTokenSource" /> associé a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-221">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="20488-222">
            <paramref name="callback" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-222">
              <paramref name="callback" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfCancellationRequested">
      <MemberSignature Language="C#" Value="public void ThrowIfCancellationRequested ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ThrowIfCancellationRequested() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.ThrowIfCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public Sub ThrowIfCancellationRequested ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ThrowIfCancellationRequested();" />
      <MemberSignature Language="F#" Value="member this.ThrowIfCancellationRequested : unit -&gt; unit" Usage="cancellationToken.ThrowIfCancellationRequested " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="20488-223">Lève une <see cref="T:System.OperationCanceledException" /> si l'annulation de ce jeton a été demandée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-223">Throws a <see cref="T:System.OperationCanceledException" /> if this token has had cancellation requested.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20488-224">Cette méthode fournit des fonctionnalités équivalentes à :</span><span class="sxs-lookup"><span data-stu-id="20488-224">This method provides functionality equivalent to:</span></span>  
  
 <span data-ttu-id="20488-225">C#</span><span class="sxs-lookup"><span data-stu-id="20488-225">C#</span></span>  
  
```csharp  
if (token.IsCancellationRequested)   
    throw new OperationCanceledException(token);  
```  
  
```vb  
If token.IsCancellationRequested Then  
    Throw New OperationCanceledException(token)  
End If  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="20488-226">L’annulation du jeton a été demandée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-226">The token has had cancellation requested.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="20488-227">L’élément <see cref="T:System.Threading.CancellationTokenSource" /> associé a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-227">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle WaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle WaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.WaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ WaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitHandle : System.Threading.WaitHandle" Usage="System.Threading.CancellationToken.WaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="20488-228">Obtient un <see cref="T:System.Threading.WaitHandle" /> qui est signalé lors de l'annulation du jeton.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-228">Gets a <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="20488-229">
            <see cref="T:System.Threading.WaitHandle" /> signalé lors de l'annulation du jeton.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-229">A <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20488-230">L’accès à cette propriété provoque une <xref:System.Threading.WaitHandle> à instancier.</span><span class="sxs-lookup"><span data-stu-id="20488-230">Accessing this property causes a <xref:System.Threading.WaitHandle> to be instantiated.</span></span> <span data-ttu-id="20488-231">Il est préférable d’utiliser uniquement cette propriété lorsque cela est nécessaire et supprimer ensuite associé <xref:System.Threading.CancellationTokenSource> instance dès que possible (disposing supprime la source de ce handle alloué).</span><span class="sxs-lookup"><span data-stu-id="20488-231">It is preferable to only use this property when necessary, and to then dispose the associated <xref:System.Threading.CancellationTokenSource> instance at the earliest opportunity (disposing the source will dispose of this allocated handle).</span></span> <span data-ttu-id="20488-232">Le handle n’a pas doit être fermé ou supprimé directement.</span><span class="sxs-lookup"><span data-stu-id="20488-232">The handle should not be closed or disposed directly.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="20488-233">L’élément <see cref="T:System.Threading.CancellationTokenSource" /> associé a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="20488-233">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>