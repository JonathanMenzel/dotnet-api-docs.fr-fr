<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8de0e56ea65d1342ab469a35e0061d04f2fb4695" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56405250" /></Metadata><TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente un événement de synchronisation de threads qui, quand il est signalé, se réinitialise automatiquement après avoir libéré un thread en attente. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous utilisez `AutoResetEvent`, <xref:System.Threading.ManualResetEvent>, et <xref:System.Threading.EventWaitHandle> pour l’interaction des threads (ou le signalement de thread). Pour plus d’informations, consultez le [Thread interaction ou sa signalisation](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) section de la [vue d’ensemble des primitives de synchronisation](~/docs/standard/threading/overview-of-synchronization-primitives.md) article.  
  
> [!IMPORTANT]
>  Ce type implémente le <xref:System.IDisposable> interface. Lorsque vous avez fini d’utiliser le type, vous devez supprimer il directement ou indirectement. Pour supprimer le type directement, appelez sa <xref:System.IDisposable.Dispose%2A> méthode dans un `try` / `catch` bloc. Pour supprimer indirectement, utiliser une construction de langage tel que `using` (en c#) ou `Using` (en Visual Basic). Pour plus d’informations, consultez la section « À l’aide un objet qui implémente IDisposable » dans le <xref:System.IDisposable> rubrique de l’interface.  
  
 Un thread attend un signal en appelant [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A). Si le `AutoResetEvent` est dans l’état non signalé, le thread se bloque jusqu'à ce que [AutoResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) est appelée.  
  
 Appel `Set` signaux `AutoResetEvent` pour libérer un thread en attente. `AutoResetEvent` reste signalé jusqu'à ce qu’un seul thread en attente est libéré et retourne automatiquement à l’état non signalé. Si aucun thread n’attend, l’état reste signalé indéfiniment.  
  
 Si un thread appelle <xref:System.Threading.WaitHandle.WaitOne%2A> tandis que le <xref:System.Threading.AutoResetEvent> est dans l’état signalé, le thread ne bloque pas. Le <xref:System.Threading.AutoResetEvent> libère immédiatement le thread et retourne à l’état non signalé.  
  
> [!IMPORTANT]
>  Il n’existe aucune garantie que chaque appel à la <xref:System.Threading.EventWaitHandle.Set%2A> libère un thread. Si deux appels sont trop proches, afin que le deuxième appel se produit avant la libération d’un thread, un seul thread est libéré. Il s’agit comme si le deuxième appel n’a pas eu lieu. En outre, si <xref:System.Threading.EventWaitHandle.Set%2A> est appelée lorsqu’il n’y a aucun thread n’attend que <xref:System.Threading.AutoResetEvent> est déjà signalé, l’appel n’a aucun effet.  
  
 Vous pouvez contrôler l’état initial d’un `AutoResetEvent` en transmettant une valeur booléenne au constructeur : `true` si l’état initial est signalé et `false` dans le cas contraire.  
  
 `AutoResetEvent` peut également être utilisé avec le `static` <xref:System.Threading.WaitHandle.WaitAll%2A> et <xref:System.Threading.WaitHandle.WaitAny%2A> méthodes.  
  
 À partir de .NET Framework version 2.0, <xref:System.Threading.AutoResetEvent> dérive la nouvelle <xref:System.Threading.EventWaitHandle> classe. Un <xref:System.Threading.AutoResetEvent> est fonctionnellement équivalent à un <xref:System.Threading.EventWaitHandle> créé avec <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Contrairement à la <xref:System.Threading.AutoResetEvent> (classe), la <xref:System.Threading.EventWaitHandle> classe fournit l’accès aux événements de synchronisation système nommé.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser <xref:System.Threading.AutoResetEvent> pour libérer un thread à la fois, en appelant le <xref:System.Threading.EventWaitHandle.Set%2A> (méthode) (sur la classe de base) chaque fois que l’utilisateur appuie sur le **entrée** clé. L’exemple démarre trois threads qui attendent un <xref:System.Threading.AutoResetEvent> qui a été créé dans l’état signalé. Le premier thread est libéré immédiatement, car le <xref:System.Threading.AutoResetEvent> est déjà dans l’état signalé. Cette opération réinitialise la <xref:System.Threading.AutoResetEvent> à l’état non signalé, pouvoir bloquer les threads suivants. Les threads bloqués ne sont pas libérées jusqu'à ce que l’utilisateur relâche les une à la fois en appuyant sur la **entrée** clé.  
  
 Une fois que les threads sont libérés à partir de la première <xref:System.Threading.AutoResetEvent>, ils sont en attente sur un autre <xref:System.Threading.AutoResetEvent> qui a été créé dans un état non signalé. Tous les trois blocs de threads, donc la <xref:System.Threading.EventWaitHandle.Set%2A> méthode doit être appelée trois fois pour libérer toutes les.  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Cette classe est thread-safe.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">Threading managé</related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Vue d’ensemble des primitives de synchronisation</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><see langword="true" /> pour définir l'état initial comme étant signalé ; <see langword="false" /> pour définir l'état initial comme étant non signalé.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.AutoResetEvent" /> avec une valeur booléenne indiquant si l'état initial doit être défini comme signalé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant utilise un <xref:System.Threading.AutoResetEvent> pour synchroniser les activités de deux threads. Le premier thread, qui est le thread d’application, exécute `Main`. Il écrit des valeurs à la ressource protégée, qui est un `static` (`Shared` en Visual Basic) champ nommé `number`. Le deuxième thread exécute la méthode statique `ThreadProc` (méthode), qui lit les valeurs écrites par `Main`.  
  
 Le `ThreadProc` méthode attend le <xref:System.Threading.AutoResetEvent>. Lorsque `Main` appelle le <xref:System.Threading.EventWaitHandle.Set%2A> méthode sur le <xref:System.Threading.AutoResetEvent>, le `ThreadProc` méthode lit une valeur. Le <xref:System.Threading.AutoResetEvent> immédiatement réinitialisé, donc la `ThreadProc` méthode à attendre.  
  
 La logique de programme garantit que le `ThreadProc` méthode lira jamais la même valeur deux fois. Il ne garantit pas que le `ThreadProc` méthode lira chaque valeur écrite par `Main`. Cette garantie nécessiterait un deuxième <xref:System.Threading.AutoResetEvent> verrou.  
  
 Après chaque opération d’écriture, `Main` génère en appelant le <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> (méthode), pour donner au deuxième thread une chance de s’exécuter. Sinon, sur un ordinateur monoprocesseur `Main` écrirait de nombreuses valeurs entre les deux opérations de lecture.  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">Threading managé</related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Vue d’ensemble des primitives de synchronisation</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="autoResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Définit l'état de l'événement comme étant non signalé, ce qui entraîne le blocage des threads.</summary>
        <returns><see langword="true" /> si l'opération aboutit ; sinon, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="autoResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Définit l'état de l'événement comme étant signalé, ce qui permet à un thread en attente au plus de continuer.</summary>
        <returns><see langword="true" /> si l'opération aboutit ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
La méthode Set libère un thread unique. S’il n’y a pas de threads en attente, le handle d’attente reste signalé jusqu'à ce qu’un thread tente d’attendre, ou jusqu'à ce que sa méthode de réinitialisation est appelée.

> [!IMPORTANT]
> Il n’existe aucune garantie que chaque appel à la méthode Set libère un thread. Si deux appels sont trop proches, afin que le deuxième appel se produit avant la libération d’un thread, un seul thread est libéré - comme si le deuxième appel n’a pas eu lieu. En outre, si la méthode Set est appelée lorsqu’il n’y a aucun thread n’attend que <xref:System.Threading.AutoResetEvent> est déjà signalé, l’appel n’a aucun effet.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>