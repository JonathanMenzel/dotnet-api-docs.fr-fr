<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7526a17165511a13b7213d3a9d257c6304cccb3b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36407150" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Avertit un thread en attente qu'un événement s'est produit. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `AutoResetEvent` permet aux threads de communiquer entre eux par la signalisation. En règle générale, vous utilisez cette classe lorsque les threads ont besoin d’un accès exclusif à une ressource.  
  
> [!IMPORTANT]
>  Ce type implémente le <xref:System.IDisposable> interface. Lorsque vous avez fini d’utiliser le type, vous devez la supprimer directement ou indirectement. Pour supprimer le type directement, vous devez appeler sa <xref:System.IDisposable.Dispose%2A> méthode dans un `try` / `catch` bloc. Pour la supprimer indirectement, utiliser une construction de langage telles que `using` (en c#) ou `Using` (en Visual Basic). Pour plus d’informations, consultez la section « Utilisant un objet qui implémente IDisposable » dans la <xref:System.IDisposable> rubrique de l’interface.  
  
 Un thread attend un signal en appelant <xref:System.Threading.WaitHandle.WaitOne%2A> sur la `AutoResetEvent`. Si le `AutoResetEvent` est dans l’état non signalé, le thread se bloque, en attente pour le thread de contrôle actuellement la ressource pour signaler que la ressource est disponible en appelant <xref:System.Threading.EventWaitHandle.Set%2A>.  
  
 Appel de `Set` signaux `AutoResetEvent` pour libérer un thread en attente. `AutoResetEvent` reste signalé jusqu'à ce qu’un seul thread en attente est libéré et retourne automatiquement à l’état non signalé. Si aucun thread n’est en attente, l’état reste indéfiniment signalé.  
  
 Si un thread appelle <xref:System.Threading.WaitHandle.WaitOne%2A> alors que le <xref:System.Threading.AutoResetEvent> est dans l’état signalé, le thread ne bloque pas. Le <xref:System.Threading.AutoResetEvent> libère immédiatement le thread et retourne à l’état non signalé.  
  
> [!IMPORTANT]
>  Il n’existe aucune garantie que chaque appel à la <xref:System.Threading.EventWaitHandle.Set%2A> libère un thread. Si deux appels sont trop proches, afin que le deuxième appel se produit avant qu’un thread a été publié, un seul thread est libéré. Il s’agit comme si le deuxième appel n’est pas possible. En outre, si <xref:System.Threading.EventWaitHandle.Set%2A> est appelée lorsqu’il n’y a aucune threads en attente et le <xref:System.Threading.AutoResetEvent> est déjà signalé, l’appel n’a aucun effet.  
  
 Vous pouvez contrôler l’état initial d’un `AutoResetEvent` en passant une valeur booléenne au constructeur : `true` si l’état initial est signalé et `false` dans le cas contraire.  
  
 `AutoResetEvent` peut également être utilisé avec le `static` <xref:System.Threading.WaitHandle.WaitAll%2A> et <xref:System.Threading.WaitHandle.WaitAny%2A> méthodes.  
  
 Pour plus d’informations sur les mécanismes de synchronisation de threads, consultez [AutoResetEvent](~/docs/standard/threading/autoresetevent.md) dans la documentation conceptuelle.  
  
 À partir de .NET Framework version 2.0, <xref:System.Threading.AutoResetEvent> dérive de la nouvelle <xref:System.Threading.EventWaitHandle> classe. Un <xref:System.Threading.AutoResetEvent> est fonctionnellement équivalent à un <xref:System.Threading.EventWaitHandle> créé avec <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Contrairement à la <xref:System.Threading.AutoResetEvent> (classe), la <xref:System.Threading.EventWaitHandle> classe fournit l’accès aux événements de synchronisation système nommé.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser <xref:System.Threading.AutoResetEvent> libérer un thread à la fois, en appelant le <xref:System.Threading.EventWaitHandle.Set%2A> (méthode) (sur la classe de base) chaque fois que l’utilisateur appuie sur le **entrée** clé. L’exemple démarre trois threads, qui attendent un <xref:System.Threading.AutoResetEvent> qui a été créé dans l’état signalé. Le premier thread est libéré immédiatement, car le <xref:System.Threading.AutoResetEvent> est déjà dans l’état signalé. Dans ce cas, le <xref:System.Threading.AutoResetEvent> à l’état non signalé, permettant de bloquer les threads suivants. Threads bloqués ne sont pas libérées tant que l’utilisateur relâche les une à la fois en appuyant sur la **entrée** clé.  
  
 Une fois que les threads sont libérés à partir de la première <xref:System.Threading.AutoResetEvent>, ils sont en attente sur un autre <xref:System.Threading.AutoResetEvent> qui a été créé dans l’état non signalé. Tous les trois blocs de threads, donc la <xref:System.Threading.EventWaitHandle.Set%2A> méthode doit être appelée trois fois pour les libérer tous.  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Cette classe est thread-safe.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <see langword="true" /> pour définir l'état initial comme étant signalé ; <see langword="false" /> pour définir l'état initial comme étant non signalé.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.AutoResetEvent" /> avec une valeur booléenne indiquant si l'état initial doit être défini comme signalé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant utilise une <xref:System.Threading.AutoResetEvent> pour synchroniser les activités de deux threads. Le premier thread, qui est le thread d’application, exécute `Main`. Il écrit des valeurs à la ressource protégée, qui est un `static` (`Shared` en Visual Basic) champ nommé `number`. Le deuxième thread exécute la méthode statique `ThreadProc` méthode, qui lit les valeurs écrites par `Main`.  
  
 Le `ThreadProc` méthode attend le <xref:System.Threading.AutoResetEvent>. Lorsque `Main` appelle la <xref:System.Threading.EventWaitHandle.Set%2A> méthode sur le <xref:System.Threading.AutoResetEvent>, le `ThreadProc` méthode lit une valeur. Le <xref:System.Threading.AutoResetEvent> immédiatement réinitialisé, donc la `ThreadProc` méthode à attendre.  
  
 La logique de programme garantit que la `ThreadProc` méthode lira jamais la même valeur deux fois. Il ne garantit pas que le `ThreadProc` méthode lira chaque valeur écrite par `Main`. Cette garantie nécessiterait un deuxième <xref:System.Threading.AutoResetEvent> verrou.  
  
 Après chaque opération d’écriture, `Main` génère en appelant le <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> (méthode), pour donner au deuxième thread une chance de s’exécuter. Sinon, sur un ordinateur à processeur unique `Main` écririez de valeurs entre les deux opérations de lecture.  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
  </Members>
</Type>