<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SemaphoreSlim.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b857fe3" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2eccf4de-4b1c-4706-8cb3-f46682ccfb72268af4ec18ef9780af942f18f0369318755e0b83.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">268af4ec18ef9780af942f18f0369318755e0b83</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b15b8cf0f6dbc1504057c88969d9ef4b790891fe</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/11/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Represents a lightweight alternative to <ph id="ph1">&lt;see cref="T:System.Threading.Semaphore" /&gt;</ph> that limits the number of threads that can access a resource or pool of resources concurrently.</source>
          <target state="translated">Représente une alternative légère à <ph id="ph1">&lt;see cref="T:System.Threading.Semaphore" /&gt;</ph> qui limite le nombre de threads pouvant accéder simultanément à une ressource ou à un pool de ressources.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>Semaphores are of two types: local semaphores and named system semaphores.</source>
          <target state="translated">Les sémaphores sont de deux types : local et les sémaphores de système nommé.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The former is local to an app.</source>
          <target state="translated">Le premier est une application local.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The latter is visible throughout the operating system and is suitable for inter-process synchronization.</source>
          <target state="translated">Cette dernière est visible dans le système d’exploitation et est appropriée pour la synchronisation entre processus.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> is a lightweight alternative to the <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> class that doesn't use Windows kernel semaphores.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> est une alternative légère à la <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> classe qui n’utilise pas de sémaphores de noyau Windows.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> class doesn't support named system semaphores.</source>
          <target state="translated">Contrairement à la <ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph> (classe), la <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> classe ne prend pas en charge les sémaphores système nommés.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>You can use it as a local semaphore only.</source>
          <target state="translated">Vous pouvez l’utiliser en tant qu’un sémaphore local uniquement.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> class is the recommended semaphore for synchronization within a single app.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> classe est le sémaphore recommandé pour la synchronisation dans une application unique.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>A lightweight semaphore controls access to a pool of resources that is local to your application.</source>
          <target state="translated">Un sémaphore léger contrôle l’accès à un pool de ressources qui est local pour votre application.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>When you instantiate a semaphore, you can specify the maximum number of threads that can enter the semaphore concurrently.</source>
          <target state="translated">Lorsque vous instanciez un sémaphore, vous pouvez spécifier le nombre maximal de threads qui peuvent accéder au sémaphore simultanément.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>You also specify the initial number of threads that can enter the semaphore concurrently.</source>
          <target state="translated">Vous spécifiez également le nombre initial de threads qui peuvent accéder au sémaphore simultanément.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>This defines the semaphore's count.</source>
          <target state="translated">Définit le compteur du sémaphore.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The count is decremented each time a thread enters the semaphore, and incremented each time a thread releases the semaphore.</source>
          <target state="translated">Le nombre est décrémenté à chaque fois qu’un thread entre dans le sémaphore et incrémenté chaque fois qu’un thread libère le sémaphore.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>To enter the semaphore, a thread calls one of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> overloads.</source>
          <target state="translated">Pour entrer dans le sémaphore, un thread appelle l’une de le <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> surcharges.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>To release the semaphore, it calls one of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> overloads.</source>
          <target state="translated">Pour libérer le sémaphore, il appelle l’une de le <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> surcharges.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>When the count reaches zero, subsequent calls to one of the <ph id="ph1">`Wait`</ph> methods block until other threads release the semaphore.</source>
          <target state="translated">Lorsque le décompte atteint zéro, les appels suivants à un de le <ph id="ph1">`Wait`</ph> méthodes bloquent jusqu'à ce que les autres threads libèrent le sémaphore.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>If multiple threads are blocked, there is no guaranteed order, such as FIFO or LIFO, that controls when threads enter the semaphore.</source>
          <target state="translated">Si plusieurs threads sont bloqués, il n’existe aucun ordre garanti, telles que FIFO ou LIFO, qui contrôle lorsque threads entrent dans le sémaphore.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The basic structure for code that uses a semaphore to protect resources is:</source>
          <target state="translated">La structure de base pour le code qui utilise un sémaphore pour protéger des ressources est la suivante :</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.</source>
          <target state="translated">Lorsque tous les threads ont libéré le sémaphore, le nombre est à la valeur maximale spécifié lors de la création du sémaphore.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The semaphore's count is available from the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property.</source>
          <target state="translated">Le compteur du sémaphore est disponible à partir de la <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> class doesn't enforce thread or task identity on calls to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> methods.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> classe n’applique l’identité de thread ou une tâche sur les appels à la <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph>, et <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> méthodes.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>In addition, if the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29&gt;</ph> constructor is used to instantiate the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> object, the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property can increase beyond the value set by the constructor.</source>
          <target state="translated">En outre, si le <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29&gt;</ph> constructeur est utilisé pour instancier le <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> objet, le <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriété peut augmenter au-delà de la valeur définie par le constructeur.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>It is the programmer's responsibility to ensure that calls to <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> methods are appropriately paired with calls to <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> methods.</source>
          <target state="translated">Il est la responsabilité du programmeur de garantir que les appels à <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> méthodes sont associés de façon appropriée avec des appels à <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> méthodes.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The following example creates a semaphore with a maximum count of three threads and an initial count of zero threads.</source>
          <target state="translated">L’exemple suivant crée un sémaphore avec un nombre maximal de threads de trois et un nombre initial de threads de zéro.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The example starts five tasks, all of which block waiting for the semaphore.</source>
          <target state="translated">L’exemple démarre cinq tâches, de bloquer et attendre le sémaphore.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The main thread calls the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29&gt;</ph> overload to increase the semaphore count to its maximum, which allows three tasks to enter the semaphore.</source>
          <target state="translated">Le thread principal appelle la <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29&gt;</ph> surcharge pour augmenter le compteur du sémaphore à sa valeur maximale, ce qui permet d’entrer dans le sémaphore de trois tâches.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>Each time the semaphore is released, the previous semaphore count is displayed.</source>
          <target state="translated">Chaque fois que le sémaphore est libéré, le compteur du sémaphore précédent s’affiche.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>Console messages track semaphore use.</source>
          <target state="translated">Console messages suivre l’utilisation sémaphore.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>The simulated work interval is increased slightly for each thread to make the output easier to read.</source>
          <target state="translated">L’intervalle de travail simulé augmente légèrement à chaque thread pour faciliter la lecture de la sortie.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SemaphoreSlim">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads, with the exception of <ph id="ph2">&lt;see cref="M:System.Threading.SemaphoreSlim.Dispose" /&gt;</ph>, which must be used only when all other operations on the <ph id="ph3">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> have completed.</source>
          <target state="translated">Tous les membres publics et protégés de <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> sont thread-safe et peuvent être utilisés simultanément à partir de plusieurs threads, à l’exception de <ph id="ph2">&lt;see cref="M:System.Threading.SemaphoreSlim.Dispose" /&gt;</ph>, lequel doit être utilisé uniquement lorsque toutes les autres opérations sur le <ph id="ph3">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> s’est terminé.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>The initial number of requests for the semaphore that can be granted concurrently.</source>
          <target state="translated">Nombre initial de demandes pour le sémaphore qui peuvent être accordées simultanément.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> class, specifying the initial number of requests that can be granted concurrently.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, en spécifiant le nombre initial de demandes qui peuvent être accordées simultanément.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>The <ph id="ph1">`initialCount`</ph> parameter defines the number of concurrent requests to enter the semaphore that can be granted.</source>
          <target state="translated">Le <ph id="ph1">`initialCount`</ph> paramètre définit le nombre de demandes simultanées à entrer dans le sémaphore qui peut être accordé.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>However, it doesn't define the maximum number of requests that can be granted concurrently.</source>
          <target state="translated">Toutefois, il ne définit pas le nombre maximal de demandes qui peuvent être accordées simultanément.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>A   <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> object instantiated by calling this constructor doesn't throw a <ph id="ph2">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph> exception if a call to the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> method increases the value of the <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property beyond <ph id="ph5">`initialCount`</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> objet instancié par l’appel de ce constructeur ne lève pas d’un <ph id="ph2">&lt;xref:System.Threading.SemaphoreFullException&gt;</ph> exception si un appel à la <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> méthode augmente la valeur de la <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriété au-delà de <ph id="ph5">`initialCount`</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>This occurs if there are more calls to <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> methods than there are to <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> methods.</source>
          <target state="translated">Cela se produit s’il existe plusieurs appels de <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> à cet emplacement, les méthodes doivent <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> ou <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> méthodes.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source>To set the maximum number of concurrent requests to enter the semaphore that can be granted, call the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29&gt;</ph> constructor.</source>
          <target state="translated">Pour définir le nombre maximal de demandes simultanées à entrer dans le sémaphore qui peut être accordé, appelez le <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29&gt;</ph> constructeur.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="initialCount" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="initialCount" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
          <source>The initial number of requests for the semaphore that can be granted concurrently.</source>
          <target state="translated">Nombre initial de demandes pour le sémaphore qui peuvent être accordées simultanément.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
          <source>The maximum number of requests for the semaphore that can be granted concurrently.</source>
          <target state="translated">Nombre maximal de demandes pour le sémaphore qui peuvent être accordées simultanément.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> class, specifying the initial and maximum number of requests that can be granted concurrently.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, en spécifiant le nombre initial et le nombre maximal de demandes qui peuvent être accordées simultanément.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="initialCount" /&gt;</ph> is less than 0, or <ph id="ph2">&lt;paramref name="initialCount" /&gt;</ph> is greater than <ph id="ph3">&lt;paramref name="maxCount" /&gt;</ph>, or <ph id="ph4">&lt;paramref name="maxCount" /&gt;</ph> is equal to or less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="initialCount" /&gt;</ph> est inférieur à 0 ou <ph id="ph2">&lt;paramref name="initialCount" /&gt;</ph> est supérieur à <ph id="ph3">&lt;paramref name="maxCount" /&gt;</ph> ou <ph id="ph4">&lt;paramref name="maxCount" /&gt;</ph> est inférieur ou égal à 0.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that can be used to wait on the semaphore.</source>
          <target state="translated">Retourne un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> qui peut être utilisé pour l'attente sur le sémaphore.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that can be used to wait on the semaphore.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> qui peut être utilisé pour l'attente sur le sémaphore.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>Use this property only when you must wait on a SemaphoreSlim together with other kernel-based synchronization objects with the same wait handle.</source>
          <target state="translated">Utilisez cette propriété uniquement lorsque vous devez attendre un SemaphoreSlim ainsi que d’autres objets de synchronisation basé sur le noyau avec le même handle d’attente.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>A successful wait on the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A&gt;</ph> does not imply a successful wait on the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> itself, nor does it decrement the semaphore's count.</source>
          <target state="translated">Une attente réussie sur le <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A&gt;</ph> n’implique pas une attente réussie sur le <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> elle-même, ni décrémente le compteur du sémaphore.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>After the available wait handle is signaled, you should wait on the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> specifically.</source>
          <target state="translated">Une fois que le handle d’attente disponible est signalé, vous devez attendre la <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> en particulier.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> a été supprimé.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Threading.SemaphoreSlim.CurrentCount">
          <source>Gets the number of remaining threads that can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> object.</source>
          <target state="translated">Obtient le nombre de threads restants qui peuvent accéder à l'objet <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.CurrentCount">
          <source>The number of remaining threads that can enter the semaphore.</source>
          <target state="translated">Nombre de threads restants qui peuvent accéder au sémaphore.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.CurrentCount">
          <source>The initial value of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property is set by the call to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">La valeur initiale de la <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriété est définie par l’appel à la <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.%23ctor%2A&gt;</ph> constructeur de classe.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SemaphoreSlim.CurrentCount">
          <source>It is decremented by each call to the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> method, and incremented by each call to the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> method.</source>
          <target state="translated">Il est décrémenté par chaque appel à la <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> (méthode) et incrémentée à chaque appel à la <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Release%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Releases resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> class.</source>
          <target state="translated">Libère les ressources utilisées par l'instance actuelle de la classe <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> class.</source>
          <target state="translated">Libère toutes les ressources utilisées par l'instance actuelle de la classe <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>.</source>
          <target state="translated">Appelez la méthode <ph id="ph1">`Dispose`</ph> une fois que vous avez terminé d'utiliser <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> in an unusable state.</source>
          <target state="translated">La méthode <ph id="ph1">`Dispose`</ph> rend le <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> inutilisable.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> was occupying.</source>
          <target state="translated">Après avoir appelé <ph id="ph1">`Dispose`</ph>, vous devez libérer toutes les références à la <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> pour que le garbage collector puisse récupérer la mémoire qui le <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> occupée.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>de nettoyage des ressources non managées<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> et <bpt id="p2">[</bpt>implémentant une méthode de suppression<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>.</source>
          <target state="translated">Appelez toujours <ph id="ph1">`Dispose`</ph> avant de libérer votre dernière référence à <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">Sinon, les ressources utilisées ne seront pas libérées tant que le garbage collector n'aura pas appelé la méthode <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph> de l'objet <ph id="ph2">`Finalize`</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour libérer les ressources managées et non managées ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> pour ne libérer que les ressources non managées.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, and optionally releases the managed resources.</source>
          <target state="translated">Libère les ressources non managées utilisées par le <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, et libère éventuellement les ressources managées.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)">
          <source>Unlike most of the members of <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Dispose%2A&gt;</ph> is not thread-safe and may not be used concurrently with other members of this instance.</source>
          <target state="translated">Contrairement à la plupart des membres de <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Dispose%2A&gt;</ph> n’est pas thread-safe et ne peut pas être utilisé en même temps que les autres membres de cette instance.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Releases the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> object.</source>
          <target state="translated">Libère l'objet <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>Releases the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> object once.</source>
          <target state="translated">Libère l'objet <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> une seule fois.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>The previous count of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated">Décompte précédent de <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>A call to the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release&gt;</ph> method increments the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">Un appel à la <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release&gt;</ph> méthode incrémente le <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriété d’une unité.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property is zero before this method is called, the method also allows one thread or task blocked by a call to the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> method to enter the semaphore.</source>
          <target state="translated">Si la valeur de la <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriété est égale à zéro avant que cette méthode est appelée, la méthode permet également d’un thread ou une tâche bloquée par un appel à la <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> ou <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> méthode à entrer dans le sémaphore.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>The current instance has already been disposed.</source>
          <target state="translated">L’instance actuelle a déjà été supprimée.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> has already reached its maximum size.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> a déjà atteint sa taille maximale.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>The number of times to exit the semaphore.</source>
          <target state="translated">Nombre de fois où quitter le sémaphore.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>Releases the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> object a specified number of times.</source>
          <target state="translated">Libère l'objet <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> un nombre de fois déterminé.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>The previous count of the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated">Décompte précédent de <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>A call to the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29&gt;</ph> method increments the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by <ph id="ph3">`releaseCount`</ph>.</source>
          <target state="translated">Un appel à la <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29&gt;</ph> méthode incrémente le <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriété par <ph id="ph3">`releaseCount`</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property is zero before this method is called, the method also allows <ph id="ph2">`releaseCount`</ph> threads or tasks blocked by a call to the <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> method to enter the semaphore.</source>
          <target state="translated">Si la valeur de la <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriété est zéro avant que cette méthode est appelée, la méthode autorise également <ph id="ph2">`releaseCount`</ph> threads ou tâches bloquées par un appel à la <ph id="ph3">&lt;xref:System.Threading.SemaphoreSlim.Wait%2A&gt;</ph> ou <ph id="ph4">&lt;xref:System.Threading.SemaphoreSlim.WaitAsync%2A&gt;</ph> méthode à entrer dans le sémaphore.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">L’instance actuelle a déjà été supprimée.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="releaseCount" /&gt;</ph> is less than 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="releaseCount" /&gt;</ph> est inférieur à 1.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> has already reached its maximum size.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> a déjà atteint sa taille maximale.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated">Bloque le thread actuel jusqu'à ce qu'il puisse accéder à <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated">Bloque le thread actuel jusqu'à ce qu'il puisse accéder à <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">Si un thread ou une tâche est en mesure d’entrer dans le sémaphore, il décrémente le <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriété d’une unité.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait">
          <source>The current instance has already been disposed.</source>
          <target state="translated">L’instance actuelle a déjà été supprimée.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>The number of milliseconds to wait, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</source>
          <target state="translated">Nombre de millisecondes à attendre, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) pour attendre indéfiniment, ou zéro pour tester l’état du handle d’attente et retourner immédiatement.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a 32-bit signed integer that specifies the timeout.</source>
          <target state="translated">Bloque le thread actuel jusqu'à ce qu'il puisse accéder à <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, à l'aide d'un entier signé 32 bits qui spécifie le délai d'attente.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le thread actuel est entré avec succès dans le <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">Si le délai d’expiration est définie sur-1 milliseconde, la méthode attend indéfiniment.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">Si le délai d’expiration est définie sur zéro milliseconde, la méthode ne bloque pas.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">Il teste l’état du handle d’attente et retourne immédiatement.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">Si un thread ou une tâche est en mesure d’entrer dans le sémaphore, il décrémente le <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriété d’une unité.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>If a thread or task is blocked when calling <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29&gt;</ph> and the timeout interval specified by <ph id="ph2">`millisecondsTimeout`</ph> expires:</source>
          <target state="translated">Si un thread ou une tâche est bloquée lors de l’appel <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29&gt;</ph> et l’intervalle de délai d’attente spécifié par <ph id="ph2">`millisecondsTimeout`</ph> arrive à expiration :</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>The thread or task doesn't enter the semaphore.</source>
          <target state="translated">Le thread ou la tâche n’entre pas le sémaphore.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriété n’est pas décrémentée.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> est un nombre négatif autre que -1, qui représente un délai d’expiration infini - ou - le délai d’attente est supérieur à <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> token to observe.</source>
          <target state="translated">Jeton <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> à observer.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Bloque le thread actuel jusqu'à ce qu'il puisse accéder à <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, tout en observant un <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">Si un thread ou une tâche est en mesure d’entrer dans le sémaphore, il décrémente le <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriété d’une unité.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, the thread or task doesn't enter the semaphore, and the <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
          <target state="translated">Si <ph id="ph1">`cancellationToken`</ph> est annulé, le thread ou la tâche n’entre pas le sémaphore et le <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriété n’est pas décrémentée.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>Instead, the method throws an <ph id="ph1">&lt;xref:System.OperationCanceledException&gt;</ph> exception.</source>
          <target state="translated">Au lieu de cela, la méthode lève un <ph id="ph1">&lt;xref:System.OperationCanceledException&gt;</ph> exception.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> a été annulé.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">L’instance actuelle a déjà été supprimée.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> qui a créé <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> a déjà été supprimé.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely, or a <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents 0 milliseconds to test the wait handle and return immediately.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> qui représente le nombre de millisecondes à attendre, <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> qui représente -1 millisecondes pour attendre indéfiniment ou <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> qui représente 0 milliseconde pour tester le handle d’attente et retourner immédiatement.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to specify the timeout.</source>
          <target state="translated">Bloque le thread actuel jusqu'à ce qu'il puisse accéder à <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, à l'aide d'un <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> pour spécifier le délai d'attente.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le thread actuel est entré avec succès dans le <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">Si le délai d’expiration est définie sur-1 milliseconde, la méthode attend indéfiniment.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">Si le délai d’expiration est définie sur zéro milliseconde, la méthode ne bloque pas.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">Il teste l’état du handle d’attente et retourne immédiatement.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">Si un thread ou une tâche est en mesure d’entrer dans le sémaphore, il décrémente le <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriété d’une unité.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>If a thread or task is blocked when calling <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29&gt;</ph> and the timeout interval specified by <ph id="ph2">`millisecondsTimeout`</ph> expires:</source>
          <target state="translated">Si un thread ou une tâche est bloquée lors de l’appel <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29&gt;</ph> et l’intervalle de délai d’attente spécifié par <ph id="ph2">`millisecondsTimeout`</ph> arrive à expiration :</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>The thread or task doesn't enter the semaphore.</source>
          <target state="translated">Le thread ou la tâche n’entre pas le sémaphore.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriété n’est pas décrémentée.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> est un nombre négatif autre que -1, qui représente un délai d’expiration infini - ou - le délai d’attente est supérieur à <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
          <source>The semaphoreSlim instance has been disposed <ph id="ph1">&lt;paramref name="." /&gt;</ph></source>
          <target state="translated">L’instance de semaphoreSlim a été supprimée <ph id="ph1">&lt;paramref name="." /&gt;</ph></target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The number of milliseconds to wait, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</source>
          <target state="translated">Nombre de millisecondes à attendre, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) pour attendre indéfiniment, ou zéro pour tester l’état du handle d’attente et retourner immédiatement.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> à observer.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a 32-bit signed integer that specifies the timeout, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Bloque le thread actuel jusqu'à ce qu'il puisse accéder à <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, à l'aide d'un entier signé 32 bits qui spécifie le délai d'attente, tout en observant un <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le thread actuel est entré avec succès dans le <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">Si le délai d’expiration est définie sur-1 milliseconde, la méthode attend indéfiniment.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">Si le délai d’expiration est définie sur zéro milliseconde, la méthode ne bloque pas.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">Il teste l’état du handle d’attente et retourne immédiatement.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">Si un thread ou une tâche est en mesure d’entrer dans le sémaphore, il décrémente le <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriété d’une unité.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, or if a thread or task is blocked when calling <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph> and the timeout interval specified by <ph id="ph3">`millisecondsTimeout`</ph> expires:</source>
          <target state="translated">Si <ph id="ph1">`cancellationToken`</ph> est annulée, ou si un thread ou une tâche est bloquée lors de l’appel <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph> et l’intervalle de délai d’attente spécifié par <ph id="ph3">`millisecondsTimeout`</ph> arrive à expiration :</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The thread or task doesn't enter the semaphore.</source>
          <target state="translated">Le thread ou la tâche n’entre pas le sémaphore.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriété n’est pas décrémentée.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, the method throws an   <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> exception.</source>
          <target state="translated">Si <ph id="ph1">`cancellationToken`</ph> est annulé, la méthode lève un <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> exception.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> a été annulé.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> est un nombre négatif autre que -1, qui représente un délai d’expiration infini - ou - le délai d’attente est supérieur à <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> instance has been disposed, or the <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph3">&lt;paramref name="cancellationToken" /&gt;</ph> has been disposed.</source>
          <target state="translated">L’instance <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> a été supprimé ou le <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> qui a créé le jeton <ph id="ph3">&lt;paramref name="cancellationToken" /&gt;</ph> a été supprimé.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely, or a <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents 0 milliseconds to test the wait handle and return immediately.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> qui représente le nombre de millisecondes à attendre, <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> qui représente -1 millisecondes pour attendre indéfiniment ou <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> qui représente 0 milliseconde pour tester le handle d’attente et retourner immédiatement.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> à observer.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>Blocks the current thread until it can enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies the timeout, while observing a <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Bloque le thread actuel jusqu'à ce qu'il puisse accéder à <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, à l'aide d'un <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> qui spécifie le délai d'attente, tout en observant un <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le thread actuel est entré avec succès dans le <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph> ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">Si le délai d’expiration est définie sur-1 milliseconde, la méthode attend indéfiniment.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">Si le délai d’expiration est définie sur zéro milliseconde, la méthode ne bloque pas.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">Il teste l’état du handle d’attente et retourne immédiatement.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If a thread or task is able to enter the semaphore, it decrements the <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property by one.</source>
          <target state="translated">Si un thread ou une tâche est en mesure d’entrer dans le sémaphore, il décrémente le <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriété d’une unité.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, or if a thread or task is blocked when calling <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29&gt;</ph> and the timeout interval specified by <ph id="ph3">`millisecondsTimeout`</ph> expires:</source>
          <target state="translated">Si <ph id="ph1">`cancellationToken`</ph> est annulée, ou si un thread ou une tâche est bloquée lors de l’appel <ph id="ph2">&lt;xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29&gt;</ph> et l’intervalle de délai d’attente spécifié par <ph id="ph3">`millisecondsTimeout`</ph> arrive à expiration :</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The thread or task doesn't enter the semaphore.</source>
          <target state="translated">Le thread ou la tâche n’entre pas le sémaphore.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> property isn't decremented.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim.CurrentCount%2A&gt;</ph> propriété n’est pas décrémentée.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If <ph id="ph1">`cancellationToken`</ph> is cancelled, the method throws an <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> exception.</source>
          <target state="translated">Si <ph id="ph1">`cancellationToken`</ph> est annulé, la méthode lève un <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph> exception.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> a été annulé.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> est un nombre négatif autre que -1, qui représente un délai d’expiration infini - ou - le délai d’attente est supérieur à <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The semaphoreSlim instance has been disposed <ph id="ph1">&lt;paramref name="." /&gt;</ph><ph id="ph2">&lt;paramref name="-or-" /&gt;</ph></source>
          <target state="translated">L’instance de semaphoreSlim a été supprimée <ph id="ph1">&lt;paramref name="." /&gt;</ph><ph id="ph2">&lt;paramref name="-or-" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> qui a créé <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> a déjà été supprimé.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="T:System.Threading.SemaphoreSlim">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated">Attend de façon asynchrone avant d'accéder à <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</source>
          <target state="translated">Attend de façon asynchrone avant d'accéder à <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync">
          <source>A task that will complete when the semaphore has been entered.</source>
          <target state="translated">Tâche qui se termine après l’accès au sémaphore.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>The number of milliseconds to wait, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</source>
          <target state="translated">Nombre de millisecondes à attendre, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) pour attendre indéfiniment, ou zéro pour tester l’état du handle d’attente et retourner immédiatement.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a 32-bit signed integer to measure the time interval.</source>
          <target state="translated">Attend de façon asynchrone d'accéder à <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, à l'aide d'un entier signé 32 bits pour mesurer l'intervalle de temps.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>A task that will complete with a result of <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, otherwise with a result of <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Tâche qui se termine avec une valeur <ph id="ph1">&lt;see langword="true" /&gt;</ph> si le thread actuel accède correctement à <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, sinon la valeur <ph id="ph3">&lt;see langword="false" /&gt;</ph> est retournée.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">Si le délai d’expiration est définie sur-1 milliseconde, la méthode attend indéfiniment.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">Si le délai d’expiration est définie sur zéro milliseconde, la méthode ne bloque pas.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">Il teste l’état du handle d’attente et retourne immédiatement.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">L’instance actuelle a déjà été supprimée.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> est un nombre négatif autre que -1, qui représente un délai d’expiration infini - ou - le délai d’attente est supérieur à <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> token to observe.</source>
          <target state="translated">Jeton <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> à observer.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Attend de façon asynchrone d'accéder à <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, tout en observant un <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
          <source>A task that will complete when the semaphore has been entered.</source>
          <target state="translated">Tâche qui se termine après l’accès au sémaphore.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">L’instance actuelle a déjà été supprimée.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> a été annulé.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely, or a <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents 0 milliseconds to test the wait handle and return immediately.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> qui représente le nombre de millisecondes à attendre, <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> qui représente -1 millisecondes pour attendre indéfiniment ou <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> qui représente 0 milliseconde pour tester le handle d’attente et retourner immédiatement.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to measure the time interval.</source>
          <target state="translated">Attend de façon asynchrone d'accéder à <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, à l'aide d'un <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> pour mesurer l'intervalle de temps.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>A task that will complete with a result of <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, otherwise with a result of <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Tâche qui se termine avec une valeur <ph id="ph1">&lt;see langword="true" /&gt;</ph> si le thread actuel accède correctement à <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, sinon la valeur <ph id="ph3">&lt;see langword="false" /&gt;</ph> est retournée.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">Si le délai d’expiration est définie sur-1 milliseconde, la méthode attend indéfiniment.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">Si le délai d’expiration est définie sur zéro milliseconde, la méthode ne bloque pas.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">Il teste l’état du handle d’attente et retourne immédiatement.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">L’instance actuelle a déjà été supprimée.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> est un nombre négatif autre que -1, qui représente un délai d’expiration infini - ou - le délai d’attente est supérieur à <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>The number of milliseconds to wait, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</source>
          <target state="translated">Nombre de millisecondes à attendre, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) pour attendre indéfiniment, ou zéro pour tester l’état du handle d’attente et retourner immédiatement.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> à observer.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a 32-bit signed integer to measure the time interval, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Attend de façon asynchrone d'accéder à <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, à l'aide d'un entier signé 32 bits pour mesurer l'intervalle de temps, tout en observant un <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>A task that will complete with a result of <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, otherwise with a result of <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Tâche qui se termine avec une valeur <ph id="ph1">&lt;see langword="true" /&gt;</ph> si le thread actuel accède correctement à <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, sinon la valeur <ph id="ph3">&lt;see langword="false" /&gt;</ph> est retournée.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">Si le délai d’expiration est définie sur-1 milliseconde, la méthode attend indéfiniment.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">Si le délai d’expiration est définie sur zéro milliseconde, la méthode ne bloque pas.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">Il teste l’état du handle d’attente et retourne immédiatement.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> est un nombre autre que -1, qui représente un délai d’expiration infini - ou - le délai d’attente est supérieur à <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">L’instance actuelle a déjà été supprimée.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> a été annulé.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely, or a <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents 0 milliseconds to test the wait handle and return immediately.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> qui représente le nombre de millisecondes à attendre, <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> qui représente -1 millisecondes pour attendre indéfiniment ou <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> qui représente 0 milliseconde pour tester le handle d’attente et retourner immédiatement.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> token to observe.</source>
          <target state="translated">Jeton <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> à observer.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>Asynchronously waits to enter the <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to measure the time interval, while observing a <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Attend de façon asynchrone d'accéder à <ph id="ph1">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, à l'aide d'un <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> pour mesurer l'intervalle de temps, tout en observant un <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>A task that will complete with a result of <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread successfully entered the <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, otherwise with a result of <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Tâche qui se termine avec une valeur <ph id="ph1">&lt;see langword="true" /&gt;</ph> si le thread actuel accède correctement à <ph id="ph2">&lt;see cref="T:System.Threading.SemaphoreSlim" /&gt;</ph>, sinon la valeur <ph id="ph3">&lt;see langword="false" /&gt;</ph> est retournée.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If the timeout is set to -1 milliseconds, the method waits indefinitely.</source>
          <target state="translated">Si le délai d’expiration est définie sur-1 milliseconde, la méthode attend indéfiniment.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>If the timeout is set to zero milliseconds, the method doesn't block.</source>
          <target state="translated">Si le délai d’expiration est définie sur zéro milliseconde, la méthode ne bloque pas.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">Il teste l’état du handle d’attente et retourne immédiatement.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> est un nombre négatif autre que -1, qui représente un délai d’expiration infini - ou - le délai d’attente est supérieur à <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> a été annulé.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>