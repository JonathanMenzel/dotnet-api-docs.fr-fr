<Type Name="SemaphoreSlim" FullName="System.Threading.SemaphoreSlim">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dee33601bd502ad844bb3b40648b3e6cd325dcfb" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SemaphoreSlim : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemaphoreSlim extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SemaphoreSlim" />
  <TypeSignature Language="VB.NET" Value="Public Class SemaphoreSlim&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemaphoreSlim : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Current Count = {m_currentCount}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="887b1-101">Représente une alternative légère à <see cref="T:System.Threading.Semaphore" /> qui limite le nombre de threads pouvant accéder simultanément à une ressource ou à un pool de ressources.</span>
      <span class="sxs-lookup">
        <span data-stu-id="887b1-101">Represents a lightweight alternative to <see cref="T:System.Threading.Semaphore" /> that limits the number of threads that can access a resource or pool of resources concurrently.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="887b1-102">Les sémaphores sont de deux types : local et les sémaphores de système nommé.</span><span class="sxs-lookup"><span data-stu-id="887b1-102">Semaphores are of two types: local semaphores and named system semaphores.</span></span> <span data-ttu-id="887b1-103">Le premier est une application local.</span><span class="sxs-lookup"><span data-stu-id="887b1-103">The former is local to an app.</span></span> <span data-ttu-id="887b1-104">Cette dernière est visible dans le système d’exploitation et est appropriée pour la synchronisation entre processus.</span><span class="sxs-lookup"><span data-stu-id="887b1-104">The latter is visible throughout the operating system and is suitable for inter-process synchronization.</span></span> <span data-ttu-id="887b1-105">Le <xref:System.Threading.SemaphoreSlim> est une alternative légère à la <xref:System.Threading.Semaphore> classe qui n’utilise pas de sémaphores de noyau Windows.</span><span class="sxs-lookup"><span data-stu-id="887b1-105">The <xref:System.Threading.SemaphoreSlim> is a lightweight alternative to the <xref:System.Threading.Semaphore> class that doesn't use Windows kernel semaphores.</span></span> <span data-ttu-id="887b1-106">Contrairement à la <xref:System.Threading.Semaphore> (classe), la <xref:System.Threading.SemaphoreSlim> classe ne prend pas en charge les sémaphores système nommés.</span><span class="sxs-lookup"><span data-stu-id="887b1-106">Unlike the <xref:System.Threading.Semaphore> class, the <xref:System.Threading.SemaphoreSlim> class doesn't support named system semaphores.</span></span> <span data-ttu-id="887b1-107">Vous pouvez l’utiliser en tant qu’un sémaphore local uniquement.</span><span class="sxs-lookup"><span data-stu-id="887b1-107">You can use it as a local semaphore only.</span></span> <span data-ttu-id="887b1-108">La <xref:System.Threading.SemaphoreSlim> classe est le sémaphore recommandé pour la synchronisation dans une application unique.</span><span class="sxs-lookup"><span data-stu-id="887b1-108">The <xref:System.Threading.SemaphoreSlim> class is the recommended semaphore for synchronization within a single app.</span></span>  
  
 <span data-ttu-id="887b1-109">Un sémaphore léger contrôle l’accès à un pool de ressources qui est local pour votre application.</span><span class="sxs-lookup"><span data-stu-id="887b1-109">A lightweight semaphore controls access to a pool of resources that is local to your application.</span></span> <span data-ttu-id="887b1-110">Lorsque vous instanciez un sémaphore, vous pouvez spécifier le nombre maximal de threads qui peuvent accéder au sémaphore simultanément.</span><span class="sxs-lookup"><span data-stu-id="887b1-110">When you instantiate a semaphore, you can specify the maximum number of threads that can enter the semaphore concurrently.</span></span> <span data-ttu-id="887b1-111">Vous spécifiez également le nombre initial de threads qui peuvent accéder au sémaphore simultanément.</span><span class="sxs-lookup"><span data-stu-id="887b1-111">You also specify the initial number of threads that can enter the semaphore concurrently.</span></span> <span data-ttu-id="887b1-112">Définit le compteur du sémaphore.</span><span class="sxs-lookup"><span data-stu-id="887b1-112">This defines the semaphore's count.</span></span>  
  
 <span data-ttu-id="887b1-113">Le nombre est décrémenté à chaque fois qu’un thread entre dans le sémaphore et incrémenté chaque fois qu’un thread libère le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="887b1-113">The count is decremented each time a thread enters the semaphore, and incremented each time a thread releases the semaphore.</span></span> <span data-ttu-id="887b1-114">Pour entrer dans le sémaphore, un thread appelle l’une de le <xref:System.Threading.SemaphoreSlim.Wait%2A> ou <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> surcharges.</span><span class="sxs-lookup"><span data-stu-id="887b1-114">To enter the semaphore, a thread calls one of the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> overloads.</span></span> <span data-ttu-id="887b1-115">Pour libérer le sémaphore, il appelle l’une de le <xref:System.Threading.SemaphoreSlim.Release%2A> surcharges.</span><span class="sxs-lookup"><span data-stu-id="887b1-115">To release the semaphore, it calls one of the <xref:System.Threading.SemaphoreSlim.Release%2A> overloads.</span></span> <span data-ttu-id="887b1-116">Lorsque le décompte atteint zéro, les appels suivants à un de le `Wait` méthodes bloquent jusqu'à ce que les autres threads libèrent le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="887b1-116">When the count reaches zero, subsequent calls to one of the `Wait` methods block until other threads release the semaphore.</span></span> <span data-ttu-id="887b1-117">Si plusieurs threads sont bloqués, il n’existe aucun ordre garanti, telles que FIFO ou LIFO, qui contrôle lorsque threads entrent dans le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="887b1-117">If multiple threads are blocked, there is no guaranteed order, such as FIFO or LIFO, that controls when threads enter the semaphore.</span></span>  
  
 <span data-ttu-id="887b1-118">La structure de base pour le code qui utilise un sémaphore pour protéger des ressources est la suivante :</span><span class="sxs-lookup"><span data-stu-id="887b1-118">The basic structure for code that uses a semaphore to protect resources is:</span></span>  
  
```  
  
' Enter semaphore by calling one of the Wait or WaitAsync methods.  
SemaphoreSlim.Wait()  
'   
' Execute code protected by the semaphore.   
'  
SemaphoreSlim.Release()  
  
```  
  
 <span data-ttu-id="887b1-119">Lorsque tous les threads ont libéré le sémaphore, le nombre est à la valeur maximale spécifié lors de la création du sémaphore.</span><span class="sxs-lookup"><span data-stu-id="887b1-119">When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.</span></span> <span data-ttu-id="887b1-120">Le compteur du sémaphore est disponible à partir de la <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="887b1-120">The semaphore's count is available from the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="887b1-121">Le <xref:System.Threading.SemaphoreSlim> classe n’applique l’identité de thread ou une tâche sur les appels à la <xref:System.Threading.SemaphoreSlim.Wait%2A>, <xref:System.Threading.SemaphoreSlim.WaitAsync%2A>, et <xref:System.Threading.SemaphoreSlim.Release%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="887b1-121">The <xref:System.Threading.SemaphoreSlim> class doesn't enforce thread or task identity on calls to the <xref:System.Threading.SemaphoreSlim.Wait%2A>, <xref:System.Threading.SemaphoreSlim.WaitAsync%2A>, and <xref:System.Threading.SemaphoreSlim.Release%2A> methods.</span></span> <span data-ttu-id="887b1-122">En outre, si le <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29> constructeur est utilisé pour instancier le <xref:System.Threading.SemaphoreSlim> objet, le <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> propriété peut augmenter au-delà de la valeur définie par le constructeur.</span><span class="sxs-lookup"><span data-stu-id="887b1-122">In addition, if the <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29> constructor is used to instantiate the <xref:System.Threading.SemaphoreSlim> object, the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property can increase beyond the value set by the constructor.</span></span> <span data-ttu-id="887b1-123">Il est la responsabilité du programmeur de garantir que les appels à <xref:System.Threading.SemaphoreSlim.Wait%2A> ou <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> méthodes sont associés de façon appropriée avec des appels à <xref:System.Threading.SemaphoreSlim.Release%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="887b1-123">It is the programmer's responsibility to ensure that calls to <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> methods are appropriately paired with calls to <xref:System.Threading.SemaphoreSlim.Release%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="887b1-124">L’exemple suivant crée un sémaphore avec un nombre maximal de threads de trois et un nombre initial de threads de zéro.</span><span class="sxs-lookup"><span data-stu-id="887b1-124">The following example creates a semaphore with a maximum count of three threads and an initial count of zero threads.</span></span> <span data-ttu-id="887b1-125">L’exemple démarre cinq tâches, de bloquer et attendre le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="887b1-125">The example starts five tasks, all of which block waiting for the semaphore.</span></span> <span data-ttu-id="887b1-126">Le thread principal appelle la <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> surcharge pour augmenter le compteur du sémaphore à sa valeur maximale, ce qui permet d’entrer dans le sémaphore de trois tâches.</span><span class="sxs-lookup"><span data-stu-id="887b1-126">The main thread calls the <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> overload to increase the semaphore count to its maximum, which allows three tasks to enter the semaphore.</span></span> <span data-ttu-id="887b1-127">Chaque fois que le sémaphore est libéré, le compteur du sémaphore précédent s’affiche.</span><span class="sxs-lookup"><span data-stu-id="887b1-127">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="887b1-128">Console messages suivre l’utilisation sémaphore.</span><span class="sxs-lookup"><span data-stu-id="887b1-128">Console messages track semaphore use.</span></span> <span data-ttu-id="887b1-129">L’intervalle de travail simulé augmente légèrement à chaque thread pour faciliter la lecture de la sortie.</span><span class="sxs-lookup"><span data-stu-id="887b1-129">The simulated work interval is increased slightly for each thread to make the output easier to read.</span></span>  
  
 [!code-csharp[System.Threading.SemaphoreSlim#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.semaphoreslim/cs/example.cs#1)]
 [!code-vb[System.Threading.SemaphoreSlim#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.semaphoreslim/vb/example.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="887b1-130">Tous les membres publics et protégés de <see cref="T:System.Threading.SemaphoreSlim" /> sont thread-safe et peuvent être utilisés simultanément à partir de plusieurs threads, à l’exception de <see cref="M:System.Threading.SemaphoreSlim.Dispose" />, lequel doit être utilisé uniquement lorsque toutes les autres opérations sur le <see cref="T:System.Threading.SemaphoreSlim" /> s’est terminé.</span>
      <span class="sxs-lookup">
        <span data-stu-id="887b1-130">All public and protected members of <see cref="T:System.Threading.SemaphoreSlim" /> are thread-safe and may be used concurrently from multiple threads, with the exception of <see cref="M:System.Threading.SemaphoreSlim.Dispose" />, which must be used only when all other operations on the <see cref="T:System.Threading.SemaphoreSlim" /> have completed.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="887b1-131">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-131">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSlim (int initialCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSlim(int initialCount);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="887b1-132">Nombre initial de demandes pour le sémaphore qui peuvent être accordées simultanément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-132">The initial number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="887b1-133">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.SemaphoreSlim" />, en spécifiant le nombre initial de demandes qui peuvent être accordées simultanément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-133">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class, specifying the initial number of requests that can be granted concurrently.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="887b1-134">Le `initialCount` paramètre définit le nombre de demandes simultanées à entrer dans le sémaphore qui peut être accordé.</span><span class="sxs-lookup"><span data-stu-id="887b1-134">The `initialCount` parameter defines the number of concurrent requests to enter the semaphore that can be granted.</span></span> <span data-ttu-id="887b1-135">Toutefois, il ne définit pas le nombre maximal de demandes qui peuvent être accordées simultanément.</span><span class="sxs-lookup"><span data-stu-id="887b1-135">However, it doesn't define the maximum number of requests that can be granted concurrently.</span></span> <span data-ttu-id="887b1-136">A <xref:System.Threading.SemaphoreSlim> objet instancié par l’appel de ce constructeur ne lève pas d’un <xref:System.Threading.SemaphoreFullException> exception si un appel à la <xref:System.Threading.SemaphoreSlim.Release%2A> méthode augmente la valeur de la <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> propriété au-delà de `initialCount`.</span><span class="sxs-lookup"><span data-stu-id="887b1-136">A   <xref:System.Threading.SemaphoreSlim> object instantiated by calling this constructor doesn't throw a <xref:System.Threading.SemaphoreFullException> exception if a call to the <xref:System.Threading.SemaphoreSlim.Release%2A> method increases the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property beyond `initialCount`.</span></span> <span data-ttu-id="887b1-137">Cela se produit s’il existe plusieurs appels de <xref:System.Threading.SemaphoreSlim.Release%2A> à cet emplacement, les méthodes doivent <xref:System.Threading.SemaphoreSlim.Wait%2A> ou <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="887b1-137">This occurs if there are more calls to <xref:System.Threading.SemaphoreSlim.Release%2A> methods than there are to <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> methods.</span></span> <span data-ttu-id="887b1-138">Pour définir le nombre maximal de demandes simultanées à entrer dans le sémaphore qui peut être accordé, appelez le <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="887b1-138">To set the maximum number of concurrent requests to enter the semaphore that can be granted, call the <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="887b1-139">
            <paramref name="initialCount" /> est inférieur à 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-139">
              <paramref name="initialCount" /> is less than 0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSlim (int initialCount, int maxCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maxCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maxCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSlim(int initialCount, int maxCount);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maxCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="887b1-140">Nombre initial de demandes pour le sémaphore qui peuvent être accordées simultanément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-140">The initial number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <param name="maxCount">
          <span data-ttu-id="887b1-141">Nombre maximal de demandes pour le sémaphore qui peuvent être accordées simultanément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-141">The maximum number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="887b1-142">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.SemaphoreSlim" />, en spécifiant le nombre initial et le nombre maximal de demandes qui peuvent être accordées simultanément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-142">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class, specifying the initial and maximum number of requests that can be granted concurrently.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="887b1-143">
            <paramref name="initialCount" /> est inférieur à 0 ou <paramref name="initialCount" /> est supérieur à <paramref name="maxCount" /> ou <paramref name="maxCount" /> est inférieur ou égal à 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-143">
              <paramref name="initialCount" /> is less than 0, or <paramref name="initialCount" /> is greater than <paramref name="maxCount" />, or <paramref name="maxCount" /> is equal to or less than 0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AvailableWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AvailableWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AvailableWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SemaphoreSlim.AvailableWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AvailableWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AvailableWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="887b1-144">Retourne un <see cref="T:System.Threading.WaitHandle" /> qui peut être utilisé pour l'attente sur le sémaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-144">Returns a <see cref="T:System.Threading.WaitHandle" /> that can be used to wait on the semaphore.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="887b1-145">
            <see cref="T:System.Threading.WaitHandle" /> qui peut être utilisé pour l'attente sur le sémaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-145">A <see cref="T:System.Threading.WaitHandle" /> that can be used to wait on the semaphore.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="887b1-146">Utilisez cette propriété uniquement lorsque vous devez attendre un SemaphoreSlim ainsi que d’autres objets de synchronisation basé sur le noyau avec le même handle d’attente.</span><span class="sxs-lookup"><span data-stu-id="887b1-146">Use this property only when you must wait on a SemaphoreSlim together with other kernel-based synchronization objects with the same wait handle.</span></span> <span data-ttu-id="887b1-147">Une attente réussie sur le <xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A> n’implique pas une attente réussie sur le <xref:System.Threading.SemaphoreSlim> elle-même, ni décrémente le compteur du sémaphore.</span><span class="sxs-lookup"><span data-stu-id="887b1-147">A successful wait on the <xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A> does not imply a successful wait on the <xref:System.Threading.SemaphoreSlim> itself, nor does it decrement the semaphore's count.</span></span> <span data-ttu-id="887b1-148">Une fois que le handle d’attente disponible est signalé, vous devez attendre la <xref:System.Threading.SemaphoreSlim> en particulier.</span><span class="sxs-lookup"><span data-stu-id="887b1-148">After the available wait handle is signaled, you should wait on the <xref:System.Threading.SemaphoreSlim> specifically.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="887b1-149">
            <see cref="T:System.Threading.SemaphoreSlim" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-149">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CurrentCount">
      <MemberSignature Language="C#" Value="public int CurrentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SemaphoreSlim.CurrentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="887b1-150">Obtient le nombre de threads restants qui peuvent accéder à l'objet <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-150">Gets the number of remaining threads that can enter the <see cref="T:System.Threading.SemaphoreSlim" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="887b1-151">Nombre de threads restants qui peuvent accéder au sémaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-151">The number of remaining threads that can enter the semaphore.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="887b1-152">La valeur initiale de la <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> propriété est définie par l’appel à la <xref:System.Threading.SemaphoreSlim.%23ctor%2A> constructeur de classe.</span><span class="sxs-lookup"><span data-stu-id="887b1-152">The initial value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is set by the call to the <xref:System.Threading.SemaphoreSlim.%23ctor%2A> class constructor.</span></span> <span data-ttu-id="887b1-153">Il est décrémenté par chaque appel à la <xref:System.Threading.SemaphoreSlim.Wait%2A> ou <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> (méthode) et incrémentée à chaque appel à la <xref:System.Threading.SemaphoreSlim.Release%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="887b1-153">It is decremented by each call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method, and incremented by each call to the <xref:System.Threading.SemaphoreSlim.Release%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="887b1-154">Libère les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-154">Releases resources used by the current instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="887b1-155">Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-155">Releases all resources used by the current instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="887b1-156">Appelez la méthode `Dispose` une fois que vous avez terminé d'utiliser <xref:System.Threading.SemaphoreSlim>.</span><span class="sxs-lookup"><span data-stu-id="887b1-156">Call `Dispose` when you are finished using the <xref:System.Threading.SemaphoreSlim>.</span></span> <span data-ttu-id="887b1-157">La méthode `Dispose` rend le <xref:System.Threading.SemaphoreSlim> inutilisable.</span><span class="sxs-lookup"><span data-stu-id="887b1-157">The `Dispose` method leaves the <xref:System.Threading.SemaphoreSlim> in an unusable state.</span></span> <span data-ttu-id="887b1-158">Après avoir appelé `Dispose`, vous devez libérer toutes les références à la <xref:System.Threading.SemaphoreSlim> pour que le garbage collector puisse récupérer la mémoire qui le <xref:System.Threading.SemaphoreSlim> occupée.</span><span class="sxs-lookup"><span data-stu-id="887b1-158">After calling `Dispose`, you must release all references to the <xref:System.Threading.SemaphoreSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.SemaphoreSlim> was occupying.</span></span>  
  
 <span data-ttu-id="887b1-159">Pour plus d’informations, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md) et [implémentant une méthode de suppression](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="887b1-159">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="887b1-160">Appelez toujours `Dispose` avant de libérer votre dernière référence à <xref:System.Threading.SemaphoreSlim>.</span><span class="sxs-lookup"><span data-stu-id="887b1-160">Always call `Dispose` before you release your last reference to the <xref:System.Threading.SemaphoreSlim>.</span></span> <span data-ttu-id="887b1-161">Sinon, les ressources utilisées ne seront pas libérées tant que le garbage collector n'aura pas appelé la méthode <xref:System.Threading.SemaphoreSlim> de l'objet `Finalize`.</span><span class="sxs-lookup"><span data-stu-id="887b1-161">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.SemaphoreSlim> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="887b1-162">
            <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-162">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="887b1-163">Libère les ressources non managées utilisées par le <see cref="T:System.Threading.SemaphoreSlim" />, et libère éventuellement les ressources managées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-163">Releases the unmanaged resources used by the <see cref="T:System.Threading.SemaphoreSlim" />, and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="887b1-164">Contrairement à la plupart des membres de <xref:System.Threading.SemaphoreSlim>, <xref:System.Threading.SemaphoreSlim.Dispose%2A> n’est pas thread-safe et ne peut pas être utilisé en même temps que les autres membres de cette instance.</span><span class="sxs-lookup"><span data-stu-id="887b1-164">Unlike most of the members of <xref:System.Threading.SemaphoreSlim>, <xref:System.Threading.SemaphoreSlim.Dispose%2A> is not thread-safe and may not be used concurrently with other members of this instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Release">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="887b1-165">Libère l'objet <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-165">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Release" />
      <MemberSignature Language="VB.NET" Value="Public Function Release () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="887b1-166">Libère l'objet <see cref="T:System.Threading.SemaphoreSlim" /> une seule fois.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-166">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object once.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="887b1-167">Décompte précédent de <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-167">The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="887b1-168">Un appel à la <xref:System.Threading.SemaphoreSlim.Release> méthode incrémente le <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> propriété d’une unité.</span><span class="sxs-lookup"><span data-stu-id="887b1-168">A call to the <xref:System.Threading.SemaphoreSlim.Release> method increments the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span> <span data-ttu-id="887b1-169">Si la valeur de la <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> propriété est égale à zéro avant que cette méthode est appelée, la méthode permet également d’un thread ou une tâche bloquée par un appel à la <xref:System.Threading.SemaphoreSlim.Wait%2A> ou <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> méthode à entrer dans le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="887b1-169">If the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is zero before this method is called, the method also allows one thread or task blocked by a call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method to enter the semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="887b1-170">L’instance actuelle a déjà été supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-170">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SemaphoreFullException">
          <span data-ttu-id="887b1-171">Le <see cref="T:System.Threading.SemaphoreSlim" /> a déjà atteint sa taille maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-171">The <see cref="T:System.Threading.SemaphoreSlim" /> has already reached its maximum size.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release (int releaseCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release(int32 releaseCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Release(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Release (releaseCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release(int releaseCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="releaseCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="releaseCount">
          <span data-ttu-id="887b1-172">Nombre de fois où quitter le sémaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-172">The number of times to exit the semaphore.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="887b1-173">Libère l'objet <see cref="T:System.Threading.SemaphoreSlim" /> un nombre de fois déterminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-173">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object a specified number of times.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="887b1-174">Décompte précédent de <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-174">The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="887b1-175">Un appel à la <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> méthode incrémente le <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> propriété par `releaseCount`.</span><span class="sxs-lookup"><span data-stu-id="887b1-175">A call to the <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> method increments the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by `releaseCount`.</span></span> <span data-ttu-id="887b1-176">Si la valeur de la <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> propriété est zéro avant que cette méthode est appelée, la méthode autorise également `releaseCount` threads ou tâches bloquées par un appel à la <xref:System.Threading.SemaphoreSlim.Wait%2A> ou <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> méthode à entrer dans le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="887b1-176">If the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is zero before this method is called, the method also allows `releaseCount` threads or tasks blocked by a call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method to enter the semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="887b1-177">L’instance actuelle a déjà été supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-177">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="887b1-178">
            <paramref name="releaseCount" /> est inférieur à 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-178">
              <paramref name="releaseCount" /> is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SemaphoreFullException">
          <span data-ttu-id="887b1-179">Le <see cref="T:System.Threading.SemaphoreSlim" /> a déjà atteint sa taille maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-179">The <see cref="T:System.Threading.SemaphoreSlim" /> has already reached its maximum size.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="887b1-180">Bloque le thread actuel jusqu'à ce qu'il puisse accéder à <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-180">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait" />
      <MemberSignature Language="VB.NET" Value="Public Sub Wait ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="887b1-181">Bloque le thread actuel jusqu'à ce qu'il puisse accéder à <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-181">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="887b1-182">Si un thread ou une tâche est en mesure d’entrer dans le sémaphore, il décrémente le <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> propriété d’une unité.</span><span class="sxs-lookup"><span data-stu-id="887b1-182">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="887b1-183">L’instance actuelle a déjà été supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-183">The current instance has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="887b1-184">Nombre de millisecondes à attendre, <see cref="F:System.Threading.Timeout.Infinite" />(-1) pour attendre indéfiniment, ou zéro pour tester l’état du handle d’attente et retourner immédiatement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-184">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="887b1-185">Bloque le thread actuel jusqu'à ce qu'il puisse accéder à <see cref="T:System.Threading.SemaphoreSlim" />, à l'aide d'un entier signé 32 bits qui spécifie le délai d'attente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-185">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer that specifies the timeout.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="887b1-186">
            <see langword="true" /> si le thread actuel est entré avec succès dans le <see cref="T:System.Threading.SemaphoreSlim" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-186">
              <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks 
<span data-ttu-id="887b1-187">Si le délai d’expiration est définie sur-1 milliseconde, la méthode attend indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="887b1-187">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="887b1-188">Si le délai d’expiration est définie sur zéro milliseconde, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="887b1-188">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="887b1-189">Il teste l’état du handle d’attente et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="887b1-189">It tests the state of the wait handle and returns immediately.</span></span>

<span data-ttu-id="887b1-190">Si un thread ou une tâche est en mesure d’entrer dans le sémaphore, il décrémente le <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> propriété d’une unité.</span><span class="sxs-lookup"><span data-stu-id="887b1-190">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="887b1-191">Si un thread ou une tâche est bloquée lors de l’appel <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29> et l’intervalle de délai d’attente spécifié par `millisecondsTimeout` arrive à expiration :</span><span class="sxs-lookup"><span data-stu-id="887b1-191">If a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="887b1-192">Le thread ou la tâche n’entre pas le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="887b1-192">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="887b1-193">Le <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> propriété n’est pas décrémentée.</span><span class="sxs-lookup"><span data-stu-id="887b1-193">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="887b1-194">
            <paramref name="millisecondsTimeout" /> est un nombre négatif autre que -1, qui représente un délai d’expiration infini - ou - le délai d’attente est supérieur à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-194">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="887b1-195">Jeton <see cref="T:System.Threading.CancellationToken" /> à observer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-195">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="887b1-196">Bloque le thread actuel jusqu'à ce qu'il puisse accéder à <see cref="T:System.Threading.SemaphoreSlim" />, tout en observant un <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-196">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, while observing a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="887b1-197">Si un thread ou une tâche est en mesure d’entrer dans le sémaphore, il décrémente le <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> propriété d’une unité.</span><span class="sxs-lookup"><span data-stu-id="887b1-197">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
 <span data-ttu-id="887b1-198">Si `cancellationToken` est annulé, le thread ou la tâche n’entre pas le sémaphore et le <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> propriété n’est pas décrémentée.</span><span class="sxs-lookup"><span data-stu-id="887b1-198">If `cancellationToken` is cancelled, the thread or task doesn't enter the semaphore, and the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span> <span data-ttu-id="887b1-199">Au lieu de cela, la méthode lève un <xref:System.OperationCanceledException> exception.</span><span class="sxs-lookup"><span data-stu-id="887b1-199">Instead, the method throws an <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="887b1-200">
            <paramref name="cancellationToken" /> a été annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-200">
              <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="887b1-201">L’instance actuelle a déjà été supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-201">The current instance has already been disposed.</span>
          </span>
          <span data-ttu-id="887b1-202">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-202">-or-</span>
          </span>
          <span data-ttu-id="887b1-203">Le <see cref="T:System.Threading.CancellationTokenSource" /> qui a créé <paramref name="cancellationToken" /> a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-203">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="887b1-204">
            <see cref="T:System.TimeSpan" /> qui représente le nombre de millisecondes à attendre, <see cref="T:System.TimeSpan" /> qui représente -1 millisecondes pour attendre indéfiniment ou <see cref="T:System.TimeSpan" /> qui représente 0 milliseconde pour tester le handle d’attente et retourner immédiatement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-204">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="887b1-205">Bloque le thread actuel jusqu'à ce qu'il puisse accéder à <see cref="T:System.Threading.SemaphoreSlim" />, à l'aide d'un <see cref="T:System.TimeSpan" /> pour spécifier le délai d'attente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-205">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to specify the timeout.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="887b1-206">
            <see langword="true" /> si le thread actuel est entré avec succès dans le <see cref="T:System.Threading.SemaphoreSlim" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-206">
              <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="887b1-207">Si le délai d’expiration est définie sur-1 milliseconde, la méthode attend indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="887b1-207">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="887b1-208">Si le délai d’expiration est définie sur zéro milliseconde, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="887b1-208">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="887b1-209">Il teste l’état du handle d’attente et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="887b1-209">It tests the state of the wait handle and returns immediately.</span></span> 
 
<span data-ttu-id="887b1-210">Si un thread ou une tâche est en mesure d’entrer dans le sémaphore, il décrémente le <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> propriété d’une unité.</span><span class="sxs-lookup"><span data-stu-id="887b1-210">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="887b1-211">Si un thread ou une tâche est bloquée lors de l’appel <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29> et l’intervalle de délai d’attente spécifié par `millisecondsTimeout` arrive à expiration :</span><span class="sxs-lookup"><span data-stu-id="887b1-211">If a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="887b1-212">Le thread ou la tâche n’entre pas le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="887b1-212">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="887b1-213">Le <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> propriété n’est pas décrémentée.</span><span class="sxs-lookup"><span data-stu-id="887b1-213">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="887b1-214">
            <paramref name="timeout" /> est un nombre négatif autre que -1, qui représente un délai d’expiration infini - ou - le délai d’attente est supérieur à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-214">
              <paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="887b1-215">L’instance de semaphoreSlim a été supprimée <paramref name="." /></span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-215">The semaphoreSlim instance has been disposed <paramref name="." /></span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="887b1-216">Nombre de millisecondes à attendre, <see cref="F:System.Threading.Timeout.Infinite" />(-1) pour attendre indéfiniment, ou zéro pour tester l’état du handle d’attente et retourner immédiatement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-216">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="887b1-217">
            <see cref="T:System.Threading.CancellationToken" /> à observer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-217">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="887b1-218">Bloque le thread actuel jusqu'à ce qu'il puisse accéder à <see cref="T:System.Threading.SemaphoreSlim" />, à l'aide d'un entier signé 32 bits qui spécifie le délai d'attente, tout en observant un <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-218">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="887b1-219">
            <see langword="true" /> si le thread actuel est entré avec succès dans le <see cref="T:System.Threading.SemaphoreSlim" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-219">
              <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="887b1-220">Si le délai d’expiration est définie sur-1 milliseconde, la méthode attend indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="887b1-220">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="887b1-221">Si le délai d’expiration est définie sur zéro milliseconde, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="887b1-221">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="887b1-222">Il teste l’état du handle d’attente et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="887b1-222">It tests the state of the wait handle and returns immediately.</span></span>

<span data-ttu-id="887b1-223">Si un thread ou une tâche est en mesure d’entrer dans le sémaphore, il décrémente le <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> propriété d’une unité.</span><span class="sxs-lookup"><span data-stu-id="887b1-223">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="887b1-224">Si `cancellationToken` est annulée, ou si un thread ou une tâche est bloquée lors de l’appel <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> et l’intervalle de délai d’attente spécifié par `millisecondsTimeout` arrive à expiration :</span><span class="sxs-lookup"><span data-stu-id="887b1-224">If `cancellationToken` is cancelled, or if a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="887b1-225">Le thread ou la tâche n’entre pas le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="887b1-225">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="887b1-226">Le <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> propriété n’est pas décrémentée.</span><span class="sxs-lookup"><span data-stu-id="887b1-226">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  
 
<span data-ttu-id="887b1-227">Si `cancellationToken` est annulé, la méthode lève un <xref:System.OperationCanceledException> exception.</span><span class="sxs-lookup"><span data-stu-id="887b1-227">If `cancellationToken` is cancelled, the method throws an   <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="887b1-228">
            <paramref name="cancellationToken" /> a été annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-228">
              <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="887b1-229">
            <paramref name="millisecondsTimeout" /> est un nombre négatif autre que -1, qui représente un délai d’expiration infini - ou - le délai d’attente est supérieur à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-229">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="887b1-230">L’instance <see cref="T:System.Threading.SemaphoreSlim" /> a été supprimé ou le <see cref="T:System.Threading.CancellationTokenSource" /> qui a créé le jeton <paramref name="cancellationToken" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-230">The <see cref="T:System.Threading.SemaphoreSlim" /> instance has been disposed, or the <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="887b1-231">
            <see cref="T:System.TimeSpan" /> qui représente le nombre de millisecondes à attendre, <see cref="T:System.TimeSpan" /> qui représente -1 millisecondes pour attendre indéfiniment ou <see cref="T:System.TimeSpan" /> qui représente 0 milliseconde pour tester le handle d’attente et retourner immédiatement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-231">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="887b1-232">
            <see cref="T:System.Threading.CancellationToken" /> à observer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-232">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="887b1-233">Bloque le thread actuel jusqu'à ce qu'il puisse accéder à <see cref="T:System.Threading.SemaphoreSlim" />, à l'aide d'un <see cref="T:System.TimeSpan" /> qui spécifie le délai d'attente, tout en observant un <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-233">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="887b1-234">
            <see langword="true" /> si le thread actuel est entré avec succès dans le <see cref="T:System.Threading.SemaphoreSlim" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-234">
              <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="887b1-235">Si le délai d’expiration est définie sur-1 milliseconde, la méthode attend indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="887b1-235">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="887b1-236">Si le délai d’expiration est définie sur zéro milliseconde, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="887b1-236">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="887b1-237">Il teste l’état du handle d’attente et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="887b1-237">It tests the state of the wait handle and returns immediately.</span></span> 

<span data-ttu-id="887b1-238">Si un thread ou une tâche est en mesure d’entrer dans le sémaphore, il décrémente le <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> propriété d’une unité.</span><span class="sxs-lookup"><span data-stu-id="887b1-238">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="887b1-239">Si `cancellationToken` est annulée, ou si un thread ou une tâche est bloquée lors de l’appel <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> et l’intervalle de délai d’attente spécifié par `millisecondsTimeout` arrive à expiration :</span><span class="sxs-lookup"><span data-stu-id="887b1-239">If `cancellationToken` is cancelled, or if a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="887b1-240">Le thread ou la tâche n’entre pas le sémaphore.</span><span class="sxs-lookup"><span data-stu-id="887b1-240">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="887b1-241">Le <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> propriété n’est pas décrémentée.</span><span class="sxs-lookup"><span data-stu-id="887b1-241">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  

<span data-ttu-id="887b1-242">Si `cancellationToken` est annulé, la méthode lève un <xref:System.OperationCanceledException> exception.</span><span class="sxs-lookup"><span data-stu-id="887b1-242">If `cancellationToken` is cancelled, the method throws an <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="887b1-243">
            <paramref name="cancellationToken" /> a été annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-243">
              <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="887b1-244">
            <paramref name="timeout" /> est un nombre négatif autre que -1, qui représente un délai d’expiration infini - ou - le délai d’attente est supérieur à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-244">
              <paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="887b1-245">L’instance de semaphoreSlim a été supprimée <paramref name="." /><paramref name="-or-" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-245">The semaphoreSlim instance has been disposed <paramref name="." /><paramref name="-or-" /></span>
          </span>
          <span data-ttu-id="887b1-246">Le <see cref="T:System.Threading.CancellationTokenSource" /> qui a créé <paramref name="cancellationToken" /> a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-246">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAsync">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="887b1-247">Attend de façon asynchrone avant d'accéder à <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-247">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WaitAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WaitAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="887b1-248">Attend de façon asynchrone avant d'accéder à <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-248">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="887b1-249">Tâche qui se termine après l’accès au sémaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-249">A task that will complete when the semaphore has been entered.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (millisecondsTimeout As Integer) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="887b1-250">Nombre de millisecondes à attendre, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) pour attendre indéfiniment, ou zéro pour tester l’état du handle d’attente et retourner immédiatement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-250">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="887b1-251">Attend de façon asynchrone d'accéder à <see cref="T:System.Threading.SemaphoreSlim" />, à l'aide d'un entier signé 32 bits pour mesurer l'intervalle de temps.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-251">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer to measure the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="887b1-252">Tâche qui se termine avec une valeur <see langword="true" /> si le thread actuel accède correctement à <see cref="T:System.Threading.SemaphoreSlim" />, sinon la valeur <see langword="false" /> est retournée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-252">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="887b1-253">Si le délai d’expiration est définie sur-1 milliseconde, la méthode attend indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="887b1-253">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="887b1-254">Si le délai d’expiration est définie sur zéro milliseconde, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="887b1-254">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="887b1-255">Il teste l’état du handle d’attente et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="887b1-255">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="887b1-256">L’instance actuelle a déjà été supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-256">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="887b1-257">
            <paramref name="millisecondsTimeout" /> est un nombre négatif autre que -1, qui représente un délai d’expiration infini - ou - le délai d’attente est supérieur à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-257">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WaitAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WaitAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="887b1-258">Jeton <see cref="T:System.Threading.CancellationToken" /> à observer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-258">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="887b1-259">Attend de façon asynchrone d'accéder à <see cref="T:System.Threading.SemaphoreSlim" />, tout en observant un <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-259">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, while observing a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="887b1-260">Tâche qui se termine après l’accès au sémaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-260">A task that will complete when the semaphore has been entered.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="887b1-261">L’instance actuelle a déjà été supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-261">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="887b1-262">
            <paramref name="cancellationToken" /> a été annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-262">
              <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (timeout As TimeSpan) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="887b1-263">
            <see cref="T:System.TimeSpan" /> qui représente le nombre de millisecondes à attendre, <see cref="T:System.TimeSpan" /> qui représente -1 millisecondes pour attendre indéfiniment ou <see cref="T:System.TimeSpan" /> qui représente 0 milliseconde pour tester le handle d’attente et retourner immédiatement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-263">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="887b1-264">Attend de façon asynchrone d'accéder à <see cref="T:System.Threading.SemaphoreSlim" />, à l'aide d'un <see cref="T:System.TimeSpan" /> pour mesurer l'intervalle de temps.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-264">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to measure the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="887b1-265">Tâche qui se termine avec une valeur <see langword="true" /> si le thread actuel accède correctement à <see cref="T:System.Threading.SemaphoreSlim" />, sinon la valeur <see langword="false" /> est retournée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-265">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="887b1-266">Si le délai d’expiration est définie sur-1 milliseconde, la méthode attend indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="887b1-266">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="887b1-267">Si le délai d’expiration est définie sur zéro milliseconde, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="887b1-267">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="887b1-268">Il teste l’état du handle d’attente et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="887b1-268">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="887b1-269">L’instance actuelle a déjà été supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-269">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="887b1-270">
            <paramref name="millisecondsTimeout" /> est un nombre négatif autre que -1, qui représente un délai d’expiration infini - ou - le délai d’attente est supérieur à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-270">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="887b1-271">Nombre de millisecondes à attendre, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) pour attendre indéfiniment, ou zéro pour tester l’état du handle d’attente et retourner immédiatement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-271">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="887b1-272">
            <see cref="T:System.Threading.CancellationToken" /> à observer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-272">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="887b1-273">Attend de façon asynchrone d'accéder à <see cref="T:System.Threading.SemaphoreSlim" />, à l'aide d'un entier signé 32 bits pour mesurer l'intervalle de temps, tout en observant un <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-273">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="887b1-274">Tâche qui se termine avec une valeur <see langword="true" /> si le thread actuel accède correctement à <see cref="T:System.Threading.SemaphoreSlim" />, sinon la valeur <see langword="false" /> est retournée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-274">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="887b1-275">Si le délai d’expiration est définie sur-1 milliseconde, la méthode attend indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="887b1-275">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="887b1-276">Si le délai d’expiration est définie sur zéro milliseconde, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="887b1-276">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="887b1-277">Il teste l’état du handle d’attente et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="887b1-277">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="887b1-278">
            <paramref name="millisecondsTimeout" /> est un nombre autre que -1, qui représente un délai d’expiration infini - ou - le délai d’attente est supérieur à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-278">
              <paramref name="millisecondsTimeout" /> is a number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="887b1-279">L’instance actuelle a déjà été supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-279">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="887b1-280">
            <paramref name="cancellationToken" /> a été annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-280">
              <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="887b1-281">
            <see cref="T:System.TimeSpan" /> qui représente le nombre de millisecondes à attendre, <see cref="T:System.TimeSpan" /> qui représente -1 millisecondes pour attendre indéfiniment ou <see cref="T:System.TimeSpan" /> qui représente 0 milliseconde pour tester le handle d’attente et retourner immédiatement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-281">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="887b1-282">Jeton <see cref="T:System.Threading.CancellationToken" /> à observer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-282">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="887b1-283">Attend de façon asynchrone d'accéder à <see cref="T:System.Threading.SemaphoreSlim" />, à l'aide d'un <see cref="T:System.TimeSpan" /> pour mesurer l'intervalle de temps, tout en observant un <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-283">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="887b1-284">Tâche qui se termine avec une valeur <see langword="true" /> si le thread actuel accède correctement à <see cref="T:System.Threading.SemaphoreSlim" />, sinon la valeur <see langword="false" /> est retournée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-284">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="887b1-285">Si le délai d’expiration est définie sur-1 milliseconde, la méthode attend indéfiniment.</span><span class="sxs-lookup"><span data-stu-id="887b1-285">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>

 <span data-ttu-id="887b1-286">Si le délai d’expiration est définie sur zéro milliseconde, la méthode ne bloque pas.</span><span class="sxs-lookup"><span data-stu-id="887b1-286">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="887b1-287">Il teste l’état du handle d’attente et retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="887b1-287">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="887b1-288">
            <paramref name="millisecondsTimeout" /> est un nombre négatif autre que -1, qui représente un délai d’expiration infini - ou - le délai d’attente est supérieur à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-288">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="887b1-289">
            <paramref name="cancellationToken" /> a été annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="887b1-289">
              <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>