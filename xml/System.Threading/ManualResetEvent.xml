<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6ef7963b99d115f4a7f54e535f80eb38d73ee365" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56394150" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente un événement de synchronisation de thread qui, quand il est signalé, doit être réinitialisé manuellement. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

 Vous utilisez `ManualResetEvent`, <xref:System.Threading.AutoResetEvent>, et <xref:System.Threading.EventWaitHandle> pour l’interaction des threads (ou le signalement de thread). Pour plus d’informations, consultez le [Thread interaction ou sa signalisation](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) section de la [vue d’ensemble des primitives de synchronisation](~/docs/standard/threading/overview-of-synchronization-primitives.md) article.  

 Lorsqu’un thread commence une activité qui doit être terminée avant les autres threads puissent s’exécuter, il appelle [ManualResetEvent.Reset](xref:System.Threading.EventWaitHandle.Reset%2A) placer `ManualResetEvent` dans un état non signalé. Ce thread peut être considéré comme contrôle le `ManualResetEvent`. Threads qui appellent [ManualResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A) bloc, en attendant le signal. Lorsque le thread de contrôle termine l’activité, il appelle [ManualResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) pour signaler que les threads en attente peuvent continuer. Tous les threads en attente sont publiées.  

 Une fois qu’il a été signalé, `ManualResetEvent` reste signalé jusqu'à ce qu’il est réinitialisé manuellement en appelant le <xref:System.Threading.EventWaitHandle.Reset> (méthode). Autrement dit, les appels à <xref:System.Threading.WaitHandle.WaitOne%2A> retourner immédiatement.  

 Vous pouvez contrôler l’état initial d’un `ManualResetEvent` en transmettant une valeur booléenne au constructeur : `true` si l’état initial est signalé, et `false` dans le cas contraire.  
 
 `ManualResetEvent` peut également être utilisé avec le `static` <xref:System.Threading.WaitHandle.WaitAll%2A> et <xref:System.Threading.WaitHandle.WaitAny%2A> méthodes.  
  
 À partir de .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> dérive le <xref:System.Threading.EventWaitHandle> classe. Un <xref:System.Threading.ManualResetEvent> est fonctionnellement équivalent à un <xref:System.Threading.EventWaitHandle> créé avec <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.  
  
> [!NOTE]
> Contrairement à la <xref:System.Threading.ManualResetEvent> (classe), la <xref:System.Threading.EventWaitHandle> classe fournit l’accès aux événements de synchronisation système nommé.  

 À partir de .NET Framework version 4.0, le <xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType> classe est une alternative légère à <xref:System.Threading.ManualResetEvent>.    
   
   
  
## Examples  
 L’exemple suivant montre comment <xref:System.Threading.ManualResetEvent> fonctionne. L’exemple commence par un <xref:System.Threading.ManualResetEvent> dans un état non signalé (autrement dit, `false` est passée au constructeur). L’exemple crée trois threads, chacun se bloquant sur la <xref:System.Threading.ManualResetEvent> en appelant son <xref:System.Threading.WaitHandle.WaitOne%2A> (méthode). Lorsque l’utilisateur appuie sur le **entrée** clé, l’exemple appelle la <xref:System.Threading.EventWaitHandle.Set%2A> (méthode), qui libère les trois threads. Comparez ceci avec le comportement de la <xref:System.Threading.AutoResetEvent> classe, ce qui libère les threads un à la fois, la réinitialisation automatiquement après chaque publication.  
  
 En appuyant sur la **entrée** clé montre à nouveau que le <xref:System.Threading.ManualResetEvent> reste dans l’état signalé jusqu'à ce que son <xref:System.Threading.EventWaitHandle.Reset%2A> méthode est appelée : L’exemple démarre deux threads supplémentaires. Ces threads ne bloquent pas lorsqu’ils appellent le <xref:System.Threading.WaitHandle.WaitOne%2A> (méthode), mais leur exécution jusqu'à la fin.  
  
 En appuyant sur la **entrée** clé provoque à nouveau l’exemple appelle la <xref:System.Threading.EventWaitHandle.Reset%2A> (méthode) et pour démarrer un thread de plus, ce qui se bloque lorsqu’il appelle <xref:System.Threading.WaitHandle.WaitOne%2A>. En appuyant sur la **entrée** clé une dernière fois pour appeler <xref:System.Threading.EventWaitHandle.Set%2A> pour libérer le dernier thread et le programme se termine.  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Cette classe est thread-safe.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">Threading managé</related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Vue d’ensemble des primitives de synchronisation</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><see langword="true" /> pour définir un état initial signalé ; <see langword="false" /> pour définir un état initial non signalé.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.ManualResetEvent" /> avec une valeur booléenne indiquant si l'état initial doit être défini comme signalé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’état initial d’un <xref:System.Threading.ManualResetEvent> est signalé (autrement dit, s’il est créé en passant `true` pour `initialState`), les threads qui attendent le <xref:System.Threading.ManualResetEvent> ne bloquent pas. Si l’état initial est "non signalé", threads se bloquent jusqu'à ce que le <xref:System.Threading.EventWaitHandle.Set%2A> méthode est appelée.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">Threading managé</related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Vue d’ensemble des primitives de synchronisation</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Définit l'état de l'événement comme étant non signalé, ce qui entraîne le blocage des threads.</summary>
        <returns><see langword="true" /> si l'opération aboutit ; sinon, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Définit l'état de l'événement comme étant signalé, ce qui permet à un ou plusieurs threads en attente de continuer.</summary>
        <returns><see langword="true" /> si l'opération aboutit ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
La méthode Set laisse le handle d’attente dans un état signalé jusqu'à ce que le <xref:System.Threading.ManualResetEvent.Reset> méthode est appelée.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>