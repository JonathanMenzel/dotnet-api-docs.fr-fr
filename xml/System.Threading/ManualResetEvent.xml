<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="55d22a680762383ef96947462e2824d553269a1f" />
    <Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="12/01/2018" />
    <Meta Name="ms.locfileid" Value="52738801" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="b1e4d-101">Avertit un ou plusieurs threads en attente qu'un événement s'est produit.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b1e4d-101">Notifies one or more waiting threads that an event has occurred.</span>
      </span>
      <span data-ttu-id="b1e4d-102">Cette classe ne peut pas être héritée.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b1e4d-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1e4d-103">Dans le .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> dérive la nouvelle <xref:System.Threading.EventWaitHandle> classe.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-103">In the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="b1e4d-104">Un <xref:System.Threading.ManualResetEvent> est fonctionnellement équivalent à un <xref:System.Threading.EventWaitHandle> créé avec <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-104">A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b1e4d-105">Contrairement à la <xref:System.Threading.ManualResetEvent> (classe), la <xref:System.Threading.EventWaitHandle> classe fournit l’accès aux événements de synchronisation système nommé.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-105">Unlike the <xref:System.Threading.ManualResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
 <span data-ttu-id="b1e4d-106"><xref:System.Threading.ManualResetEvent> permet aux threads de communiquer entre eux par la signalisation.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-106"><xref:System.Threading.ManualResetEvent> allows threads to communicate with each other by signaling.</span></span> <span data-ttu-id="b1e4d-107">En règle générale, cette communication concerne une tâche qu’un thread doit terminer avant que les autres threads puissent continuer.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-107">Typically, this communication concerns a task which one thread must complete before other threads can proceed.</span></span>  
  
 <span data-ttu-id="b1e4d-108">Lorsqu’un thread commence une activité qui doit être terminée avant les autres threads puissent s’exécuter, il appelle <xref:System.Threading.EventWaitHandle.Reset%2A> placer `ManualResetEvent` dans un état non signalé.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-108">When a thread begins an activity that must complete before other threads proceed, it calls <xref:System.Threading.EventWaitHandle.Reset%2A> to put `ManualResetEvent` in the non-signaled state.</span></span> <span data-ttu-id="b1e4d-109">Ce thread peut être considéré comme contrôle le `ManualResetEvent`.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-109">This thread can be thought of as controlling the `ManualResetEvent`.</span></span> <span data-ttu-id="b1e4d-110">Threads qui appellent <xref:System.Threading.WaitHandle.WaitOne%2A> sur le `ManualResetEvent` se bloque, en attendant le signal.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-110">Threads that call <xref:System.Threading.WaitHandle.WaitOne%2A> on the `ManualResetEvent` will block, awaiting the signal.</span></span> <span data-ttu-id="b1e4d-111">Lorsque le thread de contrôle termine l’activité, il appelle <xref:System.Threading.EventWaitHandle.Set%2A> pour signaler que les threads en attente peuvent continuer.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-111">When the controlling thread completes the activity, it calls <xref:System.Threading.EventWaitHandle.Set%2A> to signal that the waiting threads can proceed.</span></span> <span data-ttu-id="b1e4d-112">Tous les threads en attente sont publiées.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-112">All waiting threads are released.</span></span>  
  
 <span data-ttu-id="b1e4d-113">Une fois qu’il a été signalé, `ManualResetEvent` reste signalé jusqu'à ce qu’il est réinitialisé manuellement.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-113">Once it has been signaled, `ManualResetEvent` remains signaled until it is manually reset.</span></span> <span data-ttu-id="b1e4d-114">Autrement dit, les appels à `WaitOne` retourner immédiatement.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-114">That is, calls to `WaitOne` return immediately.</span></span>  
  
 <span data-ttu-id="b1e4d-115">Vous pouvez contrôler l’état initial d’un `ManualResetEvent` en transmettant une valeur booléenne au constructeur, `true` si l’état initial est signalé et `false` dans le cas contraire.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-115">You can control the initial state of a `ManualResetEvent` by passing a Boolean value to the constructor, `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="b1e4d-116">`ManualResetEvent` peut également être utilisé avec le `static` <xref:System.Threading.WaitHandle.WaitAll%2A> et <xref:System.Threading.WaitHandle.WaitAny%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-116">`ManualResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="b1e4d-117">Pour plus d’informations sur les mécanismes de synchronisation de threads, consultez [ManualResetEvent et ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) dans la documentation conceptuelle.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-117">For more information about thread synchronization mechanisms, see [ManualResetEvent and ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) in the conceptual documentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1e4d-118">L’exemple suivant montre comment <xref:System.Threading.ManualResetEvent> fonctionne.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-118">The following example demonstrates how <xref:System.Threading.ManualResetEvent> works.</span></span> <span data-ttu-id="b1e4d-119">L’exemple commence par un <xref:System.Threading.ManualResetEvent> dans un état non signalé (autrement dit, `false` est passée au constructeur).</span><span class="sxs-lookup"><span data-stu-id="b1e4d-119">The example starts with a <xref:System.Threading.ManualResetEvent> in the unsignaled state (that is, `false` is passed to the constructor).</span></span> <span data-ttu-id="b1e4d-120">L’exemple crée trois threads, chacun se bloquant sur la <xref:System.Threading.ManualResetEvent> en appelant son <xref:System.Threading.WaitHandle.WaitOne%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="b1e4d-120">The example creates three threads, each of which blocks on the <xref:System.Threading.ManualResetEvent> by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="b1e4d-121">Lorsque l’utilisateur appuie sur le **entrée** clé, l’exemple appelle la <xref:System.Threading.EventWaitHandle.Set%2A> (méthode), qui libère les trois threads.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-121">When the user presses the **Enter** key, the example calls the <xref:System.Threading.EventWaitHandle.Set%2A> method, which releases all three threads.</span></span> <span data-ttu-id="b1e4d-122">Comparez ceci avec le comportement de la <xref:System.Threading.AutoResetEvent> classe, ce qui libère les threads un à la fois, la réinitialisation automatiquement après chaque publication.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-122">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class, which releases threads one at a time, resetting automatically after each release.</span></span>  
  
 <span data-ttu-id="b1e4d-123">En appuyant sur la **entrée** clé montre à nouveau que le <xref:System.Threading.ManualResetEvent> reste dans l’état signalé jusqu'à ce que son <xref:System.Threading.EventWaitHandle.Reset%2A> méthode est appelée : l’exemple démarre deux threads supplémentaires.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-123">Pressing the **Enter** key again demonstrates that the <xref:System.Threading.ManualResetEvent> remains in the signaled state until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called: The example starts two more threads.</span></span> <span data-ttu-id="b1e4d-124">Ces threads ne bloquent pas lorsqu’ils appellent le <xref:System.Threading.WaitHandle.WaitOne%2A> (méthode), mais leur exécution jusqu'à la fin.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-124">These threads do not block when they call the <xref:System.Threading.WaitHandle.WaitOne%2A> method, but instead run to completion.</span></span>  
  
 <span data-ttu-id="b1e4d-125">En appuyant sur la **entrée** clé provoque à nouveau l’exemple appelle la <xref:System.Threading.EventWaitHandle.Reset%2A> (méthode) et pour démarrer un thread de plus, ce qui se bloque lorsqu’il appelle <xref:System.Threading.WaitHandle.WaitOne%2A>.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-125">Pressing the **Enter** key again causes the example to call the <xref:System.Threading.EventWaitHandle.Reset%2A> method and to start one more thread, which blocks when it calls <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="b1e4d-126">En appuyant sur la **entrée** clé une dernière fois pour appeler <xref:System.Threading.EventWaitHandle.Set%2A> pour libérer le dernier thread et le programme se termine.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-126">Pressing the **Enter** key one final time calls <xref:System.Threading.EventWaitHandle.Set%2A> to release the last thread, and the program ends.</span></span>  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="b1e4d-127">Cette classe est thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b1e4d-127">This class is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">
      <span data-ttu-id="b1e4d-128">Threading managé</span>
      <span class="sxs-lookup">
        <span data-stu-id="b1e4d-128">Managed Threading</span>
      </span>
    </related>
    <related type="Article" href="~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md">
      <span data-ttu-id="b1e4d-129">Événement de réinitialisation manuelle</span>
      <span class="sxs-lookup">
        <span data-stu-id="b1e4d-129">Manual Reset Event</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <span data-ttu-id="b1e4d-130">
            <see langword="true" /> Pour définir l’état initial comme étant signalé ; <see langword="false" /> pour définir l’état initial "non signalé".</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1e4d-130">
              <see langword="true" /> to set the initial state signaled; <see langword="false" /> to set the initial state to nonsignaled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b1e4d-131">Initialise une nouvelle instance de la <see cref="T:System.Threading.ManualResetEvent" /> classe avec une valeur booléenne indiquant si l’état initial "signalé".</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1e4d-131">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1e4d-132">Si l’état initial d’un <xref:System.Threading.ManualResetEvent> est signalé (autrement dit, s’il est créé en passant `true` pour `initialState`), les threads qui attendent le <xref:System.Threading.ManualResetEvent> ne bloquent pas.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-132">If the initial state of a <xref:System.Threading.ManualResetEvent> is signaled (that is, if it is created by passing `true` for `initialState`), threads that wait on the <xref:System.Threading.ManualResetEvent> do not block.</span></span> <span data-ttu-id="b1e4d-133">Si l’état initial est "non signalé", threads se bloquent jusqu'à ce que le <xref:System.Threading.EventWaitHandle.Set%2A> méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-133">If the initial state is nonsignaled, threads block until the <xref:System.Threading.EventWaitHandle.Set%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="b1e4d-134">Threading managé</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1e4d-134">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md">
          <span data-ttu-id="b1e4d-135">ManualResetEvent</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1e4d-135">ManualResetEvent</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b1e4d-136">Définit l'état de l'événement à "non signalé", ce qui entraîne le blocage des threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1e4d-136">Sets the state of the event to nonsignaled, which causes threads to block.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b1e4d-137">
            <see langword="true" /> si l’opération aboutit ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1e4d-137">
              <see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b1e4d-138">Définit l’état de l’événement à "signalé", ce qui permet à un ou plusieurs threads en attente de continuer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1e4d-138">Sets the state of the event to signaled, which allows one or more waiting threads to proceed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b1e4d-139">
            <see langword="true" /> si l’opération aboutit ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b1e4d-139">
              <see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="b1e4d-140">La méthode Set laisse le handle d’attente dans un état signalé jusqu'à ce que le <xref:System.Threading.ManualResetEvent.Reset> méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="b1e4d-140">Calling the Set method leaves the wait handle in a signaled state until the <xref:System.Threading.ManualResetEvent.Reset> method is called.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>