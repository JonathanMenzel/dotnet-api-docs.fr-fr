<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Overlapped.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac531201e0b4c503da7add0f20c512304b6440fbed3.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">31201e0b4c503da7add0f20c512304b6440fbed3</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Overlapped">
          <source>Provides a managed representation of a Win32 <bpt id="p1">&lt;c&gt;</bpt>OVERLAPPED<ept id="p1">&lt;/c&gt;</ept> structure, including methods to transfer information from an <ph id="ph1">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph> instance to a <ph id="ph2">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure.</source>
          <target state="translated">Fournit une représentation managée d’une structure <bpt id="p1">&lt;c&gt;</bpt>OVERLAPPED<ept id="p1">&lt;/c&gt;</ept> Win32, notamment les méthodes pour transférer des informations d’une instance <ph id="ph1">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph> à une structure <ph id="ph2">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Overlapped">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Overlapped.Pack%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;</ph> methods transfer information from an <ph id="ph3">&lt;xref:System.Threading.Overlapped&gt;</ph> object to a <ph id="ph4">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure that can be passed to Win32 API functions for asynchronous file I/O.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.Overlapped.Pack%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;</ph> méthodes transfèrent des informations d’un <ph id="ph3">&lt;xref:System.Threading.Overlapped&gt;</ph> de l’objet à un <ph id="ph4">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure qui peut être passé aux fonctions API Win32 pour asynchrone d’e/s de fichier.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Overlapped">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Overlapped.Unpack%2A&gt;</ph> method transfers information from a <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure to an instance of the <ph id="ph3">&lt;xref:System.Threading.Overlapped&gt;</ph> class.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.Overlapped.Unpack%2A&gt;</ph> méthode transfère des informations d’un <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure à une instance de la <ph id="ph3">&lt;xref:System.Threading.Overlapped&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Overlapped">
          <source>Changes to the properties of an <ph id="ph1">&lt;xref:System.Threading.Overlapped&gt;</ph> object affect its associated <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure, and vice versa.</source>
          <target state="translated">Modifie les propriétés d’un <ph id="ph1">&lt;xref:System.Threading.Overlapped&gt;</ph> objet affectent qui lui est associée <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure et vice versa.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="T:System.Threading.Overlapped">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.#ctor">
          <source>Initializes a new, empty instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance vide de la classe <ph id="ph1">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)">
          <source>The low word of the file position at which to start the transfer.</source>
          <target state="translated">Mot bas de la position de fichier auquel démarrer le transfert.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)">
          <source>The high word of the file position at which to start the transfer.</source>
          <target state="translated">Mot haut de la position de fichier auquel démarrer le transfert.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)">
          <source>The handle to an event that is signaled when the I/O operation is complete.</source>
          <target state="translated">Handle vers un événement qui est signalé lorsque l'opération d'E/S est terminée.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> interface and provides status information on the I/O operation.</source>
          <target state="translated">Objet qui implémente l'interface <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> et fournit des informations d'état sur l'opération d'E/S.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph> class with the specified file position, the 32-bit integer handle to an event that is signaled when the I/O operation is complete, and an interface through which to return the results of the operation.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph> avec la position de fichier spécifiée, le handle entier à 32 bits d'un événement qui est signalé lorsque l'opération d'E/S est terminée et une interface par le biais de laquelle retourner les résultats de l'opération.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)">
          <source>Use the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Handle%2A?displayProperty=nameWithType&gt;</ph> property to get the handle of any managed synchronization event that derives from the <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> class.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Handle%2A?displayProperty=nameWithType&gt;</ph> propriété à obtenir le handle d’un événement de synchronisation managé qui dérive de la <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)">
          <source>Your implementation of <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> provides status information on the I/O operation.</source>
          <target state="translated">Votre implémentation de <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> fournit des informations sur l’opération d’e/s.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)">
          <source>Pass it to the constructor in the <ph id="ph1">`ar`</ph> parameter, and retrieve it later with the <ph id="ph2">&lt;xref:System.Threading.Overlapped.AsyncResult%2A&gt;</ph> property.</source>
          <target state="translated">Passer au constructeur dans le <ph id="ph1">`ar`</ph> paramètre et les récupérer ultérieurement avec le <ph id="ph2">&lt;xref:System.Threading.Overlapped.AsyncResult%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)">
          <source>If a callback method is specified for the <ph id="ph1">&lt;xref:System.Threading.Overlapped.Pack%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;</ph> method, the callback can retrieve your <ph id="ph3">&lt;xref:System.IAsyncResult&gt;</ph> by unpacking the <ph id="ph4">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure it receives.</source>
          <target state="translated">Si une méthode de rappel est spécifiée pour le <ph id="ph1">&lt;xref:System.Threading.Overlapped.Pack%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;</ph> (méthode), le rappel peut récupérer votre <ph id="ph3">&lt;xref:System.IAsyncResult&gt;</ph> décompresser le <ph id="ph4">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure qu’il reçoit.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)">
          <source>The low word of the file position at which to start the transfer.</source>
          <target state="translated">Mot bas de la position de fichier auquel démarrer le transfert.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)">
          <source>The high word of the file position at which to start the transfer.</source>
          <target state="translated">Mot haut de la position de fichier auquel démarrer le transfert.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)">
          <source>The handle to an event that is signaled when the I/O operation is complete.</source>
          <target state="translated">Handle vers un événement qui est signalé lorsque l'opération d'E/S est terminée.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> interface and provides status information on the I/O operation.</source>
          <target state="translated">Objet qui implémente l'interface <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> et fournit des informations d'état sur l'opération d'E/S.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph> class with the specified file position, the handle to an event that is signaled when the I/O operation is complete, and an interface through which to return the results of the operation.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph> avec la position de fichier spécifiée, le handle d'un événement qui est signalé lorsque l'opération d'E/S est terminée et une interface par le biais de laquelle retourner les résultats de l'opération.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)">
          <source>To get the handle of a managed synchronization object that derives from the <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> class, use the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=nameWithType&gt;</ph> property to get a <ph id="ph3">&lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt;</ph> object, and then call the <ph id="ph4">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;</ph> method.</source>
          <target state="translated">Pour obtenir le handle d’un objet de synchronisation managé qui dérive de la <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> de classe, utilisez le <ph id="ph2">&lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=nameWithType&gt;</ph> propriété à obtenir un <ph id="ph3">&lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt;</ph> de l’objet, puis appelez le <ph id="ph4">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)">
          <source>Your implementation of <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> provides status information on the I/O operation.</source>
          <target state="translated">Votre implémentation de <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> fournit des informations sur l’opération d’e/s.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)">
          <source>Pass it to the constructor in the <ph id="ph1">`ar`</ph> parameter, and retrieve it later with the <ph id="ph2">&lt;xref:System.Threading.Overlapped.AsyncResult%2A&gt;</ph> property.</source>
          <target state="translated">Passer au constructeur dans le <ph id="ph1">`ar`</ph> paramètre et les récupérer ultérieurement avec le <ph id="ph2">&lt;xref:System.Threading.Overlapped.AsyncResult%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)">
          <source>If a callback method is specified for the <ph id="ph1">&lt;xref:System.Threading.Overlapped.Pack%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;</ph> method, the callback can retrieve your <ph id="ph3">&lt;xref:System.IAsyncResult&gt;</ph> by unpacking the <ph id="ph4">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure it receives.</source>
          <target state="translated">Si une méthode de rappel est spécifiée pour le <ph id="ph1">&lt;xref:System.Threading.Overlapped.Pack%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;</ph> (méthode), le rappel peut récupérer votre <ph id="ph3">&lt;xref:System.IAsyncResult&gt;</ph> décompresser le <ph id="ph4">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure qu’il reçoit.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.Threading.Overlapped.AsyncResult">
          <source>Gets or sets the object that provides status information on the I/O operation.</source>
          <target state="translated">Obtient ou définit l'objet qui fournit des informations d'état sur l'opération d'E/S.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Overlapped.AsyncResult">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> interface.</source>
          <target state="translated">Objet qui implémente l'interface <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Threading.Overlapped.EventHandle">
          <source>Gets or sets the 32-bit integer handle to a synchronization event that is signaled when the I/O operation is complete.</source>
          <target state="translated">Obtient ou définit le handle entier 32 bits comme étant un événement de synchronisation qui est signalé lorsque l'opération d'E/S est terminée.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Overlapped.EventHandle">
          <source>An <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value representing the handle of the synchronization event.</source>
          <target state="translated">Valeur <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> représentant le handle de l'événement de synchronisation.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Overlapped.EventHandle">
          <source>This property cannot be used on 64-bit platforms.</source>
          <target state="translated">Cette propriété ne peut pas être utilisée sur les plateformes 64 bits.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Overlapped.EventHandle">
          <source>Use the <ph id="ph1">&lt;xref:System.Threading.Overlapped.EventHandleIntPtr%2A&gt;</ph> property instead.</source>
          <target state="translated">Utilisez la propriété <ph id="ph1">&lt;xref:System.Threading.Overlapped.EventHandleIntPtr%2A&gt;</ph> à la place.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Overlapped.EventHandle">
          <source>Use the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Handle%2A?displayProperty=nameWithType&gt;</ph> property to get the handle of any managed synchronization event that derives from the <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> class.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Handle%2A?displayProperty=nameWithType&gt;</ph> propriété à obtenir le handle d’un événement de synchronisation managé qui dérive de la <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Threading.Overlapped.EventHandleIntPtr">
          <source>Gets or sets the handle to the synchronization event that is signaled when the I/O operation is complete.</source>
          <target state="translated">Obtient ou définit le handle comme étant l'événement de synchronisation qui est signalé lorsque l'opération d'E/S est terminée.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Overlapped.EventHandleIntPtr">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> representing the handle of the event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> représentant le handle de l'événement.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Overlapped.EventHandleIntPtr">
          <source>To get the handle of a managed synchronization object that derives from the <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> class, use the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=nameWithType&gt;</ph> property to get a <ph id="ph3">&lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt;</ph> object, and then call the <ph id="ph4">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;</ph> method.</source>
          <target state="translated">Pour obtenir le handle d’un objet de synchronisation managé qui dérive de la <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> de classe, utilisez le <ph id="ph2">&lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=nameWithType&gt;</ph> propriété à obtenir un <ph id="ph3">&lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt;</ph> de l’objet, puis appelez le <ph id="ph4">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)">
          <source>A pointer to the <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure to be freed.</source>
          <target state="translated">Pointeur vers la structure <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> à libérer.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)">
          <source>Frees the unmanaged memory associated with a native overlapped structure allocated by the <ph id="ph1">&lt;see cref="Overload:System.Threading.Overlapped.Pack" /&gt;</ph> method.</source>
          <target state="translated">Libère la mémoire non managée associée à une structure native chevauchée allouée par la méthode <ph id="ph1">&lt;see cref="Overload:System.Threading.Overlapped.Pack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)">
          <source>You must call the <ph id="ph1">&lt;xref:System.Threading.Overlapped.Free%2A&gt;</ph> method exactly once on every <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> pointer you receive from the <ph id="ph3">&lt;xref:System.Threading.Overlapped.Pack%2A&gt;</ph> method.</source>
          <target state="translated">Vous devez appeler la <ph id="ph1">&lt;xref:System.Threading.Overlapped.Free%2A&gt;</ph> méthode une seule fois sur chaque <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> pointeur provenant de la <ph id="ph3">&lt;xref:System.Threading.Overlapped.Pack%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)">
          <source>If you don't call the <ph id="ph1">&lt;xref:System.Threading.Overlapped.Free%2A&gt;</ph> method, you will leak memory.</source>
          <target state="translated">Si vous n’appelez pas la <ph id="ph1">&lt;xref:System.Threading.Overlapped.Free%2A&gt;</ph> (méthode), vous aurez une fuite de mémoire.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)">
          <source>If you call the <ph id="ph1">&lt;xref:System.Threading.Overlapped.Free%2A&gt;</ph> method more than once, memory will be corrupted.</source>
          <target state="translated">Si vous appelez le <ph id="ph1">&lt;xref:System.Threading.Overlapped.Free%2A&gt;</ph> méthode plusieurs fois, mémoire sera endommagée.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)">
          <source><ph id="ph1">&lt;paramref name="nativeOverlappedPtr" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nativeOverlappedPtr" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.Threading.Overlapped.OffsetHigh">
          <source>Gets or sets the high-order word of the file position at which to start the transfer.</source>
          <target state="translated">Obtient ou définit le mot de poids fort de la position de fichier auquel démarrer le transfert.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Threading.Overlapped.OffsetHigh">
          <source>The file position is a byte offset from the start of the file.</source>
          <target state="translated">La position de fichier est un offset d'octet à partir du début du fichier.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Overlapped.OffsetHigh">
          <source>An <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value representing the high word of the file position.</source>
          <target state="translated">Valeur <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> représentant le mot de poids fort de la position de fichier.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.Threading.Overlapped.OffsetLow">
          <source>Gets or sets the low-order word of the file position at which to start the transfer.</source>
          <target state="translated">Obtient ou définit le mot de poids faible de la position de fichier auquel démarrer le transfert.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.Threading.Overlapped.OffsetLow">
          <source>The file position is a byte offset from the start of the file.</source>
          <target state="translated">La position de fichier est un offset d'octet à partir du début du fichier.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Overlapped.OffsetLow">
          <source>An <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value representing the low word of the file position.</source>
          <target state="translated">Valeur <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> représentant le mot de poids faible de la position de fichier.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="T:System.Threading.Overlapped">
          <source>Packs the current instance into a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure.</source>
          <target state="translated">Compresse l'instance actuelle en une structure <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Threading.IOCompletionCallback" /&gt;</ph> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Threading.IOCompletionCallback" /&gt;</ph> qui représente la méthode de rappel appelée lorsque l'opération asynchrone d'E/S est terminée.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)">
          <source>Packs the current instance into a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure, specifying the delegate to be invoked when the asynchronous I/O operation is complete.</source>
          <target state="translated">Comprime l'instance actuelle dans une structure <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> pour spécifier le délégué à appeler lorsque l'opération d'E/S asynchrone est terminée.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)">
          <source>An unmanaged pointer to a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure.</source>
          <target state="translated">Pointeur non managé vers une structure <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)">
          <source>The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</source>
          <target state="translated">Le pointeur non managé retourné par cette méthode peut être passé au système d’exploitation dans les opérations d’e/s avec chevauchement.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure is fixed in physical memory until <ph id="ph2">&lt;xref:System.Threading.Overlapped.Unpack%2A&gt;</ph> is called.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure est fixe dans la mémoire physique jusqu'à ce que <ph id="ph2">&lt;xref:System.Threading.Overlapped.Unpack%2A&gt;</ph> est appelée.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)">
          <source>The caller is responsible for pinning the buffer.</source>
          <target state="translated">L’appelant est chargé d’épingler la mémoire tampon.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)">
          <source>If the application domain is unloaded, however, the handle to the pinned buffer is destroyed and the buffer is released, leaving the I/O operation to write to the freed address.</source>
          <target state="translated">Si le domaine d’application est déchargé, toutefois, le handle de la mémoire tampon épinglée est détruit et la mémoire tampon est, en laissant l’opération d’e/s d’écriture à l’adresse libérée.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)">
          <source>For this reason, it is better to use the <ph id="ph1">&lt;xref:System.Threading.Overlapped.Pack%28System.Threading.IOCompletionCallback%2CSystem.Object%29&gt;</ph> method overload, in which the runtime pins the buffer.</source>
          <target state="translated">Pour cette raison, il est préférable d’utiliser le <ph id="ph1">&lt;xref:System.Threading.Overlapped.Pack%28System.Threading.IOCompletionCallback%2CSystem.Object%29&gt;</ph> la surcharge de méthode, dans laquelle le runtime épingle la mémoire tampon.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph> has already been packed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph> en cours a déjà été compressé.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Threading.IOCompletionCallback" /&gt;</ph> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Threading.IOCompletionCallback" /&gt;</ph> qui représente la méthode de rappel appelée lorsque l'opération asynchrone d'E/S est terminée.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)">
          <source>An object or array of objects representing the input or output buffer for the operation.</source>
          <target state="translated">Objet ou tableau d'objets représentant la mémoire tampon d'entrée ou de sortie pour l'opération.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)">
          <source>Each object represents a buffer, for example an array of bytes.</source>
          <target state="translated">Chaque objet représente une mémoire tampon, par exemple un tableau d'octets.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)">
          <source>Packs the current instance into a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure, specifying a delegate that is invoked when the asynchronous I/O operation is complete and a managed object that serves as a buffer.</source>
          <target state="translated">Comprime l'instance actuelle dans une structure <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> pour spécifier un délégué qui est appelé lorsque l'opération d'E/S asynchrone est terminée et un objet managé qui sert de mémoire tampon.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)">
          <source>An unmanaged pointer to a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure.</source>
          <target state="translated">Pointeur non managé vers une structure <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)">
          <source>The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</source>
          <target state="translated">Le pointeur non managé retourné par cette méthode peut être passé au système d’exploitation dans les opérations d’e/s avec chevauchement.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure is fixed in physical memory until <ph id="ph2">&lt;xref:System.Threading.Overlapped.Unpack%2A&gt;</ph> is called.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure est fixe dans la mémoire physique jusqu'à ce que <ph id="ph2">&lt;xref:System.Threading.Overlapped.Unpack%2A&gt;</ph> est appelée.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)">
          <source>The buffer or buffers specified in <ph id="ph1">`userData`</ph> must be the same as those passed to the unmanaged operating system function that performs the asynchronous I/O.</source>
          <target state="translated">La mémoire tampon ou les mémoires tampon spécifié dans <ph id="ph1">`userData`</ph> doit être le même que celles qui sont passées à la fonction de système d’exploitation non géré qui effectue l’e/s asynchrones.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)">
          <source>The runtime pins the buffer or buffers specified in <ph id="ph1">`userData`</ph> for the duration of the I/O operation.</source>
          <target state="translated">Le runtime épingle la mémoire tampon ou les mémoires tampon spécifié dans <ph id="ph1">`userData`</ph> pendant la durée de l’opération d’e/s.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)">
          <source>If the application domain is unloaded, the runtime keeps the memory pinned until the I/O operation completes.</source>
          <target state="translated">Si le domaine d’application est déchargé, le runtime garde la mémoire épinglée jusqu'à ce que l’opération d’e/s se termine.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph> has already been packed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph> en cours a déjà été compressé.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)">
          <source>An unmanaged pointer to a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure.</source>
          <target state="translated">Pointeur non managé vers une structure <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)">
          <source>Unpacks the specified unmanaged <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure into a managed <ph id="ph2">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph> object.</source>
          <target state="translated">Décompacte la structure <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> non managée spécifiée dans un objet <ph id="ph2">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph> managé.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph> object containing the information unpacked from the native structure.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph> contenant les informations décompactées de la structure native.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure is not freed from physical memory until you call the <ph id="ph2">&lt;xref:System.Threading.Overlapped.Free%2A&gt;</ph> method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure n’est pas libérée à partir de la mémoire physique jusqu'à ce que vous appeliez la <ph id="ph2">&lt;xref:System.Threading.Overlapped.Free%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)">
          <source><ph id="ph1">&lt;paramref name="nativeOverlappedPtr" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nativeOverlappedPtr" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="T:System.Threading.Overlapped">
          <source>Packs the current instance into a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure.</source>
          <target state="translated">Compresse l'instance actuelle en une structure <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="T:System.Threading.Overlapped">
          <source>Does not propagate the calling stack.</source>
          <target state="translated">Ne propage pas la pile appelante.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Threading.IOCompletionCallback" /&gt;</ph> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Threading.IOCompletionCallback" /&gt;</ph> qui représente la méthode de rappel appelée lorsque l'opération asynchrone d'E/S est terminée.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)">
          <source>Packs the current instance into a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure specifying the delegate to invoke when the asynchronous I/O operation is complete.</source>
          <target state="translated">Comprime l'instance actuelle dans une structure <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> pour spécifier le délégué à appeler lorsque l'opération d'E/S asynchrone est terminée.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)">
          <source>Does not propagate the calling stack.</source>
          <target state="translated">Ne propage pas la pile appelante.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)">
          <source>An unmanaged pointer to a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure.</source>
          <target state="translated">Pointeur non managé vers une structure <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)">
          <source>The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</source>
          <target state="translated">Le pointeur non managé retourné par cette méthode peut être passé au système d’exploitation dans les opérations d’e/s avec chevauchement.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure is fixed in physical memory until <ph id="ph2">&lt;xref:System.Threading.Overlapped.Unpack%2A&gt;</ph> is called.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure est fixe dans la mémoire physique jusqu'à ce que <ph id="ph2">&lt;xref:System.Threading.Overlapped.Unpack%2A&gt;</ph> est appelée.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)">
          <source>The caller is responsible for pinning the buffer.</source>
          <target state="translated">L’appelant est chargé d’épingler la mémoire tampon.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)">
          <source>If the application domain is unloaded, however, the handle to the pinned buffer is destroyed and the buffer is released, leaving the I/O operation to write to the freed address.</source>
          <target state="translated">Si le domaine d’application est déchargé, toutefois, le handle de la mémoire tampon épinglée est détruit et la mémoire tampon est, en laissant l’opération d’e/s d’écriture à l’adresse libérée.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)">
          <source>For this reason, it is better to use the <ph id="ph1">&lt;xref:System.Threading.Overlapped.UnsafePack%28System.Threading.IOCompletionCallback%2CSystem.Object%29&gt;</ph> method overload, in which the runtime pins the buffer.</source>
          <target state="translated">Pour cette raison, il est préférable d’utiliser le <ph id="ph1">&lt;xref:System.Threading.Overlapped.UnsafePack%28System.Threading.IOCompletionCallback%2CSystem.Object%29&gt;</ph> la surcharge de méthode, dans laquelle le runtime épingle la mémoire tampon.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)">
          <source>Using the <ph id="ph1">&lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;</ph> method could inadvertently open up a security hole.</source>
          <target state="translated">À l’aide de la <ph id="ph1">&lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;</ph> méthode peut accidentellement ouvrir une faille de sécurité.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Sécurité d’accès du code base ses vérifications d’autorisations sur les autorisations de tous les appelants sur la pile.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;</ph> method does not propagate the calling stack.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;</ph> méthode ne propage pas la pile appelante.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)">
          <source>Malicious code might be able to exploit this to avoid permission checks.</source>
          <target state="translated">Un code malveillant peut être en mesure d’exploiter ceci pour éviter les vérifications d’autorisations.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph> has already been packed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph> en cours a déjà été compressé.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Threading.IOCompletionCallback" /&gt;</ph> delegate that represents the callback method invoked when the asynchronous I/O operation completes.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.Threading.IOCompletionCallback" /&gt;</ph> qui représente la méthode de rappel appelée lorsque l'opération asynchrone d'E/S est terminée.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)">
          <source>An object or array of objects representing the input or output buffer for the operation.</source>
          <target state="translated">Objet ou tableau d'objets représentant la mémoire tampon d'entrée ou de sortie pour l'opération.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)">
          <source>Each object represents a buffer, for example an array of bytes.</source>
          <target state="translated">Chaque objet représente une mémoire tampon, par exemple un tableau d'octets.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)">
          <source>Packs the current instance into a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure, specifying the delegate to invoke when the asynchronous I/O operation is complete and the managed object that serves as a buffer.</source>
          <target state="translated">Comprime l'instance actuelle dans une structure <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> pour spécifier le délégué à appeler lorsque l'opération d'E/S asynchrone est terminée et l'objet managé qui sert de mémoire tampon.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)">
          <source>Does not propagate the calling stack.</source>
          <target state="translated">Ne propage pas la pile appelante.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)">
          <source>An unmanaged pointer to a <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure.</source>
          <target state="translated">Pointeur non managé vers une structure <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)">
          <source>The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</source>
          <target state="translated">Le pointeur non managé retourné par cette méthode peut être passé au système d’exploitation dans les opérations d’e/s avec chevauchement.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure is fixed in physical memory until <ph id="ph2">&lt;xref:System.Threading.Overlapped.Unpack%2A&gt;</ph> is called.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure est fixe dans la mémoire physique jusqu'à ce que <ph id="ph2">&lt;xref:System.Threading.Overlapped.Unpack%2A&gt;</ph> est appelée.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)">
          <source>The buffer or buffers specified in <ph id="ph1">`userData`</ph> must be the same as those passed to the unmanaged operating system function that performs the asynchronous I/O.</source>
          <target state="translated">La mémoire tampon ou les mémoires tampon spécifié dans <ph id="ph1">`userData`</ph> doit être le même que celles qui sont passées à la fonction de système d’exploitation non géré qui effectue l’e/s asynchrones.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)">
          <source>The runtime pins the buffer or buffers specified in<ph id="ph1">`userData`</ph> for the duration of the I/O operation.</source>
          <target state="translated">Le runtime épingle la mémoire tampon ou les mémoires tampon spécifié dans<ph id="ph1">`userData`</ph> pendant la durée de l’opération d’e/s.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)">
          <source>If the application domain is unloaded, the runtime keeps the memory pinned until the I/O operation completes.</source>
          <target state="translated">Si le domaine d’application est déchargé, le runtime garde la mémoire épinglée jusqu'à ce que l’opération d’e/s se termine.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)">
          <source>Using the <ph id="ph1">&lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;</ph> method could inadvertently open up a security hole.</source>
          <target state="translated">À l’aide de la <ph id="ph1">&lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;</ph> méthode peut accidentellement ouvrir une faille de sécurité.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Sécurité d’accès du code base ses vérifications d’autorisations sur les autorisations de tous les appelants sur la pile.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;</ph> method does not propagate the calling stack.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.Overlapped.UnsafePack%2A&gt;</ph> méthode ne propage pas la pile appelante.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)">
          <source>Malicious code might be able to exploit this to avoid permission checks.</source>
          <target state="translated">Un code malveillant peut être en mesure d’exploiter ceci pour éviter les vérifications d’autorisations.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">L'appelant n'a pas l'autorisation requise.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph> is already packed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Overlapped" /&gt;</ph> en cours est déjà compacté.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>