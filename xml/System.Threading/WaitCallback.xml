<Type Name="WaitCallback" FullName="System.Threading.WaitCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3b3440ac2a814ac3b46ed007085faf8975b8c5cc" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36605650" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void WaitCallback(object state);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitCallback(state As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitCallback(System::Object ^ state);" />
  <TypeSignature Language="F#" Value="type WaitCallback = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">Objet contenant les informations que la méthode de rappel doit utiliser.</param>
    <summary>Représente une méthode de rappel qu'un thread du pool doit exécuter.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitCallback> représente une méthode de rappel que vous souhaitez exécuter sur un <xref:System.Threading.ThreadPool> thread. Créer le délégué en passant votre méthode de rappel à le <xref:System.Threading.WaitCallback> constructeur. Votre méthode doit avoir la signature illustrée ici.  
  
 File d’attente de la tâche pour l’exécution en passant le <xref:System.Threading.WaitCallback> déléguer à <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=nameWithType>. Votre méthode de rappel s’exécute lorsqu’un thread du pool devient disponible.  
  
> [!NOTE]
>  Les utilisateurs de Visual Basic peuvent omettre la <xref:System.Threading.WaitCallback> constructeur et utiliser simplement la `AddressOf` opérateur lors du passage de la méthode de rappel à <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>. Visual Basic appelle automatiquement le constructeur délégué approprié.  
  
 Si vous souhaitez passer des informations à votre méthode de rappel, créez un objet qui contient les informations nécessaires et passez-le à <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> lors de la file d’attente la tâche pour l’exécution. Chaque fois que votre méthode de rappel s’exécute, le `state` paramètre contient cet objet.  
  
 Pour plus d’informations sur l’utilisation de rappels pour synchroniser les threads du pool, consultez [le Pool de threads gérés](~/docs/standard/threading/the-managed-thread-pool.md).  
  
   
  
## Examples  
 Cette section contient deux exemples. Le premier exemple montre comment vous pouvez en file d’attente une tâche simple pour l’exécution par le pool de threads.  
  
 Le deuxième exemple montre comment une tâche en file d’attente et lui passer des informations.  
  
 **Exemple 1**  
  
 Cet exemple montre comment utiliser le <xref:System.Threading.WaitCallback> délégué à la file d’attente une tâche pour l’exécution par le pool de threads. L’exemple de code utilise le <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> la surcharge de méthode en file d’attente une tâche, qui est représentée par un <xref:System.Threading.WaitCallback> qui encapsule le `ThreadProc` (méthode), à exécuter lorsqu’un thread devient disponible. Aucune information de tâche n’est fournie avec cette surcharge. Par conséquent, les informations qui sont disponibles pour le `ThreadProc` méthode est limitée à l’objet auquel appartient la méthode.  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 **Exemple 2**  
  
 Cet exemple montre comment créer un objet qui contient des informations sur la tâche. Il montre également comment passer cet objet à une tâche est en file d’attente pour l’exécution par le pool de threads.  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadPool" />
  </Docs>
</Type>