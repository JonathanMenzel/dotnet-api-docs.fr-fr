<Type Name="Interlocked" FullName="System.Threading.Interlocked">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="883047e940a7b189bf8c52c13e9ba85d0fb9bf82" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Interlocked" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Interlocked extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Interlocked" />
  <TypeSignature Language="VB.NET" Value="Public Class Interlocked" />
  <TypeSignature Language="C++ CLI" Value="public ref class Interlocked abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="931d6-101">Provides atomic operations for variables that are shared by multiple threads.</span>
      <span class="sxs-lookup">
        <span data-stu-id="931d6-101">Provides atomic operations for variables that are shared by multiple threads.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="931d6-102">Les méthodes de cette classe vous protéger contre les erreurs pouvant se produire lorsque le planificateur fait basculer les contextes pendant un thread est mise à jour d’une variable qui est accessible par les autres threads ou lorsque deux threads sont exécutent simultanément sur des processeurs distincts.</span><span class="sxs-lookup"><span data-stu-id="931d6-102">The methods of this class help protect against errors that can occur when the scheduler switches contexts while a thread is updating a variable that can be accessed by other threads, or when two threads are executing concurrently on separate processors.</span></span> <span data-ttu-id="931d6-103">Les membres de cette classe ne lèvent pas d’exceptions.</span><span class="sxs-lookup"><span data-stu-id="931d6-103">The members of this class do not throw exceptions.</span></span>  
  
 <span data-ttu-id="931d6-104">Le <xref:System.Threading.Interlocked.Increment%2A> et <xref:System.Threading.Interlocked.Decrement%2A> méthodes incrémenter ou décrémenter une variable et stocker la valeur obtenue en une seule opération.</span><span class="sxs-lookup"><span data-stu-id="931d6-104">The <xref:System.Threading.Interlocked.Increment%2A> and <xref:System.Threading.Interlocked.Decrement%2A> methods increment or decrement a variable and store the resulting value in a single operation.</span></span> <span data-ttu-id="931d6-105">Sur la plupart des ordinateurs, l’incrémentation d’une variable n’est pas une opération atomique comme suit :</span><span class="sxs-lookup"><span data-stu-id="931d6-105">On most computers, incrementing a variable is not an atomic operation, requiring the following steps:</span></span>  
  
1.  <span data-ttu-id="931d6-106">Charger une valeur d’une variable d’instance dans un Registre.</span><span class="sxs-lookup"><span data-stu-id="931d6-106">Load a value from an instance variable into a register.</span></span>  
  
2.  <span data-ttu-id="931d6-107">Incrémenter ou décrémenter la valeur.</span><span class="sxs-lookup"><span data-stu-id="931d6-107">Increment or decrement the value.</span></span>  
  
3.  <span data-ttu-id="931d6-108">Stocker la valeur dans la variable d’instance.</span><span class="sxs-lookup"><span data-stu-id="931d6-108">Store the value in the instance variable.</span></span>  
  
 <span data-ttu-id="931d6-109">Si vous n’utilisez pas <xref:System.Threading.Interlocked.Increment%2A> et <xref:System.Threading.Interlocked.Decrement%2A>, un thread peut être interrompu après avoir exécuté les deux premières étapes.</span><span class="sxs-lookup"><span data-stu-id="931d6-109">If you do not use <xref:System.Threading.Interlocked.Increment%2A> and <xref:System.Threading.Interlocked.Decrement%2A>, a thread can be preempted after executing the first two steps.</span></span> <span data-ttu-id="931d6-110">Un autre thread peut alors exécuter les trois étapes.</span><span class="sxs-lookup"><span data-stu-id="931d6-110">Another thread can then execute all three steps.</span></span> <span data-ttu-id="931d6-111">Lorsque le premier thread reprend l’exécution, elle remplace la valeur dans la variable d’instance et l’effet de l’incrémentation ou la décrémentation effectuée par le second thread est perdue.</span><span class="sxs-lookup"><span data-stu-id="931d6-111">When the first thread resumes execution, it overwrites the value in the instance variable, and the effect of the increment or decrement performed by the second thread is lost.</span></span>  
  
 <span data-ttu-id="931d6-112">Le <xref:System.Threading.Interlocked.Exchange%2A> méthode échange les valeurs des variables spécifiées de manière atomique.</span><span class="sxs-lookup"><span data-stu-id="931d6-112">The <xref:System.Threading.Interlocked.Exchange%2A> method atomically exchanges the values of the specified variables.</span></span> <span data-ttu-id="931d6-113">Le <xref:System.Threading.Interlocked.CompareExchange%2A> méthode combine deux opérations : comparaison de deux valeurs et stockage d’une troisième valeur dans une des variables, en fonction du résultat de la comparaison.</span><span class="sxs-lookup"><span data-stu-id="931d6-113">The <xref:System.Threading.Interlocked.CompareExchange%2A> method combines two operations: comparing two values and storing a third value in one of the variables, based on the outcome of the comparison.</span></span> <span data-ttu-id="931d6-114">Les opérations de comparaison et d’échange sont effectuées comme une opération atomique.</span><span class="sxs-lookup"><span data-stu-id="931d6-114">The compare and exchange operations are performed as an atomic operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="931d6-115">L’exemple de code suivant montre un mécanisme de verrouillage de ressources thread-safe.</span><span class="sxs-lookup"><span data-stu-id="931d6-115">The following code example shows a thread-safe resource locking mechanism.</span></span>  
  
 [!code-cpp[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="931d6-116">Ce type est thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="931d6-116">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="931d6-117">Adds two integers and replaces the first integer with the sum, as an atomic operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-117">Adds two integers and replaces the first integer with the sum, as an atomic operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static int Add (ref int location1, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Add(int32&amp; location1, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (ByRef location1 As Integer, value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Add(int % location1, int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="931d6-118">A variable containing the first value to be added.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-118">A variable containing the first value to be added.</span>
          </span>
          <span data-ttu-id="931d6-119">The sum of the two values is stored in <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-119">The sum of the two values is stored in <c>location1</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="931d6-120">The value to be added to the integer at <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-120">The value to be added to the integer at <c>location1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-121">Adds two 32-bit integers and replaces the first integer with the sum, as an atomic operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-121">Adds two 32-bit integers and replaces the first integer with the sum, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-122">The new value stored at <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-122">The new value stored at <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="931d6-123">Cette méthode gère une condition de dépassement de capacité en encapsulant : si la valeur à `location1` est <xref:System.Int32.MaxValue?displayProperty=nameWithType> et `value` est 1, le résultat est <xref:System.Int32.MinValue?displayProperty=nameWithType>; si `value` est 2, le résultat est (<xref:System.Int32.MinValue?displayProperty=nameWithType> + 1) ; et ainsi de suite.</span><span class="sxs-lookup"><span data-stu-id="931d6-123">This method handles an overflow condition by wrapping: if the value at `location1` is <xref:System.Int32.MaxValue?displayProperty=nameWithType> and `value` is 1, the result is <xref:System.Int32.MinValue?displayProperty=nameWithType>; if `value` is 2, the result is (<xref:System.Int32.MinValue?displayProperty=nameWithType> + 1); and so on.</span></span> <span data-ttu-id="931d6-124">Aucune exception n'est levée.</span><span class="sxs-lookup"><span data-stu-id="931d6-124">No exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="931d6-125">The address of <paramref name="location1" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-125">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static long Add (ref long location1, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Add(int64&amp; location1, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (ByRef location1 As Long, value As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Add(long % location1, long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="931d6-126">A variable containing the first value to be added.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-126">A variable containing the first value to be added.</span>
          </span>
          <span data-ttu-id="931d6-127">The sum of the two values is stored in <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-127">The sum of the two values is stored in <c>location1</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="931d6-128">The value to be added to the integer at <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-128">The value to be added to the integer at <c>location1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-129">Adds two 64-bit integers and replaces the first integer with the sum, as an atomic operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-129">Adds two 64-bit integers and replaces the first integer with the sum, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-130">The new value stored at <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-130">The new value stored at <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="931d6-131">Cette méthode gère une condition de dépassement de capacité en encapsulant : si la valeur à `location1` est <xref:System.Int64.MaxValue?displayProperty=nameWithType> et `value` est 1, le résultat est <xref:System.Int64.MinValue?displayProperty=nameWithType>; si `value` est 2, le résultat est (<xref:System.Int64.MinValue?displayProperty=nameWithType> + 1) ; et ainsi de suite.</span><span class="sxs-lookup"><span data-stu-id="931d6-131">This method handles an overflow condition by wrapping: if the value at `location1` is <xref:System.Int64.MaxValue?displayProperty=nameWithType> and `value` is 1, the result is <xref:System.Int64.MinValue?displayProperty=nameWithType>; if `value` is 2, the result is (<xref:System.Int64.MinValue?displayProperty=nameWithType> + 1); and so on.</span></span> <span data-ttu-id="931d6-132">Aucune exception n'est levée.</span><span class="sxs-lookup"><span data-stu-id="931d6-132">No exception is thrown.</span></span>  
  
 <span data-ttu-id="931d6-133">Le <xref:System.Threading.Interlocked.Read%2A> (méthode) et les surcharges 64 bits de la <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, et <xref:System.Threading.Interlocked.Add%2A> méthodes sont véritablement atomiques que sur les systèmes où une <xref:System.IntPtr?displayProperty=nameWithType> est de 64 bits.</span><span class="sxs-lookup"><span data-stu-id="931d6-133">The <xref:System.Threading.Interlocked.Read%2A> method and the 64-bit overloads of the <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, and <xref:System.Threading.Interlocked.Add%2A> methods are truly atomic only on systems where a <xref:System.IntPtr?displayProperty=nameWithType> is 64 bits long.</span></span> <span data-ttu-id="931d6-134">Sur les autres systèmes, ces méthodes sont atomiques par rapport à l’autre, mais pas par rapport à d’autres moyens d’accéder aux données.</span><span class="sxs-lookup"><span data-stu-id="931d6-134">On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data.</span></span> <span data-ttu-id="931d6-135">Par conséquent, pour être thread-safe sur les systèmes 32 bits, l’accès à une valeur 64 bits doit être effectuée via les membres de la <xref:System.Threading.Interlocked> classe.</span><span class="sxs-lookup"><span data-stu-id="931d6-135">Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <xref:System.Threading.Interlocked> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="931d6-136">The address of <paramref name="location1" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-136">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Threading.Interlocked.Increment" />
        <altmember cref="Overload:System.Threading.Interlocked.Decrement" />
        <altmember cref="M:System.Threading.Interlocked.Read(System.Int64@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareExchange">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="931d6-137">Compares two values for equality and, if they are equal, replaces the first value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-137">Compares two values for equality and, if they are equal, replaces the first value.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareExchange">
      <MemberSignature Language="C#" Value="public static double CompareExchange (ref double location1, double value, double comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 CompareExchange(float64&amp; location1, float64 value, float64 comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange (ByRef location1 As Double, value As Double, comparand As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double CompareExchange(double % location1, double value, double comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="comparand" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="931d6-138">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-138">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="931d6-139">The value that replaces the destination value if the comparison results in equality.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-139">The value that replaces the destination value if the comparison results in equality.</span>
          </span>
        </param>
        <param name="comparand">
          <span data-ttu-id="931d6-140">The value that is compared to the value at <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-140">The value that is compared to the value at <c>location1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-141">Compares two double-precision floating point numbers for equality and, if they are equal, replaces the first value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-141">Compares two double-precision floating point numbers for equality and, if they are equal, replaces the first value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-142">The original value in <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-142">The original value in <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="931d6-143">Si `comparand` et la valeur dans `location1` sont identiques, `value` est stocké dans `location1`.</span><span class="sxs-lookup"><span data-stu-id="931d6-143">If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="931d6-144">Dans le cas contraire, aucune opération n'est effectuée.</span><span class="sxs-lookup"><span data-stu-id="931d6-144">Otherwise, no operation is performed.</span></span> <span data-ttu-id="931d6-145">Les opérations de comparaison et d’échange sont effectuées comme une opération atomique.</span><span class="sxs-lookup"><span data-stu-id="931d6-145">The compare and exchange operations are performed as an atomic operation.</span></span> <span data-ttu-id="931d6-146">La valeur de retour de <xref:System.Threading.Interlocked.CompareExchange%2A> est la valeur d’origine dans `location1`, que l’échange ait lieu ou non.</span><span class="sxs-lookup"><span data-stu-id="931d6-146">The return value of <xref:System.Threading.Interlocked.CompareExchange%2A> is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="931d6-147">L’exemple de code suivant montre une méthode thread-safe qui cumule un total en cours d’exécution de <xref:System.Double> valeurs.</span><span class="sxs-lookup"><span data-stu-id="931d6-147">The following code example demonstrates a thread-safe method that accumulates a running total of <xref:System.Double> values.</span></span> <span data-ttu-id="931d6-148">Deux threads ajoutent une série de <xref:System.Double> à l’aide de la méthode thread-safe et l’addition ordinaire, lorsque les threads se terminent les totaux sont comparés.</span><span class="sxs-lookup"><span data-stu-id="931d6-148">Two threads add a series of <xref:System.Double> values using the thread-safe method and ordinary addition, and when the threads complete the totals are compared.</span></span> <span data-ttu-id="931d6-149">Sur un ordinateur biprocesseur, il existe une différence significative dans les totaux.</span><span class="sxs-lookup"><span data-stu-id="931d6-149">On a dual-processor computer, there is a significant difference in the totals.</span></span>  
  
 <span data-ttu-id="931d6-150">Dans la méthode thread-safe, la valeur initiale du total évolutif est enregistrée, puis la <xref:System.Threading.Interlocked.CompareExchange%2A> méthode est utilisée pour échanger le total fraîchement calculé avec l’ancien total.</span><span class="sxs-lookup"><span data-stu-id="931d6-150">In the thread-safe method, the initial value of the running total is saved, and then the <xref:System.Threading.Interlocked.CompareExchange%2A> method is used to exchange the newly computed total with the old total.</span></span> <span data-ttu-id="931d6-151">Si la valeur de retour n’est pas égale à la valeur enregistrée du total en cours d’exécution, puis un autre thread a mis à jour le total entre-temps.</span><span class="sxs-lookup"><span data-stu-id="931d6-151">If the return value is not equal to the saved value of the running total, then another thread has updated the total in the meantime.</span></span> <span data-ttu-id="931d6-152">Dans ce cas, la tentative de mise à jour le total en cours d’exécution doit être répétée.</span><span class="sxs-lookup"><span data-stu-id="931d6-152">In that case, the attempt to update the running total must be repeated.</span></span>  
  
 [!code-csharp[System.Threading.Interlocked CompareExchange Double#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange Double/cs/source.cs#1)]
 [!code-vb[System.Threading.Interlocked CompareExchange Double#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange Double/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="931d6-153">The address of <paramref name="location1" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-153">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CompareExchange">
      <MemberSignature Language="C#" Value="public static int CompareExchange (ref int location1, int value, int comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CompareExchange(int32&amp; location1, int32 value, int32 comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange (ByRef location1 As Integer, value As Integer, comparand As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CompareExchange(int % location1, int value, int comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="comparand" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="931d6-154">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-154">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="931d6-155">The value that replaces the destination value if the comparison results in equality.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-155">The value that replaces the destination value if the comparison results in equality.</span>
          </span>
        </param>
        <param name="comparand">
          <span data-ttu-id="931d6-156">The value that is compared to the value at <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-156">The value that is compared to the value at <c>location1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-157">Compares two 32-bit signed integers for equality and, if they are equal, replaces the first value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-157">Compares two 32-bit signed integers for equality and, if they are equal, replaces the first value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-158">The original value in <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-158">The original value in <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="931d6-159">Si `comparand` et la valeur dans `location1` sont identiques, `value` est stocké dans `location1`.</span><span class="sxs-lookup"><span data-stu-id="931d6-159">If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="931d6-160">Dans le cas contraire, aucune opération n'est effectuée.</span><span class="sxs-lookup"><span data-stu-id="931d6-160">Otherwise, no operation is performed.</span></span> <span data-ttu-id="931d6-161">Les opérations de comparaison et d’échange sont effectuées comme une opération atomique.</span><span class="sxs-lookup"><span data-stu-id="931d6-161">The compare and exchange operations are performed as an atomic operation.</span></span> <span data-ttu-id="931d6-162">La valeur de retour de <xref:System.Threading.Interlocked.CompareExchange%2A> est la valeur d’origine dans `location1`, que l’échange ait lieu ou non.</span><span class="sxs-lookup"><span data-stu-id="931d6-162">The return value of <xref:System.Threading.Interlocked.CompareExchange%2A> is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="931d6-163">L’exemple de code suivant montre une méthode thread-safe qui cumule un total en cours d’exécution.</span><span class="sxs-lookup"><span data-stu-id="931d6-163">The following code example demonstrates a thread-safe method that accumulates a running total.</span></span> <span data-ttu-id="931d6-164">La valeur initiale du total évolutif est enregistrée, puis la <xref:System.Threading.Interlocked.CompareExchange%2A> méthode est utilisée pour échanger le total fraîchement calculé avec l’ancien total.</span><span class="sxs-lookup"><span data-stu-id="931d6-164">The initial value of the running total is saved, and then the <xref:System.Threading.Interlocked.CompareExchange%2A> method is used to exchange the newly computed total with the old total.</span></span> <span data-ttu-id="931d6-165">Si la valeur de retour n’est pas égale à la valeur enregistrée du total en cours d’exécution, puis un autre thread a mis à jour le total entre-temps.</span><span class="sxs-lookup"><span data-stu-id="931d6-165">If the return value is not equal to the saved value of the running total, then another thread has updated the total in the meantime.</span></span> <span data-ttu-id="931d6-166">Dans ce cas, la tentative de mise à jour le total en cours d’exécution doit être répétée.</span><span class="sxs-lookup"><span data-stu-id="931d6-166">In that case, the attempt to update the running total must be repeated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="931d6-167">Le <xref:System.Threading.Interlocked.Add%2A> méthode, introduite dans la version 2.0 du .NET Framework, offre un moyen plus pratique de cumuler les totaux en cours d’exécution de thread-safe pour les entiers.</span><span class="sxs-lookup"><span data-stu-id="931d6-167">The <xref:System.Threading.Interlocked.Add%2A> method, introduced in version 2.0 of the .NET Framework, provides a more convenient way to accumulate thread-safe running totals for integers.</span></span>  
  
 [!code-cpp[System.Threading.Interlocked CompareExchange0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Interlocked CompareExchange0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange0/CS/source.cs#1)]
 [!code-vb[System.Threading.Interlocked CompareExchange0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="931d6-168">The address of <paramref name="location1" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-168">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CompareExchange">
      <MemberSignature Language="C#" Value="public static long CompareExchange (ref long location1, long value, long comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 CompareExchange(int64&amp; location1, int64 value, int64 comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange (ByRef location1 As Long, value As Long, comparand As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long CompareExchange(long % location1, long value, long comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="comparand" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="931d6-169">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-169">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="931d6-170">The value that replaces the destination value if the comparison results in equality.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-170">The value that replaces the destination value if the comparison results in equality.</span>
          </span>
        </param>
        <param name="comparand">
          <span data-ttu-id="931d6-171">The value that is compared to the value at <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-171">The value that is compared to the value at <c>location1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-172">Compares two 64-bit signed integers for equality and, if they are equal, replaces the first value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-172">Compares two 64-bit signed integers for equality and, if they are equal, replaces the first value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-173">The original value in <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-173">The original value in <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="931d6-174">Si `comparand` et la valeur dans `location1` sont identiques, `value` est stocké dans `location1`.</span><span class="sxs-lookup"><span data-stu-id="931d6-174">If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="931d6-175">Dans le cas contraire, aucune opération n'est effectuée.</span><span class="sxs-lookup"><span data-stu-id="931d6-175">Otherwise, no operation is performed.</span></span> <span data-ttu-id="931d6-176">Les opérations de comparaison et d’échange sont effectuées comme une opération atomique.</span><span class="sxs-lookup"><span data-stu-id="931d6-176">The compare and exchange operations are performed as an atomic operation.</span></span> <span data-ttu-id="931d6-177">La valeur de retour de <xref:System.Threading.Interlocked.CompareExchange%2A> est la valeur d’origine dans `location1`, que l’échange ait lieu ou non.</span><span class="sxs-lookup"><span data-stu-id="931d6-177">The return value of <xref:System.Threading.Interlocked.CompareExchange%2A> is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="931d6-178">The address of <paramref name="location1" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-178">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CompareExchange">
      <MemberSignature Language="C#" Value="public static IntPtr CompareExchange (ref IntPtr location1, IntPtr value, IntPtr comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int CompareExchange(native int&amp; location1, native int value, native int comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange (ByRef location1 As IntPtr, value As IntPtr, comparand As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr CompareExchange(IntPtr % location1, IntPtr value, IntPtr comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.IntPtr&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.IntPtr" />
        <Parameter Name="comparand" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="931d6-179">The destination <see cref="T:System.IntPtr" />, whose value is compared with the value of <c>comparand</c> and possibly replaced by <c>value</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-179">The destination <see cref="T:System.IntPtr" />, whose value is compared with the value of <c>comparand</c> and possibly replaced by <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="931d6-180">The <see cref="T:System.IntPtr" /> that replaces the destination value if the comparison results in equality.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-180">The <see cref="T:System.IntPtr" /> that replaces the destination value if the comparison results in equality.</span>
          </span>
        </param>
        <param name="comparand">
          <span data-ttu-id="931d6-181">The <see cref="T:System.IntPtr" /> that is compared to the value at <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-181">The <see cref="T:System.IntPtr" /> that is compared to the value at <c>location1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-182">Compares two platform-specific handles or pointers for equality and, if they are equal, replaces the first one.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-182">Compares two platform-specific handles or pointers for equality and, if they are equal, replaces the first one.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-183">The original value in <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-183">The original value in <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="931d6-184">Si `comparand` et la valeur dans `location1` sont identiques, `value` est stocké dans `location1`.</span><span class="sxs-lookup"><span data-stu-id="931d6-184">If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="931d6-185">Dans le cas contraire, aucune opération n'est effectuée.</span><span class="sxs-lookup"><span data-stu-id="931d6-185">Otherwise, no operation is performed.</span></span> <span data-ttu-id="931d6-186">Les opérations de comparaison et d’échange sont effectuées comme une opération atomique.</span><span class="sxs-lookup"><span data-stu-id="931d6-186">The compare and exchange operations are performed as an atomic operation.</span></span> <span data-ttu-id="931d6-187">La valeur de retour de cette méthode est la valeur d’origine dans `location1`, que l’échange ait lieu ou non.</span><span class="sxs-lookup"><span data-stu-id="931d6-187">The return value of this method is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="931d6-188"><xref:System.IntPtr> est un type spécifique à la plateforme.</span><span class="sxs-lookup"><span data-stu-id="931d6-188"><xref:System.IntPtr> is a platform-specific type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="931d6-189">The address of <paramref name="location1" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-189">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CompareExchange">
      <MemberSignature Language="C#" Value="public static object CompareExchange (ref object location1, object value, object comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CompareExchange(object&amp; location1, object value, object comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange (ByRef location1 As Object, value As Object, comparand As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CompareExchange(System::Object ^ % location1, System::Object ^ value, System::Object ^ comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="comparand" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="931d6-190">The destination object that is compared with <c>comparand</c> and possibly replaced.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-190">The destination object that is compared with <c>comparand</c> and possibly replaced.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="931d6-191">The object that replaces the destination object if the comparison results in equality.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-191">The object that replaces the destination object if the comparison results in equality.</span>
          </span>
        </param>
        <param name="comparand">
          <span data-ttu-id="931d6-192">The object that is compared to the object at <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-192">The object that is compared to the object at <c>location1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-193">Compares two objects for reference equality and, if they are equal, replaces the first object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-193">Compares two objects for reference equality and, if they are equal, replaces the first object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-194">The original value in <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-194">The original value in <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="931d6-195">Si `comparand` l’objet dans `location1` sont identiques, `value` est stocké dans `location1`.</span><span class="sxs-lookup"><span data-stu-id="931d6-195">If `comparand` and the object in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="931d6-196">Dans le cas contraire, aucune opération n'est effectuée.</span><span class="sxs-lookup"><span data-stu-id="931d6-196">Otherwise, no operation is performed.</span></span> <span data-ttu-id="931d6-197">Les opérations de comparaison et d’échange sont effectuées comme une opération atomique.</span><span class="sxs-lookup"><span data-stu-id="931d6-197">The compare and exchange operations are performed as an atomic operation.</span></span> <span data-ttu-id="931d6-198">La valeur de retour de <xref:System.Threading.Interlocked.CompareExchange%2A> est la valeur d’origine dans `location1`, que l’échange ait lieu ou non.</span><span class="sxs-lookup"><span data-stu-id="931d6-198">The return value of <xref:System.Threading.Interlocked.CompareExchange%2A> is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
 <span data-ttu-id="931d6-199">À partir de .NET Framework version 2.0, le <xref:System.Threading.Interlocked.CompareExchange%60%601%28%60%600%40%2C%60%600%2C%60%600%29> surcharge de méthode fournit une alternative de type sécurisé pour les types référence.</span><span class="sxs-lookup"><span data-stu-id="931d6-199">Beginning with .NET Framework version 2.0, the <xref:System.Threading.Interlocked.CompareExchange%60%601%28%60%600%40%2C%60%600%2C%60%600%29> method overload provides a type-safe alternative for reference types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="931d6-200">Les objets sont comparés à l’égalité des références, plutôt que <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="931d6-200">The objects are compared for reference equality, rather than <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="931d6-201">Par conséquent, deux instances boxed du même type de valeur (par exemple, l’entier 3) toujours semblent être inégaux, et aucune opération n’est effectuée.</span><span class="sxs-lookup"><span data-stu-id="931d6-201">As a result, two boxed instances of the same value type (for example, the integer 3) always appear to be unequal, and no operation is performed.</span></span> <span data-ttu-id="931d6-202">N’utilisez pas cette surcharge avec les types valeur.</span><span class="sxs-lookup"><span data-stu-id="931d6-202">Do not use this overload with value types.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="931d6-203">The address of <paramref name="location1" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-203">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CompareExchange">
      <MemberSignature Language="C#" Value="public static float CompareExchange (ref float location1, float value, float comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 CompareExchange(float32&amp; location1, float32 value, float32 comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange (ByRef location1 As Single, value As Single, comparand As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float CompareExchange(float % location1, float value, float comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="comparand" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="931d6-204">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-204">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="931d6-205">The value that replaces the destination value if the comparison results in equality.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-205">The value that replaces the destination value if the comparison results in equality.</span>
          </span>
        </param>
        <param name="comparand">
          <span data-ttu-id="931d6-206">The value that is compared to the value at <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-206">The value that is compared to the value at <c>location1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-207">Compares two single-precision floating point numbers for equality and, if they are equal, replaces the first value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-207">Compares two single-precision floating point numbers for equality and, if they are equal, replaces the first value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-208">The original value in <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-208">The original value in <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="931d6-209">Si `comparand` et la valeur dans `location1` sont identiques, `value` est stocké dans `location1`.</span><span class="sxs-lookup"><span data-stu-id="931d6-209">If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="931d6-210">Dans le cas contraire, aucune opération n'est effectuée.</span><span class="sxs-lookup"><span data-stu-id="931d6-210">Otherwise, no operation is performed.</span></span> <span data-ttu-id="931d6-211">Les opérations de comparaison et d’échange sont effectuées comme une opération atomique.</span><span class="sxs-lookup"><span data-stu-id="931d6-211">The compare and exchange operations are performed as an atomic operation.</span></span> <span data-ttu-id="931d6-212">La valeur de retour de <xref:System.Threading.Interlocked.CompareExchange%2A> est la valeur d’origine dans `location1`, que l’échange ait lieu ou non.</span><span class="sxs-lookup"><span data-stu-id="931d6-212">The return value of <xref:System.Threading.Interlocked.CompareExchange%2A> is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="931d6-213">L’exemple de code suivant montre une méthode thread-safe qui cumule un total en cours d’exécution de <xref:System.Single> valeurs.</span><span class="sxs-lookup"><span data-stu-id="931d6-213">The following code example demonstrates a thread-safe method that accumulates a running total of <xref:System.Single> values.</span></span> <span data-ttu-id="931d6-214">Deux threads ajoutent une série de <xref:System.Single> à l’aide de la méthode thread-safe et l’addition ordinaire, lorsque les threads se terminent les totaux sont comparés.</span><span class="sxs-lookup"><span data-stu-id="931d6-214">Two threads add a series of <xref:System.Single> values using the thread-safe method and ordinary addition, and when the threads complete the totals are compared.</span></span> <span data-ttu-id="931d6-215">Sur un ordinateur biprocesseur, il existe une différence significative dans les totaux.</span><span class="sxs-lookup"><span data-stu-id="931d6-215">On a dual-processor computer, there is a significant difference in the totals.</span></span>  
  
 <span data-ttu-id="931d6-216">Dans la méthode thread-safe, la valeur initiale du total évolutif est enregistrée, puis la <xref:System.Threading.Interlocked.CompareExchange%2A> méthode est utilisée pour échanger le total fraîchement calculé avec l’ancien total.</span><span class="sxs-lookup"><span data-stu-id="931d6-216">In the thread-safe method, the initial value of the running total is saved, and then the <xref:System.Threading.Interlocked.CompareExchange%2A> method is used to exchange the newly computed total with the old total.</span></span> <span data-ttu-id="931d6-217">Si la valeur de retour n’est pas égale à la valeur enregistrée du total en cours d’exécution, puis un autre thread a mis à jour le total entre-temps.</span><span class="sxs-lookup"><span data-stu-id="931d6-217">If the return value is not equal to the saved value of the running total, then another thread has updated the total in the meantime.</span></span> <span data-ttu-id="931d6-218">Dans ce cas, la tentative de mise à jour le total en cours d’exécution doit être répétée.</span><span class="sxs-lookup"><span data-stu-id="931d6-218">In that case, the attempt to update the running total must be repeated.</span></span>  
  
 [!code-csharp[System.Threading.Interlocked CompareExchange Single#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange Single/cs/source.cs#1)]
 [!code-vb[System.Threading.Interlocked CompareExchange Single#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked CompareExchange Single/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="931d6-219">The address of <paramref name="location1" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-219">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CompareExchange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T CompareExchange&lt;T&gt; (ref T location1, T value, T comparand) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T CompareExchange&lt;class T&gt;(!!T&amp; location1, !!T value, !!T comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareExchange(Of T As Class) (ByRef location1 As T, value As T, comparand As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T CompareExchange(T % location1, T value, T comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location1" Type="T&amp;" RefType="ref" />
        <Parameter Name="value" Type="T" />
        <Parameter Name="comparand" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="931d6-220">Le type à utiliser pour <c>location1</c>, <c>valeur</c>, et <c>comparateur</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-220">The type to be used for <c>location1</c>, <c>value</c>, and <c>comparand</c>.</span>
          </span>
          <span data-ttu-id="931d6-221">Ce type doit être un type référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-221">This type must be a reference type.</span>
          </span>
        </typeparam>
        <param name="location1">
          <span data-ttu-id="931d6-222">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-222">The destination, whose value is compared with <c>comparand</c> and possibly replaced.</span>
          </span>
          <span data-ttu-id="931d6-223">This is a reference parameter (<see langword="ref" /> in C#, <see langword="ByRef" /> in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-223">This is a reference parameter (<see langword="ref" /> in C#, <see langword="ByRef" /> in Visual Basic).</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="931d6-224">The value that replaces the destination value if the comparison results in equality.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-224">The value that replaces the destination value if the comparison results in equality.</span>
          </span>
        </param>
        <param name="comparand">
          <span data-ttu-id="931d6-225">The value that is compared to the value at <c>location1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-225">The value that is compared to the value at <c>location1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-226">Compares two instances of the specified reference type <paramref name="T" /> for equality and, if they are equal, replaces the first one.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-226">Compares two instances of the specified reference type <paramref name="T" /> for equality and, if they are equal, replaces the first one.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-227">The original value in <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-227">The original value in <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="931d6-228">Si `comparand` et la valeur dans `location1` sont identiques, `value` est stocké dans `location1`.</span><span class="sxs-lookup"><span data-stu-id="931d6-228">If `comparand` and the value in `location1` are equal, then `value` is stored in `location1`.</span></span> <span data-ttu-id="931d6-229">Dans le cas contraire, aucune opération n'est effectuée.</span><span class="sxs-lookup"><span data-stu-id="931d6-229">Otherwise, no operation is performed.</span></span> <span data-ttu-id="931d6-230">La comparaison et l’échange sont effectuées comme une opération atomique.</span><span class="sxs-lookup"><span data-stu-id="931d6-230">The comparison and the exchange are performed as an atomic operation.</span></span> <span data-ttu-id="931d6-231">La valeur de retour de cette méthode est la valeur d’origine dans `location1`, que l’échange ait lieu ou non.</span><span class="sxs-lookup"><span data-stu-id="931d6-231">The return value of this method is the original value in `location1`, whether or not the exchange takes place.</span></span>  
  
 <span data-ttu-id="931d6-232">Cette méthode prend uniquement en charge les types référence.</span><span class="sxs-lookup"><span data-stu-id="931d6-232">This method only supports reference types.</span></span> <span data-ttu-id="931d6-233">Il existe des surcharges de la <xref:System.Threading.Interlocked.CompareExchange%2A> méthode pour les types valeur <xref:System.Int32>, <xref:System.Int64>, <xref:System.IntPtr>, <xref:System.Single>, et <xref:System.Double>, mais il n’existe aucune prise en charge pour les autres types de valeur.</span><span class="sxs-lookup"><span data-stu-id="931d6-233">There are overloads of the <xref:System.Threading.Interlocked.CompareExchange%2A> method for the value types <xref:System.Int32>, <xref:System.Int64>, <xref:System.IntPtr>, <xref:System.Single>, and <xref:System.Double>, but there is no support for other value types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="931d6-234">Cette surcharge de méthode est préférable à la <xref:System.Threading.Interlocked.CompareExchange%28System.Object%40%2CSystem.Object%2CSystem.Object%29> surcharge de méthode, car cette dernière nécessite l’accès à liaison tardive à l’objet de destination.</span><span class="sxs-lookup"><span data-stu-id="931d6-234">This method overload is preferable to the <xref:System.Threading.Interlocked.CompareExchange%28System.Object%40%2CSystem.Object%2CSystem.Object%29> method overload, because the latter requires the destination object to be accessed late-bound.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="931d6-235">The address of <paramref name="location1" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-235">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Decrement">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="931d6-236">Decrements a specified variable and stores the result, as an atomic operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-236">Decrements a specified variable and stores the result, as an atomic operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static int Decrement (ref int location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Decrement(int32&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Decrement(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Decrement (ByRef location As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Decrement(int % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="931d6-237">The variable whose value is to be decremented.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-237">The variable whose value is to be decremented.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-238">Decrements a specified variable and stores the result, as an atomic operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-238">Decrements a specified variable and stores the result, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-239">The decremented value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-239">The decremented value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="931d6-240">Cette méthode gère une condition de dépassement de capacité en encapsulant : si `location`  =  <xref:System.Int32.MinValue?displayProperty=nameWithType>, `location` - 1 = <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="931d6-240">This method handles an overflow condition by wrapping: If `location` = <xref:System.Int32.MinValue?displayProperty=nameWithType>, `location` - 1 = <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="931d6-241">Aucune exception n'est levée.</span><span class="sxs-lookup"><span data-stu-id="931d6-241">No exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="931d6-242">L’exemple suivant détermine le nombre de numéros aléatoire comprise entre 0 et 1 000 est requises pour générer des nombres aléatoires de 1 000 avec une valeur du milieu.</span><span class="sxs-lookup"><span data-stu-id="931d6-242">The following example determines how many random numbers that range from 0 to 1,000 are required to generate 1,000 random numbers with a midpoint value.</span></span> <span data-ttu-id="931d6-243">Pour suivre le nombre de valeurs du milieu, une variable, `midpointCount`, est égal à 1 000 et décrémenté chaque fois que le Générateur de nombres aléatoires retourne une valeur du milieu.</span><span class="sxs-lookup"><span data-stu-id="931d6-243">To keep track of the number of midpoint values, a variable, `midpointCount`, is set equal to 1,000 and decremented each time the random number generator returns a midpoint value.</span></span> <span data-ttu-id="931d6-244">Étant donné que trois threads génèrent des nombres aléatoires, le <xref:System.Threading.Interlocked.Decrement%28System.Int32%40%29> méthode est appelée pour vous assurer que plusieurs threads ne mettez à jour `midpointCount` simultanément.</span><span class="sxs-lookup"><span data-stu-id="931d6-244">Because three threads generate the random numbers, the <xref:System.Threading.Interlocked.Decrement%28System.Int32%40%29> method is called to ensure that multiple threads don't update `midpointCount` concurrently.</span></span> <span data-ttu-id="931d6-245">Notez qu’un verrou est également utilisé pour protéger le Générateur de nombres aléatoires et qui un <xref:System.Threading.CountdownEvent> objet est utilisé pour vous assurer que le `Main` méthode ne terminer l’exécution avant les trois threads.</span><span class="sxs-lookup"><span data-stu-id="931d6-245">Note that a lock is also used to protect the random number generator, and that a <xref:System.Threading.CountdownEvent> object is used to ensure that the `Main` method doesn't finish execution before the three threads.</span></span>  
  
 [!code-csharp[System.Threading.Interlocked.Decrement#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.interlocked.decrement/cs/decrement1.cs#1)]
 [!code-vb[System.Threading.Interlocked.Decrement#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.interlocked.decrement/vb/decrement1.vb#1)]  
  
 <span data-ttu-id="931d6-246">L’exemple suivant est semblable au précédent, sauf qu’elle utilise au lieu d’une procédure de thread pour générer des entiers aléatoires milieu 50 000.</span><span class="sxs-lookup"><span data-stu-id="931d6-246">The following example is similar to the previous one, except that it uses the  instead of a thread procedure to generate 50,000 random midpoint integers.</span></span> <span data-ttu-id="931d6-247">Dans cet exemple, une expression lambda remplace le `GenerateNumbers` procédure de thread et l’appel à la <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> méthode élimine le besoin du <xref:System.Threading.CountdownEvent> objet.</span><span class="sxs-lookup"><span data-stu-id="931d6-247">In this example, a lambda expression replaces the `GenerateNumbers` thread procedure, and the call to the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method eliminates the need for the <xref:System.Threading.CountdownEvent> object.</span></span>  
  
 [!code-csharp[System.Threading.Interlocked.Decrement#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.interlocked.decrement/cs/decrement2.cs#2)]
 [!code-vb[System.Threading.Interlocked.Decrement#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.interlocked.decrement/vb/decrement2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="931d6-248">The address of <paramref name="location" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-248">The address of <paramref name="location" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static long Decrement (ref long location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Decrement(int64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Decrement(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Decrement (ByRef location As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Decrement(long % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="931d6-249">The variable whose value is to be decremented.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-249">The variable whose value is to be decremented.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-250">Decrements the specified variable and stores the result, as an atomic operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-250">Decrements the specified variable and stores the result, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-251">The decremented value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-251">The decremented value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="931d6-252">Cette méthode gère une condition de dépassement de capacité en encapsulant : si `location`  =  <xref:System.Int64.MinValue?displayProperty=nameWithType>, `location` - 1 = <xref:System.Int64.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="931d6-252">This method handles an overflow condition by wrapping: if `location` = <xref:System.Int64.MinValue?displayProperty=nameWithType>, `location` - 1 = <xref:System.Int64.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="931d6-253">Aucune exception n'est levée.</span><span class="sxs-lookup"><span data-stu-id="931d6-253">No exception is thrown.</span></span>  
  
 <span data-ttu-id="931d6-254">Le <xref:System.Threading.Interlocked.Read%2A> (méthode) et les surcharges 64 bits de la <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, et <xref:System.Threading.Interlocked.Add%2A> méthodes sont véritablement atomiques que sur les systèmes où une <xref:System.IntPtr?displayProperty=nameWithType> est de 64 bits.</span><span class="sxs-lookup"><span data-stu-id="931d6-254">The <xref:System.Threading.Interlocked.Read%2A> method and the 64-bit overloads of the <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, and <xref:System.Threading.Interlocked.Add%2A> methods are truly atomic only on systems where a <xref:System.IntPtr?displayProperty=nameWithType> is 64 bits long.</span></span> <span data-ttu-id="931d6-255">Sur les autres systèmes, ces méthodes sont atomiques par rapport à l’autre, mais pas par rapport à d’autres moyens d’accéder aux données.</span><span class="sxs-lookup"><span data-stu-id="931d6-255">On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data.</span></span> <span data-ttu-id="931d6-256">Par conséquent, pour être thread-safe sur les systèmes 32 bits, l’accès à une valeur 64 bits doit être effectuée via les membres de la <xref:System.Threading.Interlocked> classe.</span><span class="sxs-lookup"><span data-stu-id="931d6-256">Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <xref:System.Threading.Interlocked> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="931d6-257">The address of <paramref name="location" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-257">The address of <paramref name="location" /> is a null pointer.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Threading.Interlocked.Increment" />
        <altmember cref="Overload:System.Threading.Interlocked.Add" />
        <altmember cref="M:System.Threading.Interlocked.Read(System.Int64@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Exchange">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="931d6-258">Sets a variable to a specified value as an atomic operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-258">Sets a variable to a specified value as an atomic operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exchange">
      <MemberSignature Language="C#" Value="public static double Exchange (ref double location1, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Exchange(float64&amp; location1, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange(System.Double@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange (ByRef location1 As Double, value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Exchange(double % location1, double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="931d6-259">The variable to set to the specified value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-259">The variable to set to the specified value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="931d6-260">The value to which the <c>location1</c> parameter is set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-260">The value to which the <c>location1</c> parameter is set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-261">Sets a double-precision floating point number to a specified value and returns the original value, as an atomic operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-261">Sets a double-precision floating point number to a specified value and returns the original value, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-262">The original value of <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-262">The original value of <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="931d6-263">The address of <paramref name="location1" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-263">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exchange">
      <MemberSignature Language="C#" Value="public static int Exchange (ref int location1, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Exchange(int32&amp; location1, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange (ByRef location1 As Integer, value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Exchange(int % location1, int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="931d6-264">The variable to set to the specified value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-264">The variable to set to the specified value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="931d6-265">The value to which the <c>location1</c> parameter is set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-265">The value to which the <c>location1</c> parameter is set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-266">Sets a 32-bit signed integer to a specified value and returns the original value, as an atomic operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-266">Sets a 32-bit signed integer to a specified value and returns the original value, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-267">The original value of <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-267">The original value of <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="931d6-268">L’exemple de code suivant montre un mécanisme de verrouillage de ressources thread-safe.</span><span class="sxs-lookup"><span data-stu-id="931d6-268">The following code example shows a thread-safe resource locking mechanism.</span></span>  
  
 [!code-cpp[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Interlocked.Exchange Int32 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange Int32 Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="931d6-269">The address of <paramref name="location1" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-269">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exchange">
      <MemberSignature Language="C#" Value="public static long Exchange (ref long location1, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Exchange(int64&amp; location1, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange (ByRef location1 As Long, value As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Exchange(long % location1, long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="931d6-270">The variable to set to the specified value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-270">The variable to set to the specified value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="931d6-271">The value to which the <c>location1</c> parameter is set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-271">The value to which the <c>location1</c> parameter is set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-272">Sets a 64-bit signed integer to a specified value and returns the original value, as an atomic operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-272">Sets a 64-bit signed integer to a specified value and returns the original value, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-273">The original value of <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-273">The original value of <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="931d6-274">The address of <paramref name="location1" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-274">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exchange">
      <MemberSignature Language="C#" Value="public static IntPtr Exchange (ref IntPtr location1, IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int Exchange(native int&amp; location1, native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange (ByRef location1 As IntPtr, value As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr Exchange(IntPtr % location1, IntPtr value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.IntPtr&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="931d6-275">The variable to set to the specified value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-275">The variable to set to the specified value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="931d6-276">The value to which the <c>location1</c> parameter is set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-276">The value to which the <c>location1</c> parameter is set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-277">Sets a platform-specific handle or pointer to a specified value and returns the original value, as an atomic operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-277">Sets a platform-specific handle or pointer to a specified value and returns the original value, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-278">The original value of <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-278">The original value of <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="931d6-279">The address of <paramref name="location1" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-279">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exchange">
      <MemberSignature Language="C#" Value="public static object Exchange (ref object location1, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Exchange(object&amp; location1, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange(System.Object@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange (ByRef location1 As Object, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Exchange(System::Object ^ % location1, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="931d6-280">The variable to set to the specified value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-280">The variable to set to the specified value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="931d6-281">The value to which the <c>location1</c> parameter is set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-281">The value to which the <c>location1</c> parameter is set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-282">Sets an object to a specified value and returns a reference to the original object, as an atomic operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-282">Sets an object to a specified value and returns a reference to the original object, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-283">The original value of <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-283">The original value of <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="931d6-284">À partir de .NET Framework version 2.0, le <xref:System.Threading.Interlocked.Exchange%60%601%28%60%600%40%2C%60%600%29> surcharge de méthode fournit une alternative de type sécurisé pour les types référence.</span><span class="sxs-lookup"><span data-stu-id="931d6-284">Beginning with .NET Framework version 2.0, the <xref:System.Threading.Interlocked.Exchange%60%601%28%60%600%40%2C%60%600%29> method overload provides a type-safe alternative for reference types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="931d6-285">L’exemple de code suivant illustre la syntaxe d’utilisation `Exchange` avec n’importe quel objet de type référence.</span><span class="sxs-lookup"><span data-stu-id="931d6-285">The following code example shows the syntax for using `Exchange` with any reference type object.</span></span>  
  
 [!code-cpp[System.Threading.Interlocked.Exchange#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Interlocked.Exchange#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange/CS/source.cs#1)]
 [!code-vb[System.Threading.Interlocked.Exchange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="931d6-286">The address of <paramref name="location1" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-286">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exchange">
      <MemberSignature Language="C#" Value="public static float Exchange (ref float location1, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Exchange(float32&amp; location1, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange(System.Single@,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange (ByRef location1 As Single, value As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Exchange(float % location1, float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location1" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="location1">
          <span data-ttu-id="931d6-287">The variable to set to the specified value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-287">The variable to set to the specified value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="931d6-288">The value to which the <c>location1</c> parameter is set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-288">The value to which the <c>location1</c> parameter is set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-289">Sets a single-precision floating point number to a specified value and returns the original value, as an atomic operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-289">Sets a single-precision floating point number to a specified value and returns the original value, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-290">The original value of <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-290">The original value of <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="931d6-291">The address of <paramref name="location1" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-291">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exchange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Exchange&lt;T&gt; (ref T location1, T value) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Exchange&lt;class T&gt;(!!T&amp; location1, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Exchange``1(``0@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exchange(Of T As Class) (ByRef location1 As T, value As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T Exchange(T % location1, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location1" Type="T&amp;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="931d6-292">Le type à utiliser pour <c>location1</c> et <c>valeur</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-292">The type to be used for <c>location1</c> and <c>value</c>.</span>
          </span>
          <span data-ttu-id="931d6-293">Ce type doit être un type référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-293">This type must be a reference type.</span>
          </span>
        </typeparam>
        <param name="location1">
          <span data-ttu-id="931d6-294">The variable to set to the specified value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-294">The variable to set to the specified value.</span>
          </span>
          <span data-ttu-id="931d6-295">This is a reference parameter (<see langword="ref" /> in C#, <see langword="ByRef" /> in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-295">This is a reference parameter (<see langword="ref" /> in C#, <see langword="ByRef" /> in Visual Basic).</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="931d6-296">The value to which the <c>location1</c> parameter is set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-296">The value to which the <c>location1</c> parameter is set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-297">Sets a variable of the specified type <paramref name="T" /> to a specified value and returns the original value, as an atomic operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-297">Sets a variable of the specified type <paramref name="T" /> to a specified value and returns the original value, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-298">The original value of <paramref name="location1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-298">The original value of <paramref name="location1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="931d6-299">Cette méthode prend uniquement en charge les types référence.</span><span class="sxs-lookup"><span data-stu-id="931d6-299">This method only supports reference types.</span></span> <span data-ttu-id="931d6-300">Il existe des surcharges de la <xref:System.Threading.Interlocked.Exchange%2A> méthode pour le <xref:System.Int32>, <xref:System.Int64>, <xref:System.IntPtr>, <xref:System.Single>, et <xref:System.Double> des types valeur, mais il n’existe aucune prise en charge pour les autres types de valeur.</span><span class="sxs-lookup"><span data-stu-id="931d6-300">There are overloads of the <xref:System.Threading.Interlocked.Exchange%2A> method for the <xref:System.Int32>, <xref:System.Int64>, <xref:System.IntPtr>, <xref:System.Single>, and <xref:System.Double> value types, but there is no support for other value types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="931d6-301">Cette surcharge de méthode est préférable à la <xref:System.Threading.Interlocked.Exchange%28System.Object%40%2CSystem.Object%29> surcharge de méthode, car cette dernière nécessite l’accès à liaison tardive à l’objet de destination.</span><span class="sxs-lookup"><span data-stu-id="931d6-301">This method overload is preferable to the <xref:System.Threading.Interlocked.Exchange%28System.Object%40%2CSystem.Object%29> method overload, because the latter requires late-bound access to the destination object .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="931d6-302">L’exemple suivant lance dix tâches, chacun d'entre eux génère les numéros de référence de dix caractères 100.</span><span class="sxs-lookup"><span data-stu-id="931d6-302">The following example launches ten tasks, each of which generates  100 ten-character part numbers.</span></span> <span data-ttu-id="931d6-303">Ensuite le numéro de référence qui est le premier par ordre alphabétique.</span><span class="sxs-lookup"><span data-stu-id="931d6-303">It then the part number that is first alphabetically.</span></span>  
  
 [!code-csharp[System.Threading.Interlocked.Exchange#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange/CS/Exchange5.cs#2)]
 [!code-vb[System.Threading.Interlocked.Exchange#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Interlocked.Exchange/VB/Exchange5.vb#2)]  
  
 <span data-ttu-id="931d6-304">L’exemple utilise le `firstWidget` variable dans laquelle stocker le code qui apparaît en premier dans l’ordre de tri.</span><span class="sxs-lookup"><span data-stu-id="931d6-304">The example uses the `firstWidget` variable to store the ID that occurs first in the sort order.</span></span> <span data-ttu-id="931d6-305">Il compare chaque ID qu’elle génère avec le `firstWidget` valeur.</span><span class="sxs-lookup"><span data-stu-id="931d6-305">It compares each ID that it generates with the `firstWidget` value.</span></span>  <span data-ttu-id="931d6-306">Si la nouvelle valeur précède la valeur actuelle de `firstWidget` dans l’ordre de tri, l’exemple appelle la <xref:System.Threading.Interlocked.Exchange%2A> méthode pour attribuer une nouvelle valeur à `firstWidget`.</span><span class="sxs-lookup"><span data-stu-id="931d6-306">If the new value precedes the current value of `firstWidget` in the sort order, the example calls the <xref:System.Threading.Interlocked.Exchange%2A> method to assign the new value to `firstWidget`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="931d6-307">The address of <paramref name="location1" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-307">The address of <paramref name="location1" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Increment">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="931d6-308">Increments a specified variable and stores the result, as an atomic operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-308">Increments a specified variable and stores the result, as an atomic operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static int Increment (ref int location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Increment(int32&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Increment(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Increment (ByRef location As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Increment(int % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="931d6-309">The variable whose value is to be incremented.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-309">The variable whose value is to be incremented.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-310">Increments a specified variable and stores the result, as an atomic operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-310">Increments a specified variable and stores the result, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-311">The incremented value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-311">The incremented value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="931d6-312">Cette méthode gère une condition de dépassement de capacité en encapsulant : si `location`  =  <xref:System.Int32.MaxValue?displayProperty=nameWithType>, `location` + 1 = <xref:System.Int32.MinValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="931d6-312">This method handles an overflow condition by wrapping: if `location` = <xref:System.Int32.MaxValue?displayProperty=nameWithType>, `location` + 1 = <xref:System.Int32.MinValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="931d6-313">Aucune exception n'est levée.</span><span class="sxs-lookup"><span data-stu-id="931d6-313">No exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="931d6-314">L’exemple suivant détermine le nombre de numéros aléatoire comprise entre 0 et 1 000 est requises pour générer des nombres aléatoires de 1 000 avec une valeur du milieu.</span><span class="sxs-lookup"><span data-stu-id="931d6-314">The following example determines how many random numbers that range from 0 to 1,000 are required to generate 1,000 random numbers with a midpoint value.</span></span> <span data-ttu-id="931d6-315">Pour suivre le nombre de valeurs du milieu, une variable, `midpointCount`, est égale à 0 et incrémentée chaque fois que le Générateur de nombres aléatoires retourne une valeur du milieu jusqu'à 10 000.</span><span class="sxs-lookup"><span data-stu-id="931d6-315">To keep track of the number of midpoint values, a variable, `midpointCount`, is set equal to 0 and incremented each time the random number generator returns a midpoint value until it reaches 10,000.</span></span> <span data-ttu-id="931d6-316">Étant donné que trois threads génèrent des nombres aléatoires, le <xref:System.Threading.Interlocked.Increment%28System.Int32%40%29> méthode est appelée pour vous assurer que plusieurs threads ne mettez à jour `midpointCount` simultanément.</span><span class="sxs-lookup"><span data-stu-id="931d6-316">Because three threads generate the random numbers, the <xref:System.Threading.Interlocked.Increment%28System.Int32%40%29> method is called to ensure that multiple threads don't update `midpointCount` concurrently.</span></span> <span data-ttu-id="931d6-317">Notez qu’un verrou est également utilisé pour protéger le Générateur de nombres aléatoires et qui un <xref:System.Threading.CountdownEvent> objet est utilisé pour vous assurer que le `Main` méthode ne terminer l’exécution avant les trois threads.</span><span class="sxs-lookup"><span data-stu-id="931d6-317">Note that a lock is also used to protect the random number generator, and that a <xref:System.Threading.CountdownEvent> object is used to ensure that the `Main` method doesn't finish execution before the three threads.</span></span>  
  
 [!code-csharp[System.Threading.Interlocked.Increment2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.interlocked.increment2/cs/increment3.cs#3)]
 [!code-vb[System.Threading.Interlocked.Increment2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.interlocked.increment2/vb/Increment3.vb#3)]  
  
 <span data-ttu-id="931d6-318">L’exemple suivant est semblable au précédent, sauf qu’elle utilise au lieu d’une procédure de thread pour générer des entiers aléatoires milieu 50 000.</span><span class="sxs-lookup"><span data-stu-id="931d6-318">The following example is similar to the previous one, except that it uses the  instead of a thread procedure to generate 50,000 random midpoint integers.</span></span> <span data-ttu-id="931d6-319">Dans cet exemple, une expression lambda remplace le `GenerateNumbers` procédure de thread et l’appel à la <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> méthode élimine le besoin du <xref:System.Threading.CountdownEvent> objet.</span><span class="sxs-lookup"><span data-stu-id="931d6-319">In this example, a lambda expression replaces the `GenerateNumbers` thread procedure, and the call to the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method eliminates the need for the <xref:System.Threading.CountdownEvent> object.</span></span>  
  
 [!code-csharp[System.Threading.Interlocked.Increment2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.interlocked.increment2/cs/increment4.cs#4)]
 [!code-vb[System.Threading.Interlocked.Increment2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.interlocked.increment2/vb/Increment4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="931d6-320">The address of <paramref name="location" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-320">The address of <paramref name="location" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static long Increment (ref long location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Increment(int64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Increment(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Increment (ByRef location As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Increment(long % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="931d6-321">The variable whose value is to be incremented.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-321">The variable whose value is to be incremented.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-322">Increments a specified variable and stores the result, as an atomic operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-322">Increments a specified variable and stores the result, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-323">The incremented value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-323">The incremented value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="931d6-324">Cette méthode gère une condition de dépassement de capacité en encapsulant : si `location`  =  <xref:System.Int64.MaxValue?displayProperty=nameWithType>, `location` + 1 = <xref:System.Int64.MinValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="931d6-324">This method handles an overflow condition by wrapping: if `location` = <xref:System.Int64.MaxValue?displayProperty=nameWithType>, `location` + 1 = <xref:System.Int64.MinValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="931d6-325">Aucune exception n'est levée.</span><span class="sxs-lookup"><span data-stu-id="931d6-325">No exception is thrown.</span></span>  
  
 <span data-ttu-id="931d6-326">Le <xref:System.Threading.Interlocked.Read%2A> (méthode) et les surcharges 64 bits de la <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, et <xref:System.Threading.Interlocked.Add%2A> méthodes sont véritablement atomiques que sur les systèmes où une <xref:System.IntPtr?displayProperty=nameWithType> est de 64 bits.</span><span class="sxs-lookup"><span data-stu-id="931d6-326">The <xref:System.Threading.Interlocked.Read%2A> method and the 64-bit overloads of the <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, and <xref:System.Threading.Interlocked.Add%2A> methods are truly atomic only on systems where a <xref:System.IntPtr?displayProperty=nameWithType> is 64 bits long.</span></span> <span data-ttu-id="931d6-327">Sur les autres systèmes, ces méthodes sont atomiques par rapport à l’autre, mais pas par rapport à d’autres moyens d’accéder aux données.</span><span class="sxs-lookup"><span data-stu-id="931d6-327">On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data.</span></span> <span data-ttu-id="931d6-328">Par conséquent, pour être thread-safe sur les systèmes 32 bits, l’accès à une valeur 64 bits doit être effectuée via les membres de la <xref:System.Threading.Interlocked> classe.</span><span class="sxs-lookup"><span data-stu-id="931d6-328">Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <xref:System.Threading.Interlocked> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="931d6-329">The address of <paramref name="location" /> is a null pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-329">The address of <paramref name="location" /> is a null pointer.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Threading.Interlocked.Decrement" />
        <altmember cref="Overload:System.Threading.Interlocked.Add" />
        <altmember cref="M:System.Threading.Interlocked.Read(System.Int64@)" />
      </Docs>
    </Member>
    <Member MemberName="MemoryBarrier">
      <MemberSignature Language="C#" Value="public static void MemoryBarrier ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MemoryBarrier() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.MemoryBarrier" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MemoryBarrier ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MemoryBarrier();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="931d6-330">Synchronizes memory access as follows: The processor that executes the current thread cannot reorder instructions in such a way that memory accesses before the call to <see cref="M:System.Threading.Interlocked.MemoryBarrier" /> execute after memory accesses that follow the call to <see cref="M:System.Threading.Interlocked.MemoryBarrier" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-330">Synchronizes memory access as follows: The processor that executes the current thread cannot reorder instructions in such a way that memory accesses before the call to <see cref="M:System.Threading.Interlocked.MemoryBarrier" /> execute after memory accesses that follow the call to <see cref="M:System.Threading.Interlocked.MemoryBarrier" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="931d6-331">Cette méthode a été ajoutée à la <xref:System.Threading.Interlocked> classe dans le [!INCLUDE[net_v45](~/includes/net-v45-md.md)] pour des raisons pratiques ; il est un wrapper pour le <xref:System.Threading.Thread.MemoryBarrier%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="931d6-331">This method was added to the <xref:System.Threading.Interlocked> class in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] as a convenience; it's a wrapper for the <xref:System.Threading.Thread.MemoryBarrier%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="931d6-332"><xref:System.Threading.Interlocked.MemoryBarrier%2A> est requis uniquement sur les systèmes multiprocesseurs qui ont un classement faible mémoire (par exemple, un système qui utilise plusieurs processeurs Intel Itanium).</span><span class="sxs-lookup"><span data-stu-id="931d6-332"><xref:System.Threading.Interlocked.MemoryBarrier%2A> is required only on multiprocessor systems that have weak memory ordering (for example, a system that employs multiple Intel Itanium processors).</span></span>  
  
 <span data-ttu-id="931d6-333">La plupart des cas, le langage c# `lock` instruction, Visual Basic `SyncLock` instruction, ou la <xref:System.Threading.Monitor> classe fournir plus simples pour synchroniser les données.</span><span class="sxs-lookup"><span data-stu-id="931d6-333">For most purposes, the C# `lock` statement, the Visual Basic `SyncLock` statement, or the <xref:System.Threading.Monitor> class provide easier ways to synchronize data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemoryBarrierProcessWide">
      <MemberSignature Language="C#" Value="public static void MemoryBarrierProcessWide ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MemoryBarrierProcessWide() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.MemoryBarrierProcessWide" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MemoryBarrierProcessWide ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MemoryBarrierProcessWide();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static long Read (ref long location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Read(int64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Interlocked.Read(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Read(long % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="931d6-334">The 64-bit value to be loaded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-334">The 64-bit value to be loaded.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="931d6-335">Returns a 64-bit value, loaded as an atomic operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-335">Returns a 64-bit value, loaded as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="931d6-336">The loaded value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="931d6-336">The loaded value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="931d6-337">Le <xref:System.Threading.Interlocked.Read%2A> méthode n’est pas nécessaire sur les systèmes 64 bits, car les opérations de lecture 64 bits sont déjà atomiques.</span><span class="sxs-lookup"><span data-stu-id="931d6-337">The <xref:System.Threading.Interlocked.Read%2A> method is unnecessary on 64-bit systems, because 64-bit read operations are already atomic.</span></span> <span data-ttu-id="931d6-338">Sur les systèmes 32 bits, les opérations de lecture 64 bits ne sont pas atomiques si elles effectuée à l’aide <xref:System.Threading.Interlocked.Read%2A>.</span><span class="sxs-lookup"><span data-stu-id="931d6-338">On 32-bit systems, 64-bit read operations are not atomic unless performed using <xref:System.Threading.Interlocked.Read%2A>.</span></span>  
  
 <span data-ttu-id="931d6-339">Le <xref:System.Threading.Interlocked.Read%2A> (méthode) et les surcharges 64 bits de la <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, et <xref:System.Threading.Interlocked.Add%2A> méthodes sont véritablement atomiques que sur les systèmes où une <xref:System.IntPtr?displayProperty=nameWithType> est de 64 bits.</span><span class="sxs-lookup"><span data-stu-id="931d6-339">The <xref:System.Threading.Interlocked.Read%2A> method and the 64-bit overloads of the <xref:System.Threading.Interlocked.Increment%2A>, <xref:System.Threading.Interlocked.Decrement%2A>, and <xref:System.Threading.Interlocked.Add%2A> methods are truly atomic only on systems where a <xref:System.IntPtr?displayProperty=nameWithType> is 64 bits long.</span></span> <span data-ttu-id="931d6-340">Sur les autres systèmes, ces méthodes sont atomiques par rapport à l’autre, mais pas par rapport à d’autres moyens d’accéder aux données.</span><span class="sxs-lookup"><span data-stu-id="931d6-340">On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data.</span></span> <span data-ttu-id="931d6-341">Par conséquent, pour être thread-safe sur les systèmes 32 bits, l’accès à une valeur 64 bits doit être effectuée via les membres de la <xref:System.Threading.Interlocked> classe.</span><span class="sxs-lookup"><span data-stu-id="931d6-341">Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <xref:System.Threading.Interlocked> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="931d6-342"><xref:System.IntPtr> est un type spécifique à la plateforme.</span><span class="sxs-lookup"><span data-stu-id="931d6-342"><xref:System.IntPtr> is a platform-specific type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Threading.Interlocked.Increment" />
        <altmember cref="Overload:System.Threading.Interlocked.Decrement" />
        <altmember cref="Overload:System.Threading.Interlocked.Add" />
      </Docs>
    </Member>
  </Members>
</Type>