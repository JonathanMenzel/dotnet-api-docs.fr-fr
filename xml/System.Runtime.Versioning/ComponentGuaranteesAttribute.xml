<Type Name="ComponentGuaranteesAttribute" FullName="System.Runtime.Versioning.ComponentGuaranteesAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="419d48be0fd64c8d209fc03bcc2d4676c2742593" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30490023" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ComponentGuaranteesAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ComponentGuaranteesAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ComponentGuaranteesAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ComponentGuaranteesAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Module | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Delegate, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Définit la garantie de compatibilité d'un composant, d'un type ou d'un membre de type qui s'étend sur plusieurs versions.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> est utilisé par les développeurs de composants et bibliothèques de classes pour indiquer le niveau de compatibilité dont les consommateurs de leurs bibliothèques peuvent bénéficier entre plusieurs versions. Il indique le niveau de garantie qu’une future version de la bibliothèque ou le composant n’interrompra pas un client existant. Les clients peuvent ensuite utiliser le <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> comme une aide à concevoir leurs propres interfaces pour garantir la stabilité entre les versions.  
  
> [!NOTE]
>  Le common language runtime (CLR) n’utilise pas cet attribut en aucune façon. Sa valeur se trouve en bonne et due forme documenter l’intention de l’auteur du composant. Compilation outils peuvent également utiliser ces déclarations pour détecter les erreurs de compilation qui seraient sinon arrêtera la garantie déclarée.  
  
## <a name="levels-of-compatibility"></a>Niveaux de compatibilité  
 Le <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> prend en charge les niveaux suivants de compatibilité, qui sont représentés par les membres de le <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> énumération :  
  
-   Aucune compatibilité version-à-version (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None?displayProperty=nameWithType>). Le client peut attendre que des versions futures altèrent le client existant. Pour plus d’informations, consultez la [aucune compatibilité](#None) section plus loin dans cette rubrique.  
  
-   Compatibilité de version-à côte à côte (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide?displayProperty=nameWithType>). Le composant a été testé pour fonctionner lorsque plusieurs versions de l’assembly sont chargée dans le même domaine d’application. En règle générale, les versions ultérieures peuvent empêcher la compatibilité. Toutefois, lorsque des modifications avec rupture sont apportées, l’ancienne version n’est pas modifiée, mais existe en même temps que la nouvelle version. Exécution de la côte à côte est le moyen de permettre aux clients existants fonctionnent lorsque des modifications avec rupture sont apportées. Pour plus d’informations, consultez la [côte-à-côte compatibilité](#SideBySide) section plus loin dans cette rubrique.  
  
-   Compatibilité de version-à-version stable (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable?displayProperty=nameWithType>). Les versions ultérieures ne doivent pas altérer le client et l’exécution de côte à côte ne doit pas nécessaire. Toutefois, si le client est endommagé par inadvertance, il peut être possible d’utiliser l’exécution de côte à côte pour résoudre le problème. Pour plus d’informations, consultez la [compatibilité Stable](#Standard) section.  
  
-   Compatibilité de version à l’autre d’échange (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange?displayProperty=nameWithType>). Extraordinaires est veiller à garantir que les versions ultérieures n’interrompra pas le client. Le client doit utiliser uniquement ces types dans la signature des interfaces qui sont utilisées pour la communication avec d’autres assemblys déployés indépendamment les unes des autres. Seule une version de ces types est censée se trouver dans un domaine d’application donné, ce qui signifie que si un client s’arrête, l’exécution de côte à côte ne peut pas résoudre le problème de compatibilité. Pour plus d’informations, consultez la [Exchange Type Compatibility](#Exchange) section.  
  
 Les sections suivantes décrivent chaque niveau de garantie plus en détail.  
  
<a name="None"></a>   
### <a name="no-compatibility"></a>Aucune compatibilité  
 Marquer un composant comme <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None?displayProperty=nameWithType> indique que le fournisseur n’offre aucune garantie sur la compatibilité. Les clients doivent éviter de prendre des dépendances sur les interfaces exposées. Ce niveau de compatibilité est utile pour les types qui sont expérimentale ou qui sont exposés publiquement, mais sont destinées uniquement pour les composants qui sont toujours mis à jour en même temps. <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> indique explicitement que ce composant ne doit pas être utilisé par les composants externes.  
  
<a name="SideBySide"></a>   
### <a name="side-by-side-compatibility"></a>Compatibilité de la côte à côte  
 Marquer un composant comme <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide?displayProperty=nameWithType> indique que le composant a été testé pour fonctionner lorsque plusieurs versions de l’assembly sont chargée dans le même domaine d’application. Modifications avec rupture sont autorisées tant qu’elles ont été effectuées à l’assembly qui a le numéro de version supérieure. Les composants liés à une ancienne version de l’assembly sont attendus pour continuer à lier à l’ancienne version, et les autres composants peuvent créer une liaison vers la nouvelle version. Il est également possible de mettre à jour un composant qui est déclaré comme étant <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide> en modifiant l’ancienne version de manière destructive.  
  
<a name="Standard"></a>   
### <a name="stable-compatibility"></a>Compatibilité stable  
 Marquer un type comme <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable?displayProperty=nameWithType> indique que le type doit rester stable entre les versions. Toutefois, il peut également être possible pour les versions côte à côte d’un type stable d’exister dans le même domaine d’application.  
  
 Les types stables maintiennent une barre de compatibilité binaire haute. Pour cette raison, les fournisseurs doivent éviter d’effectuer des modifications avec rupture à des types stables. Les types de modifications suivants sont acceptables :  
  
-   Ajout de champs d’instance privés ou suppression de champs d’un type, tant que cela ne s’arrête pas le format de sérialisation.  
  
-   Modification d’un type non sérialisable en un type sérialisable. (Toutefois, un type sérialisable ne peut pas être modifié en un type non sérialisable.)  
  
-   Levée de nouvelles exceptions les plus dérivées d’une méthode.  
  
-   Amélioration des performances d’une méthode.  
  
-   Modification de la plage de valeurs de retour, tant que la modification n’affecte pas la majorité des clients.  
  
-   Résolution de bogues sérieux si la justification est élevée et que le nombre de clients affectés négativement est faible.  
  
 Étant donné que les nouvelles versions des composants stables ne sont pas supposées arrêter les clients existants, en général qu’une seule version d’un composant stable est nécessaire dans un domaine d’application. Toutefois, cela n’est pas obligatoire, car les types stables ne sont pas utilisés en tant que types connus exchange conviennent de tous les composants. Par conséquent, si une nouvelle version d’un composant stable arrête par inadvertance des quelques composants et si d’autres composants ont besoin de la nouvelle version, il peut être possible de corriger le problème en chargeant le composant ancien et nouvel.  
  
 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> Fournit une meilleure garantie de compatibilité de version que <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>. Il est par défaut commune pour les composants de plusieurs versions.  
  
 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> peut être combiné avec <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide>, ce qui indique que le composant n’interrompra pas compatibilité mais qu’il est testé pour fonctionner lorsque plusieurs versions sont chargées dans un domaine d’application donné.  
  
 Après qu’un type ou une méthode est marquée comme <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>, il peut être mis à niveau vers <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>. Toutefois, il ne peut pas être rétrogradé à <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>.  
  
<a name="Exchange"></a>   
### <a name="exchange-type-compatibility"></a>Compatibilité des types d’Exchange  
 Marquer un type comme <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange?displayProperty=nameWithType> fournit une meilleure garantie de compatibilité de version que <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>et doit être appliqué à tous les types la plus stable. Ces types sont destinés à être utilisés pour l’échange entre composants créés indépendamment au-delà des limites de composant dans le temps à la fois (n’importe quelle version du CLR) ou n’importe quelle version d’un composant ou une application et l’espace (interprocessus, CLR croisés dans un processus, domaine d’applications croisées dans un CLR). Si une modification avec rupture est effectuée pour un type d’échange, il est impossible de résoudre le problème en chargeant plusieurs versions du type.  
  
 Les types d’échange doivent être modifiés uniquement lorsqu’un problème est très grave (par exemple, un problème de sécurité grave) ou la probabilité de rupture est très faible (autrement dit, si le comportement a déjà été arrêté de façon aléatoire code ne pourrait pas avoir en théorie pris une dépendance). Vous pouvez apporter les types suivants de modifications à un type d’échange :  
  
-   Ajouter un héritage de nouvelles définitions d’interface.  
  
-   Ajouter de nouvelles méthodes privées qui implémentent les méthodes des définitions d’interface qui vient d’être héritée.  
  
-   Ajouter des champs statiques.  
  
-   Ajouter de nouvelles méthodes statiques.  
  
-   Ajouter de nouvelles méthodes d’instance non virtuelle.  
  
 Les éléments suivants sont considérés comme les modifications avec rupture et ne sont pas autorisés pour les types primitifs :  
  
-   Modification des formats de sérialisation. Sérialisation avec tolérance de version est requise.  
  
-   Ajout ou suppression de champs d’instance privés. Cela risque de modification du format de sérialisation du type et de rupture du code client qui utilise la réflexion.  
  
-   Modification de la sérialisation d’un type. Un type non sérialisable ne peut pas être rendu sérialisable et vice versa.  
  
-   Levée d’exceptions à partir d’une méthode.  
  
-   Modification de la plage de valeurs de retour d’une méthode, à moins que la définition de membre déclenche cette possibilité et indique clairement comment les clients doivent gérer les valeurs inconnues.  
  
-   Résolution de la plupart des bogues. Les consommateurs du type seront appuient sur le comportement existant.  
  
 Une fois qu’un composant, le type ou le membre est marqué avec la <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange> garantir, il ne peut pas être modifié en <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> ou <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>.  
  
 En règle générale, les types d’échange sont les types de base (telles que <xref:System.Int32> et <xref:System.String> dans le .NET Framework) et les interfaces (telles que <xref:System.Collections.Generic.IList%601>, <xref:System.Collections.Generic.IEnumerable%601>, et <xref:System.IComparable%601>) qui sont couramment utilisés dans les interfaces publiques.  
  
 Les types d’échange peuvent exposer publiquement uniquement d’autres types qui sont également marqués avec <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange> compatibilité. En outre, les types d’échange ne peuvent pas dépendre du comportement des API Windows qui sont susceptibles d’être modifiées.  
  
## <a name="component-guarantees-a-summary"></a>Garanties des composants : Un résumé  
 Le tableau suivant indique comment les caractéristiques et l’utilisation d’un composant affectent sa garantie de compatibilité.  
  
|Caractéristiques de composant|Exchange|Stable|Côte à côte|Aucun.|  
|-------------------------------|--------------|------------|--------------------|----------|  
|Peut être utilisé dans les interfaces entre les composants de cette version indépendamment.|Y|N|N|N|  
|Peut être utilisé (en privé) par un assembly que les versions indépendamment.|Y|Y|Y|N|  
|Peut avoir des versions multiples dans un seul domaine d’application.|N|Y|Y|Y|  
|Peut apporter des modifications avec rupture|N|N|Y|Y|  
|Testé pour vérifier que plusieurs versions de l’assembly peuvent être chargées ensemble.|N|N|Y|N|  
|Peut apporter des modifications avec rupture en place.|N|N|N|Y|  
|Faire très sûr maintenance des modifications sans rupture.|Y|Y|Y|Y|  
  
## <a name="applying-the-attribute"></a>Application de l’attribut  
 Vous pouvez appliquer le <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> à un assembly, un type ou un membre de type. Son application est hiérarchique. Autrement dit, par défaut, la garantie définie par le <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> propriété de l’attribut au niveau de l’assembly définit la garantie de tous les types dans l’assembly et tous les membres de ces types. De même, si la garantie est appliquée au type, par défaut il s’applique également à chaque membre du type.  
  
 Cette garantie héritée peut être substituée en appliquant la <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> à des types et membres de type. Toutefois, les garanties qui remplacent la valeur par défaut peuvent uniquement affaiblir la garantie ; ils ne peut pas renforcer. Par exemple, si un assembly est marqué avec la <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> garantir, ses types et membres n’ont aucune garantie de compatibilité, et toute autre garantie est appliqué aux types ou membres dans l’assembly est ignoré.  
  
## <a name="testing-the-guarantee"></a>Test de la garantie  
 Le <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> propriété retourne un membre de la <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> énumération, qui est marquée avec la <xref:System.FlagsAttribute> attribut. Cela signifie que vous devez tester l’indicateur qui vous intéressent en masquant des indicateurs potentiellement inconnus. Par exemple, l’exemple suivant vérifie si un type est marqué comme <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>.  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#1)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#1)]  
  
 L’exemple suivant vérifie si un type est marqué comme <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> ou <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>.  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#2)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#2)]  
  
 Les éléments suivants exemple vérifie si un type est marqué comme <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> (autrement dit, aucune des deux <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> ni <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>).  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#3)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Versioning.ComponentGuaranteesOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComponentGuaranteesAttribute (System.Runtime.Versioning.ComponentGuaranteesOptions guarantees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.Versioning.ComponentGuaranteesOptions guarantees) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (guarantees As ComponentGuaranteesOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ComponentGuaranteesAttribute(System::Runtime::Versioning::ComponentGuaranteesOptions guarantees);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="guarantees" Type="System.Runtime.Versioning.ComponentGuaranteesOptions" />
      </Parameters>
      <Docs>
        <param name="guarantees">Une des valeurs d'énumération qui spécifie le niveau de compatibilité garanti entre plusieurs versions.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" /> avec une valeur qui indique le niveau de compatibilité garanti d'une bibliothèque, d'un type ou d'un membre entre plusieurs versions.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque le <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> classe est instanciée, la valeur de la `guarantees` paramètre est affecté à la <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> propriété.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Guarantees">
      <MemberSignature Language="C#" Value="public System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Guarantees As ComponentGuaranteesOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Versioning::ComponentGuaranteesOptions Guarantees { System::Runtime::Versioning::ComponentGuaranteesOptions get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Versioning.ComponentGuaranteesOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique le niveau de compatibilité garanti d'une bibliothèque, d'un type ou d'un membre de type qui s'étend sur plusieurs versions.</summary>
        <value>Une des valeurs d'énumération qui spécifie le niveau de compatibilité garanti entre plusieurs versions.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de la <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> propriété correspond à la `guarantees` paramètre de la <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A> constructeur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>