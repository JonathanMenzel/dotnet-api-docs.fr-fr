<Type Name="Network" FullName="Microsoft.VisualBasic.Devices.Network">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1090d44d40e28b0d29477f2237034a9f61aeea09" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37711904" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Network" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Network extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Devices.Network" />
  <TypeSignature Language="VB.NET" Value="Public Class Network" />
  <TypeSignature Language="C++ CLI" Value="public ref class Network" />
  <TypeSignature Language="F#" Value="type Network = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides a property, event, and methods for interacting with the network to which the computer is connected.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau suivant répertorie des exemples de tâches impliquant la `My.Computer.Network` objet.  
  
|À|Voir|  
|-|-|  
|Charger un fichier|[Guide pratique : charger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-upload-a-file.md)|  
|Télécharger un fichier|[Guide pratique : télécharger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-download-a-file.md)|  
|Vérification du statut de connexion|[Guide pratique : vérifier l’état de la connexion](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-check-connection-status.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `Order.txt` à http://www.cohowinery.com/uploads.  
  
 [!code-vb[VbVbalrMyNetwork#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#6)]  
  
 ]]></format>
    </remarks>
    <altmember cref="E:Microsoft.VisualBasic.Devices.Network.NetworkAvailabilityChanged" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Network ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Network();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Devices.Network" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (string address, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DownloadFile(string address, string destinationFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.DownloadFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFile (address As String, destinationFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFile(System::String ^ address, System::String ^ destinationFileName);" />
      <MemberSignature Language="F#" Value="member this.DownloadFile : string * string -&gt; unit" Usage="network.DownloadFile (address, destinationFileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Path of the file to download, including file name and host address.</param>
        <param name="destinationFileName">File name and path of the downloaded file.</param>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le fichier de destination existe déjà, le `DownloadFile` méthode ne remplace pas le fichier existant. Vous pouvez utiliser une des autres surcharges de la <xref:Microsoft.VisualBasic.Devices.Network.DownloadFile%2A> méthode pour indiquer qu’il faut écraser les fichiers existants, à fournir des informations d’identification de l’utilisateur, ou spécifier une valeur de délai d’attente spécifique.  
  
 `DownloadFile` sorties des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau de l’activation](~/docs/framework/network-programming/enabling-network-tracing.md).  
  
> [!NOTE]
>  Le `DownloadFile` (méthode) n’envoie pas d’en-têtes HTTP facultatifs. Certains serveurs peuvent retourner 500 (erreur interne du serveur) si l’en-tête d’agent utilisateur facultatif est manquant. Pour envoyer des en-têtes facultatifs, vous devez construire une demande à l’aide de la <xref:System.Net.WebClient> classe.  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Network.DownloadFile` (méthode).  
  
|À|Voir|  
|-|-|  
|Télécharger un fichier|[Guide pratique : télécharger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-download-a-file.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `WineList.txt` de `http://www.cohowinery.com/downloads` et l’enregistre à `C:\Documents and Settings\All Users\Documents`.  
  
 [!code-vb[VbVbalrMyNetwork#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#7)]  
  
 Cet exemple télécharge le fichier `WineList.txt` de `http://www.cohowinery.com/downloads` et l’enregistre à `C:\Documents and Settings\All Users\Documents`, en spécifiant un intervalle de délai d’attente de 500 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> ends with a trailing slash.</exception>
        <exception cref="T:System.TimeoutException">The server does not respond within the default timeout (100 seconds).</exception>
        <exception cref="T:System.Security.SecurityException">User lacks necessary permissions to perform a network operation.</exception>
        <exception cref="T:System.Net.WebException">The request is denied by the target web server.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ICredentials" />
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (Uri address, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DownloadFile(class System.Uri address, string destinationFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.DownloadFile(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFile (address As Uri, destinationFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFile(Uri ^ address, System::String ^ destinationFileName);" />
      <MemberSignature Language="F#" Value="member this.DownloadFile : Uri * string -&gt; unit" Usage="network.DownloadFile (address, destinationFileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Path of the file to download, including file name and host address.</param>
        <param name="destinationFileName">File name and path of the downloaded file.</param>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le fichier de destination existe déjà, le `DownloadFile` méthode ne remplace pas le fichier existant. Vous pouvez utiliser une des autres surcharges de la <xref:Microsoft.VisualBasic.Devices.Network.DownloadFile%2A> méthode pour indiquer qu’il faut écraser les fichiers existants, à fournir des informations d’identification de l’utilisateur, ou spécifier une valeur de délai d’attente spécifique. `DownloadFile` sorties des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau de l’activation](~/docs/framework/network-programming/enabling-network-tracing.md).  
  
> [!NOTE]
>  Le `DownloadFile` (méthode) n’envoie pas d’en-têtes HTTP facultatifs. Certains serveurs peuvent retourner 500 (erreur interne du serveur) si l’en-tête d’agent utilisateur facultatif est manquant. Pour envoyer des en-têtes facultatifs, vous devez construire une demande à l’aide de la <xref:System.Net.WebClient> classe.  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Network.DownloadFile` (méthode).  
  
|À|Voir|  
|-|-|  
|Télécharger un fichier|[Guide pratique : télécharger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-download-a-file.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `WineList.txt` de `http://www.cohowinery.com/downloads` et l’enregistre à `C:\Documents and Settings\All Users\Documents`.  
  
 [!code-vb[VbVbalrMyNetwork#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#7)]  
  
 Cet exemple télécharge le fichier `WineList.txt` de `http://www.cohowinery.com/downloads` et l’enregistre à `C:\Documents and Settings\All Users\Documents`, en spécifiant un intervalle de délai d’attente de 500 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> ends with a trailing slash.</exception>
        <exception cref="T:System.TimeoutException">The server does not respond within the default timeout (100 seconds).</exception>
        <exception cref="T:System.Security.SecurityException">User lacks necessary permissions to perform a network operation.</exception>
        <exception cref="T:System.Net.WebException">The request is denied by the target web server.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ICredentials" />
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (string address, string destinationFileName, string userName, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DownloadFile(string address, string destinationFileName, string userName, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.DownloadFile(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFile (address As String, destinationFileName As String, userName As String, password As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFile(System::String ^ address, System::String ^ destinationFileName, System::String ^ userName, System::String ^ password);" />
      <MemberSignature Language="F#" Value="member this.DownloadFile : string * string * string * string -&gt; unit" Usage="network.DownloadFile (address, destinationFileName, userName, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Path of the file to download, including file name and host address.</param>
        <param name="destinationFileName">File name and path of the downloaded file.</param>
        <param name="userName">User name to authenticate. Default is an empty string, "".</param>
        <param name="password">Password to authenticate. Default is an empty string, "".</param>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le fichier de destination existe déjà, le `DownloadFile` méthode ne remplace pas le fichier existant. Vous pouvez utiliser une des autres surcharges de la <xref:Microsoft.VisualBasic.Devices.Network.DownloadFile%2A> méthode pour lui demander de remplacer les fichiers existants ou de spécifier une valeur de délai d’attente spécifique.  
  
 `DownloadFile` sorties des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau de l’activation](~/docs/framework/network-programming/enabling-network-tracing.md).  
  
> [!NOTE]
>  Le `DownloadFile` (méthode) n’envoie pas d’en-têtes HTTP facultatifs. Certains serveurs peuvent retourner 500 (erreur interne du serveur) si l’en-tête d’agent utilisateur facultatif est manquant. Pour envoyer des en-têtes facultatifs, vous devez construire une demande à l’aide de la <xref:System.Net.WebClient> classe.  
  
> [!NOTE]
>  Le protocole FTP envoie des informations, y compris les mots de passe en texte brut et ne doit pas être utilisé pour transmettre des informations sensibles.  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Network.DownloadFile` (méthode).  
  
|À|Voir|  
|-|-|  
|Télécharger un fichier|[Guide pratique : télécharger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-download-a-file.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `WineList.txt` de `http://www.cohowinery.com/downloads` et l’enregistre à `C:\Documents and Settings\All Users\Documents`.  
  
 [!code-vb[VbVbalrMyNetwork#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#7)]  
  
 Cet exemple télécharge le fichier `WineList.txt` de `http://www.cohowinery.com/downloads` et l’enregistre à `C:\Documents and Settings\All Users\Documents`, en spécifiant un intervalle de délai d’attente de 500 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> ends with a trailing slash.</exception>
        <exception cref="T:System.TimeoutException">The server does not respond within the default timeout (100 seconds).</exception>
        <exception cref="T:System.Security.SecurityException">User lacks necessary permissions to perform a network operation.</exception>
        <exception cref="T:System.Net.WebException">The request is denied by the target web server.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ICredentials" />
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (Uri address, string destinationFileName, string userName, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DownloadFile(class System.Uri address, string destinationFileName, string userName, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.DownloadFile(System.Uri,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFile (address As Uri, destinationFileName As String, userName As String, password As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFile(Uri ^ address, System::String ^ destinationFileName, System::String ^ userName, System::String ^ password);" />
      <MemberSignature Language="F#" Value="member this.DownloadFile : Uri * string * string * string -&gt; unit" Usage="network.DownloadFile (address, destinationFileName, userName, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Path of the file to download, including file name and host address.</param>
        <param name="destinationFileName">File name and path of the downloaded file.</param>
        <param name="userName">User name to authenticate. Default is an empty string, "".</param>
        <param name="password">Password to authenticate. Default is an empty string, "".</param>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le fichier de destination existe déjà, le `DownloadFile` méthode ne remplace pas le fichier existant. Vous pouvez utiliser une des autres surcharges de la <xref:Microsoft.VisualBasic.Devices.Network.DownloadFile%2A> méthode pour lui demander de remplacer les fichiers existants ou de spécifier une valeur de délai d’attente spécifique.  
  
 `DownloadFile` sorties des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau de l’activation](~/docs/framework/network-programming/enabling-network-tracing.md).  
  
> [!NOTE]
>  Le `DownloadFile` (méthode) n’envoie pas d’en-têtes HTTP facultatifs. Certains serveurs peuvent retourner 500 (erreur interne du serveur) si l’en-tête d’agent utilisateur facultatif est manquant. Pour envoyer des en-têtes facultatifs, vous devez construire une demande à l’aide de la <xref:System.Net.WebClient> classe.  
  
> [!NOTE]
>  Le protocole FTP envoie des informations, y compris les mots de passe en texte brut et ne doit pas être utilisé pour transmettre des informations sensibles.  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Network.DownloadFile` (méthode).  
  
|À|Voir|  
|-|-|  
|Télécharger un fichier|[Guide pratique : télécharger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-download-a-file.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `WineList.txt` de `http://www.cohowinery.com/downloads` et l’enregistre à `C:\Documents and Settings\All Users\Documents`.  
  
 [!code-vb[VbVbalrMyNetwork#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#7)]  
  
 Cet exemple télécharge le fichier `WineList.txt` de `http://www.cohowinery.com/downloads` et l’enregistre à `C:\Documents and Settings\All Users\Documents`, en spécifiant un intervalle de délai d’attente de 500 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> ends with a trailing slash.</exception>
        <exception cref="T:System.TimeoutException">The server does not respond within the default timeout (100 seconds).</exception>
        <exception cref="T:System.Security.SecurityException">User lacks necessary permissions to perform a network operation.</exception>
        <exception cref="T:System.Net.WebException">The request is denied by the target web server.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ICredentials" />
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (Uri address, string destinationFileName, System.Net.ICredentials networkCredentials, bool showUI, int connectionTimeout, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DownloadFile(class System.Uri address, string destinationFileName, class System.Net.ICredentials networkCredentials, bool showUI, int32 connectionTimeout, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.DownloadFile(System.Uri,System.String,System.Net.ICredentials,System.Boolean,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFile (address As Uri, destinationFileName As String, networkCredentials As ICredentials, showUI As Boolean, connectionTimeout As Integer, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFile(Uri ^ address, System::String ^ destinationFileName, System::Net::ICredentials ^ networkCredentials, bool showUI, int connectionTimeout, bool overwrite);" />
      <MemberSignature Language="F#" Value="member this.DownloadFile : Uri * string * System.Net.ICredentials * bool * int * bool -&gt; unit" Usage="network.DownloadFile (address, destinationFileName, networkCredentials, showUI, connectionTimeout, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="networkCredentials" Type="System.Net.ICredentials" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="address">
          <see langword="String" /> or <see cref="T:System.Uri" />. Path of the file to download, including file name and host address.</param>
        <param name="destinationFileName">
          <see langword="String" />. File name and path of the downloaded file.</param>
        <param name="networkCredentials">
          <see cref="T:System.Net.ICredentials" />. Credentials to be supplied.</param>
        <param name="showUI">
          <see langword="True" /> to display the progress of the operation; otherwise <see langword="False" />. Default is <see langword="False" />.</param>
        <param name="connectionTimeout">Timeout interval, in milliseconds. Default is 100 seconds.</param>
        <param name="overwrite">
          <see langword="True" /> to overwrite existing files; otherwise <see langword="False" />. Default is <see langword="False" />.</param>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `showUI` a la valeur `True`, une boîte de dialogue s’affiche pour indiquer la progression de l’opération ; la boîte de dialogue contient un **Annuler** bouton qui peut être utilisé pour annuler l’opération. La boîte de dialogue modale n’est pas et par conséquent ne bloque pas l’entrée utilisateur et les autres fenêtres dans le programme.  
  
 Si le serveur ne répond pas dans le texte spécifié `connectionTimeout`, l’opération est annulée et une exception est levée.  
  
 `DownloadFile` sorties des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau de l’activation](~/docs/framework/network-programming/enabling-network-tracing.md).  
  
> [!NOTE]
>  Le `DownloadFile` (méthode) n’envoie pas d’en-têtes HTTP facultatifs. Certains serveurs peuvent retourner 500 (erreur interne du serveur) si l’en-tête d’agent utilisateur facultatif est manquant. Pour envoyer des en-têtes facultatifs, vous devez construire une demande à l’aide de la <xref:System.Net.WebClient> classe.  
  
> [!NOTE]
>  Le protocole FTP envoie des informations, y compris les mots de passe en texte brut et ne doit pas être utilisé pour transmettre des informations sensibles.  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Network.DownloadFile` (méthode).  
  
|À|Voir|  
|-|-|  
|Télécharger un fichier|[Guide pratique : télécharger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-download-a-file.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `WineList.txt` de `http://www.cohowinery.com/downloads` et l’enregistre à `C:\Documents and Settings\All Users\Documents`.  
  
 [!code-vb[VbVbalrMyNetwork#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#7)]  
  
 Cet exemple télécharge le fichier `WineList.txt` de `http://www.cohowinery.com/downloads` et l’enregistre à `C:\Documents and Settings\All Users\Documents`, en spécifiant un intervalle de délai d’attente de 500 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> ends with a trailing slash.</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="overwrite" /> is set to <see langword="False" /> and the destination file already exists.</exception>
        <exception cref="T:System.TimeoutException">The server does not respond within the specified <paramref name="connectionTimeout" />.</exception>
        <exception cref="T:System.Security.SecurityException">User lacks necessary permissions to perform a network operation.</exception>
        <exception cref="T:System.Net.WebException">The request is denied by the target web server.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Contrôle les autorisations relatives aux interfaces utilisateur et au Presse-papiers. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ICredentials" />
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (string address, string destinationFileName, string userName, string password, bool showUI, int connectionTimeout, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DownloadFile(string address, string destinationFileName, string userName, string password, bool showUI, int32 connectionTimeout, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.DownloadFile(System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFile (address As String, destinationFileName As String, userName As String, password As String, showUI As Boolean, connectionTimeout As Integer, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFile(System::String ^ address, System::String ^ destinationFileName, System::String ^ userName, System::String ^ password, bool showUI, int connectionTimeout, bool overwrite);" />
      <MemberSignature Language="F#" Value="member this.DownloadFile : string * string * string * string * bool * int * bool -&gt; unit" Usage="network.DownloadFile (address, destinationFileName, userName, password, showUI, connectionTimeout, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="address">Path of the file to download, including file name and host address.</param>
        <param name="destinationFileName">File name and path of the downloaded file.</param>
        <param name="userName">User name to authenticate. Default is an empty string, "".</param>
        <param name="password">Password to authenticate. Default is an empty string, "".</param>
        <param name="showUI">
          <see langword="True" /> to display the progress of the operation; otherwise <see langword="False" />. Default is <see langword="False" />.</param>
        <param name="connectionTimeout">
          <see cref="T:System.Int32" />. Timeout interval, in milliseconds. Default is 100 seconds.</param>
        <param name="overwrite">
          <see langword="True" /> to overwrite existing files; otherwise <see langword="False" />. Default is <see langword="False" />.</param>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `showUI` a la valeur `True`, une boîte de dialogue s’affiche pour indiquer la progression de l’opération ; la boîte de dialogue contient un **Annuler** bouton qui peut être utilisé pour annuler l’opération. La boîte de dialogue modale n’est pas et par conséquent ne bloque pas l’entrée utilisateur et les autres fenêtres dans le programme.  
  
 Si le serveur ne répond pas dans le texte spécifié `connectionTimeout`, l’opération est annulée et une exception est levée.  
  
 `DownloadFile` sorties des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau de l’activation](~/docs/framework/network-programming/enabling-network-tracing.md).  
  
> [!NOTE]
>  Le `DownloadFile` (méthode) n’envoie pas d’en-têtes HTTP facultatifs. Certains serveurs peuvent retourner 500 (erreur interne du serveur) si l’en-tête d’agent utilisateur facultatif est manquant. Pour envoyer des en-têtes facultatifs, vous devez construire une demande à l’aide de la <xref:System.Net.WebClient> classe.  
  
> [!NOTE]
>  Le protocole FTP envoie des informations, y compris les mots de passe en texte brut et ne doit pas être utilisé pour transmettre des informations sensibles.  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Network.DownloadFile` (méthode).  
  
|À|Voir|  
|-|-|  
|Télécharger un fichier|[Guide pratique : télécharger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-download-a-file.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `WineList.txt` de `http://www.cohowinery.com/downloads` et l’enregistre à `C:\Documents and Settings\All Users\Documents`.  
  
 [!code-vb[VbVbalrMyNetwork#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#7)]  
  
 Cet exemple télécharge le fichier `WineList.txt` de `http://www.cohowinery.com/downloads` et l’enregistre à `C:\Documents and Settings\All Users\Documents`, en spécifiant un intervalle de délai d’attente de 500 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> ends with a trailing slash.</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="overwrite" /> is set to <see langword="False" /> and the destination file already exists.</exception>
        <exception cref="T:System.TimeoutException">The server does not respond within the specified <paramref name="connectionTimeout" />.</exception>
        <exception cref="T:System.Security.SecurityException">User lacks necessary permissions to perform a network operation.</exception>
        <exception cref="T:System.Net.WebException">The request is denied by the target web server.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Contrôle les autorisations relatives aux interfaces utilisateur et au Presse-papiers. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ICredentials" />
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (Uri address, string destinationFileName, System.Net.ICredentials networkCredentials, bool showUI, int connectionTimeout, bool overwrite, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DownloadFile(class System.Uri address, string destinationFileName, class System.Net.ICredentials networkCredentials, bool showUI, int32 connectionTimeout, bool overwrite, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.DownloadFile(System.Uri,System.String,System.Net.ICredentials,System.Boolean,System.Int32,System.Boolean,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFile (address As Uri, destinationFileName As String, networkCredentials As ICredentials, showUI As Boolean, connectionTimeout As Integer, overwrite As Boolean, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFile(Uri ^ address, System::String ^ destinationFileName, System::Net::ICredentials ^ networkCredentials, bool showUI, int connectionTimeout, bool overwrite, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.DownloadFile : Uri * string * System.Net.ICredentials * bool * int * bool * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="network.DownloadFile (address, destinationFileName, networkCredentials, showUI, connectionTimeout, overwrite, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="networkCredentials" Type="System.Net.ICredentials" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
        <Parameter Name="overwrite" Type="System.Boolean" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="address">Path of the file to download, including file name and host address.</param>
        <param name="destinationFileName">File name and path of the downloaded file.</param>
        <param name="networkCredentials">Credentials to be supplied.</param>
        <param name="showUI">
          <see langword="True" /> to display the progress of the operation; otherwise <see langword="False" />. Default is <see langword="False" />.</param>
        <param name="connectionTimeout">Timeout interval, in milliseconds. Default is 100 seconds.</param>
        <param name="overwrite">
          <see langword="True" /> to overwrite existing files; otherwise <see langword="False" />. Default is <see langword="False" />.</param>
        <param name="onUserCancel">Specifies behavior when the user clicks **Cancel** or **No** on the dialog box shown as a result of <c>showUI</c> set to <see langword="True" />. Default is <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />.</param>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `showUI` a la valeur `True`, une boîte de dialogue s’affiche pour indiquer la progression de l’opération ; la boîte de dialogue contient un **Annuler** bouton qui peut être utilisé pour annuler l’opération. La boîte de dialogue modale n’est pas et par conséquent ne bloque pas l’entrée utilisateur et les autres fenêtres dans le programme.  
  
 Si le serveur ne répond pas dans le texte spécifié `connectionTimeout`, l’opération est annulée et une exception est levée.  
  
 `DownloadFile` sorties des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau de l’activation](~/docs/framework/network-programming/enabling-network-tracing.md).  
  
> [!NOTE]
>  Le `DownloadFile` (méthode) n’envoie pas d’en-têtes HTTP facultatifs. Certains serveurs peuvent retourner 500 (erreur interne du serveur) si l’en-tête d’agent utilisateur facultatif est manquant. Pour envoyer des en-têtes facultatifs, vous devez construire une demande à l’aide de la <xref:System.Net.WebClient> classe.  
  
> [!NOTE]
>  Le protocole FTP envoie des informations, y compris les mots de passe en texte brut et ne doit pas être utilisé pour transmettre des informations sensibles.  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Network.DownloadFile` (méthode).  
  
|À|Voir|  
|-|-|  
|Télécharger un fichier|[Guide pratique : télécharger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-download-a-file.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `WineList.txt` de `http://www.cohowinery.com/downloads` et l’enregistre à `C:\Documents and Settings\All Users\Documents`.  
  
 [!code-vb[VbVbalrMyNetwork#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#7)]  
  
 Cet exemple télécharge le fichier `WineList.txt` de `http://www.cohowinery.com/downloads` et l’enregistre à `C:\Documents and Settings\All Users\Documents`, en spécifiant un intervalle de délai d’attente de 500 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> ends with a trailing slash.</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="overwrite" /> is set to <see langword="False" /> and the destination file already exists.</exception>
        <exception cref="T:System.TimeoutException">The server does not respond within the specified <paramref name="connectionTimeout" />.</exception>
        <exception cref="T:System.Security.SecurityException">User lacks necessary permissions to perform a network operation.</exception>
        <exception cref="T:System.Net.WebException">The request is denied by the target web server.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Contrôle les autorisations relatives aux interfaces utilisateur et au Presse-papiers. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ICredentials" />
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (Uri address, string destinationFileName, string userName, string password, bool showUI, int connectionTimeout, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DownloadFile(class System.Uri address, string destinationFileName, string userName, string password, bool showUI, int32 connectionTimeout, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.DownloadFile(System.Uri,System.String,System.String,System.String,System.Boolean,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFile (address As Uri, destinationFileName As String, userName As String, password As String, showUI As Boolean, connectionTimeout As Integer, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFile(Uri ^ address, System::String ^ destinationFileName, System::String ^ userName, System::String ^ password, bool showUI, int connectionTimeout, bool overwrite);" />
      <MemberSignature Language="F#" Value="member this.DownloadFile : Uri * string * string * string * bool * int * bool -&gt; unit" Usage="network.DownloadFile (address, destinationFileName, userName, password, showUI, connectionTimeout, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="address">Path of the file to download, including file name and host address.</param>
        <param name="destinationFileName">File name and path of the downloaded file.</param>
        <param name="userName">User name to authenticate. Default is an empty string, "".</param>
        <param name="password">Password to authenticate. Default is an empty string, "".</param>
        <param name="showUI">
          <see langword="True" /> to display the progress of the operation; otherwise <see langword="False" />. Default is <see langword="False" />.</param>
        <param name="connectionTimeout">Timeout interval, in milliseconds. Default is 100 seconds.</param>
        <param name="overwrite">
          <see langword="True" /> to overwrite existing files; otherwise <see langword="False" />. Default is <see langword="False" />.</param>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `showUI` a la valeur `True`, une boîte de dialogue s’affiche pour indiquer la progression de l’opération ; la boîte de dialogue contient un **Annuler** bouton qui peut être utilisé pour annuler l’opération. La boîte de dialogue modale n’est pas et par conséquent ne bloque pas l’entrée utilisateur et les autres fenêtres dans le programme.  
  
 Si le serveur ne répond pas dans le texte spécifié `connectionTimeout`, l’opération est annulée et une exception est levée.  
  
 `DownloadFile` sorties des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau de l’activation](~/docs/framework/network-programming/enabling-network-tracing.md).  
  
> [!NOTE]
>  Le `DownloadFile` (méthode) n’envoie pas d’en-têtes HTTP facultatifs. Certains serveurs peuvent retourner 500 (erreur interne du serveur) si l’en-tête d’agent utilisateur facultatif est manquant. Pour envoyer des en-têtes facultatifs, vous devez construire une demande à l’aide de la <xref:System.Net.WebClient> classe.  
  
> [!NOTE]
>  Le protocole FTP envoie des informations, y compris les mots de passe en texte brut et ne doit pas être utilisé pour transmettre des informations sensibles.  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Network.DownloadFile` (méthode).  
  
|À|Voir|  
|-|-|  
|Télécharger un fichier|[Guide pratique : télécharger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-download-a-file.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `WineList.txt` de `http://www.cohowinery.com/downloads` et l’enregistre à `C:\Documents and Settings\All Users\Documents`.  
  
 [!code-vb[VbVbalrMyNetwork#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#7)]  
  
 Cet exemple télécharge le fichier `WineList.txt` de `http://www.cohowinery.com/downloads` et l’enregistre à `C:\Documents and Settings\All Users\Documents`, en spécifiant un intervalle de délai d’attente de 500 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> ends with a trailing slash.</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="overwrite" /> is set to <see langword="False" /> and the destination file already exists.</exception>
        <exception cref="T:System.TimeoutException">The server does not respond within the specified <paramref name="connectionTimeout" />.</exception>
        <exception cref="T:System.Security.SecurityException">User lacks necessary permissions to perform a network operation.</exception>
        <exception cref="T:System.Net.WebException">The request is denied by the target web server.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Contrôle les autorisations relatives aux interfaces utilisateur et au Presse-papiers. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ICredentials" />
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (string address, string destinationFileName, string userName, string password, bool showUI, int connectionTimeout, bool overwrite, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DownloadFile(string address, string destinationFileName, string userName, string password, bool showUI, int32 connectionTimeout, bool overwrite, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.DownloadFile(System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Boolean,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFile (address As String, destinationFileName As String, userName As String, password As String, showUI As Boolean, connectionTimeout As Integer, overwrite As Boolean, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFile(System::String ^ address, System::String ^ destinationFileName, System::String ^ userName, System::String ^ password, bool showUI, int connectionTimeout, bool overwrite, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.DownloadFile : string * string * string * string * bool * int * bool * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="network.DownloadFile (address, destinationFileName, userName, password, showUI, connectionTimeout, overwrite, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
        <Parameter Name="overwrite" Type="System.Boolean" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="address">Path of the file to download, including file name and host address.</param>
        <param name="destinationFileName">File name and path of the downloaded file.</param>
        <param name="userName">User name to authenticate. Default is an empty string, "".</param>
        <param name="password">Password to authenticate. Default is an empty string, "".</param>
        <param name="showUI">
          <see langword="True" /> to display the progress of the operation; otherwise <see langword="False" />. Default is <see langword="False" />.</param>
        <param name="connectionTimeout">Timeout interval, in milliseconds. Default is 100 seconds.</param>
        <param name="overwrite">
          <see langword="True" /> to overwrite existing files; otherwise <see langword="False" />. Default is <see langword="False" />.</param>
        <param name="onUserCancel">Specifies behavior when the user clicks **Cancel** or **No** on the dialog box shown as a result of <c>ShowUI</c> set to <see langword="True" />. Default is <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />.</param>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `showUI` a la valeur `True`, une boîte de dialogue s’affiche pour indiquer la progression de l’opération ; la boîte de dialogue contient un **Annuler** bouton qui peut être utilisé pour annuler l’opération. La boîte de dialogue modale n’est pas et par conséquent ne bloque pas l’entrée utilisateur et les autres fenêtres dans le programme.  
  
 Si le serveur ne répond pas dans le texte spécifié `connectionTimeout`, l’opération est annulée et une exception est levée.  
  
 `DownloadFile` sorties des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau de l’activation](~/docs/framework/network-programming/enabling-network-tracing.md).  
  
> [!NOTE]
>  Le `DownloadFile` (méthode) n’envoie pas d’en-têtes HTTP facultatifs. Certains serveurs peuvent retourner 500 (erreur interne du serveur) si l’en-tête d’agent utilisateur facultatif est manquant. Pour envoyer des en-têtes facultatifs, vous devez construire une demande à l’aide de la <xref:System.Net.WebClient> classe.  
  
> [!NOTE]
>  Le protocole FTP envoie des informations, y compris les mots de passe en texte brut et ne doit pas être utilisé pour transmettre des informations sensibles.  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Network.DownloadFile` (méthode).  
  
|À|Voir|  
|-|-|  
|Télécharger un fichier|[Guide pratique : télécharger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-download-a-file.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `WineList.txt` de `http://www.cohowinery.com/downloads` et l’enregistre à `C:\Documents and Settings\All Users\Documents`.  
  
 [!code-vb[VbVbalrMyNetwork#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#7)]  
  
 Cet exemple télécharge le fichier `WineList.txt` de `http://www.cohowinery.com/downloads` et l’enregistre à `C:\Documents and Settings\All Users\Documents`, en spécifiant un intervalle de délai d’attente de 500 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> ends with a trailing slash.</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="overwrite" /> is set to <see langword="False" /> and the destination file already exists.</exception>
        <exception cref="T:System.TimeoutException">The server does not respond within the specified <paramref name="connectionTimeout" />.</exception>
        <exception cref="T:System.Security.SecurityException">User lacks necessary permissions to perform a network operation.</exception>
        <exception cref="T:System.Net.WebException">The request is denied by the target web server.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Contrôle les autorisations relatives aux interfaces utilisateur et au Presse-papiers. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ICredentials" />
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (Uri address, string destinationFileName, string userName, string password, bool showUI, int connectionTimeout, bool overwrite, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DownloadFile(class System.Uri address, string destinationFileName, string userName, string password, bool showUI, int32 connectionTimeout, bool overwrite, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.DownloadFile(System.Uri,System.String,System.String,System.String,System.Boolean,System.Int32,System.Boolean,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFile (address As Uri, destinationFileName As String, userName As String, password As String, showUI As Boolean, connectionTimeout As Integer, overwrite As Boolean, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFile(Uri ^ address, System::String ^ destinationFileName, System::String ^ userName, System::String ^ password, bool showUI, int connectionTimeout, bool overwrite, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.DownloadFile : Uri * string * string * string * bool * int * bool * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="network.DownloadFile (address, destinationFileName, userName, password, showUI, connectionTimeout, overwrite, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
        <Parameter Name="overwrite" Type="System.Boolean" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="address">Path of the file to download, including file name and host address.</param>
        <param name="destinationFileName">File name and path of the downloaded file.</param>
        <param name="userName">User name to authenticate. Default is an empty string, "".</param>
        <param name="password">Password to authenticate. Default is an empty string, "".</param>
        <param name="showUI">
          <see langword="True" /> to display the progress of the operation; otherwise <see langword="False" />. Default is <see langword="False" />.</param>
        <param name="connectionTimeout">Timeout interval, in milliseconds. Default is 100 seconds.</param>
        <param name="overwrite">
          <see langword="True" /> to overwrite existing files; otherwise <see langword="False" />. Default is <see langword="False" />.</param>
        <param name="onUserCancel">Specifies behavior when the user clicks **Cancel** or **No** on the dialog box shown as a result of <c>ShowUI</c> set to <see langword="True" />. Default is <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />.</param>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `showUI` a la valeur `True`, une boîte de dialogue s’affiche pour indiquer la progression de l’opération ; la boîte de dialogue contient un **Annuler** bouton qui peut être utilisé pour annuler l’opération. La boîte de dialogue modale n’est pas et par conséquent ne bloque pas l’entrée utilisateur et les autres fenêtres dans le programme.  
  
 Si le serveur ne répond pas dans le texte spécifié `connectionTimeout`, l’opération est annulée et une exception est levée.  
  
 `DownloadFile` sorties des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau de l’activation](~/docs/framework/network-programming/enabling-network-tracing.md).  
  
> [!NOTE]
>  Le `DownloadFile` (méthode) n’envoie pas d’en-têtes HTTP facultatifs. Certains serveurs peuvent retourner 500 (erreur interne du serveur) si l’en-tête d’agent utilisateur facultatif est manquant. Pour envoyer des en-têtes facultatifs, vous devez construire une demande à l’aide de la <xref:System.Net.WebClient> classe.  
  
> [!NOTE]
>  Le protocole FTP envoie des informations, y compris les mots de passe en texte brut et ne doit pas être utilisé pour transmettre des informations sensibles.  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Network.DownloadFile` (méthode).  
  
|À|Voir|  
|-|-|  
|Télécharger un fichier|[Guide pratique : télécharger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-download-a-file.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `WineList.txt` de `http://www.cohowinery.com/downloads` et l’enregistre à `C:\Documents and Settings\All Users\Documents`.  
  
 [!code-vb[VbVbalrMyNetwork#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#7)]  
  
 Cet exemple télécharge le fichier `WineList.txt` de `http://www.cohowinery.com/downloads` et l’enregistre à `C:\Documents and Settings\All Users\Documents`, en spécifiant un intervalle de délai d’attente de 500 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> ends with a trailing slash.</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="overwrite" /> is set to <see langword="False" /> and the destination file already exists.</exception>
        <exception cref="T:System.TimeoutException">The server does not respond within the specified <paramref name="connectionTimeout" />.</exception>
        <exception cref="T:System.Security.SecurityException">User lacks necessary permissions to perform a network operation.</exception>
        <exception cref="T:System.Net.WebException">The request is denied by the target web server.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Contrôle les autorisations relatives aux interfaces utilisateur et au Presse-papiers. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ICredentials" />
      </Docs>
    </Member>
    <Member MemberName="IsAvailable">
      <MemberSignature Language="C#" Value="public bool IsAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAvailable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Network.IsAvailable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAvailable : bool" Usage="Microsoft.VisualBasic.Devices.Network.IsAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether a computer is connected to a network.</summary>
        <value>
          <see langword="True" /> Si l’ordinateur est connecté à un réseau ; sinon <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsAvailable` Retourne toujours `False` lorsqu’elle est appelée à partir d’un `Click Once` application ou si l’utilisateur n’a pas <xref:System.Net.NetworkInformation.NetworkInformationPermission>.  
  
 Le tableau suivant répertorie des exemples de tâches impliquant la `My.Computer.Network.IsAvailable` propriété.  
  
|À|Voir|  
|-|-|  
|Vérifier si un ordinateur est connecté à un réseau|[Guide pratique : vérifier l’état de la connexion](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-check-connection-status.md)|  
  
   
  
## Examples  
 Cet exemple vérifie l’état de la propriété et le signale.  
  
 [!code-vb[VbVbalrMyNetwork#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="NetworkAvailabilityChanged">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler NetworkAvailabilityChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler NetworkAvailabilityChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.Devices.Network.NetworkAvailabilityChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event NetworkAvailabilityChanged As NetworkAvailableEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::Devices::NetworkAvailableEventHandler ^ NetworkAvailabilityChanged;" />
      <MemberSignature Language="F#" Value="member this.NetworkAvailabilityChanged : Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler " Usage="member this.NetworkAvailabilityChanged : Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the network availability changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une application déclenche le `NetworkAvailabilityChanged` événement chaque fois que la disponibilité du réseau change. Vous pouvez utiliser la <xref:Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs.IsNetworkAvailable%2A> propriété de la `e` pour obtenir le nouvel état de la connexion réseau. Pour obtenir l’état actuel de la connexion réseau, utilisez le <xref:Microsoft.VisualBasic.Devices.Network.IsAvailable%2A> propriété.  
  
 Dans une application Windows Forms, cet événement est déclenché sur le thread principal de l’application avec les autres événements d’interface utilisateur. Ainsi, le Gestionnaire d’événements accéder directement à l’interface utilisateur d’application. Toutefois, si l’application est occupée à gérer un autre événement de l’interface utilisateur lorsque cet événement est déclenché, cet événement ne peut pas être traité tant que l’autre gestionnaire d’événements se termine ou appelle la <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents%2A> (méthode).  
  
 Vous ne pouvez pas utiliser le `Handles` instruction pour gérer le `NetworkAvailabilityChanged` événement ; vous devez utiliser le `AddHandler` instruction.  
  
 Dans les applications Windows Forms, le `MyApplication` objet expose un `NetworkAvailabilityChanged` événement qui fournit les mêmes fonctionnalités que cet événement, mais vous pouvez le gérer avec la `Handles` instruction.  
  
> [!NOTE]
>  De nombreux concentrateurs réseau fournissent une connexion réseau, même si le concentrateur est déconnecté d’un réseau plus large. Par conséquent, pour les connexions filaires, cet événement indique une modification de la connexion entre l’ordinateur et un concentrateur.  
  
> [!NOTE]
>  Le `NetworkAvailabilityChanged` événement n’est pas déclenché par les applications qui s’exécutent sur Windows 95 et Windows 98 ou par les applications qui sont exécutées sur Windows 2000 par un utilisateur non administrateur. Si votre application peut s’exécuter sur ces plateformes, utilisez le <xref:Microsoft.VisualBasic.Devices.Network.IsAvailable%2A> propriété.  
  
   
  
## Examples  
 Cet exemple utilise le `My.Computer.Network.NetworkAvailabilityChanged` événement à mettre à jour de l’interface utilisateur d’un formulaire ou contrôle.  
  
 Ce code doit pour se trouver dans un formulaire ou un contrôle qui a un <xref:System.Windows.Forms.Label> nommé `Label1`.  
  
 [!code-vb[VbVbalrMyApplication#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#50)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Network" />
        <altmember cref="N:Microsoft.VisualBasic.Devices" />
        <altmember cref="T:Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler" />
        <altmember cref="T:Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Ping">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pings the specified server.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Ping">
      <MemberSignature Language="C#" Value="public bool Ping (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool Ping(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.Ping(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ping (hostNameOrAddress As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Ping(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.Ping : string -&gt; bool" Usage="network.Ping hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">The URL, computer name, or IP number of the server to ping.</param>
        <summary>Pings the specified server.</summary>
        <returns>
          <see langword="True" /> if the operation was successful; otherwise <see langword="False" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Ping` méthode n’est pas une méthode de prévention de défaillance pour déterminer la disponibilité d’un ordinateur distant : le port ping sur l’ordinateur cible peut être désactivé ou la demande ping peut être bloquée par un pare-feu ou un routeur.  
  
 L’adresse passée à la `Ping` méthode doit être DNS peut être résolue et ne peut pas être précédée par « http:// ».  
  
   
  
## Examples  
 Cet exemple signale ou non peut être exécutée sur le serveur en déterminant si le `Ping` retourne de la méthode `True`.  
  
 [!code-vb[VbVbalrMyNetwork#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#4)]  
  
 Remplacez `"198.01.01.01"` avec le nom d’ordinateur, l’URL ou adresse IP du serveur à la commande ping.  
  
 Cet exemple signale ou non peut être exécutée sur le serveur en déterminant si le `Ping` méthode retournée `True` et spécifie un intervalle de délai de 1000 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#5)]  
  
 Remplacez `"www.cohowinery.com"` avec le nom d’ordinateur, l’URL ou adresse IP du serveur à la commande ping.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No network connection is available.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">URL was not valid.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Décrit un ensemble d’autorisations de sécurité appliquées au code. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.SocketPermission">Contrôle les droits d’établissement ou d’acceptation des connexions sur une adresse de transport. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">Contrôle l’accès à un composant de compteur de performances Windows NT. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Contrôle l’accès aux informations réseau et les statistiques de trafic pour l’ordinateur local. Énumération associée : <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" />.</permission>
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="Ping">
      <MemberSignature Language="C#" Value="public bool Ping (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool Ping(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.Ping(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ping (address As Uri) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Ping(Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.Ping : Uri -&gt; bool" Usage="network.Ping address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">The URI of the server to ping.</param>
        <summary>Pings the specified server.</summary>
        <returns>
          <see langword="True" /> if the operation was successful; otherwise <see langword="False" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Ping` méthode n’est pas une méthode de prévention de défaillance pour déterminer la disponibilité d’un ordinateur distant : le port ping sur l’ordinateur cible peut être désactivé ou la demande ping peut être bloquée par un pare-feu ou un routeur.  
  
 L’adresse passée à la `Ping` méthode doit être DNS peut être résolue et ne peut pas être précédée par « http:// ».  
  
   
  
## Examples  
 Cet exemple signale ou non peut être exécutée sur le serveur en déterminant si le `Ping` retourne de la méthode `True`.  
  
 [!code-vb[VbVbalrMyNetwork#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#4)]  
  
 Remplacez `"198.01.01.01"` avec le nom d’ordinateur, l’URL ou adresse IP du serveur à la commande ping.  
  
 Cet exemple signale ou non peut être exécutée sur le serveur en déterminant si le `Ping` méthode retournée `True` et spécifie un intervalle de délai de 1000 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#5)]  
  
 Remplacez `"www.cohowinery.com"` avec le nom d’ordinateur, l’URL ou adresse IP du serveur à la commande ping.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No network connection is available.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">URL was not valid.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Décrit un ensemble d’autorisations de sécurité appliquées au code. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.SocketPermission">Contrôle les droits d’établissement ou d’acceptation des connexions sur une adresse de transport. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">Contrôle l’accès à un composant de compteur de performances Windows NT. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Contrôle l’accès aux informations réseau et les statistiques de trafic pour l’ordinateur local. Énumération associée : <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" />.</permission>
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="Ping">
      <MemberSignature Language="C#" Value="public bool Ping (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool Ping(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.Ping(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ping (hostNameOrAddress As String, timeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Ping(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Ping : string * int -&gt; bool" Usage="network.Ping (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">The URL, computer name, or IP number of the server to ping.</param>
        <param name="timeout">Time threshold in milliseconds for contacting the destination. Default is 500.</param>
        <summary>Pings the specified server.</summary>
        <returns>
          <see langword="True" /> if the operation was successful; otherwise <see langword="False" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Ping` méthode n’est pas une méthode de prévention de défaillance pour déterminer la disponibilité d’un ordinateur distant : le port ping sur l’ordinateur cible peut être désactivé ou la demande ping peut être bloquée par un pare-feu ou un routeur.  
  
 L’adresse passée à la `Ping` méthode doit être DNS peut être résolue et ne peut pas être précédée par « http:// ».  
  
   
  
## Examples  
 Cet exemple signale ou non peut être exécutée sur le serveur en déterminant si le `Ping` retourne de la méthode `True`.  
  
 [!code-vb[VbVbalrMyNetwork#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#4)]  
  
 Remplacez `"198.01.01.01"` avec le nom d’ordinateur, l’URL ou adresse IP du serveur à la commande ping.  
  
 Cet exemple signale ou non peut être exécutée sur le serveur en déterminant si le `Ping` méthode retournée `True` et spécifie un intervalle de délai de 1000 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#5)]  
  
 Remplacez `"www.cohowinery.com"` avec le nom d’ordinateur, l’URL ou adresse IP du serveur à la commande ping.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No network connection is available.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">URL was not valid.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Décrit un ensemble d’autorisations de sécurité appliquées au code. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.SocketPermission">Contrôle les droits d’établissement ou d’acceptation des connexions sur une adresse de transport. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">Contrôle l’accès à un composant de compteur de performances Windows NT. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Contrôle l’accès aux informations réseau et les statistiques de trafic pour l’ordinateur local. Énumération associée : <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" />.</permission>
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="Ping">
      <MemberSignature Language="C#" Value="public bool Ping (Uri address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool Ping(class System.Uri address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.Ping(System.Uri,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ping (address As Uri, timeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Ping(Uri ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Ping : Uri * int -&gt; bool" Usage="network.Ping (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">The URI of the server to ping.</param>
        <param name="timeout">Time threshold in milliseconds for contacting the destination. Default is 500.</param>
        <summary>Pings the specified server.</summary>
        <returns>
          <see langword="True" /> if the operation was successful; otherwise <see langword="False" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Ping` méthode n’est pas une méthode de prévention de défaillance pour déterminer la disponibilité d’un ordinateur distant : le port ping sur l’ordinateur cible peut être désactivé ou la demande ping peut être bloquée par un pare-feu ou un routeur.  
  
 L’adresse passée à la `Ping` méthode doit être DNS peut être résolue et ne peut pas être précédée par « http:// ».  
  
   
  
## Examples  
 Cet exemple signale ou non peut être exécutée sur le serveur en déterminant si le `Ping` retourne de la méthode `True`.  
  
 [!code-vb[VbVbalrMyNetwork#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#4)]  
  
 Remplacez `"198.01.01.01"` avec le nom d’ordinateur, l’URL ou adresse IP du serveur à la commande ping.  
  
 Cet exemple signale ou non peut être exécutée sur le serveur en déterminant si le `Ping` méthode retournée `True` et spécifie un intervalle de délai de 1000 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#5)]  
  
 Remplacez `"www.cohowinery.com"` avec le nom d’ordinateur, l’URL ou adresse IP du serveur à la commande ping.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No network connection is available.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">URL was not valid.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Décrit un ensemble d’autorisations de sécurité appliquées au code. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.SocketPermission">Contrôle les droits d’établissement ou d’acceptation des connexions sur une adresse de transport. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">Contrôle l’accès à un composant de compteur de performances Windows NT. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Contrôle l’accès aux informations réseau et les statistiques de trafic pour l’ordinateur local. Énumération associée : <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" />.</permission>
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sends the specified file to the specified host address.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public void UploadFile (string sourceFileName, string address);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void UploadFile(string sourceFileName, string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.UploadFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadFile (sourceFileName As String, address As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadFile(System::String ^ sourceFileName, System::String ^ address);" />
      <MemberSignature Language="F#" Value="member this.UploadFile : string * string -&gt; unit" Usage="network.UploadFile (sourceFileName, address)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path and name of file to upload.</param>
        <param name="address">URL, IP address, or URI of destination server.</param>
        <summary>Sends the specified file to the specified host address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser une des autres surcharges de la <xref:Microsoft.VisualBasic.Devices.Network.UploadFile%2A> méthode pour fournir des informations d’identification de l’utilisateur ou spécifier une valeur de délai d’attente spécifique.  
  
 `My.Computer.Network.UploadFile` sorties des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau de l’activation](~/docs/framework/network-programming/enabling-network-tracing.md).  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Network.UploadFile` (méthode).  
  
|À|Voir|  
|-|-|  
|Charger un fichier|[Guide pratique : charger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-upload-a-file.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `Order.txt` à `http://www.cohowinery.com/uploads`.  
  
 [!code-vb[VbVbalrMyNetwork#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#2)]  
  
 Cet exemple charge le fichier `Order.txt` sur `http://www.cohowinery.com/uploads` sans fournir de nom d’utilisateur ou de mot de passe, affiche la progression du chargement, et présente un délai d’attente de 500 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The source file path is not valid.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="address" /> does not include a file name.</exception>
        <exception cref="T:System.Security.SecurityException">User lacks necessary permissions to perform a network operation.</exception>
        <exception cref="T:System.TimeoutException">The server does not respond within the default timeout (100 seconds).</exception>
        <exception cref="T:System.Net.WebException">The request is denied by the target web server.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ICredentials" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public void UploadFile (string sourceFileName, Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void UploadFile(string sourceFileName, class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.UploadFile(System.String,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadFile (sourceFileName As String, address As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadFile(System::String ^ sourceFileName, Uri ^ address);" />
      <MemberSignature Language="F#" Value="member this.UploadFile : string * Uri -&gt; unit" Usage="network.UploadFile (sourceFileName, address)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path and name of file to upload.</param>
        <param name="address">URL, IP address, or URI of destination server.</param>
        <summary>Sends the specified file to the specified host address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser une des autres surcharges de la <xref:Microsoft.VisualBasic.Devices.Network.UploadFile%2A> méthode pour fournir des informations d’identification de l’utilisateur ou spécifier une valeur de délai d’attente spécifique.  
  
 `My.Computer.Network.UploadFile` sorties des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau de l’activation](~/docs/framework/network-programming/enabling-network-tracing.md).  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Network.UploadFile` (méthode).  
  
|À|Voir|  
|-|-|  
|Charger un fichier|[Guide pratique : charger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-upload-a-file.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `Order.txt` à `http://www.cohowinery.com/uploads`.  
  
 [!code-vb[VbVbalrMyNetwork#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#2)]  
  
 Cet exemple charge le fichier `Order.txt` sur `http://www.cohowinery.com/uploads` sans fournir de nom d’utilisateur ou de mot de passe, affiche la progression du chargement, et présente un délai d’attente de 500 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The source file path is not valid.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="address" /> does not include a file name.</exception>
        <exception cref="T:System.Security.SecurityException">User lacks necessary permissions to perform a network operation.</exception>
        <exception cref="T:System.TimeoutException">The server does not respond within the default timeout (100 seconds).</exception>
        <exception cref="T:System.Net.WebException">The request is denied by the target web server.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ICredentials" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public void UploadFile (string sourceFileName, string address, string userName, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void UploadFile(string sourceFileName, string address, string userName, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.UploadFile(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadFile (sourceFileName As String, address As String, userName As String, password As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadFile(System::String ^ sourceFileName, System::String ^ address, System::String ^ userName, System::String ^ password);" />
      <MemberSignature Language="F#" Value="member this.UploadFile : string * string * string * string -&gt; unit" Usage="network.UploadFile (sourceFileName, address, userName, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path and name of file to upload.</param>
        <param name="address">URL, IP address, or URI of destination server.</param>
        <param name="userName">User name to authenticate. Default is an empty string: <c>""</c>.</param>
        <param name="password">Password to authenticate. Default is an empty string: <c>""</c>.</param>
        <summary>Sends the specified file to the specified host address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser une des autres surcharges de la <xref:Microsoft.VisualBasic.Devices.Network.UploadFile%2A> méthode pour spécifier une valeur de délai d’attente spécifique.  
  
 `My.Computer.Network.UploadFile` sorties des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau de l’activation](~/docs/framework/network-programming/enabling-network-tracing.md).  
  
> [!NOTE]
>  Le protocole FTP envoie des informations, y compris les mots de passe en texte brut et ne doit pas être utilisé pour transmettre des informations sensibles.  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Network.UploadFile` (méthode).  
  
|À|Voir|  
|-|-|  
|Charger un fichier|[Guide pratique : charger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-upload-a-file.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `Order.txt` à `http://www.cohowinery.com/uploads`.  
  
 [!code-vb[VbVbalrMyNetwork#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#2)]  
  
 Cet exemple charge le fichier `Order.txt` sur `http://www.cohowinery.com/uploads` sans fournir de nom d’utilisateur ou de mot de passe, affiche la progression du chargement, et présente un délai d’attente de 500 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="connectionTimeout" /> is less than or equal to zero.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="address" /> does not include a file name.</exception>
        <exception cref="T:System.Security.SecurityException">User lacks necessary permissions to perform a network operation.</exception>
        <exception cref="T:System.TimeoutException">The server does not respond within the default timeout (100 seconds).</exception>
        <exception cref="T:System.Net.WebException">The request is denied by the target web server.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ICredentials" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public void UploadFile (string sourceFileName, Uri address, string userName, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void UploadFile(string sourceFileName, class System.Uri address, string userName, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.UploadFile(System.String,System.Uri,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadFile (sourceFileName As String, address As Uri, userName As String, password As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadFile(System::String ^ sourceFileName, Uri ^ address, System::String ^ userName, System::String ^ password);" />
      <MemberSignature Language="F#" Value="member this.UploadFile : string * Uri * string * string -&gt; unit" Usage="network.UploadFile (sourceFileName, address, userName, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path and name of file to upload.</param>
        <param name="address">URL, IP address, or URI of destination server.</param>
        <param name="userName">User name to authenticate. Default is an empty string: <c>""</c>.</param>
        <param name="password">Password to authenticate. Default is an empty string: <c>""</c>.</param>
        <summary>Sends the specified file to the specified host address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser une des autres surcharges de la <xref:Microsoft.VisualBasic.Devices.Network.UploadFile%2A> méthode pour spécifier une valeur de délai d’attente spécifique.  
  
 `My.Computer.Network.UploadFile` sorties des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau de l’activation](~/docs/framework/network-programming/enabling-network-tracing.md).  
  
> [!NOTE]
>  Le protocole FTP envoie des informations, y compris les mots de passe en texte brut et ne doit pas être utilisé pour transmettre des informations sensibles.  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Network.UploadFile` (méthode).  
  
|À|Voir|  
|-|-|  
|Charger un fichier|[Guide pratique : charger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-upload-a-file.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `Order.txt` à `http://www.cohowinery.com/uploads`.  
  
 [!code-vb[VbVbalrMyNetwork#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#2)]  
  
 Cet exemple charge le fichier `Order.txt` sur `http://www.cohowinery.com/uploads` sans fournir de nom d’utilisateur ou de mot de passe, affiche la progression du chargement, et présente un délai d’attente de 500 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="connectionTimeout" /> is less than or equal to zero.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="address" /> does not include a file name.</exception>
        <exception cref="T:System.Security.SecurityException">User lacks necessary permissions to perform a network operation.</exception>
        <exception cref="T:System.TimeoutException">The server does not respond within the default timeout (100 seconds).</exception>
        <exception cref="T:System.Net.WebException">The request is denied by the target web server.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ICredentials" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public void UploadFile (string sourceFileName, Uri address, System.Net.ICredentials networkCredentials, bool showUI, int connectionTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void UploadFile(string sourceFileName, class System.Uri address, class System.Net.ICredentials networkCredentials, bool showUI, int32 connectionTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.UploadFile(System.String,System.Uri,System.Net.ICredentials,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadFile (sourceFileName As String, address As Uri, networkCredentials As ICredentials, showUI As Boolean, connectionTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadFile(System::String ^ sourceFileName, Uri ^ address, System::Net::ICredentials ^ networkCredentials, bool showUI, int connectionTimeout);" />
      <MemberSignature Language="F#" Value="member this.UploadFile : string * Uri * System.Net.ICredentials * bool * int -&gt; unit" Usage="network.UploadFile (sourceFileName, address, networkCredentials, showUI, connectionTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="networkCredentials" Type="System.Net.ICredentials" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path and name of file to upload.</param>
        <param name="address">URL, IP address, or URI of destination server.</param>
        <param name="networkCredentials">Credentials for authentication.</param>
        <param name="showUI">
          <see langword="True" /> to display progress of the operation; otherwise <see langword="False" />. Default is <see langword="False" />.</param>
        <param name="connectionTimeout">Timeout interval in milliseconds. Default is 100 seconds.</param>
        <summary>Sends the specified file to the specified host address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `showUI` a la valeur `True`, une boîte de dialogue affiche la progression de l’opération et inclut un **Annuler** bouton l’utilisateur peut cliquer pour annuler l’opération. La boîte de dialogue n’étant pas modale, elle ne bloque pas l’entrée utilisateur et les autres fenêtres dans le programme.  
  
 Si le serveur ne répond pas dans l’intervalle spécifié dans `connectionTimeout`, l’opération est annulée et une exception est levée.  
  
 `My.Computer.Network.UploadFile` sorties des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau de l’activation](~/docs/framework/network-programming/enabling-network-tracing.md).  
  
> [!NOTE]
>  Le protocole FTP envoie des informations, y compris les mots de passe en texte brut et ne doit pas être utilisé pour transmettre des informations sensibles.  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Network.UploadFile` (méthode).  
  
|À|Voir|  
|-|-|  
|Charger un fichier|[Guide pratique : charger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-upload-a-file.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `Order.txt` à `http://www.cohowinery.com/uploads`.  
  
 [!code-vb[VbVbalrMyNetwork#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#2)]  
  
 Cet exemple charge le fichier `Order.txt` sur `http://www.cohowinery.com/uploads` sans fournir de nom d’utilisateur ou de mot de passe, affiche la progression du chargement, et présente un délai d’attente de 500 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="connectionTimeout" /> is less than or equal to zero.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="address" /> does not include a file name.</exception>
        <exception cref="T:System.Security.SecurityException">User lacks necessary permissions to perform a network operation.</exception>
        <exception cref="T:System.TimeoutException">The server does not respond within the specified <paramref name="connectionTimeout" />.</exception>
        <exception cref="T:System.Net.WebException">The request is denied by the target web server.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Contrôle les autorisations relatives aux interfaces utilisateur et au Presse-papiers. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ICredentials" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public void UploadFile (string sourceFileName, string address, string userName, string password, bool showUI, int connectionTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void UploadFile(string sourceFileName, string address, string userName, string password, bool showUI, int32 connectionTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.UploadFile(System.String,System.String,System.String,System.String,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadFile (sourceFileName As String, address As String, userName As String, password As String, showUI As Boolean, connectionTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadFile(System::String ^ sourceFileName, System::String ^ address, System::String ^ userName, System::String ^ password, bool showUI, int connectionTimeout);" />
      <MemberSignature Language="F#" Value="member this.UploadFile : string * string * string * string * bool * int -&gt; unit" Usage="network.UploadFile (sourceFileName, address, userName, password, showUI, connectionTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path and name of file to upload.</param>
        <param name="address">URL, IP address, or URI of destination server.</param>
        <param name="userName">User name to authenticate. Default is an empty string: <c>""</c>.</param>
        <param name="password">Password to authenticate. Default is an empty string: <c>""</c>.</param>
        <param name="showUI">
          <see langword="True" /> to display progress of the operation; otherwise <see langword="False" />. Default is <see langword="False" />.</param>
        <param name="connectionTimeout">Timeout interval in milliseconds. Default is 100 seconds.</param>
        <summary>Sends the specified file to the specified host address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `showUI` a la valeur `True`, une boîte de dialogue affiche la progression de l’opération et inclut un **Annuler** bouton l’utilisateur peut cliquer pour annuler l’opération. La boîte de dialogue n’étant pas modale, elle ne bloque pas l’entrée utilisateur et les autres fenêtres dans le programme.  
  
 Si le serveur ne répond pas dans l’intervalle spécifié dans `connectionTimeout`, l’opération est annulée et une exception est levée.  
  
 `My.Computer.Network.UploadFile` sorties des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau de l’activation](~/docs/framework/network-programming/enabling-network-tracing.md).  
  
> [!NOTE]
>  Le protocole FTP envoie des informations, y compris les mots de passe en texte brut et ne doit pas être utilisé pour transmettre des informations sensibles.  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Network.UploadFile` (méthode).  
  
|À|Voir|  
|-|-|  
|Charger un fichier|[Guide pratique : charger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-upload-a-file.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `Order.txt` à `http://www.cohowinery.com/uploads`.  
  
 [!code-vb[VbVbalrMyNetwork#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#2)]  
  
 Cet exemple charge le fichier `Order.txt` sur `http://www.cohowinery.com/uploads` sans fournir de nom d’utilisateur ou de mot de passe, affiche la progression du chargement, et présente un délai d’attente de 500 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="connectionTimeout" /> is less than or equal to zero.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="address" /> does not include a file name.</exception>
        <exception cref="T:System.Security.SecurityException">User lacks necessary permissions to perform a network operation.</exception>
        <exception cref="T:System.TimeoutException">The server does not respond within the specified <paramref name="connectionTimeout" />.</exception>
        <exception cref="T:System.Net.WebException">The request is denied by the target web server.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Contrôle les autorisations relatives aux interfaces utilisateur et au Presse-papiers. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ICredentials" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public void UploadFile (string sourceFileName, Uri address, System.Net.ICredentials networkCredentials, bool showUI, int connectionTimeout, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void UploadFile(string sourceFileName, class System.Uri address, class System.Net.ICredentials networkCredentials, bool showUI, int32 connectionTimeout, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.UploadFile(System.String,System.Uri,System.Net.ICredentials,System.Boolean,System.Int32,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadFile (sourceFileName As String, address As Uri, networkCredentials As ICredentials, showUI As Boolean, connectionTimeout As Integer, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadFile(System::String ^ sourceFileName, Uri ^ address, System::Net::ICredentials ^ networkCredentials, bool showUI, int connectionTimeout, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.UploadFile : string * Uri * System.Net.ICredentials * bool * int * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="network.UploadFile (sourceFileName, address, networkCredentials, showUI, connectionTimeout, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="networkCredentials" Type="System.Net.ICredentials" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path and name of file to upload.</param>
        <param name="address">URL, IP address, or URI of destination server.</param>
        <param name="networkCredentials">Credentials for authentication.</param>
        <param name="showUI">
          <see langword="True" /> to display progress of the operation; otherwise <see langword="False" />. Default is <see langword="False" />.</param>
        <param name="connectionTimeout">Timeout interval in milliseconds. Default is 100 seconds.</param>
        <param name="onUserCancel">Action to be taken when the user clicks **Cancel**. Default is <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />.</param>
        <summary>Sends the specified file to the specified host address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `showUI` a la valeur `True`, une boîte de dialogue affiche la progression de l’opération et inclut un **Annuler** bouton l’utilisateur peut cliquer pour annuler l’opération. La boîte de dialogue n’étant pas modale, elle ne bloque pas l’entrée utilisateur et les autres fenêtres dans le programme.  
  
 Si le serveur ne répond pas dans l’intervalle spécifié dans `connectionTimeout`, l’opération est annulée et une exception est levée.  
  
 `My.Computer.Network.UploadFile` sorties des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau de l’activation](~/docs/framework/network-programming/enabling-network-tracing.md).  
  
> [!NOTE]
>  Le protocole FTP envoie des informations, y compris les mots de passe en texte brut et ne doit pas être utilisé pour transmettre des informations sensibles.  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Network.UploadFile` (méthode).  
  
|À|Voir|  
|-|-|  
|Charger un fichier|[Guide pratique : charger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-upload-a-file.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `Order.txt` à `http://www.cohowinery.com/uploads`.  
  
 [!code-vb[VbVbalrMyNetwork#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#2)]  
  
 Cet exemple charge le fichier `Order.txt` sur `http://www.cohowinery.com/uploads` sans fournir de nom d’utilisateur ou de mot de passe, affiche la progression du chargement, et présente un délai d’attente de 500 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="connectionTimeout" /> is less than or equal to zero.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="address" /> does not include a file name.</exception>
        <exception cref="T:System.Security.SecurityException">User lacks necessary permissions to perform a network operation.</exception>
        <exception cref="T:System.TimeoutException">The server does not respond within the specified <paramref name="connectionTimeout" />.</exception>
        <exception cref="T:System.Net.WebException">The request is denied by the target web server.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Contrôle les autorisations relatives aux interfaces utilisateur et au Presse-papiers. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ICredentials" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public void UploadFile (string sourceFileName, Uri address, string userName, string password, bool showUI, int connectionTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void UploadFile(string sourceFileName, class System.Uri address, string userName, string password, bool showUI, int32 connectionTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.UploadFile(System.String,System.Uri,System.String,System.String,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadFile (sourceFileName As String, address As Uri, userName As String, password As String, showUI As Boolean, connectionTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadFile(System::String ^ sourceFileName, Uri ^ address, System::String ^ userName, System::String ^ password, bool showUI, int connectionTimeout);" />
      <MemberSignature Language="F#" Value="member this.UploadFile : string * Uri * string * string * bool * int -&gt; unit" Usage="network.UploadFile (sourceFileName, address, userName, password, showUI, connectionTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path and name of file to upload.</param>
        <param name="address">URL, IP address, or URI of destination server.</param>
        <param name="userName">User name to authenticate. Default is an empty string: <c>""</c>.</param>
        <param name="password">Password to authenticate. Default is an empty string: <c>""</c>.</param>
        <param name="showUI">
          <see langword="True" /> to display progress of the operation; otherwise <see langword="False" />. Default is <see langword="False" />.</param>
        <param name="connectionTimeout">Timeout interval in milliseconds. Default is 100 seconds.</param>
        <summary>Sends the specified file to the specified host address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `showUI` a la valeur `True`, une boîte de dialogue affiche la progression de l’opération et inclut un **Annuler** bouton l’utilisateur peut cliquer pour annuler l’opération. La boîte de dialogue n’étant pas modale, elle ne bloque pas l’entrée utilisateur et les autres fenêtres dans le programme.  
  
 Si le serveur ne répond pas dans l’intervalle spécifié dans `connectionTimeout`, l’opération est annulée et une exception est levée.  
  
 `My.Computer.Network.UploadFile` sorties des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau de l’activation](~/docs/framework/network-programming/enabling-network-tracing.md).  
  
> [!NOTE]
>  Le protocole FTP envoie des informations, y compris les mots de passe en texte brut et ne doit pas être utilisé pour transmettre des informations sensibles.  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Network.UploadFile` (méthode).  
  
|À|Voir|  
|-|-|  
|Charger un fichier|[Guide pratique : charger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-upload-a-file.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `Order.txt` à `http://www.cohowinery.com/uploads`.  
  
 [!code-vb[VbVbalrMyNetwork#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#2)]  
  
 Cet exemple charge le fichier `Order.txt` sur `http://www.cohowinery.com/uploads` sans fournir de nom d’utilisateur ou de mot de passe, affiche la progression du chargement, et présente un délai d’attente de 500 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="connectionTimeout" /> is less than or equal to zero.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="address" /> does not include a file name.</exception>
        <exception cref="T:System.Security.SecurityException">User lacks necessary permissions to perform a network operation.</exception>
        <exception cref="T:System.TimeoutException">The server does not respond within the specified <paramref name="connectionTimeout" />.</exception>
        <exception cref="T:System.Net.WebException">The request is denied by the target web server.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Contrôle les autorisations relatives aux interfaces utilisateur et au Presse-papiers. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ICredentials" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public void UploadFile (string sourceFileName, string address, string userName, string password, bool showUI, int connectionTimeout, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void UploadFile(string sourceFileName, string address, string userName, string password, bool showUI, int32 connectionTimeout, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.UploadFile(System.String,System.String,System.String,System.String,System.Boolean,System.Int32,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadFile (sourceFileName As String, address As String, userName As String, password As String, showUI As Boolean, connectionTimeout As Integer, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadFile(System::String ^ sourceFileName, System::String ^ address, System::String ^ userName, System::String ^ password, bool showUI, int connectionTimeout, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.UploadFile : string * string * string * string * bool * int * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="network.UploadFile (sourceFileName, address, userName, password, showUI, connectionTimeout, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path and name of file to upload.</param>
        <param name="address">URL, IP address, or URI of destination server.</param>
        <param name="userName">User name to authenticate. Default is an empty string: <c>""</c>.</param>
        <param name="password">Password to authenticate. Default is an empty string: <c>""</c>.</param>
        <param name="showUI">Whether to display progress of the operation. Default is <see langword="False" />.</param>
        <param name="connectionTimeout">Timeout interval in milliseconds. Default is 100 seconds.</param>
        <param name="onUserCancel">Action to be taken when the user clicks **Cancel**. Default is <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />.</param>
        <summary>Sends the specified file to the specified host address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `showUI` a la valeur `True`, une boîte de dialogue affiche la progression de l’opération et inclut un **Annuler** bouton l’utilisateur peut cliquer pour annuler l’opération. La boîte de dialogue n’étant pas modale, elle ne bloque pas l’entrée utilisateur et les autres fenêtres dans le programme.  
  
 Si le serveur ne répond pas dans l’intervalle spécifié dans `connectionTimeout`, l’opération est annulée et une exception est levée.  
  
 `My.Computer.Network.UploadFile` sorties des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau de l’activation](~/docs/framework/network-programming/enabling-network-tracing.md).  
  
> [!NOTE]
>  Le protocole FTP envoie des informations, y compris les mots de passe en texte brut et ne doit pas être utilisé pour transmettre des informations sensibles.  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Network.UploadFile` (méthode).  
  
|À|Voir|  
|-|-|  
|Charger un fichier|[Guide pratique : charger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-upload-a-file.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `Order.txt` à `http://www.cohowinery.com/uploads`.  
  
 [!code-vb[VbVbalrMyNetwork#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#2)]  
  
 Cet exemple charge le fichier `Order.txt` sur `http://www.cohowinery.com/uploads` sans fournir de nom d’utilisateur ou de mot de passe, affiche la progression du chargement, et présente un délai d’attente de 500 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="connectionTimeout" /> is less than or equal to zero.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="address" /> does not include a file name.</exception>
        <exception cref="T:System.Security.SecurityException">User lacks necessary permissions to perform a network operation.</exception>
        <exception cref="T:System.TimeoutException">The server does not respond within the specified <paramref name="connectionTimeout" />.</exception>
        <exception cref="T:System.Net.WebException">The request is denied by the target web server.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Contrôle les autorisations relatives aux interfaces utilisateur et au Presse-papiers. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ICredentials" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public void UploadFile (string sourceFileName, Uri address, string userName, string password, bool showUI, int connectionTimeout, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void UploadFile(string sourceFileName, class System.Uri address, string userName, string password, bool showUI, int32 connectionTimeout, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Network.UploadFile(System.String,System.Uri,System.String,System.String,System.Boolean,System.Int32,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadFile (sourceFileName As String, address As Uri, userName As String, password As String, showUI As Boolean, connectionTimeout As Integer, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadFile(System::String ^ sourceFileName, Uri ^ address, System::String ^ userName, System::String ^ password, bool showUI, int connectionTimeout, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.UploadFile : string * Uri * string * string * bool * int * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="network.UploadFile (sourceFileName, address, userName, password, showUI, connectionTimeout, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path and name of file to upload.</param>
        <param name="address">URL, IP address, or URI of destination server.</param>
        <param name="userName">User name to authenticate. Default is an empty string: <c>""</c>.</param>
        <param name="password">Password to authenticate. Default is an empty string: <c>""</c>.</param>
        <param name="showUI">Whether to display progress of the operation. Default is <see langword="False" />.</param>
        <param name="connectionTimeout">Timeout interval in milliseconds. Default is 100 seconds.</param>
        <param name="onUserCancel">Action to be taken when the user clicks **Cancel**. Default is <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />.</param>
        <summary>Sends the specified file to the specified host address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `showUI` a la valeur `True`, une boîte de dialogue affiche la progression de l’opération et inclut un **Annuler** bouton l’utilisateur peut cliquer pour annuler l’opération. La boîte de dialogue n’étant pas modale, elle ne bloque pas l’entrée utilisateur et les autres fenêtres dans le programme.  
  
 Si le serveur ne répond pas dans l’intervalle spécifié dans `connectionTimeout`, l’opération est annulée et une exception est levée.  
  
 `My.Computer.Network.UploadFile` sorties des informations de traçage lorsque vous activez le traçage réseau dans votre application. Pour plus d’informations, consultez [le traçage réseau de l’activation](~/docs/framework/network-programming/enabling-network-tracing.md).  
  
> [!NOTE]
>  Le protocole FTP envoie des informations, y compris les mots de passe en texte brut et ne doit pas être utilisé pour transmettre des informations sensibles.  
  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Network.UploadFile` (méthode).  
  
|À|Voir|  
|-|-|  
|Charger un fichier|[Guide pratique : charger un fichier](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-upload-a-file.md)|  
  
   
  
## Examples  
 Cet exemple télécharge le fichier `Order.txt` à `http://www.cohowinery.com/uploads`.  
  
 [!code-vb[VbVbalrMyNetwork#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#2)]  
  
 Cet exemple charge le fichier `Order.txt` sur `http://www.cohowinery.com/uploads` sans fournir de nom d’utilisateur ou de mot de passe, affiche la progression du chargement, et présente un délai d’attente de 500 millisecondes.  
  
 [!code-vb[VbVbalrMyNetwork#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyNetwork/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="connectionTimeout" /> is less than or equal to zero.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="address" /> does not include a file name.</exception>
        <exception cref="T:System.Security.SecurityException">User lacks necessary permissions to perform a network operation.</exception>
        <exception cref="T:System.TimeoutException">The server does not respond within the specified <paramref name="connectionTimeout" />.</exception>
        <exception cref="T:System.Net.WebException">The request is denied by the target web server.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Contrôle les autorisations relatives aux interfaces utilisateur et au Presse-papiers. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <permission cref="T:System.Net.WebPermission">Contrôle les droits d’accès aux ressources HTTP Internet. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Net.ICredentials" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
  </Members>
</Type>