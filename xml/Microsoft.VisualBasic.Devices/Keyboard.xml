<Type Name="Keyboard" FullName="Microsoft.VisualBasic.Devices.Keyboard">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3935cead12b64f3f847734107688d50ba271bff1" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36659097" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Keyboard" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Keyboard extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Devices.Keyboard" />
  <TypeSignature Language="VB.NET" Value="Public Class Keyboard" />
  <TypeSignature Language="C++ CLI" Value="public ref class Keyboard" />
  <TypeSignature Language="F#" Value="type Keyboard = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit des propriétés utilisées pour accéder à l’état actuel du clavier, par exemple pour savoir quelles touches sont actuellement utilisées, et fournit une méthode permettant d’envoyer des séquences de touches à la fenêtre active.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `My.Computer.Keyboard` objet fournit une interface pour le clavier de l’ordinateur. Les propriétés de la `My.Computer.Keyboard` fournissent des informations sur l’état de plusieurs touches spéciales. Le `My.Computer.Keyboard.SendKeys` méthode vous permet d’envoyer des clés à la fenêtre active comme si elles ont été tapées sur le clavier.  
  
## <a name="tasks"></a>Tâches  
 Le tableau suivant répertorie un exemple de tâche impliquant la `My.Computer.Keyboard` objet.  
  
|À|Voir|  
|-|-|  
|Envoyer des séquences de touches à une application|[Guide pratique pour démarrer une application et lui envoyer des séquences de touches (Visual Basic)](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-start-an-application-and-send-it-keystrokes.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|-|-|  
|Application Windows|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|Non|  
  
   
  
## Examples  
 Cet exemple utilise le `My.Computer.Keyboard.CtrlKeyDown` propriété pour déterminer si la touche CTRL de l’ordinateur est activée.  
  
 [!code-vb[VbVbalrMyComputer#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#36)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Keyboard ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Keyboard();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.VisualBasic.Devices.Keyboard" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
      </Docs>
    </Member>
    <Member MemberName="AltKeyDown">
      <MemberSignature Language="C#" Value="public bool AltKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AltKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AltKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AltKeyDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AltKeyDown : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see langword="Boolean" /> indiquant si la touche ALT est enfoncée.</summary>
        <value>Valeur <see langword="Boolean" /> : <see langword="True" /> si la touche ALT est enfoncée ; sinon <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `My.Computer.Keyboard.AltKeyDown` propriété fournit une fonctionnalité similaire à la <xref:System.Windows.Forms.Control.ModifierKeys%2A> propriété.  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|-|-|  
|Application Windows|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|Non|  
  
   
  
## Examples  
 Cet exemple utilise le `My.Computer.Keyboard.AltKeyDown` propriété pour déterminer si la touche ALT de l’ordinateur est arrêté.  
  
 [!code-vb[VbVbalrMyComputer#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#23)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
    <Member MemberName="CapsLock">
      <MemberSignature Language="C#" Value="public bool CapsLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CapsLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.CapsLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CapsLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CapsLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CapsLock : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.CapsLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see langword="Boolean" /> indiquant si la touche VERR. MAJ est activée.</summary>
        <value>Valeur <see langword="Boolean" /> : <see langword="True" /> si VERR. MAJ est activée ; sinon <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Seul l’état de verrouillage majuscule n’est retournée.  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|-|-|  
|Application Windows|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|Non|  
  
   
  
## Examples  
 Cet exemple utilise le `My.Computer.Keyboard.CapsLock` propriété pour déterminer si le verrouillage des majuscules de l’ordinateur est allumé.  
  
 [!code-vb[VbVbalrMyComputer#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#50)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
      </Docs>
    </Member>
    <Member MemberName="CtrlKeyDown">
      <MemberSignature Language="C#" Value="public bool CtrlKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CtrlKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CtrlKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CtrlKeyDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CtrlKeyDown : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see langword="Boolean" /> indiquant si une touche CTRL est enfoncée.</summary>
        <value>Valeur <see langword="Boolean" />. <see langword="True" /> si une touche CTRL est enfoncée ; sinon, <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `My.Computer.Keyboard.CtrlKeyDown` propriété fournit une fonctionnalité similaire à la <xref:System.Windows.Forms.Control.ModifierKeys%2A> propriété.  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|-|-|  
|Application Windows|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|Non|  
  
   
  
## Examples  
 Cet exemple utilise le `My.Computer.Keyboard.CtrlKeyDown` propriété pour déterminer si la touche CTRL de l’ordinateur est arrêté.  
  
 [!code-vb[VbVbalrMyComputer#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
    <Member MemberName="NumLock">
      <MemberSignature Language="C#" Value="public bool NumLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NumLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.NumLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NumLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NumLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.NumLock : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.NumLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur <see langword="Boolean" /> indiquant si la touche VERR. NUM est activée.</summary>
        <value>Valeur <see langword="Boolean" />. <see langword="True" /> si la touche VERR. NUM est activée ; sinon <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Seul l’état de la touche VERR. NUM est retourné.  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|-|-|  
|Application Windows|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|Non|  
  
   
  
## Examples  
 Cet exemple utilise le `My.Computer.Keyboard.NumLock` propriété pour déterminer si touche VERR. NUM l’ordinateur est activée.  
  
 [!code-vb[VbVbalrMyComputer#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
      </Docs>
    </Member>
    <Member MemberName="ScrollLock">
      <MemberSignature Language="C#" Value="public bool ScrollLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScrollLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.ScrollLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScrollLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ScrollLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ScrollLock : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.ScrollLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur <see langword="Boolean" /> indiquant si la touche ARRÊT DÉFIL. est activée.</summary>
        <value>Valeur <see langword="Boolean" />. <see langword="True" /> si la touche ARRÊT DÉFIL. est activée ; sinon <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Seul l’état de la touche Arrêt défil est retourné.  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|-|-|  
|Application Windows|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|Non|  
  
   
  
## Examples  
 Cet exemple utilise le `My.Computer.Keyboard.ScrollLock` propriété pour déterminer si la touche Arrêt défil de l’ordinateur est activée.  
  
 [!code-vb[VbVbalrMyComputer#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SendKeys">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Envoie une ou plusieurs séquences de touches à la fenêtre active, comme si elle était tapée sur le clavier.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendKeys">
      <MemberSignature Language="C#" Value="public void SendKeys (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SendKeys(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendKeys (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendKeys(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="member this.SendKeys : string -&gt; unit" Usage="keyboard.SendKeys keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">
          <see langword="String" /> qui définit les touches à envoyer.</param>
        <summary>Envoie une ou plusieurs séquences de touches à la fenêtre active, comme si elle était tapée sur le clavier.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `My.Computer.Keyboard.SendKeys` méthode fournit une fonctionnalité similaire à la <xref:System.Windows.Forms.SendKeys.Send%2A> et <xref:System.Windows.Forms.SendKeys.SendWait%2A> méthodes.  
  
 Le `wait` argument est utile si l’autre application doit se terminer avant que votre application puisse continuer.  
  
> [!NOTE]
>  Étant donné qu’aucune méthode managée permettant d’activer une autre application, vous pouvez utiliser cette classe dans l’application actuelle, manuellement sélectionnez la fenêtre pour envoyer les touches ou utiliser les méthodes API Windows, telles que `FindWindow` et `SetForegroundWindow`, pour forcer le focus sur d’autres applications. Pour plus d’informations, consultez [procédure pas à pas : appel des API Windows](~/docs/visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis.md).  
  
 Le `keys` argument peut spécifier n’importe quelle touche unique ou n’importe quelle touche combinée avec ALT, CTRL ou MAJ (ou n’importe quelle combinaison de ces touches). Chaque clé est représentée par un ou plusieurs caractères, tels que `a` pour le caractère « a », ou `{ENTER}` pour la touche ENTRÉE.  
  
 Pour associer une clé avec la touche MAJ ENFONCÉE, faites précéder le code de touche avec `+` (signe plus). Pour associer une clé à la touche CTRL, faites précéder le code de touche avec `^` (signe insertion). Pour associer une clé avec la touche ALT, faites précéder le code de touche avec `%` (signe de pourcentage). Pour spécifier la répétition de touches, utilisez le formulaire `{` *numéro de clé*`}`. Vous devez placer un espace entre *clé* et *nombre*. Par exemple, `{LEFT 42}` signifie « appuyez sur la touche de direction gauche 42 fois » ; `{h 10}` signifie « appuyez sur 'h' 10 fois. »  
  
 Le tableau suivant répertorie les codes qui peuvent être utilisés pour spécifier des caractères qui ne sont pas affichés lorsque vous appuyez sur la clé correspondante (par exemple, l’entrée ou de tabulation).  
  
|Touche|Code|  
|-|-|  
|RETOUR ARRIÈRE|{Retour arrière} ou {BS}|  
|ARRÊTER|SAUT DE {}|  
|VERR. MAJ|{CAPSLOCK}|  
|EFFACER|{CLAIR}|  
|SUPPR|{SUPPRIMER} ou {Suppr}|  
|BAS|{LA}|  
|FIN|{FIN}|  
|ENTRÉE (pavé numérique)|{ENTREZ}|  
|ENTRÉE|~|  
|ÉCHAP|{D’échappement} ou {ÉCHAP}|  
|AIDE|{HELP}|  
|ORIGINE|{ACCUEIL}|  
|INS|{INSERT}|  
|GAUCHE|{LEFT}|  
|VERR. NUM|{NUM}|  
|Page suivante|{PG SUIV}|  
|Page précédente|{PG PRÉC}|  
|DE RETOUR|{RETURN}|  
|DROITE|{RIGHT}|  
|VERROUS DE DÉFILEMENT|{ARRÊT DÉFIL}|  
|TAB|{L’ONGLET}|  
|HAUT|{LES}|  
|F1 à F15|{F1} à {F15}|  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|-|-|  
|Application Windows|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|Non|  
  
   
  
## Examples  
 Cet exemple utilise le `My.Computer.Keyboard.SendKeys` méthode pour envoyer des séquences de touches à une application externe, l’application Calculatrice, démarrée par le `Shell` (fonction).  
  
 [!code-vb[VbVbalrMyComputer#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#25)]  
  
 Une exception <xref:System.ArgumentException> est levée si aucune application avec l’identificateur de processus demandé n’est trouvée.  
  
 L’appel à la fonction `Shell` nécessite une confiance totale (classe <xref:System.Security.SecurityException>).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Il existe une situation d'un niveau de confiance partiel dans laquelle l'utilisateur ne dispose des autorisations nécessaires.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Contrôle les autorisations relatives aux interfaces utilisateur et au Presse-papiers. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
        <altmember cref="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SendKeys">
      <MemberSignature Language="C#" Value="public void SendKeys (string keys, bool wait);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SendKeys(string keys, bool wait) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendKeys (keys As String, wait As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendKeys(System::String ^ keys, bool wait);" />
      <MemberSignature Language="F#" Value="member this.SendKeys : string * bool -&gt; unit" Usage="keyboard.SendKeys (keys, wait)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="wait" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="keys">
          <see langword="String" /> qui définit les touches à envoyer.</param>
        <param name="wait">Optionnel. Valeur <see langword="Boolean" /> qui indique s'il convient ou non d'attendre que les séquences de touches soient traitées avant que l'application continue. <see langword="True" /> par défaut.</param>
        <summary>Envoie une ou plusieurs séquences de touches à la fenêtre active, comme si elle était tapée sur le clavier.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `My.Computer.Keyboard.SendKeys` méthode fournit une fonctionnalité similaire à la <xref:System.Windows.Forms.SendKeys.Send%2A> et <xref:System.Windows.Forms.SendKeys.SendWait%2A> méthodes.  
  
 Le `wait` argument est utile si l’autre application doit se terminer avant que votre application puisse continuer.  
  
> [!NOTE]
>  Étant donné qu’aucune méthode managée permettant d’activer une autre application, vous pouvez utiliser cette classe dans l’application actuelle, manuellement sélectionnez la fenêtre pour envoyer les touches ou utiliser les méthodes API Windows, telles que `FindWindow` et `SetForegroundWindow`, pour forcer le focus sur d’autres applications. Pour plus d’informations, consultez [procédure pas à pas : appel des API Windows](~/docs/visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis.md).  
  
 Le `keys` argument peut spécifier n’importe quelle touche unique ou n’importe quelle touche combinée avec ALT, CTRL ou MAJ (ou n’importe quelle combinaison de ces touches). Chaque clé est représentée par un ou plusieurs caractères, tels que `a` pour le caractère « a », ou `{ENTER}` pour la touche ENTRÉE.  
  
 Pour associer une clé avec la touche MAJ ENFONCÉE, faites précéder le code de touche avec `+` (signe plus). Pour associer une clé à la touche CTRL, faites précéder le code de touche avec `^` (signe insertion). Pour associer une clé avec la touche ALT, faites précéder le code de touche avec `%` (signe de pourcentage). Pour spécifier la répétition de touches, utilisez le formulaire `{` *numéro de clé*`}`. Vous devez placer un espace entre *clé* et *nombre*. Par exemple, `{LEFT 42}` signifie « appuyez sur la touche de direction gauche 42 fois » ; `{h 10}` signifie « appuyez sur 'h' 10 fois. »  
  
 Le tableau suivant répertorie les codes qui peuvent être utilisés pour spécifier des caractères qui ne sont pas affichés lorsque vous appuyez sur la clé correspondante (par exemple, l’entrée ou de tabulation).  
  
|Touche|Code|  
|-|-|  
|RETOUR ARRIÈRE|{Retour arrière} ou {BS}|  
|ARRÊTER|SAUT DE {}|  
|VERR. MAJ|{CAPSLOCK}|  
|EFFACER|{CLAIR}|  
|SUPPR|{SUPPRIMER} ou {Suppr}|  
|BAS|{LA}|  
|FIN|{FIN}|  
|ENTRÉE (pavé numérique)|{ENTREZ}|  
|ENTRÉE|~|  
|ÉCHAP|{D’échappement} ou {ÉCHAP}|  
|AIDE|{HELP}|  
|ORIGINE|{ACCUEIL}|  
|INS|{INSERT}|  
|GAUCHE|{LEFT}|  
|VERR. NUM|{NUM}|  
|Page suivante|{PG SUIV}|  
|Page précédente|{PG PRÉC}|  
|DE RETOUR|{RETURN}|  
|DROITE|{RIGHT}|  
|VERROUS DE DÉFILEMENT|{ARRÊT DÉFIL}|  
|TAB|{L’ONGLET}|  
|HAUT|{LES}|  
|F1 à F15|{F1} à {F15}|  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|-|-|  
|Application Windows|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|Non|  
  
   
  
## Examples  
 Cet exemple utilise le `My.Computer.Keyboard.SendKeys` méthode pour envoyer des séquences de touches à une application externe, l’application Calculatrice, démarrée par le `Shell` (fonction).  
  
 [!code-vb[VbVbalrMyComputer#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#25)]  
  
 Une exception <xref:System.ArgumentException> est levée si aucune application avec l’identificateur de processus demandé n’est trouvée.  
  
 L’appel à la fonction `Shell` nécessite une confiance totale (classe <xref:System.Security.SecurityException>).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Il existe une situation d'un niveau de confiance partiel dans laquelle l'utilisateur ne dispose des autorisations nécessaires.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Contrôle la possibilité d’accéder aux fichiers et dossiers. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Contrôle les autorisations relatives aux interfaces utilisateur et au Presse-papiers. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
        <altmember cref="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ShiftKeyDown">
      <MemberSignature Language="C#" Value="public bool ShiftKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShiftKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShiftKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShiftKeyDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShiftKeyDown : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur <see langword="Boolean" /> indiquant si une touche MAJ est enfoncée.</summary>
        <value>Valeur <see langword="Boolean" />. <see langword="True" /> si une touche MAJ est enfoncée ; sinon <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `My.Computer.Keyboard.ShiftKeyDown` propriété fournit une fonctionnalité similaire à la <xref:System.Windows.Forms.Control.ModifierKeys%2A> propriété.  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|-|-|  
|Application Windows|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|Non|  
  
   
  
## Examples  
 Cet exemple utilise le `My.Computer.Keyboard.ShiftKeyDown` propriété pour déterminer si une des touches MAJ de l’ordinateur est arrêté.  
  
 [!code-vb[VbVbalrMyComputer#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#47)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
  </Members>
</Type>