<Type Name="IAuthorizationPolicy" FullName="System.IdentityModel.Policy.IAuthorizationPolicy">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d430c659ffc6a44e4d3003b30da7487d2f04af16" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37758512" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IAuthorizationPolicy : System.IdentityModel.Policy.IAuthorizationComponent" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAuthorizationPolicy implements class System.IdentityModel.Policy.IAuthorizationComponent" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Policy.IAuthorizationPolicy" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAuthorizationPolicy&#xA;Implements IAuthorizationComponent" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAuthorizationPolicy : System::IdentityModel::Policy::IAuthorizationComponent" />
  <TypeSignature Language="F#" Value="type IAuthorizationPolicy = interface&#xA;    interface IAuthorizationComponent" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Policy.IAuthorizationComponent</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Définit un ensemble de règles pour autoriser un utilisateur en fonction d'un ensemble de revendications donné.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez l'interface <xref:System.IdentityModel.Policy.IAuthorizationPolicy> pour ajouter ou mapper un ensemble de revendications à un autre. Une stratégie d'autorisation examine un ensemble de revendications et ajoute des revendications supplémentaires en fonction de l'ensemble actuel. Par exemple, une stratégie d'autorisation peut évaluer une revendication qui contient la date de naissance, ajouter une revendication qui déclare que l'utilisateur a plus de 21 ans et ajouter une revendication Over21 (PlusDe21Ans) au <xref:System.IdentityModel.Policy.EvaluationContext>.  
  
 Les classes qui implémentent l'interface <xref:System.IdentityModel.Policy.IAuthorizationPolicy> n'accordent pas d'autorisation aux utilisateurs, mais elles permettent à la classe <xref:System.ServiceModel.ServiceAuthorizationManager> de le faire. Le <xref:System.ServiceModel.ServiceAuthorizationManager> appelle la méthode <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> pour chaque stratégie d'autorisation activée. La méthode <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> détermine si les revendications supplémentaires doivent être ajoutées pour l'utilisateur en fonction du contexte actuel. La méthode <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> d'une stratégie d'autorisation peut être appelée plusieurs fois, étant donné que les revendications sont ajoutées au <xref:System.IdentityModel.Policy.EvaluationContext> par d'autres stratégies d'autorisation. Lorsque toutes les stratégies d'autorisation activées sont effectuées, la classe <xref:System.ServiceModel.ServiceAuthorizationManager> accorde des autorisations en fonction de l'ensemble final de revendications. La classe <xref:System.ServiceModel.ServiceAuthorizationManager> crée ensuite un <xref:System.IdentityModel.Policy.AuthorizationContext> qui contient un ensemble immuable de revendications qui reflète ces autorisations.  
  
   
  
## Examples  
 [!code-csharp[C_IAuthorizationPolicy#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_iauthorizationpolicy/cs/service.cs#1)]
 [!code-vb[C_IAuthorizationPolicy#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_iauthorizationpolicy/vb/myauthorizationpolicy.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public bool Evaluate (System.IdentityModel.Policy.EvaluationContext evaluationContext, ref object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Evaluate(class System.IdentityModel.Policy.EvaluationContext evaluationContext, object&amp; state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Evaluate(System::IdentityModel::Policy::EvaluationContext ^ evaluationContext, System::Object ^ % state);" />
      <MemberSignature Language="F#" Value="abstract member Evaluate : System.IdentityModel.Policy.EvaluationContext *  -&gt; bool" Usage="iAuthorizationPolicy.Evaluate (evaluationContext, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evaluationContext" Type="System.IdentityModel.Policy.EvaluationContext" />
        <Parameter Name="state" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="evaluationContext">
          <see cref="T:System.IdentityModel.Policy.EvaluationContext" /> qui contient l'ensemble de revendications que la stratégie d'autorisation évalue.</param>
        <param name="state">
          <see cref="T:System.Object" />, passé par référence, qui représente l'état personnalisé pour cette stratégie d'autorisation.</param>
        <summary>Évalue si un utilisateur répond aux exigences pour cette stratégie d’autorisation.</summary>
        <returns>
          <see langword="false" /> si la méthode <see cref="M:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)" /> pour cette stratégie d'autorisation doit être appelée si des revendications supplémentaires sont ajoutées par d'autres stratégies d'autorisation à <paramref name="evaluationContext" /> ; sinon, <see langword="true" /> pour déclarer qu'aucune évaluation supplémentaire n'est requise par cette stratégie d'autorisation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Les implémenteurs de l'interface <xref:System.IdentityModel.Policy.IAuthorizationPolicy> doivent s'attendre à ce que la méthode <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> soit appelée plusieurs fois par différents threads.  
  
 Les implémenteurs de l'interface <xref:System.IdentityModel.Policy.IAuthorizationPolicy> peuvent utiliser le paramètre `state` pour suivre l'état entre des appels à la méthode <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A>. Si un objet d'état est défini à l'intérieur d'un appel donné à la méthode <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A>, la même instance d'objet est passée à chaque appel suivant à la méthode <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> dans le processus d'évaluation actuel.  
  
   
  
## Examples  
 [!code-csharp[C_IAuthorizationPolicy#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_iauthorizationpolicy/cs/service.cs#2)]
 [!code-vb[C_IAuthorizationPolicy#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_iauthorizationpolicy/vb/myauthorizationpolicy.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Issuer">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Claims.ClaimSet Issuer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Claims.ClaimSet Issuer" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Policy.IAuthorizationPolicy.Issuer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Issuer As ClaimSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Claims::ClaimSet ^ Issuer { System::IdentityModel::Claims::ClaimSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Issuer : System.IdentityModel.Claims.ClaimSet" Usage="System.IdentityModel.Policy.IAuthorizationPolicy.Issuer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Claims.ClaimSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un ensemble de revendications qui représente l'émetteur de la stratégie d'autorisation.</summary>
        <value>
          <see cref="T:System.IdentityModel.Claims.ClaimSet" /> qui représente l'émetteur de la stratégie d'autorisation.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>