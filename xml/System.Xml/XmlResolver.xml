<Type Name="XmlResolver" FullName="System.Xml.XmlResolver">
  <Metadata><Meta Name="ms.openlocfilehash" Value="063a81fe45fda906eb30bf695a775de9ae846a2b" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58746656" /></Metadata><TypeSignature Language="C#" Value="public abstract class XmlResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlResolver" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XmlResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlResolver abstract" />
  <TypeSignature Language="F#" Value="type XmlResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Résout les ressources XML externes nommées par un URI (Uniform Resource Identifier).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Xml.XmlResolver> type est utilisé pour résoudre des ressources XML externes, telles que les entités, les définitions de type de document (DTD) ou les schémas. Il est également utilisé pour traiter inclure et d’importer des éléments figurant dans les feuilles de style de feuille de style XSL (Extensible Language) ou les schémas de langage (XSD XML) XML Schema definition.  
  
 <xref:System.Xml.XmlResolver> gère tous les aspects de la négociation de la connexion aux ressources, notamment la gestion des informations d’identification de sécurité, d’ouverture de la connexion à la source de données et de retour de la ressource sous la forme d’un flux de données ou autre type d’objet. L’objet qui appelle <xref:System.Xml.XmlResolver> a la tâche consiste à interpréter le flux de données.  
  
 Le <xref:System.Xml> espace de noms inclut deux implémentations concrètes de la <xref:System.Xml.XmlResolver> classe :  
  
-   <xref:System.Xml.XmlUrlResolver> est le programme de résolution par défaut pour toutes les classes dans le <xref:System.Xml> espace de noms. Elle prend en charge les requêtes et les protocoles `file://` et `http://` de la classe <xref:System.Net.WebRequest?displayProperty=nameWithType>. Pour obtenir des exemples de l’extension de la classe pour améliorer les performances, consultez le <xref:System.Xml.XmlUrlResolver> page de référence.  
  
-   <xref:System.Xml.XmlSecureResolver> vous aide à sécuriser une autre <xref:System.Xml.XmlResolver> objet en encapsulant l’objet et en limitant les ressources auxquelles il peut accéder. Par exemple, le <xref:System.Xml.XmlSecureResolver> peut refuser l’accès à des sites Internet ou des zones.  
  
 Vous pouvez créer et spécifier votre propre programme de résolution. Si vous ne spécifiez pas un programme de résolution, le lecteur utilise une valeur par défaut <xref:System.Xml.XmlUrlResolver> sans informations d’identification de l’utilisateur.  
  
 Pour spécifier l'objet <xref:System.Xml.XmlResolver> à utiliser, définissez la propriété <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> et transmettez l'objet <xref:System.Xml.XmlReaderSettings> à la méthode <xref:System.Xml.XmlReader.Create%2A>.  
  
 Si la ressource est stockée sur un système qui requiert une authentification, vous utilisez le <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=nameWithType> propriété pour spécifier les informations d’identification nécessaires.  
  
## <a name="supplying-authentication-credentials"></a>En fournissant des informations d’identification d’authentification  
 Le fichier qui contient les données XML à lire peut avoir une stratégie d’accès restreint. Si une authentification est requise pour accéder à une ressource réseau, utilisez la propriété <xref:System.Xml.XmlResolver.Credentials%2A> pour spécifier les informations d'identification nécessaires. Si le <xref:System.Xml.XmlResolver.Credentials%2A> propriété n’est pas définie, informations d’identification sont définies pour `null`.  
  
 Par exemple, supposons que les informations d’identification sont nécessaires lors de la demande des données à partir du web à des fins d’authentification. À moins que le répertoire virtuel web autorise l’accès anonyme, vous devez définir le <xref:System.Xml.XmlResolver.Credentials%2A> propriété permettant de fournir des informations d’identification. L’exemple suivant crée un <xref:System.Xml.XmlReader> objet qui utilise un <xref:System.Xml.XmlUrlResolver> avec informations d’identification par défaut pour accéder à la http://localhost/bookstore/inventory.xml site.  
  
 [!code-cpp[XmlReaderSettings.cctor#2](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#2)]
 [!code-csharp[XmlReaderSettings.cctor#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#2)]
 [!code-vb[XmlReaderSettings.cctor#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#2)]  
  
 Vous pouvez fournir des informations d’identification différentes pour différents URI et les ajouter à un cache. Ces informations d'identification permettent de vérifier l'authentification vis-à-vis des différents URI, quelle que soit la source initiale du XML. L’exemple suivant montre comment ajouter des informations d’identification à un cache.  
  
 [!code-csharp[XslCompiledTransform.Load#11](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#11)]
 [!code-vb[XslCompiledTransform.Load#11](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#11)]  
  
## <a name="security-considerations"></a>Considérations relatives à la sécurité  
 Considérez les éléments suivants lorsque vous travaillez avec le <xref:System.Xml.XmlResolver> classe.  
  
-   Les objets <xref:System.Xml.XmlResolver> peuvent contenir des informations confidentielles telles que des informations d'identification de l'utilisateur. Vous devez être prudent lors de la mise en cache <xref:System.Xml.XmlResolver> objets et ne pas passer le <xref:System.Xml.XmlResolver> objet à un composant non fiable.  
  
-   Si vous concevez une propriété de classe qui utilise la classe <xref:System.Xml.XmlResolver>, cette propriété doit être définie comme étant en écriture seule. La propriété peut servir à spécifier l'objet <xref:System.Xml.XmlResolver> à utiliser, mais pas à retourner un objet <xref:System.Xml.XmlResolver>.  
  
-   Si votre application accepte <xref:System.Xml.XmlResolver> objets à partir du code non approuvé, vous ne pouvez pas supposer que l’URI passé dans le <xref:System.Xml.XmlResolver.GetEntity%2A> méthode sera identique à celui retourné par la <xref:System.Xml.XmlResolver.ResolveUri%2A> (méthode). Les classes dérivées de la classe <xref:System.Xml.XmlResolver> peuvent se substituer à la méthode <xref:System.Xml.XmlResolver.GetEntity%2A> et retourner des données différentes de ce qui était contenu dans l'URI d'origine.  
  
-   Votre application peut limiter le déni de service sur le <xref:System.Xml.XmlResolver.GetEntity%2A> méthode en implémentant un <xref:System.Runtime.InteropServices.ComTypes.IStream> qui limite le nombre d’octets lus. Cela permet de se prémunir contre les situations où un code malveillant essaie de passer un flux infini d’octets à la <xref:System.Xml.XmlResolver.GetEntity%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Xml.XmlUrlResolver> avec informations d’identification par défaut. Un <xref:System.Xml.XmlReader> est utilisé pour lire et afficher le flux de données résultant.  
  
 [!code-csharp[XmlResolver_ex#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlResolver_ex/CS/XmlResolver_ex.cs#1)]
 [!code-vb[XmlResolver_ex#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlResolver_ex/VB/XmlResolver_ex.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/data/xml/index.md">Documents et données XML</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xml.XmlResolver" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur est appelé par les constructeurs de classes dérivées pour initialiser un état dans ce type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public virtual System.Net.ICredentials Credentials { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlResolver.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::ICredentials ^ Credentials {  void set(System::Net::ICredentials ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credentials : System.Net.ICredentials" Usage="System.Xml.XmlResolver.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, définit les informations d'identification utilisées pour authentifier les demandes web.</summary>
        <value>Informations d'identification à utiliser pour authentifier les demandes web. Si cette propriété n'est pas définie, la valeur par défaut est <see langword="null" /> ; <see langword="XmlResolver" /> n'a donc pas d'informations d'identification d'utilisateur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le répertoire virtuel ne nécessite pas d’authentification, cette propriété ne doit être définie. Sinon, les informations d’identification de l’utilisateur doivent être fournies.  
  
 Le code C# suivant définit les informations d’identification sur le <xref:System.Xml.XmlResolver> objet.  
  
```csharp  
NetworkCredential nc = new NetworkCredential(UserName, SecurelyStoredPassword, Domain);  
XmlUrlResolver resolver = new XmlUrlResolver();  
resolver.Credentials = nc;  
```  
  
 Vous pouvez associer des informations d’identification différentes à différents URI et les ajouter à un cache. Vous pouvez ensuite utiliser les informations d’identification pour vérifier l’authentification pour différents URI, quelle que soit la source d’origine du document XML.  
  
```csharp  
NetworkCredential myCred = new NetworkCredential(UserName, SecurelyStoredPassword, Domain);   
CredentialCache myCache = new CredentialCache();   
myCache.Add(new Uri("http://www.contoso.com/"), "Basic", myCred);   
myCache.Add(new Uri("http://app.contoso.com/"), "Basic", myCred);  
XmlUrlResolver resolver = new XmlUrlResolver();  
resolver.Credentials = myCache;  
```  
  
   
  
## Examples  
 Consultez <xref:System.Xml.XmlUrlResolver.Credentials%2A?displayProperty=nameWithType> pour obtenir un exemple qui utilise cette propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="GetEntity">
      <MemberSignature Language="C#" Value="public abstract object GetEntity (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetEntity(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEntity (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetEntity(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="abstract member GetEntity : Uri * string * Type -&gt; obj" Usage="xmlResolver.GetEntity (absoluteUri, role, ofObjectToReturn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">URI retourné par <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.</param>
        <param name="role">Pas utilisé pour l’instant.</param>
        <param name="ofObjectToReturn">Type d'objet à retourner. La version actuelle ne retourne que les objets System.IO.Stream.</param>
        <summary>En cas de substitution dans une classe dérivée, mappe un URI vers un objet qui contient la ressource réelle.</summary>
        <returns>Objet de flux ou <see langword="null" /> si un type autre que stream est spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est utilisée lorsque l’appelant veut mapper un URI spécifié dans l’objet contenant la ressource réelle qui représente l’URI. Le type d’objet retourné est négociable ; Toutefois, l’implémentation doit toujours prendre en charge <xref:System.IO.Stream?displayProperty=nameWithType>.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlResolver.GetEntityAsync%2A>.  
  
> [!IMPORTANT]
>  Votre application peut limiter le déni de service sur le <xref:System.Xml.XmlResolver.GetEntity%2A> méthode en implémentant un <xref:System.Runtime.InteropServices.ComTypes.IStream> qui limite le nombre d’octets lus. Cela permet de se prémunir contre les situations où un code malveillant essaie de passer un flux infini d’octets à la <xref:System.Xml.XmlResolver.GetEntity%2A> (méthode).  
  
   
  
## Examples  
 Consultez <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> pour obtenir un exemple à l’aide de cette méthode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><paramref name="ofObjectToReturn" /> n'est pas un type <see langword="Stream" />.</exception>
        <exception cref="T:System.UriFormatException">L'URI spécifié n'est pas un URI absolu.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="absoluteUri" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Exception">Une erreur d'exécution se produit (par exemple, une interruption de la connexion au serveur).</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; GetEntityAsync (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; GetEntityAsync(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.GetEntityAsync(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntityAsync (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Task(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ GetEntityAsync(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="abstract member GetEntityAsync : Uri * string * Type -&gt; System.Threading.Tasks.Task&lt;obj&gt;&#xA;override this.GetEntityAsync : Uri * string * Type -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="xmlResolver.GetEntityAsync (absoluteUri, role, ofObjectToReturn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="role" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">URI retourné par <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.</param>
        <param name="role">Pas utilisé pour l’instant.</param>
        <param name="ofObjectToReturn">Type d'objet à retourner. La version actuelle ne retourne que les objets <see cref="T:System.IO.Stream" />.</param>
        <summary>Mappe de façon asynchrone un URI vers un objet contenant la ressource réelle.</summary>
        <returns>Objet de flux ou <see langword="null" /> si un type autre que stream est spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlResolver.GetEntity%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlReaderSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Programmation asynchrone avec Async et Await (C# et Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ResolveUri">
      <MemberSignature Language="C#" Value="public virtual Uri ResolveUri (Uri baseUri, string relativeUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Uri ResolveUri(class System.Uri baseUri, string relativeUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResolveUri (baseUri As Uri, relativeUri As String) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Uri ^ ResolveUri(Uri ^ baseUri, System::String ^ relativeUri);" />
      <MemberSignature Language="F#" Value="abstract member ResolveUri : Uri * string -&gt; Uri&#xA;override this.ResolveUri : Uri * string -&gt; Uri" Usage="xmlResolver.ResolveUri (baseUri, relativeUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseUri">URI de base utilisé pour résoudre l'URI relatif.</param>
        <param name="relativeUri">URI à résoudre. L'URI peut être absolu ou relatif. S'il est absolu, cette valeur remplace effectivement la valeur de <paramref name="baseUri" />. S'il est relatif, il se combine à <paramref name="baseUri" /> pour produire un URI absolu.</param>
        <summary>En cas de substitution dans une classe dérivée, résout l'URI absolu à partir de l'URI de base et de l'URI relatif.</summary>
        <returns>URI absolu ou <see langword="null" /> si l'URI relatif ne peut pas être résolu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’URI absolu peut être utilisé en tant que l’URI de base pour toutes les demandes ultérieures pour les entités qui sont relatives à cet URI.  
  
   
  
## Examples  
 Consultez <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> pour obtenir un exemple qui utilise cette méthode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="relativeUri" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsType">
      <MemberSignature Language="C#" Value="public virtual bool SupportsType (Uri absoluteUri, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsType(class System.Uri absoluteUri, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsType(Uri ^ absoluteUri, Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member SupportsType : Uri * Type -&gt; bool&#xA;override this.SupportsType : Uri * Type -&gt; bool" Usage="xmlResolver.SupportsType (absoluteUri, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="type" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">URI.</param>
        <param name="type">Type à retourner.</param>
        <summary>Permet au programme de résolution de retourner d’autres types que <see cref="T:System.IO.Stream" />.</summary>
        <returns><see langword="true" /> si le <paramref name="type" /> est pris en charge ; sinon <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>