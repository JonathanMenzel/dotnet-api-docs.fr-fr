<Type Name="IStreamProvider" FullName="System.Xml.IStreamProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b7f9bada72f0e036f0fdb2ae93db2c823ab1aa15" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="37729955" /></Metadata><TypeSignature Language="C#" Value="public interface IStreamProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStreamProvider" />
  <TypeSignature Language="DocId" Value="T:System.Xml.IStreamProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStreamProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStreamProvider" />
  <TypeSignature Language="F#" Value="type IStreamProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
    <AssemblyVersion>4.1.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="418cf-101">Représente une interface qui peut être implémentée par les classes qui fournissent des flux de données.</span><span class="sxs-lookup"><span data-stu-id="418cf-101">Represents an interface that can be implemented by classes providing streams.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="418cf-102">Lors de l'écriture d'un message sortant contenant un corps transféré en continu vers un writer XML, le <xref:System.ServiceModel.Channels.Message> utilise une séquence d'appels similaire à la suivante dans son implémentation <xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29> :</span><span class="sxs-lookup"><span data-stu-id="418cf-102">When writing an outgoing message containing a streamed body to an XML writer, the <xref:System.ServiceModel.Channels.Message> will use a sequence of calls similar to the following in its <xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29> implementation:</span></span>  
  
-   <span data-ttu-id="418cf-103">Écrire toutes les informations nécessaires précédant le flux (par exemple, l’étiquette XML de début).</span><span class="sxs-lookup"><span data-stu-id="418cf-103">Write any necessary information preceding the stream (For example, the opening XML tag).</span></span>  
  
-   <span data-ttu-id="418cf-104">Écrire le flux.</span><span class="sxs-lookup"><span data-stu-id="418cf-104">Write the stream.</span></span>  
  
-   <span data-ttu-id="418cf-105">Écrire toutes les informations suivant le flux (par exemple, la balise XML de fin).</span><span class="sxs-lookup"><span data-stu-id="418cf-105">Write any information following the stream (For example, the closing XML tag).</span></span>  
  
 <span data-ttu-id="418cf-106">Cela fonctionne correctement avec des encodages similaires à l'encodage XML textuel.</span><span class="sxs-lookup"><span data-stu-id="418cf-106">This works well with encodings that are similar to the textual XML encoding.</span></span> <span data-ttu-id="418cf-107">Toutefois, certains encodages ne placent pas d'ensembles d'informations XML (par exemple, les balises encadrant des éléments XML) avec les données contenues dans des éléments.</span><span class="sxs-lookup"><span data-stu-id="418cf-107">However, there are some encodings that do not place XML infoset information (For example, tags for starting and ending XML elements) together with the data contained within elements.</span></span> <span data-ttu-id="418cf-108">Avec l'encodage MTOM par exemple, le message est fractionné en plusieurs parties.</span><span class="sxs-lookup"><span data-stu-id="418cf-108">For example, in the MTOM encoding, the message is split into multiple parts.</span></span> <span data-ttu-id="418cf-109">Une partie contient l'ensemble d'informations XML, qui peut contenir des références à d'autres parties pour le contenu d'éléments réels.</span><span class="sxs-lookup"><span data-stu-id="418cf-109">One part contains the XML infoset, which may contain references to other parts for actual element contents.</span></span> <span data-ttu-id="418cf-110">Puisque la taille de l'ensemble d'informations XML est normalement réduite par rapport à celle du contenu transféré en continu, il est logique de mettre cet ensemble en mémoire tampon, de l'écrire, puis d'écrire le contenu en continu.</span><span class="sxs-lookup"><span data-stu-id="418cf-110">Since the XML infoset will normally be small compared to the streamed contents, it makes sense to buffer the infoset, write it out, and then write the contents in a streamed way.</span></span> <span data-ttu-id="418cf-111">Cela signifie que lorsque l’étiquette de l’élément fermant est écrite, le flux ne doit pas encore avoir été écrit.</span><span class="sxs-lookup"><span data-stu-id="418cf-111">This means that by the time the closing element tag is written, we should not have written out the stream yet.</span></span>  
  
 <span data-ttu-id="418cf-112">L'interface <xref:System.Xml.IStreamProvider> est utilisée à cette fin.</span><span class="sxs-lookup"><span data-stu-id="418cf-112">For this purpose, the <xref:System.Xml.IStreamProvider> interface is used.</span></span> <span data-ttu-id="418cf-113">Elle dispose d'une méthode <xref:System.Xml.IStreamProvider.GetStream> qui retourne le flux à écrire.</span><span class="sxs-lookup"><span data-stu-id="418cf-113">The interface has a <xref:System.Xml.IStreamProvider.GetStream> method that returns the stream to be written.</span></span> <span data-ttu-id="418cf-114">Pour écrire un corps de message avec diffusion en continu dans <xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29> , procédez comme suit :</span><span class="sxs-lookup"><span data-stu-id="418cf-114">The correct way to write out a streamed message body in <xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29> is as follows:</span></span>  
  
-   <span data-ttu-id="418cf-115">Écrire toutes les informations nécessaires précédant le flux (par exemple, l’étiquette XML de début).</span><span class="sxs-lookup"><span data-stu-id="418cf-115">Write any necessary information preceding the stream (For example, the opening XML tag)</span></span>  
  
-   <span data-ttu-id="418cf-116">Appelez la surcharge `WriteValue` sur le <xref:System.Xml.XmlDictionaryWriter> qui accepte <xref:System.Xml.IStreamProvider>, avec une implémentation `IStreamProvider` qui retourne le flux à écrire.</span><span class="sxs-lookup"><span data-stu-id="418cf-116">Call the `WriteValue` overload on the <xref:System.Xml.XmlDictionaryWriter> that takes an <xref:System.Xml.IStreamProvider>, with an `IStreamProvider` implementation that returns the stream to be written.</span></span>  
  
-   <span data-ttu-id="418cf-117">Écrire toutes les informations suivant le flux (par exemple, la balise XML de fin).</span><span class="sxs-lookup"><span data-stu-id="418cf-117">Write any information following the stream (For example, the closing XML tag)</span></span>  
  
 <span data-ttu-id="418cf-118">Avec cette approche, l'enregistreur XML peut choisir à quel moment appeler <xref:System.Xml.IStreamProvider.GetStream> et écrire les données avec diffusion en continu.</span><span class="sxs-lookup"><span data-stu-id="418cf-118">With this approach, the XML writer has a choice of when to call <xref:System.Xml.IStreamProvider.GetStream> and write out the streamed data.</span></span> <span data-ttu-id="418cf-119">Par exemple, les writers XML textuels et binaires l’appellent immédiatement et écrivent le contenu transféré en continu entre les étiquettes de début et de fin.</span><span class="sxs-lookup"><span data-stu-id="418cf-119">For example, the textual and binary XML writers will call it immediately and write out the streamed contents in between the start and end tags.</span></span> <span data-ttu-id="418cf-120">L'enregistreur MTOM peut décider d'appeler <xref:System.Xml.IStreamProvider.GetStream> ultérieurement, lorsqu'il est prêt à écrire la partie appropriée du message.</span><span class="sxs-lookup"><span data-stu-id="418cf-120">The MTOM writer may decide to call <xref:System.Xml.IStreamProvider.GetStream> later, when it is ready to write the appropriate part of the message.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream GetStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IStreamProvider.GetStream" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetStream();" />
      <MemberSignature Language="F#" Value="abstract member GetStream : unit -&gt; System.IO.Stream" Usage="iStreamProvider.GetStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="418cf-121">Obtient un flux.</span><span class="sxs-lookup"><span data-stu-id="418cf-121">Gets a stream.</span></span></summary>
        <returns><span data-ttu-id="418cf-122">Objet <see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="418cf-122">A <see cref="T:System.IO.Stream" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="418cf-123">Cette méthode peut être utilisée pour retourner le flux à écrire.</span><span class="sxs-lookup"><span data-stu-id="418cf-123">This method can be used to return the stream to be written.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseStream">
      <MemberSignature Language="C#" Value="public void ReleaseStream (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStream(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IStreamProvider.ReleaseStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseStream(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseStream : System.IO.Stream -&gt; unit" Usage="iStreamProvider.ReleaseStream stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="418cf-124">Le flux est libéré.</span><span class="sxs-lookup"><span data-stu-id="418cf-124">The stream being released.</span></span></param>
        <summary><span data-ttu-id="418cf-125">Libère un flux de sortie.</span><span class="sxs-lookup"><span data-stu-id="418cf-125">Releases a stream to output.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>