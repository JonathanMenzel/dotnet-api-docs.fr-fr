<Type Name="XmlReaderSettings" FullName="System.Xml.XmlReaderSettings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b920f729cd1a8c170b508afa23ddd1854172eea0" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33683664" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XmlReaderSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlReaderSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlReaderSettings" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlReaderSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlReaderSettings sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Spécifie un jeu de fonctionnalités à prendre en charge sur l'objet <see cref="T:System.Xml.XmlReader" /> créé par la méthode <see cref="Overload:System.Xml.XmlReader.Create" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous utilisez la <xref:System.Xml.XmlReader.Create%2A> méthode pour obtenir <xref:System.Xml.XmlReader> instances. Cette méthode utilise le <xref:System.Xml.XmlReaderSettings> classe pour spécifier les fonctionnalités à implémenter dans le <xref:System.Xml.XmlReader> il crée l’objet.  
  
 Consultez la section Remarques de la <xref:System.Xml.XmlReader> et <xref:System.Xml.XmlReader.Create%2A> pages pour plus d’informations sur les paramètres à utiliser pour les vérifications de conformité, la validation et d’autres scénarios communs de référence. Consultez le <xref:System.Xml.XmlReaderSettings.%23ctor> constructeur pour obtenir la liste des paramètres par défaut.  
  
## <a name="security-considerations"></a>Considérations relatives à la sécurité  
 Considérez les éléments suivants lorsque vous utilisez la <xref:System.Xml.XmlReaderSettings> classe.  
  
-   Les indicateurs de validation <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> et <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> d'un objet <xref:System.Xml.XmlReaderSettings> ne sont pas activés par défaut. Lorsque ces indicateurs sont activés, la propriété <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> de l'objet <xref:System.Xml.XmlReaderSettings> est utilisée pour résoudre les emplacements de schéma rencontrés dans le document d'instance dans l'objet <xref:System.Xml.XmlReader>. Si le <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> objet est `null`, emplacements de schéma ne sont pas résolus même si les <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> et <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> définir des indicateurs de validation.  
  
-   Les schémas ajoutés lors de la validation ajoutent de nouveaux types et peuvent changer le résultat de la validation du document en cours de validation. Par conséquent, les schémas externes ne devraient être résolus que s'ils proviennent de sources fiables.  
  
-   Messages d’erreur de validation peuvent exposer des informations de modèle de contenu sensible. Erreur de validation et les messages d’avertissement sont gérées à l’aide de la <xref:System.Xml.Schema.ValidationEventHandler> déléguer, ou sont exposés en tant qu’un <xref:System.Xml.Schema.XmlSchemaValidationException> si aucun gestionnaire d’événements n’est fourni à la <xref:System.Xml.XmlReaderSettings> objet (les avertissements de validation ne provoquent pas une <xref:System.Xml.Schema.XmlSchemaValidationException> levée). Ces informations de modèle de contenu ne doivent pas être exposées dans des scénarios non fiables. Messages d’avertissement de validation sont supprimés par défaut et peuvent être signalés en définissant le <xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> indicateur.  
  
-   Le <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> propriété d’un <xref:System.Xml.Schema.XmlSchemaValidationException> retourne le chemin d’accès URI au fichier de schéma qui a provoqué l’exception. Le <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> propriété ne doit pas être exposée dans des scénarios non fiables.  
  
-   La désactivation de la <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> indicateur (activé par défaut) est recommandée lors de la validation, non approuvé grand documents XML, dans les scénarios de haute disponibilité par rapport à un schéma avec les contraintes d’identité sur une grande partie du document.  
  
-   Les objets <xref:System.Xml.XmlReaderSettings> peuvent contenir des informations confidentielles telles que des informations d'identification de l'utilisateur. Soyez prudent lorsque vous mettez en cache des objets <xref:System.Xml.XmlReaderSettings> ou que vous transmettez l'objet <xref:System.Xml.XmlReaderSettings> d'un composant à un autre.  
  
-   Le traitement des DTD est désactivé par défaut. Si vous activez le traitement DTD, vous devez être informé de l’inclusion de DTD provenant de sources non approuvées et possibles attaques par déni de service. Utilisez le <xref:System.Xml.XmlSecureResolver> pour limiter les ressources qui le <xref:System.Xml.XmlReader> peut accéder.  
  
-   N'acceptez pas les composants de prise en charge, tels que les objets <xref:System.Xml.NameTable>, <xref:System.Xml.XmlNamespaceManager> et <xref:System.Xml.XmlResolver> provenant d'une source non fiable.  
  
-   L'utilisation de la mémoire par une application qui se sert de <xref:System.Xml.XmlReader> peut être en rapport avec la taille du document XML analysé. Une forme d'attaque par déni de service consiste à envoyer des documents XML extrêmement volumineux pour analyse. Vous pouvez limiter la taille du document qui peut être analysé en définissant le <xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A> propriété et puis limiter le nombre de caractères résultant du développement des entités en définissant le <xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A> propriété.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Xml.XmlReader> qui utilise un <xref:System.Xml.XmlUrlResolver> avec les informations d’identification nécessaires.  
  
 [!code-csharp[XmlReader.Create#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#2)]
 [!code-vb[XmlReader.Create#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xml.XmlReaderSettings" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlReaderSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlReaderSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xml.XmlReaderSettings" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau suivant montre les valeurs initiales des propriétés d’une instance de <xref:System.Xml.XmlReaderSettings>.  
  
|Property|Valeur initiale|  
|--------------|-------------------|  
|<xref:System.Xml.XmlReaderSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreComments%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreWhitespace%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A>|0 (il n’existe aucune limite sur le nombre de caractères résultant du développement des entités).|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A>|0 (il n’existe aucune limite sur la taille du document XML).|  
|<xref:System.Xml.XmlReaderSettings.NameTable%2A>|`null`.|  
|<xref:System.Xml.XmlTextReader.DtdProcessing%2A>|<xref:System.Xml.DtdProcessing.Prohibit>|  
|<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>|`true`. Cette propriété est obsolète. Utilisez plutôt <xref:System.Xml.XmlTextReader.DtdProcessing%2A>. Si vous aviez défini <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> à sa valeur par défaut `true` définir <xref:System.Xml.XmlTextReader.DtdProcessing%2A> à `Prohibit`. Si vous aviez défini <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> à `false` définir <xref:System.Xml.XmlTextReader.DtdProcessing%2A> à `Parse`.|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|Objet <xref:System.Xml.Schema.XmlSchemaSet> vide|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>|<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>.|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A>|<xref:System.Xml.ValidationType.None>.|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>|Nouvel objet <xref:System.Xml.XmlUrlResolver>.|  
  
   
  
## Examples  
 La commande suivante crée un objet de paramètres qui peut être utilisé pour construire un lecteur qui supprime les instructions de traitement, les commentaires et espaces blancs non significatifs.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlReaderSettings (System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.#ctor(System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlReaderSettings(System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="resolver">Programme de résolution XML.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xml.XmlReaderSettings" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Async { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si les méthodes <see cref="T:System.Xml.XmlReader" /> asynchrones peuvent être utilisées sur une instance <see cref="T:System.Xml.XmlReader" /> particulière.</summary>
        <value>
          <see langword="true" /> si des méthodes asynchrones peuvent être utilisées ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous devez définir cette valeur sur `true` lorsque vous créez un nouveau <xref:System.Xml.XmlReader> de l’instance si vous souhaitez utiliser asynchrone <xref:System.Xml.XmlReader> méthodes sur cette instance. Après le <xref:System.Xml.XmlReader> instance est créée, le <xref:System.Xml.XmlReaderSettings.Async%2A> propriété est en lecture seule. La valeur par défaut de cette propriété est `false`.  
  
 Cet indicateur est ignoré par le <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> de surcharge. Cela signifie que si vous créez un nouveau <xref:System.Xml.XmlReader> basé sur un <xref:System.Xml.XmlReader>, le comportement asynchrone dépend de l’entrée <xref:System.Xml.XmlReader>, et vous ne pouvez pas utiliser le <xref:System.Xml.XmlReaderSettings.Async%2A> indicateur pour modifier le comportement asynchrone.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.CheckCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckCharacters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckCharacters { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si la vérification des caractères doit être assurée.</summary>
        <value>
          <see langword="true" /> pour assurer la vérification des caractères ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.  
  
 <block subset="none" type="note"><para>  
 Si le <see cref="T:System.Xml.XmlReader" /> traite des données de texte, il vérifie toujours que les noms XML et le contenu de texte sont valides, indépendamment du paramètre de propriété. L'attribution à <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" /> de la valeur <see langword="false" /> désactive la vérification de caractères pour la recherche de références d'entité de caractère.  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété indique le lecteur XML à vérifier les caractères dans les données XML, il lit et lever une <xref:System.Xml.XmlException> si tous les caractères sont en dehors de la plage de caractères XML. Lorsque la vérification des caractères est activée, vous êtes assuré que :  
  
-   Caractères sont dans la plage de caractères XML, tel que défini par le [2.2 caractères](https://www.w3.org/TR/2006/REC-xml-20060816/#charsets) section de la recommandation W3C XML 1.0.  
  
-   Tous les noms XML sont valides, comme défini par le [constructions syntaxiques communes 2.3](https://www.w3.org/TR/2006/REC-xml-20060816/#NT-Name) section de la recommandation W3C XML 1.0.  
  
 Lorsque cette propriété a la valeur `true`, qui est le paramètre par défaut, un <xref:System.Xml.XmlException> exception est levée si le fichier XML contient des caractères non valides ou des noms XML non valides (par exemple, un nom d’élément commence par un nombre).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReaderSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReaderSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As XmlReaderSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReaderSettings ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReaderSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée une copie de l'instance <see cref="T:System.Xml.XmlReaderSettings" />.</summary>
        <returns>Objet <see cref="T:System.Xml.XmlReaderSettings" /> cloné.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cloné <xref:System.Xml.XmlReaderSettings> objet peut être modifié sans affecter les paramètres de l’objet d’origine.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CloseInput">
      <MemberSignature Language="C#" Value="public bool CloseInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseInput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.CloseInput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseInput { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si le flux sous-jacent ou <see cref="T:System.IO.TextReader" /> doit être fermé à la fermeture du lecteur.</summary>
        <value>
          <see langword="true" /> pour fermer le flux sous-jacent ou <see cref="T:System.IO.TextReader" /> à la fermeture du lecteur ; sinon <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce paramètre est utilisé lorsqu’un flux ou <xref:System.IO.TextReader> est passé à la <xref:System.Xml.XmlReader.Create%2A> (méthode). Si un flux de données est créé par le lecteur pour son propre traitement, telles que lorsque le lecteur est créé avec un URI ou lorsqu’il ouvre une définition de type de document externe, il est toujours fermé lorsque le lecteur est fermé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ConformanceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ConformanceLevel As ConformanceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ConformanceLevel ConformanceLevel { System::Xml::ConformanceLevel get(); void set(System::Xml::ConformanceLevel value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le niveau de conformité que <see cref="T:System.Xml.XmlReader" /> respecte.</summary>
        <value>Une des valeurs d'énumération qui spécifie le niveau de conformité appliqué par le lecteur XML. La valeur par défaut est <see cref="F:System.Xml.ConformanceLevel.Document" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lecteurs XML qui sont créés par le <xref:System.Xml.XmlReader.Create%2A> méthode respecte les exigences de conformité suivants par défaut :  
  
-   Les nouvelles lignes et la valeur d’attribut sont normalisées selon le W3C [recommandation XML 1.0](https://www.w3.org/TR/2006/REC-xml-20060816/).  
  
-   Toutes les entités sont automatiquement développées.  
  
-   Attributs par défaut déclarés dans la définition de type de document sont toujours ajoutés même lorsque le lecteur ne valide pas.  
  
-   Déclaration de préfixe XML mappée à l’URI d’espace de noms XML correct est autorisée.  
  
-   Les noms de notations dans une seule `NotationType` déclaration d’attribut et `NmTokens` dans un seul `Enumeration` déclaration d’attribut sont distinctes.  
  
 Vous pouvez utiliser le <xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A> propriété pour vérifier et garantir que le flux en cours de lecture respecte les règles pour un document XML 1.0 correctement formé ou un fragment de document. Si les données n’est pas conforme, un <xref:System.Xml.XmlException> exception est levée. La valeur par défaut est <xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> (conformité au niveau du document).  
  
 Les niveaux de trois conformité sont :  
  
|Paramètre|Description |  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|Garantit que les données XML est conforme aux règles d’un document XML 1.0 correctement formé. Ce niveau de vérification garantit que tout processeur peut utiliser le flux en lecture comme une [document XML 1.0 correctement formé](https://www.w3.org/TR/2006/REC-xml-20060816/#sec-well-formed).<br /><br /> Le lecteur vérifie les éléments suivants :<br /><br /> -L’élément de niveau supérieur ne doit pas avoir d’autres nœuds que la déclaration XML, définition de type de document (DTD), élément, commentaire, un espace blanc ou instruction de traitement.<br />-Les données XML doivent avoir exactement un nœud d’élément de niveau supérieur.|  
|<xref:System.Xml.ConformanceLevel.Fragment>|Garantit que les données XML est conforme aux règles pour un fragment de document XML 1.0 correctement formé.<br /><br /> Ce paramètre accepte les données XML avec plusieurs éléments racines ou nœuds de texte de niveau supérieur. Ce niveau de vérification garantit que tout processeur peut utiliser le flux en lecture comme une [externe analysée entité](https://www.w3.org/TR/2006/REC-xml-20060816/#wf-entities).|  
|<xref:System.Xml.ConformanceLevel.Auto>|Spécifie que le lecteur doit déterminer le niveau de la vérification de conformité basés sur les données entrantes.<br /><br /> La vérification de conformité du document est appliquée si les données XML contiennent des informations sur la DTD.<br /><br /> La vérification de conformité du fragment est appliquée si les données XML contiennent l'un des éléments suivants :<br /><br /> -Nœud de référence text, CDATA ou entité au niveau racine.<br />-Plusieurs éléments au niveau racine.<br />-Aucun élément au niveau racine.<br /><br /> Un objet <xref:System.Xml.XmlException> est levé en cas de conflit, par exemple lorsqu'il y a un nœud de texte ou une DTD au niveau racine.<br /><br /> Ce paramètre peut être utilisé dans des scénarios englobants lorsque la méthode <xref:System.Xml.XmlReader.Create%2A> permet d'ajouter des fonctionnalités supplémentaires à un objet <xref:System.Xml.XmlReader> existant. Dans ce cas, <xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> n’ajoute pas d’une toute nouvelle vérification de conformité. La vérification de conformité est appliquée à l'objet <xref:System.Xml.XmlReader> qui est enveloppé.|  
  
> [!NOTE]
>  La recommandation XML 1.0 nécessite une conformité au niveau du document lorsqu'une DTD est présente. Par conséquent, si le lecteur est configuré pour prendre en charge <xref:System.Xml.ConformanceLevel.Fragment?displayProperty=nameWithType>, mais les données XML contient une définition de type de document (DTD), un <xref:System.Xml.XmlException> est levée.  
  
 Voici comment le lecteur gère des violations de conformité spécifique selon le paramètre de la <xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A> propriété :  
  
|Condition|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|Une valeur typée ou texte apparaît au niveau supérieur.|<xref:System.Xml.XmlException> est levée.|Pas considéré comme une violation de ce paramètre.|Pas considéré comme une violation de ce paramètre.|  
|Plusieurs éléments ou aucun élément apparaît au niveau supérieur.|<xref:System.Xml.XmlException> est levée.|Pas considéré comme une violation de ce paramètre.|Pas considéré comme une violation de ce paramètre.|  
|Élément de niveau supérieur est un espace blanc.|Pas considéré comme une violation de ce paramètre.|Pas considéré comme une violation de ce paramètre.|Pas considéré comme une violation de ce paramètre.|  
|Élément de niveau supérieur est un attribut (reconnu comme un nœud de texte).|<xref:System.Xml.XmlException> est levée.|Pas considéré comme une violation de ce paramètre.|Pas considéré comme une violation de ce paramètre.|  
|Plusieurs nœuds de texte contigus sont détectés.|Pas considéré comme une violation de ce paramètre.|Pas considéré comme une violation de ce paramètre.|Pas considéré comme une violation de ce paramètre.|  
|Le même préfixe d’espace de noms est déclaré deux fois dans la même portée locale.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|  
|L’espace de noms dans un élément ou attribut n’existe pas dans l’étendue locale.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|  
|Les données contiennent une incompatibilité de préfixe-espace de noms.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|  
|`xml:space` attribut contient une valeur non valide.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|  
|Un nom non valide est détecté.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|  
|Le `xml` préfixe n’est pas mis en correspondance avec la http://www.w3.org/XML/1998/namespace URI.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Xml.XmlReader> objet qui lit un fragment XML.  
  
 [!code-csharp[XmlReader.Create#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#1)]
 [!code-vb[XmlReader.Create#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DtdProcessing">
      <MemberSignature Language="C#" Value="public System.Xml.DtdProcessing DtdProcessing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.DtdProcessing DtdProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.DtdProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Property DtdProcessing As DtdProcessing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::DtdProcessing DtdProcessing { System::Xml::DtdProcessing get(); void set(System::Xml::DtdProcessing value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.DtdProcessing</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui détermine le traitement des DTD.</summary>
        <value>L'une des valeurs d'énumération qui détermine le traitement des DTD. La valeur par défaut est <see cref="F:System.Xml.DtdProcessing.Prohibit" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Validation du type de document DTD (définition) est implémentée à l’aide des contraintes de validité définies dans le W3C [Extensible Markup Language (XML) 1.0 ((quatrième édition) recommandation](https://www.w3.org/TR/2006/REC-xml-20060816/). Les DTD utilisent une grammaire formelle pour décrire la structure et la syntaxe de documents XML conformes. elles spécifient le contenu et les valeurs autorisées pour le document XML.  
  
 Cette propriété peut prendre les valeurs suivantes :  
  
-   <xref:System.Xml.DtdProcessing.Parse?displayProperty=nameWithType> Pour activer le traitement des DTD.  
  
-   <xref:System.Xml.DtdProcessing.Prohibit?displayProperty=nameWithType> pour lever une <xref:System.Xml.XmlException> exception lorsqu’une DTD est rencontrée.  
  
-   <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType> Pour désactiver le traitement sans avertissements ou des exceptions des DTD.  
  
 Pour effectuer une validation par rapport à une DTD, l'objet <xref:System.Xml.XmlReader> utilise la DTD définie dans la déclaration DOCTYPE d'un document XML. La déclaration DOCTYPE peut soit pointer vers une DTD inline, soit servir de référence à un fichier DTD externe. Pour valider un fichier XML par rapport à une DTD :  
  
-   Affectez à la propriété <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A?displayProperty=nameWithType> la valeur `DtdProcessing.Parse.`  
  
-   Affectez à la propriété <xref:System.Xml.XmlReaderSettings.ValidationType%2A?displayProperty=nameWithType> la valeur `ValidationType.DTD`.  
  
-   Si la DTD est un fichier externe stocké sur une ressource réseau qui exige une authentification, transmettez un objet <xref:System.Xml.XmlResolver> doté des informations d'identification nécessaires à la méthode <xref:System.Xml.XmlReader.Create%2A>.  
  
> [!IMPORTANT]
>  Si le <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A> est définie sur <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType>, le <xref:System.Xml.XmlReader> ne signale pas les DTD. Cela signifie que la DTD/DOCTYPE seront perdue sur sortie.  
  
   
  
## Examples  
 L'exemple suivant valide un fichier XML à l'aide d'un fichier DTD.  
  
 [!code-cpp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CPP/XmlReaderSettings.DtdValidate.cpp#1)]
 [!code-csharp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CS/validdtd.cs#1)]
 [!code-vb[XmlReaderSettings.DtdValidate#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.DtdValidate/VB/validdtd.vb#1)]  
  
## <a name="input"></a>Entrée  
 L'exemple prend le fichier `itemDTD.xml` comme entrée.  
  
 [!code-xml[XmlReaderSettings.DtdValidate#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.DtdValidate/XML/itemDTD.xml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreComments">
      <MemberSignature Language="C#" Value="public bool IgnoreComments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreComments" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreComments" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreComments As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreComments { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si les commentaires doivent être ignorés.</summary>
        <value>
          <see langword="true" /> pour ignorer les commentaires ; sinon <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si cette propriété `true` peut entraîner plusieurs nœuds de texte contigus retournés à partir du lecteur. Cela n’affecte pas la validation.  
  
   
  
## Examples  
 La commande suivante crée un objet de paramètres qui peut être utilisé pour construire un lecteur qui supprime les instructions de traitement, les commentaires et espaces blancs non significatifs.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreProcessingInstructions">
      <MemberSignature Language="C#" Value="public bool IgnoreProcessingInstructions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreProcessingInstructions" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreProcessingInstructions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreProcessingInstructions { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si les instructions de traitement doivent être ignorées.</summary>
        <value>
          <see langword="true" /> pour ignorer les instructions de traitement ; sinon <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si cette propriété `true` peut entraîner plusieurs nœuds de texte contigus retournés à partir du lecteur. Cela n’affecte pas la validation.  
  
   
  
## Examples  
 La commande suivante crée un objet de paramètres qui peut être utilisé pour construire un lecteur qui supprime les instructions de traitement, les commentaires et espaces blancs non significatifs.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreWhitespace">
      <MemberSignature Language="C#" Value="public bool IgnoreWhitespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreWhitespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreWhitespace" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreWhitespace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreWhitespace { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si les espaces blancs non significatifs doivent être ignorés.</summary>
        <value>
          <see langword="true" /> pour ignorer l'espace blanc ; sinon <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Espace blanc qui n’est pas considérée comme significative inclut des espaces, de tabulations et les lignes vides utilisés pour séparer le balisage pour une meilleure lisibilité. Ceci est un espace blanc dans le contenu de l’élément.  
  
 Ce paramètre de propriété n’affecte pas l’espace blanc entre le balisage dans un mode de contenu mixte ou d’espace blanc qui se produit dans l’étendue d’un `xml:space='preserve'` attribut.  
  
   
  
## Examples  
 La commande suivante crée un objet de paramètres qui peut être utilisé pour construire un lecteur qui supprime les instructions de traitement, les commentaires et espaces blancs non significatifs.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LineNumberOffset">
      <MemberSignature Language="C#" Value="public int LineNumberOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumberOffset" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.LineNumberOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property LineNumberOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineNumberOffset { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'offset du numéro de ligne de l'objet <see cref="T:System.Xml.XmlReader" />.</summary>
        <value>Offset de numéro de ligne. La valeur par défaut est 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A> détermine le point où la <xref:System.Xml.IXmlLineInfo.LineNumber%2A> propriété commence à compter. Cela est utile si vos données XML sont incorporées dans un document plus volumineux. Par exemple, si vos données XML sont incorporées dans un document plus volumineux et que vos données commencent à la ligne 101 du document, vous souhaitez pouvez spécifier que le lecteur doit démarrer à la ligne 100. Par conséquent, si le lecteur a levé une exception lors de l’analyse de la première ligne du code XML, il signale le numéro de ligne en tant que la ligne 101, plutôt que 1.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LinePositionOffset">
      <MemberSignature Language="C#" Value="public int LinePositionOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePositionOffset" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.LinePositionOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property LinePositionOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LinePositionOffset { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'offset de position de ligne de l'objet <see cref="T:System.Xml.XmlReader" />.</summary>
        <value>Décalage de position de ligne. La valeur par défaut est 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A> détermine le point où la <xref:System.Xml.IXmlLineInfo.LinePosition%2A> propriété commence à compter. Cela est utile si vos données XML sont incorporées dans un document plus grand et il n’existe aucune nouvelle ligne au début du document XML. Dans ce cas, si le lecteur lève une exception lors de l’analyse du XML, vous souhaitez pour retourner la position de ligne relatif au document principal, pas simplement dans le fragment XML.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MaxCharactersFromEntities">
      <MemberSignature Language="C#" Value="public long MaxCharactersFromEntities { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxCharactersFromEntities" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxCharactersFromEntities As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxCharactersFromEntities { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur correspondant au nombre maximal autorisé de caractères dans un document, qui résultent du développement des entités.</summary>
        <value>Nombre maximal autorisé de caractères résultant du développement des entités. La valeur par défaut est 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une valeur zéro (0) signifie aucune limite sur le nombre de caractères résultant du développement des entités. Une valeur non nulle Spécifie le nombre maximal de caractères qui peuvent résulter du développement des entités.  
  
 Si le lecteur essaie de lire un document qui contient des entités dont la taille développée dépasse la valeur de cette propriété, un <xref:System.Xml.XmlException> sera levée.  
  
 Cette propriété vous permet d’atténuer les attaques de déni de service, la personne malveillante pour envoyer des documents XML qui tentent de dépasser les limites de mémoire via le développement des entités. En limitant les caractères qui résultent du développement des entités, vous pouvez détecter l’attaque et récupérer de manière fiable.  
  
   
  
## Examples  
 Le code suivant définit cette propriété, puis tente d’analyser un document qui contient une entité qui se développe en une taille supérieure à la limite définie. Dans un scénario réel, vous définiriez cette limite à une valeur suffisamment grande pour gérer des documents valides, encore suffisamment faible pour limiter la menace des documents malveillants.  
  
```csharp  
string markup =  
@"<!DOCTYPE Root [  
  <!ENTITY anEntity ""Expands to more than 30 characters"">  
  <!ELEMENT Root (#PCDATA)>  
]>  
<Root>Content &anEntity;</Root>";  
  
XmlReaderSettings settings = new XmlReaderSettings();  
settings.DtdProcessing = DtdProcessing.Parse;  
settings.ValidationType = ValidationType.DTD;  
settings.MaxCharactersFromEntities = 30;  
  
try  
{  
    XmlReader reader = XmlReader.Create(new StringReader(markup), settings);  
    while (reader.Read()) { }  
}  
catch (XmlException ex)  
{  
    Console.WriteLine(ex.Message);  
}  
```  
  
```vb  
Dim markup As String = _  
    "<!DOCTYPE Root [" + Environment.NewLine + _  
    "  <!ENTITY anEntity ""Expands to more than 30 characters"">" + Environment.NewLine + _  
    "  <!ELEMENT Root (#PCDATA)>" + Environment.NewLine + _  
    "]>" + Environment.NewLine + _  
    "<Root>Content &anEntity;</Root>"  
  
Dim settings As XmlReaderSettings = New XmlReaderSettings()  
settings.DtdProcessing = DtdProcessing.Parse;  
settings.ValidationType = ValidationType.DTD  
settings.MaxCharactersFromEntities = 30  
  
Try  
    Dim reader As XmlReader = XmlReader.Create(New StringReader(markup), settings)  
    While (reader.Read())  
    End While  
Catch ex As XmlException  
    Console.WriteLine(ex.Message)  
End Try  
```  
  
 Cet exemple génère la sortie suivante :  
  
```  
There is an error in XML document (MaxCharactersFromEntities, ).  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxCharactersInDocument">
      <MemberSignature Language="C#" Value="public long MaxCharactersInDocument { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxCharactersInDocument" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxCharactersInDocument As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxCharactersInDocument { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur correspondant au nombre maximal autorisé de caractères dans un document XML. Zéro (0) signifie que la taille du document XML n'est pas limitée. Une valeur non nulle spécifie la taille maximale, en caractères.</summary>
        <value>Nombre maximal autorisé de caractères dans un document XML. La valeur par défaut est 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une valeur zéro (0) signifie aucune limite sur le nombre de caractères dans le document analysé. Une valeur non nulle Spécifie le nombre maximal de caractères qui peut être analysé.  
  
 Le nombre maximal de caractères pour le document inclut le nombre de caractères résultant du développement des entités.  
  
 Si le lecteur essaie de lire un document dont la taille dépasse la valeur de cette propriété, un <xref:System.Xml.XmlException> sera levée.  
  
 Cette propriété vous permet d’atténuer les attaques de déni de service, la personne malveillante pour envoyer des documents XML extrêmement volumineux. En limitant la taille d’un document, vous pouvez détecter l’attaque et récupérer de manière fiable.  
  
   
  
## Examples  
 Le code suivant définit cette propriété et tente d’analyser un document dépasse la limite. Dans un scénario réel, vous définiriez cette limite à une valeur suffisamment grande pour gérer des documents valides, encore suffisamment faible pour limiter la menace des documents malveillants.  
  
```csharp  
string markup = "<Root>Content</Root>";  
  
XmlReaderSettings settings = new XmlReaderSettings();  
settings.MaxCharactersInDocument = 10;  
  
try  
{  
    XmlReader reader = XmlReader.Create(new StringReader(markup), settings);  
    while (reader.Read()) { }  
}  
catch (XmlException ex)  
{  
    Console.WriteLine(ex.Message);  
}  
```  
  
```vb  
Dim markup As String = "<Root>Content</Root>"  
  
Dim settings As XmlReaderSettings = New XmlReaderSettings()  
settings.MaxCharactersInDocument = 10  
  
Try  
    Dim reader As XmlReader = XmlReader.Create(New StringReader(markup), settings)  
    While (reader.Read())  
    End While  
Catch ex As XmlException  
    Console.WriteLine(ex.Message)  
End Try  
```  
  
 Ce code génère la sortie suivante :  
  
```  
There is an error in XML document (MaxCharactersInDocument, ).  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); void set(System::Xml::XmlNameTable ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit <see cref="T:System.Xml.XmlNameTable" /> servant aux comparaisons de chaînes atomisées.</summary>
        <value>
          <see cref="T:System.Xml.XmlNameTable" /> qui stocke toutes les chaînes atomisées utilisées par toutes les instances <see cref="T:System.Xml.XmlReader" /> créées à l'aide de cet objet <see cref="T:System.Xml.XmlReaderSettings" />.  
  
 La valeur par défaut est <see langword="null" />. L'instance de <see cref="T:System.Xml.XmlReader" /> créée utilisera un nouveau <see cref="T:System.Xml.NameTable" /> vide si cette valeur est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définissez cette propriété sur une <xref:System.Xml.XmlNameTable> de l’instance si vous souhaitez partager une table de noms communs entre tous les créé <xref:System.Xml.XmlReader> instances.  
  
> [!NOTE]
>  La classe <xref:System.Xml.NameTable> n'est pas thread-safe. Par conséquent, il ne peut pas être partagé entre <xref:System.Xml.XmlReader> objets qui s’exécutent simultanément dans différents threads.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProhibitDtd">
      <MemberSignature Language="C#" Value="public bool ProhibitDtd { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProhibitDtd" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ProhibitDtd" />
      <MemberSignature Language="VB.NET" Value="Public Property ProhibitDtd As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ProhibitDtd { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use XmlReaderSettings.DtdProcessing property instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant s'il convient d'interdire le traitement de la définition de type de document (DTD). Cette propriété est obsolète. Utilisez plutôt <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />.</summary>
        <value>
          <see langword="true" /> pour interdire le traitement DTD ; sinon <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque la valeur `true`, le <xref:System.Xml.XmlReader> lève une <xref:System.Xml.XmlException> lorsqu’un contenu DTD est rencontré. Le traitement DTD ne doit pas être activé en cas de crainte concernant les problèmes de déni de service ou d'utilisation de sources non fiables.  
  
 Si le traitement DTD est activé, vous pouvez utiliser l'objet <xref:System.Xml.XmlSecureResolver> pour limiter les ressources auxquelles l'objet <xref:System.Xml.XmlReader> peut avoir accès. Vous pouvez également concevoir votre application afin que le traitement XML soit limité en termes de mémoire et de temps. Vous pouvez, par exemple, configurer des limites de délai dans l'application ASP.NET.  
  
 Cette propriété est obsolète. Utilisez plutôt <xref:System.Xml.XmlTextReader.DtdProcessing%2A>. Si vous aviez défini <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> à sa valeur par défaut `true` définir <xref:System.Xml.XmlTextReader.DtdProcessing%2A> à `Prohibit`. Si vous aviez défini <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> à `false` définir <xref:System.Xml.XmlTextReader.DtdProcessing%2A> à `Parse`.  
  
   
  
## Examples  
 L’exemple suivant valide les données à l’aide d’une DTD.  
  
 [!code-cpp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CPP/XmlReaderSettings.DtdValidate.cpp#1)]
 [!code-csharp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CS/validdtd.cs#1)]
 [!code-vb[XmlReaderSettings.DtdValidate#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.DtdValidate/VB/validdtd.vb#1)]  
  
 L’exemple utilise le fichier itemDTD.xml comme entrée.  
  
 [!code-xml[XmlReaderSettings.DtdValidate#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.DtdValidate/XML/itemDTD.xml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Réinitialise les membres de la classe de paramètres à leurs valeurs par défaut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau suivant montre les valeurs initiales des propriétés d’une instance de <xref:System.Xml.XmlReaderSettings>.  
  
|Property|Valeur initiale|  
|--------------|-------------------|  
|<xref:System.Xml.XmlReaderSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreComments%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreWhitespace%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A>|0 (il n’existe aucune limite sur le nombre de caractères résultant du développement des entités).|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A>|0 (il n’existe aucune limite sur la taille du document XML).|  
|<xref:System.Xml.XmlReaderSettings.NameTable%2A>|`null`.|  
|<xref:System.Xml.XmlTextReader.DtdProcessing%2A>|<xref:System.Xml.DtdProcessing.Prohibit>|  
|<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>|`true`. Cette propriété est obsolète. Utilisez plutôt <xref:System.Xml.XmlTextReader.DtdProcessing%2A>. Si vous aviez défini <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> à sa valeur par défaut `true` définir <xref:System.Xml.XmlTextReader.DtdProcessing%2A> à `Prohibit`. Si vous aviez défini <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> à `false` définir <xref:System.Xml.XmlTextReader.DtdProcessing%2A> à `Parse`.|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|Objet <xref:System.Xml.Schema.XmlSchemaSet> vide|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>|<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>.|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A>|<xref:System.Xml.ValidationType.None>.|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>|Nouvel objet <xref:System.Xml.XmlUrlResolver>.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaSet Schemas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaSet Schemas" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Property Schemas As XmlSchemaSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaSet ^ Schemas { System::Xml::Schema::XmlSchemaSet ^ get(); void set(System::Xml::Schema::XmlSchemaSet ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le <see cref="T:System.Xml.Schema.XmlSchemaSet" /> à utiliser lors de la validation du schéma.</summary>
        <value>
          <see cref="T:System.Xml.Schema.XmlSchemaSet" /> à utiliser lors de la validation de schéma. La valeur par défaut correspond à un objet <see cref="T:System.Xml.Schema.XmlSchemaSet" /> vide.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  -   N’utilisez pas de schémas à partir de sources inconnues ou non approuvées ou des emplacements. Cela compromettra la sécurité de votre code.  
> -   Schémas XML (y compris les schémas inline) sont par nature vulnérables aux attaques de déni de service ; n’acceptez pas les scénarios non fiables.  
> -   Exceptions et messages d’erreur de validation de schéma peuvent exposer des informations sensibles sur le modèle de contenu ou les chemins d’accès de l’URI pour le fichier de schéma. Veillez à ne pas exposer ces informations à des appelants non fiables.  
> -   Pour plus d’informations, consultez la section « Considérations de sécurité ».  
  
 La <xref:System.Xml.Schema.XmlSchemaSet> classe prend en charge uniquement les schémas de langage (XSD XML) XML Schema definition. <xref:System.Xml.XmlReader> instances créées par la <xref:System.Xml.XmlReader.Create%2A> méthode ne peut pas être configurée pour activer la validation de schéma XML-Data Reduced (XDR).  
  
## <a name="security-considerations"></a>Considérations relatives à la sécurité  
  
-   N’utilisez pas de schémas à partir de sources inconnues ou non approuvées. Cela compromettra la sécurité de votre code. La <xref:System.Xml.XmlUrlResolver> classe est utilisée pour résoudre les schémas externes par défaut. Pour désactiver la résolution d’include, import et redéfinir les éléments d’un schéma, définissez la <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType> propriété `null`.  
  
-   Les exceptions levées à la suite à l’aide de la <xref:System.Xml.Schema.XmlSchemaSet> class, telle que la <xref:System.Xml.Schema.XmlSchemaException> classe peut-être contenir des informations sensibles qui ne doivent pas être exposées dans des scénarios non fiables. Par exemple, le <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> propriété d’un <xref:System.Xml.Schema.XmlSchemaException> retourne le chemin d’accès URI au fichier de schéma qui a provoqué l’exception. Le <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> propriété ne doit pas être exposée dans des scénarios non fiables. Les exceptions doivent être correctement gérées afin que ces informations sensibles ne sont pas exposées dans les scénarios non fiables.  
  
   
  
## Examples  
 L’exemple ci-dessous utilise le <xref:System.Xml.XmlReaderSettings> objet et la <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> méthode permet d’associer un schéma à un document XML. Le schéma est ajouté à la <xref:System.Xml.XmlReaderSettings.Schemas%2A> propriété de la <xref:System.Xml.XmlReaderSettings> objet. La valeur de la <xref:System.Xml.XmlReaderSettings.Schemas%2A> propriété est un <xref:System.Xml.Schema.XmlSchemaSet> objet. Le schéma est utilisé pour valider que le document XML est conforme au modèle de contenu du schéma. Erreurs de validation de schéma et les avertissements sont traités par le <xref:System.Xml.XmlReaderSettings.ValidationEventHandler> défini dans le <xref:System.Xml.XmlReaderSettings> objet.  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 L’exemple utilise le fichier books.xml comme entrée.  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 L’exemple utilise le fichier books.xsd comme entrée.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.XmlReaderSettings.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand le lecteur trouve des erreurs de validation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ces événements se produisent lors de la lecture d’une instance de document XML si le <xref:System.Xml.XmlReaderSettings.ValidationType%2A> a la valeur <xref:System.Xml.ValidationType.DTD> ou <xref:System.Xml.ValidationType.Schema>. Si le <xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> paramètre a été activé sur le <xref:System.Xml.XmlReaderSettings.ValidationFlags%2A> propriété ces événements se produisent également lorsque des avertissements de validation sont rencontrées.  
  
 Si le lecteur est configuré pour la validation et si aucun gestionnaire d’événements de validation n’a été défini, un <xref:System.Xml.Schema.XmlSchemaValidationException> est renvoyée pour toutes les erreurs de validation. (Les avertissements de validation ne provoquent pas une <xref:System.Xml.Schema.XmlSchemaValidationException> levée).  
  
> [!IMPORTANT]
>  Messages d’erreur de validation peuvent exposer des informations de modèle de contenu sensible. Erreur de validation et les messages d’avertissement sont gérées à l’aide de la <xref:System.Xml.Schema.ValidationEventHandler> déléguer, ou sont exposés en tant qu’un <xref:System.Xml.Schema.XmlSchemaValidationException> si aucun gestionnaire d’événements n’est fourni à la <xref:System.Xml.XmlReaderSettings> objet (les avertissements de validation ne provoquent pas une <xref:System.Xml.Schema.XmlSchemaValidationException> levée). Ces informations de modèle de contenu ne doivent pas être exposées dans des scénarios non fiables. Messages d’avertissement de validation sont supprimés par défaut et peuvent être signalés en définissant le <xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> indicateur.  
>   
>  Le <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> propriété d’un <xref:System.Xml.Schema.XmlSchemaValidationException> retourne le chemin d’accès URI au fichier de schéma qui a provoqué l’exception. Le <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> propriété ne doit pas être exposée dans des scénarios non fiables.  
  
   
  
## Examples  
 L’exemple suivant montre les paramètres à spécifier pour créer un lecteur qui valide à l’aide d’un schéma inline et affiche également des avertissements de validation. Le Gestionnaire d’événements de validation utilise le <xref:System.Xml.Schema.XmlSeverityType> énumération faire la distinction entre les erreurs et avertissements.  
  
 [!code-csharp[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/CS/factory_rdr_cctor.cs#1)]
 [!code-vb[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/VB/factory_rdr_cctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationFlags">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaValidationFlags ValidationFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaValidationFlags ValidationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ValidationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationFlags As XmlSchemaValidationFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaValidationFlags ValidationFlags { System::Xml::Schema::XmlSchemaValidationFlags get(); void set(System::Xml::Schema::XmlSchemaValidationFlags value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaValidationFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant les paramètres de validation du schéma. Ce paramètre s'applique aux objets <see cref="T:System.Xml.XmlReader" /> qui valident des schémas (propriété <see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> définie avec la valeur <see langword="ValidationType.Schema" />).</summary>
        <value>Combinaison de bits des valeurs d’énumération qui spécifient les options de validation. <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" /> et <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes" /> sont activés par défaut. <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" />, <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" /> et <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings" /> sont désactivés par défaut.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Les indicateurs de validation <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> et <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> d'un objet <xref:System.Xml.XmlReaderSettings> ne sont pas activés par défaut. Lorsque ces indicateurs sont activés, la propriété <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> de l'objet <xref:System.Xml.XmlReaderSettings> est utilisée pour résoudre les emplacements de schéma rencontrés dans le document d'instance dans l'objet <xref:System.Xml.XmlReader>. Si le <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> objet est `null`, emplacements de schéma ne sont pas résolus même si les <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> et <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> définir des indicateurs de validation.  
>   
>  Les schémas ajoutés lors de la validation ajoutent de nouveaux types et peuvent changer le résultat de la validation du document en cours de validation. Par conséquent, les schémas externes ne devraient être résolus que s'ils proviennent de sources fiables.  
>   
>  La désactivation de la <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> indicateur (activé par défaut) est recommandée lors de la validation, non approuvé grand documents XML, dans les scénarios de haute disponibilité par rapport à un schéma avec les contraintes d’identité sur une grande partie du document.  
  
   
  
## Examples  
 L’exemple suivant valide un fichier XML par rapport à un schéma XML inline en activant le <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> paramètre. Le lecteur XML est configuré pour afficher les avertissements de validation, sp vous recevez également un avertissement attendu sur l’élément racine.  
  
 [!code-csharp[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/CS/factory_rdr_cctor.cs#1)]
 [!code-vb[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/VB/factory_rdr_cctor.vb#1)]  
  
## <a name="input"></a>Entrée  
 L'exemple utilise le fichier inlineSchema.xml comme entrée.  
  
 [!code-xml[XmlReaderSettings.IgnoreInlineSchema#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/XML/inlineSchema.xml#3)]  
  
## <a name="output"></a>Sortie  
 Avertissement : Schéma correspondant introuvable. Aucune validation effectuée. Informations de schéma introuvables pour l'élément « root ».  
  
 Erreur de validation : l’élément « xsdHeadCount » a élément enfant non valide « division ». 'ID' attendu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationType">
      <MemberSignature Language="C#" Value="public System.Xml.ValidationType ValidationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ValidationType ValidationType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ValidationType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationType As ValidationType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ValidationType ValidationType { System::Xml::ValidationType get(); void set(System::Xml::ValidationType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ValidationType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si le <see cref="T:System.Xml.XmlReader" /> doit effectuer la validation ou l'assignation de type lors de la lecture.</summary>
        <value>L'une des valeurs <see cref="T:System.Xml.ValidationType" /> qui indique si XmlReader exécute la validation ou l'assignation de type lors de la lecture. La valeur par défaut est <see langword="ValidationType.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau suivant décrit les <xref:System.Xml.ValidationType> valeurs.  
  
> [!NOTE]
>  Le <xref:System.Xml.ValidationType.Auto> et <xref:System.Xml.ValidationType.XDR> valeurs d’énumération sont obsolètes dans .NET Framework version 2.0.  
  
|ValidationType|Description |  
|--------------------|-----------------|  
|`DTD`|La validation est effectuée à l’aide d’une définition de type de document (DTD). **Remarque :** le <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A> propriété doit également être définie sur <xref:System.Xml.DtdProcessing.Parse>.|  
|`None`|Le <xref:System.Xml.XmlReader> ne pas valider les données, ou effectuer l’affectation de tout type.|  
|`Schema`|Validation et le type de l’assignation est effectuée à l’aide d’un schéma XML Schema definition language (XSD). Le lecteur accède au schéma XML à l’aide de la commande suivante :<br /><br /> -Utilise le <xref:System.Xml.XmlReaderSettings.Schemas%2A> propriété pour accéder à la <xref:System.Xml.Schema.XmlSchemaSet> objet associé à ce lecteur.<br />-Utilise le schéma en ligne contenu dans le document d’instance XML. (La <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> option doit être activée.)<br />-Utilise le schéma XML spécifié par les indicateurs d’emplacement de schéma (`xsi:schemaLocation` ou `xsi:noNamespaceSchemaLocation` attribut) trouvé dans le document d’instance XML. (La <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> option doit être activée.)|  
  
   
  
## Examples  
 L’exemple suivant valide à l’aide d’un schéma stocké dans le <xref:System.Xml.Schema.XmlSchemaSet>.  
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
 L’exemple utilise les fichiers d’entrée suivants :  
  
 `booksSchemaFail.xml`  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Définit le <see cref="T:System.Xml.XmlResolver" /> permettant d'accéder aux documents externes.</summary>
        <value>
          <see cref="T:System.Xml.XmlResolver" /> permettant d'accéder aux documents externes. Si sa valeur est <see langword="null" />, une <see cref="T:System.Xml.XmlException" /> est levée lorsque le <see cref="T:System.Xml.XmlReader" /> tente d'accéder à une ressource externe. La valeur par défaut est un nouveau <see cref="T:System.Xml.XmlUrlResolver" /> sans informations d'identification.  À compter de .NET Framework 4.5.2, ce paramètre a la valeur par défaut <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Xml.XmlResolver> est utilisé pour rechercher et ouvrir un document d’instance XML, ou pour rechercher et ouvrir des ressources externes référencées par l’instance de document XML. Cela peut inclure des entités, les DTD ou les schémas. Le <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=nameWithType> propriété peut être utilisée pour spécifier les informations d’identification requises pour l’authentification réseau.  
  
> [!IMPORTANT]
>  Étant donné que la <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> peut contenir des informations sensibles telles que des informations d’identification de l’utilisateur, vous devez être prudent lors de la mise en cache <xref:System.Xml.XmlReaderSettings> objets, ou lors du passage le <xref:System.Xml.XmlReaderSettings> objet à partir d’un composant à un autre.  
>   
>  Un <xref:System.Xml.XmlSecureResolver> peut être utilisé pour accéder aux documents externes. Le <xref:System.Xml.XmlSecureResolver> classe permet de sécuriser une autre implémentation de <xref:System.Xml.XmlResolver> en encapsulant la <xref:System.Xml.XmlResolver> objet et en limitant les ressources qui sous-jacent <xref:System.Xml.XmlResolver> a accès.  
>   
>  Les indicateurs de validation <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> et <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> d'un objet <xref:System.Xml.XmlReaderSettings> ne sont pas activés par défaut. Lorsque ces indicateurs sont activés, la propriété <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> de l'objet <xref:System.Xml.XmlReaderSettings> est utilisée pour résoudre les emplacements de schéma rencontrés dans le document d'instance dans l'objet <xref:System.Xml.XmlReader>. Si le <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> objet est `null`, emplacements de schéma ne sont pas résolus même si les <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> et <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> définir des indicateurs de validation.  
>   
>  Les schémas ajoutés lors de la validation ajoutent de nouveaux types et peuvent changer le résultat de la validation du document en cours de validation. Par conséquent, les schémas externes ne devraient être résolus que s'ils proviennent de sources fiables.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Xml.XmlReader> qui utilise un <xref:System.Xml.XmlSecureResolver> avec les informations d’identification par défaut.  
  
 [!code-csharp[XmlReader.Create#10](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#10)]
 [!code-vb[XmlReader.Create#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>