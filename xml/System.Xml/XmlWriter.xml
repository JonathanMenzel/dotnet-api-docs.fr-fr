<Type Name="XmlWriter" FullName="System.Xml.XmlWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="95812f205b9870f283c0246150eb0ca30333cc98" />
    <Meta Name="ms.sourcegitcommit" Value="b15b8cf0f6dbc1504057c88969d9ef4b790891fe" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="05/11/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XmlWriter : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlWriter extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlWriter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XmlWriter&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriter abstract : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Représente un writer qui fournit un moyen rapide, sans mise en cache et en avant de générer des flux de données ou des fichiers contenant des données XML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.XmlWriter> classe écrit des données XML dans un flux, un fichier, un lecteur de texte ou une chaîne. Il prend en charge le W3C [Extensible Markup Language (XML) 1.0 ((quatrième édition)](https://www.w3.org/TR/2006/REC-xml-20060816/) et [espaces de noms dans XML 1.0 (troisième édition)](https://www.w3.org/TR/REC-xml-names/) recommandations.  
  
 Les membres de la <xref:System.Xml.XmlWriter> vous permettre de classe :  
  
-   vérifier que les caractères sont des caractères XML reconnus et que les noms d'éléments et d'attributs sont des noms XML valides ;  
  
-   vérifier que le document XML est correctement construit ;  
  
-   Coder les octets binaires en Base64 ou BinHex et écrire le texte résultant.  
  
-   Passer des valeurs à l’aide de types common language runtime au lieu de chaînes, afin d’éviter de devoir effectuer manuellement des conversions de valeurs.  
  
-   écrire plusieurs documents dans un même flux de sortie ;  
  
-   écrire des noms, des noms qualifiés et des jetons de nom valides.  
  
 Dans cette section :  
  
 [Création d’un writer XML](#create)   
 [Spécification du format de sortie](#output)   
 [Conformité des données](#conformance)   
 [Écriture d’éléments](#writing_elements)   
 [Écriture des attributs](#writing_attributes)   
 [La gestion des espaces de noms](#handling_ns)   
 [Écriture de données typées](#writing_types)   
 [Fermeture de l’enregistreur XML](#close)   
 [Programmation asynchrone](#async)   
 [Considérations sur la sécurité](#security)  
  
<a name="create"></a>   
## <a name="creating-an-xml-writer"></a>Création d’un writer XML  
 Pour créer un <xref:System.Xml.XmlWriter> d’une instance, utilisez le <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> (méthode). Pour spécifier l’ensemble de fonctionnalités à activer sur l’enregistreur XML, passez un <xref:System.Xml.XmlWriterSettings> à la <xref:System.Xml.XmlWriter.Create%2A> (méthode). Dans le cas contraire, les paramètres par défaut sont utilisés. Consultez le <xref:System.Xml.XmlWriter.Create%2A> pages pour plus d’informations de référence.  
  
<a name="output"></a>   
## <a name="specifying-the-output-format"></a>Spécification du format de sortie  
 Le <xref:System.Xml.XmlWriterSettings> classe comprend plusieurs propriétés qui contrôlent la façon dont <xref:System.Xml.XmlWriter> sortie est mise en forme :  
  
|Property|Description |  
|--------------|-----------------|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|Spécifie l'encodage de texte à utiliser. La valeur par défaut est `Encoding.UTF8`.|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|Indique si des éléments doivent être mis en retrait. La valeur par défaut est `false` (aucune mise en retrait).|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Spécifie la chaîne de caractères à utiliser pour la mise en retrait. Par défaut, il s'agit de deux espaces.|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|Spécifie la chaîne de caractères à utiliser pour les sauts de ligne. La valeur par défaut est `\r\n` (retour chariot, saut de ligne).|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|Spécifie comment gérer les caractères de saut de ligne.|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|Indique si des attributs doivent être écrits sur une nouvelle ligne. La propriété <xref:System.Xml.XmlWriterSettings.Indent%2A> doit être définie sur `true` lorsque vous utilisez cette propriété. La valeur par défaut est `false`.|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|Indique si une déclaration XML doit être écrite. La valeur par défaut est `false`.|  
  
 Les propriétés <xref:System.Xml.XmlWriterSettings.Indent%2A> et <xref:System.Xml.XmlWriterSettings.IndentChars%2A> contrôlent la taille minime de l'espace blanc formaté. Par exemple, pour mettre en retrait de nœuds d’élément :  
  
 [!code-csharp[XmlWriter_v2#8](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#8)]
 [!code-vb[XmlWriter_v2#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#8)]  
  
 Utilisez le <xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A> pour écrire chaque attribut sur une nouvelle ligne avec un niveau supplémentaire de mise en retrait :  
  
 [!code-csharp[XmlWriter_v2#9](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#9)]
 [!code-vb[XmlWriter_v2#9](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#9)]  
  
<a name="conformance"></a>   
## <a name="data-conformance"></a>Conformité des données  
 Un enregistreur XML utilise deux propriétés de la <xref:System.Xml.XmlWriterSettings> classe pour vérifier la conformité des données :  
  
-   Le <xref:System.Xml.XmlWriterSettings.CheckCharacters%2A> propriété fait en sorte que l’enregistreur XML pour vérifier les caractères et de lever une <xref:System.Xml.XmlException> exception si tous les caractères sont en dehors de la plage autorisée, comme défini par le W3C.  
  
-   Le <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> propriété configure l’enregistreur XML pour vérifier que le flux de données en cours d’écriture est compatible avec les règles pour un document XML 1.0 correctement formé ou un fragment de document, comme défini par le W3C. Les niveaux de trois conformité sont décrits dans le tableau suivant. La valeur par défaut est <xref:System.Xml.ConformanceLevel.Document>. Pour plus d’informations, consultez la <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A?displayProperty=nameWithType> propriété et la <xref:System.Xml.ConformanceLevel?displayProperty=nameWithType> énumération.  
  
    |Niveau|Description |  
    |-----------|-----------------|  
    |<xref:System.Xml.ConformanceLevel.Document>|La sortie XML est conforme aux règles d’un document XML 1.0 correctement formé et peut être traitée par un processeur conforme.|  
    |<xref:System.Xml.ConformanceLevel.Fragment>|La sortie XML est conforme aux règles pour un fragment de document XML 1.0 correctement formé.|  
    |<xref:System.Xml.ConformanceLevel.Auto>|L’enregistreur XML détermine le niveau de conformation vérification pour appliquer (document ou fragment) basé sur les données entrantes.|  
  
<a name="writing_elements"></a>   
## <a name="writing-elements"></a>Écriture d’éléments  
 Vous pouvez utiliser les éléments suivants <xref:System.Xml.XmlWriter> méthodes permettant d’écrire des nœuds d’élément. Pour obtenir des exemples, consultez les méthodes répertoriées.  
  
|Utilisez|À|  
|---------|--------|  
|<xref:System.Xml.XmlWriter.WriteElementString%2A>|Écrire un nœud d’élément tout entier, y compris une valeur de chaîne.|  
|<xref:System.Xml.XmlWriter.WriteStartElement%2A>|Pour écrire une valeur d’élément à l’aide de plusieurs appels de méthode.  Par exemple, vous pouvez appeler <xref:System.Xml.XmlWriter.WriteValue%2A> pour écrire une valeur typée, <xref:System.Xml.XmlWriter.WriteCharEntity%2A> pour écrire une entité de caractères, <xref:System.Xml.XmlWriter.WriteAttributeString%2A> pour écrire un attribut ou vous pouvez écrire un élément enfant. Il s’agit d’une version plus sophistiquée de la <xref:System.Xml.XmlWriter.WriteElementString%2A> (méthode).<br /><br /> Pour fermer l’élément, vous appelez le <xref:System.Xml.XmlWriter.WriteEndElement%2A> ou <xref:System.Xml.XmlWriter.WriteFullEndElement%2A> (méthode).|  
|<xref:System.Xml.XmlWriter.WriteNode%2A>|Pour copier un nœud d’élément trouvé à la position actuelle d’un <xref:System.Xml.XmlReader> ou <xref:System.Xml.XPath.XPathNavigator> objet. Lorsqu'elle est appelée, elle copie tout l'objet source vers l'instance de l'objet <xref:System.Xml.XmlWriter>.|  
  
<a name="writing_attributes"></a>   
## <a name="writing-attributes"></a>Écriture des attributs  
 Vous pouvez utiliser les éléments suivants <xref:System.Xml.XmlWriter> méthodes permettant d’écrire des attributs sur les nœuds d’élément. Ces méthodes peuvent également être utilisées pour créer des déclarations d’espace de noms sur un élément, comme indiqué dans la section suivante.  
  
|Utilisez|À|  
|---------|--------|  
|<xref:System.Xml.XmlWriter.WriteAttributeString%2A>|Pour écrire un nœud d’attribut entier, y compris une valeur de chaîne.|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A>|Pour écrire la valeur d’attribut à l’aide de plusieurs appels de méthode. Par exemple, vous pouvez appeler <xref:System.Xml.XmlWriter.WriteValue%2A> pour écrire une valeur typée. Il s’agit d’une version plus sophistiquée de la <xref:System.Xml.XmlWriter.WriteElementString%2A> (méthode).<br /><br /> Pour fermer l’élément, vous appelez le <xref:System.Xml.XmlWriter.WriteEndAttribute%2A> (méthode).|  
|<xref:System.Xml.XmlWriter.WriteAttributes%2A>|Pour copier tous les attributs trouvés à la position actuelle d’un <xref:System.Xml.XmlReader> objet. Les attributs qui sont écrits varient selon le type de nœud que le lecteur est positionné sur :<br /><br /> -Pour un nœud d’attribut, elle écrit l’attribut actuel, puis le reste des attributs jusqu'à la balise de fermeture de l’élément.<br />-Pour un nœud d’élément, il écrit tous les attributs contenus dans l’élément.<br />-Pour un nœud de déclaration XML, il écrit tous les attributs dans la déclaration.<br />-Pour tous les autres types de nœud, la méthode lève une exception.|  
  
<a name="handling_ns"></a>   
## <a name="handling-namespaces"></a>La gestion des espaces de noms  
 Les espaces de noms sont utilisés pour qualifier des noms d'attributs et d'éléments dans un document XML. Les préfixes Namespace associent des éléments et attributs avec les espaces de noms, qui sont associés à leur tour des références URI. Les espaces de noms garantissent l'unicité des noms d'attributs et d'éléments dans un document XML.  
  
 Le <xref:System.Xml.XmlWriter> gère un espace de noms qui correspond à tous les espaces de noms définis dans la portée espace de noms actuel. Lors de l'écriture des éléments et attributs, vous pouvez utiliser les espaces de noms comme suit :  
  
-   Déclarer des espaces de noms manuellement à l’aide de la <xref:System.Xml.XmlWriter.WriteAttributeString%2A> (méthode). Cela peut s'avérer utile si vous savez comment optimiser le nombre de déclarations d'espaces de noms. Pour obtenir un exemple, consultez la <xref:System.Xml.XmlWriter.WriteAttributeString%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29> (méthode).  
  
-   substituer la déclaration d'un nouvel espace de noms à celle de l'espace de noms en cours ; Dans le code suivant, le <xref:System.Xml.XmlWriter.WriteAttributeString%2A> méthode modifie l’URI d’espace de noms pour le `"x"` à partir du préfixe `"123"` à `"abc"`.  
  
     [!code-csharp[XmlWriter_v2#18](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#18)]
     [!code-vb[XmlWriter_v2#18](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#18)]  
  
     Le code génère la chaîne XML suivante :  
  
    ```xml  
    <x:root xmlns:x="123">  
      <item xmlns:x="abc" />  
    </x:root>  
    ```  
  
-   spécifier un préfixe d'espace de noms lors de l'écriture des attributs ou éléments. La plupart des méthodes utilisées pour écrire des éléments et attributs permettent de faire. Par exemple, le <xref:System.Xml.XmlWriter.WriteStartElement%28System.String%2CSystem.String%2CSystem.String%29> méthode écrit une balise de début et l’associe à un espace de noms spécifié et au préfixe.  
  
<a name="writing_types"></a>   
## <a name="writing-typed-data"></a>Écriture de données typées  
 Le <xref:System.Xml.XmlWriter.WriteValue%2A> méthode accepte un objet du common language runtime (CLR), convertit la valeur d’entrée en sa représentation sous forme de chaîne en fonction des règles de conversion du type de données XML schema definition language (XSD) et écrit à l’aide de la <xref:System.Xml.XmlWriter.WriteString%2A> (méthode). Cela est plus facile à l’aide des méthodes dans la <xref:System.Xml.XmlConvert> classe afin de convertir les données typées en une valeur de chaîne avant de l’écrire.  
  
 Lors de l’écriture de texte, la valeur typée est sérialisée en texte à l’aide de la <xref:System.Xml.XmlConvert> règles pour ce type de schéma.  
  
 Pour les types de données XSD par défaut qui correspondent aux types CLR, consultez la <xref:System.Xml.XmlWriter.WriteValue%2A> (méthode).  
  
 Le <xref:System.Xml.XmlWriter> peut également être utilisé pour écrire dans un magasin de données XML. Par exemple, la classe <xref:System.Xml.XPath.XPathNavigator> peut créer un objet <xref:System.Xml.XmlWriter> pour créer des nœuds pour un objet <xref:System.Xml.XmlDocument>. Si le magasin de données comporte des informations de schéma disponibles, le <xref:System.Xml.XmlWriter.WriteValue%2A> méthode lève une exception si vous essayez de convertir en un type qui n’est pas autorisé. Si le magasin de données n’a pas d’informations de schéma disponibles, le <xref:System.Xml.XmlWriter.WriteValue%2A> méthode traite toutes les valeurs comme un `xsd:anySimpleType` type.  
  
<a name="close"></a>   
## <a name="closing-the-xml-writer"></a>Fermeture de l’enregistreur XML  
 Lorsque vous utilisez <xref:System.Xml.XmlWriter> méthodes de sortie XML, les éléments et les attributs ne sont pas écrits jusqu'à ce que vous appeliez la <xref:System.Xml.XmlWriter.Close%2A> (méthode). Par exemple, si vous utilisez <xref:System.Xml.XmlWriter> pour remplir un <xref:System.Xml.XmlDocument> de l’objet, vous ne pourrez pas voir les éléments écrits et les attributs dans le document cible jusqu'à ce que vous fermiez la <xref:System.Xml.XmlWriter> instance.  
  
<a name="async"></a>   
## <a name="asynchronous-programming"></a>Programmation asynchrone  
 La plupart de la <xref:System.Xml.XmlWriter> méthodes ont des équivalents asynchrones qui ont « Async » à la fin de leurs noms de méthode. Par exemple, l’équivalent asynchrone de <xref:System.Xml.XmlWriter.WriteAttributeString%2A> est <xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>.  
  
 Pour le <xref:System.Xml.XmlWriter.WriteValue%2A> (méthode), qui n’ont un équivalent asynchrone, convertir la valeur de retour en chaîne et utiliser la <xref:System.Xml.XmlWriter.WriteStringAsync%2A> méthode à la place.  
  
<a name="security"></a>   
## <a name="security-considerations"></a>Considérations relatives à la sécurité  
 Considérez les éléments suivants lorsque vous travaillez avec la <xref:System.Xml.XmlWriter> classe :  
  
-   Les exceptions levées par le <xref:System.Xml.XmlWriter> peut divulguer des informations de chemin d’accès que vous ne voulez pas propagées dans l’application. Votre application doit intercepter les exceptions et les traiter correctement.  
  
-   <xref:System.Xml.XmlWriter> ne valide pas les données qui sont passées à la <xref:System.Xml.XmlWriter.WriteDocType%2A> ou <xref:System.Xml.XmlWriter.WriteRaw%2A> (méthode). Vous ne devez pas passer des données arbitraires à ces méthodes.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser l’API asynchrone pour générer du code XML.  
  
```csharp  
async Task TestWriter(Stream stream)   
{  
    XmlWriterSettings settings = new XmlWriterSettings();  
    settings.Async = true;  
  
    using (XmlWriter writer = XmlWriter.Create(stream, settings)) {  
        await writer.WriteStartElementAsync("pf", "root", "http://ns");  
        await writer.WriteStartElementAsync(null, "sub", null);  
        await writer.WriteAttributeStringAsync(null, "att", null, "val");  
        await writer.WriteStringAsync("text");  
        await writer.WriteEndElementAsync();  
        await writer.WriteProcessingInstructionAsync("pName", "pValue");  
        await writer.WriteCommentAsync("cValue");  
        await writer.WriteCDataAsync("cdata value");  
        await writer.WriteEndElementAsync();  
        await writer.FlushAsync();  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlWriter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, ferme ce flux et le flux sous-jacent.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les éléments ou des attributs laissés ouverts sont fermés automatiquement.  
  
> [!NOTE]
>  Lorsque vous utilisez la <xref:System.Xml.XmlWriter> méthodes de sortie XML, les éléments et les attributs ne seront pas écrits jusqu'à ce que vous appeliez la <xref:System.Xml.XmlWriter.Close%2A> (méthode). Par exemple, si vous utilisez le XmlWriter pour remplir un <xref:System.Xml.XmlDocument>, jusqu'à ce que vous fermiez la <xref:System.Xml.XmlWriter>, vous ne pourrez pas observer les éléments et écrits attributs dans le document cible.  
  
   
  
## Examples  
 L’exemple suivant écrit un nœud XML.  
  
 [!code-cpp[XmlWriter.Close#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Close/CPP/XmlWriter.Close.cpp#1)]
 [!code-csharp[XmlWriter.Close#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Close/CS/writeelems.cs#1)]
 [!code-vb[XmlWriter.Close#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Close/VB/writeelems.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crée une instance <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parmi les <xref:System.Xml.XmlWriter.Create%2A> surcharges incluent un `settings` paramètre qui accepte une <xref:System.Xml.XmlWriterSettings> objet. Vous pouvez utiliser cet objet pour :  
  
-   Spécifier les fonctionnalités prises en charge sur créé <xref:System.Xml.XmlWriter> objet.  
  
-   Réutiliser la <xref:System.Xml.XmlWriterSettings> objet à créer plusieurs objets de writer. L'objet <xref:System.Xml.XmlWriterSettings> est copié et est mis en lecture seule pour chaque writer créé. Les modifications des paramètres d'une instance de l'objet <xref:System.Xml.XmlWriterSettings> n'affectent pas les paramètres correspondants des writers existants. Par conséquent, vous pouvez utiliser les mêmes paramètres pour créer plusieurs writers avec la même fonctionnalité. Ou vous pouvez modifier les paramètres d'une instance de l'objet <xref:System.Xml.XmlWriterSettings> et créer un nouveau writer avec différentes fonctionnalités.  
  
-   Ajouter des fonctionnalités à un writer XML existant. La méthode <xref:System.Xml.XmlWriter.Create%2A> peut accepter un autre objet <xref:System.Xml.XmlWriter>. Sous-jacent <xref:System.Xml.XmlWriter> objet n’a pas à être un enregistreur XML créé par la méthode statique <xref:System.Xml.XmlWriter.Create%2A> (méthode). Par exemple, vous pouvez spécifier un writer XML défini par l’utilisateur pour ajouter des fonctionnalités supplémentaires.  
  
-   Tirer pleinement parti des fonctionnalités, comme une meilleure vérification de conformité et de conformité à la [recommandation XML 1.0](https://www.w3.org/TR/2006/REC-xml-20060816/) qui sont disponibles uniquement sur <xref:System.Xml.XmlWriter> les objets créés par la méthode statique <xref:System.Xml.XmlWriter.Create%2A> (méthode).  
  
 Si vous utilisez un <xref:System.Xml.XmlWriter.Create%2A> surcharge qui n’accepte pas un <xref:System.Xml.XmlWriterSettings> de l’objet, les paramètres de writer par défaut suivants sont utilisés :  
  
|Paramètre|Par défaut|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Deux espaces|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (aucune suppression)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (retour chariot, retour à la ligne)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
> [!NOTE]
>  Bien que le .NET Framework inclut les <xref:System.Xml.XmlTextWriter> (classe), qui est une implémentation concrète de la <xref:System.Xml.XmlWriter> (classe), nous vous recommandons de créer <xref:System.Xml.XmlWriter> instances à l’aide de la <xref:System.Xml.XmlWriter.Create%2A> (méthode).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As Stream) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::IO::Stream ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="output">Flux dans lequel vous voulez écrire. <see cref="T:System.Xml.XmlWriter" /> écrit la syntaxe du texte XML 1.0 et l'ajoute au flux de données spécifié.</param>
        <summary>Crée une nouvelle instance de <see cref="T:System.Xml.XmlWriter" /> à l'aide du flux spécifié.</summary>
        <returns>Objet <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous utilisez cette surcharge, une <xref:System.Xml.XmlWriterSettings> objet avec les paramètres suivants de la valeur par défaut est utilisé pour créer l’enregistreur XML :  
  
|Paramètre|Par défaut|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Deux espaces|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (aucune suppression)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (retour chariot, retour à la ligne)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 Si vous souhaitez spécifier les fonctionnalités à prendre en charge sur le writer créé, utilisez une surcharge qui accepte un <xref:System.Xml.XmlWriterSettings> de l’objet en tant qu’un de ses arguments, puis passez une <xref:System.Xml.XmlWriterSettings> objet avec des paramètres personnalisés.  
  
 En outre, XmlWriter écrit toujours la marque d’ordre d’octet (BOM) dans le flux de données sous-jacent ; Toutefois, certains flux ne doit pas avoir une nomenclature. Pour omettre la nomenclature, créer un nouveau <xref:System.Xml.XmlWriterSettings> de l’objet et la propriété Encoding pour une nouvelle <xref:System.Text.UTF8Encoding> objet avec la valeur booléenne dans le constructeur de la valeur false.  
  
   
  
## Examples  
 L’exemple suivant écrit un fragment XML dans un flux de mémoire. (Il utilise le <xref:System.Xml.XmlWriter.Create%28System.IO.Stream%2CSystem.Xml.XmlWriterSettings%29> de surcharge, qui configure également les paramètres de la nouvelle instance de writer XML.)  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As TextWriter) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="output">
          <see cref="T:System.IO.TextWriter" /> dans lequel écrire. <see cref="T:System.Xml.XmlWriter" /> écrit la syntaxe du texte XML 1.0 et l'ajoute au <see cref="T:System.IO.TextWriter" /> spécifié.</param>
        <summary>Crée une nouvelle instance de <see cref="T:System.Xml.XmlWriter" /> à l'aide du <see cref="T:System.IO.TextWriter" /> spécifié.</summary>
        <returns>Objet <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous utilisez cette surcharge, une <xref:System.Xml.XmlWriterSettings> objet avec les paramètres par défaut est utilisé pour créer l’enregistreur XML.  
  
|Paramètre|Par défaut|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Deux espaces|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (aucune suppression)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (retour chariot, retour à la ligne)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 Si vous souhaitez spécifier les fonctionnalités à prendre en charge sur le writer créé, utilisez une surcharge qui accepte un <xref:System.Xml.XmlWriterSettings> de l’objet en tant qu’un de ses arguments, puis passez une <xref:System.Xml.XmlWriterSettings> objet avec des paramètres personnalisés.  
  
   
  
## Examples  
 L’exemple suivant crée un writer qui est dirigé vers la console.  
  
 [!code-csharp[XmlWriter_v2#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#3)]
 [!code-vb[XmlWriter_v2#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (string outputFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(string outputFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (outputFileName As String) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::String ^ outputFileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outputFileName">Fichier dans lequel écrire. <see cref="T:System.Xml.XmlWriter" /> crée un fichier au chemin d'accès spécifié et y écrit en syntaxe de texte XML 1.0. <c>outputFileName</c> doit être un chemin de système de fichiers.</param>
        <summary>Crée une instance de <see cref="T:System.Xml.XmlWriter" /> à l'aide du nom de fichier spécifié.</summary>
        <returns>Objet <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous utilisez cette surcharge, une <xref:System.Xml.XmlWriterSettings> objet avec les paramètres par défaut est utilisé pour créer l’enregistreur XML.  
  
|Paramètre|Par défaut|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Deux espaces|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (aucune suppression)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (retour chariot, retour à la ligne)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 Si vous souhaitez spécifier les fonctionnalités à prendre en charge sur le writer XML créé, utilisez une surcharge qui accepte un <xref:System.Xml.XmlWriterSettings> de l’objet en tant qu’un de ses arguments, puis passez un <xref:System.Xml.XmlWriterSettings> objet avec des paramètres personnalisés.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Xml.XmlWriter> de l’objet et écrit un nœud book.  
  
 [!code-csharp[XmlWriter_v2#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#2)]
 [!code-vb[XmlWriter_v2#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="url" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Text.StringBuilder output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Text.StringBuilder output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As StringBuilder) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::Text::StringBuilder ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Text.StringBuilder" />
      </Parameters>
      <Docs>
        <param name="output">
          <see cref="T:System.Text.StringBuilder" /> dans lequel écrire. Le contenu écrit par le <see cref="T:System.Xml.XmlWriter" /> est ajouté au <see cref="T:System.Text.StringBuilder" />.</param>
        <summary>Crée une nouvelle instance de <see cref="T:System.Xml.XmlWriter" /> à l'aide du <see cref="T:System.Text.StringBuilder" /> spécifié.</summary>
        <returns>Objet <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous utilisez cette surcharge, une <xref:System.Xml.XmlWriterSettings> objet avec les paramètres par défaut est utilisé pour créer l’enregistreur XML.  
  
|Paramètre|Par défaut|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Deux espaces|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (aucune suppression)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (retour chariot, retour à la ligne)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 Si vous souhaitez spécifier les fonctionnalités à prendre en charge sur le writer XML créé, utilisez une surcharge qui accepte un <xref:System.Xml.XmlWriterSettings> de l’objet en tant qu’un de ses arguments, puis passez un <xref:System.Xml.XmlWriterSettings> objet avec des paramètres personnalisés.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="builder" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As XmlWriter) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::Xml::XmlWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="output">L'objet <see cref="T:System.Xml.XmlWriter" /> à utiliser comme writer sous-jacent.</param>
        <summary>Crée une instance de <see cref="T:System.Xml.XmlWriter" /> à l'aide de l'objet <see cref="T:System.Xml.XmlWriter" /> spécifié.</summary>
        <returns>Objet <see cref="T:System.Xml.XmlWriter" /> autour de l'objet <see cref="T:System.Xml.XmlWriter" /> spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode permet d’ajouter des fonctionnalités à un sous-jacent <xref:System.Xml.XmlWriter> objet. Sous-jacent <xref:System.Xml.XmlWriter> objet peut être un objet créé par le <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> méthode ou un objet créé à l’aide de la <xref:System.Xml.XmlTextWriter> implémentation.  
  
 Lorsque vous utilisez cette surcharge, une <xref:System.Xml.XmlWriterSettings> objet avec les paramètres par défaut est utilisé pour créer l’enregistreur XML.  
  
|Paramètre|Par défaut|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Deux espaces|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (aucune suppression)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (retour chariot, retour à la ligne)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 Si vous souhaitez spécifier les fonctionnalités à prendre en charge sur le writer XML créé, utilisez une surcharge qui accepte un <xref:System.Xml.XmlWriterSettings> de l’objet en tant qu’un de ses arguments, puis passez un <xref:System.Xml.XmlWriterSettings> objet avec des paramètres personnalisés.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.Stream output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.Stream output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As Stream, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::IO::Stream ^ output, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="output">Flux dans lequel vous voulez écrire. <see cref="T:System.Xml.XmlWriter" /> écrit la syntaxe du texte XML 1.0 et l'ajoute au flux de données spécifié.</param>
        <param name="settings">Objet <see cref="T:System.Xml.XmlWriterSettings" /> permettant de configurer la nouvelle instance de <see cref="T:System.Xml.XmlWriter" />. S'il est <see langword="null" />, un <see cref="T:System.Xml.XmlWriterSettings" /> avec des paramètres par défaut est utilisé.  
  
 Si <see cref="T:System.Xml.XmlWriter" /> est utilisé avec la méthode <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />, vous devez utiliser la propriété <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> pour obtenir un objet <see cref="T:System.Xml.XmlWriterSettings" /> avec les paramètres corrects. Cela garantit que l'objet <see cref="T:System.Xml.XmlWriter" /> créé dispose des paramètres de sortie corrects.</param>
        <summary>Crée une instance de <see cref="T:System.Xml.XmlWriter" /> à l'aide du flux et de l'objet <see cref="T:System.Xml.XmlWriterSettings" />.</summary>
        <returns>Objet <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XmlWriter écrit toujours marque d’ordre d’octet (BOM) dans le flux de données sous-jacente ; Toutefois, certains flux ne doit pas avoir une nomenclature. Pour omettre la nomenclature, créer un nouveau <xref:System.Xml.XmlWriterSettings> de l’objet et la propriété Encoding pour une nouvelle <xref:System.Text.UTF8Encoding> objet avec la valeur booléenne dans le constructeur de la valeur false.  
  
   
  
## Examples  
 L’exemple suivant écrit un fragment XML dans un flux de mémoire.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.TextWriter output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.TextWriter output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As TextWriter, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::IO::TextWriter ^ output, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="output">
          <see cref="T:System.IO.TextWriter" /> dans lequel écrire. <see cref="T:System.Xml.XmlWriter" /> écrit la syntaxe du texte XML 1.0 et l'ajoute au <see cref="T:System.IO.TextWriter" /> spécifié.</param>
        <param name="settings">Objet <see cref="T:System.Xml.XmlWriterSettings" /> permettant de configurer la nouvelle instance de <see cref="T:System.Xml.XmlWriter" />. S'il est <see langword="null" />, un <see cref="T:System.Xml.XmlWriterSettings" /> avec des paramètres par défaut est utilisé.  
  
 Si <see cref="T:System.Xml.XmlWriter" /> est utilisé avec la méthode <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />, vous devez utiliser la propriété <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> pour obtenir un objet <see cref="T:System.Xml.XmlWriterSettings" /> avec les paramètres corrects. Cela garantit que l'objet <see cref="T:System.Xml.XmlWriter" /> créé dispose des paramètres de sortie corrects.</param>
        <summary>Crée une nouvelle instance de <see cref="T:System.Xml.XmlWriter" /> à l'aide des objets <see cref="T:System.IO.TextWriter" /> et <see cref="T:System.Xml.XmlWriterSettings" />.</summary>
        <returns>Objet <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant écrit une chaîne XML.  
  
 [!code-csharp[XmlWriter_v2#4](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#4)]
 [!code-vb[XmlWriter_v2#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (string outputFileName, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(string outputFileName, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.String,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (outputFileName As String, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::String ^ outputFileName, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputFileName" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="outputFileName">Fichier dans lequel écrire. <see cref="T:System.Xml.XmlWriter" /> crée un fichier au chemin d'accès spécifié et y écrit en syntaxe de texte XML 1.0. <c>outputFileName</c> doit être un chemin de système de fichiers.</param>
        <param name="settings">Objet <see cref="T:System.Xml.XmlWriterSettings" /> permettant de configurer la nouvelle instance de <see cref="T:System.Xml.XmlWriter" />. S'il est <see langword="null" />, un <see cref="T:System.Xml.XmlWriterSettings" /> avec des paramètres par défaut est utilisé.  
  
 Si <see cref="T:System.Xml.XmlWriter" /> est utilisé avec la méthode <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />, vous devez utiliser la propriété <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> pour obtenir un objet <see cref="T:System.Xml.XmlWriterSettings" /> avec les paramètres corrects. Cela garantit que l'objet <see cref="T:System.Xml.XmlWriter" /> créé dispose des paramètres de sortie corrects.</param>
        <summary>Crée une instance de <see cref="T:System.Xml.XmlWriter" /> à l'aide du nom de fichier et de l'objet <see cref="T:System.Xml.XmlWriterSettings" />.</summary>
        <returns>Objet <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant crée un <xref:System.Xml.XmlWriter> objet avec les paramètres définis.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="url" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Text.StringBuilder output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Text.StringBuilder output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As StringBuilder, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::Text::StringBuilder ^ output, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Text.StringBuilder" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="output">
          <see cref="T:System.Text.StringBuilder" /> dans lequel écrire. Le contenu écrit par le <see cref="T:System.Xml.XmlWriter" /> est ajouté au <see cref="T:System.Text.StringBuilder" />.</param>
        <param name="settings">Objet <see cref="T:System.Xml.XmlWriterSettings" /> permettant de configurer la nouvelle instance de <see cref="T:System.Xml.XmlWriter" />. S'il est <see langword="null" />, un <see cref="T:System.Xml.XmlWriterSettings" /> avec des paramètres par défaut est utilisé.  
  
 Si <see cref="T:System.Xml.XmlWriter" /> est utilisé avec la méthode <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />, vous devez utiliser la propriété <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> pour obtenir un objet <see cref="T:System.Xml.XmlWriterSettings" /> avec les paramètres corrects. Cela garantit que l'objet <see cref="T:System.Xml.XmlWriter" /> créé dispose des paramètres de sortie corrects.</param>
        <summary>Crée une nouvelle instance de <see cref="T:System.Xml.XmlWriter" /> à l'aide des objets <see cref="T:System.Text.StringBuilder" /> et <see cref="T:System.Xml.XmlWriterSettings" />.</summary>
        <returns>Objet <see cref="T:System.Xml.XmlWriter" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="builder" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Xml.XmlWriter output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Xml.XmlWriter output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As XmlWriter, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::Xml::XmlWriter ^ output, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="output">L'objet <see cref="T:System.Xml.XmlWriter" /> à utiliser comme writer sous-jacent.</param>
        <param name="settings">Objet <see cref="T:System.Xml.XmlWriterSettings" /> permettant de configurer la nouvelle instance de <see cref="T:System.Xml.XmlWriter" />. S'il est <see langword="null" />, un <see cref="T:System.Xml.XmlWriterSettings" /> avec des paramètres par défaut est utilisé.  
  
 Si <see cref="T:System.Xml.XmlWriter" /> est utilisé avec la méthode <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />, vous devez utiliser la propriété <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> pour obtenir un objet <see cref="T:System.Xml.XmlWriterSettings" /> avec les paramètres corrects. Cela garantit que l'objet <see cref="T:System.Xml.XmlWriter" /> créé dispose des paramètres de sortie corrects.</param>
        <summary>Crée une nouvelle instance de <see cref="T:System.Xml.XmlWriter" /> à l'aide des objets <see cref="T:System.Xml.XmlWriter" /> et <see cref="T:System.Xml.XmlWriterSettings" /> spécifiés.</summary>
        <returns>Objet <see cref="T:System.Xml.XmlWriter" /> autour de l'objet <see cref="T:System.Xml.XmlWriter" /> spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode vous permet d’ajouter des fonctionnalités supplémentaires à un sous-jacent <xref:System.Xml.XmlWriter> objet. Sous-jacent <xref:System.Xml.XmlWriter> objet peut être un objet créé par le <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> méthode ou un objet créé à l’aide de la <xref:System.Xml.XmlTextWriter> implémentation.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
        <summary>Libère les ressources utilisées par la classe <see cref="T:System.Xml.XmlWriter" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</param>
        <summary>Libère les ressources non managées utilisées par <see cref="T:System.Xml.XmlWriter" /> et libère éventuellement les ressources managées.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public abstract void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, vide le contenu de la mémoire tampon dans les flux sous-jacents, puis vide le flux sous-jacent.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il s’agit à la place de <xref:System.Xml.XmlWriter.Close%2A> lorsque vous souhaitez écrire davantage dans le flux sous-jacent, sans perdre le contenu de la mémoire tampon.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.FlushAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant écrit deux fragments XML.  
  
 [!code-cpp[XmlWriter.Flush#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Flush/CPP/write2docs_v2.cpp#1)]
 [!code-csharp[XmlWriter.Flush#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Flush/CS/write2docs_v2.cs#1)]
 [!code-vb[XmlWriter.Flush#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Flush/VB/write2docs_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task FlushAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task FlushAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.FlushAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FlushAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ FlushAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Vide de façon asynchrone le contenu de la mémoire tampon dans les flux sous-jacents, puis vide le flux sous-jacent.</summary>
        <returns>Tâche qui représente l'opération <see langword="Flush" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.Flush%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="LookupPrefix">
      <MemberSignature Language="C#" Value="public abstract string LookupPrefix (string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string LookupPrefix(string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.LookupPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function LookupPrefix (ns As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ LookupPrefix(System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ns">URI de l'espace de noms dont vous recherchez le préfixe.</param>
        <summary>En cas de substitution dans une classe dérivée, retourne le préfixe le plus proche défini dans la portée espace de noms actuelle pour l'URI de l'espace de noms.</summary>
        <returns>Le préfixe correspondant ou <see langword="null" />, s'il n'existe aucun URI d'espace de noms correspondant dans la portée actuelle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant écrit un livre.  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ns" /> a la valeur <see langword="null" /> ou <see langword="String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="Settings">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlWriterSettings Settings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlWriterSettings Settings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.Settings" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Settings As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlWriterSettings ^ Settings { System::Xml::XmlWriterSettings ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'objet <see cref="T:System.Xml.XmlWriterSettings" /> permettant de créer cette instance de <see cref="T:System.Xml.XmlWriter" />.</summary>
        <value>Objet <see cref="T:System.Xml.XmlWriterSettings" /> permettant de créer cette instance de writer. Si ce writer n'a pas été créé à l'aide de la méthode <see cref="Overload:System.Xml.XmlWriter.Create" />, cette propriété retourne <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.XmlWriterSettings> classe est utilisée pour spécifier le jeu de fonctionnalités pour prendre en charge sur l’instance de writer créé. Le <xref:System.Xml.XmlWriterSettings> objet retourné par la <xref:System.Xml.XmlWriter.Settings%2A> propriété ne peut pas être modifiée. Toute tentative de modifier les résultats de paramètres individuels dans une exception est levée.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributes">
      <MemberSignature Language="C#" Value="public virtual void WriteAttributes (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttributes(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttributes (reader As XmlReader, defattr As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttributes(System::Xml::XmlReader ^ reader, bool defattr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see langword="XmlReader" /> à partir duquel les attributs doivent être copiés.</param>
        <param name="defattr">
          <see langword="true" /> pour copier les attributs par défaut à partir de <see langword="XmlReader" /> ; sinon, <see langword="false" />.</param>
        <summary>En cas de substitution dans une classe dérivée, écrit tous les attributs trouvés à la position actuelle dans <see cref="T:System.Xml.XmlReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le lecteur est positionné sur un `element` nœud `WriteAttributes` copie tous les attributs contenus. Si le lecteur est positionné sur un `attribute` nœud, cette méthode écrit l’attribut actuel, puis le reste des attributs jusqu'à la balise de fermeture de l’élément. Si le lecteur est positionné sur un `XmlDeclaration` nœud, cette méthode écrit tous les attributs dans la déclaration. Si le lecteur est positionné sur un autre type de nœud cette méthode lève un <xref:System.Xml.XmlException>.  
  
 Si cette méthode est appelée à l’aide de <xref:System.Xml.XmlValidatingReader>pour vous assurer de n’importe quel contenu (ce qui a été développée à partir des entités) qui peut entraîner un document non valide est remplacé lors de l’écriture de XML bien formé. Par exemple, si un attribut inclut une `&gt;` entité qui a été développée pour garantir un document correct développé > est remplacé lorsque écrit avec `&gt;`.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteAttributesAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant copie tous les éléments dans la sortie, modifie les noms de balises en majuscules et copie tous les attributs inchangés.  
  
 [!code-cpp[XmlWriter.WriteAttributes#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteAttributes/CPP/writeattrs_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteAttributes/CS/writeattrs_v2.cs#1)]
 [!code-vb[XmlWriter.WriteAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteAttributes/VB/writeattrs_v2.vb#1)]  
  
 L’exemple utilise le fichier `test1.xml`comme entrée.  
  
 [!code-xml[XmlWriter.WriteAttributes#2](~/samples/snippets/xml/VS_Snippets_Data/XmlWriter.WriteAttributes/XML/test1.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Xml.XmlException">Le lecteur n'est pas placé sur un nœud <see langword="element" />, <see langword="attribute" /> ou <see langword="XmlDeclaration" />.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAttributesAsync (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAttributesAsync(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteAttributesAsync (reader As XmlReader, defattr As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteAttributesAsync(System::Xml::XmlReader ^ reader, bool defattr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlWriter/&lt;WriteAttributesAsync&gt;c__async2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see langword="XmlReader" /> à partir duquel les attributs doivent être copiés.</param>
        <param name="defattr">
          <see langword="true" /> pour copier les attributs par défaut à partir de <see langword="XmlReader" /> ; sinon, <see langword="false" />.</param>
        <summary>Écrit de façon asynchrone tous les attributs trouvés à la position actuelle dans le <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteAttributes" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteAttributes%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAttributeString">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
        <summary>En cas de substitution dans une classe dérivée, écrit un attribut avec la valeur spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string localName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string localName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAttributeString (localName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAttributeString(System::String ^ localName, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Le nom local de l'attribut.</param>
        <param name="value">Valeur de l'attribut.</param>
        <summary>En cas de substitution dans une classe dérivée, écrit l'attribut avec le nom local et la valeur spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteAttributeString` effectue les actions suivantes :  
  
-   Si la valeur d’attribut inclut des guillemets doubles ou simples, ils sont remplacés par `&quot;` et `&apos;` respectivement.  
  
-   Si vous écrivez un `xml:space` attribut, le writer vérifie que la valeur d’attribut est valide. (Les valeurs valides sont `preserve` ou `default`.)  
  
-   Si vous écrivez un `xml:lang` attribut, le writer ne vérifie pas si que la valeur d’attribut est valide selon la recommandation W3C XML 1.0.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant écrit un livre.  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
        <exception cref="T:System.ArgumentException">La valeur d'attribut <see langword="xml:space" /> ou <see langword="xml:lang" /> n'est pas valide.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAttributeString (localName As String, ns As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAttributeString(System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Le nom local de l'attribut.</param>
        <param name="ns">URI de l'espace de noms à associer à l'attribut.</param>
        <param name="value">Valeur de l'attribut.</param>
        <summary>En cas de substitution dans une classe dérivée, écrit un attribut avec le nom local, l'URI de l'espace de noms et la valeur spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode écrit l’attribut avec un préfixe d’espace de noms défini utilisateur et l’associe à l’espace de noms donné. Si `localName` est « xmlns », alors cette méthode l’interprète comme une déclaration d’espace de noms. Dans ce cas, le `ns` argument peut être `null`.  
  
 `WriteAttributeString` effectue les actions suivantes :  
  
-   Si la valeur d’attribut inclut des guillemets doubles ou simples, ils sont remplacés par `&quot;` et `&apos;` respectivement.  
  
-   Si vous écrivez un `xml:space` attribut, le writer vérifie que la valeur d’attribut est valide. (Les valeurs valides sont `preserve` ou `default`.)  
  
-   Si vous écrivez un `xml:lang` attribut, le writer ne vérifie pas si que la valeur d’attribut est valide selon la recommandation W3C XML 1.0.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.Xml.XmlWriter.WriteAttributeString%2A> méthode pour écrire une déclaration d’espace de noms.  
  
 [!code-cpp[XmlWriter.WriteAttributeString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CPP/writeattrstring.cpp#1)]
 [!code-csharp[XmlWriter.WriteAttributeString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CS/writeattrstring.cs#1)]
 [!code-vb[XmlWriter.WriteAttributeString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteAttributeString/VB/writeattrstring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
        <exception cref="T:System.ArgumentException">La valeur d'attribut <see langword="xml:space" /> ou <see langword="xml:lang" /> n'est pas valide.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAttributeString (prefix As String, localName As String, ns As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAttributeString(System::String ^ prefix, System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Préfixe de l'espace de noms de cet attribut.</param>
        <param name="localName">Le nom local de l'attribut.</param>
        <param name="ns">L'URI de l'espace de noms de l'attribut.</param>
        <param name="value">Valeur de l'attribut.</param>
        <summary>En cas de substitution dans une classe dérivée, écrit l'attribut avec le préfixe, le nom local, l'URI de l'espace de noms et la valeur spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode écrit l’attribut avec un préfixe d’espace de noms défini utilisateur et l’associe à l’espace de noms donné. Si le préfixe est « xmlns » puis cette méthode également traite cela comme une déclaration d’espace de noms et associe le préfixe déclaré avec l’espace de noms QU'URI fourni dans la valeur d’attribut donné. Dans ce cas le `ns` argument peut être `null`.  
  
 `WriteAttributeString` effectue les actions suivantes :  
  
-   Si la valeur d’attribut inclut des guillemets doubles ou simples, ils sont remplacés par `&quot;` et `&apos;` respectivement.  
  
-   Si vous écrivez un `xml:space` attribut, le writer vérifie que la valeur d’attribut est valide. (Les valeurs valides sont `preserve` ou `default`.)  
  
-   Si vous écrivez un `xml:lang` attribut, le writer ne vérifie pas si que la valeur d’attribut est valide selon la recommandation W3C XML 1.0.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.Xml.XmlWriter.WriteAttributeString%2A> méthode pour écrire une déclaration d’espace de noms.  
  
 [!code-cpp[XmlWriter.WriteAttributeString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CPP/writeattrstring.cpp#1)]
 [!code-csharp[XmlWriter.WriteAttributeString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CS/writeattrstring.cs#1)]
 [!code-vb[XmlWriter.WriteAttributeString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteAttributeString/VB/writeattrstring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
        <exception cref="T:System.ArgumentException">La valeur d'attribut <see langword="xml:space" /> ou <see langword="xml:lang" /> n'est pas valide.</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="localName" /> ou <paramref name="ns" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributeStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteAttributeStringAsync (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteAttributeStringAsync(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteAttributeStringAsync (prefix As String, localName As String, ns As String, value As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteAttributeStringAsync(System::String ^ prefix, System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Préfixe de l'espace de noms de cet attribut.</param>
        <param name="localName">Le nom local de l'attribut.</param>
        <param name="ns">L'URI de l'espace de noms de l'attribut.</param>
        <param name="value">Valeur de l'attribut.</param>
        <summary>Écrit de façon asynchrone l'attribut avec le préfixe, le nom local, l'URI de l'espace de noms et la valeur spécifiés.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteAttributeString" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteAttributeString%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64">
      <MemberSignature Language="C#" Value="public abstract void WriteBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteBase64 (buffer As Byte(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tableau d'octets à encoder.</param>
        <param name="index">Emplacement dans la mémoire tampon indiquant le début des octets à écrire.</param>
        <param name="count">Nombre d'octets à écrire.</param>
        <summary>En cas de substitution dans une classe dérivée, code les octets binaires spécifiés au format Base64 et écrit le texte obtenu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par exemple, la mémoire tampon d’octets peut contenir du contenu binaire d’une image GIF. Cela clairement ne serait pas un XML valide. Le `Base64` codage est conçu pour représenter les séquences d’octets arbitraires d’un texte composé de 65 caractères US-ASCII ([A-Za-z0-9 + / =]) où chaque caractère code 6 bits des données binaires. Pour plus d’informations, consultez les demandes de commentaires (RFC) 1521 sur le [demande pour le site Web de commentaires](https://www.rfc-editor.org).  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteBase64Async%2A>.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.Xml.XmlWriter.WriteBase64%2A> méthode écrire `Base64` données. Le `Base64` les données sont incorporées dans un `<image>` élément.  
  
 [!code-csharp[XmlReader_Read_Write_Binary#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Read_Write_Binary/CS/readBinary.cs#3)]
 [!code-vb[XmlReader_Read_Write_Binary#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Read_Write_Binary/VB/readBinary.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> ou <paramref name="count" /> est inférieur à zéro.  
  
 - ou -  
  
 La longueur de la mémoire tampon moins <paramref name="index" /> est inférieure à <paramref name="count" />.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64Async">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteBase64Async (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteBase64Async(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteBase64Async (buffer As Byte(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteBase64Async(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tableau d'octets à encoder.</param>
        <param name="index">Emplacement dans la mémoire tampon indiquant le début des octets à écrire.</param>
        <param name="count">Nombre d'octets à écrire.</param>
        <summary>Encode de façon asynchrone les octets binaires spécifiés au format base64 et écrit le texte résultant.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteBase64" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteBase64%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBinHex">
      <MemberSignature Language="C#" Value="public virtual void WriteBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBinHex (buffer As Byte(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tableau d'octets à encoder.</param>
        <param name="index">Emplacement dans la mémoire tampon indiquant le début des octets à écrire.</param>
        <param name="count">Nombre d'octets à écrire.</param>
        <summary>En cas de substitution dans une classe dérivée, code les octets binaires spécifiés au format <see langword="BinHex" /> et écrit le texte obtenu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteBinHexAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.Xml.XmlWriter.WriteBinHex%2A> méthode écrire `BinHex` données. Le `BinHex` les données sont incorporées dans un `<image>` élément.  
  
 [!code-csharp[XmlReader_Read_Write_Binary#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Read_Write_Binary/CS/readBinary.cs#1)]
 [!code-vb[XmlReader_Read_Write_Binary#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Read_Write_Binary/VB/readBinary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> ou <paramref name="count" /> est inférieur à zéro.  
  
 - ou -  
  
 La longueur de la mémoire tampon moins <paramref name="index" /> est inférieure à <paramref name="count" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBinHexAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteBinHexAsync (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteBinHexAsync(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteBinHexAsync (buffer As Byte(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteBinHexAsync(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tableau d'octets à encoder.</param>
        <param name="index">Emplacement dans la mémoire tampon indiquant le début des octets à écrire.</param>
        <param name="count">Nombre d'octets à écrire.</param>
        <summary>Encode de façon asynchrone les octets binaires spécifiés au format <see langword="BinHex" /> et écrit le texte résultant.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteBinHex" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteBinHex%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCData">
      <MemberSignature Language="C#" Value="public abstract void WriteCData (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteCData(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteCData (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteCData(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Texte à placer dans le bloc CDATA.</param>
        <summary>En cas de substitution dans une classe dérivée, écrit un bloc &lt;![CDATA[...]]&gt; contenant le texte spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `text` est `null` ou `String.Empty`, cette méthode écrit un bloc CDATA vide, par exemple \<! [CDATA []]] >< ! [[] CDATA >.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteCDataAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant écrit un fichier XML représentant un livre.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le texte est à l'origine d'un document XML incorrect.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCDataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCDataAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCDataAsync(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCDataAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteCDataAsync (text As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteCDataAsync(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Texte à placer dans le bloc CDATA.</param>
        <summary>Écrit de façon asynchrone un bloc &lt;![CDATA[...]]&gt; contenant le texte spécifié.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteCData" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteCData%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCharEntity">
      <MemberSignature Language="C#" Value="public abstract void WriteCharEntity (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteCharEntity(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteCharEntity (ch As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteCharEntity(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Caractère Unicode pour lequel une entité de caractère doit être générée.</param>
        <summary>En cas de substitution dans une classe dérivée, force la génération d'une entité de caractère pour la valeur du caractère Unicode spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode écrit le caractère Unicode au format de référence d’entité en caractères hexadécimaux.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteCharEntityAsync%2A>.  
  
   
  
## Examples  
 Consultez <xref:System.Xml.XmlTextWriter.WriteCharEntity%2A?displayProperty=nameWithType> pour obtenir un exemple à l’aide de cette méthode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le caractère se trouve dans la plage de caractères de paire de substitution, <see langword="0xd800" /> - <see langword="0xdfff" />.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCharEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCharEntityAsync (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCharEntityAsync(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteCharEntityAsync (ch As Char) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteCharEntityAsync(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Caractère Unicode pour lequel une entité de caractère doit être générée.</param>
        <summary>Force de façon asynchrone la génération d'une entité de caractère pour la valeur du caractère Unicode spécifiée.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteCharEntity" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteCharEntity%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteChars">
      <MemberSignature Language="C#" Value="public abstract void WriteChars (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteChars(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteChars (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteChars(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tableau de caractères contenant le texte à écrire.</param>
        <param name="index">Emplacement dans la mémoire tampon indiquant le début du texte à écrire.</param>
        <param name="count">Nombre de caractères à écrire.</param>
        <summary>En cas de substitution dans une classe dérivée, écrit du texte mémoire tampon par mémoire tampon.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode peut être utilisée pour écrire de grandes quantités d’une mémoire tampon de texte à la fois.  
  
 Gestion particulière doit être effectuée pour garantir la `WriteChars` méthode ne fractionne pas les caractères de paire de substitution sur plusieurs écritures de mémoire tampon. La spécification XML définit les plages valides pour les paires de substitution.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteCharsAsync%2A>.  
  
   
  
## Examples  
 [!code-csharp[XmlWriter.WriteChars#1](~/samples/snippets/csharp/VS_Snippets_Data/xmlwriter.writechars/cs/xmlwriterwritecharsexample.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> ou <paramref name="count" /> est inférieur à zéro.  
  
 - ou -  
  
 La longueur de la mémoire tampon moins <paramref name="index" /> est inférieure à <paramref name="count" /> ; par conséquent, l'appel entraîne une séparation des caractères de paire de substitution ou l'écriture d'une paire de substitution non valide.</exception>
        <exception cref="T:System.ArgumentException">La valeur de paramètre <paramref name="buffer" /> n'est pas valide.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCharsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCharsAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCharsAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteCharsAsync (buffer As Char(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteCharsAsync(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tableau de caractères contenant le texte à écrire.</param>
        <param name="index">Emplacement dans la mémoire tampon indiquant le début du texte à écrire.</param>
        <param name="count">Nombre de caractères à écrire.</param>
        <summary>Écrit de façon asynchrone du texte mémoire tampon par mémoire tampon.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteChars" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteChars%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteComment">
      <MemberSignature Language="C#" Value="public abstract void WriteComment (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteComment(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteComment(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteComment (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteComment(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Texte à placer dans le commentaire.</param>
        <summary>En cas de substitution dans une classe dérivée, écrit un commentaire &lt;!--...--&gt; contenant le texte spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `text` est `null` ou `String.Empty`, cette méthode écrit un commentaire ne contenant aucune donnée, par exemple \<!--->.  
  
 Si `text` contient une séquence non valide de deux tirets «-- » le <xref:System.Xml.XmlWriter> peut lever une <xref:System.ArgumentException> (<xref:System.Xml.XmlTextWriter> objets) ou insérer un espace entre les tirets « - » - afin que le texte est un commentaire XML valide (<xref:System.Xml.XmlWriter> objets créés par le <xref:System.Xml.XmlWriter.Create%2A> (méthode)).  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteCommentAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant écrit un fichier XML représentant un livre.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le texte est à l'origine d'un document XML incorrect.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCommentAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCommentAsync(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCommentAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteCommentAsync (text As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteCommentAsync(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Texte à placer dans le commentaire.</param>
        <summary>Écrit de façon asynchrone un commentaire &lt;!--...--&gt; contenant le texte spécifié.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteComment" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteComment%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteDocType">
      <MemberSignature Language="C#" Value="public abstract void WriteDocType (string name, string pubid, string sysid, string subset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteDocType(string name, string pubid, string sysid, string subset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteDocType (name As String, pubid As String, sysid As String, subset As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteDocType(System::String ^ name, System::String ^ pubid, System::String ^ sysid, System::String ^ subset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="pubid" Type="System.String" />
        <Parameter Name="sysid" Type="System.String" />
        <Parameter Name="subset" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom de DOCTYPE. Ne doit pas être vide.</param>
        <param name="pubid">Si la valeur n’est pas Null, elle écrit également PUBLIC "pubid" "sysid", où <c>pubid</c> et <c>sysid</c> sont remplacés par la valeur des arguments spécifiés.</param>
        <param name="sysid">Si <c>pubid</c> est <see langword="null" /> et que <c>sysid</c> n’est pas Null, elle écrit SYSTEM "sysid", où <c>sysid</c> est remplacé par la valeur de cet argument.</param>
        <param name="subset">Si la valeur est non null, elle écrit [subset] où subset est remplacé par la valeur de cet argument.</param>
        <summary>En cas de substitution dans une classe dérivée, écrit la déclaration DOCTYPE avec le nom et les attributs facultatifs spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode ne vérifie pas les caractères non valides dans `pubid`, `sysid` ou `subset`. Il ne vérifie pas plus que le sous-ensemble interne est bien formé.  
  
> [!IMPORTANT]
>  Le <xref:System.Xml.XmlWriter> ne valide pas les données qui sont transmies à la <xref:System.Xml.XmlWriter.WriteDocType%2A> (méthode). Vous ne devez pas passer des données arbitraires à cette méthode.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteDocTypeAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant écrit un fichier XML représentant un livre.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
        <exception cref="T:System.ArgumentException">La valeur de <paramref name="name" /> produit un contenu XML non valide.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteDocTypeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteDocTypeAsync (string name, string pubid, string sysid, string subset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteDocTypeAsync (name As String, pubid As String, sysid As String, subset As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteDocTypeAsync(System::String ^ name, System::String ^ pubid, System::String ^ sysid, System::String ^ subset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="pubid" Type="System.String" />
        <Parameter Name="sysid" Type="System.String" />
        <Parameter Name="subset" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom de DOCTYPE. Ne doit pas être vide.</param>
        <param name="pubid">Si la valeur n’est pas Null, elle écrit également PUBLIC "pubid" "sysid", où <c>pubid</c> et <c>sysid</c> sont remplacés par la valeur des arguments spécifiés.</param>
        <param name="sysid">Si <c>pubid</c> est <see langword="null" /> et que <c>sysid</c> n’est pas Null, elle écrit SYSTEM "sysid", où <c>sysid</c> est remplacé par la valeur de cet argument.</param>
        <param name="subset">Si la valeur est non null, elle écrit [subset] où subset est remplacé par la valeur de cet argument.</param>
        <summary>Écrit de façon asynchrone la déclaration DOCTYPE avec le nom et les attributs facultatifs spécifiés.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteDocType" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteDocType%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteElementString">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
        <summary>Écrit un élément contenant une valeur de chaîne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="C#" Value="public void WriteElementString (string localName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string localName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteElementString (localName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteElementString(System::String ^ localName, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Le nom local de l'élément.</param>
        <param name="value">Valeur de l'élément.</param>
        <summary>Écrit un élément avec la valeur et le nom locaux spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant utilise plusieurs méthodes d’écriture pour créer un fragment XML.  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La valeur <paramref name="localName" /> est une chaîne vide ou est <see langword="null" />.  
  
 - ou -  
  
 Les valeurs du paramètre ne sont pas valides.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Un caractère dans la mémoire tampon est un caractère XML valide mais n'est pas valide pour l'encodage de sortie. Par exemple, si l'encodage de sortie est ASCII, vous devez utiliser uniquement des caractères de la plage de 0 à 127 pour les noms d'éléments et d'attributs. Le caractère non valide peut être dans l'argument de cette méthode ou dans un argument des méthodes précédentes qui écrivaient dans la mémoire tampon. Les caractères de ce type sont échappés par les références d'entité de caractère lorsque cela est possible (par exemple, dans les nœuds de texte ou les valeurs d'attribut). Toutefois, la référence d'entité de caractère n'est pas autorisée dans les noms d'éléments et d'attributs, les commentaires, les instructions de traitement ou les sections CDATA.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="C#" Value="public void WriteElementString (string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteElementString (localName As String, ns As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteElementString(System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Le nom local de l'élément.</param>
        <param name="ns">URI de l'espace de noms à associer à l'élément.</param>
        <param name="value">Valeur de l'élément.</param>
        <summary>Écrit un élément avec le nom local, l'URI de l'espace de noms et la valeur spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant utilise plusieurs méthodes d’écriture pour créer un fragment XML.  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La valeur <paramref name="localName" /> est une chaîne vide ou est <see langword="null" />.  
  
 - ou -  
  
 Les valeurs du paramètre ne sont pas valides.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Un caractère dans la mémoire tampon est un caractère XML valide mais n'est pas valide pour l'encodage de sortie. Par exemple, si l'encodage de sortie est ASCII, vous devez utiliser uniquement des caractères de la plage de 0 à 127 pour les noms d'éléments et d'attributs. Le caractère non valide peut être dans l'argument de cette méthode ou dans un argument des méthodes précédentes qui écrivaient dans la mémoire tampon. Les caractères de ce type sont échappés par les références d'entité de caractère lorsque cela est possible (par exemple, dans les nœuds de texte ou les valeurs d'attribut). Toutefois, la référence d'entité de caractère n'est pas autorisée dans les noms d'éléments et d'attributs, les commentaires, les instructions de traitement ou les sections CDATA.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="C#" Value="public void WriteElementString (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteElementString (prefix As String, localName As String, ns As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteElementString(System::String ^ prefix, System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Le préfixe de l'élément.</param>
        <param name="localName">Le nom local de l'élément.</param>
        <param name="ns">L'URI de l'espace de noms de l'élément.</param>
        <param name="value">Valeur de l'élément.</param>
        <summary>Écrit un élément avec le préfixe spécifié, le nom local, l'URI de l'espace de noms et la valeur spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La valeur <paramref name="localName" /> est une chaîne vide ou est <see langword="null" />.  
  
 - ou -  
  
 Les valeurs du paramètre ne sont pas valides.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Un caractère dans la mémoire tampon est un caractère XML valide mais n'est pas valide pour l'encodage de sortie. Par exemple, si l'encodage de sortie est ASCII, vous devez utiliser uniquement des caractères de la plage de 0 à 127 pour les noms d'éléments et d'attributs. Le caractère non valide peut être dans l'argument de cette méthode ou dans un argument des méthodes précédentes qui écrivaient dans la mémoire tampon. Les caractères de ce type sont échappés par les références d'entité de caractère lorsque cela est possible (par exemple, dans les nœuds de texte ou les valeurs d'attribut). Toutefois, la référence d'entité de caractère n'est pas autorisée dans les noms d'éléments et d'attributs, les commentaires, les instructions de traitement ou les sections CDATA.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteElementStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteElementStringAsync (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteElementStringAsync(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteElementStringAsync (prefix As String, localName As String, ns As String, value As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteElementStringAsync(System::String ^ prefix, System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlWriter/&lt;WriteElementStringAsync&gt;c__async6))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Le préfixe de l'élément.</param>
        <param name="localName">Le nom local de l'élément.</param>
        <param name="ns">L'URI de l'espace de noms de l'élément.</param>
        <param name="value">Valeur de l'élément.</param>
        <summary>Écrit de façon asynchrone un élément avec le préfixe spécifié, le nom local, l'URI de l'espace de noms et la valeur spécifiés.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteElementString" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteElementString%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndAttribute">
      <MemberSignature Language="C#" Value="public abstract void WriteEndAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndAttribute" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEndAttribute ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEndAttribute();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, ferme le précédent appel de <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous appelez `WriteStartAttribute`, vous pouvez fermer l’attribut avec cette méthode.  
  
 Vous pouvez également fermer l’attribut en appelant `WriteStartAttribute` à nouveau, <xref:System.Xml.XmlWriter.WriteAttributeString%2A>, ou en appelant <xref:System.Xml.XmlWriter.WriteEndElement%2A>.  
  
> [!NOTE]
>  Lorsque vous utilisez la <xref:System.Xml.XmlWriter> méthodes de sortie XML, les éléments et les attributs ne seront pas écrits jusqu'à ce que vous appeliez la <xref:System.Xml.XmlWriter.Close%2A> (méthode). Par exemple, si vous utilisez le XmlWriter pour remplir un <xref:System.Xml.XmlDocument>, jusqu'à ce que vous fermiez la <xref:System.Xml.XmlWriter>, vous ne pourrez pas observer les éléments et écrits attributs dans le document cible.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteEndAttributeAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndAttributeAsync">
      <MemberSignature Language="C#" Value="protected internal virtual System.Threading.Tasks.Task WriteEndAttributeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndAttributeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndAttributeAsync" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function WriteEndAttributeAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Threading::Tasks::Task ^ WriteEndAttributeAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ferme de façon asynchrone l'appel <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> précédent.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteEndAttribute" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteEndAttribute%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocument">
      <MemberSignature Language="C#" Value="public abstract void WriteEndDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndDocument" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEndDocument ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEndDocument();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, ferme les éléments ou attributs ouverts, et replace le writer à l'état Start.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Lorsque vous utilisez la <xref:System.Xml.XmlWriter> méthodes de sortie XML, les éléments et les attributs ne seront pas écrits jusqu'à ce que vous appeliez la <xref:System.Xml.XmlWriter.Close%2A> (méthode). Par exemple, si vous utilisez le XmlWriter pour remplir un <xref:System.Xml.XmlDocument>, jusqu'à ce que vous fermiez la <xref:System.Xml.XmlWriter>, vous ne pourrez pas observer les éléments et écrits attributs dans le document cible.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteEndDocumentAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant écrit un fichier XML représentant un livre.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le document XML n'est pas valide.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEndDocumentAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndDocumentAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndDocumentAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteEndDocumentAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteEndDocumentAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ferme de façon asynchrone les éléments ou attributs ouverts, et replace le writer à l'état Start.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteEndDocument" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteEndDocument%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndElement">
      <MemberSignature Language="C#" Value="public abstract void WriteEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndElement" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEndElement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEndElement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, ferme un élément et dépile la portée espace de noms correspondante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’élément ne contient aucun contenu, un court balise de fin » / > » est écrite ; Sinon, une balise de fin complète est écrite.  
  
> [!NOTE]
>  Lorsque vous utilisez la <xref:System.Xml.XmlWriter> méthodes de sortie XML, les éléments et les attributs ne seront pas écrits jusqu'à ce que vous appeliez la <xref:System.Xml.XmlWriter.Close%2A> (méthode). Par exemple, si vous utilisez le XmlWwriter pour remplir un <xref:System.Xml.XmlDocument>, jusqu'à ce que vous fermiez la <xref:System.Xml.XmlWriter>, vous ne pourrez pas observer les éléments et écrits attributs dans le document cible.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteEndElementAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.Xml.XmlWriter.WriteEndElement%2A> et <xref:System.Xml.XmlWriter.WriteFullEndElement%2A> méthodes.  
  
 [!code-csharp[XmlWriter.WriteFullEndElement#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteFullEndElement/CS/writerfullend_v2.cs#1)]
 [!code-vb[XmlWriter.WriteFullEndElement#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteFullEndElement/VB/writerfullend_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEndElementAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndElementAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndElementAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteEndElementAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteEndElementAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ferme de façon asynchrone un élément et exécute un pop sur la portée espace de noms correspondante.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteEndElement" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteEndElement%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityRef">
      <MemberSignature Language="C#" Value="public abstract void WriteEntityRef (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEntityRef(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEntityRef(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEntityRef (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEntityRef(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom de la référence d'entité.</param>
        <summary>En cas de substitution dans une classe dérivée, écrit une référence d'entité comme suit : <see langword="&amp;name;" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteEntityRefAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant écrit un fichier XML représentant un livre.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> a la valeur <see langword="null" /> ou <see langword="String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityRefAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEntityRefAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEntityRefAsync(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEntityRefAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteEntityRefAsync (name As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteEntityRefAsync(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom de la référence d'entité.</param>
        <summary>Écrit de façon asynchrone une référence d'entité comme suit : <see langword="&amp;name;" />.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteEntityRef" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteEntityRef%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteFullEndElement">
      <MemberSignature Language="C#" Value="public abstract void WriteFullEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFullEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteFullEndElement" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteFullEndElement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteFullEndElement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, ferme un élément et dépile la portée espace de noms correspondante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode écrit toujours la balise de fin complète. Cela est utile lorsque vous traitez des éléments qui doivent inclure une balise de fin complète. Par exemple, les navigateurs s’attendent des blocs de script HTML à fermer avec « \< /script > ».  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteFullEndElementAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.Xml.XmlWriter.WriteEndElement%2A> et <xref:System.Xml.XmlWriter.WriteFullEndElement%2A> méthodes.  
  
 [!code-csharp[XmlWriter.WriteFullEndElement#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteFullEndElement/CS/writerfullend_v2.cs#1)]
 [!code-vb[XmlWriter.WriteFullEndElement#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteFullEndElement/VB/writerfullend_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteFullEndElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteFullEndElementAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteFullEndElementAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteFullEndElementAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteFullEndElementAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteFullEndElementAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ferme de façon asynchrone un élément et exécute un pop sur la portée espace de noms correspondante.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteFullEndElement" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteFullEndElement%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteName">
      <MemberSignature Language="C#" Value="public virtual void WriteName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom à écrire.</param>
        <summary>En cas de remplacement dans une classe dérivée, écrit le nom spécifié, en vérifiant qu’il s’agit d’un nom valide conformément à la recommandation W3C pour le XML 1.0 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.Xml.XmlTextWriter.Namespaces%2A> a la valeur `true`, `WriteName` vérifie également que le nom est également valide selon les espaces de noms du W3C dans la recommandation XML.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteNameAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> n'est pas un nom XML valide ; ou <paramref name="name" /> est soit <see langword="null" />, soit <see langword="String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNameAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNameAsync(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNameAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteNameAsync (name As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteNameAsync(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom à écrire.</param>
        <summary>Écrit le nom spécifié de façon asynchrone, en vérifiant qu’il s’agit d’un nom valide conformément à la recommandation W3C pour le XML 1.0 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)).</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteName" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteName%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNmToken">
      <MemberSignature Language="C#" Value="public virtual void WriteNmToken (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNmToken(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNmToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteNmToken (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteNmToken(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom à écrire.</param>
        <summary>En cas de remplacement dans une classe dérivée, écrit le nom spécifié, en vérifiant qu’il s’agit d’un NmToken valide conformément à la recommandation W3C pour le XML 1.0 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteNmTokenAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> n'est pas un NmToken valide ; ou <paramref name="name" /> est soit <see langword="null" />, soit <see langword="String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNmTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNmTokenAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNmTokenAsync(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNmTokenAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteNmTokenAsync (name As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteNmTokenAsync(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom à écrire.</param>
        <summary>Écrit le nom spécifié de façon asynchrone, en vérifiant qu’il s’agit d’un NmToken valide conformément à la recommandation W3C pour le XML 1.0 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)).</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteNmToken" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteNmToken%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteNode">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
        <summary>Copie tout, de l'objet source vers l'instance de writer actuelle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteNodeAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteNode">
      <MemberSignature Language="C#" Value="public virtual void WriteNode (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNode(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteNode (reader As XmlReader, defattr As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteNode(System::Xml::XmlReader ^ reader, bool defattr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Xml.XmlReader" /> à lire.</param>
        <param name="defattr">
          <see langword="true" /> pour copier les attributs par défaut à partir de <see langword="XmlReader" /> ; sinon, <see langword="false" />.</param>
        <summary>En cas de substitution dans une classe dérivée, copie tout le contenu du lecteur vers le writer, puis déplace le lecteur vers le début du frère suivant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau suivant indique les types de nœuds pris en charge pour cette méthode.  
  
|NodeType|Comportement de WriteNode|  
|--------------|------------------------|  
|`None`|Écrit tous les nœuds, quel que soit le type. Autrement dit, le writer consomme la <xref:System.Xml.XmlReader> et écrit tous les nœuds lus, y compris des attributs, instructions de traitement, commentaires et ainsi de suite.<br /><br /> Cette situation se produit lorsque le <xref:System.Xml.XmlReader> est dans un état initial. (Le <xref:System.Xml.XmlReader.ReadState%2A?displayProperty=nameWithType> propriété renvoie `ReaderState.Initial`).|  
|`Element`|Écrit le nœud d’élément et tous les nœuds d’attribut.|  
|`Attribute`|Pas d'opération. Utilisez <xref:System.Xml.XmlWriter.WriteStartAttribute%2A> ou <xref:System.Xml.XmlWriter.WriteAttributeString%2A> à la place.|  
|`Text`|Écrit le nœud de texte.|  
|`CDATA`|Écrit le nœud de section CDATA.|  
|`EntityReference`|Écrit le nœud de référence d’entité.|  
|`ProcessingInstruction`|Écrit le nœud d’instruction de traitement.|  
|`Comment`|Écrit le nœud de commentaire.|  
|`DocumentType`|Écrit le nœud de type de document.|  
|`SignificantWhitespace`|Écrit le nœud d’espace blanc significatif.|  
|`Whitespace`|Écrit le nœud d’espace blanc.|  
|`EndElement`|Écrit la balise d’élément de fin.|  
|`EndEntity`|Pas d'opération.|  
|`XmlDeclaration`|Écrit le nœud de déclaration XML.|  
  
 Si le lecteur est dans l’état initial, cette méthode déplace le lecteur vers la fin du fichier. Si le lecteur est déjà à la fin du fichier ou dans un état fermé, cette méthode n’est pas opérationnelle.  
  
 Le code c# suivant copie un document d’entrée XML entier dans la console :  
  
```csharp  
XmlReader reader = XmlReader.Create(myfile);  
XmlWriter writer = XmlWriter.Create(Console.Out);  
writer.WriteNode(reader, false);  
```  
  
 Si vous avez déplacé du nœud racine et sont positionnés ailleurs dans le document de l’exemple c# suivant écrit correctement les nœuds.  
  
```csharp  
XmlReader reader = XmlReader.Create(myfile);  
reader.Read(); // Read PI  
reader.Read(); // Read Comment  
reader.Read(); // Read DOCType  
XmlWriter writer = XmlWriter.Create(Console.Out);  
while (!reader.EOF){  
  writer.WriteNode(reader, false);  
 }  
```  
  
 Si le lecteur est configuré pour retourner des espaces blancs et du writer ait est configuré pour mettre en retrait la sortie, `WriteNode` peut produire un résultat étrange. Vous obtiendrez essentiellement une double mise en forme.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteNodeAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant écrit des nœuds book et prénom dans la console.  
  
 [!code-cpp[XmlWriter.WriteNode#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteNode/CPP/writenode.cpp#1)]
 [!code-csharp[XmlWriter.WriteNode#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteNode/CS/writenode.cs#1)]
 [!code-vb[XmlWriter.WriteNode#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteNode/VB/writenode.vb#1)]  
  
 L’exemple utilise le fichier `books.xml`comme entrée.  
  
 [!code-xml[XmlWriter.WriteNode#2](~/samples/snippets/xml/VS_Snippets_Data/XmlWriter.WriteNode/XML/books.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="reader" /> contient des caractères non valides.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNode">
      <MemberSignature Language="C#" Value="public virtual void WriteNode (System.Xml.XPath.XPathNavigator navigator, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNode(class System.Xml.XPath.XPathNavigator navigator, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNode(System.Xml.XPath.XPathNavigator,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteNode (navigator As XPathNavigator, defattr As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteNode(System::Xml::XPath::XPathNavigator ^ navigator, bool defattr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigator" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="navigator">Le <see cref="T:System.Xml.XPath.XPathNavigator" /> à partir duquel effectuer la copie.</param>
        <param name="defattr">
          <see langword="true" /> pour copier les attributs par défaut ; sinon, <see langword="false" />.</param>
        <summary>Copie tout de l'objet <see cref="T:System.Xml.XPath.XPathNavigator" /> vers le writer. La position du <see cref="T:System.Xml.XPath.XPathNavigator" /> reste inchangée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau suivant présente la prise en charge `XPath` types de nœud pour cette méthode.  
  
|XPathNodeType|Comportement de WriteNode|  
|-------------------|------------------------|  
|`Root`|Écrit tous les nœuds, quel que soit le type. Autrement dit, le writer consomme la <xref:System.Xml.XPath.XPathNavigator> et écrit tous les nœuds à partir du nœud racine (y compris les attributs, les instructions de traitement, commentaires et ainsi de suite.)|  
|`Element`|Écrit le nœud d’élément et tous les nœuds d’attribut.|  
|`Attribute`|Pas d'opération. Utilisez <xref:System.Xml.XmlWriter.WriteStartAttribute%2A> ou <xref:System.Xml.XmlWriter.WriteAttributeString%2A> à la place.|  
|`Text`|Écrit le nœud de texte.|  
|`Namespace`|Pas d'opération. Utilisez le <xref:System.Xml.XmlWriter.WriteStartAttribute%2A> ou <xref:System.Xml.XmlWriter.WriteAttributeString%2A> méthode pour écrire la déclaration d’espace de noms.|  
|`ProcessingInstruction`|Écrit le nœud d’instruction de traitement.|  
|`Comment`|Écrit le nœud de commentaire.|  
|`SignificantWhitespace`|Écrit le nœud d’espace blanc significatif.|  
|`Whitespace`|Écrit le nœud d’espace blanc.|  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteNodeAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.Xml.XmlWriter.WriteNode%2A> méthode pour copier le premier nœud book à partir d’un document et l’écrire dans la console.  
  
 [!code-csharp[XmlWriteNode_nav#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriteNode_nav/CS/XmlWriteNode_nav.cs#1)]
 [!code-vb[XmlWriteNode_nav#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriteNode_nav/VB/XmlWriteNode_nav.vb#1)]  
  
 L’exemple utilise le fichier books.xml comme entrée.  
  
 [!code-xml[XPathXMLExamples#1](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/books.xml#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="navigator" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteNodeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
        <summary>Copie de façon asynchrone tout, de l'objet source vers l'instance de writer actuelle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteNode%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNodeAsync (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNodeAsync(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteNodeAsync (reader As XmlReader, defattr As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteNodeAsync(System::Xml::XmlReader ^ reader, bool defattr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Xml.XmlReader" /> à lire.</param>
        <param name="defattr">
          <see langword="true" /> pour copier les attributs par défaut à partir de <see langword="XmlReader" /> ; sinon, <see langword="false" />.</param>
        <summary>Copie de façon asynchrone tout le contenu du lecteur vers le writer, puis déplace le lecteur vers le début du frère suivant.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteNode" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteNode%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNodeAsync (System.Xml.XPath.XPathNavigator navigator, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNodeAsync(class System.Xml.XPath.XPathNavigator navigator, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XPath.XPathNavigator,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteNodeAsync (navigator As XPathNavigator, defattr As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteNodeAsync(System::Xml::XPath::XPathNavigator ^ navigator, bool defattr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlWriter/&lt;WriteNodeAsync&gt;c__async5))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigator" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="navigator">Le <see cref="T:System.Xml.XPath.XPathNavigator" /> à partir duquel effectuer la copie.</param>
        <param name="defattr">
          <see langword="true" /> pour copier les attributs par défaut ; sinon, <see langword="false" />.</param>
        <summary>Copie de façon asynchrone tout le contenu de l'objet <see cref="T:System.Xml.XPath.XPathNavigator" /> vers le writer. La position du <see cref="T:System.Xml.XPath.XPathNavigator" /> reste inchangée.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteNode" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteNode%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteProcessingInstruction">
      <MemberSignature Language="C#" Value="public abstract void WriteProcessingInstruction (string name, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteProcessingInstruction(string name, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteProcessingInstruction (name As String, text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteProcessingInstruction(System::String ^ name, System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom de l'instruction de traitement.</param>
        <param name="text">Texte à inclure dans l'instruction de traitement.</param>
        <summary>En cas de substitution dans une classe dérivée, écrit une instruction de traitement avec un espace entre le nom et le texte : &lt;?name text?&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode peut être utilisée pour écrire la déclaration XML (au lieu de <xref:System.Xml.XmlWriter.WriteStartDocument%2A>). Cela peut entraîner l’attribut d’encodage écriture incorrecte. Par exemple, le code c# suivant entraînerait un document XML non valide, car le codage par défaut est UTF-8.  
  
```csharp  
XmlWriter writer = XmlWriter.Create("output.xml");  
writer.WriteProcessingInstruction("xml", "version='1.0' encoding='UTF-16'");  
writer.WriteStartElement("root");  
writer.Close();  
```  
  
 Si `text` est `null` ou `String.Empty`, cette méthode écrit un `ProcessingInstruction` sans données de contenu, par exemple \<? nom ? >.  
  
 Si le texte contient une séquence non valide de « ? > », le <xref:System.Xml.XmlWriter> peut lever une <xref:System.ArgumentException> (<xref:System.Xml.XmlTextWriter> objets) ou insérer un espace » ? > » pour éviter d’écrire du code XML non valide (<xref:System.Xml.XmlWriter> les objets créés par la <xref:System.Xml.XmlWriter.Create%2A> méthode).  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteProcessingInstructionAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant écrit un fichier XML représentant un livre.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le texte est à l'origine d'un document XML incorrect.  
  
 <paramref name="name" /> a la valeur <see langword="null" /> ou <see langword="String.Empty" />.  
  
 Cette méthode permet de créer une déclaration XML après l'appel de <see cref="M:System.Xml.XmlWriter.WriteStartDocument" />.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteProcessingInstructionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteProcessingInstructionAsync (string name, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteProcessingInstructionAsync(string name, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteProcessingInstructionAsync (name As String, text As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteProcessingInstructionAsync(System::String ^ name, System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom de l'instruction de traitement.</param>
        <param name="text">Texte à inclure dans l'instruction de traitement.</param>
        <summary>Écrit de façon asynchrone une instruction de traitement avec un espace entre le nom et le texte, comme suit : &lt;?name text?&gt;.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteProcessingInstruction" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteQualifiedName">
      <MemberSignature Language="C#" Value="public virtual void WriteQualifiedName (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteQualifiedName(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteQualifiedName (localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteQualifiedName(System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nom local à écrire.</param>
        <param name="ns">URI d'espace de noms de ce nom.</param>
        <summary>En cas de substitution dans une classe dérivée, écrit le nom qualifié de l'espace de noms. Cette méthode recherche le préfixe situé dans la portée de l'espace de noms spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `ns` correspond à la valeur par défaut espace de noms actuel, aucun préfixe n’est généré.  
  
 Lorsque vous écrivez des valeurs d’attribut, cette méthode génère un préfixe si `ns` est introuvable. Lorsque vous écrivez le contenu de l’élément, elle lève une exception si `ns` est introuvable.  
  
> [!NOTE]
>  Si une classe dérivée de la <xref:System.Xml.XmlWriter> ne remplace pas cette méthode `localName` n’est pas vérifiée pour être un nom de W3C XML valide. Dans ce cas, avant d’appeler cette méthode, la validité de la chaîne peut être vérifiée par <xref:System.Xml.XmlReader.IsName%2A> (méthode).  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteQualifiedNameAsync%2A>.  
  
   
  
## Examples  
 L’exemple écrit l’élément suivant :  
  
```xml  
<root xmlns:x="urn:abc">  
  <item href="#x:test"/>  
</root>  
```  
  
 [!code-csharp[XmlWriter_v2#5](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#5)]
 [!code-vb[XmlWriter_v2#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="localName" /> a la valeur <see langword="null" /> ou <see langword="String.Empty" />.  
  
 <paramref name="localName" /> n'est pas un nom valide.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteQualifiedNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteQualifiedNameAsync (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteQualifiedNameAsync(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteQualifiedNameAsync (localName As String, ns As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteQualifiedNameAsync(System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlWriter/&lt;WriteQualifiedNameAsync&gt;c__async1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nom local à écrire.</param>
        <param name="ns">URI d'espace de noms de ce nom.</param>
        <summary>Écrit de façon asynchrone le nom qualifié de l'espace de noms. Cette méthode recherche le préfixe situé dans la portée de l'espace de noms spécifié.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteQualifiedName" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteQualifiedName%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRaw">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
        <summary>En cas de substitution dans une classe dérivée, écrit manuellement un balisage brut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteRawAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="C#" Value="public abstract void WriteRaw (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteRaw(string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRaw(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteRaw (data As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteRaw(System::String ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">Chaîne contenant le texte à écrire.</param>
        <summary>En cas de substitution dans une classe dérivée, écrit manuellement un balisage brut à partir d'une chaîne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’échappe pas les caractères spéciaux.  
  
> [!IMPORTANT]
>  Le <xref:System.Xml.XmlWriter> ne valide pas les données qui sont transmies à la <xref:System.Xml.XmlWriter.WriteRaw%2A> (méthode). Vous ne devez pas passer des données arbitraires à cette méthode.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteRawAsync%2A>.  
  
   
  
## Examples  
 Consultez <xref:System.Xml.XmlTextWriter.WriteRaw%2A?displayProperty=nameWithType> pour obtenir un exemple à l’aide de cette méthode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="data" /> a la valeur <see langword="null" /> ou <see langword="String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="C#" Value="public abstract void WriteRaw (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteRaw(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteRaw (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteRaw(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tableau de caractères contenant le texte à écrire.</param>
        <param name="index">Emplacement dans la mémoire tampon indiquant le début du texte à écrire.</param>
        <param name="count">Nombre de caractères à écrire.</param>
        <summary>En cas de substitution dans une classe dérivée, écrit manuellement un balisage brut à partir d'une mémoire tampon de caractères.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’échappe pas les caractères spéciaux.  
  
> [!IMPORTANT]
>  Le <xref:System.Xml.XmlWriter> ne valide pas les données qui sont transmies à la <xref:System.Xml.XmlWriter.WriteRaw%2A> (méthode). Vous ne devez pas passer des données arbitraires à cette méthode.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteRawAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> ou <paramref name="count" /> est inférieur à zéro.  
  
 - ou -  
  
 La longueur de la mémoire tampon moins <paramref name="index" /> est inférieure à <paramref name="count" />.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRawAsync">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
        <summary>Écrit manuellement de façon asynchrone un balisage brut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteRaw%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRawAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteRawAsync (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteRawAsync(string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRawAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteRawAsync (data As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteRawAsync(System::String ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">Chaîne contenant le texte à écrire.</param>
        <summary>Écrit de façon asynchrone un balisage brut à partir d'une chaîne.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteRaw" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteRaw%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRawAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteRawAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteRawAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteRawAsync (buffer As Char(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteRawAsync(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tableau de caractères contenant le texte à écrire.</param>
        <param name="index">Emplacement dans la mémoire tampon indiquant le début du texte à écrire.</param>
        <param name="count">Nombre de caractères à écrire.</param>
        <summary>Écrit manuellement de façon asynchrone un balisage brut à partir d'une mémoire tampon de caractères.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteRaw" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteRaw%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
        <summary>En cas de substitution dans une classe dérivée, écrit le début d'un attribut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public void WriteStartAttribute (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartAttribute(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartAttribute (localName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartAttribute(System::String ^ localName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Le nom local de l'attribut.</param>
        <summary>Écrit le début d'un attribut avec le nom local spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode vous permet d’écrire une valeur à l’aide de plusieurs méthodes d’écriture.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Un caractère dans la mémoire tampon est un caractère XML valide mais n'est pas valide pour l'encodage de sortie. Par exemple, si l'encodage de sortie est ASCII, vous devez utiliser uniquement des caractères de la plage de 0 à 127 pour les noms d'éléments et d'attributs. Le caractère non valide peut être dans l'argument de cette méthode ou dans un argument des méthodes précédentes qui écrivaient dans la mémoire tampon. Les caractères de ce type sont échappés par les références d'entité de caractère lorsque cela est possible (par exemple, dans les nœuds de texte ou les valeurs d'attribut). Toutefois, la référence d'entité de caractère n'est pas autorisée dans les noms d'éléments et d'attributs, les commentaires, les instructions de traitement ou les sections CDATA.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public void WriteStartAttribute (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartAttribute(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartAttribute (localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartAttribute(System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Le nom local de l'attribut.</param>
        <param name="ns">L'URI de l'espace de noms de l'attribut.</param>
        <summary>Écrit le début d'un attribut avec le nom local et l'URI de l'espace de noms spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il s’agit d’une version plus avancée de <xref:System.Xml.XmlWriter.WriteAttributeString%2A> qui vous permet d’écrire une valeur d’attribut à l’aide de plusieurs méthodes d’écriture, telles que <xref:System.Xml.XmlWriter.WriteString%2A>, <xref:System.Xml.XmlWriter.WriteQualifiedName%2A>, et ainsi de suite.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>.  
  
   
  
## Examples  
 Consultez <xref:System.Xml.XmlTextWriter.WriteStartAttribute%2A?displayProperty=nameWithType> pour obtenir un exemple à l’aide de cette méthode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.EncoderFallbackException">Un caractère dans la mémoire tampon est un caractère XML valide mais n'est pas valide pour l'encodage de sortie. Par exemple, si l'encodage de sortie est ASCII, vous devez utiliser uniquement des caractères de la plage de 0 à 127 pour les noms d'éléments et d'attributs. Le caractère non valide peut être dans l'argument de cette méthode ou dans un argument des méthodes précédentes qui écrivaient dans la mémoire tampon. Les caractères de ce type sont échappés par les références d'entité de caractère lorsque cela est possible (par exemple, dans les nœuds de texte ou les valeurs d'attribut). Toutefois, la référence d'entité de caractère n'est pas autorisée dans les noms d'éléments et d'attributs, les commentaires, les instructions de traitement ou les sections CDATA.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
        <altmember cref="M:System.Xml.XmlWriter.WriteEndAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public abstract void WriteStartAttribute (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartAttribute(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartAttribute (prefix As String, localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartAttribute(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Préfixe de l'espace de noms de cet attribut.</param>
        <param name="localName">Le nom local de l'attribut.</param>
        <param name="ns">URI d'espace de noms de cet attribut.</param>
        <summary>En cas de substitution dans une classe dérivée, écrit le début d'un attribut avec le préfixe, le nom local et l'URI de l'espace de noms spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode vous permet d’écrire une valeur à l’aide de plusieurs méthodes d’écriture.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.EncoderFallbackException">Un caractère dans la mémoire tampon est un caractère XML valide mais n'est pas valide pour l'encodage de sortie. Par exemple, si l'encodage de sortie est ASCII, vous devez utiliser uniquement des caractères de la plage de 0 à 127 pour les noms d'éléments et d'attributs. Le caractère non valide peut être dans l'argument de cette méthode ou dans un argument des méthodes précédentes qui écrivaient dans la mémoire tampon. Les caractères de ce type sont échappés par les références d'entité de caractère lorsque cela est possible (par exemple, dans les nœuds de texte ou les valeurs d'attribut). Toutefois, la référence d'entité de caractère n'est pas autorisée dans les noms d'éléments et d'attributs, les commentaires, les instructions de traitement ou les sections CDATA.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttributeAsync">
      <MemberSignature Language="C#" Value="protected internal virtual System.Threading.Tasks.Task WriteStartAttributeAsync (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartAttributeAsync(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function WriteStartAttributeAsync (prefix As String, localName As String, ns As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStartAttributeAsync(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Préfixe de l'espace de noms de cet attribut.</param>
        <param name="localName">Le nom local de l'attribut.</param>
        <param name="ns">URI d'espace de noms de cet attribut.</param>
        <summary>Écrit de façon asynchrone le début d'un attribut avec le préfixe, le nom local et l'URI de l'espace de noms spécifiés.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteStartAttribute" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteStartAttribute%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartDocument">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
        <summary>En cas de substitution dans une classe dérivée, écrit la déclaration XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteStartDocumentAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public abstract void WriteStartDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocument" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartDocument ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartDocument();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, écrit la déclaration XML avec la version "1.0".</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le niveau d’encodage du document est déterminé par le mode d’implémentation du writer. Par exemple, si un <xref:System.Text.Encoding> objet est spécifié dans le `XmlTextWriter` constructeur, ce paramètre détermine la valeur de l’attribut d’encodage. Cette méthode ne crée pas d’attribut autonome.  
  
 Lorsque `WriteStartDocument` est appelé le writer valide que vous écrivez est un document XML bien formé. Par exemple, il vérifie que la déclaration XML est le premier nœud, que l’un et qu’un seul élément de niveau racine existe et ainsi de suite. Si cette méthode n’est pas appelée, le writer suppose qu’un fragment XML est écrit et n’applique aucune règle de niveau racine.  
  
 Si `WriteStartDocument` a été appelée, puis la <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A> méthode est utilisée pour créer une autre déclaration XML, une exception sera levée.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteStartDocumentAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public abstract void WriteStartDocument (bool standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartDocument(bool standalone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartDocument (standalone As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartDocument(bool standalone);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="standalone" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="standalone">Si la valeur est <see langword="true" />, elle écrit "standalone=yes"; si la valeur est <see langword="false" />, elle écrit "standalone=no".</param>
        <summary>En cas de substitution dans une classe dérivée, écrit la déclaration XML avec la version "1.0" et l'attribut autonome.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le niveau d’encodage du document est déterminé par le mode d’implémentation du writer. Par exemple, si un <xref:System.Text.Encoding> objet est spécifié dans le `XmlTextWriter` constructeur, ce paramètre détermine la valeur de l’attribut d’encodage.  
  
 Lorsque `WriteStartDocument` est appelé, le writer valide que vous écrivez est un document XML bien formé. Par exemple, il vérifie que la déclaration XML est le premier nœud, que l’un et qu’un seul élément de niveau racine existe et ainsi de suite. Si cette méthode n’est pas appelée, le writer suppose qu’un fragment XML est écrit et n’applique aucune règle de niveau racine.  
  
 Si `WriteStartDocument` a été appelée, puis la <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A> méthode est utilisée pour créer une autre déclaration XML, une exception sera levée.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteStartDocumentAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartDocumentAsync">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
        <summary>Écrit de façon asynchrone la déclaration XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteStartDocument%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartDocumentAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartDocumentAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocumentAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteStartDocumentAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStartDocumentAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Écrit de façon asynchrone la déclaration XML avec la version « 1.0 ».</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteStartDocument" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteStartDocument%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartDocumentAsync (bool standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartDocumentAsync(bool standalone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteStartDocumentAsync (standalone As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStartDocumentAsync(bool standalone);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="standalone" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="standalone">Si la valeur est <see langword="true" />, elle écrit "standalone=yes"; si la valeur est <see langword="false" />, elle écrit "standalone=no".</param>
        <summary>Écrit de façon asynchrone la déclaration XML avec la version « 1.0 » et l'attribut autonome.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteStartDocument" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteStartDocument%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
        <summary>En cas de substitution dans une classe dérivée, écrit l’étiquette de début spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public void WriteStartElement (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartElement(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartElement (localName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartElement(System::String ^ localName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Le nom local de l'élément.</param>
        <summary>En cas de substitution dans une classe dérivée, écrit une étiquette de début avec le nom local spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant écrit un nœud XML.  
  
 [!code-cpp[XmlWriter.Close#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Close/CPP/XmlWriter.Close.cpp#1)]
 [!code-csharp[XmlWriter.Close#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Close/CS/writeelems.cs#1)]
 [!code-vb[XmlWriter.Close#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Close/VB/writeelems.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Un caractère dans la mémoire tampon est un caractère XML valide mais n'est pas valide pour l'encodage de sortie. Par exemple, si l'encodage de sortie est ASCII, vous devez utiliser uniquement des caractères de la plage de 0 à 127 pour les noms d'éléments et d'attributs. Le caractère non valide peut être dans l'argument de cette méthode ou dans un argument des méthodes précédentes qui écrivaient dans la mémoire tampon. Les caractères de ce type sont échappés par les références d'entité de caractère lorsque cela est possible (par exemple, dans les nœuds de texte ou les valeurs d'attribut). Toutefois, la référence d'entité de caractère n'est pas autorisée dans les noms d'éléments et d'attributs, les commentaires, les instructions de traitement ou les sections CDATA.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public void WriteStartElement (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartElement(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartElement (localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartElement(System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Le nom local de l'élément.</param>
        <param name="ns">URI de l'espace de noms à associer à l'élément. Si cet espace de noms est déjà dans la portée et qu'il possède un préfixe associé, le writer écrit automatiquement ce préfixe également.</param>
        <summary>En cas de substitution dans une classe dérivée, écrit l’étiquette de début spécifiée et l’associe à l’espace de noms indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Après avoir appelé cette méthode, vous pouvez écrire des attributs, ou créer de contenu à l’aide de <xref:System.Xml.XmlWriter.WriteComment%2A>, <xref:System.Xml.XmlWriter.WriteString%2A>, ou `WriteStartElement` pour les éléments enfants. Vous pouvez fermer l’élément avec l’option <xref:System.Xml.XmlWriter.WriteEndElement%2A> ou <xref:System.Xml.XmlWriter.WriteFullEndElement%2A>. Par exemple, le code c# suivant :  
  
```csharp  
writer.WriteStartElement("item",null);  
writer.WriteString("some text");  
writer.WriteEndElement();  
```  
  
 Génère la sortie suivante :  
  
```xml  
<item>some text</item>  
```  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Un caractère dans la mémoire tampon est un caractère XML valide mais n'est pas valide pour l'encodage de sortie. Par exemple, si l'encodage de sortie est ASCII, vous devez utiliser uniquement des caractères de la plage de 0 à 127 pour les noms d'éléments et d'attributs. Le caractère non valide peut être dans l'argument de cette méthode ou dans un argument des méthodes précédentes qui écrivaient dans la mémoire tampon. Les caractères de ce type sont échappés par les références d'entité de caractère lorsque cela est possible (par exemple, dans les nœuds de texte ou les valeurs d'attribut). Toutefois, la référence d'entité de caractère n'est pas autorisée dans les noms d'éléments et d'attributs, les commentaires, les instructions de traitement ou les sections CDATA.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public abstract void WriteStartElement (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartElement(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartElement (prefix As String, localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartElement(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Préfixe d'espace de noms de cet élément.</param>
        <param name="localName">Le nom local de l'élément.</param>
        <param name="ns">URI de l'espace de noms à associer à l'élément.</param>
        <summary>En cas de substitution dans une classe dérivée, écrit l’étiquette de début spécifiée, puis l’associe à l’espace de noms et au préfixe indiqués.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant écrit un fragment XML.  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Un caractère dans la mémoire tampon est un caractère XML valide mais n'est pas valide pour l'encodage de sortie. Par exemple, si l'encodage de sortie est ASCII, vous devez utiliser uniquement des caractères de la plage de 0 à 127 pour les noms d'éléments et d'attributs. Le caractère non valide peut être dans l'argument de cette méthode ou dans un argument des méthodes précédentes qui écrivaient dans la mémoire tampon. Les caractères de ce type sont échappés par les références d'entité de caractère lorsque cela est possible (par exemple, dans les nœuds de texte ou les valeurs d'attribut). Toutefois, la référence d'entité de caractère n'est pas autorisée dans les noms d'éléments et d'attributs, les commentaires, les instructions de traitement ou les sections CDATA.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartElementAsync (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartElementAsync(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteStartElementAsync (prefix As String, localName As String, ns As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStartElementAsync(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Préfixe d'espace de noms de cet élément.</param>
        <param name="localName">Le nom local de l'élément.</param>
        <param name="ns">URI de l'espace de noms à associer à l'élément.</param>
        <summary>Écrit de façon asynchrone l’étiquette de début indiquée et l’associe à l’espace de noms et au préfixe spécifiés.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteStartElement" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteStartElement%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteState">
      <MemberSignature Language="C#" Value="public abstract System.Xml.WriteState WriteState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.WriteState WriteState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.WriteState" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property WriteState As WriteState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xml::WriteState WriteState { System::Xml::WriteState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.WriteState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, obtient l'état du writer.</summary>
        <value>Une des valeurs de <see cref="T:System.Xml.WriteState" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public abstract void WriteString (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteString(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteString (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteString(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Texte à écrire.</param>
        <summary>En cas de substitution dans une classe dérivée, écrit le texte spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteString` effectue les actions suivantes :  
  
-   Les caractères `&`, `<`, et `>` sont remplacées par `&amp;`, `&lt;`, et `&gt;`, respectivement.  
  
-   Le comportement par défaut d’un <xref:System.Xml.XmlWriter> créé à l’aide de <xref:System.Xml.XmlWriter.Create%2A> consiste à lever une <xref:System.ArgumentException> lorsque vous tentez d’écrire des valeurs de caractère dans la plage 0 de x-0x1F (à l’exclusion des espaces blancs 0 x 9, 0xA et 0xD). Ces caractères XML non valides peuvent être écrits en créant le <xref:System.Xml.XmlWriter> avec la <xref:System.Xml.XmlWriterSettings.CheckCharacters%2A> propriété `false`. Cette action entraîne les caractères remplacés par des entités de caractères numériques (&\#0 ; et & #0x1F). En outre, un <xref:System.Xml.XmlTextWriter> créé avec le `new` opérateur remplace les caractères non valides par des entités de caractère numérique par défaut.  
  
 **Remarque** Microsoft déconseille la pratique de l’écriture de caractères XML non valides dans la mesure où de nombreuses applications qui consomment du XML ne sont pas conçues pour gérer des caractères non valides.  
  
-   Si `WriteString` est appelée dans le contexte d’une valeur d’attribut, les guillemets doubles et simples sont remplacées par `&quot;` et `&apos;` respectivement.  
  
 Par exemple, cette chaîne d’entrée `test<item>test` est écrit en tant que  
  
```  
test&lt;item&gt;test  
```  
  
 Si `text` est `null` ou `String.Empty`, cette méthode écrit un nœud de texte ne contenant aucune donnée.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteStringAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant écrit un nœud XML.  
  
 [!code-cpp[XmlWriter.Close#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Close/CPP/XmlWriter.Close.cpp#1)]
 [!code-csharp[XmlWriter.Close#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Close/CS/writeelems.cs#1)]
 [!code-vb[XmlWriter.Close#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Close/VB/writeelems.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La chaîne de texte contient une paire de substitution non valide.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStringAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStringAsync(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStringAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteStringAsync (text As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStringAsync(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Texte à écrire.</param>
        <summary>Écrit de façon asynchrone le texte spécifié.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteString" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteString%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSurrogateCharEntity">
      <MemberSignature Language="C#" Value="public abstract void WriteSurrogateCharEntity (char lowChar, char highChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteSurrogateCharEntity(char lowChar, char highChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteSurrogateCharEntity (lowChar As Char, highChar As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteSurrogateCharEntity(char lowChar, char highChar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowChar" Type="System.Char" />
        <Parameter Name="highChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="lowChar">Substitut faible. Il doit s'agir d'une valeur comprise entre 0xDC00 et 0xDFFF.</param>
        <param name="highChar">Substitut étendu. Il doit s'agir d'une valeur comprise entre 0xD800 et 0xDBFF.</param>
        <summary>En cas de substitution dans une classe dérivée, génère et écrit l'entité de caractère de substitution correspondant à la paire de caractères de substitution.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est uniquement applicable sur les systèmes qui utilisent l’encodage UTF-16.  
  
 L’entité de caractère de substitution est écrite au format hexadécimal. La plage de caractères de substitution est #x 10000 à #x10FFFF. La formule suivante permet de générer l’entité de caractère de substitution : (`highChar` -0xD800) * 0 x 400 + (`lowChar` -0xDC00) + 0 x 10000  
  
 HTML et XML, le jeu de caractères du document (et par conséquent la notation des caractères numériques) sont basés sur UCS [ISO 10646]. Une référence de caractère numérique dans un document source peut parfois correspondre à deux unités de 16 bits dans une chaîne (un substitut étendu et un substitut faible). Ces unités de 16 bits sont appelées une paire de substitution.  
  
 Pour plus d’informations sur les substituts ou les caractères, reportez-vous à la section 3.7 de l’Unicode 3.0/Unicode 2.0 standard situé http://www.unicode.org, ou de la section 2.2 de la recommandation W3C XML 1.0 situé à http://www.w3.org/TR/REC-xml#charsets.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Une paire de caractères de substitution non valide est passée.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSurrogateCharEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteSurrogateCharEntityAsync (char lowChar, char highChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteSurrogateCharEntityAsync(char lowChar, char highChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteSurrogateCharEntityAsync (lowChar As Char, highChar As Char) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteSurrogateCharEntityAsync(char lowChar, char highChar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowChar" Type="System.Char" />
        <Parameter Name="highChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="lowChar">Substitut faible. Il doit s'agir d'une valeur comprise entre 0xDC00 et 0xDFFF.</param>
        <param name="highChar">Substitut étendu. Il doit s'agir d'une valeur comprise entre 0xD800 et 0xDBFF.</param>
        <summary>Génère de façon asynchrone et écrit l'entité de caractère de substitution correspondant à la paire de caractères de substitution.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteSurrogateCharEntity" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteSurrogateCharEntity%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteValue">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
        <summary>Écrit une seule valeur typée simple.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Xml.XmlWriter.WriteValue%2A> méthode accepte les valeurs de type simple du common language runtime (CLR), les convertit en leurs représentations sous forme de chaîne selon les règles conversion de type de données XML schema definition langage (XSD XML) et les écrit à l’aide de la <xref:System.Xml.XmlWriter.WriteString%2A> méthode. Cela vous permet de canaliser avec minimale analyse surcharge lors du passage des données entre des valeurs de type simple en <xref:System.Xml.XPath.XPathDocument>, <xref:System.Xml.XmlReader>, et <xref:System.Xml.XmlWriter> objets. Cette capacité est également utile lorsque vous traitez des types CLR simples et une <xref:System.Xml.XmlWriter> instance. Vous pouvez appeler la <xref:System.Xml.XmlWriter.WriteValue%2A> méthode pour écrire la valeur typée au lieu d’utiliser les méthodes dans la <xref:System.Xml.XmlConvert> classe afin de convertir les données typées en une valeur de chaîne avant de l’écrire.  
  
 Pour les opérations asynchrones, convertir la valeur de retour de <xref:System.Xml.XmlWriter.WriteValue%2A> dans une chaîne, l’utilisation du <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (méthode).  
  
 Le tableau suivant montre la valeur par défaut des types de données XSD qui correspondent aux types CLR.  
  
 Si l'objet CLR est un type de liste, comme <xref:System.Collections.IEnumerable>, <xref:System.Collections.IList> ou <xref:System.Collections.ICollection>, il est traité comme un tableau du type de valeur.  
  
|Type CLR|Type de données XSD par défaut|  
|--------------|---------------------------|  
|<xref:System.Boolean?displayProperty=nameWithType>|xsd:boolean|  
|<xref:System.Byte?displayProperty=nameWithType>**|xsd:integer|  
|Tableau <xref:System.Byte?displayProperty=nameWithType>|xsd:base64Binary|  
|<xref:System.Char?displayProperty=nameWithType>**|xsd:string|  
|<xref:System.DateTime?displayProperty=nameWithType>|xsd:dateTime|  
|<xref:System.Decimal?displayProperty=nameWithType>|xsd:decimal|  
|<xref:System.Double?displayProperty=nameWithType>|xsd:double|  
|<xref:System.Int16?displayProperty=nameWithType>**|xsd:integer|  
|<xref:System.Int32?displayProperty=nameWithType>|xsd:integer|  
|<xref:System.Int64?displayProperty=nameWithType>|xsd:integer|  
|<xref:System.Single?displayProperty=nameWithType>|xsd:float|  
|<xref:System.String?displayProperty=nameWithType>|xsd:string|  
|<xref:System.IO.TextReader?displayProperty=nameWithType>|xsd:string|  
|<xref:System.IO.BinaryReader?displayProperty=nameWithType>|xsd:base64Binary|  
  
 **Ces types ne sont pas conformes CLS. Ils n’ont pas correspondants <xref:System.Xml.XmlWriter.WriteValue%2A> méthodes.  
  
 Si la méthode <xref:System.Xml.XmlWriter.WriteValue%2A> est appelée plusieurs fois de suite, les valeurs ne sont pas délimitées par un espace. Vous devez appeler la méthode <xref:System.Xml.XmlWriter.WriteWhitespace%2A> entre les appels à la méthode <xref:System.Xml.XmlWriter.WriteValue%2A> pour insérer un espace blanc.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">La valeur <see cref="T:System.Boolean" /> à écrire.</param>
        <summary>Écrit une valeur <see cref="T:System.Boolean" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode prend l’objet common language runtime et convertit la valeur d’entrée pour le type de sortie souhaité à l’aide des règles de conversion de type de données du langage (XSD).  
  
 Lors d'un appel à la méthode <xref:System.Xml.XmlWriter.WriteValue%2A>, l'objet <xref:System.Xml.XmlWriter> convertit la valeur en une représentation de chaîne en fonction des règles de type de données XSD (XML Schema Definition) et l'écrit à l'aide de la méthode <xref:System.Xml.XmlWriter.WriteString%2A>.  
  
 Si la méthode <xref:System.Xml.XmlWriter.WriteValue%2A> est appelée plusieurs fois de suite, les valeurs ne sont pas délimitées par un espace. Vous devez appeler la méthode <xref:System.Xml.XmlWriter.WriteWhitespace%2A> entre les appels à la méthode <xref:System.Xml.XmlWriter.WriteValue%2A> pour insérer un espace blanc. Passez un type de tableau pour le <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> surcharge pour écrire un tableau de valeurs distinctes.  
  
 Si cette méthode est appelée sur une <xref:System.Xml.XmlWriter> texte uniquement, la valeur typée est sérialisée en texte en sortie de l’instance.  
  
 Pour les opérations asynchrones, convertir la valeur de retour de cette méthode en une chaîne et comment utiliser le <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Une valeur non valide a été spécifiée.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">La valeur <see cref="T:System.DateTime" /> à écrire.</param>
        <summary>Écrit une valeur <see cref="T:System.DateTime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode prend l’objet common language runtime et convertit la valeur d’entrée pour le type de sortie souhaité à l’aide des règles de conversion de type de données du langage (XSD).  
  
 Lors d'un appel à la méthode <xref:System.Xml.XmlWriter.WriteValue%2A>, l'objet <xref:System.Xml.XmlWriter> convertit la valeur en une représentation de chaîne en fonction des règles de type de données XSD (XML Schema Definition) et l'écrit à l'aide de la méthode <xref:System.Xml.XmlWriter.WriteString%2A>.  
  
 Si la méthode <xref:System.Xml.XmlWriter.WriteValue%2A> est appelée plusieurs fois de suite, les valeurs ne sont pas délimitées par un espace. Vous devez appeler la méthode <xref:System.Xml.XmlWriter.WriteWhitespace%2A> entre les appels à la méthode <xref:System.Xml.XmlWriter.WriteValue%2A> pour insérer un espace blanc. Passez un type de tableau pour le <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> surcharge pour écrire un tableau de valeurs distinctes.  
  
 Si cette méthode est appelée sur une <xref:System.Xml.XmlWriter> texte uniquement, la valeur typée est sérialisée en texte en sortie de l’instance.  
  
 Pour les opérations asynchrones, convertir la valeur de retour de cette méthode en une chaîne et comment utiliser le <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant écrit un nœud de livre à l’aide de données typées.  
  
 [!code-csharp[XmlWriter_v2#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#1)]
 [!code-vb[XmlWriter_v2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Une valeur non valide a été spécifiée.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(DateTimeOffset value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">La valeur <see cref="T:System.DateTimeOffset" /> à écrire.</param>
        <summary>Écrit une valeur <see cref="T:System.DateTimeOffset" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour les opérations asynchrones, convertir la valeur de retour de cette méthode en une chaîne et comment utiliser le <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">La valeur <see cref="T:System.Decimal" /> à écrire.</param>
        <summary>Écrit une valeur <see cref="T:System.Decimal" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode prend l’objet common language runtime et convertit la valeur d’entrée pour le type de sortie souhaité à l’aide des règles de conversion de type de données du langage (XSD).  
  
 Lors d'un appel à la méthode <xref:System.Xml.XmlWriter.WriteValue%2A>, l'objet <xref:System.Xml.XmlWriter> convertit la valeur en une représentation de chaîne en fonction des règles de type de données XSD (XML Schema Definition) et l'écrit à l'aide de la méthode <xref:System.Xml.XmlWriter.WriteString%2A>.  
  
 Si la méthode <xref:System.Xml.XmlWriter.WriteValue%2A> est appelée plusieurs fois de suite, les valeurs ne sont pas délimitées par un espace. Vous devez appeler la méthode <xref:System.Xml.XmlWriter.WriteWhitespace%2A> entre les appels à la méthode <xref:System.Xml.XmlWriter.WriteValue%2A> pour insérer un espace blanc. Passez un type de tableau pour le <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> surcharge pour écrire un tableau de valeurs distinctes.  
  
 Si cette méthode est appelée sur une <xref:System.Xml.XmlWriter> texte uniquement, la valeur typée est sérialisée en texte en sortie de l’instance.  
  
 Pour les opérations asynchrones, convertir la valeur de retour de cette méthode en une chaîne et comment utiliser le <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Une valeur non valide a été spécifiée.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">La valeur <see cref="T:System.Double" /> à écrire.</param>
        <summary>Écrit une valeur <see cref="T:System.Double" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode prend l’objet common language runtime et convertit la valeur d’entrée pour le type de sortie souhaité à l’aide des règles de conversion de type de données du langage (XSD).  
  
 Lors d'un appel à la méthode <xref:System.Xml.XmlWriter.WriteValue%2A>, l'objet <xref:System.Xml.XmlWriter> convertit la valeur en une représentation de chaîne en fonction des règles de type de données XSD (XML Schema Definition) et l'écrit à l'aide de la méthode <xref:System.Xml.XmlWriter.WriteString%2A>.  
  
 Si la méthode <xref:System.Xml.XmlWriter.WriteValue%2A> est appelée plusieurs fois de suite, les valeurs ne sont pas délimitées par un espace. Vous devez appeler la méthode <xref:System.Xml.XmlWriter.WriteWhitespace%2A> entre les appels à la méthode <xref:System.Xml.XmlWriter.WriteValue%2A> pour insérer un espace blanc. Passez un type de tableau pour le <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> surcharge pour écrire un tableau de valeurs distinctes.  
  
 Si cette méthode est appelée sur une <xref:System.Xml.XmlWriter> texte uniquement, la valeur typée est sérialisée en texte en sortie de l’instance.  
  
 Pour les opérations asynchrones, convertir la valeur de retour de cette méthode en une chaîne et comment utiliser le <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant écrit un nœud de livre à l’aide de données typées.  
  
 [!code-csharp[XmlWriter_v2#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#1)]
 [!code-vb[XmlWriter_v2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Une valeur non valide a été spécifiée.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">La valeur <see cref="T:System.Int32" /> à écrire.</param>
        <summary>Écrit une valeur <see cref="T:System.Int32" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode prend l’objet common language runtime et convertit la valeur d’entrée pour le type de sortie souhaité à l’aide des règles de conversion de type de données du langage (XSD).  
  
 Lors d'un appel à la méthode <xref:System.Xml.XmlWriter.WriteValue%2A>, l'objet <xref:System.Xml.XmlWriter> convertit la valeur en une représentation de chaîne en fonction des règles de type de données XSD (XML Schema Definition) et l'écrit à l'aide de la méthode <xref:System.Xml.XmlWriter.WriteString%2A>.  
  
 Si la méthode <xref:System.Xml.XmlWriter.WriteValue%2A> est appelée plusieurs fois de suite, les valeurs ne sont pas délimitées par un espace. Vous devez appeler la méthode <xref:System.Xml.XmlWriter.WriteWhitespace%2A> entre les appels à la méthode <xref:System.Xml.XmlWriter.WriteValue%2A> pour insérer un espace blanc. Passez un type de tableau pour le <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> surcharge pour écrire un tableau de valeurs distinctes.  
  
 Si cette méthode est appelée sur une <xref:System.Xml.XmlWriter> texte uniquement, la valeur typée est sérialisée en texte en sortie de l’instance.  
  
 Pour les opérations asynchrones, convertir la valeur de retour de cette méthode en une chaîne et comment utiliser le <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Une valeur non valide a été spécifiée.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">La valeur <see cref="T:System.Int64" /> à écrire.</param>
        <summary>Écrit une valeur <see cref="T:System.Int64" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode prend l’objet common language runtime et convertit la valeur d’entrée pour le type de sortie souhaité à l’aide des règles de conversion de type de données du langage (XSD).  
  
 Lors d'un appel à la méthode <xref:System.Xml.XmlWriter.WriteValue%2A>, l'objet <xref:System.Xml.XmlWriter> convertit la valeur en une représentation de chaîne en fonction des règles de type de données XSD (XML Schema Definition) et l'écrit à l'aide de la méthode <xref:System.Xml.XmlWriter.WriteString%2A>.  
  
 Si la méthode <xref:System.Xml.XmlWriter.WriteValue%2A> est appelée plusieurs fois de suite, les valeurs ne sont pas délimitées par un espace. Vous devez appeler la méthode <xref:System.Xml.XmlWriter.WriteWhitespace%2A> entre les appels à la méthode <xref:System.Xml.XmlWriter.WriteValue%2A> pour insérer un espace blanc. Passez un type de tableau pour le <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> surcharge pour écrire un tableau de valeurs distinctes.  
  
 Si cette méthode est appelée sur une <xref:System.Xml.XmlWriter> texte uniquement, la valeur typée est sérialisée en texte en sortie de l’instance.  
  
 Pour les opérations asynchrones, convertir la valeur de retour de cette méthode en une chaîne et comment utiliser le <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Une valeur non valide a été spécifiée.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Valeur de l'objet à écrire.  
  
 **Remarque** Avec le .NET Framework version 3.5, cette méthode accepte <see cref="T:System.DateTimeOffset" /> en tant que paramètre.</param>
        <summary>Écrit la valeur de l'objet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode prend l’objet du common language runtime (CLR) et convertit la valeur d’entrée pour le type de sortie souhaité à l’aide des règles de conversion de type de données du langage (XSD).  
  
 Si l’objet CLR est un type de liste tel que <xref:System.Collections.IEnumerable>, <xref:System.Collections.IList>, ou <xref:System.Collections.ICollection>, il est traité comme un tableau du type valeur. Le <xref:System.Xml.XmlWriter> convertit la valeur en ses représentations sous forme de chaîne en fonction du type de données de schéma XML (XSD) des règles et l’écrit à l’aide de la <xref:System.Xml.XmlWriter.WriteString%2A> (méthode).  
  
 Si cette méthode est appelée sur une <xref:System.Xml.XmlWriter> texte uniquement, la valeur typée est sérialisée en texte en sortie de l’instance.  
  
 Pour les opérations asynchrones, convertir la valeur de retour de cette méthode en une chaîne et comment utiliser le <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Une valeur non valide a été spécifiée.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Nombre à virgule flottante simple précision à écrire.</param>
        <summary>Écrit un nombre à virgule flottante simple précision.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode prend l’objet common language runtime et convertit la valeur d’entrée pour le type de sortie souhaité à l’aide des règles de conversion de type de données du langage (XSD).  
  
 Lors d'un appel à la méthode <xref:System.Xml.XmlWriter.WriteValue%2A>, l'objet <xref:System.Xml.XmlWriter> convertit la valeur en une représentation de chaîne en fonction des règles de type de données XSD (XML Schema Definition) et l'écrit à l'aide de la méthode <xref:System.Xml.XmlWriter.WriteString%2A>.  
  
 Si la méthode <xref:System.Xml.XmlWriter.WriteValue%2A> est appelée plusieurs fois de suite, les valeurs ne sont pas délimitées par un espace. Vous devez appeler la méthode <xref:System.Xml.XmlWriter.WriteWhitespace%2A> entre les appels à la méthode <xref:System.Xml.XmlWriter.WriteValue%2A> pour insérer un espace blanc. Passez un type de tableau pour le <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> surcharge pour écrire un tableau de valeurs distinctes.  
  
 Si cette méthode est appelée sur une <xref:System.Xml.XmlWriter> texte uniquement, la valeur typée est sérialisée en texte en sortie de l’instance.  
  
 Pour les opérations asynchrones, convertir la valeur de retour de cette méthode en une chaîne et comment utiliser le <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Une valeur non valide a été spécifiée.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">La valeur <see cref="T:System.String" /> à écrire.</param>
        <summary>Écrit une valeur <see cref="T:System.String" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode prend l’objet common language runtime et convertit la valeur d’entrée pour le type de sortie souhaité à l’aide des règles de conversion de type de données du langage (XSD).  
  
 Si la méthode <xref:System.Xml.XmlWriter.WriteValue%2A> est appelée plusieurs fois de suite, les valeurs ne sont pas délimitées par un espace. Vous devez appeler la méthode <xref:System.Xml.XmlWriter.WriteWhitespace%2A> entre les appels à la méthode <xref:System.Xml.XmlWriter.WriteValue%2A> pour insérer un espace blanc. Passez un type de tableau pour le <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> surcharge pour écrire un tableau de valeurs distinctes.  
  
 Si cette méthode est appelée sur une <xref:System.Xml.XmlWriter> texte uniquement, la valeur typée est sérialisée en texte en sortie de l’instance.  
  
 Pour les opérations asynchrones, utilisez la <xref:System.Xml.XmlWriter.WriteStringAsync%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Une valeur non valide a été spécifiée.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteWhitespace">
      <MemberSignature Language="C#" Value="public abstract void WriteWhitespace (string ws);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteWhitespace(string ws) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteWhitespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteWhitespace (ws As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteWhitespace(System::String ^ ws);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ws">Chaîne d'espaces blancs.</param>
        <summary>En cas de substitution dans une classe dérivée, écrit l'espace blanc spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est utilisée pour mettre en forme manuellement votre document.  
  
 Pour obtenir la version asynchrone de cette méthode, consultez <xref:System.Xml.XmlWriter.WriteWhitespaceAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La chaîne contient des caractères qui ne sont pas des espaces blancs.</exception>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteWhitespaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteWhitespaceAsync (string ws);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteWhitespaceAsync(string ws) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteWhitespaceAsync (ws As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteWhitespaceAsync(System::String ^ ws);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ws">Chaîne d'espaces blancs.</param>
        <summary>Écrit de façon asynchrone l'espace blanc spécifié.</summary>
        <returns>Tâche qui représente l'opération <see langword="WriteWhitespace" /> asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C’est la version asynchrone de <xref:System.Xml.XmlWriter.WriteWhitespace%2A>, avec la même fonctionnalité. Pour utiliser cette méthode, vous devez définir le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode asynchrone <see cref="T:System.Xml.XmlWriter" /> a été appelée sans définir l’indicateur <see cref="P:System.Xml.XmlWriterSettings.Async" /> sur <see langword="true" />. Dans ce cas, <see cref="T:System.InvalidOperationException" /> est levée avec le message « Attribuez à XmlReaderSettings.Async la valeur True si vous voulez utiliser des méthodes asynchrones ».</exception>
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public virtual string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.XmlLang" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property XmlLang As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XmlLang { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, obtient la portée <see langword="xml:lang" /> en cours.</summary>
        <value>Portée de <see langword="xml:lang" /> actuelle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété permet à un composant Rechercher de l’état dans lequel un autre composant a laissé le writer. Par exemple, peut-être un composant veut dire à quel texte d’aide de langage pour générer un autre. Les informations de langue sont communiquées en écrivant un `xml:lang` attribut.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.XmlSpace" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property XmlSpace As XmlSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlSpace XmlSpace { System::Xml::XmlSpace get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, obtient <see cref="T:System.Xml.XmlSpace" /> représentant la portée <see langword="xml:space" /> en cours.</summary>
        <value>Obtient un <see langword="XmlSpace" /> représentant la portée <see langword="xml:space" /> en cours.  
  
 <list type="table"><listheader><term> Valeur  
  
 </term><description> Signification  
  
 </description></listheader><item><term><see langword="None" /></term><description> Ceci est la valeur par défaut si aucune <see langword="xml:space" /> d’étendue existe.  
  
 </description></item><item><term><see langword="Default" /></term><description> La portée actuelle est <see langword="xml:space" />= « default ».  
  
 </description></item><item><term><see langword="Preserve" /></term><description> La portée actuelle est <see langword="xml:space" />= « preserve ».  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cela permet à un composant déterminer l’état dans lequel le writer a été laissé par un autre composant.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Une méthode <see cref="T:System.Xml.XmlWriter" /> a été appelée avant la fin d’une opération asynchrone précédente. Dans ce cas, l’exception <see cref="T:System.InvalidOperationException" /> est levée avec le message « Une opération asynchrone est déjà en cours ».</exception>
      </Docs>
    </Member>
  </Members>
</Type>