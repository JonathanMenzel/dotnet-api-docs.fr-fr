<Type Name="XmlWriterSettings" FullName="System.Xml.XmlWriterSettings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c1ef9295d175a11c7569df52006755a786c25f38" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39776235" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XmlWriterSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlWriterSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlWriterSettings" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlWriterSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterSettings sealed" />
  <TypeSignature Language="F#" Value="type XmlWriterSettings = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Spécifie un jeu de fonctionnalités à prendre en charge sur l'objet <see cref="T:System.Xml.XmlWriter" /> créé par la méthode <see cref="Overload:System.Xml.XmlWriter.Create" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Xml.XmlWriter.Create%2A> méthode est le mécanisme préféré d’obtention <xref:System.Xml.XmlWriter> instances. Le <xref:System.Xml.XmlWriter.Create%2A> méthode utilise le <xref:System.Xml.XmlWriterSettings> classe pour spécifier les fonctionnalités à implémenter dans le <xref:System.Xml.XmlWriter> objet qui est créé.  
  
> [!NOTE]
>  Si vous utilisez le <xref:System.Xml.XmlWriter> de l’objet avec le <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> (méthode), vous devez utiliser le <xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A> propriété pour obtenir un <xref:System.Xml.XmlWriterSettings> objet avec les paramètres corrects. Cela garantit que l'objet <xref:System.Xml.XmlWriter> créé dispose des paramètres de sortie corrects.  
  
 Le <xref:System.Xml.XmlWriterSettings> classe fournit des propriétés de ce format de données contrôle la conformité et de sortie.  
  
 Pour les vérifications de conformité des données et les corrections d’automatiques, utilisez ces propriétés :  
  
|Property|Informations fournies|Value|Par défaut|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|S’il faut vérifier que les caractères sont dans le code XML juridique caractères ensemble, comme défini par le W3C.|`true` ou `false`|`true`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|Indique s’il faut ou non vérifier que la sortie est un document XML 1.0 correctement construit ou un fragment.|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> (au niveau du document), <xref:System.Xml.ConformanceLevel.Fragment> (au niveau du fragment), ou <xref:System.Xml.ConformanceLevel.Auto> (détection automatique)|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> (conformité au niveau du document)|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|Si vous souhaitez ajouter des balises de fermeture à tous les éléments non fermés lorsque la <xref:System.Xml.XmlWriter.Close%2A> méthode est appelée.|`true` ou `false`|`true`|  
  
 Pour spécifier le format de sortie, utilisez ces propriétés :  
  
|Property|Informations fournies|Value|Par défaut|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|Encodage de texte à utiliser.|Valeur <xref:System.Text.Encoding?displayProperty=nameWithType>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|S’il faut mettre en retrait des éléments|`true` ou `false`|`false` (aucune mise en retrait)|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Chaîne à utiliser lors de la mise en retrait de caractères (utilisée lorsque <xref:System.Xml.XmlWriterSettings.Indent%2A> est défini sur `true`).|Chaîne|Deux espaces|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|Chaîne de caractères à utiliser pour les sauts de ligne.|Chaîne|`\r\n` (retour chariot, saut de ligne)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|Comment gérer les caractères de saut de ligne.|<xref:System.Xml.NewLineHandling?displayProperty=nameWithType> valeur : <xref:System.Xml.NewLineHandling.Entitize> (normaliser), <xref:System.Xml.NewLineHandling.Replace> (remplacer), ou <xref:System.Xml.NewLineHandling.None> (laissez inchangée)|<xref:System.Xml.NewLineHandling.Replace> (Remplacez par les caractères spécifiés par <xref:System.Xml.XmlWriterSettings.NewLineChars%2A>)|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|S’il faut écrire des attributs sur des lignes (n’a aucun effet lorsque <xref:System.Xml.XmlWriterSettings.Indent%2A> est `false`).|`true` ou `false`|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|Indique s’il faut ou non écrire une déclaration XML.|`true` ou `false`|`false`|  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Xml.XmlWriter> qui écrit dans un fichier XML et écrit chaque attribut sur une nouvelle ligne.  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 L’exemple génère la sortie suivante :  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xml.XmlWriterSettings" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau suivant montre les valeurs initiales des propriétés d’une instance de <xref:System.Xml.XmlWriterSettings>.  
  
|Property|Valeur initiale|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`.|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Deux espaces.|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (retour chariot, nouvelle ligne).|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>.|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`.|  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Xml.XmlWriter> objet qui utilise le caractère de tabulation pour la mise en retrait.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Async { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Async : bool with get, set" Usage="System.Xml.XmlWriterSettings.Async" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si les méthodes <see cref="T:System.Xml.XmlWriter" /> asynchrones peuvent être utilisées sur une instance <see cref="T:System.Xml.XmlWriter" /> particulière.</summary>
        <value>
          <see langword="true" /> si des méthodes asynchrones peuvent être utilisées ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous devez définir cette valeur sur `true` lorsque vous créez un nouveau <xref:System.Xml.XmlWriter> de l’instance si vous souhaitez utiliser asynchrone <xref:System.Xml.XmlWriter> méthodes sur cette instance. Après le <xref:System.Xml.XmlWriter> instance est créée, le <xref:System.Xml.XmlWriterSettings.Async%2A> propriété est en lecture seule. La valeur par défaut de cette propriété est `false`.  
  
 Cet indicateur est ignoré par le <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> de surcharge. Cela signifie que si vous créez un nouveau <xref:System.Xml.XmlWriter> basé sur un <xref:System.Xml.XmlWriter>, le comportement asynchrone dépend de l’entrée <xref:System.Xml.XmlWriter>, et vous ne pouvez pas utiliser le <xref:System.Xml.XmlWriterSettings.Async%2A> indicateur pour modifier le comportement asynchrone.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckCharacters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckCharacters { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckCharacters : bool with get, set" Usage="System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si le writer XML doit vérifier que tous les caractères du document sont conformes à la section « 2.2 Characters » de la recommandation W3C sur [XML 1.0](https://www.w3.org/TR/REC-xml/#charsets).</summary>
        <value>
          <see langword="true" /> pour assurer la vérification des caractères ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Xml.XmlWriter> objet prend en charge la vérification des caractères, elle lève une exception si tous les caractères sont en dehors de la plage de caractères XML légaux, spécifié par le W3C, la section « 2.2 Characters » [XML 1.0 Recommendation](https://www.w3.org/TR/REC-xml/#charsets).  
  
 La vérification des caractères n’inclut pas la vérification des caractères non autorisés dans les noms XML ou la vérification que tous les noms XML sont valides. Ces vérifications font partie de la vérification de conformité et sont toujours effectuées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlWriterSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlWriterSettings ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Xml.XmlWriterSettings" Usage="xmlWriterSettings.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée une copie de l'instance <see cref="T:System.Xml.XmlWriterSettings" />.</summary>
        <returns>Objet <see cref="T:System.Xml.XmlWriterSettings" /> cloné.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cloné <xref:System.Xml.XmlWriterSettings> objet peut être modifié sans affecter les paramètres sur l’objet d’origine.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseOutput">
      <MemberSignature Language="C#" Value="public bool CloseOutput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseOutput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseOutput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseOutput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CloseOutput : bool with get, set" Usage="System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si <see cref="T:System.Xml.XmlWriter" /> doit également fermer le flux sous-jacent ou <see cref="T:System.IO.TextWriter" /> lorsque la méthode <see cref="M:System.Xml.XmlWriter.Close" /> est appelée.</summary>
        <value>
          <see langword="true" /> pour également fermer le flux sous-jacent ou <see cref="T:System.IO.TextWriter" /> ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce paramètre est utile lorsque vous souhaitez écrire du code XML dans un flux, puis ajouter des informations supplémentaires à la fin du flux de données après la <xref:System.Xml.XmlWriter> a fini d’écrire.  
  
 Cette propriété s’applique uniquement aux <xref:System.Xml.XmlWriter> instances XML de sortie de contenu dans un flux ou <xref:System.IO.TextWriter>; sinon, ce paramètre est ignoré.  
  
   
  
## Examples  
 L’exemple suivant écrit un fragment XML dans un flux de mémoire.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ConformanceLevel As ConformanceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ConformanceLevel ConformanceLevel { System::Xml::ConformanceLevel get(); void set(System::Xml::ConformanceLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ConformanceLevel : System.Xml.ConformanceLevel with get, set" Usage="System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le niveau de conformité de vérification de sortie XML du writer XML.</summary>
        <value>Une des valeurs d'énumération qui spécifie le niveau de conformité (document, fragment ou détection automatique). La valeur par défaut est <see cref="F:System.Xml.ConformanceLevel.Document" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A?displayProperty=nameWithType> propriété configure l’enregistreur XML pour vérifier et garantir que le flux qui est écrit respecte un certain ensemble de règles. Les données XML peuvent être vérifiées pour voir qu’il est conforme aux règles d’un document XML 1.0 correctement construit ou un fragment de document. Le tableau suivant décrit les trois paramètres. La valeur par défaut est la conformité au niveau du document.  
  
|Paramètre|Description |  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|Garantit que la sortie XML est conforme à la [règles d’un document XML 1.0 correctement construit](https://www.w3.org/TR/REC-xml/#sec-well-formed) et peuvent être traitées par tout processeur conforme.<br /><br /> Les vérifications de la conformité du document incluent la plupart des contrôles au niveau du fragment et vérifiez également les points suivants :<br /><br /> -L’élément de niveau supérieur n’a pas d’autres nœuds que la déclaration XML, DTD, élément, commentaire, espace blanc ou instruction de traitement.<br />-Les données XML ont un seul et unique nœud d’élément de niveau supérieur.<br /><br /> L’enregistreur XML n’analyse pas les informations DTD écrites. L’utilisateur est tenu de vous assurer que la DTD est correctement construite.|  
|<xref:System.Xml.ConformanceLevel.Fragment>|Garantit que la sortie XML est conforme à la [règles pour un fragment de document XML 1.0 correctement construit](https://www.w3.org/TR/REC-xml/#wf-entities).<br /><br /> Ce paramètre accepte les données XML qui a plusieurs éléments racines ou nœuds de texte au niveau supérieur. Ce niveau de vérification assure que tout processeur peut utiliser le flux en lecture comme une entité externe XML 1.0 analysée.<br /><br /> Informations DTD n’est pas autorisées dans les fragments de document.|  
|<xref:System.Xml.ConformanceLevel.Auto>|Spécifie que le writer XML doit déterminer le niveau de vérification de conformité en fonction des données entrantes. Ce paramètre peut être utile lorsque vous ne savez pas si le code XML généré sera un document XML bien formé ou un fragment.<br /><br /> Le contrôle de conformité du document s'applique dans les cas suivants :<br /><br /> -If le <xref:System.Xml.XmlWriter.WriteStartDocument%2A> méthode est appelée.<br />-Si les informations DTD sont écrites.<br /><br /> Vérification de la conformité de fragment est appliquée si les données XML contiennent un d’eux :<br /><br /> -Nœud text, CDATA ou EntityReference au niveau racine.<br />-Plusieurs éléments au niveau racine.<br />-Aucun élément au niveau racine.<br /><br /> Un objet <xref:System.Xml.XmlException> est levé en cas de conflit, par exemple vous tentez d'écrire un nœud de texte ou une DTD au niveau de la racine.<br /><br /> Si vous encapsulez un autre <xref:System.Xml.XmlWriter> objet, l’objet externe n’effectue aucune vérification de conformité supplémentaire ; en revanche, l’objet sous-jacent.|  
  
 Si l’enregistreur XML détecte toutes les informations qui violent le niveau spécifié de conformité, il lève une exception. Dans certains cas, l’enregistreur XML corrige automatiquement l’erreur de conformité. Par exemple, le writer ferme un attribut ouvert sans lever d’exception. Le tableau suivant montre comment divers violations de conformité sont gérées dans chaque paramètre.  
  
|Condition|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|Informations de DTD sont trouvées.|Pas de violation pour ce paramètre. Toutefois, l’enregistreur XML ne vérifie pas la DTD ; l’utilisateur doit s’assurer que la DTD est correctement construite.|<xref:System.Xml.XmlException> est levée.|Vérification de conformité du document est appliquée.|  
|La méthode <xref:System.Xml.XmlWriter.WriteStartDocument%2A> est appelée.|Pas considéré comme une violation pour ce paramètre.|<xref:System.Xml.XmlException> est levée.|Vérification de conformité du document est appliquée.|  
|<xref:System.Xml.XmlWriter.WriteStartDocument%2A> est appelé plusieurs fois.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|  
|Une valeur de texte apparaît au niveau supérieur (pas sous un nœud d’élément ou attribut).|<xref:System.Xml.XmlException> est levée.|Pas considéré comme une violation.|La vérification de conformité de fragment est appliquée.|  
|Plusieurs éléments ou aucun élément ne s’affichent au niveau supérieur.|<xref:System.Xml.XmlException> est levée.|Pas considéré comme une violation.|La vérification de conformité de fragment est appliquée.|  
|Élément de niveau supérieur est un espace blanc.|Pas considéré comme une violation.|Pas considéré comme une violation.|Pas considéré comme une violation.|  
|<xref:System.Xml.XmlWriter.WriteEndAttribute%2A> n’est pas appelée pour mettre fin à un nœud d’attribut.|Résolu par l’enregistreur XML.|Résolu par l’enregistreur XML.|Résolu par l’enregistreur XML.|  
|L’enregistreur XML est dans un état mal imbriqué (par exemple, un <xref:System.Xml.XmlWriter.WriteStartElement%2A> appel est suivi par un <xref:System.Xml.XmlWriter.WriteEndAttribute%2A>).|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|  
|Élément de niveau supérieur est un attribut.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|  
|Plusieurs nœuds de texte contigus sont détectés.|Pas considéré comme une violation, mais il incombe à l’utilisateur pour concaténer les nœuds de texte.|Pas considéré comme une violation, mais il incombe à l’utilisateur pour concaténer les nœuds de texte.|Pas considéré comme une violation, mais il incombe à l’utilisateur pour concaténer les nœuds de texte.|  
|Le même préfixe d'espace de noms est déclaré deux fois dans un élément.|L’enregistreur XML génère un nouveau préfixe pour le deuxième espace de noms.|L’enregistreur XML génère un nouveau préfixe pour le deuxième espace de noms.|L’enregistreur XML génère un nouveau préfixe pour le deuxième espace de noms.|  
|<xref:System.Xml.XmlWriter.WriteStartElement%2A> Spécifie un préfixe et un espace de noms qui n’est pas déclaré dans cette étendue, ou le préfixe est associé à un espace de noms différent.|L’enregistreur XML écrit le nœud d’espace de noms nécessaire.|L’enregistreur XML écrit le nœud d’espace de noms nécessaire.|L’enregistreur XML écrit le nœud d’espace de noms nécessaire.|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> Spécifie un préfixe et un espace de noms qui n’est pas déclaré dans cette étendue.|L’enregistreur XML écrit le nœud d’espace de noms nécessaire.|L’enregistreur XML écrit le nœud d’espace de noms nécessaire.|L’enregistreur XML écrit le nœud d’espace de noms nécessaire.|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> Spécifie un préfixe et un espace de noms, mais le préfixe est associé à un autre espace de noms dans la portée.|L’enregistreur XML ignore le préfixe spécifié et recherche le préfixe correct ou génère un nouveau préfixe.|L’enregistreur XML ignore le préfixe spécifié et recherche le préfixe correct ou génère un nouveau préfixe.|L’enregistreur XML ignore le préfixe spécifié et recherche le préfixe correct ou génère un nouveau préfixe.|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A> est utilisé pour écrire le contenu de l’élément à l’aide d’un espace de noms qui n’existe pas dans l’étendue.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A> est utilisé pour écrire le contenu de l’attribut à l’aide d’un espace de noms qui n’existe pas dans l’étendue.|L’enregistreur XML écrit la déclaration d’espace de noms nécessaire.|L’enregistreur XML écrit la déclaration d’espace de noms nécessaire.|L’enregistreur XML écrit la déclaration d’espace de noms nécessaire.|  
|Le `xml:space` attribut ne contient pas une valeur valide.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|  
|Un nom non valide est détecté.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|  
|Le `xml` préfixe n’est pas mis en correspondance avec un URI.|L’enregistreur XML ne vérifie pas ce type de violation.|L’enregistreur XML ne vérifie pas ce type de violation.|L’enregistreur XML ne vérifie pas ce type de violation.|  
|Le `xml` préfixe n’est pas mis en correspondance avec la http://www.w3.org/XML/1998/namespace URI.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|  
|Le `xmlns` préfixe ou le nom local n’est pas mis en correspondance avec un URI.|L’enregistreur XML ne vérifie pas ce type de violation.|L’enregistreur XML ne vérifie pas ce type de violation.|L’enregistreur XML ne vérifie pas ce type de violation.|  
|Le `xmlns` préfixe ou le nom local n’est pas mis en correspondance avec la http://www.w3.org/2000/xmlns URI.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|<xref:System.Xml.XmlException> est levée.|  
  
   
  
## Examples  
 L’exemple suivant écrit un fragment XML dans un flux de mémoire.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNotEscapeUriAttributes">
      <MemberSignature Language="C#" Value="public bool DoNotEscapeUriAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoNotEscapeUriAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property DoNotEscapeUriAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DoNotEscapeUriAttributes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DoNotEscapeUriAttributes : bool with get, set" Usage="System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si le <see cref="T:System.Xml.XmlWriter" /> ne place pas les attributs d'URI dans des séquences d’échappement.</summary>
        <value>
          <see langword="true" /> Si le <see cref="T:System.Xml.XmlWriter" /> n’échappe pas les attributs d’URI ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="System.Xml.XmlWriterSettings.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le type d'encodage de texte à utiliser.</summary>
        <value>Encodage de texte à utiliser. La valeur par défaut est <see langword="Encoding.UTF8" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Xml.XmlWriter> encode une mémoire tampon de caractères à la fois, plutôt que caractère par caractère. Une exception est levée lorsque le <xref:System.Xml.XmlWriter.Flush%2A> méthode est appelée si des erreurs d’encodage se produisent.  
  
 Le <xref:System.Xml.XmlWriterSettings.Encoding%2A> propriété s’applique uniquement à la <xref:System.Xml.XmlWriter> instances sont créées avec la valeur <xref:System.IO.Stream> ou avec le nom de fichier spécifié. Si le <xref:System.Xml.XmlWriter> instance est créée avec la valeur <xref:System.IO.TextWriter>, le <xref:System.Xml.XmlWriterSettings.Encoding%2A> propriété est remplacée par l’encodage de sous-jacent <xref:System.IO.TextWriter>. Par exemple, si cette propriété est définie au format Unicode (UTF-16) pour un particulier <xref:System.Xml.XmlWriter>, mais le writer sous-jacent est un <xref:System.IO.StreamWriter> (qui dérive à son <xref:System.IO.TextWriter>) avec son encodage défini sur UTF-8, la sortie sera encodé en UTF-8.  
  
 Si le <xref:System.Xml.XmlWriter> instance est créée avec les autres paramètres de sortie, le <xref:System.Xml.XmlWriterSettings.Encoding%2A> propriété est ignorée.  
  
 Dans l’exemple suivant :  
  
-   La valeur par défaut de <xref:System.Xml.XmlWriterSettings.Encoding%2A> est `Encoding.UTF8`.  
  
-   Le <xref:System.IO.StreamWriter> a la valeur `Encoding.Unicode` et le <xref:System.IO.StreamWriter>remplacements d’encodage de le <xref:System.Xml.XmlWriterSettings.Encoding%2A> paramètre.  
  
-   La sortie sera `Encoding.Unicode`.  
  
```csharp  
using (StreamWriter output =  
    new StreamWriter(new FileStream("Xml01.xml", FileMode.Create), Encoding.Unicode))  
{  
    using (XmlWriter xmlWriter =  
        XmlWriter.Create(output, new XmlWriterSettings()))  
    {  
        xmlWriter.WriteStartDocument();  
        xmlWriter.WriteStartElement("Root");  
        xmlWriter.WriteEndElement();  
        xmlWriter.WriteEndDocument();  
    }  
}  
```  
  
> [!IMPORTANT]
>  Ne pas accepter un <xref:System.Text.Encoding> objet à partir d’une source non fiable.  
  
   
  
## Examples  
 L’exemple suivant écrit un fragment XML dans un flux de mémoire.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public bool Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Indent : bool with get, set" Usage="System.Xml.XmlWriterSettings.Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si les éléments doivent être mis en retrait.</summary>
        <value>
          <see langword="true" /> pour écrire des éléments individuels sur de nouvelles lignes et les mettre en retrait ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété s’applique uniquement aux <xref:System.Xml.XmlWriter> instances qui sortir le contenu de texte ; Sinon, ce paramètre est ignoré.  
  
 Les éléments sont mis en retrait tant que l’élément ne contient pas de contenu mixte. Une fois le <xref:System.Xml.XmlWriter.WriteString%2A> ou <xref:System.Xml.XmlWriter.WriteWhitespace%2A> méthode est appelée pour écrire un contenu d’élément mixte, le <xref:System.Xml.XmlWriter> arrête la mise en retrait. La mise en retrait reprend une fois que l’élément de contenu mixte est fermé.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Xml.XmlWriter> objet qui utilise le caractère de tabulation pour la mise en retrait.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndentChars">
      <MemberSignature Language="C#" Value="public string IndentChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IndentChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.IndentChars" />
      <MemberSignature Language="VB.NET" Value="Public Property IndentChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IndentChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IndentChars : string with get, set" Usage="System.Xml.XmlWriterSettings.IndentChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne de caractères à utiliser au moment de la mise en retrait. Ce paramètre est utilisé lorsque la propriété <see cref="P:System.Xml.XmlWriterSettings.Indent" /> a la valeur <see langword="true" />.</summary>
        <value>Chaîne de caractères à utiliser au moment de la mise en retrait. Elle peut avoir n'importe quelle valeur de chaîne. Toutefois, pour garantir la validité du XML, vous devez spécifier uniquement des caractères d'espace blanc valides, tels que les espaces, les tabulations, les retours chariot ou les sauts de ligne. Par défaut, il s'agit de deux espaces.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété s’applique uniquement aux <xref:System.Xml.XmlWriter> instances qui sortir le contenu de texte ; Sinon, ce paramètre est ignoré. Le <xref:System.Xml.XmlWriter> lève une exception si les caractères de mise en retrait a pour résultat XML non valide.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Xml.XmlWriter> objet qui utilise le caractère de tabulation pour la mise en retrait.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La valeur assignée à <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="NamespaceHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NamespaceHandling NamespaceHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NamespaceHandling NamespaceHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NamespaceHandling As NamespaceHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NamespaceHandling NamespaceHandling { System::Xml::NamespaceHandling get(); void set(System::Xml::NamespaceHandling value); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceHandling : System.Xml.NamespaceHandling with get, set" Usage="System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.NamespaceHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si <see cref="T:System.Xml.XmlWriter" /> doit supprimer des déclarations d'espace de noms en double lors de l'écriture du contenu XML. Le comportement par défaut consiste pour le writer à générer la sortie de toutes les déclarations d'espace de noms qui sont présentes dans le programme de résolution d'espace de noms du writer.</summary>
        <value>L'énumération <see cref="T:System.Xml.NamespaceHandling" /> utilisée pour spécifier s'il faut supprimer les déclarations d'espace de noms en double dans le <see cref="T:System.Xml.XmlWriter" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineChars">
      <MemberSignature Language="C#" Value="public string NewLineChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLineChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NewLineChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineChars : string with get, set" Usage="System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne de caractères à utiliser pour les sauts de ligne.</summary>
        <value>Chaîne de caractères à utiliser pour les sauts de ligne. Elle peut avoir n'importe quelle valeur de chaîne. Toutefois, pour garantir la validité du XML, vous devez spécifier uniquement des caractères d'espace blanc valides, tels que les espaces, les tabulations, les retours chariot ou les sauts de ligne. La valeur par défaut est <c>\r\n</c> (retour chariot, nouvelle ligne).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété s’applique uniquement aux <xref:System.Xml.XmlWriter> instances qui sortir le contenu de texte ; Sinon, ce paramètre est ignoré. Le <xref:System.Xml.XmlWriter> lève une exception si les caractères de saut de ligne a pour résultat XML non valide.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La valeur assignée à <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="NewLineHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NewLineHandling NewLineHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NewLineHandling NewLineHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineHandling As NewLineHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NewLineHandling NewLineHandling { System::Xml::NewLineHandling get(); void set(System::Xml::NewLineHandling value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineHandling : System.Xml.NewLineHandling with get, set" Usage="System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.NewLineHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant s'il convient de normaliser des sauts de ligne dans la sortie.</summary>
        <value>Une des valeurs de <see cref="T:System.Xml.NewLineHandling" />. La valeur par défaut est <see cref="F:System.Xml.NewLineHandling.Replace" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce paramètre s’applique lors de l’écriture des valeurs d’attribut ou le contenu de texte. Chacun de la <xref:System.Xml.NewLineHandling> valeurs est décrit ci-dessous :  
  
-   Le <xref:System.Xml.NewLineHandling.Entitize> paramètre indique à la <xref:System.Xml.XmlWriter> pour remplacer les caractères de nouvelle ligne qui ne seraient pas autrement conservés par une normalisation <xref:System.Xml.XmlReader> avec les entités de caractères. Cela est utile dans les scénarios d’aller-retour où la sortie est lue par une normalisation <xref:System.Xml.XmlReader>. Règles de normalisation supplémentaires s’appliquent aux valeurs d’attribut lors d’un aller-retour depuis `\t`, `\n` et `\r` sont remplacés par un espace dans les valeurs d’attribut lors de la normalisation dans un <xref:System.Xml.XmlReader>.  
  
-   Le <xref:System.Xml.NewLineHandling.Replace> paramètre indique à la <xref:System.Xml.XmlWriter> pour remplacer des caractères de nouvelle ligne avec `\r\n`, qui est le nouveau format de ligne utilisé par le système d’exploitation Microsoft Windows. Cela permet de garantir que le fichier peut être affiché correctement par les applications bloc-notes ou Microsoft Word. Ce paramètre remplace également les nouvelles lignes dans les attributs avec des entités de caractères pour conserver les caractères. Valeur par défaut.  
  
-   Le <xref:System.Xml.NewLineHandling.None> paramètre indique le <xref:System.Xml.XmlWriter> pour laisser l’entrée inchangée. Ce paramètre est utilisé lorsque vous ne souhaitez pas que tout traitement de la nouvelle ligne. Cela est utile lorsque la sortie est lue par un <xref:System.Xml.XmlReader> qui n’effectue aucune normalisation (par exemple, un <xref:System.Xml.XmlTextReader> avec les paramètres par défaut.)  
  
 Les tableaux suivants illustrent la sortie de la <xref:System.Xml.XmlWriter.WriteString%2A> méthode lorsqu’elle est fournie avec la valeur d’entrée en fonction de la <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A> paramètre de propriété. Les tableaux indiquent la sortie lors de l’écriture du contenu de texte et également lors de l’écriture d’une valeur d’attribut.  
  
 `Text Node Value:`  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|Décomposez en entités|& #D ; \n|\n|&AMP; #D ;|\t|  
|Remplacer|\r\n|\r\n|\r\n|\t|  
|Aucun.|\r\n|\n|\r|\t|  
  
 `Attribute Value:`  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|Décomposez en entités|&AMP; #D ; &AMP; #A ;|&AMP; #A ;|&AMP; #D ;|&\#9;|  
|Remplacer|&AMP; #D ; &AMP; #A ;|&AMP; #A ;|&AMP; #D ;|&\#9;|  
|Aucun.|\r\n|\n|\r|\t|  
  
> [!NOTE]
>  Le <xref:System.Xml.XmlWriter> a le comportement suivant lors de l’écriture du contenu dans une section CDATA, un commentaire ou une instruction de traitement. Nouvelles lignes ne sont jamais remplacées par leurs entités de caractères, même lorsque le <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A> propriété est définie sur <xref:System.Xml.NewLineHandling.Entitize>. Il s’agit, car les entités de caractères ne sont pas reconnues dans les sections CDATA, des commentaires ou des instructions de traitement. Si le <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A> propriété est définie sur <xref:System.Xml.NewLineHandling.None> ou <xref:System.Xml.NewLineHandling.Replace>, le comportement est le même que lors de l’écriture d’une valeur de nœud de texte.  
  
 Le tableau suivant décrit les une normalisation <xref:System.Xml.XmlReader> retourne pour chaque entrée d’espace blanc. Pour plus d’informations, consultez les sections 2.11 et 3.3.3 de la W3C [XML 1.0 Recommendation](https://www.w3.org/TR/REC-xml/).  
  
> [!NOTE]
>  Un lecteur normalisant est tout <xref:System.Xml.XmlReader> objet créé par le <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> (méthode). Ces objets effectuent toujours la normalisation de saut de ligne et de normalisation complète d’attributs. Le <xref:System.Xml.XmlTextReader> objet peut également être un lecteur normalisant s’il s’agit <xref:System.Xml.XmlTextReader.Normalization%2A> propriété est définie sur `true`.  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|Valeur de nœud de texte|\n|\n|\n|\t|  
|Valeur d'attribut|espace unique|espace unique|espace unique|espace unique|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineOnAttributes">
      <MemberSignature Language="C#" Value="public bool NewLineOnAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NewLineOnAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineOnAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NewLineOnAttributes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineOnAttributes : bool with get, set" Usage="System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant s'il convient d'écrire des attributs sur une nouvelle ligne.</summary>
        <value>
          <see langword="true" /> pour écrire des attributs sur des lignes ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.  
  
 <block subset="none" type="note"><para> Ce paramètre n’a aucun effet lorsque la <see cref="P:System.Xml.XmlWriterSettings.Indent" /> valeur de propriété est <see langword="false" />.  </para></block>  
  
Lorsque <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> a la valeur <see langword="true" />, chaque attribut est ajouté avec une nouvelle ligne et un niveau supplémentaire de mise en retrait.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété s’applique uniquement aux <xref:System.Xml.XmlWriter> instances qui sortir le contenu de texte ; Sinon, ce paramètre est ignoré.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Xml.XmlWriter> qui écrit dans un fichier XML et écrit chaque attribut sur une nouvelle ligne.  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 L’exemple génère la sortie suivante :  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OmitXmlDeclaration">
      <MemberSignature Language="C#" Value="public bool OmitXmlDeclaration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OmitXmlDeclaration" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberSignature Language="VB.NET" Value="Public Property OmitXmlDeclaration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OmitXmlDeclaration { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OmitXmlDeclaration : bool with get, set" Usage="System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si une déclaration XML doit être omise.</summary>
        <value>
          <see langword="true" /> pour omettre la déclaration XML ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />, une déclaration XML est écrite.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété s’applique uniquement aux <xref:System.Xml.XmlWriter> instances qui sortir le contenu de texte ; Sinon, ce paramètre est ignoré.  
  
 Si <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A> est défini sur `false`, la déclaration XML est écrite automatiquement  
  
 La déclaration XML est toujours écrite si <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> a la valeur <xref:System.Xml.ConformanceLevel.Document>, même si <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A> est défini sur `true`.  
  
 La déclaration XML n’est jamais écrite si <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> est défini sur <xref:System.Xml.ConformanceLevel.Fragment>. Vous pouvez appeler <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A> pour écrire explicitement une déclaration XML.  
  
   
  
## Examples  
 L’exemple suivant écrit un fragment XML dans un flux de mémoire.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputMethod">
      <MemberSignature Language="C#" Value="public System.Xml.XmlOutputMethod OutputMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlOutputMethod OutputMethod" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputMethod As XmlOutputMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlOutputMethod OutputMethod { System::Xml::XmlOutputMethod get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputMethod : System.Xml.XmlOutputMethod" Usage="System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlOutputMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la méthode utilisée pour sérialiser la sortie <see cref="T:System.Xml.XmlWriter" />.</summary>
        <value>Une des valeurs de <see cref="T:System.Xml.XmlOutputMethod" />. La valeur par défaut est <see cref="F:System.Xml.XmlOutputMethod.Xml" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété spécifie la méthode utilisée pour sérialiser la sortie. La sortie peut être sérialisée à l’aide des règles de HTML, les règles XML 1.0 et ainsi de suite. Ce paramètre est défini par le processeur XSLT et est utilisé en interne par Visual Studio.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="xmlWriterSettings.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Réinitialise les membres de la classe de paramètres à leurs valeurs par défaut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau suivant affiche la valeur par défaut des valeurs de propriété d’une instance de <xref:System.Xml.XmlWriterSettings>.  
  
|Property|Valeur initiale|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`.|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Deux espaces.|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n`.|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>.|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocumentOnClose">
      <MemberSignature Language="C#" Value="public bool WriteEndDocumentOnClose { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WriteEndDocumentOnClose" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberSignature Language="VB.NET" Value="Public Property WriteEndDocumentOnClose As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WriteEndDocumentOnClose { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WriteEndDocumentOnClose : bool with get, set" Usage="System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si <see cref="T:System.Xml.XmlWriter" /> ajoutera des indicateurs de fermeture à tous les indicateurs d'éléments non fermés lorsque la méthode <see cref="M:System.Xml.XmlWriter.Close" /> est appelée.</summary>
        <value>
          <see langword="true" /> si toutes les balises d'élément non fermées seront fermées ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous définissez cet indicateur sur `false`, le fichier XML de sortie n’est peut-être pas bien formé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>