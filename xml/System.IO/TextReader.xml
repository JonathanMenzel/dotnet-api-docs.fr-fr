<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TextReader.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c6862423f98168f7a3dfd8baa4b6dabc6629b49d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6862423f98168f7a3dfd8baa4b6dabc6629b49d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.TextReader">
          <source>Represents a reader that can read a sequential series of characters.</source>
          <target state="translated">Représente un lecteur capable de lire une série séquentielle de caractères.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> is the abstract base class of <ph id="ph2">&lt;xref:System.IO.StreamReader&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.StringReader&gt;</ph>, which read characters from streams and strings, respectively.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> est la classe de base abstraite de <ph id="ph2">&lt;xref:System.IO.StreamReader&gt;</ph> et <ph id="ph3">&lt;xref:System.IO.StringReader&gt;</ph>, qui lit les caractères à partir de flux et les chaînes, respectivement.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>Use these derived classes to open a text file for reading a specified range of characters, or to create a reader based on an existing stream.</source>
          <target state="translated">Utilisez ces classes dérivées pour ouvrir un fichier texte pour la lecture d’une plage de caractères spécifiée ou pour créer un lecteur basé sur un flux existant.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Ce type implémente le <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>When you have finished using any type that derives from this type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Lorsque vous avez terminé à l’aide de n’importe quel type qui dérive de ce type, vous devez la supprimer directement ou indirectement.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Pour supprimer le type directement, vous devez appeler sa <ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph> méthode dans un <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Pour la supprimer indirectement, utiliser une construction de langage telles que <ph id="ph1">`using`</ph> (en c#) ou <ph id="ph2">`Using`</ph> (en Visual Basic).</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>For more information, see Dispose and the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Pour plus d’informations, consultez Suppression et la section « Utilisant un objet qui implémente IDisposable » dans la <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> rubrique de l’interface.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> est une classe abstraite.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>Therefore, you do not instantiate it in your code.</source>
          <target state="translated">Par conséquent, vous n’instanciez pas il dans votre code.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>The <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> class derives from <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph> and provides implementations of the members for reading from a stream.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> dérive de la classe <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph> et fournit des implémentations des membres pour la lecture à partir d’un flux de données.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>The following example shows how to read all the characters in a file by using the <ph id="ph1">&lt;xref:System.IO.StreamReader.ReadAsync%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">L’exemple suivant montre comment lire tous les caractères dans un fichier à l’aide de la <ph id="ph1">&lt;xref:System.IO.StreamReader.ReadAsync%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>It checks whether each character is a letter, digit, or white space before adding the character to an instance of the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class.</source>
          <target state="translated">Il vérifie si chaque caractère est une lettre, un chiffre ou un espace blanc avant d’ajouter le caractère à une instance de la <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.TextReader">
          <source>A derived class must minimally implement the <ph id="ph1">&lt;see cref="M:System.IO.TextReader.Peek" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.IO.TextReader.Read" /&gt;</ph> methods to make a useful instance of <ph id="ph3">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</source>
          <target state="translated">Une classe dérivée doit au moins implémenter la <ph id="ph1">&lt;see cref="M:System.IO.TextReader.Peek" /&gt;</ph> et <ph id="ph2">&lt;see cref="M:System.IO.TextReader.Read" /&gt;</ph> méthodes pour créer une instance utile de <ph id="ph3">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.#ctor">
          <source>Use this constructor for derived classes.</source>
          <target state="translated">Utilisez ce constructeur pour les classes dérivées.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Close">
          <source>Closes the <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> and releases any system resources associated with the <ph id="ph2">&lt;see langword="TextReader" /&gt;</ph>.</source>
          <target state="translated">Ferme le <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> et libère toutes les ressources système associées au <ph id="ph2">&lt;see langword="TextReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Close">
          <source>This implementation of <ph id="ph1">`Close`</ph> calls the <ph id="ph2">&lt;xref:System.IO.StringReader.Dispose%28System.Boolean%29?displayProperty=nameWithType&gt;</ph> method and passes it a <ph id="ph3">`true`</ph> value.</source>
          <target state="translated">Cette implémentation de <ph id="ph1">`Close`</ph> appelle la <ph id="ph2">&lt;xref:System.IO.StringReader.Dispose%28System.Boolean%29?displayProperty=nameWithType&gt;</ph> méthode et passe un <ph id="ph3">`true`</ph> valeur.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Close">
          <source>Flushing the text reader will not flush its underlying encoder unless you explicitly call <ph id="ph1">`Close`</ph>.</source>
          <target state="translated">Le vidage du lecteur de texte n’effacera pas son encodeur sous-jacent sauf si vous appelez explicitement <ph id="ph1">`Close`</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Close">
          <source>Setting the <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType&gt;</ph> property to <ph id="ph2">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</source>
          <target state="translated">Définition de la <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType&gt;</ph> propriété <ph id="ph2">`true`</ph> signifie que les données sont supprimées de la mémoire tampon dans le flux, mais l’état de l’encodeur n’est pas vidé.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Close">
          <source>This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</source>
          <target state="translated">Cela permet à l’encodeur de conserver son état (caractères partiels) afin qu’il peut encoder correctement le bloc suivant de caractères.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Close">
          <source>This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.</source>
          <target state="translated">Ce scénario affecte UTF8 et UTF7 où certains caractères peuvent être codés uniquement après que l’encodeur a reçu les caractères adjacents.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Close">
          <source>In derived classes, do not override the <ph id="ph1">&lt;xref:System.IO.TextReader.Close%2A&gt;</ph> method.</source>
          <target state="translated">Dans les classes dérivées, ne substituez pas la <ph id="ph1">&lt;xref:System.IO.TextReader.Close%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Close">
          <source>Instead, override the <ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%28System.Boolean%29?displayProperty=nameWithType&gt;</ph> method to add code for releasing resources.</source>
          <target state="translated">Au lieu de cela, remplacez le <ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%28System.Boolean%29?displayProperty=nameWithType&gt;</ph> méthode pour ajouter du code pour libérer des ressources.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="T:System.IO.TextReader">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> object.</source>
          <target state="translated">Libère toutes les ressources utilisées par l'objet <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> object.</source>
          <target state="translated">Libère toutes les ressources utilisées par l'objet <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose">
          <source>Call <ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph> when you are finished using the <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>.</source>
          <target state="translated">Appelez la méthode <ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph> une fois que vous avez terminé d'utiliser <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph> method leaves the <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph> in an unusable state.</source>
          <target state="translated">La méthode <ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph> rend le <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph> inutilisable.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose">
          <source>After calling <ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.IO.TextReader&gt;</ph> was occupying.</source>
          <target state="translated">Après avoir appelé <ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph>, vous devez libérer toutes les références à la <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph> pour que le garbage collector puisse récupérer la mémoire qui le <ph id="ph3">&lt;xref:System.IO.TextReader&gt;</ph> occupée.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>de nettoyage des ressources non managées<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> et <bpt id="p2">[</bpt>implémentant une méthode de suppression<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose">
          <source>Always call <ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>.</source>
          <target state="translated">Appelez toujours <ph id="ph1">&lt;xref:System.IO.TextReader.Dispose%2A&gt;</ph> avant de libérer votre dernière référence à <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> object's <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">Sinon, les ressources utilisées ne seront pas libérées tant que le garbage collector n'aura pas appelé la méthode <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> de l'objet <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour libérer les ressources managées et non managées ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> pour ne libérer que les ressources non managées.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">Libère les ressources non managées utilisées par <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> et libère éventuellement les ressources managées.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">Cette méthode est appelée par le public <ph id="ph1">`Dispose`</ph> (méthode) et le <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source>By default, this method specifies the <ph id="ph1">`disposing`</ph> parameter as <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Par défaut, cette méthode spécifie les <ph id="ph1">`disposing`</ph> paramètre en tant que <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> specifies the <ph id="ph2">`disposing`</ph> parameter as <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> Spécifie le <ph id="ph2">`disposing`</ph> paramètre en tant que <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.IO.TextReader&gt;</ph> references.</source>
          <target state="translated">Si le paramètre <ph id="ph1">`disposing`</ph> a la valeur <ph id="ph2">`true`</ph>, cette méthode libère toutes les ressources détenues par les objets managés référencés par ce <ph id="ph3">&lt;xref:System.IO.TextReader&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
          <target state="translated">Cette méthode appelle la méthode <ph id="ph1">`Dispose`</ph> de chaque objet référencé.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> peut être appelée plusieurs fois par d'autres objets.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source>When overriding this method, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">Lorsque vous substituez cette méthode, veillez à ne pas référencer des objets qui ont été supprimés lors d’un appel précédent à <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source>For more information about how to implement this method, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur la façon d’implémenter cette méthode, consultez <bpt id="p1">[</bpt>implémentant une méthode de suppression<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.IDisposable.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur <ph id="ph1">&lt;see cref="M:System.IDisposable.Dispose" /&gt;</ph> et <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, consultez <bpt id="p1">[</bpt>de nettoyage des ressources non managées<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.IO.TextReader.Null">
          <source>Provides a <ph id="ph1">&lt;see langword="TextReader" /&gt;</ph> with no data to read from.</source>
          <target state="translated">Fournit un <ph id="ph1">&lt;see langword="TextReader" /&gt;</ph> sans données à lire.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.TextReader.Null">
          <source>Reading from the <ph id="ph1">&lt;xref:System.IO.TextReader.Null&gt;</ph> text reader is similar to reading from the end of a stream:</source>
          <target state="translated">Lors de la lecture à partir de la <ph id="ph1">&lt;xref:System.IO.TextReader.Null&gt;</ph> lecteur de texte est similaire à la lecture à partir de la fin d’un flux :</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.TextReader.Null">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.TextReader.Peek%2A&gt;</ph> methods return -1.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.IO.TextReader.Peek%2A&gt;</ph> méthodes retournent -1.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.TextReader.Null">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader.ReadBlock%2A&gt;</ph> method returns zero.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.IO.TextReader.ReadBlock%2A&gt;</ph> retourne la valeur zéro.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.TextReader.Null">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader.ReadLine%2A&gt;</ph> method returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IO.TextReader.ReadLine%2A&gt;</ph> méthode renvoie <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.TextReader.Null">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader.ReadToEnd%2A&gt;</ph> method returns an empty string.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IO.TextReader.ReadToEnd%2A&gt;</ph> méthode retourne une chaîne vide.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Peek">
          <source>Reads the next character without changing the state of the reader or the character source.</source>
          <target state="translated">Lit le caractère suivant sans modifier l'état du lecteur ou la source du caractère.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Peek">
          <source>Returns the next available character without actually reading it from the reader.</source>
          <target state="translated">Retourne le prochain caractère disponible sans le lire réellement à partir du flux lecteur.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Peek">
          <source>An integer representing the next character to be read, or -1 if no more characters are available or the reader does not support seeking.</source>
          <target state="translated">Entier représentant le prochain caractère à lire, ou -1 si plus aucun caractère n'est disponible ou si le lecteur ne prend pas en charge la recherche.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Peek">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader.Peek%2A&gt;</ph> method returns an integer value in order to determine whether the end of the file, or another error has occurred.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IO.TextReader.Peek%2A&gt;</ph> méthode retourne une valeur entière afin de déterminer si la fin du fichier ou une autre erreur s’est produite.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Peek">
          <source>This allows a user to first check if the returned value is -1 before casting it to a <ph id="ph1">&lt;xref:System.Char&gt;</ph> type.</source>
          <target state="translated">Cela permet à un utilisateur à vérifier au préalable si la valeur retournée est -1 avant un cast sur un <ph id="ph1">&lt;xref:System.Char&gt;</ph> type.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Peek">
          <source>The current position of the <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> is not changed by this operation.</source>
          <target state="translated">La position actuelle de la <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> n’est pas modifiée par cette opération.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Peek">
          <source>The returned value is -1 if no more characters are available.</source>
          <target state="translated">La valeur retournée est -1 si aucun caractère n’est disponible.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Peek">
          <source>The default implementation returns -1.</source>
          <target state="translated">L'implémentation par défaut retourne -1.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Peek">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> est une classe abstraite.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Peek">
          <source>Therefore, you do not instantiate it in your code.</source>
          <target state="translated">Par conséquent, vous n’instanciez pas il dans votre code.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Peek">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextReader.Peek%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamReader.Peek%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pour obtenir un exemple d’utilisation de la <ph id="ph1">&lt;xref:System.IO.TextReader.Peek%2A&gt;</ph> (méthode), consultez le <ph id="ph2">&lt;xref:System.IO.StreamReader.Peek%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Peek">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> is closed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> est fermé.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Peek">
          <source>An I/O error occurs.</source>
          <target state="translated">Une erreur d’E/S se produit.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="T:System.IO.TextReader">
          <source>Reads data from the text reader.</source>
          <target state="translated">Lit les données dans le lecteur de texte.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read">
          <source>Reads the next character from the text reader and advances the character position by one character.</source>
          <target state="translated">Lit le caractère suivant à partir du lecteur de texte et avance la position d'un caractère.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read">
          <source>The next character from the text reader, or -1 if no more characters are available.</source>
          <target state="translated">Caractère suivant du lecteur de texte ou -1 s'il n'y a plus de caractères disponibles.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read">
          <source>The default implementation returns -1.</source>
          <target state="translated">L'implémentation par défaut retourne -1.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Read">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> est une classe abstraite.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Read">
          <source>Therefore, you do not instantiate it in your code.</source>
          <target state="translated">Par conséquent, vous n’instanciez pas il dans votre code.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Read">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamReader.Read%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pour obtenir un exemple d’utilisation de la <ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph> (méthode), consultez le <ph id="ph2">&lt;xref:System.IO.StreamReader.Read%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> is closed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> est fermé.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read">
          <source>An I/O error occurs.</source>
          <target state="translated">Une erreur d’E/S se produit.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>When this method returns, contains the specified character array with the values between <bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>index<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) replaced by the characters read from the current source.</source>
          <target state="translated">Quand cette méthode est retournée, contient le tableau de caractères spécifié dont les valeurs comprises entre <bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> et (<bpt id="p2">&lt;c&gt;</bpt>index<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) sont remplacées par les caractères lus à partir de la source actuelle.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The position in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing.</source>
          <target state="translated">Position dans <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> à partir de laquelle commencer l’écriture.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The maximum number of characters to read.</source>
          <target state="translated">Nombre maximal de caractères à lire.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>If the end of the reader is reached before the specified number of characters is read into the buffer, the method returns.</source>
          <target state="translated">Si la fin du lecteur est atteinte avant que le nombre de caractères spécifié soit lu dans la mémoire tampon, la méthode est retournée.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>Reads a specified maximum number of characters from the current reader and writes the data to a buffer, beginning at the specified index.</source>
          <target state="translated">Lit un nombre maximal spécifié de caractères à partir du lecteur actuel et écrit les données dans une mémoire tampon, en commençant à l'index spécifié.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters that have been read.</source>
          <target state="translated">Nombre de caractères lus.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The number will be less than or equal to <ph id="ph1">&lt;paramref name="count" /&gt;</ph>, depending on whether the data is available within the reader.</source>
          <target state="translated">Le nombre sera inférieur ou égal à <ph id="ph1">&lt;paramref name="count" /&gt;</ph>, selon les données disponibles dans le lecteur.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>This method returns 0 (zero) if it is called when no more characters are left to read.</source>
          <target state="translated">Cette méthode retourne zéro si elle est appelée alors qu'il ne reste aucun caractère à lire.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>This method returns after either <ph id="ph1">`count`</ph> characters are read or the end of the file is reached.</source>
          <target state="translated">Cette méthode est retournée après <ph id="ph1">`count`</ph> caractères sont lus ou à la fin du fichier est atteinte.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.TextReader.ReadBlock%2A&gt;</ph> is a blocking version of this method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader.ReadBlock%2A&gt;</ph> est une version bloquante de cette méthode.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> est une classe abstraite.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>Therefore, you do not instantiate it in your code.</source>
          <target state="translated">Par conséquent, vous n’instanciez pas il dans votre code.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamReader.Read%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pour obtenir un exemple d’utilisation de la <ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph> (méthode), consultez le <ph id="ph2">&lt;xref:System.IO.StreamReader.Read%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">La longueur de la mémoire tampon moins <ph id="ph1">&lt;paramref name="index" /&gt;</ph> est inférieure à <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est un nombre négatif.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> is closed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> est fermé.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">Une erreur d’E/S se produit.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>When this method returns, contains the specified character array with the values between <bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>index<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) replaced by the characters read from the current source.</source>
          <target state="translated">Quand cette méthode est retournée, contient le tableau de caractères spécifié dont les valeurs comprises entre <bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> et (<bpt id="p2">&lt;c&gt;</bpt>index<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) sont remplacées par les caractères lus à partir de la source actuelle.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>The position in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing.</source>
          <target state="translated">Position dans <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> à partir de laquelle commencer l’écriture.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>The maximum number of characters to read.</source>
          <target state="translated">Nombre maximal de caractères à lire.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.</source>
          <target state="translated">Si la fin du texte est atteinte avant que le nombre de caractères spécifié soit lu dans la mémoire tampon, la méthode en cours est retournée.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index.</source>
          <target state="translated">Lit de façon asynchrone un nombre maximal de caractères spécifié dans le lecteur de texte actuel et écrit les données dans une mémoire tampon, en commençant à l'index spécifié.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">Tâche qui représente l'opération de lecture asynchrone.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated">La valeur du paramètre <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> contient le nombre total d'octets lus dans la mémoire tampon.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.</source>
          <target state="translated">La valeur de résultat peut être inférieure au nombre d'octets demandés si le nombre d'octets actuellement disponibles est inférieur au nombre demandé, ou elle peut avoir la valeur 0 (zéro) si la fin du texte a été atteinte.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>The task completes after either the number of characters specified by the <ph id="ph1">`count`</ph> parameter are read or the end of the file is reached.</source>
          <target state="translated">La tâche termine après un nombre de caractères spécifié par le <ph id="ph1">`count`</ph> paramètre sont en lecture ou la fin du fichier est atteinte.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> est une classe abstraite.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>Therefore, you do not instantiate it in your code.</source>
          <target state="translated">Par conséquent, vous n’instanciez pas il dans votre code.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextReader.ReadAsync%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadAsync%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pour obtenir un exemple d’utilisation de la <ph id="ph1">&lt;xref:System.IO.TextReader.ReadAsync%2A&gt;</ph> (méthode), consultez le <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadAsync%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est un nombre négatif.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">La somme de <ph id="ph1">&lt;paramref name="index" /&gt;</ph> et <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est supérieure à la longueur de la mémoire tampon.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>The text reader has been disposed.</source>
          <target state="translated">Le lecteur de texte a été supprimé.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
          <source>The reader is currently in use by a previous read operation.</source>
          <target state="translated">Le lecteur est actuellement utilisé par une opération de lecture antérieure.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>When this method returns, this parameter contains the specified character array with the values between <bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>index<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> -1) replaced by the characters read from the current source.</source>
          <target state="translated">Quand cette méthode est retournée, ce paramètre contient le tableau de caractères spécifié dont les valeurs comprises entre <bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> et (<bpt id="p2">&lt;c&gt;</bpt>index<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> -1) sont remplacées par les caractères lus à partir de la source actuelle.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>The position in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing.</source>
          <target state="translated">Position dans <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> à partir de laquelle commencer l’écriture.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>The maximum number of characters to read.</source>
          <target state="translated">Nombre maximal de caractères à lire.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>Reads a specified maximum number of characters from the current text reader and writes the data to a buffer, beginning at the specified index.</source>
          <target state="translated">Lit un nombre maximal spécifié de caractères à partir du lecteur de texte actuel et écrit les données dans une mémoire tampon, en commençant à l'index spécifié.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters that have been read.</source>
          <target state="translated">Nombre de caractères lus.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>The number will be less than or equal to <ph id="ph1">&lt;paramref name="count" /&gt;</ph>, depending on whether all input characters have been read.</source>
          <target state="translated">Le nombre sera inférieur ou égal à <ph id="ph1">&lt;paramref name="count" /&gt;</ph>, selon que tous les caractères d'entrée ont été lus ou non.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>The position of the underlying text reader is advanced by the number of characters that were read into <ph id="ph1">`buffer`</ph>.</source>
          <target state="translated">La position du lecteur de texte sous-jacent est avancée par le nombre de caractères qui ont été lus dans <ph id="ph1">`buffer`</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>The method blocks until either <ph id="ph1">`count`</ph> characters are read, or all characters have been read.</source>
          <target state="translated">La méthode se bloque jusqu'à ce que <ph id="ph1">`count`</ph> caractères sont lus, ou tous les caractères ont été lus.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>This is a blocking version of <ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph>.</source>
          <target state="translated">Il s’agit d’une version de blocage de <ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">La longueur de la mémoire tampon moins <ph id="ph1">&lt;paramref name="index" /&gt;</ph> est inférieure à <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est un nombre négatif.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> is closed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> est fermé.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">Une erreur d’E/S se produit.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>When this method returns, contains the specified character array with the values between <bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>index<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) replaced by the characters read from the current source.</source>
          <target state="translated">Quand cette méthode est retournée, contient le tableau de caractères spécifié dont les valeurs comprises entre <bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> et (<bpt id="p2">&lt;c&gt;</bpt>index<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) sont remplacées par les caractères lus à partir de la source actuelle.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>The position in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing.</source>
          <target state="translated">Position dans <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> à partir de laquelle commencer l’écriture.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>The maximum number of characters to read.</source>
          <target state="translated">Nombre maximal de caractères à lire.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.</source>
          <target state="translated">Si la fin du texte est atteinte avant que le nombre de caractères spécifié soit lu dans la mémoire tampon, la méthode en cours est retournée.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index.</source>
          <target state="translated">Lit de façon asynchrone un nombre maximal de caractères spécifié dans le lecteur de texte actuel et écrit les données dans une mémoire tampon, en commençant à l'index spécifié.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">Tâche qui représente l'opération de lecture asynchrone.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated">La valeur du paramètre <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> contient le nombre total d'octets lus dans la mémoire tampon.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.</source>
          <target state="translated">La valeur de résultat peut être inférieure au nombre d'octets demandés si le nombre d'octets actuellement disponibles est inférieur au nombre demandé, ou elle peut avoir la valeur 0 (zéro) si la fin du texte a été atteinte.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>The task does not complete until either the number of characters specified by the <ph id="ph1">`count`</ph> parameter are read, or the end of the text has been reached.</source>
          <target state="translated">La tâche ne termine pas tant que le nombre de caractères spécifié par le <ph id="ph1">`count`</ph> paramètre sont en lecture ou la fin du texte a été atteinte.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est un nombre négatif.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">La somme de <ph id="ph1">&lt;paramref name="index" /&gt;</ph> et <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est supérieure à la longueur de la mémoire tampon.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>The text reader has been disposed.</source>
          <target state="translated">Le lecteur de texte a été supprimé.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
          <source>The reader is currently in use by a previous read operation.</source>
          <target state="translated">Le lecteur est actuellement utilisé par une opération de lecture antérieure.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLine">
          <source>Reads a line of characters from the text reader and returns the data as a string.</source>
          <target state="translated">Lit une ligne de caractères à partir du lecteur de texte et retourne les données sous forme de chaîne.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLine">
          <source>The next line from the reader, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if all characters have been read.</source>
          <target state="translated">La ligne suivante du lecteur ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> si tous les caractères ont été lus.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLine">
          <source>A line is defined as a sequence of characters followed by a carriage return (0x000d), a line feed (0x000a), a carriage return followed by a line feed, <ph id="ph1">&lt;xref:System.Environment.NewLine%2A?displayProperty=nameWithType&gt;</ph>, or the end-of-stream marker.</source>
          <target state="translated">Une ligne est définie comme une séquence de caractères suivi d’un retour chariot (0x000d), un saut de ligne (0x000a), un retour chariot suivi d’un saut de ligne <ph id="ph1">&lt;xref:System.Environment.NewLine%2A?displayProperty=nameWithType&gt;</ph>, ou le marqueur de fin de flux.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLine">
          <source>The string that is returned does not contain the terminating carriage return or line feed.</source>
          <target state="translated">La chaîne retournée ne contient pas le caractère de fin retour chariot ou saut de ligne.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLine">
          <source>The return value is <ph id="ph1">`null`</ph> if the end of the input stream has been reached.</source>
          <target state="translated">La valeur de retour est <ph id="ph1">`null`</ph> si la fin du flux d’entrée a été atteinte.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLine">
          <source>If the method throws an <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> exception, the reader's position in the underlying <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> is advanced by the number of characters the method was able to read, but the characters that were already read into the internal <ph id="ph3">&lt;xref:System.IO.TextReader.ReadLine%2A&gt;</ph> buffer are discarded.</source>
          <target state="translated">Si la méthode lève un <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> exception, la position du lecteur dans sous-jacent <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> est avancée par le nombre de caractères que la méthode a été en mesure de lire, mais les caractères qui ont été déjà lue interne <ph id="ph3">&lt;xref:System.IO.TextReader.ReadLine%2A&gt;</ph> sont de la mémoire tampon ignoré.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLine">
          <source>Because the position of the reader in the stream cannot be changed, the characters that were already read are unrecoverable and can be accessed only by reinitializing the <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> object.</source>
          <target state="translated">Étant donné que la position du lecteur dans le flux ne peut pas être modifiée, les caractères qui ont été déjà lus sont irrécupérables et sont accessibles uniquement en réinitialisant le <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLine">
          <source>If the initial position within the stream is unknown or the stream does not support seeking, the underlying <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> also needs to be reinitialized.</source>
          <target state="translated">Si la position initiale dans le flux est inconnue ou le flux ne prend pas en charge la recherche sous-jacent <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> doit également être réinitialisé.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLine">
          <source>To avoid such a situation and produce robust code you should use the <ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph> method and store the read characters in a preallocated buffer.</source>
          <target state="translated">Pour éviter une telle situation et produire du code robuste, vous devez utiliser le <ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph> méthode et magasin les caractères lus dans une mémoire tampon préallouée.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLine">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> est une classe abstraite.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLine">
          <source>Therefore, you do not instantiate it in your code.</source>
          <target state="translated">Par conséquent, vous n’instanciez pas il dans votre code.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLine">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextReader.ReadLine%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pour obtenir un exemple d’utilisation de la <ph id="ph1">&lt;xref:System.IO.TextReader.ReadLine%2A&gt;</ph> (méthode), consultez le <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLine">
          <source>An I/O error occurs.</source>
          <target state="translated">Une erreur d’E/S se produit.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLine">
          <source>There is insufficient memory to allocate a buffer for the returned string.</source>
          <target state="translated">La mémoire est insuffisante pour allouer une mémoire tampon à la chaîne retournée.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLine">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> is closed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> est fermé.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLine">
          <source>The number of characters in the next line is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph></source>
          <target state="translated">Le nombre de caractères dans la ligne suivante est supérieur à <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLineAsync">
          <source>Reads a line of characters asynchronously and returns the data as a string.</source>
          <target state="translated">Lit une ligne de caractères de manière asynchrone et retourne les données sous forme de chaîne.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLineAsync">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">Tâche qui représente l'opération de lecture asynchrone.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLineAsync">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the next line from the text reader, or is <ph id="ph2">&lt;see langword="null" /&gt;</ph> if all of the characters have been read.</source>
          <target state="translated">La valeur du paramètre <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> contient la ligne suivante issue du lecteur de texte, ou a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph> si tous les caractères ont été lus.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLineAsync">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> est une classe abstraite.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLineAsync">
          <source>Therefore, you do not instantiate it in your code.</source>
          <target state="translated">Par conséquent, vous n’instanciez pas il dans votre code.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLineAsync">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextReader.ReadLineAsync%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLineAsync%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pour obtenir un exemple d’utilisation de la <ph id="ph1">&lt;xref:System.IO.TextReader.ReadLineAsync%2A&gt;</ph> (méthode), consultez le <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLineAsync%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadLineAsync">
          <source>If the current <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> represents the standard input stream returned by the <ph id="ph2">&lt;xref:System.Console.In%2A?displayProperty=nameWithType&gt;</ph> property, the <ph id="ph3">&lt;xref:System.IO.TextReader.ReadLineAsync%2A&gt;</ph> method executes synchronously rather than asynchronously.</source>
          <target state="translated">Si actuel <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> représente le flux d’entrée standard retourné par la <ph id="ph2">&lt;xref:System.Console.In%2A?displayProperty=nameWithType&gt;</ph> propriété, le <ph id="ph3">&lt;xref:System.IO.TextReader.ReadLineAsync%2A&gt;</ph> méthode s’exécute de façon synchrone plutôt qu’en mode asynchrone.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLineAsync">
          <source>The number of characters in the next line is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Le nombre de caractères dans la ligne suivante est supérieur à <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLineAsync">
          <source>The text reader has been disposed.</source>
          <target state="translated">Le lecteur de texte a été supprimé.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadLineAsync">
          <source>The reader is currently in use by a previous read operation.</source>
          <target state="translated">Le lecteur est actuellement utilisé par une opération de lecture antérieure.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEnd">
          <source>Reads all characters from the current position to the end of the text reader and returns them as one string.</source>
          <target state="translated">Lit tous les caractères entre la position actuelle et la fin du lecteur de texte, puis les retourne sous forme d'une chaîne.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEnd">
          <source>A string that contains all characters from the current position to the end of the text reader.</source>
          <target state="translated">Chaîne contenant tous les caractères entre la position actuelle et la fin du lecteur de texte.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadToEnd">
          <source>If the method throws an <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> exception, the reader's position in the underlying <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> is advanced by the number of characters the method was able to read, but the characters that were already read into the internal <ph id="ph3">&lt;xref:System.IO.TextReader.ReadToEnd%2A&gt;</ph> buffer are discarded.</source>
          <target state="translated">Si la méthode lève un <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> exception, la position du lecteur dans sous-jacent <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> est avancée par le nombre de caractères que la méthode a été en mesure de lire, mais les caractères qui ont été déjà lue interne <ph id="ph3">&lt;xref:System.IO.TextReader.ReadToEnd%2A&gt;</ph> sont de la mémoire tampon ignoré.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadToEnd">
          <source>Because the position of the reader in the stream cannot be changed, the characters that were already read are unrecoverable and can be accessed only by reinitializing the <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph>.</source>
          <target state="translated">Étant donné que la position du lecteur dans le flux ne peut pas être modifiée, les caractères qui ont été déjà lus sont irrécupérables et sont accessibles uniquement en réinitialisant le <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadToEnd">
          <source>If the initial position within the stream is unknown or the stream does not support seeking, the underlying <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> also needs to be reinitialized.</source>
          <target state="translated">Si la position initiale dans le flux est inconnue ou le flux ne prend pas en charge la recherche sous-jacent <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> doit également être réinitialisé.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadToEnd">
          <source>To avoid such a situation and produce robust code you should use the <ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph> method and store the read characters in a preallocated buffer.</source>
          <target state="translated">Pour éviter une telle situation et produire du code robuste, vous devez utiliser le <ph id="ph1">&lt;xref:System.IO.TextReader.Read%2A&gt;</ph> méthode et magasin les caractères lus dans une mémoire tampon préallouée.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadToEnd">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> est une classe abstraite.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadToEnd">
          <source>Therefore, you do not instantiate it in your code.</source>
          <target state="translated">Par conséquent, vous n’instanciez pas il dans votre code.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadToEnd">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextReader.ReadToEnd%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadToEnd%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pour obtenir un exemple d’utilisation de la <ph id="ph1">&lt;xref:System.IO.TextReader.ReadToEnd%2A&gt;</ph> (méthode), consultez le <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadToEnd%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEnd">
          <source>An I/O error occurs.</source>
          <target state="translated">Une erreur d’E/S se produit.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEnd">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> is closed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> est fermé.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEnd">
          <source>There is insufficient memory to allocate a buffer for the returned string.</source>
          <target state="translated">La mémoire est insuffisante pour allouer une mémoire tampon à la chaîne retournée.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEnd">
          <source>The number of characters in the next line is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph></source>
          <target state="translated">Le nombre de caractères dans la ligne suivante est supérieur à <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEndAsync">
          <source>Reads all characters from the current position to the end of the text reader asynchronously and returns them as one string.</source>
          <target state="translated">Lit tous les caractères entre la position actuelle et la fin du lecteur de texte de manière asynchrone, puis les retourne sous la forme d'une chaîne.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEndAsync">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">Tâche qui représente l'opération de lecture asynchrone.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEndAsync">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains a string with the characters from the current position to the end of the text reader.</source>
          <target state="translated">La valeur du paramètre <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> contient une chaîne composée des caractères de la position actuelle jusqu'à la fin du flux du lecteur de texte.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadToEndAsync">
          <source>The <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> class is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> est une classe abstraite.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadToEndAsync">
          <source>Therefore, you do not instantiate it in your code.</source>
          <target state="translated">Par conséquent, vous n’instanciez pas il dans votre code.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.ReadToEndAsync">
          <source>For an example of using the <ph id="ph1">&lt;xref:System.IO.TextReader.ReadToEndAsync%2A&gt;</ph> method, see the <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadToEndAsync%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pour obtenir un exemple d’utilisation de la <ph id="ph1">&lt;xref:System.IO.TextReader.ReadToEndAsync%2A&gt;</ph> (méthode), consultez le <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadToEndAsync%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEndAsync">
          <source>The number of characters is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Le nombre de caractères est supérieur à <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEndAsync">
          <source>The text reader has been disposed.</source>
          <target state="translated">Le lecteur de texte a été supprimé.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.ReadToEndAsync">
          <source>The reader is currently in use by a previous read operation.</source>
          <target state="translated">Le lecteur est actuellement utilisé par une opération de lecture antérieure.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
          <source>The <ph id="ph1">&lt;see langword="TextReader" /&gt;</ph> to synchronize.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="TextReader" /&gt;</ph> à synchroniser.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
          <source>Creates a thread-safe wrapper around the specified <ph id="ph1">&lt;see langword="TextReader" /&gt;</ph>.</source>
          <target state="translated">Crée un wrapper thread-safe autour du <ph id="ph1">&lt;see langword="TextReader" /&gt;</ph> spécifié.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
          <source>A thread-safe <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> thread-safe.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
          <source>The current method returns a class that wraps around the specified <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> instance and restricts access to it by multiple threads.</source>
          <target state="translated">La méthode actuelle retourne une classe qui encapsule autour spécifié <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> de l’instance et restreint l’accès à celui-ci par plusieurs threads.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
          <source>All reads from the returned wrapper will be thread safe.</source>
          <target state="translated">Toutes les lectures à partir du wrapper retourné seront thread-safe.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
          <source><ph id="ph1">&lt;paramref name="reader" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="reader" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>