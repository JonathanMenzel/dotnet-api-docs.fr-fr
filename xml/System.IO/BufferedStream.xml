<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="BufferedStream.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac50565905affcad56d23c9b51bc2aa664f02fdc654.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0565905affcad56d23c9b51bc2aa664f02fdc654</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.BufferedStream">
          <source>Adds a buffering layer to read and write operations on another stream.</source>
          <target state="translated">Ajoute une couche de mise en mémoire tampon aux opérations de lecture et d’écriture sur un autre flux.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.IO.BufferedStream">
          <source>This class cannot be inherited.</source>
          <target state="translated">Cette classe ne peut pas être héritée.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>A buffer is a block of bytes in memory used to cache data, thereby reducing the number of calls to the operating system.</source>
          <target state="translated">Une mémoire tampon est un bloc d’octets dans la mémoire utilisée pour les données du cache, ce qui réduit le nombre d’appels au système d’exploitation.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>Buffers improve read and write performance.</source>
          <target state="translated">Mémoires tampons améliorent en lecture et d’écriture.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>A buffer can be used for either reading or writing, but never both simultaneously.</source>
          <target state="translated">Une mémoire tampon peut être utilisée pour la lecture ou l’écriture, mais jamais les deux simultanément.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>The <ph id="ph1">&lt;xref:System.IO.BufferedStream.Read%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.BufferedStream.Write%2A&gt;</ph> methods of <ph id="ph3">`BufferedStream`</ph> automatically maintain the buffer.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IO.BufferedStream.Read%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.IO.BufferedStream.Write%2A&gt;</ph> méthodes de <ph id="ph3">`BufferedStream`</ph> automatiquement à jour la mémoire tampon.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Ce type implémente le <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Lorsque vous avez fini d’utiliser le type, vous devez la supprimer directement ou indirectement.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Pour supprimer le type directement, vous devez appeler sa <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> méthode dans un <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Pour la supprimer indirectement, utiliser une construction de langage telles que <ph id="ph1">`using`</ph> (en c#) ou <ph id="ph2">`Using`</ph> (en Visual Basic).</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Pour plus d’informations, consultez la section « Utilisant un objet qui implémente IDisposable » dans la <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> rubrique de l’interface.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source><ph id="ph1">`BufferedStream`</ph> can be composed around certain types of streams.</source>
          <target state="translated"><ph id="ph1">`BufferedStream`</ph> peut être créé à partir de certains types de flux.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>It provides implementations for reading and writing bytes to an underlying data source or repository.</source>
          <target state="translated">Il fournit des implémentations pour lire et écrire des octets dans une source de données sous-jacente ou le référentiel.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>Use <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.BinaryWriter&gt;</ph> for reading and writing other data types.</source>
          <target state="translated">Utilisez <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> et <ph id="ph2">&lt;xref:System.IO.BinaryWriter&gt;</ph> pour lire et écrire d’autres types de données.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source><ph id="ph1">`BufferedStream`</ph> is designed to prevent the buffer from slowing down input and output when the buffer is not needed.</source>
          <target state="translated"><ph id="ph1">`BufferedStream`</ph> est conçu pour empêcher la mémoire tampon de ralentir l’entrée et la sortie lorsque la mémoire tampon n’est pas nécessaire.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>If you always read and write for sizes greater than the internal buffer size, then <ph id="ph1">`BufferedStream`</ph> might not even allocate the internal buffer.</source>
          <target state="translated">Si la lecture ou écriture puis de taille supérieure à la taille de la mémoire tampon interne, toujours <ph id="ph1">`BufferedStream`</ph> risque de ne pas allouer la mémoire tampon interne.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source><ph id="ph1">`BufferedStream`</ph> also buffers reads and writes in a shared buffer.</source>
          <target state="translated"><ph id="ph1">`BufferedStream`</ph> également mémoire tampon les lectures et écritures dans une mémoire tampon partagée.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>It is assumed that you will almost always be doing a series of reads or writes, but rarely alternate between the two of them.</source>
          <target state="translated">Il est supposé que vous sera presque toujours être réaliser une série de lectures ou écritures, mais rarement alterner entre les deux d'entre eux.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>The following code examples show how to use the <ph id="ph1">`BufferedStream`</ph> class over the <ph id="ph2">`NetworkStream`</ph> class to increase the performance of certain I/O operations.</source>
          <target state="translated">Les exemples de code suivants montrent comment utiliser le <ph id="ph1">`BufferedStream`</ph> classe via la <ph id="ph2">`NetworkStream`</ph> classe pour augmenter les performances de certaines opérations d’e/s.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>Start the server on a remote computer before starting the client.</source>
          <target state="translated">Démarrez le serveur sur un ordinateur distant avant de démarrer le client.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>Specify the remote computer name as a command-line argument when starting the client.</source>
          <target state="translated">Spécifiez le nom de l’ordinateur distant en tant qu’un argument de ligne de commande lors du démarrage du client.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>Vary the <ph id="ph1">`dataArraySize`</ph> and <ph id="ph2">`streamBufferSize`</ph> constants to view their effect on performance.</source>
          <target state="translated">Faire varier la <ph id="ph1">`dataArraySize`</ph> et <ph id="ph2">`streamBufferSize`</ph> constantes pour afficher leur impact sur les performances.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>The first example shows the code that runs on the client, and the second example shows the code that runs on the server.</source>
          <target state="translated">Le premier exemple montre le code qui s’exécute sur le client et le deuxième exemple montre le code qui s’exécute sur le serveur.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source><bpt id="p1">**</bpt>Example 1: Code that runs on the client<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Exemple 1 : Code qui s’exécute sur le client<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source><bpt id="p1">**</bpt>Example 2: Code that runs on the server<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Exemple 2 : Code qui s’exécute sur le serveur<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:System.IO.BufferedStream">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BufferedStream" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.IO.BufferedStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream)">
          <source>The current stream.</source>
          <target state="translated">Flux actuel.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BufferedStream" /&gt;</ph> class with a default buffer size of 4096 bytes.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.IO.BufferedStream" /&gt;</ph>, avec une taille de mémoire tampon par défaut égale à 4 096 octets.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream)">
          <source>A shared read/write buffer is allocated the first time a <ph id="ph1">`BufferedStream`</ph> object is initialized with this constructor.</source>
          <target state="translated">Une mémoire tampon en lecture/écriture partagée est allouée à la première fois un <ph id="ph1">`BufferedStream`</ph> objet est initialisé avec ce constructeur.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream)">
          <source>The shared buffer is not used if all reads and writes are greater than or equal to <ph id="ph1">`bufferSize`</ph>.</source>
          <target state="translated">La mémoire tampon partagée n’est pas utilisée si toutes les lectures et écritures sont supérieurs ou égaux à <ph id="ph1">`bufferSize`</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
          <source>The current stream.</source>
          <target state="translated">Flux actuel.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
          <source>The buffer size in bytes.</source>
          <target state="translated">Taille de la mémoire tampon en octets.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BufferedStream" /&gt;</ph> class with the specified buffer size.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.IO.BufferedStream" /&gt;</ph> avec la taille de mémoire tampon spécifiée.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
          <source>A shared read/write buffer is allocated the first time a <ph id="ph1">`BufferedStream`</ph> object is initialized with this constructor.</source>
          <target state="translated">Une mémoire tampon en lecture/écriture partagée est allouée à la première fois un <ph id="ph1">`BufferedStream`</ph> objet est initialisé avec ce constructeur.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
          <source>The shared buffer is not used if all reads and writes are greater than or equal to <ph id="ph1">`bufferSize`</ph>.</source>
          <target state="translated">La mémoire tampon partagée n’est pas utilisée si toutes les lectures et écritures sont supérieurs ou égaux à <ph id="ph1">`bufferSize`</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> est un nombre négatif.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer to read the data into.</source>
          <target state="translated">Mémoire tampon dans laquelle lire les données.buffer</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data read from the stream.</source>
          <target state="translated">Dans <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>, décalage d’octet auquel commencer l’écriture des données lues à partir du flux.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">Nombre maximal d'octets à lire.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the read is complete.</source>
          <target state="translated">Rappel asynchrone facultatif, à appeler quand la lecture est terminée.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous read request from other requests.</source>
          <target state="translated">Objet fourni par l'utilisateur qui distingue cette requête de lecture asynchrone des autres requêtes.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous read operation.</source>
          <target state="translated">Débute une opération de lecture asynchrone.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> instead.)</source>
          <target state="translated">(Utilisez <ph id="ph1">&lt;see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> à la place.)</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An object that represents the asynchronous read, which could still be pending.</source>
          <target state="translated">Objet représentant la lecture asynchrone qui pourrait toujours être en attente.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> to implement asynchronous file operations.</source>
          <target state="translated">Dans le .NET Framework 4 et les versions antérieures, vous devez utiliser des méthodes telles que <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> pour implémenter des opérations de fichier asynchrones.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;</ph>, help you implement asynchronous file operations more easily.</source>
          <target state="translated">Ces méthodes sont toujours disponibles dans le <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> pour prendre en charge du code hérité ; Toutefois, les nouvelles méthodes async, tel que <ph id="ph2">&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;</ph>, et <ph id="ph4">&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;</ph>, aide vous implémentez des opérations de fichier asynchrones plus facilement.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;</ph> must be called exactly once for every call to <ph id="ph2">&lt;xref:System.IO.BufferedStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;</ph> doit être appelée une seule fois pour chaque appel à <ph id="ph2">&lt;xref:System.IO.BufferedStream.BeginRead%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.</source>
          <target state="translated">Impossibilité de terminer un processus de lecture avant de commencer une autre lecture peut provoquer des comportements indésirables tels que de blocage.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.BufferedStream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.IO.BufferedStream.CanRead%2A&gt;</ph> propriété pour déterminer si l’instance actuelle prend en charge la lecture.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndRead%2A&gt;</ph> must be called with this <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> to find out how many bytes were read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndRead%2A&gt;</ph> doit être appelé avec ce <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> pour déterminer le nombre d’octets qui ont été lus.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est un nombre négatif.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Attempted an asynchronous read past the end of the stream.</source>
          <target state="translated">A tenté une lecture asynchrone au-delà de la fin du fichier du flux.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">La longueur de la mémoire tampon moins <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> est inférieure à <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current stream does not support the read operation.</source>
          <target state="translated">Le flux actuel ne prend pas en charge l’opération de lecture.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer containing data to write to the current stream.</source>
          <target state="translated">Mémoire tampon qui contient les données à écrire dans le flux actuel.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin copying bytes to the current stream.</source>
          <target state="translated">Dans <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>, décalage d’octet de base zéro auquel commencer la copie des octets dans le flux actuel.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">Nombre maximal d'octets à écrire.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The method to be called when the asynchronous write operation is completed.</source>
          <target state="translated">Méthode à appeler quand l'opération d'écriture asynchrone est terminée.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous write request from other requests.</source>
          <target state="translated">Objet fourni par l'utilisateur qui distingue cette requête d'écriture asynchrone des autres requêtes.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous write operation.</source>
          <target state="translated">Débute une opération d'écriture asynchrone.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> instead.)</source>
          <target state="translated">(Utilisez <ph id="ph1">&lt;see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> à la place.)</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An object that references the asynchronous write which could still be pending.</source>
          <target state="translated">Objet qui référence l’écriture asynchrone qui pourrait toujours être en attente.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to implement asynchronous file operations.</source>
          <target state="translated">Dans le .NET Framework 4 et les versions antérieures, vous devez utiliser des méthodes telles que <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> pour implémenter des opérations de fichier asynchrones.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;</ph>, help you implement asynchronous file operations more easily.</source>
          <target state="translated">Ces méthodes sont toujours disponibles dans le <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> pour prendre en charge du code hérité ; Toutefois, les nouvelles méthodes async, tel que <ph id="ph2">&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;</ph>, et <ph id="ph4">&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;</ph>, aide vous implémentez des opérations de fichier asynchrones plus facilement.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;</ph> must be called exactly once on every <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id="ph3">&lt;xref:System.IO.BufferedStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;</ph> doit être appelée une seule fois pour chaque <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> de <ph id="ph3">&lt;xref:System.IO.BufferedStream.BeginWrite%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;</ph> will block until the I/O operation has completed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;</ph> se bloque jusqu'à ce que l’opération d’e/s est terminée.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> length minus <ph id="ph2">&lt;paramref name="offset" /&gt;</ph> is less than <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">La longueur de <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> moins <ph id="ph2">&lt;paramref name="offset" /&gt;</ph> est inférieure à <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est un nombre négatif.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The stream does not support writing.</source>
          <target state="translated">Le flux ne prend pas en charge l'écriture.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.CanRead">
          <source>Gets a value indicating whether the current stream supports reading.</source>
          <target state="translated">Obtient une valeur indiquant si le flux actuel prend en charge la lecture.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports reading; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the stream is closed or was opened with write-only access.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le flux prend en charge la lecture ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> si le flux est fermé ou a été ouvert avec un accès en écriture seule.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanRead">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support reading, calls to the <ph id="ph2">&lt;xref:System.IO.BufferedStream.Read%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.ReadByte%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph>, and the <ph id="ph6">`Peek`</ph> methods of <ph id="ph7">&lt;xref:System.IO.StreamReader&gt;</ph>, <ph id="ph8">&lt;xref:System.IO.StringReader&gt;</ph>, and <ph id="ph9">&lt;xref:System.IO.TextReader&gt;</ph> throw a <ph id="ph10">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Si une classe dérivée de <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> ne prend pas en charge la lecture, les appels à la <ph id="ph2">&lt;xref:System.IO.BufferedStream.Read%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.ReadByte%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph>et le <ph id="ph6">`Peek`</ph> méthodes de <ph id="ph7">&lt;xref:System.IO.StreamReader&gt;</ph>, <ph id="ph8">&lt;xref:System.IO.StringReader&gt;</ph>, et <ph id="ph9">&lt;xref:System.IO.TextReader&gt;</ph> lever un <ph id="ph10">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanRead">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Si le flux est fermé, cette propriété retourne <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanRead">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.CanSeek">
          <source>Gets a value indicating whether the current stream supports seeking.</source>
          <target state="translated">Obtient une valeur indiquant si le flux actuel prend en charge la recherche.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanSeek">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports seeking; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the stream is closed or if the stream was constructed from an operating system handle such as a pipe or output to the console.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le flux prend en charge la recherche ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> si le flux est fermé ou s'il a été construit à partir d'un handle de système d'exploitation tel qu'un canal ou une sortie console.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanSeek">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support seeking, calls to <ph id="ph2">&lt;xref:System.IO.BufferedStream.Length%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.SetLength%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.BufferedStream.Position%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.BufferedStream.Seek%2A&gt;</ph> throw a <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Si une classe dérivée de <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> ne prend pas en charge la recherche, les appels à <ph id="ph2">&lt;xref:System.IO.BufferedStream.Length%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.SetLength%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.BufferedStream.Position%2A&gt;</ph>, et <ph id="ph5">&lt;xref:System.IO.BufferedStream.Seek%2A&gt;</ph> lever un <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanSeek">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Si le flux est fermé, cette propriété retourne <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanSeek">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.CanWrite">
          <source>Gets a value indicating whether the current stream supports writing.</source>
          <target state="translated">Obtient une valeur indiquant si le flux actuel prend en charge l'écriture.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports writing; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the stream is closed or was opened with read-only access.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le flux prend en charge l'écriture ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> si le flux est fermé ou a été ouvert avec un accès en lecture seule.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanWrite">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support writing, a call to <ph id="ph2">&lt;xref:System.IO.BufferedStream.SetLength%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.Write%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.IO.BufferedStream.WriteByte%2A&gt;</ph> throws a <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Si une classe dérivée de <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> ne prend pas en charge l’écriture, un appel à <ph id="ph2">&lt;xref:System.IO.BufferedStream.SetLength%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.Write%2A&gt;</ph>, ou <ph id="ph4">&lt;xref:System.IO.BufferedStream.WriteByte%2A&gt;</ph> lève une <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanWrite">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Si le flux est fermé, cette propriété retourne <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanWrite">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
          <source>The reference to the pending asynchronous request to wait for.</source>
          <target state="translated">Référence à la requête asynchrone en attente qu'il faut attendre.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
          <source>Waits for the pending asynchronous read operation to complete.</source>
          <target state="translated">Attend que l'opération de lecture asynchrone en attente se termine.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> instead.)</source>
          <target state="translated">(Utilisez <ph id="ph1">&lt;see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> à la place.)</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
          <source>The number of bytes read from the stream, between 0 (zero) and the number of bytes you requested.</source>
          <target state="translated">Nombre d'octets lus à partir du flux, entre zéro (0) et le nombre d'octets demandé.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
          <source>Streams only return 0 only at the end of the stream, otherwise, they should block until at least 1 byte is available.</source>
          <target state="translated">Les flux retournent uniquement 0 à la fin du flux, sinon ils devraient être bloqués jusqu’à ce qu’au moins 1 octet soit disponible.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> to implement asynchronous file operations.</source>
          <target state="translated">Dans le .NET Framework 4 et les versions antérieures, vous devez utiliser des méthodes telles que <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> pour implémenter des opérations de fichier asynchrones.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;</ph>, help you implement asynchronous file operations more easily.</source>
          <target state="translated">Ces méthodes sont toujours disponibles dans le <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> pour prendre en charge du code hérité ; Toutefois, les nouvelles méthodes async, tel que <ph id="ph2">&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;</ph>, et <ph id="ph4">&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;</ph>, aide vous implémentez des opérations de fichier asynchrones plus facilement.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndRead%2A&gt;</ph> must be called with this <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> to find out how many bytes were read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndRead%2A&gt;</ph> doit être appelé avec ce <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> pour déterminer le nombre d’octets qui ont été lus.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
          <source>This <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> object was not created by calling <ph id="ph2">&lt;see cref="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> on this class.</source>
          <target state="translated">Cet objet <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> n’a pas été créé en appelant <ph id="ph2">&lt;see cref="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> sur cette classe.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
          <source>The pending asynchronous request.</source>
          <target state="translated">Requête asynchrone en attente.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
          <source>Ends an asynchronous write operation and blocks until the I/O operation is complete.</source>
          <target state="translated">Termine une opération d'écriture asynchrone et se bloque jusqu'à la fin de l'opération d'E/S.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> instead.)</source>
          <target state="translated">(Utilisez <ph id="ph1">&lt;see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> à la place.)</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to implement asynchronous file operations.</source>
          <target state="translated">Dans le .NET Framework 4 et les versions antérieures, vous devez utiliser des méthodes telles que <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> pour implémenter des opérations de fichier asynchrones.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;</ph>, help you implement asynchronous file operations more easily.</source>
          <target state="translated">Ces méthodes sont toujours disponibles dans le <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> pour prendre en charge du code hérité ; Toutefois, les nouvelles méthodes async, tel que <ph id="ph2">&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;</ph>, et <ph id="ph4">&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;</ph>, aide vous implémentez des opérations de fichier asynchrones plus facilement.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;</ph> must be called exactly once for every call to <ph id="ph2">&lt;xref:System.IO.BufferedStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;</ph> doit être appelée une seule fois pour chaque appel à <ph id="ph2">&lt;xref:System.IO.BufferedStream.BeginRead%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
          <source>Failing to end a read process before beginning another read operation can cause deadlock or other undesirable behavior.</source>
          <target state="translated">Impossibilité de terminer un processus de lecture avant de commencer une autre opération de lecture peut entraîner le blocage ou autres comportements indésirables.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
          <source>This <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> object was not created by calling <ph id="ph2">&lt;see cref="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> on this class.</source>
          <target state="translated">Cet objet <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> n’a pas été créé en appelant <ph id="ph2">&lt;see cref="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> sur cette classe.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Flush">
          <source>Clears all buffers for this stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">Efface toutes les mémoires tampons pour ce flux et provoque l’écriture des données mises en mémoire tampon sur l’appareil sous-jacent.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Flush">
          <source>Flushing the stream will not flush its underlying encoder unless you explicitly call <ph id="ph1">`Flush`</ph> or <ph id="ph2">&lt;xref:System.IO.Stream.Close%2A&gt;</ph>.</source>
          <target state="translated">Vider le flux n’effacera pas son encodeur sous-jacent sauf si vous appelez explicitement <ph id="ph1">`Flush`</ph> ou <ph id="ph2">&lt;xref:System.IO.Stream.Close%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Flush">
          <source>If you use the <ph id="ph1">&lt;xref:System.IO.BufferedStream.%23ctor%2A&gt;</ph> constructor, thus specifying the buffer size while creating the <ph id="ph2">`BufferedStream`</ph> object, the content is flushed when it reaches the buffer size.</source>
          <target state="translated">Si vous utilisez la <ph id="ph1">&lt;xref:System.IO.BufferedStream.%23ctor%2A&gt;</ph> constructeur, par conséquent, en spécifiant la taille de mémoire tampon lors de la création du <ph id="ph2">`BufferedStream`</ph> de l’objet, le contenu est vidé lorsqu’il atteint la taille de mémoire tampon.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Flush">
          <source>For example, code such as <ph id="ph1">`BufferedStream bs = new BufferedStream(bs, 5)`</ph> will flush the content when the buffer size reaches 5 bytes.</source>
          <target state="translated">Par exemple, un code tel que <ph id="ph1">`BufferedStream bs = new BufferedStream(bs, 5)`</ph> effacera le contenu lorsque la taille de mémoire tampon atteint 5 octets.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Flush">
          <source>All the read and write methods of <ph id="ph1">`BufferedStream`</ph> automatically maintain the buffer, so there is no need to invoke <ph id="ph2">`Flush`</ph> when switching back and forth between reading and writing.</source>
          <target state="translated">Toutes les méthodes de lecture et d’écriture de <ph id="ph1">`BufferedStream`</ph> automatiquement mettre à jour de la mémoire tampon, il est donc inutile d’appeler <ph id="ph2">`Flush`</ph> lors du basculement dans les deux sens entre lecture et en écriture.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Flush">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Flush">
          <source>The stream has been disposed.</source>
          <target state="translated">Le flux a été supprimé.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Flush">
          <source>The data source or repository is not open.</source>
          <target state="translated">La source de données ou le référentiel n’est pas ouvert.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Jeton pour surveiller les requêtes d'annulation.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</source>
          <target state="translated">Efface de façon asynchrone toutes les mémoires tampons pour ce flux, provoque l'écriture des données mises en mémoire tampon sur l'appareil sous-jacent et surveille les requêtes d'annulation.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.FlushAsync(System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">Tâche qui représente l’opération de vidage asynchrone.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">Le flux a été supprimé.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.Length">
          <source>Gets the stream length in bytes.</source>
          <target state="translated">Obtient la longueur du flux en octets.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.Length">
          <source>The stream length in bytes.</source>
          <target state="translated">Longueur du flux en octets.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.Length">
          <source>The underlying stream is <ph id="ph1">&lt;see langword="null" /&gt;</ph> or closed.</source>
          <target state="translated">Le flux sous-jacent est <ph id="ph1">&lt;see langword="null" /&gt;</ph> ou fermé.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.Length">
          <source>The stream does not support seeking.</source>
          <target state="translated">Le flux ne prend pas en charge la recherche.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.Length">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Des méthodes ont été appelées après la fermeture du flux.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.Position">
          <source>Gets the position within the current stream.</source>
          <target state="translated">Obtient la position dans le flux actuel.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.Position">
          <source>The position within the current stream.</source>
          <target state="translated">Position dans le flux en cours.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.Position">
          <source>The <ph id="ph1">`get`</ph> accessor invokes <ph id="ph2">&lt;xref:System.IO.BufferedStream.Seek%2A&gt;</ph> to obtain the current position within the underlying stream and then adjusts this value according to the current position within the buffer.</source>
          <target state="translated">Le <ph id="ph1">`get`</ph> accesseur appelle <ph id="ph2">&lt;xref:System.IO.BufferedStream.Seek%2A&gt;</ph> pour obtenir la position actuelle dans le flux sous-jacent, puis ajuste cette valeur en fonction de la position actuelle dans la mémoire tampon.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.Position">
          <source>The <ph id="ph1">`set`</ph> accessor copies any data previously written to the buffer to the underlying stream, and then invokes <ph id="ph2">&lt;xref:System.IO.BufferedStream.Seek%2A&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">`set`</ph> accesseur copie les données précédemment écrites dans la mémoire tampon dans le flux sous-jacent, puis appelle <ph id="ph2">&lt;xref:System.IO.BufferedStream.Seek%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.Position">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">La recherche au-delà de la longueur du flux de données est prise en charge.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.Position">
          <source>The value passed to <ph id="ph1">&lt;see cref="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)" /&gt;</ph> is negative.</source>
          <target state="translated">La valeur passée à <ph id="ph1">&lt;see cref="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)" /&gt;</ph> est négative.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.Position">
          <source>An I/O error occurs, such as the stream being closed.</source>
          <target state="translated">Une erreur d’E/S s’est produite, telle que la fermeture du flux.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.Position">
          <source>The stream does not support seeking.</source>
          <target state="translated">Le flux ne prend pas en charge la recherche.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.Position">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Des méthodes ont été appelées après la fermeture du flux.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer to which bytes are to be copied.</source>
          <target state="translated">Mémoire tampon dans laquelle les octets sont copiés.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The byte offset in the buffer at which to begin reading bytes.</source>
          <target state="translated">Dans la mémoire tampon, offset d’octet à partir duquel commence la lecture des octets.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to be read.</source>
          <target state="translated">Nombre d'octets à lire.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Copies bytes from the current buffered stream to an array.</source>
          <target state="translated">Copie les octets du flux actuel figurant dans la mémoire tampon dans un tableau.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The total number of bytes read into <ph id="ph1">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">Nombre total d’octets lus dans <ph id="ph1">&lt;paramref name="array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This can be less than the number of bytes requested if that many bytes are not currently available, or 0 if the end of the stream has been reached before any data can be read.</source>
          <target state="translated">Le total peut être inférieur au nombre d’octets demandé si ce nombre n’est pas actuellement disponible, ou il peut être égal à 0 si la fin du flux a été atteinte avant la lecture des données.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">`Read`</ph> method will return 0 only if the end of the stream is reached.</source>
          <target state="translated">Le <ph id="ph1">`Read`</ph> méthode retourne 0 uniquement si la fin du flux est atteinte.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>In all other cases, <ph id="ph1">`Read`</ph> always reads at least one byte from the stream before returning.</source>
          <target state="translated">Dans tous les autres cas, <ph id="ph1">`Read`</ph> lit toujours au moins un octet du flux avant de retourner.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>By definition, if no data is available from the stream upon a call to <ph id="ph1">`Read`</ph>, the <ph id="ph2">`Read`</ph> method returns 0 (the end of the stream is reached automatically).</source>
          <target state="translated">Par définition, si aucune donnée n’est disponible dans le flux lors d’un appel à <ph id="ph1">`Read`</ph>, le <ph id="ph2">`Read`</ph> méthode retourne 0 (la fin du flux est automatiquement atteinte).</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</source>
          <target state="translated">Une implémentation est libre de retourner moins d’octets que demandé même si la fin du flux de données n’a pas été atteint.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> for reading primitive data types.</source>
          <target state="translated">Utilisez <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> pour la lecture des types de données primitifs.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Length of <ph id="ph1">&lt;paramref name="array" /&gt;</ph> minus <ph id="ph2">&lt;paramref name="offset" /&gt;</ph> is less than <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">La longueur de <ph id="ph1">&lt;paramref name="array" /&gt;</ph> moins <ph id="ph2">&lt;paramref name="offset" /&gt;</ph> est inférieure à <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est un nombre négatif.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is not open or is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le flux n’est pas ouvert ou bien il est <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support reading.</source>
          <target state="translated">Le flux ne prend pas en charge la lecture.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Des méthodes ont été appelées après la fermeture du flux.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write the data into.</source>
          <target state="translated">Mémoire tampon dans laquelle les données sont écrites.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data from the stream.</source>
          <target state="translated">Dans <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>, décalage d’octet auquel commencer l’écriture des données à partir du flux.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">Nombre maximal d'octets à lire.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Jeton pour surveiller les requêtes d'annulation.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</source>
          <target state="translated">Lit de façon asynchrone une séquence d'octets dans le flux actuel, avance la position dans le flux du nombre d'octets lus et surveille les demandes d'annulation.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">Tâche qui représente l'opération de lecture asynchrone.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated">La valeur du paramètre <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> contient le nombre total d'octets lus dans la mémoire tampon.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">La valeur du résultat peut être inférieure au nombre d'octets demandés si le nombre d'octets actuellement disponibles est inférieur au nombre demandé, ou elle peut avoir la valeur 0 (zéro) si la fin du flux a été atteinte.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>You can create a cancellation token by creating an instance of the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> class and passing the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> property as the <ph id="ph3">`cancellationToken`</ph> parameter.</source>
          <target state="translated">Vous pouvez créer un jeton d’annulation en créant une instance de la <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> classe et en passant le <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> propriété en tant que le <ph id="ph3">`cancellationToken`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est un nombre négatif.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">La somme de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> et <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est supérieure à la longueur de la mémoire tampon.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream does not support reading.</source>
          <target state="translated">Le flux ne prend pas en charge la lecture.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">Le flux a été supprimé.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream is currently in use by a previous read operation.</source>
          <target state="translated">Le flux est actuellement utilisé par une opération de lecture antérieure.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadByte">
          <source>Reads a byte from the underlying stream and returns the byte cast to an <ph id="ph1">&lt;see langword="int" /&gt;</ph>, or returns -1 if reading from the end of the stream.</source>
          <target state="translated">Lit un octet dans le flux sous-jacent et retourne un octet casté en <ph id="ph1">&lt;see langword="int" /&gt;</ph>, ou retourne -1 en cas de lecture à partir de la fin du flux.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadByte">
          <source>The byte cast to an <ph id="ph1">&lt;see langword="int" /&gt;</ph>, or -1 if reading from the end of the stream.</source>
          <target state="translated">Octet casté en <ph id="ph1">&lt;see langword="int" /&gt;</ph> ou en -1 en cas de lecture à partir de la fin du flux.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadByte">
          <source>An I/O error occurs, such as the stream being closed.</source>
          <target state="translated">Une erreur d’E/S s’est produite, telle que la fermeture du flux.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadByte">
          <source>The stream does not support reading.</source>
          <target state="translated">Le flux ne prend pas en charge la lecture.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadByte">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Des méthodes ont été appelées après la fermeture du flux.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.ReadByte">
          <source>The default implementation on <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> creates a new single-byte array and then calls <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</source>
          <target state="translated">L’implémentation par défaut sur <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> crée un nouveau tableau sur un octet, puis appelle <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.ReadByte">
          <source>While this is formally correct, it is inefficient.</source>
          <target state="translated">Bien que cela soit correct, il est inefficace.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.ReadByte">
          <source>Any stream with an internal buffer should override this method and provide a much more efficient version that reads the buffer directly, avoiding the extra array allocation on every call.</source>
          <target state="translated">Un flux avec une mémoire tampon interne doit substituer cette méthode et fournir une version beaucoup plus efficace qui lit la mémoire tampon directement, vous évitant l’allocation de tableau supplémentaire à chaque appel.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>A byte offset relative to <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Offset d’octet par rapport à <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>A value of type <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> indicating the reference point from which to obtain the new position.</source>
          <target state="translated">Valeur de type <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> indiquant le point de référence à partir duquel la nouvelle position est obtenue.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Sets the position within the current buffered stream.</source>
          <target state="translated">Définit la position dans le flux actuel mis en mémoire tampon.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The new position within the current buffered stream.</source>
          <target state="translated">Nouvelle position dans le flux actuel mis en mémoire tampon.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is negative, the new position will precede the position specified by <ph id="ph2">`origin`</ph> by the number of bytes specified by <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">Si <ph id="ph1">`offset`</ph> est négatif, la nouvelle position précède la position spécifiée par <ph id="ph2">`origin`</ph> du nombre d'octets spécifié par <ph id="ph3">`offset`</ph>.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is 0, the new position will be the position specified by <ph id="ph2">`origin`</ph>.</source>
          <target state="translated">Si <ph id="ph1">`offset`</ph> est 0, la nouvelle position sera la position spécifiée par <ph id="ph2">`origin`</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is positive, the new position will follow the position specified by <ph id="ph2">`origin`</ph> by the number of bytes specified by <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">Si <ph id="ph1">`offset`</ph> est positif, la nouvelle position suit la position spécifiée par <ph id="ph2">`origin`</ph> du nombre d'octets spécifié par <ph id="ph3">`offset`</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>When a <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> object is the base stream for a <ph id="ph2">&lt;xref:System.IO.StreamReader&gt;</ph> object, calling the <ph id="ph3">&lt;xref:System.IO.BufferedStream.Seek%2A&gt;</ph> method can cause the position of the stream to no longer match the position of the internal buffer in the reader.</source>
          <target state="translated">Quand un <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> objet est le flux de base pour un <ph id="ph2">&lt;xref:System.IO.StreamReader&gt;</ph> de l’objet, l’appel le <ph id="ph3">&lt;xref:System.IO.BufferedStream.Seek%2A&gt;</ph> méthode peut entraîner la position du flux de données ne correspondent plus à la position de la mémoire tampon interne dans le lecteur.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>To reset the internal buffer, call the <ph id="ph1">&lt;xref:System.IO.StreamReader.DiscardBufferedData%2A?displayProperty=nameWithType&gt;</ph> method; however, this method slows performance and should be called only when absolutely necessary.</source>
          <target state="translated">Pour rétablir la mémoire tampon interne, appelez le <ph id="ph1">&lt;xref:System.IO.StreamReader.DiscardBufferedData%2A?displayProperty=nameWithType&gt;</ph> méthode ; Toutefois, cette méthode ralentit les performances et doit être appelée uniquement lorsque cela est absolument nécessaire.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">La recherche au-delà de la longueur du flux de données est prise en charge.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The stream is not open or is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le flux n’est pas ouvert ou bien il est <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The stream does not support seeking.</source>
          <target state="translated">Le flux ne prend pas en charge la recherche.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Des méthodes ont été appelées après la fermeture du flux.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source>An integer indicating the desired length of the current buffered stream in bytes.</source>
          <target state="translated">Entier indiquant la longueur (en octets) requise pour le flux actuel mis en mémoire tampon.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source>Sets the length of the buffered stream.</source>
          <target state="translated">Définit la longueur du flux mis en mémoire tampon.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source>The buffer is flushed before setting the length of the underlying data source or repository.</source>
          <target state="translated">La mémoire tampon est vidée avant de définir la longueur de la source de données sous-jacente ou le référentiel.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source>If the specified value is less than the current length of the buffered stream, the buffered stream is truncated.</source>
          <target state="translated">Si la valeur spécifiée est inférieure à la longueur actuelle du flux mis en mémoire tampon, le flux mis en mémoire tampon est tronqué.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source>If the specified value is larger than the current length of the buffered stream, the buffered stream is expanded.</source>
          <target state="translated">Si la valeur spécifiée est supérieure à la longueur actuelle du flux mis en mémoire tampon, le flux mis en mémoire tampon est développé.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source>If the buffered stream is expanded, the contents of the buffered stream between the old and the new lengths are not defined.</source>
          <target state="translated">Si le flux mis en mémoire tampon est développé, le contenu du flux mis en mémoire tampon entre l’ancienne et la nouvelle longueur n’est pas défini.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source><ph id="ph1">`SetLength`</ph> flushes any buffered writes if necessary.</source>
          <target state="translated"><ph id="ph1">`SetLength`</ph> vide toutes les écritures en mémoire tampon, si nécessaire.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source>A stream must support both writing and seeking for <ph id="ph1">`SetLength`</ph> to work.</source>
          <target state="translated">Un flux doit prendre en charge l’écriture et la recherche pour <ph id="ph1">`SetLength`</ph> pour fonctionner.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> est un nombre négatif.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source>The stream is not open or is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le flux n’est pas ouvert ou bien il est <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source>The stream does not support both writing and seeking.</source>
          <target state="translated">Le flux ne prend pas en charge l’écriture et la recherche.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Des méthodes ont été appelées après la fermeture du flux.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The byte array from which to copy <bpt id="p1">&lt;c&gt;</bpt>count<ept id="p1">&lt;/c&gt;</ept> bytes to the current buffered stream.</source>
          <target state="translated">Tableau d’octets à partir duquel <bpt id="p1">&lt;c&gt;</bpt>count<ept id="p1">&lt;/c&gt;</ept> octets sont copiés vers le flux actuel mis en mémoire tampon.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The offset in the buffer at which to begin copying bytes to the current buffered stream.</source>
          <target state="translated">Dans la mémoire tampon, offset à partir duquel commence la copie des octets dans le flux actuel mis en mémoire tampon.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to be written to the current buffered stream.</source>
          <target state="translated">Nombre d’octets à écrire dans le flux actuel mis en mémoire tampon.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Copies bytes to the buffered stream and advances the current position within the buffered stream by the number of bytes written.</source>
          <target state="translated">Copie les octets dans le flux mis en mémoire tampon et avance la position actuelle dans ce flux du nombre d’octets écrits.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Length of <ph id="ph1">&lt;paramref name="array" /&gt;</ph> minus <ph id="ph2">&lt;paramref name="offset" /&gt;</ph> is less than <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">La longueur de <ph id="ph1">&lt;paramref name="array" /&gt;</ph> moins <ph id="ph2">&lt;paramref name="offset" /&gt;</ph> est inférieure à <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est un nombre négatif.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is closed or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le flux est fermé ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support writing.</source>
          <target state="translated">Le flux ne prend pas en charge l'écriture.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Des méthodes ont été appelées après la fermeture du flux.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write data from.</source>
          <target state="translated">Mémoire tampon dont sont issues les données à écrire.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin copying bytes to the stream.</source>
          <target state="translated">Le décalage en octets, commençant à zéro, dans <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>, où commencer la copie des octets dans le flux.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">Nombre maximal d'octets à écrire.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Jeton pour surveiller les requêtes d'annulation.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</source>
          <target state="translated">Écrit de façon asynchrone une séquence d'octets dans le flux actuel, avance la position actuelle dans ce flux du nombre d'octets écrits et surveille les demandes d'annulation.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">Tâche qui représente l’opération d’écriture asynchrone.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>You can create a cancellation token by creating an instance of the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> class and passing the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> property as the <ph id="ph3">`cancellationToken`</ph> parameter.</source>
          <target state="translated">Vous pouvez créer un jeton d’annulation en créant une instance de la <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> classe et en passant le <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> propriété en tant que le <ph id="ph3">`cancellationToken`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est un nombre négatif.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">La somme de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> et de <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est supérieure à la longueur de la mémoire tampon.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream does not support writing.</source>
          <target state="translated">Le flux ne prend pas en charge l'écriture.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">Le flux a été supprimé.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream is currently in use by a previous write operation.</source>
          <target state="translated">Le flux est actuellement utilisé par une opération d’écriture précédente.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteByte(System.Byte)">
          <source>A byte to write to the stream.</source>
          <target state="translated">Octet à écrire dans le flux.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteByte(System.Byte)">
          <source>Writes a byte to the current position in the buffered stream.</source>
          <target state="translated">Écrit un octet à la position actuelle dans le flux mis en mémoire tampon.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteByte(System.Byte)">
          <source>The stream does not support writing.</source>
          <target state="translated">Le flux ne prend pas en charge l'écriture.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteByte(System.Byte)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteByte(System.Byte)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Des méthodes ont été appelées après la fermeture du flux.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>