<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MemoryStream.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86c02ca3cbe99f600c2f813c7c537dac714efc08b5b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02ca3cbe99f600c2f813c7c537dac714efc08b5b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.MemoryStream">
          <source>Creates a stream whose backing store is memory.</source>
          <target state="translated">Crée un flux dont le magasin de stockage est la mémoire.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.MemoryStream">
          <source>The current position of a stream is the position at which the next read or write operation could take place.</source>
          <target state="translated">La position actuelle d’un flux est la position à laquelle la prochaine lecture ou d’écriture opération puisse avoir lieu.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.MemoryStream">
          <source>The current position can be retrieved or set through the <ph id="ph1">&lt;xref:System.IO.MemoryStream.Seek%2A&gt;</ph> method.</source>
          <target state="translated">La position actuelle peut être récupérée ou définie par le <ph id="ph1">&lt;xref:System.IO.MemoryStream.Seek%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.MemoryStream">
          <source>When a new instance of <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> is created, the current position is set to zero.</source>
          <target state="translated">Lorsqu’une nouvelle instance de <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> est créé, en cours position est définie à zéro.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.MemoryStream">
          <source>Memory streams created with an unsigned byte array provide a non-resizable stream of the data.</source>
          <target state="translated">Flux de mémoire créés avec un tableau d’octets non signés fournissent un flux non redimensionnable des données.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.MemoryStream">
          <source>When using a byte array, you can neither append to nor shrink the stream, although you might be able to modify the existing contents depending on the parameters passed into the constructor.</source>
          <target state="translated">Lorsque vous utilisez un tableau d’octets, vous pouvez ajouter à ni réduire le flux, bien que vous ne pourrez pas modifier le contenu existant, selon les paramètres passés au constructeur.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.MemoryStream">
          <source>Empty memory streams are resizable, and can be written to and read from.</source>
          <target state="translated">Les flux de mémoire vide sont redimensionnables et peuvent être écrits dans et lire à partir de.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.MemoryStream">
          <source>If a <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> object is added to a ResX file or a .resources file, call the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetStream%2A&gt;</ph> method at runtime to retrieve it.</source>
          <target state="translated">Si un <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> objet est ajouté à un fichier ResX ou un fichier .resources, appelez le <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetStream%2A&gt;</ph> méthode lors de l’exécution pour le récupérer.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.MemoryStream">
          <source>If a <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> object is serialized to a resource file it will actually be serialized as an <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>.</source>
          <target state="translated">Si un <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> objet est sérialisé en un fichier de ressources qu’il sera réellement sérialisé comme un <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.MemoryStream">
          <source>This behavior provides better performance, as well as the ability to get a pointer to the data directly, without having to go through <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> methods.</source>
          <target state="translated">Ce comportement offre de meilleures performances, ainsi que la possibilité d’obtenir un pointeur vers les données directement, sans avoir à passer par <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> méthodes.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.MemoryStream">
          <source>The following code example shows how to read and write data using memory as a backing store.</source>
          <target state="translated">L’exemple de code suivant montre comment lire et écrire des données à l’aide de la mémoire comme magasin de stockage.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.IO.MemoryStream">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> class with an expandable capacity initialized to zero.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> avec une capacité extensible initialisée à zéro.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.MemoryStream.CanWrite%2A&gt;</ph> properties are all set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph>, et <ph id="ph3">&lt;xref:System.IO.MemoryStream.CanWrite%2A&gt;</ph> propriétés ont la valeur <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor">
          <source>The capacity of the current stream automatically increases when you use the <ph id="ph1">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph> method to set the length to a value larger than the capacity of the current stream.</source>
          <target state="translated">La capacité du flux en cours augmente automatiquement lorsque vous utilisez le <ph id="ph1">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph> pour définir la longueur à une valeur supérieure à la capacité du flux actuel.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor">
          <source>This constructor exposes the underlying stream, which <ph id="ph1">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> returns.</source>
          <target state="translated">Ce constructeur expose sous-jacent flux <ph id="ph1">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> retourne.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[])">
          <source>The array of unsigned bytes from which to create the current stream.</source>
          <target state="translated">Tableau d'octets non signés à partir duquel créer le flux actuel.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[])">
          <source>Initializes a new non-resizable instance of the <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> class based on the specified byte array.</source>
          <target state="translated">Initialise une nouvelle instance non redimensionnable de la classe <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> en fonction du tableau d'octets spécifié.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.MemoryStream.CanWrite%2A&gt;</ph> properties are all set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph>, et <ph id="ph3">&lt;xref:System.IO.MemoryStream.CanWrite%2A&gt;</ph> propriétés ont la valeur <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[])">
          <source><ph id="ph1">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph> is set to the length of the specified byte array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph> est défini sur la longueur du tableau d’octets spécifié.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[])">
          <source>The new stream can be written to, but is not resizable.</source>
          <target state="translated">Nouveau flux de données n’est possible, mais n’est pas redimensionnable.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[])">
          <source>The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <ph id="ph1">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph>).</source>
          <target state="translated">La longueur du flux ne peut pas être définie sur une valeur supérieure à la longueur initiale du tableau d’octets spécifié ; Toutefois, le flux peut être tronqué (voir <ph id="ph1">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[])">
          <source>This constructor does not expose the underlying stream.</source>
          <target state="translated">Ce constructeur n’expose pas le flux sous-jacent.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[])">
          <source><ph id="ph1">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> throws <ph id="ph2">&lt;xref:System.UnauthorizedAccessException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> lève <ph id="ph2">&lt;xref:System.UnauthorizedAccessException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Int32)">
          <source>The initial size of the internal array in bytes.</source>
          <target state="translated">Taille initiale du tableau interne, en octets.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> class with an expandable capacity initialized as specified.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> avec une capacité extensible initialisée à la valeur spécifiée.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.MemoryStream.CanWrite%2A&gt;</ph> properties are all set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph>, et <ph id="ph3">&lt;xref:System.IO.MemoryStream.CanWrite%2A&gt;</ph> propriétés ont la valeur <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Int32)">
          <source>The capacity automatically increases when you use the <ph id="ph1">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph> method to set the length to a value larger than the capacity of the current stream.</source>
          <target state="translated">La capacité augmente automatiquement lorsque vous utilisez le <ph id="ph1">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph> pour définir la longueur à une valeur supérieure à la capacité du flux actuel.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Int32)">
          <source>Except for a <ph id="ph1">`MemoryStream`</ph> constructed with a byte[] parameter, write operations at the end of a <ph id="ph2">`MemoryStream`</ph> expand the <ph id="ph3">`MemoryStream`</ph>.</source>
          <target state="translated">À l’exception d’un <ph id="ph1">`MemoryStream`</ph> construit avec un paramètre byte [], écrire des opérations à la fin d’un <ph id="ph2">`MemoryStream`</ph> développer le <ph id="ph3">`MemoryStream`</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Int32)">
          <source>This constructor exposes the underlying stream that <ph id="ph1">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> returns.</source>
          <target state="translated">Ce constructeur expose sous-jacent flux de données <ph id="ph1">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> retourne.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> est un nombre négatif.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
          <source>The array of unsigned bytes from which to create this stream.</source>
          <target state="translated">Tableau d'octets non signés à partir duquel créer ce flux.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
          <source>The setting of the <ph id="ph1">&lt;see cref="P:System.IO.MemoryStream.CanWrite" /&gt;</ph> property, which determines whether the stream supports writing.</source>
          <target state="translated">Définition de la propriété <ph id="ph1">&lt;see cref="P:System.IO.MemoryStream.CanWrite" /&gt;</ph>, qui détermine si le flux prend en charge l'écriture.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
          <source>Initializes a new non-resizable instance of the <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> class based on the specified byte array with the <ph id="ph2">&lt;see cref="P:System.IO.MemoryStream.CanWrite" /&gt;</ph> property set as specified.</source>
          <target state="translated">Initialise une nouvelle instance non redimensionnable de la classe <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> en fonction du tableau d'octets spécifié, avec la propriété <ph id="ph2">&lt;see cref="P:System.IO.MemoryStream.CanWrite" /&gt;</ph> spécifiée.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph> properties are both set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph> propriétés sont définies sur <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph> is set to the length of the specified byte array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph> est défini sur la longueur du tableau d’octets spécifié.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
          <source>The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <ph id="ph1">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph>).</source>
          <target state="translated">La longueur du flux ne peut pas être définie sur une valeur supérieure à la longueur initiale du tableau d’octets spécifié ; Toutefois, le flux peut être tronqué (voir <ph id="ph1">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
          <source>This constructor does not expose the underlying stream.</source>
          <target state="translated">Ce constructeur n’expose pas le flux sous-jacent.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> throws <ph id="ph2">&lt;xref:System.UnauthorizedAccessException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> lève <ph id="ph2">&lt;xref:System.UnauthorizedAccessException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
          <source>The array of unsigned bytes from which to create this stream.</source>
          <target state="translated">Tableau d'octets non signés à partir duquel créer ce flux.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
          <source>The index into <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which the stream begins.</source>
          <target state="translated">Index dans <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> où commence le flux.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
          <source>The length of the stream in bytes.</source>
          <target state="translated">Longueur du flux en octets.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
          <source>Initializes a new non-resizable instance of the <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> class based on the specified region (index) of a byte array.</source>
          <target state="translated">Initialise une nouvelle instance non redimensionnable de la classe <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> en fonction de la région (index) spécifiée d'un tableau d'octets.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.MemoryStream.CanWrite%2A&gt;</ph> properties are all set to <ph id="ph4">`true`</ph>, but the capacity cannot be changed.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph>, et <ph id="ph3">&lt;xref:System.IO.MemoryStream.CanWrite%2A&gt;</ph> propriétés ont la valeur <ph id="ph4">`true`</ph>, mais la capacité ne peut pas être modifiée.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph> is set to <ph id="ph2">`count`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph> a la valeur <ph id="ph2">`count`</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
          <source>The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <ph id="ph1">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph>).</source>
          <target state="translated">La longueur du flux ne peut pas être définie sur une valeur supérieure à la longueur initiale du tableau d’octets spécifié ; Toutefois, le flux peut être tronqué (voir <ph id="ph1">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
          <source>This constructor does not expose the underlying stream.</source>
          <target state="translated">Ce constructeur n’expose pas le flux sous-jacent.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> throws <ph id="ph2">&lt;xref:System.UnauthorizedAccessException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> lève <ph id="ph2">&lt;xref:System.UnauthorizedAccessException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
          <source>However, you can write to the stream.</source>
          <target state="translated">Toutefois, vous pouvez écrire dans le flux.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est inférieur à zéro.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">La longueur de la mémoire tampon moins <ph id="ph1">&lt;paramref name="index" /&gt;</ph> est inférieure à <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>The array of unsigned bytes from which to create this stream.</source>
          <target state="translated">Tableau d'octets non signés à partir duquel créer ce flux.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>The index in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which the stream begins.</source>
          <target state="translated">Index dans <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> où commence le flux.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>The length of the stream in bytes.</source>
          <target state="translated">Longueur du flux en octets.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>The setting of the <ph id="ph1">&lt;see cref="P:System.IO.MemoryStream.CanWrite" /&gt;</ph> property, which determines whether the stream supports writing.</source>
          <target state="translated">Définition de la propriété <ph id="ph1">&lt;see cref="P:System.IO.MemoryStream.CanWrite" /&gt;</ph>, qui détermine si le flux prend en charge l'écriture.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>Initializes a new non-resizable instance of the <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> class based on the specified region of a byte array, with the <ph id="ph2">&lt;see cref="P:System.IO.MemoryStream.CanWrite" /&gt;</ph> property set as specified.</source>
          <target state="translated">Initialise une nouvelle instance non redimensionnable de la classe <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> en fonction de la région spécifiée d'un tableau d'octets, avec la propriété <ph id="ph2">&lt;see cref="P:System.IO.MemoryStream.CanWrite" /&gt;</ph> spécifiée.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph> properties are both set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph> propriétés sont définies sur <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph> is set to <ph id="ph2">`count`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph> a la valeur <ph id="ph2">`count`</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <ph id="ph1">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph>).</source>
          <target state="translated">La longueur du flux ne peut pas être définie sur une valeur supérieure à la longueur initiale du tableau d’octets spécifié ; Toutefois, le flux peut être tronqué (voir <ph id="ph1">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>This constructor does not expose the underlying stream.</source>
          <target state="translated">Ce constructeur n’expose pas le flux sous-jacent.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> throws <ph id="ph2">&lt;xref:System.UnauthorizedAccessException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> lève <ph id="ph2">&lt;xref:System.UnauthorizedAccessException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>However, you can write to the stream if <ph id="ph1">`writable`</ph> is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Toutefois, vous pouvez écrire dans le flux si <ph id="ph1">`writable`</ph> est <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> are negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est négatif.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">La longueur de la mémoire tampon moins <ph id="ph1">&lt;paramref name="index" /&gt;</ph> est inférieure à <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
          <source>The array of unsigned bytes from which to create this stream.</source>
          <target state="translated">Tableau d'octets non signés à partir duquel créer ce flux.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
          <source>The index into <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which the stream begins.</source>
          <target state="translated">Index dans <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> où commence le flux.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
          <source>The length of the stream in bytes.</source>
          <target state="translated">Longueur du flux en octets.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
          <source>The setting of the <ph id="ph1">&lt;see cref="P:System.IO.MemoryStream.CanWrite" /&gt;</ph> property, which determines whether the stream supports writing.</source>
          <target state="translated">Définition de la propriété <ph id="ph1">&lt;see cref="P:System.IO.MemoryStream.CanWrite" /&gt;</ph>, qui détermine si le flux prend en charge l'écriture.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to enable <ph id="ph2">&lt;see cref="M:System.IO.MemoryStream.GetBuffer" /&gt;</ph>, which returns the unsigned byte array from which the stream was created; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour activer <ph id="ph2">&lt;see cref="M:System.IO.MemoryStream.GetBuffer" /&gt;</ph>, qui retourne le tableau d'octets non signés à partir duquel le flux a été créé ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> class based on the specified region of a byte array, with the <ph id="ph2">&lt;see cref="P:System.IO.MemoryStream.CanWrite" /&gt;</ph> property set as specified, and the ability to call <ph id="ph3">&lt;see cref="M:System.IO.MemoryStream.GetBuffer" /&gt;</ph> set as specified.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> en fonction de la région spécifiée d'un tableau d'octets, avec la propriété <ph id="ph2">&lt;see cref="P:System.IO.MemoryStream.CanWrite" /&gt;</ph> spécifiée et la possibilité d'appeler <ph id="ph3">&lt;see cref="M:System.IO.MemoryStream.GetBuffer" /&gt;</ph> comme spécifié.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph> properties are both set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph> propriétés sont définies sur <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph> is set to <ph id="ph2">`count`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph> a la valeur <ph id="ph2">`count`</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
          <source>The new stream instance can be written to, but the <ph id="ph1">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph> of the underlying byte array cannot be changed.</source>
          <target state="translated">La nouvelle instance de flux de données n’est possible, mais le <ph id="ph1">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph> de l’octet sous-jacent tableau ne peut pas être modifié.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
          <source>The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <ph id="ph1">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph>).</source>
          <target state="translated">La longueur du flux ne peut pas être définie sur une valeur supérieure à la longueur initiale du tableau d’octets spécifié ; Toutefois, le flux peut être tronqué (voir <ph id="ph1">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est un nombre négatif.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">La longueur de la mémoire tampon moins <ph id="ph1">&lt;paramref name="index" /&gt;</ph> est inférieure à <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="P:System.IO.MemoryStream.CanRead">
          <source>Gets a value indicating whether the current stream supports reading.</source>
          <target state="translated">Obtient une valeur indiquant si le flux actuel prend en charge la lecture.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.MemoryStream.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream is open.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le flux est ouvert.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.MemoryStream.CanRead">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support reading, calls to the <ph id="ph2">&lt;xref:System.IO.MemoryStream.Read%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.MemoryStream.ReadByte%2A&gt;</ph> methods throw a <ph id="ph4">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Si une classe dérivée de <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> ne prend pas en charge la lecture, les appels à la <ph id="ph2">&lt;xref:System.IO.MemoryStream.Read%2A&gt;</ph> et <ph id="ph3">&lt;xref:System.IO.MemoryStream.ReadByte%2A&gt;</ph> méthodes lèvent une <ph id="ph4">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.MemoryStream.CanRead">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Si le flux est fermé, cette propriété retourne <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="P:System.IO.MemoryStream.CanSeek">
          <source>Gets a value indicating whether the current stream supports seeking.</source>
          <target state="translated">Obtient une valeur indiquant si le flux actuel prend en charge la recherche.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.MemoryStream.CanSeek">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream is open.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le flux est ouvert.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.MemoryStream.CanSeek">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support seeking, calls to <ph id="ph2">&lt;xref:System.IO.MemoryStream.Length%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.MemoryStream.Position%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.MemoryStream.Seek%2A&gt;</ph> throw a <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Si une classe dérivée de <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> ne prend pas en charge la recherche, les appels à <ph id="ph2">&lt;xref:System.IO.MemoryStream.Length%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.MemoryStream.Position%2A&gt;</ph>, et <ph id="ph5">&lt;xref:System.IO.MemoryStream.Seek%2A&gt;</ph> lever un <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.MemoryStream.CanSeek">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Si le flux est fermé, cette propriété retourne <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.IO.MemoryStream.CanWrite">
          <source>Gets a value indicating whether the current stream supports writing.</source>
          <target state="translated">Obtient une valeur indiquant si le flux actuel prend en charge l'écriture.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.MemoryStream.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports writing; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le flux prend en charge l'écriture ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.MemoryStream.CanWrite">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support writing, a call to <ph id="ph2">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.IO.Stream.WriteByte%2A&gt;</ph> throws a <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Si une classe dérivée de <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> ne prend pas en charge l’écriture, un appel à <ph id="ph2">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>, ou <ph id="ph4">&lt;xref:System.IO.Stream.WriteByte%2A&gt;</ph> lève une <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.MemoryStream.CanWrite">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Si le flux est fermé, cette propriété retourne <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="P:System.IO.MemoryStream.Capacity">
          <source>Gets or sets the number of bytes allocated for this stream.</source>
          <target state="translated">Obtient ou définit le nombre d'octets alloués pour ce flux.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.MemoryStream.Capacity">
          <source>The length of the usable portion of the buffer for the stream.</source>
          <target state="translated">Longueur de la partie de la mémoire tampon qui peut être utilisée pour le flux.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.MemoryStream.Capacity">
          <source><ph id="ph1">`Capacity`</ph> is the buffer length for system-provided byte arrays.</source>
          <target state="translated"><ph id="ph1">`Capacity`</ph> est la longueur du tampon pour les tableaux d’octets fournis par le système.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.MemoryStream.Capacity">
          <source><ph id="ph1">`Capacity`</ph> cannot be set to a value less than the current length of the stream.</source>
          <target state="translated"><ph id="ph1">`Capacity`</ph> Impossible de définir une valeur inférieure à la longueur actuelle du flux de données.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.MemoryStream.Capacity">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.IO.MemoryStream.Capacity">
          <source>A capacity is set that is negative or less than the current length of the stream.</source>
          <target state="translated">La capacité définie est négative ou inférieure à la longueur actuelle du flux.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="P:System.IO.MemoryStream.Capacity">
          <source>The current stream is closed.</source>
          <target state="translated">Le flux actuel est fermé.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="P:System.IO.MemoryStream.Capacity">
          <source><ph id="ph1">&lt;see langword="set" /&gt;</ph> is invoked on a stream whose capacity cannot be modified.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="set" /&gt;</ph> est appelé sur un flux dont la capacité ne peut pas être modifiée.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">Flux vers lequel le contenu du flux actuel sera copié.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The size, in bytes, of the buffer.</source>
          <target state="translated">Taille en octets de la mémoire tampon.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>This value must be greater than zero.</source>
          <target state="translated">Cette valeur doit être supérieure à zéro.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Jeton pour surveiller les requêtes d'annulation.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously reads all the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.</source>
          <target state="translated">Lit de façon asynchrone tous les octets du flux actuel et les écrit dans un autre flux, en utilisant une taille de mémoire tampon et un jeton d'annulation spécifiés.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous copy operation.</source>
          <target state="translated">Tâche qui représente l’opération de copie asynchrone.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph> est négatif ou égal à zéro.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>Either the current stream or the destination stream is disposed.</source>
          <target state="translated">Le flux de données actuel ou le flux de données de destination est supprimé.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The current stream does not support reading, or the destination stream does not support writing.</source>
          <target state="translated">Le flux de données actuel ne prend pas en charge la lecture, ou le flux de données de destination ne prend pas en charge l’écriture.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour libérer les ressources managées et non managées ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> pour ne libérer que les ressources non managées.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> class and optionally releases the managed resources.</source>
          <target state="translated">Libère les ressources non managées utilisées par la classe <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> et libère éventuellement les ressources managées.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">Cette méthode est appelée par le public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> (méthode) et le <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id="ph2">&lt;xref:System.IO.MemoryStream.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> appelle la méthode protégée <ph id="ph2">&lt;xref:System.IO.MemoryStream.Dispose%2A&gt;</ph> méthode avec la <ph id="ph3">`disposing`</ph> paramètre la valeur <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.IO.MemoryStream.Dispose%2A&gt;</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> appelle <ph id="ph2">&lt;xref:System.IO.MemoryStream.Dispose%2A&gt;</ph> avec <ph id="ph3">`disposing`</ph> la valeur <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph> references.</source>
          <target state="translated">Si le paramètre <ph id="ph1">`disposing`</ph> a la valeur <ph id="ph2">`true`</ph>, cette méthode libère toutes les ressources détenues par les objets managés référencés par ce <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method of each referenced object.</source>
          <target state="translated">Cette méthode appelle la méthode <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> de chaque objet référencé.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> peut être appelée plusieurs fois par d'autres objets.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.MemoryStream.Dispose(System.Boolean)" /&gt;</ph> be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>.</source>
          <target state="translated">Lors de la substitution <ph id="ph1">&lt;see cref="M:System.IO.MemoryStream.Dispose(System.Boolean)" /&gt;</ph> veillez à ne pas référencer des objets qui ont été supprimés lors d’un appel précédent à <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see cref="M:System.IO.MemoryStream.Dispose(System.Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur l’implémentation <ph id="ph1">&lt;see cref="M:System.IO.MemoryStream.Dispose(System.Boolean)" /&gt;</ph>, consultez <bpt id="p1">[</bpt>implémentant une méthode de suppression<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> et <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, consultez <bpt id="p1">[</bpt>de nettoyage des ressources non managées<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Flush">
          <source>Overrides the <ph id="ph1">&lt;see cref="M:System.IO.Stream.Flush" /&gt;</ph> method so that no action is performed.</source>
          <target state="translated">Remplace la méthode <ph id="ph1">&lt;see cref="M:System.IO.Stream.Flush" /&gt;</ph> afin qu'aucune action ne soit effectuée.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Flush">
          <source>This method overrides the <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Cette méthode remplace la <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Flush">
          <source>Because any data written to a <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> object is written into RAM, this method is redundant.</source>
          <target state="translated">Étant donné que les données écrites dans un <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> objet est écrit dans la mémoire RAM, cette méthode est redondante.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Jeton pour surveiller les requêtes d'annulation.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Asynchronously clears all buffers for this stream, and monitors cancellation requests.</source>
          <target state="translated">Efface de façon asynchrone toutes les mémoires tampons pour ce flux et surveille les demandes d'annulation.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">Tâche qui représente l’opération de vidage asynchrone.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Because any data written to a <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> object is written into RAM, this method is redundant.</source>
          <target state="translated">Étant donné que les données écrites dans un <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> objet est écrit dans la mémoire RAM, cette méthode est redondante.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">Si l’opération est annulée avant la fin, la tâche retournée contient le <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> la valeur pour le <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>You can create a cancellation token by creating an instance of the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> class and passing the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> property as the <ph id="ph3">`cancellationToken`</ph> parameter.</source>
          <target state="translated">Vous pouvez créer un jeton d’annulation en créant une instance de la <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> classe et en passant le <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> propriété en tant que le <ph id="ph3">`cancellationToken`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">Le flux a été supprimé.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.GetBuffer">
          <source>Returns the array of unsigned bytes from which this stream was created.</source>
          <target state="translated">Retourne le tableau d'octets non signés à partir duquel ce flux a été créé.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.GetBuffer">
          <source>The byte array from which this stream was created, or the underlying array if a byte array was not provided to the <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> constructor during construction of the current instance.</source>
          <target state="translated">Tableau d'octets à partir duquel ce flux a été créé, ou le tableau sous-jacent si aucun tableau d'octets n'a été fourni au constructeur <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> pendant la construction de l'instance actuelle.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.GetBuffer">
          <source>Note that the buffer contains allocated bytes which might be unused.</source>
          <target state="translated">Notez que la mémoire tampon contient des octets alloués qui peuvent être inutilisés.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.GetBuffer">
          <source>For example, if the string "test" is written into the <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> object, the length of the buffer returned from <ph id="ph2">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> is 256, not 4, with 252 bytes unused.</source>
          <target state="translated">Par exemple, si la chaîne « test » est écrite dans le <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> (objet), la longueur de la mémoire tampon retournée à partir de <ph id="ph2">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> est 256, et non pas 4, avec 252 octets inutilisés.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.GetBuffer">
          <source>To obtain only the data in the buffer, use the <ph id="ph1">&lt;xref:System.IO.MemoryStream.ToArray%2A&gt;</ph> method; however, <ph id="ph2">&lt;xref:System.IO.MemoryStream.ToArray%2A&gt;</ph> creates a copy of the data in memory.</source>
          <target state="translated">Pour obtenir uniquement les données de la mémoire tampon, utilisez la <ph id="ph1">&lt;xref:System.IO.MemoryStream.ToArray%2A&gt;</ph> méthode ; Toutefois, <ph id="ph2">&lt;xref:System.IO.MemoryStream.ToArray%2A&gt;</ph> crée une copie des données en mémoire.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.GetBuffer">
          <source>The buffer can also be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">La mémoire tampon peut également être <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.GetBuffer">
          <source>To create a <ph id="ph1">`MemoryStream`</ph> instance with a publicly visible buffer, use <ph id="ph2">&lt;xref:System.IO.MemoryStream.%23ctor%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.MemoryStream.%23ctor%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph>, or <ph id="ph4">&lt;xref:System.IO.MemoryStream.%23ctor%28System.Int32%29&gt;</ph>.</source>
          <target state="translated">Pour créer un <ph id="ph1">`MemoryStream`</ph> instance avec une mémoire tampon visible publiquement, utilisez <ph id="ph2">&lt;xref:System.IO.MemoryStream.%23ctor%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.MemoryStream.%23ctor%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph>, ou <ph id="ph4">&lt;xref:System.IO.MemoryStream.%23ctor%28System.Int32%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.GetBuffer">
          <source>If the current stream is resizable, two calls to this method do not return the same array if the underlying byte array is resized between calls.</source>
          <target state="translated">Si le flux actuel est redimensionnable, deux appels à cette méthode ne retournent pas le même groupe si le tableau d’octets sous-jacent est redimensionné entre les appels.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.GetBuffer">
          <source>For additional information, see <ph id="ph1">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph>.</source>
          <target state="translated">Pour plus d'informations, consultez <ph id="ph1">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.GetBuffer">
          <source>This method works when the memory stream is closed.</source>
          <target state="translated">Cette méthode fonctionne lorsque le flux de mémoire est fermé.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.GetBuffer">
          <source>The <ph id="ph1">&lt;see langword="MemoryStream" /&gt;</ph> instance was not created with a publicly visible buffer.</source>
          <target state="translated">L’instance <ph id="ph1">&lt;see langword="MemoryStream" /&gt;</ph> n’a pas été créée avec une mémoire tampon visible publiquement.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="P:System.IO.MemoryStream.Length">
          <source>Gets the length of the stream in bytes.</source>
          <target state="translated">Obtient la longueur du flux en octets.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.MemoryStream.Length">
          <source>The length of the stream in bytes.</source>
          <target state="translated">Longueur du flux en octets.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.MemoryStream.Length">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="P:System.IO.MemoryStream.Length">
          <source>The stream is closed.</source>
          <target state="translated">Le flux est fermé.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="P:System.IO.MemoryStream.Position">
          <source>Gets or sets the current position within the stream.</source>
          <target state="translated">Obtient ou définit la position actuelle dans le flux.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.MemoryStream.Position">
          <source>The current position within the stream.</source>
          <target state="translated">Position actuelle dans le flux.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.MemoryStream.Position">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="P:System.IO.MemoryStream.Position">
          <source>The position is set to a negative value or a value greater than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La position correspond à une valeur négative ou à une valeur supérieure à <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="P:System.IO.MemoryStream.Position">
          <source>The stream is closed.</source>
          <target state="translated">Le flux est fermé.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>When this method returns, contains the specified byte array with the values between <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) replaced by the characters read from the current stream.</source>
          <target state="translated">Quand cette méthode retourne un résultat, contient le tableau d’octets spécifié dont les valeurs comprises entre <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> et (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) sont remplacées par les caractères lus dans le flux actuel.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin storing data from the current stream.</source>
          <target state="translated">Dans <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>, décalage d’octet de base zéro auquel commencer le stockage des données à partir du flux actuel.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">Nombre maximal d'octets à lire.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Reads a block of bytes from the current stream and writes the data to a buffer.</source>
          <target state="translated">Lit un bloc d'octets à partir du flux actuel et écrit les données dans une mémoire tampon.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The total number of bytes written into the buffer.</source>
          <target state="translated">Nombre total d'octets écrits dans la mémoire tampon.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This can be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached before any bytes are read.</source>
          <target state="translated">Ce total peut être inférieur au nombre d'octets demandés si ce nombre d'octets n'est pas actuellement disponible, ou égal à zéro si la fin du flux a été atteinte avant que des octets soient lus.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This method overrides <ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode se substitue à <ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">`offset`</ph> parameter gives the offset of the first byte in <ph id="ph2">`buffer`</ph> to which data from the current stream is written.</source>
          <target state="translated">Le <ph id="ph1">`offset`</ph> paramètre indique l’offset du premier octet dans <ph id="ph2">`buffer`</ph> les données dans le flux actuel sont écrit.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">`count`</ph> parameter gives the maximum number of bytes to read from the current stream.</source>
          <target state="translated">Le <ph id="ph1">`count`</ph> paramètre indique le nombre maximal d’octets à lire à partir du flux actuel.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The returned value is the actual number of bytes read, or zero if the end of the stream is reached.</source>
          <target state="translated">La valeur retournée est le nombre réel d’octets lus, ou zéro si la fin du flux est atteinte.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If the read operation is successful, the current position within the stream advances by the number of bytes read.</source>
          <target state="translated">Si l’opération de lecture réussit, la position actuelle dans le flux avance du nombre d’octets lus.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If an exception occurs, the current position within the stream remains unchanged.</source>
          <target state="translated">Si une exception se produit, la position actuelle dans le flux de données reste inchangée.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">`Read`</ph> method will return zero only if the end of the stream is reached.</source>
          <target state="translated">Le <ph id="ph1">`Read`</ph> méthode retourne zéro uniquement si la fin du flux est atteinte.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>In all other cases, <ph id="ph1">`Read`</ph> always reads at least one byte from the stream before returning.</source>
          <target state="translated">Dans tous les autres cas, <ph id="ph1">`Read`</ph> lit toujours au moins un octet du flux avant de retourner.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>By definition, if no data is available from the stream upon a call to <ph id="ph1">`Read`</ph>, the <ph id="ph2">`Read`</ph> method returns zero (the end of the stream is reached automatically).</source>
          <target state="translated">Par définition, si aucune donnée n’est disponible dans le flux lors d’un appel à <ph id="ph1">`Read`</ph>, la <ph id="ph2">`Read`</ph> retourne la valeur zéro (la fin du flux est automatiquement atteinte).</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</source>
          <target state="translated">Une implémentation est libre de retourner moins d’octets que demandé même si la fin du flux de données n’a pas été atteint.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> for reading primitive data types.</source>
          <target state="translated">Utilisez <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> pour la lecture des types de données primitifs.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If the byte array specified in the <ph id="ph1">`buffer`</ph> parameter is the underlying buffer returned by the <ph id="ph2">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> method, the array contents are overwritten, and no exception is thrown.</source>
          <target state="translated">Si le tableau d’octets spécifié dans le <ph id="ph1">`buffer`</ph> paramètre est la mémoire tampon sous-jacente retournée par la <ph id="ph2">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> (méthode), le contenu du tableau est remplacé, et aucune exception n’est levée.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est un nombre négatif.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> subtracted from the buffer length is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> soustrait de la longueur de la mémoire tampon est inférieur à <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The current stream instance is closed.</source>
          <target state="translated">L’instance du flux actuel est fermée.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write the data into.</source>
          <target state="translated">Mémoire tampon dans laquelle les données sont écrites.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data from the stream.</source>
          <target state="translated">Dans <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>, décalage d’octet auquel commencer l’écriture des données à partir du flux.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">Nombre maximal d'octets à lire.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Jeton pour surveiller les requêtes d'annulation.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">La valeur par défaut est <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</source>
          <target state="translated">Lit de façon asynchrone une séquence d'octets dans le flux actuel, avance la position dans le flux du nombre d'octets lus et surveille les demandes d'annulation.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">Tâche qui représente l'opération de lecture asynchrone.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated">La valeur du paramètre <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> contient le nombre total d'octets lus dans la mémoire tampon.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">La valeur du résultat peut être inférieure au nombre d'octets demandés si le nombre d'octets actuellement disponibles est inférieur au nombre demandé, ou elle peut avoir la valeur 0 (zéro) si la fin du flux a été atteinte.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">Si l’opération est annulée avant la fin, la tâche retournée contient le <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> la valeur pour le <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>You can create a cancellation token by creating an instance of the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> class and passing the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> property as the <ph id="ph3">`cancellationToken`</ph> parameter.</source>
          <target state="translated">Vous pouvez créer un jeton d’annulation en créant une instance de la <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> classe et en passant le <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> propriété en tant que le <ph id="ph3">`cancellationToken`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est un nombre négatif.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">La somme de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> et <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est supérieure à la longueur de la mémoire tampon.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream does not support reading.</source>
          <target state="translated">Le flux ne prend pas en charge la lecture.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">Le flux a été supprimé.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream is currently in use by a previous read operation.</source>
          <target state="translated">Le flux est actuellement utilisé par une opération de lecture antérieure.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.ReadByte">
          <source>Reads a byte from the current stream.</source>
          <target state="translated">Lit un octet dans le flux actuel.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.ReadByte">
          <source>The byte cast to a <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>, or -1 if the end of the stream has been reached.</source>
          <target state="translated">Conversion du type (transtypage) de l'octet en <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>, ou -1 si la fin du flux a été atteinte.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.ReadByte">
          <source>This method overrides <ph id="ph1">&lt;xref:System.IO.Stream.ReadByte%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode se substitue à <ph id="ph1">&lt;xref:System.IO.Stream.ReadByte%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.ReadByte">
          <source>If the read operation is successful, the current position within the stream is advanced by one byte.</source>
          <target state="translated">Si l’opération de lecture réussit, la position actuelle dans le flux est avancée d’un octet.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.ReadByte">
          <source>If an exception occurs, the current position within the stream is unchanged.</source>
          <target state="translated">Si une exception se produit, la position actuelle dans le flux de données est inchangée.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.ReadByte">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.ReadByte">
          <source>The current stream instance is closed.</source>
          <target state="translated">L’instance du flux actuel est fermée.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The new position within the stream.</source>
          <target state="translated">Nouvelle position dans le flux.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>This is relative to the <bpt id="p1">&lt;c&gt;</bpt>loc<ept id="p1">&lt;/c&gt;</ept> parameter, and can be positive or negative.</source>
          <target state="translated">Elle est relative au paramètre <bpt id="p1">&lt;c&gt;</bpt>loc<ept id="p1">&lt;/c&gt;</ept> et peut être positive ou négative.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>A value of type <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph>, which acts as the seek reference point.</source>
          <target state="translated">Valeur de type <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph>, qui sert de point de référence à la recherche.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Sets the position within the current stream to the specified value.</source>
          <target state="translated">Définit la position dans le flux actuel à la valeur spécifiée.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The new position within the stream, calculated by combining the initial reference point and the offset.</source>
          <target state="translated">Nouvelle position dans le flux, calculée en combinant le point de référence initial et le décalage.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>This method overrides <ph id="ph1">&lt;xref:System.IO.Stream.Seek%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Cette méthode se substitue à <ph id="ph1">&lt;xref:System.IO.Stream.Seek%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">La recherche au-delà de la longueur du flux de données est prise en charge.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Do not use the <ph id="ph1">&lt;xref:System.IO.MemoryStream.Seek%2A&gt;</ph> method to determine the new position in the stream if the <ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph> was initialized with a non-zero offset.</source>
          <target state="translated">N’utilisez pas le <ph id="ph1">&lt;xref:System.IO.MemoryStream.Seek%2A&gt;</ph> pour déterminer la nouvelle position dans le flux de données si le <ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph> a été initialisée avec un décalage de zéro.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If you do, <ph id="ph1">&lt;xref:System.IO.MemoryStream.Seek%2A&gt;</ph> will return an inaccurate value.</source>
          <target state="translated">Si vous le faites, <ph id="ph1">&lt;xref:System.IO.MemoryStream.Seek%2A&gt;</ph> retourne une valeur inexacte.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Instead, use the <ph id="ph1">&lt;xref:System.IO.MemoryStream.Position%2A&gt;</ph> property to get the new position of the stream.</source>
          <target state="translated">Utilisez plutôt le <ph id="ph1">&lt;xref:System.IO.MemoryStream.Position%2A&gt;</ph> propriété à obtenir la nouvelle position du flux de données.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Seeking is attempted before the beginning of the stream.</source>
          <target state="translated">Tentative de recherche avant le début du flux.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> est supérieur à <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>There is an invalid <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph>.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> n’est pas valide.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> caused an arithmetic overflow.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> a entraîné un débordement arithmétique.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The current stream instance is closed.</source>
          <target state="translated">L’instance du flux actuel est fermée.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.SetLength(System.Int64)">
          <source>The value at which to set the length.</source>
          <target state="translated">Valeur à laquelle définir la longueur.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.SetLength(System.Int64)">
          <source>Sets the length of the current stream to the specified value.</source>
          <target state="translated">Définit la longueur du flux actuel à la valeur spécifiée.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.SetLength(System.Int64)">
          <source>This method overrides <ph id="ph1">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode se substitue à <ph id="ph1">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.SetLength(System.Int64)">
          <source>If the specified value is less than the current length of the stream, the stream is truncated.</source>
          <target state="translated">Si la valeur spécifiée est inférieure à la longueur actuelle du flux de données, le flux est tronqué.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.SetLength(System.Int64)">
          <source>If after the truncation the current position within the stream is past the end of the stream, the <ph id="ph1">&lt;xref:System.IO.MemoryStream.ReadByte%2A&gt;</ph> method returns -1, the <ph id="ph2">&lt;xref:System.IO.MemoryStream.Read%2A&gt;</ph> method reads zero bytes into the provided byte array, and <ph id="ph3">&lt;xref:System.IO.MemoryStream.Write%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.IO.MemoryStream.WriteByte%2A&gt;</ph> methods append specified bytes at the end of the stream, increasing its length.</source>
          <target state="translated">Si après la troncation de la position actuelle dans le flux de données a dépassé la fin du flux, le <ph id="ph1">&lt;xref:System.IO.MemoryStream.ReadByte%2A&gt;</ph> méthode retourne -1, le <ph id="ph2">&lt;xref:System.IO.MemoryStream.Read%2A&gt;</ph> méthode lit zéro octets dans le tableau d’octets fourni, et <ph id="ph3">&lt;xref:System.IO.MemoryStream.Write%2A&gt;</ph> et <ph id="ph4">&lt;xref:System.IO.MemoryStream.WriteByte%2A&gt;</ph> ajoutent des méthodes octets spécifiés à la fin du flux de données, l’augmentation de sa longueur.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.SetLength(System.Int64)">
          <source>If the specified value is larger than the current capacity and the stream is resizable, the capacity is increased, and the current position within the stream is unchanged.</source>
          <target state="translated">Si la valeur spécifiée est supérieure à la capacité actuelle et le flux est redimensionnable, la capacité est augmentée et la position actuelle dans le flux de données est inchangée.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.SetLength(System.Int64)">
          <source>If the length is increased, the contents of the stream between the old and the new length are initialized to zeros.</source>
          <target state="translated">Si la longueur est augmentée, le contenu du flux de données entre l’ancienne et la nouvelle longueur est initialisé à zéro.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.SetLength(System.Int64)">
          <source>A <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> instance must support writing for this method to work.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> instance doit prendre en charge l’écriture de cette méthode fonctionne.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.SetLength(System.Int64)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.MemoryStream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.IO.MemoryStream.CanWrite%2A&gt;</ph> propriété pour déterminer si l’instance actuelle prend en charge l’écriture.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.SetLength(System.Int64)">
          <source>For additional information, see <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>.</source>
          <target state="translated">Pour plus d'informations, consultez <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.SetLength(System.Int64)">
          <source>The current stream is not resizable and <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is larger than the current capacity.</source>
          <target state="translated">Le flux actuel n’est pas redimensionnable et <ph id="ph1">&lt;paramref name="value" /&gt;</ph> est supérieur à la capacité actuelle.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.SetLength(System.Int64)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.SetLength(System.Int64)">
          <source>The current stream does not support writing.</source>
          <target state="translated">Le flux actuel ne prend pas en charge l’écriture.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.SetLength(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is negative or is greater than the maximum length of the <ph id="ph2">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph>, where the maximum length is(<ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> - origin), and origin is the index into the underlying buffer at which the stream starts.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> est négatif ou supérieur à la longueur maximale de <ph id="ph2">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph>, où la longueur maximale est (<ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> - origine), et l’origine est l’index dans la mémoire tampon sous-jacente auquel commence le flux.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.ToArray">
          <source>Writes the stream contents to a byte array, regardless of the <ph id="ph1">&lt;see cref="P:System.IO.MemoryStream.Position" /&gt;</ph> property.</source>
          <target state="translated">Écrit le contenu du flux dans un tableau d'octets, indépendamment de la propriété <ph id="ph1">&lt;see cref="P:System.IO.MemoryStream.Position" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.ToArray">
          <source>A new byte array.</source>
          <target state="translated">Nouveau tableau d'octets.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.ToArray">
          <source>This method omits unused bytes in <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> from the array.</source>
          <target state="translated">Cette méthode omet les octets inutilisés dans <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> à partir du tableau.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.ToArray">
          <source>To get the entire buffer, use the <ph id="ph1">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> method.</source>
          <target state="translated">Pour obtenir la mémoire tampon entière, utilisez la <ph id="ph1">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.ToArray">
          <source>This method returns a copy of the contents of the <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> as a byte array.</source>
          <target state="translated">Cette méthode retourne une copie du contenu de la <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> en tant que tableau d’octets.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.ToArray">
          <source>If the current instance was constructed on a provided byte array, a copy of the section of the array to which this instance has access is returned.</source>
          <target state="translated">Si l’instance actuelle a été construite sur un tableau d’octets fourni, une copie de la section du tableau à laquelle cette instance peut accéder est retournée.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.ToArray">
          <source>See the <ph id="ph1">&lt;xref:System.IO.MemoryStream.%23ctor%2A&gt;</ph> constructor for details.</source>
          <target state="translated">Consultez le <ph id="ph1">&lt;xref:System.IO.MemoryStream.%23ctor%2A&gt;</ph> constructeur pour plus d’informations.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.ToArray">
          <source>This method works when the <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> is closed.</source>
          <target state="translated">Cette méthode fonctionne quand le <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> est fermé.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)">
          <source>The byte array segment from which this stream was created.</source>
          <target state="translated">Segment de tableau d'octets à partir duquel ce flux a été créé.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)">
          <source>Returns the array of unsigned bytes from which this stream was created.</source>
          <target state="translated">Retourne le tableau d'octets non signés à partir duquel ce flux a été créé.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)">
          <source>The return value indicates whether the conversion succeeded.</source>
          <target state="translated">La valeur de retour indique si la conversion a réussi.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the conversion was successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la conversion a réussi ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer to write data from.</source>
          <target state="translated">Mémoire tampon dont sont issues les données à écrire.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin copying bytes to the current stream.</source>
          <target state="translated">Dans <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>, décalage d’octet de base zéro auquel commencer la copie des octets dans le flux actuel.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">Nombre maximal d'octets à écrire.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Writes a block of bytes to the current stream using data read from a buffer.</source>
          <target state="translated">Écrit un bloc d'octets dans le flux actuel en utilisant des données lues dans une mémoire tampon.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>This method overrides <ph id="ph1">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode se substitue à <ph id="ph1">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">`offset`</ph> parameter gives the offset of the first byte in <ph id="ph2">`buffer`</ph> to write from, and the <ph id="ph3">`count`</ph> parameter gives the number of bytes to write.</source>
          <target state="translated">Le <ph id="ph1">`offset`</ph> paramètre indique l’offset du premier octet dans <ph id="ph2">`buffer`</ph> écrire à partir et le <ph id="ph3">`count`</ph> paramètre indique le nombre d’octets à écrire.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If the write operation is successful, the current position within the stream is advanced by the number of bytes written.</source>
          <target state="translated">Si l’opération d’écriture réussit, la position actuelle dans le flux est avancée par le nombre d’octets écrits.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If an exception occurs, the current position within the stream is unchanged.</source>
          <target state="translated">Si une exception se produit, la position actuelle dans le flux de données est inchangée.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Except for a <ph id="ph1">`MemoryStream`</ph> constructed with a byte[] parameter, write operations at the end of a <ph id="ph2">`MemoryStream`</ph> expand the <ph id="ph3">`MemoryStream`</ph>.</source>
          <target state="translated">À l’exception d’un <ph id="ph1">`MemoryStream`</ph> construit avec un paramètre byte [], écrire des opérations à la fin d’un <ph id="ph2">`MemoryStream`</ph> développer le <ph id="ph3">`MemoryStream`</ph>.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support writing.</source>
          <target state="translated">Le flux ne prend pas en charge l'écriture.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>For additional information see <ph id="ph1">&lt;see cref="P:System.IO.Stream.CanWrite" /&gt;</ph>.</source>
          <target state="translated">Pour plus d’informations, consultez <ph id="ph1">&lt;see cref="P:System.IO.Stream.CanWrite" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The current position is closer than <ph id="ph1">&lt;paramref name="count" /&gt;</ph> bytes to the end of the stream, and the capacity cannot be modified.</source>
          <target state="translated">La position actuelle est à moins de <ph id="ph1">&lt;paramref name="count" /&gt;</ph> octets de la fin du flux et la capacité ne peut pas être modifiée.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> subtracted from the buffer length is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> soustrait de la longueur de la mémoire tampon est inférieur à <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> are negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est négatif.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">Une erreur d’E/S se produit.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The current stream instance is closed.</source>
          <target state="translated">L’instance du flux actuel est fermée.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write data from.</source>
          <target state="translated">Mémoire tampon dont sont issues les données à écrire.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin copying bytes to the stream.</source>
          <target state="translated">Le décalage en octets, commençant à zéro, dans <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>, où commencer la copie des octets dans le flux.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">Nombre maximal d'octets à écrire.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Jeton pour surveiller les requêtes d'annulation.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">La valeur par défaut est <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</source>
          <target state="translated">Écrit de façon asynchrone une séquence d'octets dans le flux actuel, avance la position actuelle dans ce flux du nombre d'octets écrits et surveille les demandes d'annulation.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">Tâche qui représente l’opération d’écriture asynchrone.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">Si l’opération est annulée avant la fin, la tâche retournée contient le <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> la valeur pour le <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>You can create a cancellation token by creating an instance of the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> class and passing the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> property as the <ph id="ph3">`cancellationToken`</ph> parameter.</source>
          <target state="translated">Vous pouvez créer un jeton d’annulation en créant une instance de la <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> classe et en passant le <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> propriété en tant que le <ph id="ph3">`cancellationToken`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est un nombre négatif.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">La somme de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> et de <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est supérieure à la longueur de la mémoire tampon.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream does not support writing.</source>
          <target state="translated">Le flux ne prend pas en charge l'écriture.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">Le flux a été supprimé.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream is currently in use by a previous write operation.</source>
          <target state="translated">Le flux est actuellement utilisé par une opération d’écriture précédente.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteByte(System.Byte)">
          <source>The byte to write.</source>
          <target state="translated">Octet à écrire.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteByte(System.Byte)">
          <source>Writes a byte to the current stream at the current position.</source>
          <target state="translated">Écrit un octet à la position actuelle dans le flux actuel.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.WriteByte(System.Byte)">
          <source>This method overrides <ph id="ph1">&lt;xref:System.IO.Stream.WriteByte%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode se substitue à <ph id="ph1">&lt;xref:System.IO.Stream.WriteByte%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.WriteByte(System.Byte)">
          <source>Except for a <ph id="ph1">`MemoryStream`</ph> constructed with a byte[] parameter, write operations at the end of a <ph id="ph2">`MemoryStream`</ph> expand the <ph id="ph3">`MemoryStream`</ph>.</source>
          <target state="translated">À l’exception d’un <ph id="ph1">`MemoryStream`</ph> construit avec un paramètre byte [], écrire des opérations à la fin d’un <ph id="ph2">`MemoryStream`</ph> développer le <ph id="ph3">`MemoryStream`</ph>.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.WriteByte(System.Byte)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteByte(System.Byte)">
          <source>The stream does not support writing.</source>
          <target state="translated">Le flux ne prend pas en charge l'écriture.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteByte(System.Byte)">
          <source>For additional information see <ph id="ph1">&lt;see cref="P:System.IO.Stream.CanWrite" /&gt;</ph>.</source>
          <target state="translated">Pour plus d’informations, consultez <ph id="ph1">&lt;see cref="P:System.IO.Stream.CanWrite" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteByte(System.Byte)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteByte(System.Byte)">
          <source>The current position is at the end of the stream, and the capacity cannot be modified.</source>
          <target state="translated">La position actuelle est à la fin du flux et la capacité ne peut pas être modifiée.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteByte(System.Byte)">
          <source>The current stream is closed.</source>
          <target state="translated">Le flux actuel est fermé.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
          <source>The stream to write this memory stream to.</source>
          <target state="translated">Flux dans lequel écrire ce flux de mémoire.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
          <source>Writes the entire contents of this memory stream to another stream.</source>
          <target state="translated">Écrit le contenu complet de ce flux de mémoire dans un autre flux.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
          <source>When the current stream is open, this method is equivalent to calling <ph id="ph1">&lt;xref:System.IO.Stream.Write%2A?displayProperty=nameWithType&gt;</ph> on the underlying buffer of this stream.</source>
          <target state="translated">Lorsque le flux actuel est ouvert, cette méthode équivaut à appeler la méthode <ph id="ph1">&lt;xref:System.IO.Stream.Write%2A?displayProperty=nameWithType&gt;</ph> sur la mémoire tampon sous-jacente de ce flux.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
          <source>The current or target stream is closed.</source>
          <target state="translated">Le flux en cours ou le flux cible est fermé.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>