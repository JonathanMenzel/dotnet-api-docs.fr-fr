<Type Name="WindowsRuntimeStreamExtensions" FullName="System.IO.WindowsRuntimeStreamExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="875502c86324cd7e5a5244ce809261d8b2fe0dc1" /><Meta Name="ms.sourcegitcommit" Value="4ee26ac79338b0bf99fa1e0913e8a06b21994d8e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/26/2019" /><Meta Name="ms.locfileid" Value="58460381" /></Metadata><TypeSignature Language="C#" Value="public static class WindowsRuntimeStreamExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit WindowsRuntimeStreamExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.WindowsRuntimeStreamExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module WindowsRuntimeStreamExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowsRuntimeStreamExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type WindowsRuntimeStreamExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.14.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="dotnet-uwp-10.0">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Contient des méthodes d’extension pour la conversion de flux dans le Windows Runtime et de flux managés dans .NET pour les applications Microsoft Store.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
## Remarks

Ces méthodes d’extension sont disponibles uniquement lorsque vous développez des applications du Windows Store. Les méthodes fournissent des moyens pratiques d’utilisation de flux dans les applications du Windows Store. Vous ne créez pas une instance de la `WindowsRuntimeStreamExtensions` classe ; au lieu de cela, vous utilisez ces méthodes à partir d’instances de la <xref:Windows.Storage.Streams.IInputStream> et <xref:Windows.Storage.Streams.IOutputStream> interfaces et la <xref:System.IO.Stream> classe.

Le `WindowsRuntimeStreamExtensions` classe contient deux méthodes pour la conversion managé <xref:System.IO.Stream> objet à un flux Windows Runtime :

  - <xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A>
  - <xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A>

Le `WindowsRuntimeStreamExtensions` classe contient trois méthodes surchargées pour la conversion d’un flux dans l’exécution de Windows pour un <xref:System.IO.Stream> objet :

  - <xref:System.IO.WindowsRuntimeStreamExtensions.AsStream%2A>
  - <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A>
  - <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A>

En commençant par le .NET Framework 4.5.1, le `WindowsRuntimeStreamExtensions` classe contient une méthode pour la conversion d’un flux de données à un Runtime Windows <xref:Windows.Storage.Streams.RandomAccessStream>:

  - <xref:System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream(System.IO.Stream)>

## Examples

L’exemple suivant montre comment utiliser le <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A> et <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A>

[!code-csharp[windowsruntimestreamextensions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/cs/blankpage.xaml.cs#2)]
[!code-vb[windowsruntimestreamextensions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/vb/blankpage.xaml.vb#2)]

Voici le code XAML qui est associé à l’exemple précédent. 

[!code-xaml[windowsruntimestreamextensions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/cs/blankpage.xaml#1)]
]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsInputStream">
      <MemberSignature Language="C#" Value="public static Windows.Storage.Streams.IInputStream AsInputStream (this System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.Storage.Streams.IInputStream AsInputStream(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStreamExtensions.AsInputStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::Storage::Streams::IInputStream ^ AsInputStream(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member AsInputStream : System.IO.Stream -&gt; Windows.Storage.Streams.IInputStream" Usage="System.IO.WindowsRuntimeStreamExtensions.AsInputStream stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Storage.Streams.IInputStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" RefType="this" />
      </Parameters>
      <Docs>
        <param name="stream">Flux à convertir.</param>
        <summary>Convertit un flux managé dans .NET pour les applications du Windows Store en un flux d’entrée Windows Runtime.</summary>
        <returns>Objet <see cref="T:Windows.Storage.Streams.IInputStream" /> Windows Runtime qui représente le flux converti.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
          
> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type < System.IO.Stream >. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

## Examples

L’exemple suivant montre comment utiliser le `AsInputStream` et <xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A> des méthodes pour convertir un flux managé vers et depuis un flux Windows Runtime.

[!code-csharp[windowsruntimestreamextensions#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/cs/blankpage2.xaml.cs#4)]
[!code-vb[windowsruntimestreamextensions#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/vb/blankpage2.xaml.vb#4)]

Voici le code XAML qui est associé à l’exemple précédent.

[!code-xaml[windowsruntimestreamextensions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/cs/blankpage2.xaml#3)]

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> est <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge la lecture.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsOutputStream">
      <MemberSignature Language="C#" Value="public static Windows.Storage.Streams.IOutputStream AsOutputStream (this System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.Storage.Streams.IOutputStream AsOutputStream(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::Storage::Streams::IOutputStream ^ AsOutputStream(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member AsOutputStream : System.IO.Stream -&gt; Windows.Storage.Streams.IOutputStream" Usage="System.IO.WindowsRuntimeStreamExtensions.AsOutputStream stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Storage.Streams.IOutputStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" RefType="this" />
      </Parameters>
      <Docs>
        <param name="stream">Flux à convertir.</param>
        <summary>Convertit un flux managé dans .NET pour les applications du Windows Store en un flux de sortie Windows Runtime.</summary>
        <returns>Objet <see cref="T:Windows.Storage.Streams.IOutputStream" /> Windows Runtime qui représente le flux converti.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:System.IO.Stream>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

## Examples

L’exemple suivant montre comment utiliser le <xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A> et `AsOutputStream`> méthodes pour convertir un flux managé vers et depuis un flux Windows Runtime.

[!code-csharp[windowsruntimestreamextensions#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/cs/blankpage2.xaml.cs#4)]
[!code-vb[windowsruntimestreamextensions#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/vb/blankpage2.xaml.vb#4)]

Voici le code XAML qui est associé à l’exemple précédent.

[!code-xaml[windowsruntimestreamextensions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/cs/blankpage2.xaml#3)]

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> est <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge la lecture.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsRandomAccessStream">
      <MemberSignature Language="C#" Value="public static Windows.Storage.Streams.IRandomAccessStream AsRandomAccessStream (this System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.Storage.Streams.IRandomAccessStream AsRandomAccessStream(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::Storage::Streams::IRandomAccessStream ^ AsRandomAccessStream(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member AsRandomAccessStream : System.IO.Stream -&gt; Windows.Storage.Streams.IRandomAccessStream" Usage="System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Storage.Streams.IRandomAccessStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" RefType="this" />
      </Parameters>
      <Docs>
        <param name="stream">Flux à convertir.</param>
        <summary>Convertit le flux spécifié en flux d'accès aléatoire.</summary>
        <returns><see cref="T:Windows.Storage.Streams.IRandomAccessStream" /> Windows Runtime qui représente le flux converti.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks


> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:System.IO.Stream>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsStream">
      <MemberSignature Language="C#" Value="public static System.IO.Stream AsStream (this Windows.Storage.Streams.IRandomAccessStream windowsRuntimeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream AsStream(class Windows.Storage.Streams.IRandomAccessStream windowsRuntimeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStreamExtensions.AsStream(Windows.Storage.Streams.IRandomAccessStream)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStream (windowsRuntimeStream As IRandomAccessStream) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::IO::Stream ^ AsStream(Windows::Storage::Streams::IRandomAccessStream ^ windowsRuntimeStream);" />
      <MemberSignature Language="F#" Value="static member AsStream : Windows.Storage.Streams.IRandomAccessStream -&gt; System.IO.Stream" Usage="System.IO.WindowsRuntimeStreamExtensions.AsStream windowsRuntimeStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="windowsRuntimeStream" Type="Windows.Storage.Streams.IRandomAccessStream" RefType="this" />
      </Parameters>
      <Docs>
        <param name="windowsRuntimeStream">Objet <see cref="T:Windows.Storage.Streams.IRandomAccessStream" /> Windows Runtime à convertir.</param>
        <summary>Convertit un flux d’accès aléatoire Windows Runtime en un flux managé dans .NET pour les applications du Windows Store.</summary>
        <returns>Flux converti.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:System.IO.Stream>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

Une taille de mémoire tampon par défaut de 16 384 octets est utilisée lors de la conversion du flux. Pour spécifier une taille de mémoire tampon différente, utilisez la <xref:System.IO.WindowsRuntimeStreamExtensions.AsStream(Windows.Storage.Streams.IRandomAccessStream,System.Int32)> de surcharge.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="windowsRuntimeStream" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsStream">
      <MemberSignature Language="C#" Value="public static System.IO.Stream AsStream (this Windows.Storage.Streams.IRandomAccessStream windowsRuntimeStream, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream AsStream(class Windows.Storage.Streams.IRandomAccessStream windowsRuntimeStream, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStreamExtensions.AsStream(Windows.Storage.Streams.IRandomAccessStream,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStream (windowsRuntimeStream As IRandomAccessStream, bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::IO::Stream ^ AsStream(Windows::Storage::Streams::IRandomAccessStream ^ windowsRuntimeStream, int bufferSize);" />
      <MemberSignature Language="F#" Value="static member AsStream : Windows.Storage.Streams.IRandomAccessStream * int -&gt; System.IO.Stream" Usage="System.IO.WindowsRuntimeStreamExtensions.AsStream (windowsRuntimeStream, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="windowsRuntimeStream" Type="Windows.Storage.Streams.IRandomAccessStream" RefType="this" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="windowsRuntimeStream">Objet <see cref="T:Windows.Storage.Streams.IRandomAccessStream" /> Windows Runtime à convertir.</param>
        <param name="bufferSize">Taille en octets de la mémoire tampon. Cette valeur ne peut pas être négative, mais elle peut avoir la valeur 0 (zéro) pour désactiver la mise en mémoire tampon.</param>
        <summary>Convertit un flux d’accès aléatoire Windows Runtime en un flux managé dans .NET pour les applications du Windows Store utilisant la taille de mémoire tampon spécifiée.</summary>
        <returns>Flux converti.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:System.IO.Stream>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

Cette méthode vous permet de spécifier une taille de mémoire tampon lors de la conversion du flux. Pour utiliser la taille de mémoire tampon par défaut de 16 384 octets, utilisez le <xref:System.IO.WindowsRuntimeStreamExtensions.AsStream(Windows.Storage.Streams.IRandomAccessStream)> de surcharge.

Dans la plupart des cas, la mise en mémoire tampon améliore les performances des opérations de flux. Vous pouvez désactiver la mise en mémoire tampon en définissant `bufferSize` à zéro, mais vous devez le faire uniquement lorsque vous êtes sûr que la désactivation de mise en mémoire tampon est appropriée à votre situation.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="windowsRuntimeStream" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize" /> est un nombre négatif.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsStreamForRead">
      <MemberSignature Language="C#" Value="public static System.IO.Stream AsStreamForRead (this Windows.Storage.Streams.IInputStream windowsRuntimeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream AsStreamForRead(class Windows.Storage.Streams.IInputStream windowsRuntimeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead(Windows.Storage.Streams.IInputStream)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStreamForRead (windowsRuntimeStream As IInputStream) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::IO::Stream ^ AsStreamForRead(Windows::Storage::Streams::IInputStream ^ windowsRuntimeStream);" />
      <MemberSignature Language="F#" Value="static member AsStreamForRead : Windows.Storage.Streams.IInputStream -&gt; System.IO.Stream" Usage="System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead windowsRuntimeStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="windowsRuntimeStream" Type="Windows.Storage.Streams.IInputStream" RefType="this" />
      </Parameters>
      <Docs>
        <param name="windowsRuntimeStream">Objet <see cref="T:Windows.Storage.Streams.IInputStream" /> Windows Runtime à convertir.</param>
        <summary>Convertit un flux d’entrée Windows Runtime en un flux managé dans .NET pour les applications du Windows Store.</summary>
        <returns>Flux converti.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:System.IO.Stream>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

Une taille de mémoire tampon par défaut de 16 384 octets est utilisée lors de la conversion du flux. Pour spécifier une taille de mémoire tampon différente, utilisez la <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead(Windows.Storage.Streams.IInputStream,System.Int32)> de surcharge.

## Examples

L’exemple suivant montre comment utiliser le <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A> et <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A> des méthodes pour convertir un flux managé vers et depuis un flux Windows Runtime.

[!code-csharp[windowsruntimestreamextensions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/cs/blankpage.xaml.cs#2)]
[!code-vb[windowsruntimestreamextensions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/vb/blankpage.xaml.vb#2)]

Voici le code XAML qui est associé à l’exemple précédent.

[!code-xaml[windowsruntimestreamextensions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/cs/blankpage.xaml#1)]

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="windowsRuntimeStream" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsStreamForRead">
      <MemberSignature Language="C#" Value="public static System.IO.Stream AsStreamForRead (this Windows.Storage.Streams.IInputStream windowsRuntimeStream, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream AsStreamForRead(class Windows.Storage.Streams.IInputStream windowsRuntimeStream, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead(Windows.Storage.Streams.IInputStream,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStreamForRead (windowsRuntimeStream As IInputStream, bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::IO::Stream ^ AsStreamForRead(Windows::Storage::Streams::IInputStream ^ windowsRuntimeStream, int bufferSize);" />
      <MemberSignature Language="F#" Value="static member AsStreamForRead : Windows.Storage.Streams.IInputStream * int -&gt; System.IO.Stream" Usage="System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead (windowsRuntimeStream, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="windowsRuntimeStream" Type="Windows.Storage.Streams.IInputStream" RefType="this" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="windowsRuntimeStream">Objet <see xref="T:Windows.Storage.Streams.IInputStream" /> Windows Runtime à convertir.</param>
        <param name="bufferSize">Taille en octets de la mémoire tampon. Cette valeur ne peut pas être négative, mais elle peut avoir la valeur 0 (zéro) pour désactiver la mise en mémoire tampon.</param>
        <summary>Convertit un flux d’entrée dans Windows Runtime en un flux managé dans .NET pour les applications du Windows 8.x Store utilisant la taille de mémoire tampon spécifiée.</summary>
        <returns>Flux converti.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:System.IO.Stream>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

Cette méthode vous permet de spécifier une taille de mémoire tampon lors de la conversion du flux. Pour utiliser la taille de mémoire tampon par défaut de 16 384 octets, utilisez le <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead(Windows.Storage.Streams.IInputStream)> de surcharge.

Dans la plupart des cas, la mise en mémoire tampon améliore les performances des opérations de flux. Vous pouvez désactiver la mise en mémoire tampon en définissant `bufferSize` à zéro, mais vous devez le faire uniquement lorsque vous êtes sûr que la désactivation de mise en mémoire tampon est appropriée à votre situation.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="windowsRuntimeStream" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize" /> est un nombre négatif.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsStreamForWrite">
      <MemberSignature Language="C#" Value="public static System.IO.Stream AsStreamForWrite (this Windows.Storage.Streams.IOutputStream windowsRuntimeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream AsStreamForWrite(class Windows.Storage.Streams.IOutputStream windowsRuntimeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite(Windows.Storage.Streams.IOutputStream)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStreamForWrite (windowsRuntimeStream As IOutputStream) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::IO::Stream ^ AsStreamForWrite(Windows::Storage::Streams::IOutputStream ^ windowsRuntimeStream);" />
      <MemberSignature Language="F#" Value="static member AsStreamForWrite : Windows.Storage.Streams.IOutputStream -&gt; System.IO.Stream" Usage="System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite windowsRuntimeStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="windowsRuntimeStream" Type="Windows.Storage.Streams.IOutputStream" RefType="this" />
      </Parameters>
      <Docs>
        <param name="windowsRuntimeStream">Objet <see xref="T:Windows.Storage.Streams.IOutputStream" /> Windows Runtime à convertir.</param>
        <summary>Convertit un flux de sortie Windows Runtime en un flux managé dans .NET pour les applications du Windows 8.x Store.</summary>
        <returns>Flux converti.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:System.IO.Stream>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

Une taille de mémoire tampon par défaut de 16 384 octets est utilisée lors de la conversion du flux. Pour spécifier une taille de mémoire tampon différente, utilisez la <xref:> de surcharge.

## Examples
L’exemple suivant montre comment utiliser le <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A> et <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A> des méthodes pour convertir un flux managé vers et depuis un flux Windows Runtime.

[!code-csharp[windowsruntimestreamextensions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/cs/blankpage.xaml.cs#2)]
[!code-vb[windowsruntimestreamextensions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/vb/blankpage.xaml.vb#2)]

Voici le code XAML qui est associé à l’exemple précédent.

[!code-xaml[windowsruntimestreamextensions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.windowsruntimestreamextensions/cs/blankpage.xaml#1)]

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="windowsRuntimeStream" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsStreamForWrite">
      <MemberSignature Language="C#" Value="public static System.IO.Stream AsStreamForWrite (this Windows.Storage.Streams.IOutputStream windowsRuntimeStream, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream AsStreamForWrite(class Windows.Storage.Streams.IOutputStream windowsRuntimeStream, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite(Windows.Storage.Streams.IOutputStream,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsStreamForWrite (windowsRuntimeStream As IOutputStream, bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::IO::Stream ^ AsStreamForWrite(Windows::Storage::Streams::IOutputStream ^ windowsRuntimeStream, int bufferSize);" />
      <MemberSignature Language="F#" Value="static member AsStreamForWrite : Windows.Storage.Streams.IOutputStream * int -&gt; System.IO.Stream" Usage="System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite (windowsRuntimeStream, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="windowsRuntimeStream" Type="Windows.Storage.Streams.IOutputStream" RefType="this" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="windowsRuntimeStream">Objet <see cref="T:Windows.Storage.Streams.IOutputStream" /> Windows Runtime à convertir.</param>
        <param name="bufferSize">Taille en octets de la mémoire tampon. Cette valeur ne peut pas être négative, mais elle peut avoir la valeur 0 (zéro) pour désactiver la mise en mémoire tampon.</param>
        <summary>Convertit un flux de sortie dans Windows Runtime en un flux managé dans .NET pour les applications du Windows Store utilisant la taille de mémoire tampon spécifiée.</summary>
        <returns>Flux converti.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
> En Visual Basic et C#, vous pouvez appeler cette méthode comme une méthode d’instance sur n’importe quel objet de type <xref:System.IO.Stream>. Lorsque vous utilisez la syntaxe des méthodes d'instance pour appeler cette méthode, omettez le premier paramètre. Pour plus d’informations, consultez [méthodes d’Extension (Visual Basic)](~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md) ou [méthodes d’Extension (C# Guide de programmation)](~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md).

Cette méthode vous permet de spécifier une taille de mémoire tampon lors de la conversion du flux. Pour utiliser la taille de mémoire tampon par défaut de 16 384 octets, utilisez le <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite(Windows.Storage.Streams.IOutputStream)> de surcharge.

Dans la plupart des cas, la mise en mémoire tampon améliore les performances des opérations de flux. Vous pouvez désactiver la mise en mémoire tampon en définissant `bufferSize` à zéro, mais vous devez le faire uniquement lorsque vous êtes sûr que la désactivation de mise en mémoire tampon est appropriée à votre situation.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="windowsRuntimeStream" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize" /> est un nombre négatif.</exception>
      </Docs>
    </Member>
  </Members>
</Type>