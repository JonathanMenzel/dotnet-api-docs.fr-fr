<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TextPatternRange.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac574dfdd5ae0a87bdb2a31efbb0677af6fceb37f4b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">74dfdd5ae0a87bdb2a31efbb0677af6fceb37f4b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Automation.Text.TextPatternRange">
          <source>Represents a span of continuous text in a <ph id="ph1">&lt;see cref="T:System.Windows.Automation.TextPattern" /&gt;</ph> container.</source>
          <target state="translated">Représente une étendue de texte continu dans un conteneur <ph id="ph1">&lt;see cref="T:System.Windows.Automation.TextPattern" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Automation.Text.TextPatternRange">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange&gt;</ph> can represent an insertion point, a subset, or all of the text in a <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> container.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange&gt;</ph> peut représenter un point d’insertion, un sous-ensemble ou tout le texte dans un <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> conteneur.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Automation.Text.TextPatternRange">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange&gt;</ph> will become invalid if one of the following occurs: the text in the <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> container changes because of some user activity, or the <ph id="ph3">&lt;xref:System.Windows.Automation.ValuePattern.SetValue%2A&gt;</ph> method of <ph id="ph4">&lt;xref:System.Windows.Automation.ValuePattern&gt;</ph> is used to programmatically change the value of the text in the <ph id="ph5">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> container.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange&gt;</ph> deviendront non valides si une des actions suivantes se produit : le texte dans le <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> conteneur change en raison d’une activité utilisateur ou le <ph id="ph3">&lt;xref:System.Windows.Automation.ValuePattern.SetValue%2A&gt;</ph> méthode de <ph id="ph4">&lt;xref:System.Windows.Automation.ValuePattern&gt;</ph> permet de modifier par programmation la valeur du texte dans le <ph id="ph5">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> conteneur.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection">
          <source>Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</source>
          <target state="translated">Ajoute à la collection de texte mis en surbrillance dans un conteneur de texte qui prend en charge les sélections multiples et disjointes.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection">
          <source>The text insertion point moves to the area of the new selection.</source>
          <target state="translated">Le point d’insertion se déplace vers la zone de la nouvelle sélection.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection">
          <source>Providing a degenerate text range moves the insertion point.</source>
          <target state="translated">En fournissant une plage de texte dégénérée déplace le point d’insertion.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection">
          <source>If text provider does not support multiple, disjoint selections (for example, <ph id="ph1">&lt;see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /&gt;</ph> must have a value of <ph id="ph2">&lt;see langword="Multiple" /&gt;</ph>).</source>
          <target state="translated">Si le fournisseur de texte ne prend pas en charge les sélections multiples disjointes (par exemple, <ph id="ph1">&lt;see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /&gt;</ph> doit avoir la valeur <ph id="ph2">&lt;see langword="Multiple" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Clone">
          <source>Retrieves a new <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Text.TextPatternRange" /&gt;</ph> identical to the original <ph id="ph2">&lt;see cref="T:System.Windows.Automation.Text.TextPatternRange" /&gt;</ph> and inheriting all properties of the original.</source>
          <target state="translated">Récupère une nouvelle plage <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Text.TextPatternRange" /&gt;</ph> identique à la plage <ph id="ph2">&lt;see cref="T:System.Windows.Automation.Text.TextPatternRange" /&gt;</ph> d'origine et héritant de toutes les propriétés de l'original.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Clone">
          <source>The new text range.</source>
          <target state="translated">Nouvelle plage de texte.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Clone">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA#tla_visualbnet](~/includes/tlasharptla-visualbnet-md.md)]</ph>) is never returned.</source>
          <target state="translated">Il n'est jamais retourné de référence Null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> dans <ph id="ph2">[!INCLUDE[TLA#tla_visualbnet](~/includes/tlasharptla-visualbnet-md.md)]</ph>).</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Clone">
          <source>Alternatively, create a new <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> from the <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> and move the two endpoints to correspond with the endpoints of the original text range.</source>
          <target state="translated">Vous pouvez également créer un nouveau <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> à partir de la <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> et déplacez les deux points de terminaison afin qu’ils correspondent aux points de terminaison de la plage de texte d’origine.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Clone">
          <source>The new range can be manipulated independently from the original.</source>
          <target state="translated">La nouvelle plage peut être manipulée indépendamment de l’original.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)">
          <source>A text range to compare.</source>
          <target state="translated">Plage de texte à comparer.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> value indicating whether the span (the <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> endpoint to the <ph id="ph3">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> endpoint) of a text range is the same as another text range.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> qui indique si l'étendue (du point de terminaison <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> au point de terminaison <ph id="ph3">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph>) d'une plage de texte est la même qu'une autre plage de texte.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the span of both text ranges is identical; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'étendue des deux plages de texte est identique ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)">
          <source>If the range being compared does not come from the same text provider.</source>
          <target state="translated">Si la plage qui est comparée ne vient pas du même fournisseur de textes.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>The <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> endpoint of the caller.</source>
          <target state="translated">Point de terminaison <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> ou <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> de l'appelant.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>The target range for comparison.</source>
          <target state="translated">Plage cible à comparer.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>The <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> endpoint of the target.</source>
          <target state="translated">Point de terminaison <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> ou <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> de la cible.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> indicating whether two text ranges have identical endpoints.</source>
          <target state="translated">Retourne un élément <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> qui indique si deux plages de texte ont des points de terminaison identiques.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.</source>
          <target state="translated">Retourne une valeur négative si le point de terminaison de l'appelant se situe dans le texte avant le point de terminaison cible.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Returns zero if the caller's endpoint is at the same location as the target endpoint.</source>
          <target state="translated">Retourne zéro si le point de terminaison de l'appelant est au même emplacement que le point de terminaison cible.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.</source>
          <target state="translated">Retourne une valeur positive si le point de terminaison de l'appelant se situe dans le texte après le point de terminaison cible.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>By comparing the starting and ending endpoints of the same text range you can identify if a text range is degenerate or if the endpoints are in the order of logical text flow.</source>
          <target state="translated">En comparant les points de terminaison de début et de fin de la même plage de texte, vous pouvez identifier si une plage de texte est dégénérée ou si les points de terminaison sont dans l’ordre de flux de texte logique.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>If range is a null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA#tla_visualbnet](~/includes/tlasharptla-visualbnet-md.md)]</ph>).</source>
          <target state="translated">Si la plage est une référence Null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> sous <ph id="ph2">[!INCLUDE[TLA#tla_visualbnet](~/includes/tlasharptla-visualbnet-md.md)]</ph>).</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>If range is from another container.</source>
          <target state="translated">Si la plage est d'un autre conteneur.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The textual unit.</source>
          <target state="translated">Unité de texte.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>Expands the text range to the specified <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Text.TextUnit" /&gt;</ph>.</source>
          <target state="translated">Développe la plage de texte à l'élément <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Text.TextUnit" /&gt;</ph> spécifié.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>If the range is already an exact quantity of the specified units then it remains unchanged.</source>
          <target state="translated">Si la plage est déjà une quantité exacte d’unités spécifiées, elle reste inchangée.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>In order for the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A&gt;</ph> method to execute successfully, a sequence of actions is performed behind the scenes.</source>
          <target state="translated">Dans l’ordre pour la <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A&gt;</ph> méthode s’exécute correctement, une séquence d’actions est exécutée en arrière-plan.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint, making the <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint superfluous.</source>
          <target state="translated">La plage de texte est normalisée ; Autrement dit, la plage de texte est réduite en une plage dégénérée au niveau du <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> point de terminaison, qui effectue la <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> superflu de point de terminaison.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt><ph id="ph2">http://www.microsoft.com</ph><ept id="p1">](http://www.microsoft.com)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
          <target state="translated">Cette étape est nécessaire pour supprimer toute ambiguïté dans les situations où une plage de texte s’étend sur <ph id="ph1">`unit`</ph> limites ; par exemple, « {l’U} RL <bpt id="p1">[</bpt> <ph id="ph2">http://www.microsoft.com</ph> <ept id="p1">](http://www.microsoft.com)</ept> est incorporée dans le texte » où « { » et «} » est des points de terminaison de plage de texte.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The resulting range is moved backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> to the beginning of the requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">La plage obtenue est déplacée vers l'arrière dans <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> au début de la limite <ph id="ph2">`unit`</ph> demandée.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The range is moved forward or backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> by the requested number of <ph id="ph2">`unit`</ph> boundaries.</source>
          <target state="translated">La plage est avancée ou reculée dans <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> du nombre demandé de limites <ph id="ph2">`unit`</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The range is then expanded from a degenerate range state by moving the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint by one requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">La plage est ensuite étendue à partir d'un état de plage dégénérée en déplaçant le point de terminaison <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> d'une limite <ph id="ph2">`unit`</ph> demandée.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Ajustements de plage par Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>ajustements de plage par Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</source>
          <target state="translated">Exemples de la façon dont une plage de texte est ajustée pour Move() et ExpandToEnclosingUnit()</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.</source>
          <target state="translated">Ces étapes sont nécessaires, car il est courant pour un lecteur d’écran lire un mot complet, une phrase ou un paragraphe entier au point d’insertion ou de n’importe quelle position de curseur virtuel.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A&gt;</ph> respects both hidden and visible text.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A&gt;</ph> respecte le texte masqué et visible.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The UI Automation client can check the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> for text visibility.</source>
          <target state="translated">Le client UI Automation puisse vérifier le <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> visibilité du texte.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A&gt;</ph> defers to the next largest <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> supported if the given <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> is not supported by the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A&gt;</ph> défère à la prochaine plus grande <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> prise en charge si la donnée <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> n’est pas pris en charge par le contrôle.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The order, from smallest unit to largest, is listed below.</source>
          <target state="translated">L’ordre, à partir de la plus petite unité au plus grand, est répertoriée ci-dessous.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)">
          <source>The attribute to search for.</source>
          <target state="translated">Attribut à rechercher.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)">
          <source>The attribute value to search for.</source>
          <target state="translated">Valeur d'attribut à rechercher.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)">
          <source>This value must match the type specified for the attribute.</source>
          <target state="translated">Cette valeur doit correspondre au type spécifié pour l'attribut.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the last occurring text range should be returned instead of the first; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la dernière plage de texte doit être retournée à la place de la première ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)">
          <source>Returns a text range subset that has the specified attribute value.</source>
          <target state="translated">Retourne un sous-ensemble de la plage de texte qui a la valeur d'attribut spécifiée.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)">
          <source>A text range having a matching attribute and attribute value; otherwise null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA#tla_visualbnet](~/includes/tlasharptla-visualbnet-md.md)]</ph>).</source>
          <target state="translated">Plage de texte dont l'attribut et la valeur d'attribut correspondent ; sinon, Null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> dans <ph id="ph2">[!INCLUDE[TLA#tla_visualbnet](~/includes/tlasharptla-visualbnet-md.md)]</ph>).</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)">
          <source>There is no differentiation between hidden and visible text.</source>
          <target state="translated">Il n’existe aucune distinction entre du texte masqué et visible.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)">
          <source>UI Automation clients can use <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> to check text visibility.</source>
          <target state="translated">Clients UI Automation peuvent utiliser <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> pour vérifier la visibilité du texte.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> to search the entire document.</source>
          <target state="translated">Utilisez <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> pour rechercher le document entier.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)">
          <source>The text string to search for.</source>
          <target state="translated">Chaîne de texte à rechercher.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the last occurring text range should be returned instead of the first; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la dernière plage de texte doit être retournée à la place de la première ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if case should be ignored; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la casse doit être ignorée ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)">
          <source>Returns a text range subset that contains the specified text.</source>
          <target state="translated">Retourne un sous-ensemble de la plage de texte qui contient le texte spécifié.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)">
          <source>A text range matching the specified text; otherwise null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA#tla_visualbnet](~/includes/tlasharptla-visualbnet-md.md)]</ph>).</source>
          <target state="translated">Plage de texte qui correspond au texte spécifié ; sinon, Null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> dans <ph id="ph2">[!INCLUDE[TLA#tla_visualbnet](~/includes/tlasharptla-visualbnet-md.md)]</ph>).</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)">
          <source>There is no differentiation between hidden and visible text.</source>
          <target state="translated">Il n’existe aucune distinction entre du texte masqué et visible.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)">
          <source>UI Automation clients can use <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> to check text visibility.</source>
          <target state="translated">Clients UI Automation peuvent utiliser <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> pour vérifier la visibilité du texte.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> to search the entire document.</source>
          <target state="translated">Utilisez <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> pour rechercher le document entier.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)">
          <source>The text attribute.</source>
          <target state="translated">Attribut de texte.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)">
          <source>Returns the value of the specified attribute across the entire text range.</source>
          <target state="translated">Retourne la valeur de l'attribut spécifié sur la totalité de la plage de texte.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)">
          <source>Returns the value of the specified attribute.</source>
          <target state="translated">Retourne la valeur de l'attribut spécifié.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)">
          <source>For example, GetAttributeValue(TextPattern.FontNameAttribute) would return a string that represents the font name, if unique, of the text range while GetAttributeValue(TextPattern.IsItalicAttribute) would return a boolean.</source>
          <target state="translated">Par exemple, GetAttributeValue (TextPattern.FontNameAttribute) retourne une chaîne qui représente le nom de la police, si elle est unique, de la plage de texte, tandis que GetAttributeValue (TextPattern.IsItalicAttribute) retourne un booléen.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)">
          <source>Returns <ph id="ph1">&lt;see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /&gt;</ph> if the value of the specified attribute varies over the text range.</source>
          <target state="translated">Retourne <ph id="ph1">&lt;see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /&gt;</ph> si la valeur de l'attribut spécifié varie sur la plage de texte.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)">
          <source>Returns <ph id="ph1">&lt;see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /&gt;</ph> if the specified attribute is not supported by the provider or the control.</source>
          <target state="translated">Retourne <ph id="ph1">&lt;see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /&gt;</ph> si l'attribut spécifié n'est pas pris en charge par le fournisseur ou par le contrôle.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)">
          <source>There is no differentiation between hidden and visible text.</source>
          <target state="translated">Il n’existe aucune distinction entre du texte masqué et visible.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)">
          <source>UI Automation clients can use <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> to check text visibility.</source>
          <target state="translated">Clients UI Automation peuvent utiliser <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> pour vérifier la visibilité du texte.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)">
          <source>If the specified attribute is not valid.</source>
          <target state="translated">Si l’attribut spécifié n’est pas valide.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles">
          <source>Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</source>
          <target state="translated">Récupère une collection de rectangles englobants pour chaque ligne de texte complètement ou partiellement visible dans une plage de texte.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles">
          <source>An array of bounding rectangles for each full or partial line of text in a text range.</source>
          <target state="translated">Tableau de rectangles englobants pour chaque ligne de texte complète ou partielle dans une plage de texte.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles">
          <source>An empty array for a degenerate text range.</source>
          <target state="translated">Tableau vide pour une plage de texte dégénérée.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles">
          <source>An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.</source>
          <target state="translated">Tableau vide pour une plage de texte qui a des coordonnées d'écran qui la placent complètement hors écran, qui la font défiler en dehors de l'affichage ou qui la masquent par une fenêtre superposée.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetChildren">
          <source>Retrieves a collection of all embedded objects that fall within the text range.</source>
          <target state="translated">Récupère une collection de tous les objets incorporés qui se trouvent dans la plage de texte.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetChildren">
          <source>A collection of all child objects that fall within the range.</source>
          <target state="translated">Une collection de tous les objets enfants qui se trouvent dans la plage.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetChildren">
          <source>Children that overlap with the range but are not entirely enclosed by it will also be included in the collection.</source>
          <target state="translated">Les enfants superposés à la plage mais qui ne sont pas entièrement contenus dans la plage sont également inclus dans la collection.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetChildren">
          <source>Returns an empty collection if there are no child objects.</source>
          <target state="translated">Retourne une collection vide s’il n’y a pas d’objets enfants.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement">
          <source>Returns the innermost <ph id="ph1">&lt;see cref="T:System.Windows.Automation.AutomationElement" /&gt;</ph> that encloses the text range.</source>
          <target state="translated">Retourne l'élément <ph id="ph1">&lt;see cref="T:System.Windows.Automation.AutomationElement" /&gt;</ph> le plus profond qui encadre la plage de texte.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement">
          <source>The innermost element enclosing the caller.</source>
          <target state="translated">L'élément le plus profond qui contient l'appelant.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement">
          <source>The enclosing <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph>, typically the text provider that supplies the text range.</source>
          <target state="translated">La forme <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph>, en général le fournisseur de texte qui fournit la plage de texte.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement">
          <source>However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.</source>
          <target state="translated">Cependant, si le fournisseur de texte prend en charge des éléments enfants comme des tables ou des liens hypertexte, l'élément englobant peut être un descendant du fournisseur de texte.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)">
          <source>The maximum length of the string to return.</source>
          <target state="translated">Longueur maximale de la chaîne à retourner.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)">
          <source>Use <bpt id="p1">&lt;c&gt;</bpt>-1<ept id="p1">&lt;/c&gt;</ept> if no limit is required.</source>
          <target state="translated">Utilisez <bpt id="p1">&lt;c&gt;</bpt>-1<ept id="p1">&lt;/c&gt;</ept> si aucune limite n'est exigée.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)">
          <source>Returns the plain text of the text range.</source>
          <target state="translated">Retourne le texte brut de la plage de texte.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)">
          <source>The plain text of the text range, possibly truncated at the specified <ph id="ph1">&lt;paramref name="maxLength" /&gt;</ph>.</source>
          <target state="translated">Texte brut de la plage de texte, éventuellement tronqué à la longueur <ph id="ph1">&lt;paramref name="maxLength" /&gt;</ph> spécifiée.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A&gt;</ph> respects both hidden and visible text.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A&gt;</ph> respecte le texte masqué et visible.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)">
          <source>The UI Automation client can check the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> for text visibility.</source>
          <target state="translated">Le client UI Automation puisse vérifier le <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> visibilité du texte.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)">
          <source>If <ph id="ph1">`maxLength`</ph> is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.</source>
          <target state="translated">Si <ph id="ph1">`maxLength`</ph> est supérieur à la longueur de l’étendue de texte de l’appelant, la chaîne retournée sera le texte brut de la plage de texte.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A&gt;</ph> will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A&gt;</ph> ne seront pas affectées par l’ordre des points de terminaison dans le flux de texte ; elle retourne toujours le texte entre les points de terminaison de début et de fin de la plage de texte dans l’ordre de flux de texte logique.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)">
          <source>If <ph id="ph1">&lt;paramref name="maxLength" /&gt;</ph> is less than -1.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="maxLength" /&gt;</ph> est inférieure à -1.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The text unit boundary.</source>
          <target state="translated">Limite d'unité de texte.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The number of text units to move.</source>
          <target state="translated">Nombre d'unités de texte à déplacer.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.</source>
          <target state="translated">Une valeur positive déplace la plage de texte vers l'avant, une valeur négative déplace la plage de texte vers l'arrière. 0 n'a aucun effet.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Moves the text range the specified number of text units.</source>
          <target state="translated">Déplace la plage de texte du nombre spécifié d'unités de texte.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The number of units actually moved.</source>
          <target state="translated">Nombre d'unités réellement déplacées.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>This can be less than the number requested if either of the new text range endpoints is greater than or less than the <ph id="ph1">&lt;see cref="P:System.Windows.Automation.TextPattern.DocumentRange" /&gt;</ph> endpoints.</source>
          <target state="translated">Ce peut être moins que le nombre requis si l'un ou l'autre des nouveaux points de terminaison de plage de texte est supérieur ou inférieur aux points de terminaison de <ph id="ph1">&lt;see cref="P:System.Windows.Automation.TextPattern.DocumentRange" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt;</ph> method to execute successfully.</source>
          <target state="translated">Quand il est nécessaire de parcourir le contenu d'une plage de texte, il faut effectuer une série d'étapes en arrière-plan pour assurer la bonne exécution de la méthode <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt;</ph> .</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint, which makes the <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint superfluous.</source>
          <target state="translated">La plage de texte est normalisée : elle est réduite en une plage dégénérée au niveau du point de terminaison <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> , rendant le point de terminaison <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> superflu.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt><ph id="ph2">http://www.microsoft.com</ph><ept id="p1">](http://www.microsoft.com)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
          <target state="translated">Cette étape est nécessaire pour supprimer toute ambiguïté dans les situations où une plage de texte s’étend sur <ph id="ph1">`unit`</ph> limites ; par exemple, « {l’U} RL <bpt id="p1">[</bpt> <ph id="ph2">http://www.microsoft.com</ph> <ept id="p1">](http://www.microsoft.com)</ept> est incorporée dans le texte » où « { » et «} » est des points de terminaison de plage de texte.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The resulting range is moved backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> to the beginning of the requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">La plage obtenue est déplacée vers l'arrière dans <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> au début de la limite <ph id="ph2">`unit`</ph> demandée.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The range is moved forward or backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> by the requested number of <ph id="ph2">`unit`</ph> boundaries.</source>
          <target state="translated">La plage est avancée ou reculée dans <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> du nombre demandé de limites <ph id="ph2">`unit`</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The range is then expanded from a degenerate range state by moving the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint by one requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">La plage est ensuite étendue à partir d'un état de plage dégénérée en déplaçant le point de terminaison <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> d'une limite <ph id="ph2">`unit`</ph> demandée.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Ajustements de plage par Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>ajustements de plage par Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</source>
          <target state="translated">Exemples de la façon dont une plage de texte est ajustée pour Move() et ExpandToEnclosingUnit()</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> tree; object boundaries are ignored.</source>
          <target state="translated">Le contenu textuel (ou texte interne) d'un conteneur de texte et d'un objet incorporé, tel qu'un lien hypertexte ou une cellule de tableau, est exposé en tant que flux de texte unique et continu dans l'affichage de contrôle et l'affichage du contenu de l'arborescence <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> ; le contour des objets est ignoré.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.</source>
          <target state="translated">Si un client UI Automation récupère le texte à des fins de récitation, interprétation ou analyse de quelque façon que ce soit, vous devez vérifier les cas spéciaux de la plage de texte, tels qu’un tableau avec du contenu textuel ou d’autres objets incorporés.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>This can be accomplished by calling <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt;</ph> to obtain an <ph id="ph2">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph> for each embedded object and then calling <ph id="ph3">&lt;xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt;</ph> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.</source>
          <target state="translated">Cela peut être accompli en appelant <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt;</ph> pour obtenir un <ph id="ph2">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph> pour chaque objet incorporé, puis à appeler <ph id="ph3">&lt;xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt;</ph> pour obtenir une plage de texte pour chaque élément ; cette action se répète jusqu'à ce que tout le contenu textuel a été récupéré.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><bpt id="p1">![</bpt>Text ranges spanned by embedded objects.<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-embeddedobjecttextranges.png "</bpt>Text ranges spanned by embedded objects.<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Plages de texte couvertes par les objets incorporés. <ept id="p1">]</ept> <bpt id="p2">(~/add/media/uia-textpattern-embeddedobjecttextranges.png "</bpt>Couvertes par les objets incorporés de plages de texte.<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Example of a text stream with embedded objects and their range spans</source>
          <target state="translated">Exemple de flux de texte avec des objets incorporés et leurs amplitudes</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt;</ph> respects both hidden and visible text.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt;</ph> respecte le texte masqué et visible.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The UI Automation client can check the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> for text visibility.</source>
          <target state="translated">Le client UI Automation puisse vérifier le <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> visibilité du texte.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt;</ph> defers to the next largest <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> supported if the given <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> is not supported by the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt;</ph> défère à la prochaine plus grande <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> prise en charge si la donnée <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> n’est pas pris en charge par le contrôle.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The order, from smallest unit to largest, is listed below.</source>
          <target state="translated">L’ordre, à partir de la plus petite unité au plus grand, est répertoriée ci-dessous.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The text is not altered in any way as the text range just spans a different part of the text.</source>
          <target state="translated">Le texte n’est pas modifié de quelque manière que la plage de texte couvre juste une autre partie du texte.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>The endpoint to move.</source>
          <target state="translated">Point de terminaison à déplacer.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Another range from the same text provider.</source>
          <target state="translated">Une autre plage du même fournisseur de texte.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>An endpoint on the other range.</source>
          <target state="translated">Point de terminaison sur l'autre plage.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Moves one endpoint of a text range to the specified endpoint of a second text range.</source>
          <target state="translated">Déplace un point de terminaison d'une plage de texte au point de terminaison spécifié d'une deuxième plage de texte.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> is always less than or equal to <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph>).</source>
          <target state="translated">Si le point de terminaison qui est déplacé traverse l’autre point de terminaison de la même plage de texte, que cet autre point de terminaison est également déplacé, provoquant une plage dégénérée et assurant le classement correct des points de terminaison (autrement dit, <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> est toujours inférieure ou égale à <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The endpoint to move.</source>
          <target state="translated">Point de terminaison à déplacer.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The textual unit for moving.</source>
          <target state="translated">Unité de texte à déplacer.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The number of units to move.</source>
          <target state="translated">Nombre d'unités à déplacer.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>A positive count moves the endpoint forward.</source>
          <target state="translated">Un nombre positif déplace le point de terminaison vers l'avant.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>A negative count moves backward.</source>
          <target state="translated">Un nombre négatif le déplace vers l'arrière.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>A count of 0 has no effect.</source>
          <target state="translated">0 n'a aucun effet.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Moves one endpoint of the text range the specified number of <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Text.TextUnit" /&gt;</ph>s within the document range.</source>
          <target state="translated">Déplace un point de terminaison de la plage de texte du nombre spécifié d'éléments <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Text.TextUnit" /&gt;</ph> dans la plage du document.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.</source>
          <target state="translated">Nombre d'unités réellement déplacées, qui peut être inférieur au nombre requis si le déplacement des points de terminaison atteint le début ou la fin du document.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt;</ph> method to execute successfully.</source>
          <target state="translated">Quand il est nécessaire de parcourir le contenu d'une plage de texte, il faut effectuer une série d'étapes en arrière-plan pour assurer la bonne exécution de la méthode <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt;</ph> .</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint, which makes the <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint superfluous.</source>
          <target state="translated">La plage de texte est normalisée : elle est réduite en une plage dégénérée au niveau du point de terminaison <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> , rendant le point de terminaison <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> superflu.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt><ph id="ph2">http://www.microsoft.com</ph><ept id="p1">](http://www.microsoft.com)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
          <target state="translated">Cette étape est nécessaire pour supprimer toute ambiguïté dans les situations où une plage de texte s’étend sur <ph id="ph1">`unit`</ph> limites ; par exemple, « {l’U} RL <bpt id="p1">[</bpt> <ph id="ph2">http://www.microsoft.com</ph> <ept id="p1">](http://www.microsoft.com)</ept> est incorporée dans le texte » où « { » et «} » est des points de terminaison de plage de texte.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The resulting range is moved backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> to the beginning of the requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">La plage obtenue est déplacée vers l'arrière dans <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> au début de la limite <ph id="ph2">`unit`</ph> demandée.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The range is then expanded from a degenerate range state by moving the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint by one requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">La plage est ensuite étendue à partir d'un état de plage dégénérée en déplaçant le point de terminaison <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> d'une limite <ph id="ph2">`unit`</ph> demandée.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Ajustements de plage par Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>ajustements de plage par Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</source>
          <target state="translated">Exemples de la façon dont une plage de texte est ajustée pour Move() et ExpandToEnclosingUnit()</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> tree; object boundaries are ignored.</source>
          <target state="translated">Le contenu textuel (ou texte interne) d'un conteneur de texte et d'un objet incorporé, tel qu'un lien hypertexte ou une cellule de tableau, est exposé en tant que flux de texte unique et continu dans l'affichage de contrôle et l'affichage du contenu de l'arborescence <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> ; le contour des objets est ignoré.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.</source>
          <target state="translated">Si un client UI Automation récupère le texte à des fins de récitation, interprétation ou analyse de quelque façon que ce soit, vous devez vérifier les cas spéciaux de la plage de texte, tels qu’un tableau avec du contenu textuel ou d’autres objets incorporés.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>This can be accomplished by calling <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt;</ph> to obtain an <ph id="ph2">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph> for each embedded object and then calling <ph id="ph3">&lt;xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt;</ph> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.</source>
          <target state="translated">Cela peut être accompli en appelant <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt;</ph> pour obtenir un <ph id="ph2">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph> pour chaque objet incorporé, puis à appeler <ph id="ph3">&lt;xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt;</ph> pour obtenir une plage de texte pour chaque élément ; cette action se répète jusqu'à ce que tout le contenu textuel a été récupéré.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><bpt id="p1">![</bpt>Text ranges spanned by embedded objects.<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-embeddedobjecttextranges.png "</bpt>Text ranges spanned by embedded objects.<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Plages de texte couvertes par les objets incorporés. <ept id="p1">]</ept> <bpt id="p2">(~/add/media/uia-textpattern-embeddedobjecttextranges.png "</bpt>Couvertes par les objets incorporés de plages de texte.<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Example of a text stream with embedded objects and their range spans</source>
          <target state="translated">Exemple de flux de texte avec des objets incorporés et leurs amplitudes</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit%2A&gt;</ph> defers to the next largest <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> supported if the given <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> is not supported by the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit%2A&gt;</ph> défère à la prochaine plus grande <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> prise en charge si la donnée <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> n’est pas pris en charge par le contrôle.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The order, from smallest unit to largest, is listed below.</source>
          <target state="translated">L’ordre, à partir de la plus petite unité au plus grand, est répertoriée ci-dessous.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection">
          <source>Removes a highlighted section of text, corresponding to the calling text range <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> and <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> endpoints, from an existing collection of highlighted text in a text container that supports multiple, disjoint selections.</source>
          <target state="translated">Supprime une section en surbrillance de texte, correspondant aux points de terminaison <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> et <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> de la plage de texte appelante, de la collection de textes mis en surbrillance dans un conteneur de texte qui prend en charge des sélections multiples et disjointes.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection">
          <source>The text insertion point will move to the area of the removed highlight.</source>
          <target state="translated">Le point d’insertion de texte se déplacera vers la zone de la mise en surbrillance supprimé.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection">
          <source>Providing a degenerate text range will move the insertion point.</source>
          <target state="translated">En fournissant une plage de texte dégénérée déplacera le point d’insertion.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection">
          <source>If text provider does not support multiple, disjoint selections (for example, <ph id="ph1">&lt;see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /&gt;</ph> must have a value of <ph id="ph2">&lt;see langword="Multiple" /&gt;</ph>).</source>
          <target state="translated">Si le fournisseur de texte ne prend pas en charge les sélections multiples disjointes (par exemple, <ph id="ph1">&lt;see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /&gt;</ph> doit avoir la valeur <ph id="ph2">&lt;see langword="Multiple" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the text control should be scrolled so the text range is flush with the top of the viewport; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it should be flush with the bottom of the viewport.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le contrôle de texte doit défiler de façon à ce que la plage de texte soit au même niveau que le haut de la fenêtre d'affichage ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> si elle doit être au même niveau que le bas de la fenêtre d'affichage.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)">
          <source>Causes the text control to scroll vertically until the text range is visible in the viewport.</source>
          <target state="translated">Provoque le défilement vertical du contrôle de texte jusqu'à ce que la plage de texte soit visible dans la fenêtre d'affichage.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView%2A&gt;</ph> respects both hidden and visible text.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView%2A&gt;</ph> respecte le texte masqué et visible.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)">
          <source>The UI Automation client can check the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> for text visibility.</source>
          <target state="translated">Le client UI Automation puisse vérifier le <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> visibilité du texte.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)">
          <source>If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.</source>
          <target state="translated">Si la plage de texte est masquée, le contrôle de texte défilera uniquement si le texte masqué a une ancre dans la fenêtre d’affichage.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)">
          <source>If scrolling is not supported by the control.</source>
          <target state="translated">Si le défilement n’est pas pris en charge par le contrôle.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Select">
          <source>Highlights text in the text control corresponding to the text range <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> and <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> endpoints.</source>
          <target state="translated">Met en surbrillance le texte dans le contrôle de texte qui correspond aux points de terminaison <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> et <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> de la plage de texte.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Select">
          <source>If a degenerate text range is provided, the text insertion point will move to the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint of the text range.</source>
          <target state="translated">Si une plage de texte dégénérée est fournie, le point d’insertion de texte se déplace à la <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> point de terminaison de la plage de texte.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Select">
          <source>Occurs when text selection is not supported by the text control.</source>
          <target state="translated">Se produit lorsque la sélection de texte n’est pas prise en charge par le contrôle de texte.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="P:System.Windows.Automation.Text.TextPatternRange.TextPattern">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.Automation.TextPattern" /&gt;</ph> associated with the text range.</source>
          <target state="translated">Obtient l'élément <ph id="ph1">&lt;see cref="T:System.Windows.Automation.TextPattern" /&gt;</ph> associé à la plage de texte.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Automation.Text.TextPatternRange.TextPattern">
          <source>The text provider.</source>
          <target state="translated">Fournisseur de texte.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>