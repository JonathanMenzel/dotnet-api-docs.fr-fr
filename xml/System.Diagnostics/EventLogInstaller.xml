<Type Name="EventLogInstaller" FullName="System.Diagnostics.EventLogInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="03ac59fe0ae5b7a6b2065df8db5f444738f14d55" />
    <Meta Name="ms.sourcegitcommit" Value="fbb23bed4669409528ea7027eeaf88a8663d0851" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/11/2018" />
    <Meta Name="ms.locfileid" Value="49088758" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventLogInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventLogInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventLogInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class EventLogInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventLogInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type EventLogInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration.Install</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Vous permet d'installer et de configurer un journal des événements que votre application lit et dans lequel elle écrit pendant l'exécution.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Diagnostics.EventLogInstaller> est utilisé par le [Installutil.exe (outil Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) lors de l’installation d’un journal des événements. Le <xref:System.Diagnostics.EventLogInstaller> classe peut installer des journaux des événements uniquement sur l’ordinateur local.  
  
 Utiliser le <xref:System.Diagnostics.EventLogInstaller> quand votre application écrit dans un journal des événements de classe ; il n’est pas nécessaire d’utiliser un programme d’installation de journal des événements pour votre application à lire à partir d’un journal des événements. Applications et services doivent écrire dans le journal des applications ou d’un journal personnalisé. Pilotes de périphérique doivent écrire dans le journal système.  
  
> [!NOTE]
>  Le journal de sécurité est en lecture seule.  
  
 Le programme d’installation crée la source d’événements que vous spécifiez dans le <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriété et des registres pour le journal des événements spécifié dans <xref:System.Diagnostics.EventLogInstaller.Log%2A> propriété. Ce comportement est semblable à l’appel <xref:System.Diagnostics.EventLog.CreateEventSource%2A> sur le <xref:System.Diagnostics.EventLog> composant.  
  
 Utilisez le <xref:System.Diagnostics.EventLog.WriteEvent%2A> et <xref:System.Diagnostics.EventLog.WriteEntry%2A> méthodes pour écrire des événements dans un journal des événements. Vous devez spécifier une source d’événement pour écrire des événements ; Vous devez créer et configurer la source d’événement avant l’écriture de la première entrée avec la source.  
  
 Créer la nouvelle source d’événements pendant l’installation de votre application. Cela laisse le temps au système d’exploitation à actualiser sa liste de sources d’événements inscrits et leurs configurations. Si le système d’exploitation n’a pas actualisé sa liste de sources d’événements, et que vous tentez d’écrire un événement avec la nouvelle source, que l’opération d’écriture échouera. Vous pouvez configurer une source en utilisant un <xref:System.Diagnostics.EventLogInstaller>, ou à l’aide de la <xref:System.Diagnostics.EventLog.CreateEventSource%2A> (méthode). Vous devez disposer des droits d’administration sur l’ordinateur pour créer une source d’événement.  
  
 Vous pouvez créer une source d’événement pour un journal des événements existant ou un journal des événements. Lorsque vous créez une nouvelle source pour un journal des événements, le système inscrit la source de ce journal, mais le journal n’est pas créé jusqu'à ce que la première entrée est écrites.  
  
 Pour installer un journal des événements, créez un projet de classe installer qui hérite de <xref:System.Configuration.Install.Installer>et définissez le <xref:System.ComponentModel.RunInstallerAttribute> pour la classe `true`. Dans votre projet, créez un <xref:System.Diagnostics.EventLogInstaller> pour chaque journal des événements que votre application écrire dans et ajoutez l’instance à la classe de programme d’installation de votre projet.  
  
 Lorsque le [Installutil.exe (outil Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) est appelée, elle examine le <xref:System.ComponentModel.RunInstallerAttribute>. S’il s’agit `true`, l’outil installe tous les éléments dans le <xref:System.Configuration.Install.Installer.Installers%2A> collection qui sont associés à votre programme d’installation de projet. Si <xref:System.ComponentModel.RunInstallerAttribute> est `false`, l’outil ignore le programme d’installation de projet.  
  
 Modifier d’autres propriétés d’un <xref:System.Diagnostics.EventLogInstaller> avant ou après l’ajout de l’instance à la <xref:System.Configuration.Install.Installer.Installers%2A> collection de votre programme d’installation de projet, mais avant que l’outil de programme d’installation s’exécute. Vous devez définir le <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriété si votre application doit écrire dans le journal des événements.  
  
 Utilisez <xref:System.Diagnostics.EventLogInstaller> pour inscrire une nouvelle source pour un journal des événements nouveau ou existant ; n’utilisez pas <xref:System.Diagnostics.EventLogInstaller> pour modifier une source existante. Le <xref:System.Diagnostics.EventLogInstaller> classe ne modifie pas les propriétés de configuration d’une source existante pour faire correspondre les propriétés d’installation spécifié. Le <xref:System.Diagnostics.EventLogInstaller.Install%2A> méthode lève une exception si le <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriété correspond à un nom de source qui est inscrit pour un autre journal des événements sur l’ordinateur. Le <xref:System.Diagnostics.EventLogInstaller.Install%2A> méthode n’enregistre pas la source si le <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriété correspond à un nom de source qui est déjà inscrit pour le même journal des événements spécifié dans le <xref:System.Diagnostics.EventLogInstaller.Log%2A> propriété.  
  
 Vous pouvez inscrire la source d’événements avec les fichiers de ressources localisés pour vos chaînes de catégorie et le message d’événement. Votre application peut écrire des entrées de journal des événements à l’aide d’identificateurs de ressources, plutôt que de spécifier la chaîne réelle. L’Observateur d’événements utilise l’identificateur de ressource pour rechercher et afficher la chaîne correspondante à partir du fichier de ressource localisée selon les paramètres de langue actuels. Vous pouvez enregistrer un fichier distinct pour les catégories d’événements, les messages et les chaînes d’insertion de paramètre, ou vous pouvez inscrire le même fichier de ressources pour les trois types de chaînes. Utilisez le <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>, <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>, et <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> propriétés pour configurer la source pour écrire des entrées localisées dans le journal des événements. Si votre application écrit les valeurs de chaînes directement dans le journal des événements, il est inutile de définir ces propriétés.  
  
 La source doit être configurée pour écrire des entrées localisées ou pour l’écriture de chaînes directes. Si votre application écrit des entrées à l’aide d’identificateurs de ressource et de valeurs de chaîne, vous devez inscrire deux sources distinctes. Par exemple, configurez une source de fichiers de ressources et ensuite utiliser cette source dans le <xref:System.Diagnostics.EventLog.WriteEvent%2A> méthode pour écrire des entrées à l’aide d’identificateurs de ressource dans le journal des événements. Créez une autre source, sans fichiers de ressources, puis utilisez cette source dans le <xref:System.Diagnostics.EventLog.WriteEntry%2A> méthode pour écrire des chaînes directement dans le journal des événements à l’aide de cette source.  
  
 En règle générale, vous n’appelez pas les méthodes de la <xref:System.Diagnostics.EventLogInstaller> classe à partir de votre code ; elles sont généralement appelées uniquement par Installutil.exe. L’outil appelle automatiquement la <xref:System.Diagnostics.EventLogInstaller.Install%2A> méthode pendant le processus d’installation. Si nécessaire, il annule les erreurs, en appelant le <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> méthode pour l’objet qui a généré l’exception.  
  
   
  
## Examples  
 L’exemple de code suivant définit les propriétés d’installation pour une source d’événement. L’exemple de code définit le nom de la source et le nom du journal des événements et ajoute le <xref:System.Diagnostics.EventLogInstaller> à la <xref:System.Configuration.Install.Installer.Installers%2A> collection.  
  
 [!code-cpp[EventLogInstaller#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogInstaller/CPP/eventloginstaller.cpp#1)]
 [!code-csharp[EventLogInstaller#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogInstaller/CS/eventloginstaller.cs#1)]
 [!code-vb[EventLogInstaller#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogInstaller/VB/eventloginstaller.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
    <related type="Article" href="~/docs/framework/tools/installutil-exe-installer-tool.md">Installutil.exe (outil Installer Tool)</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.EventLogInstaller" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryCount : int with get, set" Usage="System.Diagnostics.EventLogInstaller.CategoryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le numéro de catégorie dans le fichier de ressources de catégorie.</summary>
        <value>Numéro de catégories dans le fichier de ressources de catégorie. La valeur par défaut est 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> et <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> propriétés pour écrire des événements avec localisées des chaînes de catégorie. L’Observateur d’événements affiche la catégorie pour une entrée d’événement, si vous fournissez une catégorie lorsque vous écrivez l’événement. Catégories du journal des événements sont des chaînes définies par l’application qui aident à filtrer des événements ou fournissent des informations sur un événement. Par exemple, votre application peut définir des catégories distinctes pour différents composants ou des opérations différentes.  
  
 Catégories d’événements sont facultatifs ; Si votre application n’utilise pas de catégories, ne définissez pas la <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> et <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> propriétés.  
  
 Pour plus d’informations sur la définition des messages d’événement et la création de fichiers de ressources d’événement, consultez la rubrique « Message Compiler » dans la documentation Platform SDK à [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 L’exemple de code suivant définit les propriétés d’installation pour une source d’événement. L’exemple de code définit le nom de source d’événement, le nom de journal des événements et le fichier de ressources pour le texte de l’événement localisée.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 L’exemple de code utilise le fichier de texte de message suivant, incorporé dans la bibliothèque de ressources EventLogMsgs.dll. Un fichier texte du message est la source à partir duquel le fichier de ressource de message est créé. Le fichier de texte de message définit les identificateurs de ressource et le texte pour la catégorie, message d’événement et chaînes d’insertion de paramètre.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le chemin d'accès du fichier de ressources contenant des chaînes de catégorie pour la source.</summary>
        <value>Chemin d'accès au fichier de ressources de catégorie. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> et <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> propriétés pour écrire des événements avec localisées des chaînes de catégorie. L’Observateur d’événements affiche la catégorie pour une entrée d’événement si vous fournissez une catégorie lorsque vous écrivez l’événement. Catégories du journal des événements sont des chaînes définies par l’application qui aident à filtrer des événements ou fournissent des informations sur un événement. Par exemple, votre application peut avoir des catégories distinctes pour différents composants ou des opérations différentes.  
  
 Catégories d’événements sont facultatifs ; Si votre application n’utilise pas de catégories, ne définissez pas la <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> et <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> propriétés.  
  
 Pour plus d’informations sur la définition des messages d’événement et la création de fichiers de ressources d’événement, consultez la rubrique « Message Compiler » dans la documentation Platform SDK à [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 L’exemple de code suivant définit les propriétés d’installation pour une source d’événement. L’exemple de code définit le nom de source d’événement, le nom de journal des événements et le fichier de ressources pour le texte de l’événement localisée.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 L’exemple de code utilise le fichier de texte de message suivant, incorporé dans la bibliothèque de ressources EventLogMsgs.dll. Un fichier texte du message est la source à partir duquel le fichier de ressource de message est créé. Le fichier de texte de message définit les identificateurs de ressource et le texte pour la catégorie, message d’événement et chaînes d’insertion de paramètre.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="eventLogInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">
          <see cref="T:System.ComponentModel.IComponent" /> à utiliser comme modèle pour <see cref="T:System.Diagnostics.EventLogInstaller" />.</param>
        <summary>Copie les valeurs des propriétés d'un composant <see cref="T:System.Diagnostics.EventLog" /> requises lors de l'installation d'un journal des événements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le composant spécifié par le `component` paramètre doit être un <xref:System.Diagnostics.EventLog>; sinon, une exception est levée.  
  
 En règle générale, vous n’appelez pas les méthodes de la <xref:System.Diagnostics.EventLogInstaller> à partir de votre code ; elles sont généralement appelées uniquement par le [Installutil.exe (outil Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md). <xref:System.Diagnostics.EventLogInstaller.CopyFromComponent%2A> est utilisé par Installutil.exe pour définir les valeurs de propriété pour le <xref:System.Diagnostics.EventLogInstaller> aux valeurs de configuration existant <xref:System.Diagnostics.EventLog>.  
  
 Si le <xref:System.Diagnostics.EventLog.Log%2A> de la <xref:System.Diagnostics.EventLog> qui est passé est une chaîne vide (« »), vous devez définir le <xref:System.Diagnostics.EventLog.Log%2A> propriété à une valeur valide avant que le programme d’installation s’exécute.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le composant spécifié n'est pas <see cref="T:System.Diagnostics.EventLog" />.  
  
- ou - 
La propriété <see cref="P:System.Diagnostics.EventLog.Log" /> ou <see cref="P:System.Diagnostics.EventLog.Source" /> du composant spécifié est <see langword="null" /> ou vide.</exception>
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">
          <see cref="T:System.Collections.IDictionary" /> utilisé pour enregistrer les informations nécessaires à l'exécution d'une opération de restauration ou de désinstallation.</param>
        <summary>Exécute l'installation et écrit les informations du journal des événements dans le Registre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Diagnostics.EventLogInstaller.Install%2A> méthode écrit les informations du journal des événements dans le Registre et associe le journal des événements à un journal qui est spécifié par le <xref:System.Diagnostics.EventLogInstaller.Log%2A> propriété. Si le journal n’existe pas déjà (et une source est spécifiée), <xref:System.Diagnostics.EventLogInstaller.Install%2A> crée un journal et lui associe la nouvelle source.  
  
 En règle générale, vous n’appelez pas les méthodes de la <xref:System.Diagnostics.EventLogInstaller> à partir de votre code ; elles sont généralement appelées uniquement par le [Installutil.exe (outil Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md). L’outil appelle automatiquement la <xref:System.Diagnostics.EventLogInstaller.Install%2A> méthode pendant le processus d’installation pour écrire des informations de Registre qui sont associées avec le journal des événements en cours d’installation. Installation étant transactionnelle, s’il existe une défaillance de n’importe quel composant de projet d’installation pendant l’installation, tous les composants précédemment installés sont restaurées à leur état avant l’installation. Cela est accompli en appelant de chaque composant <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> (méthode).  
  
 Utilisez <xref:System.Diagnostics.EventLogInstaller> pour inscrire une nouvelle source pour un journal des événements nouveau ou existant ; n’utilisez pas <xref:System.Diagnostics.EventLogInstaller> pour modifier une source existante. Le <xref:System.Diagnostics.EventLogInstaller> classe ne modifie pas les propriétés de configuration d’une source existante pour faire correspondre les propriétés d’installation spécifié. Le <xref:System.Diagnostics.EventLogInstaller.Install%2A> méthode lève une exception si le <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriété correspond à un nom de source qui est inscrit pour un autre journal des événements sur l’ordinateur. Le <xref:System.Diagnostics.EventLogInstaller.Install%2A> méthode ignore l’enregistrement de la source si le <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriété correspond à un nom de source qui est déjà inscrit pour le même journal des événements spécifié dans le <xref:System.Diagnostics.EventLogInstaller.Log%2A> propriété.  
  
 Routine d’installation d’une application utilise le programme d’installation de projet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> propriété pour gérer automatiquement les informations sur les composants qui ont déjà été installés. Ces informations d’état, qui sont passées à <xref:System.Diagnostics.EventLogInstaller.Install%2A> en tant que le `stateSaver` paramètre, est continuellement mis à jour l’outil installe chaque <xref:System.Diagnostics.EventLogInstaller>. En règle générale, il n’est pas nécessaire pour votre code modifier explicitement ces informations d’état.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">La plateforme que le programme d'installation tente d'utiliser n'est pas Windows NT 4.0 ou version ultérieure.</exception>
        <exception cref="T:System.ArgumentException">Le nom spécifié dans la propriété <see cref="P:System.Diagnostics.EventLogInstaller.Source" /> est déjà enregistré pour un journal des événements différent.</exception>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="eventLogInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">Programme d'installation à comparer.</param>
        <summary>Détermine si un programme d'installation et un autre programme d'installation spécifié font référence à la même source.</summary>
        <returns>
          <see langword="true" /> si ce programme d'installation et le programme d'installation spécifié par le paramètre <paramref name="otherInstaller" /> installent ou désinstallent la même source ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, vous n’appelez pas les méthodes de la <xref:System.Diagnostics.EventLogInstaller> à partir de votre code ; elles sont généralement appelées uniquement par l’outil de programme d’installation (Installutil.exe).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public string Log { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Log" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.Log" />
      <MemberSignature Language="VB.NET" Value="Public Property Log As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Log { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Log : string with get, set" Usage="System.Diagnostics.EventLogInstaller.Log" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom du journal pour lequel définir la source.</summary>
        <value>Nom du journal. Il peut s'agir d'application, système ou d'un nom de journal personnalisé. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser la <xref:System.Diagnostics.EventLogInstaller.Log%2A> propriété à associer la source que vous spécifiez dans le <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriété avec un journal existant ou un nouveau journal sur l’ordinateur local. Le [Installutil.exe (outil Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) utilise ces informations pour mapper la source dans le journal dans le Registre de l’ordinateur. Applications et services doivent écrire dans le journal des applications ou d’un journal personnalisé. Pilotes de périphérique doivent écrire dans le journal système.  
  
 Pour écrire des entrées dans un journal des événements, vous devez créer une source et inscrivez-le avec un journal des événements. Une source d’événement peut uniquement écrire dans un journal à la fois. Le programme d’installation utilise la valeur de la <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriété pour inscrire votre application avec le journal des événements comme source valide d’entrées. Si vous ne spécifiez pas un nom de journal avant l’exécution du programme d’installation, le programme d’installation inscrit votre source dans le journal des applications. Si vous spécifiez une nouvelle source et un journal existant, le programme d’installation crée une source d’événement et l’associe le journal que vous spécifiez. Si vous spécifiez une nouvelle source et un nouveau journal, le programme d’installation associe la nouvelle source avec le nouveau journal dans le Registre, mais le journal n’est pas créé jusqu'à ce que la première entrée est écrites.  
  
 Le système d’exploitation stocke les journaux des événements sous forme de fichiers. Lorsque vous utilisez <xref:System.Diagnostics.EventLogInstaller> ou <xref:System.Diagnostics.EventLog.CreateEventSource%2A> méthode pour créer un nouveau journal des événements, le fichier associé est stocké dans le répertoire %SystemRoot%\System32\Config sur l’ordinateur spécifié. Le nom de fichier est défini en ajoutant les 8 premiers caractères de la <xref:System.Diagnostics.EventLogInstaller.Log%2A> propriété avec l’extension de nom de fichier « .evt ».  
  
 Utilisez <xref:System.Diagnostics.EventLogInstaller> pour inscrire une nouvelle source pour un journal des événements nouveau ou existant ; n’utilisez pas <xref:System.Diagnostics.EventLogInstaller> pour modifier une source existante. Le <xref:System.Diagnostics.EventLogInstaller> classe ne modifie pas les propriétés de configuration d’une source existante pour faire correspondre les propriétés d’installation spécifié. Le <xref:System.Diagnostics.EventLogInstaller.Install%2A> méthode lève une exception si le <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriété correspond à un nom de source qui est inscrit pour un autre journal des événements sur l’ordinateur. Le <xref:System.Diagnostics.EventLogInstaller.Install%2A> méthode n’enregistre pas la source si le <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriété correspond à un nom de source qui est déjà inscrit pour le même journal des événements spécifié dans le <xref:System.Diagnostics.EventLogInstaller.Log%2A> propriété.  
  
 Pour plus d’informations sur les comportements des journaux des événements et des sources, consultez le <xref:System.Diagnostics.EventLog> classe documentation pour le <xref:System.Diagnostics.EventLog.Log%2A> et <xref:System.Diagnostics.EventLog.Source%2A> propriétés.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MessageResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le chemin d'accès du fichier de ressources qui contient des chaînes de mise en forme du message pour la source.</summary>
        <value>Chemin d'accès au fichier de ressources du message. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> propriété pour configurer une source de journal des événements pour écrire des messages d’événement localisés. Messages d’événement sont des chaînes définies par l’application qui décrivent l’événement à l’utilisateur.  
  
 Votre application peut écrire des entrées de journal des événements à l’aide d’identificateurs de ressource. Un identificateur de ressource indexe un message se trouvant dans le <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>. L’Observateur d’événements utilise l’identificateur de ressource pour rechercher et afficher la chaîne correspondante à partir du fichier de ressource localisée selon les paramètres de langue actuels.  
  
 La source d’événements doit être configurée pour l’écriture d’entrées localisées ou pour l’écriture de chaînes directes. Utilisez le <xref:System.Diagnostics.EventLog.WriteEvent%2A> méthode pour écrire des entrées localisées pour une source configurée avec un fichier de ressources du message.  
  
 Si votre application écrit les chaînes de message d’événement directement, au lieu d’utiliser un identificateur de ressource dans un fichier de ressources localisé, ne définissez pas le <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> propriété.  
  
 Si le <xref:System.Diagnostics.EventLog.MachineName%2A> propriété n’est pas l’identificateur de l’ordinateur local («. »), le .NET Framework suppose que le fichier de ressources se trouve sur un ordinateur distant. Si le <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> valeur de propriété contient une lettre de lecteur, le fichier de ressources est supposé se pour trouver sur le \\ \\< machinename\>\\< lecteur\>partage $ (par exemple, \\\server \c$). Si la valeur contient la chaîne % systemroot%, le fichier de ressources est supposé se pour trouver sur le \\ \\< machinename\>\admin$ partage (par exemple, \\\server\admin$).  
  
 Pour plus d’informations sur la définition des messages d’événement et la création de fichiers de ressources d’événement, consultez la rubrique « Message Compiler » dans la documentation Platform SDK à [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 L’exemple de code suivant définit les propriétés d’installation pour une source d’événement. L’exemple de code définit le nom de source d’événement, le nom de journal des événements et le fichier de ressources pour le texte de l’événement localisée.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 L’exemple de code utilise le fichier de texte de message suivant, incorporé dans la bibliothèque de ressources EventLogMsgs.dll. Un fichier texte du message est la source à partir duquel le fichier de ressource de message est créé. Le fichier de texte de message définit les identificateurs de ressource et le texte pour la catégorie, message d’événement et chaînes d’insertion de paramètre.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ParameterResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le chemin d'accès du fichier de ressources qui contient des chaînes de paramètre du message pour la source.</summary>
        <value>Chemin d'accès au fichier de ressources de paramètre du message. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> propriété pour configurer une source de journal des événements pour écrire des messages d’événement localisés avec des chaînes de paramètre insérées. Chaque message d’événement localisé spécifié dans le <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> propriété peut contenir des espaces réservés pour les chaînes d’insertion. Ces espaces réservés sont utilisés pour spécifier la position et l’identificateur de ressource pour une chaîne indépendante du langage dans le message d’événement. L’Observateur d’événements remplace les espaces réservés par les chaînes correspondantes de la <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> et met en forme le message de journal des événements pour l’entrée d’événement localisée.  
  
 Par exemple, la section suivante d’un fichier texte de message définit une chaîne avec un espace réservé de paramètre :  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 Dans le fichier de ressources de paramètre, la chaîne d’insertion doit être définie avec l’identificateur de ressource qui correspond à l’espace réservé, comme indiqué ci-dessous :  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 La source d’événements doit être configurée pour l’écriture d’entrées localisées ou pour l’écriture de chaînes directes. Utilisez le <xref:System.Diagnostics.EventLog.WriteEvent%2A> méthode pour écrire des entrées localisées pour une source configurée avec un fichier de ressources du message.  
  
 Si votre application écrit les chaînes de message d’événement directement dans le journal des événements, ou si votre <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> ne contient pas de messages avec des espaces réservés de paramètre d’insertion, ne définissez pas le <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> propriété.  
  
 Pour plus d’informations sur la définition des messages d’événement et la création de fichiers de ressources d’événement, consultez la rubrique « Message Compiler » dans la documentation Platform SDK à [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 L’exemple de code suivant définit les propriétés d’installation pour une source d’événement. L’exemple de code définit le nom de source d’événement, le nom de journal des événements et le fichier de ressources pour le texte de l’événement localisée.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 L’exemple de code utilise le fichier de texte de message suivant, incorporé dans la bibliothèque de ressources EventLogMsgs.dll. Un fichier texte du message est la source à partir duquel le fichier de ressource de message est créé. Le fichier de texte de message définit les identificateurs de ressource et le texte pour la catégorie, message d’événement et chaînes d’insertion de paramètre. Plus précisément, le message défini pour l’identificateur de ressource 1004 utilise un espace réservé pour une chaîne de paramètre définie pour l’identificateur de ressource 5002.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">
          <see cref="T:System.Collections.IDictionary" /> qui contient l'état qui était celui de l'ordinateur avant l'installation.</param>
        <summary>Restaure l'état qui était celui de l'ordinateur avant l'installation en restaurant les informations du journal des événements écrites dans le Registre pendant la procédure d'installation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> méthode annule les effets de la <xref:System.Diagnostics.EventLogInstaller.Install%2A> (méthode). <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> est appelée si l’installation de n’importe quel composant dans le projet d’installation échoue. Le <xref:System.Diagnostics.EventLogInstaller.Install%2A> méthode crée ou définit les propriétés d’un journal des événements et la source d’événement. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> Supprime le journal des événements et la source ou réinitialise les propriétés d’une source à ses valeurs avant l’installation.  
  
 En règle générale, vous n’appelez pas les méthodes de la <xref:System.Diagnostics.EventLogInstaller> à partir de votre code ; elles sont généralement appelées uniquement par le [Installutil.exe (outil Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md). L’outil appelle le <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> (méthode), lorsque ce composant ou un autre composant a échoué pour installer, pour annuler les modifications déjà apportées par le processus d’installation.  
  
 Routine d’installation d’une application utilise le programme d’installation de projet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> propriété pour gérer automatiquement les informations sur les composants qui ont déjà été installés. Ces informations d’état, qui sont passées à <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> en tant que le `savedState` paramètre, est continuellement mis à jour l’outil restaure chaque <xref:System.Diagnostics.EventLogInstaller>. En règle générale, il n’est pas nécessaire pour votre code modifier explicitement ces informations d’état.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Diagnostics.EventLogInstaller.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de source à enregistrer auprès du journal.</summary>
        <value>Nom à enregistrer auprès du journal des événements comme source d'entrées. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La source d’événements indique ce qui consigne l’événement. Il est souvent le nom de l’application, ou le nom d’un composant au sein d’une grande application.  
  
 Le programme d’installation utilise la valeur de la <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriété pour inscrire votre application avec le journal des événements comme source valide d’entrées. Un nouveau nom de source ne peut pas correspondre à un nom de source existant ou un nom de journal des événements existant. Chaque source ne peut écrire dans un journal des événements à la fois. Toutefois, votre application peut utiliser plusieurs sources pour écrire dans plusieurs journaux des événements. Par exemple, votre application peut nécessiter plusieurs sources configurés pour des journaux des événements ou des fichiers de ressources différents.  
  
 Applications et services doivent écrire dans le journal des applications ou d’un journal personnalisé. Pilotes de périphérique doivent écrire dans le journal système. Si vous ne spécifiez pas un nom de journal avant l’exécution du programme d’installation, le programme d’installation inscrit votre source dans le journal des applications. Si vous spécifiez le nom d’un journal qui n’existe pas, le système enregistre le <xref:System.Diagnostics.EventLogInstaller.Source%2A> dans ce journal, mais le journal n’est pas créé jusqu'à ce que la première entrée est écrites.  
  
 Utilisez <xref:System.Diagnostics.EventLogInstaller> pour inscrire une nouvelle source pour un journal des événements nouveau ou existant ; n’utilisez pas <xref:System.Diagnostics.EventLogInstaller> pour modifier une source existante. Le <xref:System.Diagnostics.EventLogInstaller> classe ne modifie pas les propriétés de configuration d’une source existante pour faire correspondre les propriétés d’installation spécifié. Le <xref:System.Diagnostics.EventLogInstaller.Install%2A> méthode lève une exception si le <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriété correspond à un nom de source qui est inscrit pour un autre journal des événements sur l’ordinateur. Le <xref:System.Diagnostics.EventLogInstaller.Install%2A> méthode n’enregistre pas la source si le <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriété correspond à un nom de source qui est déjà inscrit pour le même journal des événements spécifié dans le <xref:System.Diagnostics.EventLogInstaller.Log%2A> propriété.  
  
 Pour plus d’informations sur les comportements des journaux des événements et des sources, consultez le <xref:System.Diagnostics.EventLog> classe documentation pour le <xref:System.Diagnostics.EventLog.Log%2A> et <xref:System.Diagnostics.EventLog.Source%2A> propriétés.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">
          <see cref="T:System.Collections.IDictionary" /> qui contient l'état qui était celui de l'ordinateur avant l'installation.</param>
        <summary>Supprime une installation en enlevant du Registre les informations du journal des événements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A> valeur de propriété est `Remove`, le <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> méthode supprime la source et le journal associé que le programme d’installation créé si le <xref:System.Diagnostics.EventLogInstaller.Log%2A> et <xref:System.Diagnostics.EventLogInstaller.Source%2A> propriétés spécifiées de la création d’un nouveau journal des événements et la source.  
  
 En règle générale, vous n’appelez pas les méthodes de la <xref:System.Diagnostics.EventLogInstaller> à partir de votre code ; elles sont généralement appelées uniquement par le [Installutil.exe (outil Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) en mode de désinstallation. L’outil appelle automatiquement la <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> méthode pour restaurer les parties du système qui ont été affectés par l’installation à leur état avant l’installation. Cela comprend la suppression des informations du Registre qui sont associées avec le journal des événements en cours de désinstallation.  
  
 D’une application routine désinstallation utilise le programme d’installation de projet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> propriété pour gérer automatiquement les informations sur les composants qui ont déjà été désinstallés. Ces informations d’état, qui sont passées à <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> en tant que le `savedState` paramètre, est continuellement mis à jour l’outil de désinstallation de chaque instance <xref:System.Diagnostics.EventLogInstaller>. En règle générale, il n’est pas nécessaire pour votre code modifier explicitement ces informations d’état.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="UninstallAction">
      <MemberSignature Language="C#" Value="public System.Configuration.Install.UninstallAction UninstallAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Configuration.Install.UninstallAction UninstallAction" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.UninstallAction" />
      <MemberSignature Language="VB.NET" Value="Public Property UninstallAction As UninstallAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Configuration::Install::UninstallAction UninstallAction { System::Configuration::Install::UninstallAction get(); void set(System::Configuration::Install::UninstallAction value); };" />
      <MemberSignature Language="F#" Value="member this.UninstallAction : System.Configuration.Install.UninstallAction with get, set" Usage="System.Diagnostics.EventLogInstaller.UninstallAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.Install.UninstallAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si l’<see href="https://docs.microsoft.com/dotnet/framework/tools/installutil-exe-installer-tool">outil d’installation (Installutil.exe)</see> doit supprimer le journal des événements ou le laisser à son état d’installation au moment de la désinstallation.</summary>
        <value>Une des valeurs <see cref="T:System.Configuration.Install.UninstallAction" /> qui indique dans quel état laisser le journal des événements une fois <see cref="T:System.Diagnostics.EventLog" /> désinstallé. La valeur par défaut est <see langword="Remove" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous installez un journal des événements, vous pouvez éventuellement le connecter à un journal existant. Si vous procédez ainsi, vous devez décider si le journal doit revenir à son état avant l’installation, ou si elle doit rester dans son état actuel après l’installation. Si vous choisissez de retourner le journal des événements à son état avant l’installation, les modifications apportées aux entrées de journal des événements lors de l’installation ne sont pas restaurées. Vous pouvez réinitialiser uniquement les propriétés du journal des événements qui sont associées les <xref:System.Diagnostics.EventLogInstaller> à leurs valeurs avant l’installation.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <see cref="P:System.Diagnostics.EventLogInstaller.UninstallAction" /> contient une valeur non valide. Les seules valeurs valides pour cette propriété sont <see langword="Remove" /> et <see langword="NoAction" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>