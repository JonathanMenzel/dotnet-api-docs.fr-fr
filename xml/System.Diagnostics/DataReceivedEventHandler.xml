<Type Name="DataReceivedEventHandler" FullName="System.Diagnostics.DataReceivedEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b72e96be77b3f18942ac9258ea5a047960ff7583" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30396563" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void DataReceivedEventHandler(object sender, DataReceivedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed DataReceivedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DataReceivedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub DataReceivedEventHandler(sender As Object, e As DataReceivedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void DataReceivedEventHandler(System::Object ^ sender, DataReceivedEventArgs ^ e);" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Diagnostics.DataReceivedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Source de l'événement.</param>
    <param name="e">
      <see cref="T:System.Diagnostics.DataReceivedEventArgs" /> qui contient les données d'événement.</param>
    <summary>Représente la méthode qui gérera l'événement <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> ou l'événement <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> de <see cref="T:System.Diagnostics.Process" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous créez un délégué <xref:System.Diagnostics.DataReceivedEventHandler>, vous identifiez la méthode qui gérera l'événement. Pour associer l'événement au gestionnaire d'événements, ajoutez une instance du délégué à l'événement. Le gestionnaire d'événements est appelé chaque fois qu'un événement se produit, sauf si vous supprimez le délégué. Pour plus d’informations sur les délégués de gestionnaires d’événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 Pour collecter de manière asynchrone le redirigé <xref:System.Diagnostics.Process.StandardOutput%2A> ou <xref:System.Diagnostics.Process.StandardError%2A> flux de sortie d’un processus, ajoutez votre gestionnaire d’événements pour le <xref:System.Diagnostics.Process.OutputDataReceived> ou <xref:System.Diagnostics.Process.ErrorDataReceived> événement. Ces événements sont déclenchés chaque fois que le processus écrit une ligne dans le flux redirigé correspondant. Lorsque le flux redirigé est fermé, une ligne null est envoyée au gestionnaire d’événements. Assurez-vous que votre gestionnaire d’événements vérifie cette condition avant d’accéder à la <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> propriété. Par exemple, vous pouvez utiliser la `static` méthode <xref:System.String.IsNullOrEmpty%2A?displayProperty=nameWithType> pour valider le <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> propriété dans votre gestionnaire d’événements.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment effectuer des opérations de lecture asynchrones sur le redirigé <xref:System.Diagnostics.Process.StandardOutput%2A> flux de données de la **tri** commande. Le **tri** commande est une application console qui lit et trie les entrées de texte.  
  
 L’exemple crée un <xref:System.Diagnostics.DataReceivedEventHandler> delegate pour le `SortOutputHandler` Gestionnaire d’événements et associe le délégué à la <xref:System.Diagnostics.Process.OutputDataReceived> événement. Le Gestionnaire d’événements reçoit des lignes de texte à partir de la redirection <xref:System.Diagnostics.Process.StandardOutput%2A> flux, met en forme le texte et écrit le texte à l’écran.  
  
 [!code-cpp[Process_AsyncStreams#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process_AsyncStreams#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process_AsyncStreams#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.DataReceivedEventArgs" />
    <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
    <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
    <altmember cref="T:System.Diagnostics.Process" />
  </Docs>
</Type>