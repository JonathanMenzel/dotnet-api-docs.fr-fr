<Type Name="EventInstance" FullName="System.Diagnostics.EventInstance">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1fcc37af9f4bf30ee84633c9cccf19d242a1bba9" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46675517" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventInstance" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventInstance extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventInstance" />
  <TypeSignature Language="VB.NET" Value="Public Class EventInstance" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventInstance" />
  <TypeSignature Language="F#" Value="type EventInstance = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Représente des informations indépendantes du langage pour une entrée du journal des événements.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez <xref:System.Diagnostics.EventInstance> pour écrire une entrée de journal des événements avec un identificateur de ressource plutôt qu’une valeur de chaîne. Pour écrire une entrée de journal des événements, initialisez le <xref:System.Diagnostics.EventInstance.InstanceId%2A> propriété et passez l’instance à la <xref:System.Diagnostics.EventLog.WriteEvent%2A> (méthode). L’Observateur d’événements utilise l’identificateur d’instance pour rechercher et afficher la chaîne correspondante à partir du fichier de ressource localisée selon les paramètres de langue actuels. Vous devez inscrire la source d’événements avec le fichier de ressources correspondant avant d’écrire des événements à l’aide d’identificateurs de ressource.  
  
 Lorsque vous écrivez des événements, vous pouvez définir le <xref:System.Diagnostics.EventInstance.EntryType%2A> propriété pour spécifier l’icône que l’Observateur d’événements affiche pour l’entrée. Vous pouvez également spécifier un <xref:System.Diagnostics.EventInstance.CategoryId%2A> propriété pour spécifier la catégorie qui affiche de l’Observateur d’événements pour l’entrée.  
  
 L’Observateur d’événements utilise la catégorie pour filtrer les événements écrits par une source d’événement. L’Observateur d’événements peut afficher la catégorie en tant que valeur numérique, ou il peut utiliser la catégorie comme identificateur de ressource pour afficher une chaîne de catégorie localisée.  
  
 Pour afficher les chaînes de catégorie localisée dans l’Observateur d’événements, vous devez utiliser une source d’événement configuré avec un fichier de ressources de catégorie et définissez le <xref:System.Diagnostics.EventInstance.CategoryId%2A> à un identificateur de ressource dans le fichier de ressources de catégorie. Si la source d’événements n’a pas un fichier de ressources de catégorie configuré ou spécifié <xref:System.Diagnostics.EventInstance.CategoryId%2A> ne pas l’index une chaîne dans le fichier de ressources de catégorie, puis l’Observateur d’événements affiche la valeur de catégorie numérique pour cette entrée. Configurer le fichier de ressources de catégorie, ainsi que le nombre de chaînes de catégorie dans le fichier de ressources, à l’aide de la <xref:System.Diagnostics.EventLogInstaller> ou <xref:System.Diagnostics.EventSourceCreationData> classe.  
  
 Vous devez inscrire une source pour un journal des événements avant d’utiliser <xref:System.Diagnostics.EventInstance> pour écrire un événement avec le <xref:System.Diagnostics.EventLog.WriteEvent%2A> (méthode). La source doit être configurée pour écrire des entrées localisées dans le journal et la source doit définir au moins un fichier de ressources du message.  
  
 Créer la nouvelle source d’événements pendant l’installation de votre application. Cela laisse le temps au système d’exploitation à actualiser sa liste de sources d’événements inscrits et leurs configurations. Si le système d’exploitation n’a pas actualisé sa liste de sources d’événements, et que vous tentez d’écrire un événement avec la nouvelle source, que l’opération d’écriture échouera. Vous pouvez configurer une source en utilisant un <xref:System.Diagnostics.EventLogInstaller>, ou à l’aide de la <xref:System.Diagnostics.EventLog.CreateEventSource%2A> (méthode). Vous devez disposer des droits d’administration sur l’ordinateur pour créer une source d’événement.  
  
 Pour plus d’informations sur la définition des messages d’événement et la création des fichiers de ressources du journal des événements, consultez la rubrique « Message Compiler » dans la documentation Platform SDK à [ http://msdn.microsoft.com ](http://msdn.microsoft.com).  
  
   
  
## Examples  
 L’exemple de code suivant écrit une entrée d’événement d’information et puis réutilise le <xref:System.Diagnostics.EventInstance> pour écrire une entrée pour un événement d’avertissement dans un journal des événements existant. Le texte de message d’événement est spécifié à l’aide d’un identificateur de ressource dans un fichier de ressources du message. L’exemple de code suppose que le fichier de ressource de message correspondant a été enregistré pour la source.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 L’exemple de code utilise le fichier de texte de message suivant, incorporé dans la bibliothèque de ressources EventLogMsgs.dll. Un fichier texte du message est la source à partir duquel le fichier de ressource de message est créé. Le fichier de texte de message définit les identificateurs de ressource et le texte pour la catégorie, message d’événement et chaînes d’insertion de paramètre.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
    <altmember cref="T:System.Diagnostics.EventLogEntry" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.EventInstance" /> à l'aide d'informations indépendantes du langage pour définir une entrée de journal des événements.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventInstance (long instanceId, int categoryId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 instanceId, int32 categoryId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (instanceId As Long, categoryId As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventInstance(long instanceId, int categoryId);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventInstance : int64 * int -&gt; System.Diagnostics.EventInstance" Usage="new System.Diagnostics.EventInstance (instanceId, categoryId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Int64" />
        <Parameter Name="categoryId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="instanceId">Identificateur de ressource qui correspond à une chaîne définie dans le fichier de ressources d'un message de la source d'événements.</param>
        <param name="categoryId">Identificateur de ressource qui correspond à une chaîne définie dans le fichier de ressources de catégorie de la source d'événements ou zéro pour ne spécifier aucune catégorie pour l'événement.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.EventInstance" /> à l'aide des identificateurs de ressource spécifiés pour le message localisé et le texte de catégorie de l'entrée d'événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour écrire une entrée d’information dans un journal des événements, initialiser un <xref:System.Diagnostics.EventInstance> et transmettez-le à la <xref:System.Diagnostics.EventLog.WriteEvent%2A> (méthode). Définir le `instanceId` à l’identificateur de ressource du message d’événement dans le correspondantes <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> propriété pour la source. Définir le `categoryId` à une valeur de catégorie numérique, ou l’identificateur de ressource de la catégorie d’événement dans le <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> propriété pour la source ; ensemble la `categoryId` à zéro pour aucune catégorie d’événements. Le <xref:System.Diagnostics.EventInstance.EntryType%2A> propriété pour la nouvelle instance a la valeur <xref:System.Diagnostics.EventLogEntryType.Information> par défaut.  
  
 L’Observateur d’événements utilise les identificateurs de ressource pour afficher les chaînes correspondantes à partir des fichiers de ressource localisée pour la source. Vous devez inscrire la source avec les fichiers de ressources correspondant avant d’écrire des événements à l’aide d’identificateurs de ressource.  
  
   
  
## Examples  
 L’exemple de code suivant écrit une entrée d’événement d’information et puis réutilise le <xref:System.Diagnostics.EventInstance> pour écrire une entrée pour un événement d’avertissement dans un journal des événements existant. Le texte de message d’événement est spécifié à l’aide d’un identificateur de ressource dans un fichier de ressources du message. L’exemple de code suppose que le fichier de ressource de message correspondant a été enregistré pour la source.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 L’exemple de code utilise le fichier de texte de message suivant, incorporé dans la bibliothèque de ressources EventLogMsgs.dll. Un fichier texte du message est la source à partir duquel le fichier de ressource de message est créé. Le fichier de texte de message définit les identificateurs de ressource et le texte pour la catégorie, message d’événement et chaînes d’insertion de paramètre.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="instanceId" /> est une valeur négative ou une valeur supérieure à <see cref="F:System.UInt32.MaxValue" />.  
  
- ou - 
Le paramètre <paramref name="categoryId" /> est une valeur négative ou une valeur supérieure à <see cref="F:System.UInt16.MaxValue" />.</exception>
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
        <altmember cref="P:System.Diagnostics.EventInstance.InstanceId" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventSourceCreationData" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventInstance (long instanceId, int categoryId, System.Diagnostics.EventLogEntryType entryType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 instanceId, int32 categoryId, valuetype System.Diagnostics.EventLogEntryType entryType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (instanceId As Long, categoryId As Integer, entryType As EventLogEntryType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventInstance(long instanceId, int categoryId, System::Diagnostics::EventLogEntryType entryType);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventInstance : int64 * int * System.Diagnostics.EventLogEntryType -&gt; System.Diagnostics.EventInstance" Usage="new System.Diagnostics.EventInstance (instanceId, categoryId, entryType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Int64" />
        <Parameter Name="categoryId" Type="System.Int32" />
        <Parameter Name="entryType" Type="System.Diagnostics.EventLogEntryType" />
      </Parameters>
      <Docs>
        <param name="instanceId">Identificateur de ressource qui correspond à une chaîne définie dans le fichier de ressources d'un message de la source d'événements.</param>
        <param name="categoryId">Identificateur de ressource qui correspond à une chaîne définie dans le fichier de ressources de catégorie de la source d'événements ou zéro pour ne spécifier aucune catégorie pour l'événement.</param>
        <param name="entryType">Valeur <see cref="T:System.Diagnostics.EventLogEntryType" /> indiquant le type de l'événement.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.EventInstance" /> à l'aide des identificateurs de ressource spécifiés pour le message localisé, le texte de catégorie de l'entrée d'événement et le type d'entrée du journal des événements spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour écrire une entrée dans un journal des événements, initialiser un <xref:System.Diagnostics.EventInstance> et transmettez-le à la <xref:System.Diagnostics.EventLog.WriteEvent%2A> (méthode). Définir le `instanceId` à l’identificateur de ressource du message d’événement dans le correspondantes <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> propriété pour la source. Définir le `categoryId` à une valeur de catégorie numérique, ou l’identificateur de ressource de la catégorie d’événement dans le <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> propriété pour la source ; ensemble la `categoryId` à zéro pour aucune catégorie d’événements.  
  
 L’Observateur d’événements utilise les identificateurs de ressource pour afficher les chaînes correspondantes à partir des fichiers de ressource localisée pour la source. Vous devez inscrire la source avec les fichiers de ressources correspondant avant d’écrire des événements à l’aide d’identificateurs de ressource.  
  
 Définir le `entryType` à un des types d’entrées prédéfinis. L’Observateur d’événements utilise le type d’événement pour déterminer l’icône à afficher dans la vue liste du journal des événements.  
  
   
  
## Examples  
 L’exemple de code suivant écrit deux entrées d’événements dans le journal des événements d’audit `myNewLog`. L’exemple de code crée une nouvelle source d’événements et un journal des événements si elles n’existent pas sur l’ordinateur local. Le texte de message d’événement est spécifié à l’aide d’un identificateur de ressource dans un fichier de ressources.  
  
 [!code-cpp[EventLog_WriteEvent#7](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#7)]
 [!code-csharp[EventLog_WriteEvent#7](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#7)]
 [!code-vb[EventLog_WriteEvent#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#7)]  
  
 L’exemple de code utilise le fichier de texte de message suivant, incorporé dans la bibliothèque de ressources EventLogMsgs.dll. Un fichier texte du message est la source à partir duquel le fichier de ressource de message est créé. Le fichier de texte de message définit les identificateurs de ressource et le texte pour la catégorie, message d’événement et chaînes d’insertion de paramètre.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="entryType" /> n’est pas une valeur de <see cref="T:System.Diagnostics.EventLogEntryType" /> valide.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="instanceId" /> est une valeur négative ou une valeur supérieure à <see cref="F:System.UInt32.MaxValue" />.  
  
- ou - 
 <paramref name="categoryId" /> est une valeur négative ou une valeur supérieure à <see cref="F:System.UInt16.MaxValue" />.</exception>
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
        <altmember cref="P:System.Diagnostics.EventInstance.InstanceId" />
        <altmember cref="T:System.Diagnostics.EventLogEntry" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventSourceCreationData" />
      </Docs>
    </Member>
    <Member MemberName="CategoryId">
      <MemberSignature Language="C#" Value="public int CategoryId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.CategoryId" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryId { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryId : int with get, set" Usage="System.Diagnostics.EventInstance.CategoryId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'identificateur de ressource qui spécifie la catégorie d'entrée d'événement définie par l'application.</summary>
        <value>Valeur de catégorie numérique ou identificateur de ressource qui correspond à une chaîne définie dans le fichier de ressources de catégorie de la source d'événements. La valeur par défaut est zéro, ce qui signifie qu'aucune catégorie ne sera affichée pour l'entrée d'événement.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Catégories du journal des événements sont des valeurs définies par l’application qui aident à filtrer des événements ou pour des informations sur l’événement. Par exemple, votre application peut définir des catégories distinctes pour différents composants ou des opérations différentes.  
  
 Définir le <xref:System.Diagnostics.EventInstance.CategoryId%2A> propriété pour spécifier la catégorie qui affiche de l’Observateur d’événements pour l’entrée. L’Observateur d’événements peut afficher la catégorie en tant que valeur numérique, ou il peut utiliser le <xref:System.Diagnostics.EventInstance.CategoryId%2A> en tant que ressource identificateur pour afficher une chaîne de catégorie localisée selon les paramètres de langue actuel.  
  
 Pour afficher les chaînes de catégorie localisée dans l’Observateur d’événements, vous devez utiliser une source d’événement configuré avec un fichier de ressources de catégorie et définissez le <xref:System.Diagnostics.EventInstance.CategoryId%2A> à un identificateur de ressource dans le fichier de ressources de catégorie. Si la source d’événements n’a pas un fichier de ressources de catégorie configuré ou spécifié <xref:System.Diagnostics.EventInstance.CategoryId%2A> ne pas l’index une chaîne dans le fichier de ressources de catégorie, puis l’Observateur d’événements affiche la valeur de catégorie numérique pour cette entrée.  
  
 Vous devez inscrire la source avec le fichier de ressources correspondant avant d’écrire des catégories d’événements à l’aide d’identificateurs de ressource. Configurer le fichier de ressources de catégorie, ainsi que le nombre de chaînes de catégorie dans le fichier de ressources, à l’aide de la <xref:System.Diagnostics.EventLogInstaller> ou <xref:System.Diagnostics.EventSourceCreationData> classe. Lors de la définition des chaînes de catégorie dans un fichier de ressources, les identificateurs de ressource de catégorie doivent être numérotés consécutivement en commençant à 1, jusqu'à configuré <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> valeur de propriété.  
  
 Catégories d’événements sont facultatifs. Si votre application n’utilise pas de catégories, ne définissez pas la <xref:System.Diagnostics.EventInstance.CategoryId%2A> pour l’entrée de journal des événements.  
  
 Pour plus d’informations sur la définition des messages d’événement et la création de fichiers de ressources d’événement, consultez la rubrique « Message Compiler » dans la documentation Platform SDK à [ http://msdn.microsoft.com ](http://msdn.microsoft.com/). Pour plus d’informations sur la définition des catégories d’événements dans les fichiers de ressources, consultez la rubrique « Catégories d’événements » dans le SDK de plateforme  
  
   
  
## Examples  
 L’exemple de code suivant écrit une entrée d’événement d’information et puis réutilise le <xref:System.Diagnostics.EventInstance> pour écrire une entrée pour un événement d’avertissement dans un journal des événements existant. Le texte de message d’événement est spécifié à l’aide d’un identificateur de ressource dans un fichier de ressources du message. L’exemple de code suppose que le fichier de ressource de message correspondant a été enregistré pour la source.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 L’exemple de code utilise le fichier de texte de message suivant, incorporé dans la bibliothèque de ressources EventLogMsgs.dll. Un fichier texte du message est la source à partir duquel le fichier de ressource de message est créé. Le fichier de texte de message définit les identificateurs de ressource et le texte pour la catégorie, message d’événement et chaînes d’insertion de paramètre.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propriété est définie avec une valeur négative ou avec une valeur supérieure à <see cref="F:System.UInt16.MaxValue" />.</exception>
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.CategoryNumber" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="EntryType">
      <MemberSignature Language="C#" Value="public System.Diagnostics.EventLogEntryType EntryType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.EventLogEntryType EntryType" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.EntryType" />
      <MemberSignature Language="VB.NET" Value="Public Property EntryType As EventLogEntryType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::EventLogEntryType EntryType { System::Diagnostics::EventLogEntryType get(); void set(System::Diagnostics::EventLogEntryType value); };" />
      <MemberSignature Language="F#" Value="member this.EntryType : System.Diagnostics.EventLogEntryType with get, set" Usage="System.Diagnostics.EventInstance.EntryType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLogEntryType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le type d'événement de l'entrée du journal des événements.</summary>
        <value>Valeur <see cref="T:System.Diagnostics.EventLogEntryType" /> indiquant le type d'entrée d'événement. La valeur par défaut est <see cref="F:System.Diagnostics.EventLogEntryType.Information" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chaque événement est d’un même type, l’application lorsqu’elle signale l’événement. L’Observateur d’événements utilise le type d’événement pour déterminer l’icône à afficher dans la vue liste du journal des événements.  
  
   
  
## Examples  
 L’exemple de code suivant écrit une entrée d’événement d’information et puis réutilise le <xref:System.Diagnostics.EventInstance> pour écrire une entrée pour un événement d’avertissement dans un journal des événements existant. Le texte de message d’événement est spécifié à l’aide d’un identificateur de ressource dans un fichier de ressources du message. L’exemple de code suppose que le fichier de ressource de message correspondant a été enregistré pour la source.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 L’exemple de code utilise le fichier de texte de message suivant, incorporé dans la bibliothèque de ressources EventLogMsgs.dll. Un fichier texte du message est la source à partir duquel le fichier de ressource de message est créé. Le fichier de texte de message définit les identificateurs de ressource et le texte pour la catégorie, message d’événement et chaînes d’insertion de paramètre.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">La propriété n'a pas une valeur <see cref="T:System.Diagnostics.EventLogEntryType" /> valide.</exception>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.EntryType" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public long InstanceId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 InstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.InstanceId" />
      <MemberSignature Language="VB.NET" Value="Public Property InstanceId As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long InstanceId { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.InstanceId : int64 with get, set" Usage="System.Diagnostics.EventInstance.InstanceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'identificateur de ressource qui désigne le texte du message de l'entrée d'événement.</summary>
        <value>Identificateur de ressource qui correspond à une chaîne définie dans le fichier de ressources d'un message de la source d'événements.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Diagnostics.EventInstance.InstanceId%2A> propriété identifie de façon unique une entrée d’événement pour une source d’événement configuré. Pour les événements définis dans les fichiers de ressources du message, le <xref:System.Diagnostics.EventInstance.InstanceId%2A> correspond à l’identificateur de ressource compilé à partir des champs de définition de message dans le fichier de texte du message. Votre application peut écrire des entrées de journal des événements localisées en définissant le <xref:System.Diagnostics.EventInstance.InstanceId%2A> à un identificateur de ressource. L’Observateur d’événements utilise la <xref:System.Diagnostics.EventInstance.InstanceId%2A> identificateur de ressource pour rechercher et afficher la chaîne correspondante à partir du fichier de ressources localisé en fonction des paramètres de langue actuel. Vous devez inscrire la source avec le fichier de ressources correspondant avant d’écrire des événements à l’aide d’identificateurs de ressource.  
  
 Pour plus d’informations sur la définition des messages d’événement et la création des fichiers de ressources du journal des événements, consultez la rubrique « Message Compiler » dans la documentation Platform SDK à [ http://msdn.microsoft.com ](http://msdn.microsoft.com/). Pour plus d’informations sur les identificateurs du journal des événements, consultez la rubrique « Identificateurs d’événement » dans le SDK de plateforme.  
  
   
  
## Examples  
 L’exemple de code suivant écrit une entrée d’événement d’information et puis réutilise le <xref:System.Diagnostics.EventInstance> pour écrire une entrée pour un événement d’avertissement dans un journal des événements existant. Le texte de message d’événement est spécifié à l’aide d’un identificateur de ressource dans un fichier de ressources du message. L’exemple de code suppose que le fichier de ressource de message correspondant a été enregistré pour la source.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 L’exemple de code utilise le fichier de texte de message suivant, incorporé dans la bibliothèque de ressources EventLogMsgs.dll. Un fichier texte du message est la source à partir duquel le fichier de ressource de message est créé. Le fichier de texte de message définit les identificateurs de ressource et le texte pour la catégorie, message d’événement et chaînes d’insertion de paramètre.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propriété est définie avec une valeur négative ou avec une valeur supérieure à <see cref="F:System.UInt32.MaxValue" />.</exception>
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.InstanceId" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
  </Members>
</Type>