<Type Name="EventSourceCreationData" FullName="System.Diagnostics.EventSourceCreationData">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c40013fc396f54e9d0337d11e759ad8030d3f940" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56769630" /></Metadata><TypeSignature Language="C#" Value="public class EventSourceCreationData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSourceCreationData extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventSourceCreationData" />
  <TypeSignature Language="VB.NET" Value="Public Class EventSourceCreationData" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventSourceCreationData" />
  <TypeSignature Language="F#" Value="type EventSourceCreationData = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Représente les paramètres de configuration utilisés pour créer une source de journal des événements sur l'ordinateur local ou un ordinateur distant.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la <xref:System.Diagnostics.EventSourceCreationData> classe permettant de configurer une nouvelle source pour écrire des entrées localisées dans un journal des événements. Il n’est pas nécessaire d’utiliser cette classe pour lire à partir d’un journal des événements.  
  
 Cette classe définit les paramètres de configuration pour une source d’événement et son journal des événements associé. Le journal des événements associé peut être sur l’ordinateur local ou un ordinateur distant. Pour créer une nouvelle source pour un journal des événements nouveau ou existant sur l’ordinateur local, définissez le <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> et <xref:System.Diagnostics.EventSourceCreationData.Source%2A> propriétés d’un <xref:System.Diagnostics.EventSourceCreationData> et appelez le <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> (méthode). Cette méthode crée la source d’événements que vous spécifiez dans le <xref:System.Diagnostics.EventSourceCreationData.Source%2A> propriété et des registres pour le journal des événements spécifié dans <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>. Ce comportement est semblable à l’utilisation de la <xref:System.Diagnostics.EventLogInstaller> classe pour inscrire une source d’événement pour un journal des événements.  
  
 Utilisez le <xref:System.Diagnostics.EventLog.WriteEvent%2A> et <xref:System.Diagnostics.EventLog.WriteEntry%2A> méthodes pour écrire des événements dans un journal des événements. Vous devez spécifier une source d’événement pour écrire des événements ; Vous devez créer et configurer la source d’événement avant l’écriture de la première entrée avec la source.  
  
 Créer la nouvelle source d’événements pendant l’installation de votre application. Cela laisse le temps au système d’exploitation à actualiser sa liste de sources d’événements inscrits et leurs configurations. Si le système d’exploitation n’a pas actualisé sa liste de sources d’événements, et que vous tentez d’écrire un événement avec la nouvelle source, que l’opération d’écriture échouera. Vous pouvez configurer une source en utilisant un <xref:System.Diagnostics.EventLogInstaller>, ou à l’aide de la <xref:System.Diagnostics.EventLog.CreateEventSource%2A> (méthode). Vous devez disposer des droits d’administration sur l’ordinateur pour créer une source d’événement.  
  
 Vous pouvez créer une source d’événement pour un journal des événements existant ou un journal des événements. Lorsque vous créez une nouvelle source pour un journal des événements, le système inscrit la source de ce journal, mais le journal n’est pas créé jusqu'à ce que la première entrée est écrites.  
  
 Chaque source ne peut écrire dans un journal des événements à la fois. Toutefois, votre application peut utiliser plusieurs sources pour écrire dans plusieurs journaux des événements. Par exemple, votre application peut avoir besoin de plusieurs sources configurés pour des journaux des événements ou des fichiers de ressources différents.  
  
 Pour modifier les détails de configuration d’une source existante, vous devez supprimer la source et puis créez-le avec la nouvelle configuration. Si d’autres applications ou composants utilisent la source existante, créez une nouvelle source avec la configuration mise à jour, plutôt que de supprimer la source existante.  
  
 Vous pouvez inscrire la source d’événements avec des ressources localisées pour vos chaînes de catégorie et le message d’événement. Votre application peut écrire des entrées de journal des événements à l’aide d’identificateurs de ressources, plutôt que de spécifier la chaîne réelle. L’Observateur d’événements utilise l’identificateur de ressource pour rechercher et afficher la chaîne correspondante à partir du fichier de ressource localisée selon les paramètres de langue actuels. Vous pouvez enregistrer un fichier distinct pour les catégories d’événements, les messages et les chaînes d’insertion de paramètre, ou vous pouvez inscrire le même fichier de ressources pour les trois types de chaînes. Utilisez le <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, et <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> propriétés pour configurer la source pour écrire des entrées localisées dans le journal des événements. Si votre application écrit les valeurs de chaîne directement dans le journal des événements, il est inutile de définir ces propriétés.  
  
 La source doit être configurée pour écrire des entrées localisées ou pour l’écriture de chaînes directes. Le <xref:System.Diagnostics.EventLog.WriteEntry%2A> méthode écrit la chaîne donnée directement dans le journal des événements ; elle n’utilise pas un fichier de ressources du message localisable. Utilisez le <xref:System.Diagnostics.EventLog.WriteEvent%2A> méthode pour écrire des événements à l’aide d’un fichier de ressources du message localisé.  
  
 Si votre application écrit des entrées à l’aide d’identificateurs de ressource et de valeurs de chaîne, vous devez inscrire deux sources distinctes. Par exemple, configurez une source de fichiers de ressources et ensuite utiliser cette source dans le <xref:System.Diagnostics.EventLog.WriteEvent%2A> méthode pour écrire des entrées à l’aide d’identificateurs de ressource dans le journal des événements. Créer une autre source, sans fichiers de ressources, puis utiliser cette source dans le <xref:System.Diagnostics.EventLog.WriteEntry%2A> méthode pour écrire des chaînes directement dans le journal des événements à l’aide de cette source.  
  
   
  
## Examples  
 L’exemple de code suivant définit les propriétés de configuration pour une source d’événement à partir des arguments de ligne de commande. Les arguments d’entrée spécifient le nom de source d’événement, nom du journal des événements, nom de l’ordinateur et événements message fichier de ressources. L’exemple de code vérifie que la source n’est pas en conflit avec une source d’événements existant et crée ensuite la nouvelle source d’événements pour le journal des événements spécifié.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#1)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#1)]
 [!code-vb[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">pour appeler les membres de <see cref="T:System.Diagnostics.EventSourceCreationData" /> avec une confiance totale. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="T:System.Diagnostics.EventLogInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSourceCreationData (string source, string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string source, string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (source As String, logName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSourceCreationData(System::String ^ source, System::String ^ logName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSourceCreationData : string * string -&gt; System.Diagnostics.EventSourceCreationData" Usage="new System.Diagnostics.EventSourceCreationData (source, logName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Nom à enregistrer auprès du journal des événements comme source d'entrées.</param>
        <param name="logName">Nom du journal dans lequel les entrées de la source sont écrites.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.EventSourceCreationData" /> avec une source d'événements et un nom de journal des événements spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour écrire des entrées dans un journal des événements, que vous devez d’abord créer une source d’événement du journal des événements. Pour inscrire une nouvelle source, initialisez une <xref:System.Diagnostics.EventSourceCreationData> d’une instance, configurez les propriétés d’instance pour votre application et appeler le <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> (méthode). Une fois que la source est inscrite, vous pouvez écrire des entrées à partir de la source en utilisant le <xref:System.Diagnostics.EventLog.WriteEvent%2A> ou <xref:System.Diagnostics.EventLog.WriteEntry%2A> méthodes.  
  
 Vous pouvez inscrire la source d’événements avec des ressources localisées pour vos chaînes de catégorie et le message d’événement. Votre application peut écrire des entrées de journal des événements à l’aide d’identificateurs de ressources, plutôt que de spécifier la chaîne réelle. L’Observateur d’événements utilise l’identificateur de ressource pour rechercher et afficher la chaîne correspondante à partir du fichier de ressource localisée selon les paramètres de langue actuels. Vous pouvez enregistrer un fichier distinct pour les catégories d’événements, les messages et les chaînes d’insertion de paramètre, ou vous pouvez inscrire le même fichier de ressources pour les trois types de chaînes. Utilisez le <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, et <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> propriétés pour configurer la source pour écrire des entrées localisées dans le journal des événements. Si votre application écrit les valeurs de chaîne directement dans le journal des événements, il est inutile de définir ces propriétés.  
  
 La source doit être configurée pour écrire des entrées localisées ou pour l’écriture de chaînes directes. Si votre application écrit des entrées à l’aide d’identificateurs de ressource et de valeurs de chaîne, vous devez inscrire deux sources distinctes. Par exemple, configurez une source de fichiers de ressources et ensuite utiliser cette source dans le <xref:System.Diagnostics.EventLog.WriteEvent%2A> méthode pour écrire des entrées à l’aide d’identificateurs de ressource dans le journal des événements. Créer une autre source, sans fichiers de ressources, puis utiliser cette source dans le <xref:System.Diagnostics.EventLog.WriteEntry%2A> méthode pour écrire des chaînes directement dans le journal des événements.  
  
 Le tableau suivant montre les valeurs initiales des propriétés pour un <xref:System.Diagnostics.EventSourceCreationData>.  
  
|Property|Valeur initiale|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventSourceCreationData.Source%2A>|Paramètre `source`.|  
|<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>|Paramètre `logName`.|  
|<xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>|L’ordinateur local («. »).|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>|Zéro|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>|`null` (`Nothing` en Visual Basic).|  
|<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>|`null` (`Nothing` en Visual Basic).|  
|<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>|`null` (`Nothing` en Visual Basic).|  
  
   
  
## Examples  
 L’exemple de code suivant détermine si la source d’événements nommée `SampleApplicationSource` est inscrite sur l’ordinateur local. Si la source d’événements n’existe pas, l’exemple définit le fichier de ressources de message pour la source et crée la nouvelle source d’événements. Enfin, l’exemple de code définit le nom complet localisé du journal des événements, à l’aide de la valeur d’identificateur de ressource dans `DisplayNameMsgId` et le chemin d’accès du fichier de ressources dans `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 L’exemple de code utilise le fichier de texte de message suivant, incorporé dans la bibliothèque de ressources EventLogMsgs.dll. Un fichier texte du message est la source à partir duquel le fichier de ressource de message est créé. Le fichier de texte de message définit les identificateurs de ressource et le texte pour la catégorie, message d’événement et chaînes d’insertion de paramètre.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour appeler les membres de <see cref="T:System.Diagnostics.EventSourceCreationData" /> avec une confiance totale. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.LogName" />
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryCount : int with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le numéro de catégorie dans le fichier de ressources de catégorie.</summary>
        <value>Numéro de catégories dans le fichier de ressources de catégorie. La valeur par défaut est 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> et <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> propriétés pour écrire des événements avec localisées des chaînes de catégorie. L’Observateur d’événements affiche la catégorie pour une entrée d’événement si vous fournissez une catégorie lorsque vous écrivez l’événement. Catégories du journal des événements sont des chaînes définies par l’application qui aident à filtrer des événements ou fournissent des informations supplémentaires sur l’événement. Par exemple, votre application peut définir des catégories distinctes pour différents composants ou des opérations différentes.  
  
 Catégories d’événements sont facultatifs ; Si votre application n’utilise pas de catégories, ne définissez pas la <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> et <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> propriétés.  
  
 Pour plus d’informations sur la définition des messages d’événement et la création de fichiers de ressources d’événement, consultez la rubrique « Message Compiler » dans la documentation Platform SDK à [ http://msdn.microsoft.com ](https://msdn.microsoft.com/).  
  
   
  
## Examples  
 L’exemple de code suivant détermine si la source d’événements nommée `SampleApplicationSource` est inscrite sur l’ordinateur local. Si la source d’événements n’existe pas, l’exemple définit le fichier de ressources de message pour la source et crée la nouvelle source d’événements. Enfin, l’exemple de code définit le nom complet localisé du journal des événements, à l’aide de la valeur d’identificateur de ressource dans `DisplayNameMsgId` et le chemin d’accès du fichier de ressources dans `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 L’exemple de code utilise le fichier de texte de message suivant, incorporé dans la bibliothèque de ressources EventLogMsgs.dll. Un fichier texte du message est la source à partir duquel le fichier de ressource de message est créé. Le fichier de texte de message définit les identificateurs de ressource et le texte pour la catégorie, message d’événement et chaînes d’insertion de paramètre.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propriété est définie avec une valeur négative ou avec une valeur supérieure à <see cref="F:System.UInt16.MaxValue" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour appeler les membres de <see cref="T:System.Diagnostics.EventSourceCreationData" /> avec une confiance totale. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le chemin d'accès du fichier de ressources contenant des chaînes de catégorie pour la source.</summary>
        <value>Chemin d'accès au fichier de ressources de catégorie. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> et <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> propriétés pour écrire des événements avec localisées des chaînes de catégorie. L’Observateur d’événements affiche la catégorie pour une entrée d’événement si vous fournissez une catégorie lorsque vous écrivez l’événement. Catégories du journal des événements sont des chaînes définies par l’application qui aident à filtrer des événements ou fournissent des informations supplémentaires sur l’événement. Par exemple, votre application peut définir des catégories distinctes pour différents composants ou des opérations différentes.  
  
 Catégories d’événements sont facultatifs ; Si votre application n’utilise pas de catégories, ne définissez pas la <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> et <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> propriétés.  
  
 Pour plus d’informations sur la définition des messages d’événement et la création de fichiers de ressources d’événement, consultez la rubrique « Message Compiler » dans la documentation Platform SDK à [ http://msdn.microsoft.com ](https://msdn.microsoft.com/).  
  
   
  
## Examples  
 L’exemple de code suivant détermine si la source d’événements nommée `SampleApplicationSource` est inscrite sur l’ordinateur local. Si la source d’événements n’existe pas, l’exemple définit le fichier de ressources de message pour la source et crée la nouvelle source d’événements. Enfin, l’exemple de code définit le nom complet localisé du journal des événements, à l’aide de la valeur d’identificateur de ressource dans `DisplayNameMsgId` et le chemin d’accès du fichier de ressources dans `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 L’exemple de code utilise le fichier de texte de message suivant, incorporé dans la bibliothèque de ressources EventLogMsgs.dll. Un fichier texte du message est la source à partir duquel le fichier de ressource de message est créé. Le fichier de texte de message définit les identificateurs de ressource et le texte pour la catégorie, message d’événement et chaînes d’insertion de paramètre.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour appeler les membres de <see cref="T:System.Diagnostics.EventSourceCreationData" /> avec une confiance totale. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="LogName">
      <MemberSignature Language="C#" Value="public string LogName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberSignature Language="VB.NET" Value="Public Property LogName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LogName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LogName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom du journal des événements dans lequel la source écrit des entrées.</summary>
        <value>Nom du journal des événements. Il peut s'agir d'application, système ou d'un nom de journal personnalisé. La valeur par défaut est « application ».</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> propriété pour identifier le journal des événements que votre application écrit des entrées à l’aide de la nouvelle source. Le journal des événements peut être un nouveau journal ou un journal existant. Applications et services doivent écrire dans le journal des applications ou d’un journal personnalisé. Pilotes de périphérique doivent écrire dans le journal système. Si vous ne définissez pas explicitement la <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> propriété, le journal des événements par défaut dans le journal des applications.  
  
> [!NOTE]
>  Le journal de sécurité est en lecture seule.  
  
 Pour cibler un journal existant pour la nouvelle source, définissez le <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> propriété le nom de journal des événements existant. Pour créer un nouveau journal des événements pour la source, vous devez définir le <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> propriété. Les noms des journaux d’événements doivent comporter des caractères imprimables et ne peuvent pas inclure les caractères « * », « ? » ou « \\ ». Les 8 premiers caractères du nom du journal des événements doivent être différents à partir des 8 premiers caractères des noms existants de journaux des événements sur l’ordinateur spécifié.  
  
 Le système d’exploitation stocke les journaux des événements sous forme de fichiers. Lorsque vous utilisez <xref:System.Diagnostics.EventLogInstaller> ou <xref:System.Diagnostics.EventLog.CreateEventSource%2A> méthode pour créer un nouveau journal des événements, le fichier associé est stocké dans le répertoire %SystemRoot%\System32\Config sur l’ordinateur spécifié. Le nom de fichier est défini en ajoutant les 8 premiers caractères de la <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> propriété avec l’extension de nom de fichier « .evt ».  
  
   
  
## Examples  
 L’exemple de code suivant définit les propriétés de configuration pour une source d’événement à partir des arguments de ligne de commande. Les arguments d’entrée spécifient le nom de source d’événement, nom du journal des événements, nom de l’ordinateur et événements message fichier de ressources. Cet exemple fait partie d’un exemple plus complet fourni pour la <xref:System.Diagnostics.EventSourceCreationData> classe.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour appeler les membres de <see cref="T:System.Diagnostics.EventSourceCreationData" /> avec une confiance totale. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Log" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de l'ordinateur à utiliser pour enregistrer la source d'événements.</summary>
        <value>Nom du système sur lequel enregistrer la source d'événements. La valeur par défaut est l'ordinateur local (".").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> valeur ne peut pas être une chaîne vide. Si le nom de l’ordinateur n’est pas défini explicitement, par défaut sur l’ordinateur local («. »).  
  
 Lorsque vous inscrivez une source sur un ordinateur distant, vous devez disposer des droits d’administration sur cet ordinateur pour écrire les valeurs de Registre avec des autorisations suffisantes.  
  
   
  
## Examples  
 L’exemple de code suivant définit les propriétés de configuration pour une source d’événement à partir des arguments de ligne de commande. Les arguments d’entrée spécifient le nom de source d’événement, nom du journal des événements, nom de l’ordinateur et événements message fichier de ressources. Cet exemple fait partie d’un exemple plus complet fourni pour la <xref:System.Diagnostics.EventSourceCreationData> classe.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le nom d'ordinateur est non valide.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour appeler les membres de <see cref="T:System.Diagnostics.EventSourceCreationData" /> avec une confiance totale. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MessageResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le chemin d'accès du fichier de ressources du message contenant des chaînes de mise en forme du message pour la source.</summary>
        <value>Chemin d'accès au fichier de ressources du message. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> propriété pour configurer une source de journal des événements pour écrire des messages d’événement localisés. Messages d’événement sont des chaînes définies par l’application qui décrivent l’événement à l’utilisateur.  
  
 Votre application peut écrire des entrées de journal des événements à l’aide d’identificateurs de ressource. Un identificateur de ressource indexe un message se trouvant dans le <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>. L’Observateur d’événements utilise l’identificateur de ressource pour rechercher et afficher la chaîne correspondante à partir du fichier de ressource de message localisé en fonction des paramètres de langue actuel.  
  
 La source d’événements doit être configurée pour l’écriture d’entrées localisées ou pour l’écriture de chaînes directes. Utilisez le <xref:System.Diagnostics.EventLog.WriteEvent%2A> méthode pour écrire des entrées localisées pour une source configurée avec un fichier de ressources du message.  
  
 Si votre application écrit les chaînes de message d’événement directement, au lieu d’utiliser un identificateur de ressource dans un fichier de ressources localisé, ne définissez pas le <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> propriété.  
  
 Pour plus d’informations sur la définition des messages d’événement et la création de fichiers de ressources d’événement, consultez la rubrique « Message Compiler » dans la documentation Platform SDK à [ http://msdn.microsoft.com ](https://msdn.microsoft.com/).  
  
   
  
## Examples  
 L’exemple de code suivant détermine si la source d’événements nommée `SampleApplicationSource` est inscrite sur l’ordinateur local. Si la source d’événements n’existe pas, l’exemple définit le fichier de ressources de message pour la source et crée la nouvelle source d’événements. Enfin, l’exemple de code définit le nom complet localisé du journal des événements, à l’aide de la valeur d’identificateur de ressource dans `DisplayNameMsgId` et le chemin d’accès du fichier de ressources dans `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 L’exemple de code utilise le fichier de texte de message suivant, incorporé dans la bibliothèque de ressources EventLogMsgs.dll. Un fichier texte du message est la source à partir duquel le fichier de ressource de message est créé. Le fichier de texte de message définit les identificateurs de ressource et le texte pour la catégorie, message d’événement et chaînes d’insertion de paramètre.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour appeler les membres de <see cref="T:System.Diagnostics.EventSourceCreationData" /> avec une confiance totale. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ParameterResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le chemin d'accès du fichier de ressources qui contient des chaînes de paramètre du message pour la source.</summary>
        <value>Chemin d'accès au fichier de ressources du paramètre. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> propriété pour configurer une source de journal des événements pour écrire des messages d’événement localisés avec des chaînes de paramètre insérées. Chaque message d’événement localisé spécifié dans le <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> propriété peut contenir des espaces réservés pour les chaînes d’insertion. Ces espaces réservés sont utilisés pour spécifier la position et l’identificateur de ressource pour une chaîne indépendante du langage dans le message d’événement. L’Observateur d’événements remplit les espaces réservés avec les chaînes correspondantes de la <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> et met en forme le message de journal des événements pour l’entrée d’événement localisée.  
  
 Par exemple, la section suivante d’un fichier texte de message définit une chaîne avec un espace réservé de paramètre :  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 Dans le fichier de ressources de paramètre, la chaîne d’insertion doit être définie avec l’identificateur de ressource qui correspond à l’espace réservé, comme indiqué ci-dessous :  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 La source d’événements doit être configurée pour l’écriture d’entrées localisées ou pour l’écriture de chaînes directes. Utilisez le <xref:System.Diagnostics.EventLog.WriteEvent%2A> méthode pour écrire des entrées localisées pour une source configurée avec un fichier de ressources du message.  
  
 Si votre application écrit les chaînes de message d’événement directement dans le journal des événements, ou si votre <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> propriété ne contient-elle pas de messages avec des espaces réservés de paramètre d’insertion, ne définissez pas le <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> propriété.  
  
 Pour plus d’informations sur la définition des messages d’événement et la création de fichiers de ressources d’événement, consultez la rubrique « Message Compiler » dans la documentation Platform SDK à [ http://msdn.microsoft.com ](https://msdn.microsoft.com/).  
  
   
  
## Examples  
 L’exemple de code suivant détermine si la source d’événements nommée `SampleApplicationSource` est inscrite sur l’ordinateur local. Si la source d’événements n’existe pas, l’exemple définit le fichier de ressources de message pour la source et crée la nouvelle source d’événements. Enfin, l’exemple de code définit le nom complet localisé du journal des événements, à l’aide de la valeur d’identificateur de ressource dans `DisplayNameMsgId` et le chemin d’accès du fichier de ressources dans `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 L’exemple de code utilise le fichier de texte de message suivant, incorporé dans la bibliothèque de ressources EventLogMsgs.dll. Un fichier texte du message est la source à partir duquel le fichier de ressource de message est créé. Le fichier de texte de message définit les identificateurs de ressource et le texte pour la catégorie, message d’événement et chaînes d’insertion de paramètre. Plus précisément, le message défini pour l’identificateur de ressource 1004 utilise un espace réservé pour une chaîne de paramètre définie pour l’identificateur de ressource 5002.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour appeler les membres de <see cref="T:System.Diagnostics.EventSourceCreationData" /> avec une confiance totale. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom à enregistrer auprès du journal des événements en tant que source d'événements.</summary>
        <value>Nom à enregistrer auprès du journal des événements comme source d'entrées. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom de la source est souvent le nom de l’application ou le nom d’un composant au sein d’une grande application. Le <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> méthode utilise le <xref:System.Diagnostics.EventSourceCreationData.Source%2A>, <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>, et <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> propriétés pour créer des valeurs de Registre sur l’ordinateur cible pour la nouvelle source et son journal des événements associé. Un nouveau nom de source ne peut pas correspondre à un nom de source existant ou un nom de journal des événements existant sur l’ordinateur cible.  
  
 Une fois créés, les valeurs de Registre pour la source de votre application peut utiliser la source pour écrire des entrées dans le journal des événements configuré.  
  
 Chaque source ne peut écrire dans un journal des événements à la fois. Toutefois, votre application peut utiliser plusieurs sources pour écrire dans plusieurs journaux des événements. Par exemple, votre application peut nécessiter plusieurs sources configurés pour des journaux des événements ou des fichiers de ressources différents.  
  
   
  
## Examples  
 L’exemple de code suivant définit les propriétés de configuration pour une source d’événement à partir des arguments de ligne de commande. Les arguments d’entrée spécifient le nom de source d’événement, nom du journal des événements, nom de l’ordinateur et événements message fichier de ressources. Cet exemple fait partie d’un exemple plus complet fourni pour la <xref:System.Diagnostics.EventSourceCreationData> classe.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour appeler les membres de <see cref="T:System.Diagnostics.EventSourceCreationData" /> avec une confiance totale. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>