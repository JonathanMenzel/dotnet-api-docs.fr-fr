<Type Name="TraceSource" FullName="System.Diagnostics.TraceSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fab066643666c5a5bea1336ceae217a86b35cc34" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36674225" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TraceSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TraceSource extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.TraceSource" />
  <TypeSignature Language="VB.NET" Value="Public Class TraceSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class TraceSource" />
  <TypeSignature Language="F#" Value="type TraceSource = class" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides a set of methods and properties that enable applications to trace the execution of code and associate trace messages with their source.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La classe <xref:System.Diagnostics.TraceSource> est utilisée par les applications pour produire des traces qui peuvent être associées à l'application. <xref:System.Diagnostics.TraceSource> fournit des méthodes de traçage qui vous permettent de tracer facilement des événements et des données, ainsi que de fournir des traces d'information. Sortie de trace <xref:System.Diagnostics.TraceSource> peut être contrôlée par le fichier de configuration. Le fichier de configuration se trouve dans le dossier de l’exécutable d’application et possède le nom de l’application avec l’extension de nom de fichier .config ajoutée. Par exemple, le nom du fichier de configuration pour TraceSourceSample.exe est TraceSourceSample.exe.config. Le fichier de configuration peut être utilisé pour déterminer où les informations de trace désignant être envoyée et quels niveaux d’activité doivent être suivis. L’exemple suivant montre le contenu d’un fichier de configuration d’application exemple.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <sources>  
      <source name="TraceTest" switchName="SourceSwitch"   
        switchType="System.Diagnostics.SourceSwitch" >  
        <listeners>  
          <add name="console" />  
          <remove name ="Default" />  
        </listeners>  
      </source>  
    </sources>  
    <switches>  
      <!-- You can set the level at which tracing is to occur -->  
      <add name="SourceSwitch" value="Warning" />  
        <!-- You can turn tracing off -->  
        <!--add name="SourceSwitch" value="Off" -->  
    </switches>  
    <sharedListeners>  
      <add name="console"   
        type="System.Diagnostics.ConsoleTraceListener"   
        initializeData="false"/>  
    </sharedListeners>  
    <trace autoflush="true" indentsize="4">  
      <listeners>  
        <add name="console" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
</configuration>  
```  
  
 La <xref:System.Diagnostics.TraceSource> classe est identifié par le nom d’une source, en général le nom de l’application.  Les messages de trace provenant d’un composant particulier peuvent être initiés par une source de trace particulière, ce qui permet de tous les messages en provenance de ce composant soient facilement identifiables.  
  
 <xref:System.Diagnostics.TraceSource> définit les méthodes de traçage, mais ne fournit pas réellement de mécanisme spécifique pour la création et le stockage des données de suivi. Les données de suivi sont générées par les écouteurs de suivi, qui sont des plug-ins qui peut être chargées par les sources de trace.  
  
> [!NOTE]
>  Vous ne devez pas appeler les méthodes de traçage pendant la finalisation. Cela peut entraîner une <xref:System.ObjectDisposedException> levée.  
  
 Vous pouvez personnaliser la cible de la sortie du traçage en ajoutant ou supprimant <xref:System.Diagnostics.TraceListener> instances vers ou à partir de la collection stockée dans le <xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=nameWithType> propriété. Par défaut, le résultat de trace est généré à l’aide d’une instance de la <xref:System.Diagnostics.DefaultTraceListener> classe. L’exemple de fichier de configuration précédent illustre la suppression du <xref:System.Diagnostics.DefaultTraceListener> et en ajoutant un <xref:System.Diagnostics.ConsoleTraceListener> pour produire la sortie de trace pour la source de trace. Pour plus d’informations, consultez [ &lt;écouteurs&gt; ](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-source.md) et [ &lt;sharedListeners&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/sharedlisteners-element.md).  
  
> [!NOTE]
>  Ajout d’un écouteur de trace à le <xref:System.Diagnostics.TraceSource.Listeners%2A> collection peut provoquer une exception levée lors du traçage, si une ressource utilisée par l’écouteur de suivi n’est pas disponible. Les conditions et l’exception levée dépendent de l’écouteur de suivi et ne peut pas être énumérés dans cette rubrique. Il peut être utile de placer des appels à la <xref:System.Diagnostics.TraceSource> méthodes dans `try` / `catch` blocs pour détecter et gérer toutes les exceptions dans les écouteurs de la trace.  
  
 La <xref:System.Diagnostics.SourceSwitch> classe fournit les moyens permettant de contrôler de manière dynamique la sortie de traçage. L’exemple de fichier de configuration précédent montre comment vous pouvez désactiver le suivi à partir d’une source de suivi et le contrôle le niveau où le traçage se produit.  Vous pouvez modifier la valeur du commutateur source sans avoir à recompiler votre application. Pour plus d’informations sur l’utilisation du fichier de configuration pour définir un commutateur, consultez <xref:System.Diagnostics.Switch> et [Comment : créer, initialiser et configurer des commutateurs de Trace](~/docs/framework/debug-trace-profile/how-to-create-initialize-and-configure-trace-switches.md).  
  
> [!NOTE]
>  Si vous modifiez un fichier de configuration pendant l’exécution d’une application, l’application doit être arrêtée et redémarrée ou la <xref:System.Diagnostics.Trace.Refresh%2A> méthode doit être appelée avant que les nouveaux paramètres prennent effet.  
  
 Le <xref:System.Diagnostics.TraceEventType> énumération est utilisée pour définir le type d’événement du message de trace. Filtres de trace utilisent le <xref:System.Diagnostics.TraceEventType> pour déterminer si un écouteur de la trace doit produire le message de trace.  
  
 Les écouteurs de suivi peuvent éventuellement avoir une couche supplémentaire de filtrage via un filtre de trace.  Si un écouteur de trace possède un filtre associé, l’écouteur appelle la <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> méthode sur ce filtre pour déterminer ou non générer les informations de trace.  
  
 Écouteurs de la trace utilisent les valeurs de la <xref:System.Diagnostics.Trace> propriétés de classe <xref:System.Diagnostics.Trace.Indent%2A>, <xref:System.Diagnostics.Trace.IndentSize%2A>, et <xref:System.Diagnostics.Trace.AutoFlush%2A> au format de sortie de trace. Vous pouvez utiliser les attributs de fichier de configuration pour définir le <xref:System.Diagnostics.Trace.Indent%2A>, <xref:System.Diagnostics.Trace.IndentSize%2A>, et <xref:System.Diagnostics.Trace.AutoFlush%2A> propriétés. L’exemple suivant définit la <xref:System.Diagnostics.Trace.AutoFlush%2A> propriété `false` et <xref:System.Diagnostics.Trace.IndentSize%2A> 3 à la propriété.  
  
```  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="3" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Diagnostics.TraceSource> classe pour transmettre des traces aux écouteurs.  L’exemple illustre également l’utilisation de commutateur et de filtre.  
  
 [!code-cpp[System.Diagnostics.TraceSource2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CPP/tracesource2.cpp#1)]
 [!code-csharp[System.Diagnostics.TraceSource2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.TraceSource2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/VB/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ce type est thread-safe.</threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TraceSource" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TraceSource (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TraceSource(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.TraceSource : string -&gt; System.Diagnostics.TraceSource" Usage="new System.Diagnostics.TraceSource name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the source (typically, the name of the application).</param>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TraceSource" /> class, using the specified name for the source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom de la source est utilisé pour identifier des traces. Il est utilisé par un <xref:System.Diagnostics.SourceFilter> pour déterminer si un écouteur de la trace doit produire la trace. La pratique recommandée consiste à utiliser le nom de l’application pour le nom de la source.  
  
> [!NOTE]
>  Il n’est pas nécessaire de créer un nouveau <xref:System.Diagnostics.TraceSource> instance pour chaque requête de trace. Créer un <xref:System.Diagnostics.TraceSource> de l’instance et l’utiliser pour toutes les demandes de traçage de l’application.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Diagnostics.TraceSource.%23ctor%2A> constructeur pour créer un nouveau <xref:System.Diagnostics.TraceSource> objet. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Diagnostics.TraceSource> classe.  
  
 [!code-csharp[System.Diagnostics.TraceSource2#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CS/program.cs#9)]
 [!code-vb[System.Diagnostics.TraceSource2#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/VB/program.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string ("").</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TraceSource (string name, System.Diagnostics.SourceLevels defaultLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Diagnostics.SourceLevels defaultLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.#ctor(System.String,System.Diagnostics.SourceLevels)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, defaultLevel As SourceLevels)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TraceSource(System::String ^ name, System::Diagnostics::SourceLevels defaultLevel);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.TraceSource : string * System.Diagnostics.SourceLevels -&gt; System.Diagnostics.TraceSource" Usage="new System.Diagnostics.TraceSource (name, defaultLevel)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="defaultLevel" Type="System.Diagnostics.SourceLevels" />
      </Parameters>
      <Docs>
        <param name="name">The name of the source, typically the name of the application.</param>
        <param name="defaultLevel">A bitwise combination of the enumeration values that specifies the default source level at which to trace.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.TraceSource" /> class, using the specified name for the source and the default source level at which tracing is to occur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom de la source est utilisé pour identifier des traces. Il peut être utilisé par un <xref:System.Diagnostics.SourceSwitch> pour déterminer si le traçage doit se produire et par un <xref:System.Diagnostics.SourceFilter> pour déterminer s’il faut produire la trace. Niveau de la source par défaut est utilisé par un <xref:System.Diagnostics.EventTypeFilter> pour déterminer si le traçage doit se produire selon le niveau de la source du message à suivre.  
  
> [!NOTE]
>  Il n’est pas nécessaire de créer un nouveau <xref:System.Diagnostics.TraceSource> instance pour chaque requête de trace. Créer un <xref:System.Diagnostics.TraceSource> de l’instance et l’utiliser pour toutes les demandes de traçage de l’application.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string ("").</exception>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringDictionary Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringDictionary Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.TraceSource.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Attributes As StringDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::StringDictionary ^ Attributes { System::Collections::Specialized::StringDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Collections.Specialized.StringDictionary" Usage="System.Diagnostics.TraceSource.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the custom switch attributes defined in the application configuration file.</summary>
        <value>
          <see cref="T:System.Collections.Specialized.StringDictionary" /> qui contient les attributs personnalisés pour le commutateur de la trace.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Diagnostics.TraceSource.Attributes%2A> propriété identifie les attributs personnalisés référencés dans le fichier de configuration de l’application. Attributs personnalisés non référencés ne sont pas énumérées. Les classes qui héritent de la <xref:System.Diagnostics.TraceSource> classe peut ajouter des attributs personnalisés en substituant la <xref:System.Diagnostics.Switch.GetSupportedAttributes%2A?displayProperty=nameWithType> (méthode) et en retournant un tableau de chaînes de noms d’attributs personnalisés.  
  
 Voici un exemple d’un élément de source de trace en spécifiant l’attribut personnalisé `SecondTraceSourceAttribute`:  
  
```  
<sources>  
  <source name="TraceTest" switchName="TestSourceSwitch"   
    switchType="Testing.MySourceSwitch, TraceSample"   
    SecondTraceSourceAttribute="two">  
  </source>  
</sources>  
```  
  
   
  
## Examples  
 L’exemple de code suivant montre comment afficher les attributs personnalisés pour un <xref:System.Diagnostics.TraceSource>.  Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Diagnostics.TraceSource> classe.  
  
 [!code-csharp[System.Diagnostics.TraceSource2#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CS/program.cs#14)]
 [!code-vb[System.Diagnostics.TraceSource2#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/VB/program.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="traceSource.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes all the trace listeners in the trace listener collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Diagnostics.TraceSource.Close%2A> les appels de méthode le <xref:System.Diagnostics.TraceListener.Close%2A> (méthode) de chaque écouteur de suivi dans le <xref:System.Diagnostics.TraceSource.Listeners%2A> collection.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment vous pouvez utiliser la <xref:System.Diagnostics.TraceSource.Close%2A> méthode pour fermer tous les écouteurs dans la collection. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Diagnostics.TraceSource> classe.  
  
 [!code-csharp[System.Diagnostics.TraceSource2#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CS/program.cs#33)]
 [!code-vb[System.Diagnostics.TraceSource2#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/VB/program.vb#33)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour opérer avec du code non managé. Valeur de la demande : <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="traceSource.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Flushes all the trace listeners in the trace listener collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Diagnostics.TraceSource.Flush%2A> les appels de méthode le <xref:System.Diagnostics.TraceListener.Flush%2A> (méthode) de chaque écouteur de suivi dans le <xref:System.Diagnostics.TraceSource.Listeners%2A> collection.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment vous pouvez utiliser la <xref:System.Diagnostics.TraceSource.Flush%2A> méthode Vider tous les écouteurs dans la collection. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Diagnostics.TraceSource> classe.  
  
 [!code-csharp[System.Diagnostics.TraceSource2#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CS/program.cs#33)]
 [!code-vb[System.Diagnostics.TraceSource2#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/VB/program.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected internal virtual string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string[] GetSupportedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.GetSupportedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetSupportedAttributes () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetSupportedAttributes();" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedAttributes : unit -&gt; string[]&#xA;override this.GetSupportedAttributes : unit -&gt; string[]" Usage="traceSource.GetSupportedAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the custom attributes supported by the trace source.</summary>
        <returns>A string array naming the custom attributes supported by the trace source, or <see langword="null" /> if there are no custom attributes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’implémentation par défaut pour <xref:System.Diagnostics.TraceSource.GetSupportedAttributes%2A> retourne `null`.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une substitution de la <xref:System.Diagnostics.TraceSource.GetSupportedAttributes%2A> méthode pour identifier les attributs personnalisés pour la `MyTraceSource` classe.  
  
 [!code-csharp[System.Diagnostics.TraceSource#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource/CS/program.cs#33)]
 [!code-vb[System.Diagnostics.TraceSource#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource/VB/program.vb#33)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lorsque vous héritez à partir de la <see cref="T:System.Diagnostics.TraceSource" /> classe ou une classe dérivée, vous pouvez remplacer le <see cref="M:System.Diagnostics.TraceSource.GetSupportedAttributes" /> méthode pour fournir des attributs personnalisés pour votre classe.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Listeners">
      <MemberSignature Language="C#" Value="public System.Diagnostics.TraceListenerCollection Listeners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.TraceListenerCollection Listeners" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.TraceSource.Listeners" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Listeners As TraceListenerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::TraceListenerCollection ^ Listeners { System::Diagnostics::TraceListenerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Listeners : System.Diagnostics.TraceListenerCollection" Usage="System.Diagnostics.TraceSource.Listeners" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceListenerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of trace listeners for the trace source.</summary>
        <value>
          <see cref="T:System.Diagnostics.TraceListenerCollection" /> qui contient les écouteurs de la trace actifs associés à la source.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette propriété pour accéder et effectuer des opérations sur les écouteurs de suivi.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour opérer avec du code non managé. Valeur de la demande : <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.TraceSource.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Diagnostics.TraceSource.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the trace source.</summary>
        <value>Nom de la source de trace.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom est défini le `name` paramètre passé au constructeur. Vous pouvez faire référence à la source de trace à l’aide de la `name` attribut dans le fichier de configuration.  
  
 L’élément XML suivant montre faisant référence à une source de trace dans le fichier de configuration.  
  
```  
<configuration>  
  <system.diagnostics>  
    <sources>  
      <source name="TraceTest">  
      </source>  
    </sources>  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 L’exemple de code suivant montre comment nommer une source de trace dans l’appel de constructeur.  Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Diagnostics.TraceSource> classe.  
  
 [!code-csharp[System.Diagnostics.TraceSource2#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CS/program.cs#9)]
 [!code-vb[System.Diagnostics.TraceSource2#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/VB/program.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public System.Diagnostics.SourceSwitch Switch { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.SourceSwitch Switch" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.TraceSource.Switch" />
      <MemberSignature Language="VB.NET" Value="Public Property Switch As SourceSwitch" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::SourceSwitch ^ Switch { System::Diagnostics::SourceSwitch ^ get(); void set(System::Diagnostics::SourceSwitch ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Switch : System.Diagnostics.SourceSwitch with get, set" Usage="System.Diagnostics.TraceSource.Switch" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.SourceSwitch</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the source switch value.</summary>
        <value>Objet <see cref="T:System.Diagnostics.SourceSwitch" /> qui représente la valeur du commutateur source.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Diagnostics.TraceSource.Switch%2A> propriété permet de filtrer les messages avant que la source de trace appelle les écouteurs.  
  
 Le commutateur est utilisé pour vérifier si les appels de trace doivent être générés ou ignorés. Chaque méthode de traçage appelle la <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> méthode de le <xref:System.Diagnostics.SourceSwitch> pour déterminer s’il faut continuer la trace. Si l’appel retourne `true`, les écouteurs sont appelés.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Diagnostics.TraceSource.Switch" /> is set to <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour opérer avec du code non managé. Valeur de la demande : <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Writes trace data to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public void TraceData (System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TraceData(valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TraceData (eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TraceData(System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="member this.TraceData : System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="traceSource.TraceData (eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
        <param name="id">A numeric identifier for the event.</param>
        <param name="data">The trace data.</param>
        <summary>Writes trace data to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection using the specified event type, event identifier, and trace data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Diagnostics.TraceSource.TraceData%2A> (méthode), comme le <xref:System.Diagnostics.TraceSource.TraceEvent%2A> (méthode), est destinée aux outils automatisés, mais elle permet également de joindre un objet supplémentaire, par exemple une instance d’exception, à la trace.  
  
 Le <xref:System.Diagnostics.TraceSource.TraceData%2A> les appels de méthode le <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A?displayProperty=nameWithType> méthode de la <xref:System.Diagnostics.SourceSwitch> objet retourné par la <xref:System.Diagnostics.TraceSource.Switch%2A> propriété. Si <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> retourne `true`, <xref:System.Diagnostics.TraceSource.TraceData%2A> appelle correspondant <xref:System.Diagnostics.TraceListener.TraceData%2A> méthode sur tous les écouteurs. Dans le cas contraire, <xref:System.Diagnostics.TraceSource.TraceData%2A> retourne sans appeler les méthodes des écouteurs.  
  
> [!NOTE]
>  Le <xref:System.Diagnostics.EventLogTraceListener> objet est limité à un maximum `id` valeur 65 535. Si le `id` valeur spécifiée est supérieure à 65 535, le <xref:System.Diagnostics.EventLogTraceListener> object utilise 65 535.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Diagnostics.TraceSource.TraceData%28System.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.Object%29> méthode pour filtrer et envoyer un message de trace dans les écouteurs. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Diagnostics.TraceSource> classe.  
  
 [!code-csharp[System.Diagnostics.TraceSource2#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CS/program.cs#28)]
 [!code-vb[System.Diagnostics.TraceSource2#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/VB/program.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public void TraceData (System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TraceData(valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TraceData (eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TraceData(System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.TraceData : System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="traceSource.TraceData (eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
        <param name="id">A numeric identifier for the event.</param>
        <param name="data">An object array containing the trace data.</param>
        <summary>Writes trace data to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection using the specified event type, event identifier, and trace data array.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Diagnostics.TraceSource.TraceData%2A> (méthode), comme le <xref:System.Diagnostics.TraceSource.TraceEvent%2A> (méthode), est destinée aux outils automatisés, mais elle permet également de joindre des objets supplémentaires, comme une instance d’exception et une trace de pile, à la trace.  
  
 Le <xref:System.Diagnostics.TraceSource.TraceData%2A> les appels de méthode le <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> méthode de la <xref:System.Diagnostics.SourceSwitch> objet retourné par la <xref:System.Diagnostics.TraceSource.Switch%2A> propriété. Si <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> retourne `true`, <xref:System.Diagnostics.TraceSource.TraceData%2A> appelle correspondant <xref:System.Diagnostics.TraceListener.TraceData%2A> méthode sur tous les écouteurs. Dans le cas contraire, <xref:System.Diagnostics.TraceSource.TraceData%2A> retourne sans appeler les méthodes des écouteurs.  
  
> [!NOTE]
>  Le <xref:System.Diagnostics.EventLogTraceListener> objet est limité à un maximum `id` valeur 65 535. Si le `id` valeur spécifiée est supérieure à 65 535, le <xref:System.Diagnostics.EventLogTraceListener> object utilise 65 535.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Writes a trace event message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public void TraceEvent (System.Diagnostics.TraceEventType eventType, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TraceEvent(valuetype System.Diagnostics.TraceEventType eventType, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TraceEvent (eventType As TraceEventType, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TraceEvent(System::Diagnostics::TraceEventType eventType, int id);" />
      <MemberSignature Language="F#" Value="member this.TraceEvent : System.Diagnostics.TraceEventType * int -&gt; unit" Usage="traceSource.TraceEvent (eventType, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
        <param name="id">A numeric identifier for the event.</param>
        <summary>Writes a trace event message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection using the specified event type and event identifier.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Diagnostics.TraceSource.TraceEvent%2A> méthode est conçue pour tracer les événements qui peuvent être traitées automatiquement par les outils. Par exemple, un outil de surveillance peut notifier un administrateur si un événement spécifique est suivi par une source spécifique.  
  
 Le <xref:System.Diagnostics.TraceSource.TraceEvent%2A> les appels de méthode le <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> méthode de la <xref:System.Diagnostics.SourceSwitch> objet retourné par la <xref:System.Diagnostics.TraceSource.Switch%2A> propriété. Si <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> retourne `true`, <xref:System.Diagnostics.TraceSource.TraceEvent%2A> appelle correspondant <xref:System.Diagnostics.TraceListener.TraceEvent%2A> méthode chaque écouteur. Dans le cas contraire, <xref:System.Diagnostics.TraceSource.TraceEvent%2A> retourne sans appeler les méthodes des écouteurs.  
  
 Le contenu de trace est spécifique à l’écouteur. Si la méthode n’est pas substituée par l’implémentation d’écouteur, la sortie par défaut est le nom de la source de trace, son identité numérique et le type d’événement.  Contenu de trace supplémentaire dépend de l’écouteur <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> valeur de propriété.  
  
> [!NOTE]
>  Le <xref:System.Diagnostics.EventLogTraceListener> objet est limité à un maximum `id` valeur 65 535. Si le `id` valeur spécifiée est supérieure à 65 535, le <xref:System.Diagnostics.EventLogTraceListener> utilise 65 535.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%29> méthode pour passer d’un événement de trace dans les écouteurs. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Diagnostics.TraceSource> classe.  
  
 [!code-csharp[System.Diagnostics.TraceSource2#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CS/program.cs#17)]
 [!code-vb[System.Diagnostics.TraceSource2#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/VB/program.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public void TraceEvent (System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TraceEvent(valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TraceEvent (eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TraceEvent(System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.TraceEvent : System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="traceSource.TraceEvent (eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
        <param name="id">A numeric identifier for the event.</param>
        <param name="message">The trace message to write.</param>
        <summary>Writes a trace event message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection using the specified event type, event identifier, and message.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Diagnostics.TraceSource.TraceEvent%2A> méthode est conçue pour tracer les événements qui peuvent être traitées automatiquement par les outils. Par exemple, un outil de surveillance peut notifier un administrateur si un événement spécifique est suivi par une source spécifique.  
  
 Le <xref:System.Diagnostics.TraceSource.TraceEvent%2A> les appels de méthode le <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> méthode de la <xref:System.Diagnostics.SourceSwitch> objet retourné par la <xref:System.Diagnostics.TraceSource.Switch%2A> propriété. Si <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> retourne `true`, <xref:System.Diagnostics.TraceSource.TraceEvent%2A> appelle correspondant <xref:System.Diagnostics.TraceListener.TraceEvent%2A> méthode chaque écouteur. Dans le cas contraire, <xref:System.Diagnostics.TraceSource.TraceEvent%2A> retourne sans appeler les méthodes des écouteurs.  
  
 Le contenu de trace est spécifique à l’écouteur. Si la méthode n’est pas substituée par l’implémentation d’écouteur, la sortie par défaut est le nom de la source de trace, son identité numérique, le type d’événement et le message.  Contenu de trace supplémentaire dépend de l’écouteur <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> valeur de propriété.  
  
> [!NOTE]
>  Le <xref:System.Diagnostics.EventLogTraceListener> objet est limité à un maximum `id` valeur 65 535. Si le `id` valeur spécifiée est supérieure à 65 535, le <xref:System.Diagnostics.EventLogTraceListener> object utilise 65 535.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%29> méthode pour passer d’un événement de trace dans les écouteurs. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Diagnostics.TraceSource> classe.  
  
 [!code-csharp[System.Diagnostics.TraceSource2#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CS/program.cs#18)]
 [!code-vb[System.Diagnostics.TraceSource2#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/VB/program.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public void TraceEvent (System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TraceEvent(valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TraceEvent (eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TraceEvent(System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.TraceEvent : System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="traceSource.TraceEvent (eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventType">One of the enumeration values that specifies the event type of the trace data.</param>
        <param name="id">A numeric identifier for the event.</param>
        <param name="format">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</param>
        <param name="args">An <see langword="object" /> array containing zero or more objects to format.</param>
        <summary>Writes a trace event to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection using the specified event type, event identifier, and argument array and format.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la `format` paramètre, consultez [mise en forme Composite](~/docs/standard/base-types/composite-formatting.md).  
  
 Le <xref:System.Diagnostics.TraceSource.TraceEvent%2A> méthode est conçue pour tracer les événements qui peuvent être traitées automatiquement par les outils. Par exemple, un outil de surveillance peut notifier un administrateur si un événement spécifique est suivi par une source spécifique.  
  
 Le <xref:System.Diagnostics.TraceSource.TraceEvent%2A> les appels de méthode le <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> méthode de la <xref:System.Diagnostics.SourceSwitch> objet retourné par la <xref:System.Diagnostics.TraceSource.Switch%2A> propriété. Si <xref:System.Diagnostics.SourceSwitch.ShouldTrace%2A> retourne `true`, <xref:System.Diagnostics.TraceSource.TraceEvent%2A> appelle correspondant <xref:System.Diagnostics.TraceListener.TraceEvent%2A> méthode chaque écouteur. Dans le cas contraire, <xref:System.Diagnostics.TraceSource.TraceEvent%2A> retourne sans appeler les méthodes des écouteurs.  
  
 Le contenu de trace est spécifique à l’écouteur. La valeur par défaut <xref:System.Diagnostics.TraceListener.TraceEvent%28System.Diagnostics.TraceEventCache%2CSystem.String%2CSystem.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%2CSystem.Object%5B%5D%29> méthode écrit le nom de la source, le type d’événement et l’identité numérique dans l’en-tête de la trace, puis appelle la <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> méthode, en passant le `format` chaîne et `args` tableau et en utilisant le <xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=nameWithType> propriété à mettre en forme le chaîne en tant que la sortie de message.  
  
> [!NOTE]
>  Le <xref:System.Diagnostics.EventLogTraceListener> objet est limité à un maximum `id` valeur 65 535. Si le `id` valeur spécifiée est supérieure à 65 535, le <xref:System.Diagnostics.EventLogTraceListener> object utilise 65 535.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%29> méthode pour passer d’un événement de trace dans les écouteurs. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Diagnostics.TraceSource> classe.  
  
 [!code-csharp[System.Diagnostics.TraceSource2#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/CS/program.cs#24)]
 [!code-vb[System.Diagnostics.TraceSource2#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource2/VB/program.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is invalid.  -or-  The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.</exception>
        <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceInformation">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceInformation">
      <MemberSignature Language="C#" Value="public void TraceInformation (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TraceInformation(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.TraceInformation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TraceInformation (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TraceInformation(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.TraceInformation : string -&gt; unit" Usage="traceSource.TraceInformation message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The informative message to write.</param>
        <summary>Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection using the specified message.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Diagnostics.TraceSource.TraceInformation%2A> méthode fournit un message d’information destiné à être lu par les utilisateurs et pas par les outils.  
  
 <xref:System.Diagnostics.TraceSource.TraceInformation%28System.String%29> appelle le <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29> méthode, en définissant `eventType` à <xref:System.Diagnostics.TraceEventType.Information?displayProperty=nameWithType> et en passant le message d’information comme chaîne de message. Le <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29> méthode appelle à son tour le <xref:System.Diagnostics.TraceListener.TraceEvent%28System.Diagnostics.TraceEventCache%2CSystem.String%2CSystem.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29> (méthode) de chaque écouteur de suivi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
      </Docs>
    </Member>
    <Member MemberName="TraceInformation">
      <MemberSignature Language="C#" Value="public void TraceInformation (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TraceInformation(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.TraceInformation(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TraceInformation (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TraceInformation(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.TraceInformation : string * obj[] -&gt; unit" Usage="traceSource.TraceInformation (format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</param>
        <param name="args">An array containing zero or more objects to format.</param>
        <summary>Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection using the specified object array and formatting information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la `format` paramètre, consultez [mise en forme Composite](~/docs/standard/base-types/composite-formatting.md).  
  
 Le <xref:System.Diagnostics.TraceSource.TraceInformation%2A> méthode fournit un message d’information destiné à être lu par les utilisateurs et pas par les outils.  
  
 <xref:System.Diagnostics.TraceSource.TraceInformation%28System.String%2CSystem.Object%5B%5D%29> appelle le <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%2CSystem.Object%5B%5D%29> méthode, en définissant `eventType` à <xref:System.Diagnostics.TraceEventType.Information?displayProperty=nameWithType> et en passant le contenu du message en tant que tableau d’objets avec les informations de mise en forme. Le <xref:System.Diagnostics.TraceSource.TraceEvent%28System.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%2CSystem.Object%5B%5D%29> méthode appelle à son tour le <xref:System.Diagnostics.TraceListener.TraceEvent%28System.Diagnostics.TraceEventCache%2CSystem.String%2CSystem.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%2CSystem.Object%5B%5D%29> (méthode) de chaque écouteur de suivi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is invalid.  -or-  The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.</exception>
        <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
      </Docs>
    </Member>
    <Member MemberName="TraceTransfer">
      <MemberSignature Language="C#" Value="public void TraceTransfer (int id, string message, Guid relatedActivityId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TraceTransfer(int32 id, string message, valuetype System.Guid relatedActivityId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSource.TraceTransfer(System.Int32,System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TraceTransfer (id As Integer, message As String, relatedActivityId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TraceTransfer(int id, System::String ^ message, Guid relatedActivityId);" />
      <MemberSignature Language="F#" Value="member this.TraceTransfer : int * string * Guid -&gt; unit" Usage="traceSource.TraceTransfer (id, message, relatedActivityId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="id">A numeric identifier for the event.</param>
        <param name="message">The trace message to write.</param>
        <param name="relatedActivityId">A structure that identifies the related activity.</param>
        <summary>Writes a trace transfer message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners" /> collection using the specified numeric identifier, message, and related activity identifier.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> les appels de méthode le <xref:System.Diagnostics.TraceListener.TraceTransfer%2A> (méthode) de chaque écouteur de suivi dans le <xref:System.Diagnostics.TraceSource.Listeners%2A> propriété à enregistrer les informations de trace. La valeur par défaut <xref:System.Diagnostics.TraceListener.TraceTransfer%2A> méthode dans la base de <xref:System.Diagnostics.TraceListener> classe appelle la <xref:System.Diagnostics.TraceListener.TraceEvent%28System.Diagnostics.TraceEventCache%2CSystem.String%2CSystem.Diagnostics.TraceEventType%2CSystem.Int32%2CSystem.String%29?displayProperty=nameWithType> méthode pour traiter l’appel, en définissant `eventType` à <xref:System.Diagnostics.TraceEventType.Transfer?displayProperty=nameWithType> et en ajoutant une représentation de chaîne de la `relatedActivityId` GUID à `message`.  
  
 <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> est destiné à être utilisé avec les opérations logiques d’un <xref:System.Diagnostics.CorrelationManager>. Le `relatedActivityId` paramètre est lié à la <xref:System.Diagnostics.CorrelationManager.ActivityId%2A> propriété d’un <xref:System.Diagnostics.CorrelationManager> objet. Si une opération logique commence par une activité et les transfère vers un autre, la deuxième activité enregistre le transfert en appelant le <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> (méthode). Le <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> appel concerne la nouvelle identité de l’activité à l’identité précédente. Le consommateur le plus probable de cette fonctionnalité est une visionneuse de trace qui peut signaler des opérations logiques qui s’étendent sur plusieurs activités.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.XmlWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.EventSchemaTraceListener" />
        <altmember cref="T:System.Diagnostics.DelimitedListTraceListener" />
      </Docs>
    </Member>
  </Members>
</Type>