<Type Name="DelimitedListTraceListener" FullName="System.Diagnostics.DelimitedListTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="385948fd9f0c9c72019b292e2447c2aff2ac15ce" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52207733" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DelimitedListTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DelimitedListTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DelimitedListTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class DelimitedListTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class DelimitedListTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type DelimitedListTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Dirige la sortie de trace ou de débogage vers un TextWriter, tel qu'un writer de flux, ou vers un flux, tel qu'un flux de fichier.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le format de la sortie de trace est un format de texte délimité qui utilise le délimiteur spécifié par la propriété <xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A>. Le délimiteur est utilisé pour terminer chaque champ dans une ligne de sortie. Par exemple, pour afficher la sortie de trace dans une feuille de calcul Microsoft Excel, vous pouvez spécifier une virgule («, ») comme délimiteur et créer un fichier de valeurs séparées par des virgules (CSV).  
  
> [!IMPORTANT]
>  l’interface <xref:System.IDisposable>. Lorsque vous avez fini d’utiliser le type, vous devez supprimer il directement ou indirectement. Pour supprimer le type directement, appelez sa <xref:System.IDisposable.Dispose%2A> méthode dans un`try` / `catch` bloc. Pour supprimer indirectement, utiliser une construction de langage tel que `using` (en c#) ou `Using` (en Visual Basic). Pour plus d’informations, consultez la section « À l’aide un objet qui implémente IDisposable » dans le <xref:System.IDisposable> rubrique de l’interface.  
  
 Vous pouvez activer ou désactiver un <xref:System.Diagnostics.DelimitedListTraceListener> via le fichier de configuration d’application et utiliser ensuite configuré <xref:System.Diagnostics.DelimitedListTraceListener> dans votre application. Vous pouvez également créer un <xref:System.Diagnostics.DelimitedListTraceListener> dans votre code.  
  
> [!NOTE]
>  Le <xref:System.Diagnostics.DelimitedListTraceListener> délimite uniquement le texte qui est émis en utilisant les méthodes qui ont des noms commençant par le mot `Trace`, tel que <xref:System.Diagnostics.DelimitedListTraceListener.TraceEvent%2A?displayProperty=nameWithType> ou <xref:System.Diagnostics.Trace.TraceWarning%2A?displayProperty=nameWithType>. Les données qui sont émises à l’aide de trace la <xref:System.Diagnostics.Debug.Write%2A?displayProperty=nameWithType> et <xref:System.Diagnostics.TextWriterTraceListener.WriteLine%2A?displayProperty=nameWithType> méthodes n’est pas délimité.  
  
 Pour configurer un <xref:System.Diagnostics.DelimitedListTraceListener>, modifiez le fichier de configuration qui correspond au nom de votre application. Dans ce fichier, vous pouvez ajouter un écouteur, définir les propriétés pour un écouteur ou supprimer un écouteur. Le fichier de configuration doit être mis en forme comme illustré dans l’exemple suivant :  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="delimitedListener"   
          type="System.Diagnostics.DelimitedListTraceListener"   
          delimiter=","   
          initializeData="delimitedOutput.csv"   
          traceOutputOptions="ProcessId, DateTime" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
</configuration>  
```  
  
> [!NOTE]
>  Si vous tentez d’écrire dans un fichier qui est en cours d’utilisation ou non disponible, le nom de fichier est automatiquement préfixé par un GUID.  
  
> [!NOTE]
>  Écouteurs sont destinés à être utilisés par les méthodes de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, et <xref:System.Diagnostics.TraceSource> classes pour écrire des informations de trace. Méthodes d’écouteur, à l’exception des constructeurs, ne doivent pas être appelées directement à partir de code d’application.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.DelimitedListTraceListener" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DelimitedListTraceListener (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DelimitedListTraceListener(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.DelimitedListTraceListener : System.IO.Stream -&gt; System.Diagnostics.DelimitedListTraceListener" Usage="new System.Diagnostics.DelimitedListTraceListener stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" /> qui doit recevoir la sortie.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> qui écrit dans le flux de sortie spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur initialise le <xref:System.Diagnostics.TraceListener.Name%2A> propriété à une chaîne vide ( » »).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DelimitedListTraceListener (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DelimitedListTraceListener(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.DelimitedListTraceListener : System.IO.TextWriter -&gt; System.Diagnostics.DelimitedListTraceListener" Usage="new System.Diagnostics.DelimitedListTraceListener writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> qui doit recevoir la sortie.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> qui écrit dans le TextWriter spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur initialise le <xref:System.Diagnostics.TraceListener.Name%2A> propriété à une chaîne vide ( » »).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DelimitedListTraceListener (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DelimitedListTraceListener(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.DelimitedListTraceListener : string -&gt; System.Diagnostics.DelimitedListTraceListener" Usage="new System.Diagnostics.DelimitedListTraceListener fileName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Nom du fichier qui doit recevoir la sortie.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> qui écrit dans le fichier spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur initialise le <xref:System.Diagnostics.TraceListener.Name%2A> propriété à une chaîne vide ( » »).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DelimitedListTraceListener (System.IO.Stream stream, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DelimitedListTraceListener(System::IO::Stream ^ stream, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.DelimitedListTraceListener : System.IO.Stream * string -&gt; System.Diagnostics.DelimitedListTraceListener" Usage="new System.Diagnostics.DelimitedListTraceListener (stream, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" /> qui doit recevoir la sortie.</param>
        <param name="name">Nom de la nouvelle instance de l'écouteur de la trace.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> qui écrit dans le flux de sortie spécifié et possède le nom spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur initialise la <xref:System.Diagnostics.TraceListener.Name%2A> propriété à la valeur de la `name` paramètre, ou une chaîne vide (« ») si le `name` paramètre est `null`.  Le <xref:System.Diagnostics.TraceListener.Name%2A> propriété peut être utilisée en tant qu’index dans le `Listeners` collection pour modifier par programme les propriétés pour l’écouteur. Par exemple, le code suivant définit la <xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A> propriété pour l’instance de <xref:System.Diagnostics.DelimitedListTraceListener> qui a le nom est « delimListener » :  
  
```csharp  
((DelimitedListTraceListener)Trace.Listeners["delimListener"]).Delimiter = ":"  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DelimitedListTraceListener (System.IO.TextWriter writer, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DelimitedListTraceListener(System::IO::TextWriter ^ writer, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.DelimitedListTraceListener : System.IO.TextWriter * string -&gt; System.Diagnostics.DelimitedListTraceListener" Usage="new System.Diagnostics.DelimitedListTraceListener (writer, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> qui doit recevoir la sortie.</param>
        <param name="name">Nom de la nouvelle instance de l'écouteur de la trace.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> qui écrit dans le TextWriter spécifié et possède le nom spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur initialise la <xref:System.Diagnostics.TraceListener.Name%2A> propriété à la valeur de la `name` paramètre, ou une chaîne vide (« ») si le `name` paramètre est `null`. Le <xref:System.Diagnostics.TraceListener.Name%2A> propriété peut être utilisée en tant qu’index dans le `Listeners` collection pour modifier par programme les propriétés pour l’écouteur. Par exemple le code suivant définit la <xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A> propriété pour l’instance de <xref:System.Diagnostics.DelimitedListTraceListener> qui a le nom est « delimListener » :  
  
```csharp  
((DelimitedListTraceListener)Trace.Listeners["delimListener"]).Delimiter = ":"  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DelimitedListTraceListener (string fileName, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DelimitedListTraceListener(System::String ^ fileName, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.DelimitedListTraceListener : string * string -&gt; System.Diagnostics.DelimitedListTraceListener" Usage="new System.Diagnostics.DelimitedListTraceListener (fileName, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Nom du fichier qui doit recevoir la sortie.</param>
        <param name="name">Nom de la nouvelle instance de l'écouteur de la trace.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> qui écrit dans le fichier spécifié et possède le nom spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur initialise une nouvelle instance de la <xref:System.IO.StreamWriter> classe pour le fichier spécifié sur le chemin d’accès spécifié, à l’aide de <xref:System.Text.Encoding.UTF8%2A> encodage. Si le fichier existe, il est ajouté à. Si le fichier n’existe pas, un nouveau fichier est créé.  
  
> [!NOTE]
>  Pour réduire le risque d’une exception, n’importe quel caractère qui peut invalider la sortie est remplacé par un « ? » caractères.  
  
 Le <xref:System.Diagnostics.TraceListener.Name%2A> propriété est définie sur la valeur de la `name` paramètre, ou une chaîne vide (« ») si le `name` paramètre est `null`. Le <xref:System.Diagnostics.TraceListener.Name%2A> propriété peut être utilisée en tant qu’index dans le `Listeners` collection pour modifier par programme les propriétés pour l’écouteur. Par exemple, le code suivant définit la <xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A> propriété pour l’instance de <xref:System.Diagnostics.DelimitedListTraceListener> qui a le nom est « delimListener » :  
  
```csharp  
((DelimitedListTraceListener)Trace.Listeners["delimListener"]).Delimiter = ":"  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public string Delimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Delimiter" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DelimitedListTraceListener.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Delimiter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Delimiter : string with get, set" Usage="System.Diagnostics.DelimitedListTraceListener.Delimiter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le délimiteur pour la liste délimitée.</summary>
        <value>Délimiteur pour la liste délimitée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le délimiteur par défaut est « ; » (point-virgule). L’exemple de fichier de configuration suivant affiche le paramètre de la <xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A> à l’aide de la propriété du `delimiter` attribut dans un fichier de configuration :  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="delimitedListener"   
          type="System.Diagnostics.DelimitedListTraceListener"   
          delimiter=":"   
          initializeData="delimitedOutput.txt"   
          traceOutputOptions="ProcessId, DateTime" />  
        <remove name="Default" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
</configuration>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Diagnostics.DelimitedListTraceListener.Delimiter" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Diagnostics.DelimitedListTraceListener.Delimiter" /> a la valeur d'une chaîne vide ("").</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected internal override string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance string[] GetSupportedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.GetSupportedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetSupportedAttributes () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetSupportedAttributes();" />
      <MemberSignature Language="F#" Value="override this.GetSupportedAttributes : unit -&gt; string[]" Usage="delimitedListTraceListener.GetSupportedAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne l'attribut de fichier de configuration personnalisé pris en charge par l'écouteur de la trace délimité.</summary>
        <returns>Tableau de chaînes qui contient le « délimiteur » de valeur unique.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un attribut personnalisé est un attribut qui n’est pas hérité de la classe de base qui peut être utilisée pour définir une propriété pour la classe. L’attribut personnalisé pour <xref:System.Diagnostics.DelimitedListTraceListener> est utilisé pour définir le <xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A> propriété. L’exemple de fichier de configuration suivant illustre l’utilisation de la `delimiter` attribut à définir le <xref:System.Diagnostics.DelimitedListTraceListener.Delimiter%2A> propriété :  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="delimitedListener"   
          type="System.Diagnostics.DelimitedListTraceListener"   
          delimiter=":"   
          initializeData="delimitedOutput.txt"   
          traceOutputOptions="ProcessId, DateTime" />  
        <remove name="Default" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Écrit les données de trace dans le fichier ou le flux de sortie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="delimitedListTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">Objet <see cref="T:System.Diagnostics.TraceEventCache" /> qui contient les informations actuelles sur l'ID de processus, l'ID de thread et la trace de la pile.</param>
        <param name="source">Nom utilisé pour identifier la sortie, généralement le nom de l'application qui a généré l'événement de trace.</param>
        <param name="eventType">Une des valeurs de <see cref="T:System.Diagnostics.TraceEventType" /> spécifiant le type d'événement qui a déclenché la trace.</param>
        <param name="id">Identificateur numérique pour l'événement.</param>
        <param name="data">Objet de données à écrire dans le fichier ou le flux de sortie.</param>
        <summary>Écrit des informations de traçage, un objet de données et des informations d'événement dans le fichier ou le flux de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les valeurs de la `source`, `eventType`, et `id` paramètres sont écrits en tant qu’en-tête. L’objet de données est converti en une chaîne à l’aide de la `ToString` méthode de l’objet. Le `eventCache` les données sont écrites comme un pied de page dont le contenu dépend de la valeur de la <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propriété.  
  
> [!IMPORTANT]
>  Le <xref:System.Diagnostics.DelimitedListTraceListener.TraceData%2A> (méthode) n’est pas destinée à être appelée par code d’application. Elle est appelée par les méthodes de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, et <xref:System.Diagnostics.TraceSource> classes pour écrire des données de trace.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="delimitedListTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">Objet <see cref="T:System.Diagnostics.TraceEventCache" /> qui contient les informations actuelles sur l'ID de processus, l'ID de thread et la trace de la pile.</param>
        <param name="source">Nom utilisé pour identifier la sortie, généralement le nom de l'application qui a généré l'événement de trace.</param>
        <param name="eventType">Une des valeurs de <see cref="T:System.Diagnostics.TraceEventType" /> spécifiant le type d'événement qui a déclenché la trace.</param>
        <param name="id">Identificateur numérique pour l'événement.</param>
        <param name="data">Tableau d'objets de données à écrire dans le fichier ou le flux de sortie.</param>
        <summary>Écrit des informations de traçage, un tableau d'objets de données et des informations d'événement dans le fichier ou le flux de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les valeurs de la `source`, `eventType`, et `id` paramètres sont écrits en tant qu’en-tête. Les objets de données sont convertis en chaînes à l’aide de la `ToString` méthode de chaque objet. Le `eventCache` les données sont écrites comme un pied de page dont le contenu dépend de la valeur de la <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propriété.  
  
> [!IMPORTANT]
>  Le <xref:System.Diagnostics.DelimitedListTraceListener.TraceData%2A> (méthode) n’est pas destinée à être appelée par code d’application. Elle est appelée par les méthodes de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, et <xref:System.Diagnostics.TraceSource> classes pour écrire des données de trace.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Écrit les informations de trace d'événements dans un fichier ou un flux de sortie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="delimitedListTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">Objet <see cref="T:System.Diagnostics.TraceEventCache" /> qui contient les informations actuelles sur l'ID de processus, l'ID de thread et la trace de la pile.</param>
        <param name="source">Nom utilisé pour identifier la sortie, généralement le nom de l'application qui a généré l'événement de trace.</param>
        <param name="eventType">Une des valeurs de <see cref="T:System.Diagnostics.TraceEventType" /> spécifiant le type d'événement qui a déclenché la trace.</param>
        <param name="id">Identificateur numérique pour l'événement.</param>
        <param name="message">Message de trace à écrire dans le fichier ou le flux de sortie.</param>
        <summary>Écrit des informations de traçage, un message et des informations d'événement dans le fichier ou le flux de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les valeurs de la `source`, `eventType`, et `id` paramètres sont écrits en tant qu’en-tête, suivi de la `message` données. Le `eventCache` les données sont écrites comme un pied de page dont le contenu dépend de la valeur de la <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propriété.  
  
> [!IMPORTANT]
>  Le <xref:System.Diagnostics.DelimitedListTraceListener.TraceEvent%2A> (méthode) n’est pas destinée à être appelée par code d’application. Elle est appelée par les méthodes de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, et <xref:System.Diagnostics.TraceSource> classes pour écrire des données de trace.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="delimitedListTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">Objet <see cref="T:System.Diagnostics.TraceEventCache" /> qui contient les informations actuelles sur l'ID de processus, l'ID de thread et la trace de la pile.</param>
        <param name="source">Nom utilisé pour identifier la sortie, généralement le nom de l'application qui a généré l'événement de trace.</param>
        <param name="eventType">Une des valeurs de <see cref="T:System.Diagnostics.TraceEventType" /> spécifiant le type d'événement qui a déclenché la trace.</param>
        <param name="id">Identificateur numérique pour l'événement.</param>
        <param name="format">Chaîne de format qui contient zéro, un ou plusieurs éléments de format qui correspondent à des objets dans le tableau <paramref name="args" />.</param>
        <param name="args">Tableau qui contient zéro ou plusieurs objets à mettre en forme.</param>
        <summary>Écrit des informations de traçage, un tableau d'objets mis en forme et des informations d'événement dans le fichier ou le flux de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les valeurs de la `source`, `eventType`, et `id` paramètres sont écrits en tant qu’en-tête. Le `args` tableau d’objets est converti en une chaîne à l’aide de la <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> méthode, en passant le `format` chaîne et `args` tableau à mettre en forme la chaîne en tant que la partie de message de la trace. Le `eventCache` les données sont écrites comme un pied de page dont le contenu dépend de la valeur de la <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propriété.  
  
> [!IMPORTANT]
>  Le <xref:System.Diagnostics.DelimitedListTraceListener.TraceEvent%2A> (méthode) n’est pas destinée à être appelée par code d’application. Elle est appelée par les méthodes de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, et <xref:System.Diagnostics.TraceSource> classes pour écrire des données de trace.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>