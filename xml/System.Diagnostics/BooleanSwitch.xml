<Type Name="BooleanSwitch" FullName="System.Diagnostics.BooleanSwitch">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b58e7d34a5fb79c78b3d636524b0f55025244987" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48707828" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class BooleanSwitch : System.Diagnostics.Switch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BooleanSwitch extends System.Diagnostics.Switch" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.BooleanSwitch" />
  <TypeSignature Language="VB.NET" Value="Public Class BooleanSwitch&#xA;Inherits Switch" />
  <TypeSignature Language="C++ CLI" Value="public ref class BooleanSwitch : System::Diagnostics::Switch" />
  <TypeSignature Language="F#" Value="type BooleanSwitch = class&#xA;    inherit Switch" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.Switch</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.SwitchLevel(typeof(System.Boolean))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit un simple commutateur marche/arrêt qui contrôle le débogage et la sortie de suivi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser un commutateur de trace booléen pour activer ou désactiver les messages en fonction de leur importance. Utilisez le <xref:System.Diagnostics.BooleanSwitch.Enabled%2A> propriété à obtenir la valeur actuelle du commutateur.  
  
 Vous pouvez activer ou désactiver un <xref:System.Diagnostics.BooleanSwitch> via le fichier de configuration d’application et utiliser ensuite configuré <xref:System.Diagnostics.BooleanSwitch> valeur dans votre application. Vous pouvez également créer un <xref:System.Diagnostics.BooleanSwitch> dans votre code et définir le <xref:System.Diagnostics.BooleanSwitch.Enabled%2A> propriété directement pour instrumenter une section spécifique de code.  
  
 Pour configurer un <xref:System.Diagnostics.BooleanSwitch>, modifiez le fichier de configuration qui correspond au nom de votre application. Dans ce fichier, vous pouvez ajouter ou supprimer un commutateur, définir la valeur d’un commutateur ou effacer tous les commutateurs précédemment définis par l’application. Le fichier de configuration doit être mis en forme comme dans l’exemple suivant.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <switches>  
      <add name="mySwitch" value="1"/>  
    </switches>  
  </system.diagnostics>  
</configuration>  
```  
  
 Cet exemple de section de configuration définit un <xref:System.Diagnostics.BooleanSwitch> avec la <xref:System.Diagnostics.Switch.DisplayName%2A> propriété définie sur `mySwitch` et <xref:System.Diagnostics.BooleanSwitch.Enabled%2A> la valeur `true`. Au sein de votre application, vous pouvez utiliser la valeur du commutateur configuré en créant un <xref:System.Diagnostics.BooleanSwitch> portant le même nom, comme indiqué dans l’exemple de code suivant.  
  
 [!code-cpp[Classic BooleanSwitch.BooleanSwitch Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BooleanSwitch.BooleanSwitch Example/CPP/remarks.cpp#2)]
 [!code-csharp[Classic BooleanSwitch.BooleanSwitch Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BooleanSwitch.BooleanSwitch Example/CS/remarks.cs#2)]
 [!code-vb[Classic BooleanSwitch.BooleanSwitch Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BooleanSwitch.BooleanSwitch Example/VB/remarks.vb#2)]  
  
 Par défaut, le <xref:System.Diagnostics.BooleanSwitch.Enabled%2A> propriété est définie à l’aide de la valeur spécifiée dans le fichier de configuration. Configurez le commutateur avec la valeur 0 pour définir le <xref:System.Diagnostics.BooleanSwitch.Enabled%2A> propriété `false`; configurer le commutateur avec une valeur différente de zéro pour définir le <xref:System.Diagnostics.BooleanSwitch.Enabled%2A> propriété `true`. Si le <xref:System.Diagnostics.BooleanSwitch> constructeur ne peut pas trouver les paramètres initiaux de commutateur dans le fichier de configuration, le <xref:System.Diagnostics.BooleanSwitch.Enabled%2A> propriété du nouveau commutateur a la valeur `false` par défaut.  
  
 Vous devez activer le traçage ou de débogage pour utiliser un commutateur. La syntaxe suivante est spécifique au compilateur. Si vous utilisez des compilateurs autres que c# ou Visual Basic, consultez la documentation de votre compilateur.  
  
-   Pour activer le débogage en c#, ajoutez le `/d:DEBUG` indicateur pour la ligne de commande du compilateur lorsque vous compilez votre code, ou vous pouvez ajouter `#define DEBUG` vers le haut de votre fichier. Dans Visual Basic, ajoutez le `/d:DEBUG=True` indicateur pour la ligne de commande du compilateur.  
  
-   Pour activer le traçage en c#, ajoutez le `/d:TRACE` indicateur pour la ligne de commande du compilateur lorsque vous compilez votre code, ou ajoutez `#define TRACE` vers le haut de votre fichier. Dans Visual Basic, ajoutez le `/d:TRACE=True` indicateur pour la ligne de commande du compilateur.  
  
> [!NOTE]
>  Ces debug et trace les commutateurs du compilateur ne sont pas requis lorsque vous utilisez la <xref:System.Diagnostics.BooleanSwitch> classe de manière isolée. Ils sont requis uniquement en association avec <xref:System.Diagnostics.Trace> ou <xref:System.Diagnostics.Debug> les méthodes qui sont compilées de façon conditionnelle.  
  
 Pour plus d’informations sur l’instrumentation de votre application, consultez <xref:System.Diagnostics.Debug> et <xref:System.Diagnostics.Trace>. Pour plus d’informations sur la configuration et à l’aide de commutateurs de trace, consultez [commutateurs de Trace](~/docs/framework/debug-trace-profile/trace-switches.md).  
  
> [!NOTE]
>  Pour améliorer les performances, vous pouvez rendre <xref:System.Diagnostics.BooleanSwitch> membres `static` dans votre classe.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Diagnostics.BooleanSwitch> et l’utilise pour déterminer s’il faut imprimer un message d’erreur. Vous créez le commutateur au niveau de la classe. Le `Main` méthode passe son emplacement à `MyMethod`, qui imprime un message d’erreur et où l’erreur s’est produite.  
  
 [!code-cpp[Classic BooleanSwitch.BooleanSwitch Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BooleanSwitch.BooleanSwitch Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BooleanSwitch.BooleanSwitch Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BooleanSwitch.BooleanSwitch Example/CS/source.cs#1)]
 [!code-vb[Classic BooleanSwitch.BooleanSwitch Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BooleanSwitch.BooleanSwitch Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.Switch" />
    <altmember cref="T:System.Diagnostics.TraceSwitch" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.BooleanSwitch" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BooleanSwitch (string displayName, string description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string displayName, string description) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.BooleanSwitch.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (displayName As String, description As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BooleanSwitch(System::String ^ displayName, System::String ^ description);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.BooleanSwitch : string * string -&gt; System.Diagnostics.BooleanSwitch" Usage="new System.Diagnostics.BooleanSwitch (displayName, description)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="displayName">Nom à afficher dans l’interface utilisateur.</param>
        <param name="description">Description du commutateur.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.BooleanSwitch" /> avec le nom d’affichage et la description spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous créez un <xref:System.Diagnostics.BooleanSwitch>, le `displayName` paramètre est utilisé pour trouver les paramètres initiaux de commutateur. Si le constructeur ne peut pas trouver les paramètres initiaux, le <xref:System.Diagnostics.BooleanSwitch.Enabled%2A> propriété est définie sur `false` (désactivé).  
  
 Pour définir le niveau de votre <xref:System.Diagnostics.BooleanSwitch>, modifiez le fichier de configuration correspondant au nom de votre application. Dans ce fichier, vous pouvez ajouter un commutateur et définir sa valeur, supprimer un commutateur ou effacer tous les commutateurs précédemment définis par l’application. Le fichier de configuration doit être mis en forme comme dans l’exemple suivant :  
  
```xml  
<configuration>  
    <system.diagnostics>  
       <switches>  
          <add name="mySwitch" value="10" />  
          <add name="myNewSwitch" value="20" />  
          <remove name="mySwitch" />  
          <clear/>  
       </switches>  
    </system.diagnostics>  
 </configuration>  
```  
  
> [!NOTE]
>  Les commutateurs que vous avez créé doivent être `static`.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Diagnostics.BooleanSwitch> et l’utilise pour déterminer s’il faut imprimer un message d’erreur. Le commutateur est créé au niveau de la classe. Le `Main` méthode passe son emplacement à `MyMethod`, qui imprime un message d’erreur et où l’erreur s’est produite.  
  
 [!code-cpp[Classic BooleanSwitch.BooleanSwitch Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BooleanSwitch.BooleanSwitch Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BooleanSwitch.BooleanSwitch Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BooleanSwitch.BooleanSwitch Example/CS/source.cs#1)]
 [!code-vb[Classic BooleanSwitch.BooleanSwitch Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BooleanSwitch.BooleanSwitch Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.Switch" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BooleanSwitch (string displayName, string description, string defaultSwitchValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string displayName, string description, string defaultSwitchValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.BooleanSwitch.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (displayName As String, description As String, defaultSwitchValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BooleanSwitch(System::String ^ displayName, System::String ^ description, System::String ^ defaultSwitchValue);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.BooleanSwitch : string * string * string -&gt; System.Diagnostics.BooleanSwitch" Usage="new System.Diagnostics.BooleanSwitch (displayName, description, defaultSwitchValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="defaultSwitchValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="displayName">Nom à afficher sur l’interface utilisateur.</param>
        <param name="description">Description du commutateur.</param>
        <param name="defaultSwitchValue">Valeur par défaut du commutateur.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.BooleanSwitch" /> avec le nom complet, la description et la valeur de commutateur par défaut spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `displayName` paramètre est utilisé pour définir la valeur de la <xref:System.Diagnostics.Switch.DisplayName%2A> propriété et le `description` paramètre permet de définir la valeur de la <xref:System.Diagnostics.Switch.Description%2A> propriété. Le `defaultSwitchValue` paramètre est enregistré en tant que champ et utilisé pour initialiser le <xref:System.Diagnostics.Switch.Value%2A> propriété à la première référence. Pour plus d’informations sur l’utilisation des constructeurs, consultez le <xref:System.Diagnostics.BooleanSwitch.%23ctor%28System.String%2CSystem.String%29> constructeur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.BooleanSwitch.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Diagnostics.BooleanSwitch.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si le commutateur est activé ou désactivé.</summary>
        <value>
          <see langword="true" /> si le commutateur est activé ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par défaut, ce champ est défini sur `false` (désactivé). Pour activer le commutateur, assignez à ce champ la valeur de `true`. Pour désactiver le commutateur, affectez la valeur à `false`.  La valeur de cette propriété est déterminée par la valeur de la propriété de classe de base <xref:System.Diagnostics.Switch.SwitchSetting%2A>.  
  
> [!NOTE]
>  Cette méthode utilise la <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> indicateur pour empêcher tout appel de code non fiable ; uniquement l’appelant immédiat est nécessaire d’avoir <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=nameWithType> autorisation. Si votre code peut être appelé à partir du code de confiance partiel, ne passez pas l’entrée utilisateur pour <xref:System.Runtime.InteropServices.Marshal> méthodes sans validation de la classe.  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Diagnostics.BooleanSwitch> et l’utilise pour déterminer s’il faut imprimer un message d’erreur. Le commutateur est créé au niveau de la classe. Le `Main` méthode passe son emplacement à `MyMethod`, qui imprime un message d’erreur et l’emplacement où l’erreur s’est produite.  
  
 [!code-cpp[Classic BooleanSwitch.Enabled Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BooleanSwitch.Enabled Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BooleanSwitch.Enabled Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BooleanSwitch.Enabled Example/CS/source.cs#1)]
 [!code-vb[Classic BooleanSwitch.Enabled Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BooleanSwitch.Enabled Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">L’appelant n’a pas l’autorisation requise.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour opérer avec du code non managé. Valeur de la demande <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.Switch" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="OnValueChanged">
      <MemberSignature Language="C#" Value="protected override void OnValueChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnValueChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.BooleanSwitch.OnValueChanged" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnValueChanged ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnValueChanged();" />
      <MemberSignature Language="F#" Value="override this.OnValueChanged : unit -&gt; unit" Usage="booleanSwitch.OnValueChanged " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Détermine si la nouvelle valeur de la propriété <see cref="P:System.Diagnostics.Switch.Value" /> peut être analysée en tant que valeur booléenne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Diagnostics.BooleanSwitch.OnValueChanged%2A> méthode détermine si la nouvelle valeur est une représentation sous forme de chaîne valide d’une valeur booléenne (« false » ou « true »). Si, par conséquent, la méthode définit le <xref:System.Diagnostics.Switch.SwitchSetting%2A> 0 ou 1 à la propriété.  Sinon, la méthode de base est appelée, qui convertit la valeur de chaîne en valeur entière, qui est ensuite utilisée pour définir le <xref:System.Diagnostics.Switch.SwitchSetting%2A> propriété.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>