<Type Name="Stopwatch" FullName="System.Diagnostics.Stopwatch">
  <Metadata><Meta Name="ms.openlocfilehash" Value="572c07c63e217bd42123a99dcb7db0ed56c9ca75" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58728655" /></Metadata><TypeSignature Language="C#" Value="public class Stopwatch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Stopwatch extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Stopwatch" />
  <TypeSignature Language="VB.NET" Value="Public Class Stopwatch" />
  <TypeSignature Language="C++ CLI" Value="public ref class Stopwatch" />
  <TypeSignature Language="F#" Value="type Stopwatch = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit un jeu de méthodes et de propriétés que vous pouvez utiliser pour mesurer le temps écoulé précisément.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Diagnostics.Stopwatch> instance peut mesurer le temps écoulé pour un intervalle ou le total du temps écoulé sur plusieurs intervalles. Dans un type <xref:System.Diagnostics.Stopwatch> scénario, vous appelez le <xref:System.Diagnostics.Stopwatch.Start%2A> (méthode), puis finira par appeler la <xref:System.Diagnostics.Stopwatch.Stop%2A> (méthode), puis vérifiez le temps écoulé à l’aide la <xref:System.Diagnostics.Stopwatch.Elapsed%2A> propriété.  
  
 Un <xref:System.Diagnostics.Stopwatch> instance est en cours d’exécution ou arrêté ; utilisez <xref:System.Diagnostics.Stopwatch.IsRunning%2A> pour déterminer l’état actuel d’un <xref:System.Diagnostics.Stopwatch>. Utilisez <xref:System.Diagnostics.Stopwatch.Start%2A> pour commencer à mesurer le temps écoulé ; utiliser <xref:System.Diagnostics.Stopwatch.Stop%2A> pour arrêter de mesurer le temps écoulé. Interroger la valeur de temps écoulé via les propriétés <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, ou <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>. Vous pouvez interroger les propriétés de temps écoulé pendant que l’instance est en cours d’exécution ou arrêté. Le temps écoulé propriétés régulièrement augmentent tandis que le <xref:System.Diagnostics.Stopwatch> est en cours d’exécution ; ils restent constants lorsque l’instance est arrêtée.  
  
 Par défaut, la valeur de temps écoulé d’un <xref:System.Diagnostics.Stopwatch> instance équivaut au total de tous les intervalles de temps mesuré. Chaque appel à <xref:System.Diagnostics.Stopwatch.Start%2A> commence à compter au temps total passé ; chaque appel à <xref:System.Diagnostics.Stopwatch.Stop%2A> met fin à la mesure l’intervalle actuel et se fige la valeur du temps écoulé. Utilisez le <xref:System.Diagnostics.Stopwatch.Reset%2A> méthode pour effacer le temps total passé dans une existante <xref:System.Diagnostics.Stopwatch> instance.  
  
 Le <xref:System.Diagnostics.Stopwatch> mesure le temps écoulé en comptant les graduations de minuterie dans le mécanisme de minuterie sous-jacent. Si le matériel installé et le système d’exploitation prend en charge un compteur de performance haute résolution, puis la <xref:System.Diagnostics.Stopwatch> classe utilise ce compteur pour mesurer le temps écoulé. Sinon, la <xref:System.Diagnostics.Stopwatch> classe utilise l’horloge système pour mesurer le temps écoulé. Utilisez le <xref:System.Diagnostics.Stopwatch.Frequency> et <xref:System.Diagnostics.Stopwatch.IsHighResolution> champs pour déterminer la précision et la résolution de la <xref:System.Diagnostics.Stopwatch> implémentation de minutage.  
  
 Le <xref:System.Diagnostics.Stopwatch> classe aide à la manipulation des compteurs de performance liés à la minuterie dans du code géré. Plus précisément, le <xref:System.Diagnostics.Stopwatch.Frequency> champ et <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> méthode peut être utilisée à la place de l’API Win32 non gérées `QueryPerformanceFrequency` et `QueryPerformanceCounter`.  
  
> [!NOTE]
>  Sur un ordinateur multiprocesseur, peu importe le processeur sur lequel le thread s’exécute sur. Toutefois, en raison de bogues dans le BIOS ou de la couche d’Abstraction matérielle (HAL), vous pouvez obtenir des résultats de minutage différents sur différents processeurs. Pour spécifier l’affinité du processeur pour un thread, utilisez la <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A?displayProperty=nameWithType> (méthode).  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Diagnostics.Stopwatch> classe pour déterminer la durée d’exécution pour une application.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 L’exemple suivant illustre l’utilisation de la <xref:System.Diagnostics.Stopwatch> classe pour calculer les données de performances.  
  
 [!code-cpp[StopWatchPerfSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#1)]
 [!code-csharp[StopWatchPerfSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#1)]
 [!code-vb[StopWatchPerfSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.TimeSpan" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stopwatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stopwatch();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.Stopwatch" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Retourné <xref:System.Diagnostics.Stopwatch> instance est arrêtée, et la propriété de temps écoulé de l’instance est égale à zéro.  
  
 Utilisez le <xref:System.Diagnostics.Stopwatch.Start%2A> méthode pour commencer à mesurer le temps écoulé avec la nouvelle <xref:System.Diagnostics.Stopwatch> instance. Utilisez le <xref:System.Diagnostics.Stopwatch.StartNew%2A> méthode pour initialiser un nouveau <xref:System.Diagnostics.Stopwatch> d’instance et la démarrer immédiatement.  
  
   
  
## Examples  
 L’exemple suivant initialise un <xref:System.Diagnostics.Stopwatch> instance à l’aide d’un constructeur de classe simple.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public TimeSpan Elapsed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Elapsed" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Elapsed As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Elapsed { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Elapsed : TimeSpan" Usage="System.Diagnostics.Stopwatch.Elapsed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le temps total écoulé mesuré par l'instance actuelle.</summary>
        <value><see cref="T:System.TimeSpan" /> en lecture seule qui représente le temps total écoulé mesuré par l'instance actuelle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans un type <xref:System.Diagnostics.Stopwatch> scénario, vous appelez le <xref:System.Diagnostics.Stopwatch.Start%2A> (méthode), puis finira par appeler la <xref:System.Diagnostics.Stopwatch.Stop%2A> (méthode), puis vérifiez le temps écoulé à l’aide la <xref:System.Diagnostics.Stopwatch.Elapsed%2A> propriété.  
  
 Utilisez le <xref:System.Diagnostics.Stopwatch.Elapsed%2A> à l’aide de valeur de propriété pour récupérer le temps écoulé <xref:System.TimeSpan> méthodes et propriétés. Par exemple, vous pouvez mettre en forme le texte retourné <xref:System.TimeSpan> de l’instance dans une représentation sous forme de texte, ou passer à une autre classe qui requiert un <xref:System.TimeSpan> paramètre.  
  
 Vous pouvez interroger les propriétés <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, et <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> tandis que le <xref:System.Diagnostics.Stopwatch> instance est en cours d’exécution ou arrêté. Le temps écoulé propriétés régulièrement augmentent tandis que le <xref:System.Diagnostics.Stopwatch> est en cours d’exécution ; ils restent constants lorsque l’instance est arrêtée.  
  
 Par défaut, la valeur de temps écoulé d’un <xref:System.Diagnostics.Stopwatch> instance équivaut au total de tous les intervalles de temps mesuré. Chaque appel à <xref:System.Diagnostics.Stopwatch.Start%2A> commence à compter au temps total passé ; chaque appel à <xref:System.Diagnostics.Stopwatch.Stop%2A> met fin à la mesure l’intervalle actuel et se fige la valeur du temps écoulé. Utilisez le <xref:System.Diagnostics.Stopwatch.Reset%2A> méthode pour effacer le temps total passé dans une existante <xref:System.Diagnostics.Stopwatch> instance.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Diagnostics.Stopwatch.Elapsed%2A> propriété afin de déterminer la durée d’exécution pour une application.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedMilliseconds">
      <MemberSignature Language="C#" Value="public long ElapsedMilliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedMilliseconds" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedMilliseconds As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedMilliseconds { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ElapsedMilliseconds : int64" Usage="System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le temps total écoulé mesuré par l'instance actuelle, en millisecondes.</summary>
        <value>Entier long en lecture seule qui représente le nombre total de millisecondes mesuré par l'instance actuelle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété représente le temps écoulé arrondi à la valeur entière de milliseconde la plus proche. Pour les mesures de précision plus élevées, utilisez le <xref:System.Diagnostics.Stopwatch.Elapsed%2A> ou <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> propriétés.  
  
 Vous pouvez interroger les propriétés <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, et <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> tandis que le <xref:System.Diagnostics.Stopwatch> instance est en cours d’exécution ou arrêté. Le temps écoulé propriétés régulièrement augmentent tandis que le <xref:System.Diagnostics.Stopwatch> est en cours d’exécution ; ils restent constants lorsque l’instance est arrêtée.  
  
 Par défaut, la valeur de temps écoulé d’un <xref:System.Diagnostics.Stopwatch> instance équivaut au total de tous les intervalles de temps mesuré. Chaque appel à <xref:System.Diagnostics.Stopwatch.Start%2A> commence à compter au temps total passé ; chaque appel à <xref:System.Diagnostics.Stopwatch.Stop%2A> met fin à la mesure l’intervalle actuel et se fige la valeur du temps écoulé. Utilisez le <xref:System.Diagnostics.Stopwatch.Reset%2A> méthode pour effacer le temps total passé dans une existante <xref:System.Diagnostics.Stopwatch> instance.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.Diagnostics.Stopwatch> classe pour mesurer les performances de quatre implémentations différentes pour l’analyse d’un entier à partir d’une chaîne. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Diagnostics.Stopwatch> classe.  
  
 [!code-cpp[StopWatchPerfSample#3](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#3)]
 [!code-csharp[StopWatchPerfSample#3](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#3)]
 [!code-vb[StopWatchPerfSample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedTicks">
      <MemberSignature Language="C#" Value="public long ElapsedTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedTicks" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ElapsedTicks : int64" Usage="System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le temps total écoulé mesuré par l'instance actuelle, en graduations de minuterie.</summary>
        <value>Entier long en lecture seule qui représente le nombre total de graduations de minuterie mesuré par l'instance actuelle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété représente le nombre de graduations écoulées dans le mécanisme de minuterie sous-jacent. Une graduation est la plus petite unité de temps que le <xref:System.Diagnostics.Stopwatch> minuteur peut mesurer. Utilisez le <xref:System.Diagnostics.Stopwatch.Frequency> champ pour convertir le <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> valeur en un nombre de secondes.  
  
 Vous pouvez interroger les propriétés <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, et <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> tandis que le <xref:System.Diagnostics.Stopwatch> instance est en cours d’exécution ou arrêté. Le temps écoulé propriétés régulièrement augmentent tandis que le <xref:System.Diagnostics.Stopwatch> est en cours d’exécution ; ils restent constants lorsque l’instance est arrêtée.  
  
 Par défaut, la valeur de temps écoulé d’un <xref:System.Diagnostics.Stopwatch> instance équivaut au total de tous les intervalles de temps mesuré. Chaque appel à <xref:System.Diagnostics.Stopwatch.Start%2A> commence à compter au temps total passé ; chaque appel à <xref:System.Diagnostics.Stopwatch.Stop%2A> met fin à la mesure l’intervalle actuel et se fige la valeur du temps écoulé. Utilisez le <xref:System.Diagnostics.Stopwatch.Reset%2A> méthode pour effacer le temps total passé dans une existante <xref:System.Diagnostics.Stopwatch> instance.  
  
> [!NOTE]
>  <xref:System.Diagnostics.Stopwatch> graduations diffèrent des <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType>. Chaque graduation dans la <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> valeur représente un intervalle de 100 nanosecondes. Chaque graduation dans le <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> valeur représente l’intervalle de temps égal à 1 seconde divisée par le <xref:System.Diagnostics.Stopwatch.Frequency>.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.Diagnostics.Stopwatch> classe pour mesurer les performances de quatre implémentations différentes pour l’analyse d’un entier à partir d’une chaîne. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Diagnostics.Stopwatch> classe.  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public static readonly long Frequency;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int64 Frequency" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.Frequency" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Frequency As Long " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly long Frequency;" />
      <MemberSignature Language="F#" Value=" staticval mutable Frequency : int64" Usage="System.Diagnostics.Stopwatch.Frequency" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la fréquence de la minuterie en nombre de graduations par seconde. Ce champ est en lecture seule.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La fréquence de minuterie indique la précision de la minuterie et la résolution. Par exemple, une fréquence de minuterie de 2 millions de graduations par seconde équivaut à une résolution du chronomètre de 500 nanosecondes par graduation. En d’autres termes, comme une seconde est égale à 1 milliard de nanosecondes, une fréquence de minuterie de 2 millions de graduations par seconde équivaut à 2 millions de graduations par 1 milliard de nanosecondes, ce qui peut être simplifié en 1 graduation pour 500 nanosecondes.  
  
 Le <xref:System.Diagnostics.Stopwatch.Frequency> valeur dépend de la résolution du mécanisme de minuterie sous-jacent. Si le matériel installé et le système d’exploitation prend en charge un compteur de performance haute résolution, puis le <xref:System.Diagnostics.Stopwatch.Frequency> valeur reflète la fréquence de ce compteur. Sinon, le <xref:System.Diagnostics.Stopwatch.Frequency> valeur est basée sur la fréquence de l’horloge système.  
  
 Étant donné que le <xref:System.Diagnostics.Stopwatch> fréquence varie selon le matériel installé et le système d’exploitation, le <xref:System.Diagnostics.Stopwatch.Frequency> valeur reste constante pendant que le système est en cours d’exécution.  
  
   
  
## Examples  
 L’exemple suivant affiche la fréquence et la résolution d’un <xref:System.Diagnostics.Stopwatch> minuteur. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Diagnostics.Stopwatch> classe.  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="GetTimestamp">
      <MemberSignature Language="C#" Value="public static long GetTimestamp ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTimestamp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.GetTimestamp" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTimestamp () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetTimestamp();" />
      <MemberSignature Language="F#" Value="static member GetTimestamp : unit -&gt; int64" Usage="System.Diagnostics.Stopwatch.GetTimestamp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient le nombre actuel de graduations dans le mécanisme de minuterie.</summary>
        <returns>Entier long qui représente la valeur du compteur de graduations du mécanisme de minuterie sous-jacent.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Diagnostics.Stopwatch> classe utilise un compteur de performance haute résolution, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> retourne la valeur actuelle de ce compteur. Si le <xref:System.Diagnostics.Stopwatch> classe utilise l’horloge système, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> retourne actuel <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> propriété de la <xref:System.DateTime.Now%2A?displayProperty=nameWithType> instance.  
  
   
  
## Examples  
 L’exemple suivant illustre l’utilisation de la <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> méthode pour mettre à jour un compteur de performance.  
  
 [!code-cpp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CPP/elapsedtime.cpp#2)]
 [!code-csharp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CS/elapsedtime.cs#2)]
 [!code-vb[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/VB/elapsedtime.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="IsHighResolution">
      <MemberSignature Language="C#" Value="public static readonly bool IsHighResolution;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly bool IsHighResolution" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHighResolution As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly bool IsHighResolution;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHighResolution : bool" Usage="System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indique si la minuterie est basée sur un compteur de performance haute résolution. Ce champ est en lecture seule.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La minuterie utilisée par la <xref:System.Diagnostics.Stopwatch> classe dépend de la configuration matérielle du système et le système d’exploitation. <xref:System.Diagnostics.Stopwatch.IsHighResolution> est `true` si le <xref:System.Diagnostics.Stopwatch> minuterie est basée sur un compteur de performance haute résolution. Sinon, <xref:System.Diagnostics.Stopwatch.IsHighResolution> est `false`, ce qui indique que le <xref:System.Diagnostics.Stopwatch> minuterie est basée sur l’horloge système.  
  
   
  
## Examples  
 L’exemple suivant affiche la fréquence et la résolution d’un <xref:System.Diagnostics.Stopwatch> minuteur. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Diagnostics.Stopwatch> classe.  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.IsRunning" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunning As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunning { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRunning : bool" Usage="System.Diagnostics.Stopwatch.IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si la minuterie <see cref="T:System.Diagnostics.Stopwatch" /> s'exécute.</summary>
        <value><see langword="true" /> si l'instance <see cref="T:System.Diagnostics.Stopwatch" /> est en cours d'exécution et en train de mesurer le temps écoulé pour un intervalle ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Diagnostics.Stopwatch> instance commence à s’exécuter avec un appel à <xref:System.Diagnostics.Stopwatch.Start%2A> ou <xref:System.Diagnostics.Stopwatch.StartNew%2A>. L’instance cesse de s’exécuter avec un appel à <xref:System.Diagnostics.Stopwatch.Stop%2A> ou <xref:System.Diagnostics.Stopwatch.Reset%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="stopwatch.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Arrête la mesure d'intervalle de temps et remet le temps écoulé à zéro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Diagnostics.Stopwatch> instance calcule et conserve le temps total passé sur plusieurs intervalles de temps, jusqu'à ce que l’instance est réinitialisé. Utilisez <xref:System.Diagnostics.Stopwatch.Stop%2A> pour arrêter la mesure l’intervalle actuel et de conserver la valeur du temps écoulé. Utilisez <xref:System.Diagnostics.Stopwatch.Reset%2A> pour arrêter toute mesure d’intervalle en cours et effacez la valeur de temps écoulé.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public void Restart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Restart" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restart ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restart();" />
      <MemberSignature Language="F#" Value="member this.Restart : unit -&gt; unit" Usage="stopwatch.Restart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Arrête la mesure d'intervalle de temps, réinitialise le temps écoulé sur zéro puis commence à le mesurer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Diagnostics.Stopwatch> instance calcule et conserve le temps total passé sur plusieurs intervalles de temps, jusqu'à ce que l’instance est réinitialisée ou redémarrée. Utilisez <xref:System.Diagnostics.Stopwatch.Stop%2A> pour arrêter la mesure l’intervalle actuel et de conserver la valeur du temps écoulé. Utilisez <xref:System.Diagnostics.Stopwatch.Reset%2A> pour arrêter toute mesure d’intervalle en cours et effacez la valeur de temps écoulé. Utilisez <xref:System.Diagnostics.Stopwatch.Restart%2A> pour arrêter la mesure d’intervalle actuelle et démarrer une nouvelle mesure d’intervalle.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="stopwatch.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Démarre ou reprend la mesure du temps écoulé pour un intervalle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans un type <xref:System.Diagnostics.Stopwatch> scénario, vous appelez le <xref:System.Diagnostics.Stopwatch.Start%2A> (méthode), puis finira par appeler la <xref:System.Diagnostics.Stopwatch.Stop%2A> (méthode), puis vérifiez le temps écoulé à l’aide la <xref:System.Diagnostics.Stopwatch.Elapsed%2A> propriété.  
  
 Une fois démarrée, un <xref:System.Diagnostics.Stopwatch> minuteur mesure l’intervalle actuel, en graduations de minuterie écoulées, jusqu'à ce que l’instance est arrêtée ou réinitialisée. En commençant un <xref:System.Diagnostics.Stopwatch> qui est déjà en cours d’exécution ne pas modifier l’état de la minuterie ou réinitialiser les propriétés de temps écoulé.  
  
 Quand un <xref:System.Diagnostics.Stopwatch> instance mesure plusieurs intervalles, la <xref:System.Diagnostics.Stopwatch.Start%2A> méthode reprend la mesure du temps à partir de la valeur de temps écoulé actuel. Un <xref:System.Diagnostics.Stopwatch> instance calcule et conserve le temps total passé sur plusieurs intervalles de temps, jusqu'à ce que l’instance est réinitialisé. Utilisez le <xref:System.Diagnostics.Stopwatch.Reset%2A> méthode avant d’appeler <xref:System.Diagnostics.Stopwatch.Start%2A> pour effacer le temps total passé dans une <xref:System.Diagnostics.Stopwatch> instance. Utilisez le <xref:System.Diagnostics.Stopwatch.Restart%2A> méthode <xref:System.Diagnostics.Stopwatch.Reset%2A> et <xref:System.Diagnostics.Stopwatch.Start%2A> le <xref:System.Diagnostics.Stopwatch> avec une seule commande.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Diagnostics.Stopwatch.Start%2A> méthode pour démarrer une minuterie qui mesure la durée d’exécution d’une application.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Stopwatch StartNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Stopwatch StartNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.StartNew" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StartNew () As Stopwatch" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Stopwatch ^ StartNew();" />
      <MemberSignature Language="F#" Value="static member StartNew : unit -&gt; System.Diagnostics.Stopwatch" Usage="System.Diagnostics.Stopwatch.StartNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Stopwatch</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance <see cref="T:System.Diagnostics.Stopwatch" />, affecte une valeur de zéro à la propriété de temps écoulé et commence à mesurer le temps écoulé.</summary>
        <returns><see cref="T:System.Diagnostics.Stopwatch" /> qui vient de commencer à mesurer le temps écoulé.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode équivaut à appeler le <xref:System.Diagnostics.Stopwatch> constructeur, puis en appelant <xref:System.Diagnostics.Stopwatch.Start%2A> sur la nouvelle instance.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.Diagnostics.Stopwatch> classe pour mesurer les performances de quatre implémentations différentes pour l’analyse d’un entier à partir d’une chaîne. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Diagnostics.Stopwatch> classe.  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="stopwatch.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cesse de mesurer le temps écoulé pour un intervalle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans un type <xref:System.Diagnostics.Stopwatch> scénario, vous appelez le <xref:System.Diagnostics.Stopwatch.Start%2A> (méthode), puis finira par appeler la <xref:System.Diagnostics.Stopwatch.Stop%2A> (méthode), puis vérifiez le temps écoulé à l’aide la <xref:System.Diagnostics.Stopwatch.Elapsed%2A> propriété.  
  
 Le <xref:System.Diagnostics.Stopwatch.Stop%2A> méthode termine la mesure d’intervalle de temps actuelle. L’arrêt d’un <xref:System.Diagnostics.Stopwatch> qui est ne pas en cours d’exécution ne pas modifier l’état de la minuterie ou réinitialiser les propriétés de temps écoulé.  
  
 Quand un <xref:System.Diagnostics.Stopwatch> instance mesure plusieurs intervalles, la <xref:System.Diagnostics.Stopwatch.Stop%2A> méthode équivaut à suspendre la mesure de temps écoulé. Un appel ultérieur à <xref:System.Diagnostics.Stopwatch.Start%2A> reprend la mesure du temps à partir de la valeur de temps écoulé actuel. Utilisez le <xref:System.Diagnostics.Stopwatch.Reset%2A> méthode pour effacer le temps total passé dans une <xref:System.Diagnostics.Stopwatch> instance.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Diagnostics.Stopwatch.Stop%2A> méthode pour arrêter une minuterie qui mesure la durée d’exécution d’une application.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
  </Members>
</Type>