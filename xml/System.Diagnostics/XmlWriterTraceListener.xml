<Type Name="XmlWriterTraceListener" FullName="System.Diagnostics.XmlWriterTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="730606d449bf338d685c79fc28befe3f43e2eb64" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36673998" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlWriterTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlWriterTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.XmlWriterTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlWriterTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type XmlWriterTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Dirige la sortie de traçage ou de débogage sous la forme de données encodées XML vers <see cref="T:System.IO.TextWriter" /> ou <see cref="T:System.IO.Stream" />, telle que <see cref="T:System.IO.FileStream" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Vous devez disposer de non managé autorisation du code pour créer une instance de la <xref:System.Diagnostics.XmlWriterTraceListener> classe.  
  
 La <xref:System.Diagnostics.XmlWriterTraceListener> classe convertit le suivi des informations et de débogage dans un flux de texte encodé en XML. La description de la sortie XML est indiquée dans les tableaux qui suivent. Vous pouvez utiliser la [outil Service Trace Viewer (SvcTraceViewer.exe)](http://go.microsoft.com/fwlink/p/?LinkId=240129) pour afficher le code XML de sortie.  
  
 Vous pouvez activer ou désactiver un <xref:System.Diagnostics.XmlWriterTraceListener> via le fichier de configuration d’application et l’utiliser ensuite configuré <xref:System.Diagnostics.XmlWriterTraceListener> dans votre application. Vous pouvez également créer un <xref:System.Diagnostics.XmlWriterTraceListener> dans votre code.  
  
 Pour configurer un <xref:System.Diagnostics.XmlWriterTraceListener>, modifiez le fichier de configuration qui correspond au nom de votre application. Dans ce fichier, vous pouvez ajouter ou supprimer un écouteur, définir les propriétés pour un écouteur ou supprimer des écouteurs. Le fichier de configuration doit être mis en forme à l’exemple suivant.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="xmlListener"   
          type="System.Diagnostics.XmlWriterTraceListener"   
          initializeData="xmlOutput.xml"   
          traceOutputOptions="ProcessId, DateTime" />  
        <remove name="Default" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
</configuration>  
```  
  
 Le <xref:System.Diagnostics.XmlWriterTraceListener> classe hérite de la <xref:System.Diagnostics.TraceListener.Filter%2A> propriété à partir de la classe de base <xref:System.Diagnostics.TraceListener>.  Le <xref:System.Diagnostics.TraceListener.Filter%2A> propriété permet à un niveau supplémentaire de sortie de trace à l’écouteur de filtrage.  S’il existe un filtre à présent, le `Trace` méthodes de l’écouteur de trace appellent la <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> méthode du filtre pour déterminer s’il faut émettre la trace.  
  
> [!NOTE]
>  Si une tentative est faite pour écrire dans un fichier qui est en cours d’utilisation ou indisponible, le nom de fichier est automatiquement préfixé par un GUID.  
  
> [!NOTE]
>  Les méthodes d’écouteur sont destinées à être appelées par les méthodes de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, et <xref:System.Diagnostics.TraceSource> classes.  Les méthodes de l’écouteur ne sont pas destinées à être appelée directement à partir de code d’application. Le <xref:System.Diagnostics.XmlWriterTraceListener> écouteur est conçu pour une utilisation par le <xref:System.Diagnostics.TraceSource> classe. Le <xref:System.Diagnostics.XmlWriterTraceListener.Write%2A> et <xref:System.Diagnostics.XmlWriterTraceListener.WriteLine%2A> méthodes peuvent être appelées le <xref:System.Diagnostics.Trace> et <xref:System.Diagnostics.Debug> classes et les valeurs par défaut sont fournies pour les éléments XML qui <xref:System.Diagnostics.Trace> et <xref:System.Diagnostics.Debug> ne fournissent pas de valeurs.  
  
 Le tableau suivant décrit les éléments et attributs de la sortie XML.  
  
|Élément|Attributs|Sortie|Notes|  
|-------------|----------------|------------|-----------|  
|`CallStack`|Aucun.|Dépend de la présence de la <xref:System.Diagnostics.TraceOptions.Callstack> indicateur dans le <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propriété.|Caractères spéciaux tels que > ou < sont remplacées par des séquences d’échappement. Consultez la table de traduction de caractères d’échappement qui suit.|  
|`Computer`|Aucun.|Toujours présent.|La valeur de la propriété <xref:System.Environment.MachineName%2A>.|  
|`Correlation`|`ActivityID`|Toujours présent|Si non spécifié, la valeur par défaut est un GUID vide.|  
||`RelatedActivityID`|Dépend de la présence de le `relatedActivityId` paramètre dans l’appel de méthode Trace.|Paramètre `relatedActivityId` de la méthode <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A>.|  
|`DataItem`|Aucun.|Dépend de la `data` paramètre de la <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> (méthode).|Cet élément peut contenir un tableau d’éléments ou d’un élément, les valeurs sont donc écrites comme un ensemble de `DataItem` nœuds sous le `TraceData` élément.<br /><br /> La sortie des données utilise le `ToString` méthode des objets de données passés.|  
|`EventID`|Aucun.|Toujours présent.|Entrée de paramètre (`id`).|  
|`Execution`|`ProcessName`|Toujours présent.|À partir de la <xref:System.Diagnostics.TraceEventCache>.|  
||`ProcessID`|Toujours présent.|À partir de la <xref:System.Diagnostics.TraceEventCache>. Sur Windows 98 et Windows Me les systèmes d’exploitation, si `ProcessID` est supérieure à 2 147 483 647 il est une représentation positive d’un nombre négatif et doit être convertie pour obtenir l’identificateur de processus correct.|  
||`ThreadID`|Toujours présent.|À partir de la <xref:System.Diagnostics.TraceEventCache>.|  
|`Level`|Aucun.|Toujours présent.|Entrée de paramètre (la valeur numérique de `eventType`). Les valeurs de paramètre supérieures à 255 sont générées en tant que 255.|  
|`LogicalOperationStack`|Aucun.|Dépend de la présence de la <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> indicateur dans le <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propriété.|Il peut y avoir plusieurs opérations logiques, les valeurs sont donc écrites comme `LogicalOperation` nœuds sous le `LogicalOperationStack` élément.|  
|`Message`|Aucun.|Dépend de la présence d’un message dans l’appel de méthode Trace.|Cet élément est un message mis en forme si la mise en forme d’arguments fournie.|  
|`Source`|`Name`|Toujours présent.|Paramètre d’entrée.|  
|`SubType`|`Name`|Toujours présent.|Paramètre d’entrée.|  
|`TimeCreated`|`SystemTime`|Toujours présent.|Si ne figure pas dans le <xref:System.Diagnostics.TraceEventCache>, la valeur par défaut est l’heure actuelle.|  
|`TimeStamp`|Aucun.|Dépend de la présence de la <xref:System.Diagnostics.TraceOptions.Timestamp> indicateur dans le <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propriété.|À partir de la <xref:System.Diagnostics.TraceEventCache>.|  
|`Type`|Aucun.|Toujours présent.|Toujours la valeur 3.|  
  
 Le tableau suivant présente les caractères sont ignorés dans la sortie XML. Échappement se produit dans tous les éléments et attributs à l’exception de la `DataItem` élément qui n’est pas échappé si l’objet passé à la `data` paramètre de la <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> méthode est un <xref:System.Xml.XPath.XPathNavigator> objet. Si un <xref:System.Xml.XPath.XPathNavigator> est utilisé pour l’objet de données, le <xref:System.Xml.XPath.XPathNavigator.MoveToRoot%2A> méthode est appelée et le nœud racine entier est tracé en tant que données sans séquence d’échappement.  
  
|Caractère d'échappement|Value|  
|-----------------------|-----------|  
|&|&amp;|  
|\<|&lt;|  
|>|&gt;|  
|"|&quot;|  
|\|&apos;|  
|0xD|&\#xD ;|  
|0xA|&\#xA ;|  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Diagnostics.XmlWriterTraceListener> classe permettant d’écrire des données avec et sans séquence d’échappement dans des fichiers journaux.  
  
 [!code-csharp[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/VB/module1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">pour avoir la possibilité d’appeler du code non managé. Énumération associée : <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" /> qui représente le flux dans lequel l'écouteur de la trace écrit.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> à l'aide du flux spécifié comme destinataire de la sortie de débogage et de traçage.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Diagnostics.TraceListener.Name%2A> propriété est initialisée avec une chaîne vide (« »).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> est <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour avoir la possibilité d’appeler du code non managé. Énumération associée : <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.IO.TextWriter" /> qui reçoit la sortie de l'écouteur de la trace.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> à l'aide du writer spécifié comme destinataire de la sortie de débogage et de traçage.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Diagnostics.TraceListener.Name%2A> propriété est initialisée avec une chaîne vide (« »).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> est <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour avoir la possibilité d’appeler du code non managé. Énumération associée : <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener filename" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Nom du fichier dans lequel écrire.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> à l'aide du fichier spécifié comme destinataire de la sortie de débogage et de traçage.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur initialise une nouvelle instance de la <xref:System.IO.StreamWriter> classe pour le fichier spécifié sur le chemin d’accès spécifié, à l’aide de <xref:System.Text.Encoding.UTF8%2A> codage. Si le fichier existe, il est ajouté à. Si le fichier n’existe pas, un nouveau fichier est créé.  
  
> [!NOTE]
>  Pour réduire le risque d’une exception, n’importe quel caractère qui peut invalider la sortie est remplacé par un « ? » caractères.  
  
 Le <xref:System.Diagnostics.TraceListener.Name%2A> propriété est initialisée avec une chaîne vide (« »).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="filename" /> est <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour avoir la possibilité d’appeler du code non managé. Énumération associée : <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (stream, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" /> qui représente le flux dans lequel l'écouteur de la trace écrit.</param>
        <param name="name">Nom de la nouvelle instance.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> avec le nom spécifié en utilisant le flux spécifié comme destinataire de la sortie de débogage et de traçage.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur initialise la <xref:System.Diagnostics.TraceListener.Name%2A> propriété le `name` la valeur du paramètre ou une chaîne vide (« ») si le `name` paramètre est `null`. Le nom peut être utilisé comme un index dans la <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> collection modifier par programme les propriétés pour l’écouteur. Par exemple, le code suivant définit la <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propriété d’une instance de <xref:System.Diagnostics.XmlWriterTraceListener> dont <xref:System.Diagnostics.TraceListener.Name%2A> propriété est « xmlListener ».  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> est <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour avoir la possibilité d’appeler du code non managé. Énumération associée : <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (writer, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.IO.TextWriter" /> qui reçoit la sortie de l'écouteur de la trace.</param>
        <param name="name">Nom de la nouvelle instance.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> avec le nom spécifié en utilisant le writer spécifié comme destinataire de la sortie de débogage et de traçage.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur initialise la <xref:System.Diagnostics.TraceListener.Name%2A> propriété le `name` la valeur du paramètre ou une chaîne vide (« ») si le `name` paramètre est `null`. Le nom peut être utilisé comme un index dans la <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> collection modifier par programme les propriétés pour l’écouteur. Par exemple, le code suivant définit la <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propriété d’une instance de <xref:System.Diagnostics.XmlWriterTraceListener> dont <xref:System.Diagnostics.TraceListener.Name%2A> propriété est « xmlListener ».  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> est <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour avoir la possibilité d’appeler du code non managé. Énumération associée : <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (filename, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Nom du fichier dans lequel écrire.</param>
        <param name="name">Nom de la nouvelle instance.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> avec le nom spécifié en utilisant le fichier spécifié comme destinataire de la sortie de débogage et de traçage.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur initialise une nouvelle instance de la <xref:System.IO.StreamWriter> classe pour le fichier spécifié sur le chemin d’accès spécifié, à l’aide de <xref:System.Text.Encoding.UTF8%2A> codage. Si le fichier existe, il est ajouté à. Si le fichier n’existe pas, un nouveau fichier est créé.  
  
> [!NOTE]
>  Pour réduire le risque d’une exception, n’importe quel caractère qui peut invalider la sortie est remplacé par un « ? » caractères.  
  
 Le <xref:System.Diagnostics.TraceListener.Name%2A> est définie sur le `name` la valeur du paramètre ou une chaîne vide (« ») si le `name` paramètre est `null`. Le nom peut être utilisé comme un index dans la <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> collection modifier par programme les propriétés pour l’écouteur. Par exemple, le code suivant définit la <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propriété d’une instance de <xref:System.Diagnostics.XmlWriterTraceListener> dont <xref:System.Diagnostics.TraceListener.Name%2A> propriété est « xmlListener ».  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =  
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> est <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour avoir la possibilité d’appeler du code non managé. Énumération associée : <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlWriterTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ferme <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /> pour cet écouteur pour qu'il ne reçoive plus la sortie de traçage ou de débogage.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="override this.Fail : string * string -&gt; unit" Usage="xmlWriterTraceListener.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Message d'erreur à écrire.</param>
        <param name="detailMessage">Message d'erreur détaillé à ajouter au message d'erreur.</param>
        <summary>Écrit des informations de traçage notamment un message d'erreur et un message d'erreur détaillé dans le fichier ou le flux.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le comportement par défaut consiste à afficher le message et le message détaillé dans une boîte de message lors de l’application s’exécute en mode interface utilisateur et vers le <xref:System.Diagnostics.TraceListener> instances dans le <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> collection. Par défaut, la collection contient une instance de <xref:System.Diagnostics.DefaultTraceListener>. Vous pouvez personnaliser ce comportement en ajoutant ou supprimant un <xref:System.Diagnostics.TraceListener> à partir de la collection.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour avoir la possibilité d’appeler du code non managé. Énumération associée : <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Écrit les données de trace dans le fichier ou le flux de sortie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">
          <see cref="T:System.Diagnostics.TraceEventCache" /> qui contient les informations actuelles sur l'ID de processus, l'ID de thread et la trace de la pile.</param>
        <param name="source">Nom de la source.</param>
        <param name="eventType">Une des valeurs de <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificateur numérique pour l'événement.</param>
        <param name="data">Objet de données à émettre.</param>
        <summary>Écrit des informations de traçage, un objet de données et des informations d'événement dans le fichier ou le flux.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `eventCache`, `source`, `eventType`, et `id` paramètres sont utilisés dans l’en-tête et le pied de page de la trace. Le `id` paramètre est converti en entier non signé avant d’écrire, par conséquent, une valeur négative `id` valeur est écrite sous forme de grand entier positif. Le `data` paramètre est écrit comme un `DataItem` nœud dans le `TraceData` élément. Le `ToString` méthode de l’objet de données est utilisée pour convertir l’objet en chaîne.  
  
> [!IMPORTANT]
>  Cette méthode n’est pas destinée à être appelée directement par le code d’application.  Elle est appelée par les méthodes de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, et <xref:System.Diagnostics.TraceSource> classes pour écrire des données de trace.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour avoir la possibilité d’appeler du code non managé. Énumération associée : <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">
          <see cref="T:System.Diagnostics.TraceEventCache" /> qui contient les informations actuelles sur l'ID de processus, l'ID de thread et la trace de la pile.</param>
        <param name="source">Nom de la source.</param>
        <param name="eventType">Une des valeurs de <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificateur numérique pour l'événement.</param>
        <param name="data">Tableau d'objets de données à émettre.</param>
        <summary>Écrit des informations de traçage, des objets de données et des informations d'événement dans le fichier ou le flux.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `eventCache`, `source`, `eventType`, et `id` paramètres sont utilisés dans l’en-tête et le pied de page de la trace. Le `id` paramètre est converti en entier non signé avant d’écrire, par conséquent, une valeur négative `id` valeur est écrite sous forme de grand entier positif. Les objets dans le `data` tableau de paramètres sont écrits en tant que `DataItem` nœuds dans le `TraceData` élément. Le `ToString` méthode de chaque objet de données est utilisée pour convertir l’objet en chaîne.  
  
> [!IMPORTANT]
>  Cette méthode n’est pas destinée à être appelée directement par le code d’application.  Elle est appelée par les méthodes de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, et <xref:System.Diagnostics.TraceSource> classes pour écrire des données de trace.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour avoir la possibilité d’appeler du code non managé. Énumération associée : <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Écrit les informations de trace de l'événement dans le fichier ou le flux de sortie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">
          <see cref="T:System.Diagnostics.TraceEventCache" /> qui contient les informations actuelles sur l'ID de processus, l'ID de thread et la trace de la pile.</param>
        <param name="source">Nom de la source.</param>
        <param name="eventType">Une des valeurs de <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificateur numérique pour l'événement.</param>
        <param name="message">Message à écrire.</param>
        <summary>Écrit des informations de traçage, un message et des informations d'événement dans le fichier ou le flux.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `eventCache`, `source`, `eventType`, et `id` paramètres sont utilisés dans l’en-tête et le pied de page de la trace. Le `id` paramètre est converti en entier non signé avant d’écrire, par conséquent, une valeur négative `id` valeur est écrite sous forme de grand entier positif. Le `message` paramètre est écrit en tant que le `Message` élément.  
  
> [!IMPORTANT]
>  Cette méthode n’est pas destinée à être appelée directement par le code d’application.  Elle est appelée par les méthodes de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, et <xref:System.Diagnostics.TraceSource> classes pour écrire des données de trace.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour avoir la possibilité d’appeler du code non managé. Énumération associée : <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">
          <see cref="T:System.Diagnostics.TraceEventCache" /> qui contient les informations actuelles sur l'ID de processus, l'ID de thread et la trace de la pile.</param>
        <param name="source">Nom de la source.</param>
        <param name="eventType">Une des valeurs de <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificateur numérique pour l'événement.</param>
        <param name="format">Chaîne de format qui contient zéro, un ou plusieurs éléments de format qui correspondent à des objets dans le tableau <c>args</c>.</param>
        <param name="args">Tableau d'objets qui contient zéro ou plusieurs objets à mettre en forme.</param>
        <summary>Écrit des informations de traçage, un message mis en forme et des informations d'événement dans le fichier ou le flux.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `eventCache`, `source`, `eventType`, et `id` paramètres sont utilisés dans l’en-tête et le pied de page de la trace. Le `id` paramètre est converti en entier non signé avant d’écrire, par conséquent, une valeur négative `id` valeur est écrite sous forme de grand entier positif. Le <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> méthode est appelée, en passant le `format` chaîne et `args` tableau en tant que paramètres, à mettre en forme le `args` en tant que tableau d’objets du `Message` élément.  
  
> [!IMPORTANT]
>  Cette méthode n’est pas destinée à être appelée directement par le code d’application.  Elle est appelée par les méthodes de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, et <xref:System.Diagnostics.TraceSource> classes pour écrire des données de trace.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour avoir la possibilité d’appeler du code non managé. Énumération associée : <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceTransfer">
      <MemberSignature Language="C#" Value="public override void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceTransfer(class System.Diagnostics.TraceEventCache eventCache, string source, int32 id, string message, valuetype System.Guid relatedActivityId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceTransfer (eventCache As TraceEventCache, source As String, id As Integer, message As String, relatedActivityId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceTransfer(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, int id, System::String ^ message, Guid relatedActivityId);" />
      <MemberSignature Language="F#" Value="override this.TraceTransfer : System.Diagnostics.TraceEventCache * string * int * string * Guid -&gt; unit" Usage="xmlWriterTraceListener.TraceTransfer (eventCache, source, id, message, relatedActivityId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="eventCache">
          <see cref="T:System.Diagnostics.TraceEventCache" /> qui contient les informations actuelles sur l'ID de processus, l'ID de thread et la trace de la pile.</param>
        <param name="source">Nom de la source.</param>
        <param name="id">Identificateur numérique pour l'événement.</param>
        <param name="message">Message de suivi à écrire.</param>
        <param name="relatedActivityId">Structure <see cref="T:System.Guid" /> qui identifie une activité connexe.</param>
        <summary>Écrit des informations de traçage notamment l'identité d'une activité connexe, un message et des informations d'événement dans le fichier ou le flux.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> méthode est utilisée pour la corrélation de traces connexes. Le `eventCache`, `source`, `id`, et `relatedActivityId` paramètres sont utilisés dans l’en-tête et le pied de page de la trace. Le `id` paramètre est converti en entier non signé avant d’écrire, par conséquent, une valeur négative `id` valeur est écrite sous forme de grand entier positif. Le `message` paramètre est écrit en tant que le `Message` élément. Le <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> méthode est appelée pour convertir le `relatedActivityId`valeur à un « B » mise en forme de chaîne, qui apparaît dans l’en-tête. Le `SubTypeName` élément dans le pied de page identifie le type d’événement de trace comme un <xref:System.Diagnostics.TraceEventType.Transfer>.  
  
> [!IMPORTANT]
>  Le <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> méthode n’est pas destinée à être appelée par le code d’application.  Elle est destinée à être appelée un <xref:System.Diagnostics.TraceSource> objet pour émettre des informations de traçage pour son <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour avoir la possibilité d’appeler du code non managé. Énumération associée : <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="xmlWriterTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Message à écrire.</param>
        <summary>Écrit un message textuel sans information de contexte supplémentaire dans le fichier ou le flux.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> méthode pour inclure des informations de contexte dans la sortie du journal.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour avoir la possibilité d’appeler du code non managé. Énumération associée : <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="xmlWriterTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Message à écrire.</param>
        <summary>Écrit un message textuel sans information de contexte supplémentaire, suivi du terminateur de ligne active, dans le fichier ou le flux.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> méthode pour inclure des informations de contexte dans la sortie du journal.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour avoir la possibilité d’appeler du code non managé. Énumération associée : <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
  </Members>
</Type>