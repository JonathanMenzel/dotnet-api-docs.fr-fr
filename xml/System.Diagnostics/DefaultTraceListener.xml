<Type Name="DefaultTraceListener" FullName="System.Diagnostics.DefaultTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e56d4a2b2a863166dbb4a19c7d4e45e65e5f6d76" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36343183" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DefaultTraceListener : System.Diagnostics.TraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi DefaultTraceListener extends System.Diagnostics.TraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DefaultTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultTraceListener&#xA;Inherits TraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class DefaultTraceListener : System::Diagnostics::TraceListener" />
  <TypeSignature Language="F#" Value="type DefaultTraceListener = class&#xA;    inherit TraceListener" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit les méthodes de sortie par défaut et le comportement de suivi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une instance de cette classe est ajoutée automatiquement à la <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=nameWithType> et <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> collections. Ajout d’un second explicitement <xref:System.Diagnostics.DefaultTraceListener> entraîne les messages dans la fenêtre Sortie en double et les zones de message en double pour les assertions.  
  
 Par défaut, le <xref:System.Diagnostics.DefaultTraceListener.Write%2A> et <xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A> méthodes émettent le message vers Win32 `OutputDebugString` fonction et en le <xref:System.Diagnostics.Debugger.Log%2A?displayProperty=nameWithType> (méthode). Pour plus d’informations sur la `OutputDebugString` de fonction, consultez le Kit de développement logiciel Platform ou MSDN.  
  
 Le <xref:System.Diagnostics.DefaultTraceListener.Fail%2A> méthode, par défaut, affiche une boîte de message lors de l’application s’exécute en mode interface utilisateur ; elle émet également le message à l’aide de <xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A>.  
  
> [!NOTE]
>  L’affichage de la boîte de message pour <xref:System.Diagnostics.Debug.Assert%2A> et <xref:System.Diagnostics.Debug.Fail%2A> les appels de méthode dépend de la présence de la <xref:System.Diagnostics.DefaultTraceListener>. Si le <xref:System.Diagnostics.DefaultTraceListener> ne figure pas dans le <xref:System.Diagnostics.Trace.Listeners%2A> collection, la boîte de message n’est pas affichée. Le <xref:System.Diagnostics.DefaultTraceListener> peuvent être supprimés par le [ \<Effacer > élément](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), par le [ \<Supprimer > élément](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), ou en appelant le <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> méthode sur le <xref:System.Diagnostics.Trace.Listeners%2A> propriété (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 Vous devez activer le traçage ou de débogage pour utiliser un écouteur de suivi. La syntaxe suivante est spécifique au compilateur. Si vous utilisez des compilateurs autres que c# ou Visual Basic, reportez-vous à la documentation de votre compilateur.  
  
-   Pour activer le débogage en c#, ajoutez le `/d:DEBUG` indicateur pour la ligne de commande du compilateur lorsque vous compilez votre code, ou ajoutez `#define DEBUG` vers le haut de votre fichier. Dans Visual Basic, ajoutez le `/d:DEBUG=True` indicateur pour la ligne de commande du compilateur.  
  
-   Pour activer le traçage en c#, ajoutez le `/d:TRACE` indicateur pour la ligne de commande du compilateur lorsque vous compilez votre code, ou ajoutez `#define TRACE` vers le haut de votre fichier. Dans Visual Basic, ajoutez le `/d:TRACE=True` indicateur pour la ligne de commande du compilateur.  
  
 Pour ajouter un écouteur de trace, modifiez le fichier de configuration qui correspond au nom de votre application. Dans ce fichier, vous pouvez ajouter un écouteur, définissez son type et ses paramètres, supprimer un écouteur ou réinitialiser tous les écouteurs définis précédemment par l’application. Le fichier de configuration doit être mis en forme comme dans l’exemple suivant :  
  
```xml  
<configuration>  
<system.diagnostics>  
  <trace autoflush="false" indentsize="4">  
    <listeners>  
      <remove name="Default" />  
      <add name="myListener"  type="System.Diagnostics.TextWriterTraceListener"    initializeData="c:\myListener.log" />  
    </listeners>  
  </trace>  
</system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 L’exemple de code suivant calcule des coefficients binomiale, qui sont des valeurs utilisées dans les statistiques et de probabilité. Cet exemple utilise un <xref:System.Diagnostics.DefaultTraceListener> pour tracer des résultats et enregistrer des erreurs. Il crée un nouveau <xref:System.Diagnostics.DefaultTraceListener>, ajoute à la <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> collection et définit le <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A> propriété dans le fichier journal spécifié dans les arguments de ligne de commande.  
  
 Si une erreur est détectée lors du traitement du paramètre d’entrée, ou si le `CalcBinomial` fonction lève une exception, le <xref:System.Diagnostics.DefaultTraceListener.Fail%2A> méthode ouvre et affiche un message d’erreur. Si le <xref:System.Diagnostics.DefaultTraceListener.AssertUiEnabled%2A> propriété est `false`, le message d’erreur est également écrites dans la console. Lorsque le résultat est calculé, le <xref:System.Diagnostics.DefaultTraceListener.Write%28System.String%29> et <xref:System.Diagnostics.DefaultTraceListener.WriteLine%28System.String%29> méthodes écrivent les résultats dans le fichier journal.  
  
 Le <xref:System.Diagnostics.DefaultTraceListener.Fail%2A>, <xref:System.Diagnostics.DefaultTraceListener.Write%2A>, et <xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A> informations de trace à être écrit uniquement dans les méthodes entraînent la <xref:System.Diagnostics.DefaultTraceListener>. Pour écrire des informations de traçage à tous les écouteurs de la <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> collection, utilisez la <xref:System.Diagnostics.Trace.Fail%2A>, <xref:System.Diagnostics.Trace.Write%2A>, et <xref:System.Diagnostics.Trace.WriteLine%2A> méthodes de la <xref:System.Diagnostics.Trace> classe.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#11)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#11)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Cette classe est thread-safe.</threadsafe>
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
    <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DefaultTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DefaultTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.DefaultTraceListener" /> en assignant "Default" comme valeur de la propriété <see cref="P:System.Diagnostics.TraceListener.Name" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Le code suivant supprime de l’exemple le <xref:System.Diagnostics.DefaultTraceListener> fournie par l’application à partir de la <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> collection, puis crée un nouveau <xref:System.Diagnostics.DefaultTraceListener> et l’ajoute à la <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> collection.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#3)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="AssertUiEnabled">
      <MemberSignature Language="C#" Value="public bool AssertUiEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AssertUiEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DefaultTraceListener.AssertUiEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property AssertUiEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AssertUiEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AssertUiEnabled : bool with get, set" Usage="System.Diagnostics.DefaultTraceListener.AssertUiEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("AssertUiEnabled defaults to False; should follow Environment.UserInteractive.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si l'application est exécutée en mode interface utilisateur.</summary>
        <value>
          <see langword="true" /> si le mode interface utilisateur est activé ; sinon <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant appelle une fonction qui appelle la <xref:System.Diagnostics.DefaultTraceListener.Fail%28System.String%2CSystem.String%29> méthode pour enregistrer un message d’erreur si la fonction lève une exception. Si le <xref:System.Diagnostics.DefaultTraceListener.AssertUiEnabled%2A> propriété est `false`, la méthode écrit également le message d’erreur dans la console.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#8)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fail">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Émet ou affiche un message et une trace de la pile pour une assertion qui échoue toujours.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DefaultTraceListener.Fail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Fail : string -&gt; unit" Usage="defaultTraceListener.Fail message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Message à envoyer ou afficher.</param>
        <summary>Émet ou affiche un message et une trace de la pile pour une assertion qui échoue toujours.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par défaut, cette méthode envoie le `message` paramètre et une trace de pile vers une boîte de message (lors de l’application s’exécute en mode interface utilisateur) et le <xref:System.Diagnostics.DefaultTraceListener> instance.  
  
   
  
## Examples  
 L’exemple de code suivant écrit un message d’erreur à une <xref:System.Diagnostics.DefaultTraceListener> à l’aide de la <xref:System.Diagnostics.DefaultTraceListener.Fail%28System.String%29> (méthode). La méthode écrit également le message à la console si une interface utilisateur n’est pas disponible.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#6)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DefaultTraceListener.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="override this.Fail : string * string -&gt; unit" Usage="defaultTraceListener.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Message à envoyer ou afficher.</param>
        <param name="detailMessage">Message détaillé à envoyer ou afficher.</param>
        <summary>Émet ou affiche des messages détaillés et une trace de la pile pour une assertion qui échoue toujours.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par défaut, cette méthode envoie le `message` paramètre, le `detailMessage` paramètre et une trace de pile vers une boîte de message (lors de l’application s’exécute en mode interface utilisateur) et le <xref:System.Diagnostics.DefaultTraceListener> instance.  
  
   
  
## Examples  
 L’exemple de code suivant appelle une fonction qui appelle la <xref:System.Diagnostics.DefaultTraceListener.Fail%28System.String%2CSystem.String%29> méthode pour enregistrer un message d’erreur détaillé si la fonction lève une exception. La méthode écrit le message dans la console si une interface utilisateur n’est pas disponible.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#8)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="LogFileName">
      <MemberSignature Language="C#" Value="public string LogFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogFileName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DefaultTraceListener.LogFileName" />
      <MemberSignature Language="VB.NET" Value="Public Property LogFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LogFileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LogFileName : string with get, set" Usage="System.Diagnostics.DefaultTraceListener.LogFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom d'un fichier journal dans lequel les messages de traçage ou de débogage doivent être écrits.</summary>
        <value>Nom d'un fichier journal dans lequel les messages de traçage ou de débogage doivent être écrits.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant crée un nouveau <xref:System.Diagnostics.DefaultTraceListener>, ajoute à la <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> collection et définit le <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A> propriété dans le fichier journal spécifié dans les arguments de ligne de commande.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#4)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DefaultTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="defaultTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Message à écrire vers <see langword="OutputDebugString" /> et <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" />.</param>
        <summary>Écrit la sortie vers la fonction <see langword="OutputDebugString" /> et la méthode <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur Win32 `OutputDebugString` débogage (fonction), consultez « OutputDebugString » dans le Kit de développement logiciel Platform ou MSDN.  
  
   
  
## Examples  
 L’exemple de code suivant met en forme les résultats d’une fonction et qu’il utilise le <xref:System.Diagnostics.DefaultTraceListener.Write%28System.String%29> méthode pour écrire la première partie du message à un <xref:System.Diagnostics.DefaultTraceListener>.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener.WriteLine/CS/defaulttracelistener.cs#4)]
 [!code-vb[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener.WriteLine/VB/defaulttracelistener.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DefaultTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="defaultTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Message à écrire vers <see langword="OutputDebugString" /> et <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" />.</param>
        <summary>Écrit la sortie vers la fonction <see langword="OutputDebugString" /> et la méthode <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" /> suivie d'un retour chariot et d'un changement de ligne (\r\n).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La ligne se termine par défaut par un retour chariot suivi d'un changement de ligne (\r\n).  
  
 Pour plus d’informations sur Win32 `OutputDebugString` (fonction), de débogage consultez le Kit de développement logiciel Platform ou MSDN.  
  
 Cette méthode définit le <xref:System.Diagnostics.TraceListener.NeedIndent%2A> propriété `true`.  
  
   
  
## Examples  
 L’exemple de code suivant met en forme les résultats d’une fonction et qu’il utilise le <xref:System.Diagnostics.DefaultTraceListener.WriteLine%28System.String%29> méthode pour écrire la dernière partie du message à un <xref:System.Diagnostics.DefaultTraceListener>.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener.WriteLine/CS/defaulttracelistener.cs#4)]
 [!code-vb[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener.WriteLine/VB/defaulttracelistener.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
  </Members>
</Type>