<Type Name="TraceFilter" FullName="System.Diagnostics.TraceFilter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ca1e3c5e1752dd5229800a883262885ed83e3515" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36673780" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class TraceFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TraceFilter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.TraceFilter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TraceFilter" />
  <TypeSignature Language="C++ CLI" Value="public ref class TraceFilter abstract" />
  <TypeSignature Language="F#" Value="type TraceFilter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit la classe de base pour les implémentations du filtre de la trace.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les filtres de trace utilisable par les écouteurs de la trace pour fournir une couche supplémentaire de filtrage au-delà de celle fournie par les commutateurs de trace. Le filtre de trace pour un écouteur de trace sont accessibles dans l’écouteur <xref:System.Diagnostics.TraceListener.Filter%2A> propriété. Commutateurs de trace déterminent si une trace doit être envoyée aux écouteurs de suivi. Filtres de trace autorisent les écouteurs de trace individuels déterminer si la trace est à écrire dans le support de sortie associé. Par exemple, comme déterminé par chaque filtre de trace, une trace peut être écrite dans la console par une <xref:System.Diagnostics.ConsoleTraceListener>, mais pas dans le journal des événements par un <xref:System.Diagnostics.EventLogTraceListener>.  
  
 Les filtres qui héritent de la <xref:System.Diagnostics.TraceFilter> classe peut être utilisée par les écouteurs de trace qui héritent de la <xref:System.Diagnostics.TraceListener> classe pour effectuer un filtrage des événements suivis. <xref:System.Diagnostics.TraceFilter> contient une méthode unique, <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A>, qui prend les données d’événement et retourne un indicateur qui signale si l’événement doit être suivi.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TraceFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TraceFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.TraceFilter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldTrace">
      <MemberSignature Language="C#" Value="public abstract bool ShouldTrace (System.Diagnostics.TraceEventCache cache, string source, System.Diagnostics.TraceEventType eventType, int id, string formatOrMessage, object[] args, object data1, object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldTrace(class System.Diagnostics.TraceEventCache cache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string formatOrMessage, object[] args, object data1, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ShouldTrace (cache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, formatOrMessage As String, args As Object(), data1 As Object, data As Object()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool ShouldTrace(System::Diagnostics::TraceEventCache ^ cache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ formatOrMessage, cli::array &lt;System::Object ^&gt; ^ args, System::Object ^ data1, cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="abstract member ShouldTrace : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] * obj * obj[] -&gt; bool" Usage="traceFilter.ShouldTrace (cache, source, eventType, id, formatOrMessage, args, data1, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="formatOrMessage" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="data1" Type="System.Object" />
        <Parameter Name="data" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="cache">
          <see cref="T:System.Diagnostics.TraceEventCache" /> qui contient des informations pour l'événement de trace.</param>
        <param name="source">Nom de la source.</param>
        <param name="eventType">Une des valeurs de <see cref="T:System.Diagnostics.TraceEventType" /> spécifiant le type d'événement qui a déclenché la trace.</param>
        <param name="id">Numéro d'identification de trace.</param>
        <param name="formatOrMessage">Format à utiliser pour écrire un tableau d’arguments spécifié par le paramètre <c>args</c>, ou un message à écrire.</param>
        <param name="args">Tableau d'objets d'argument.</param>
        <param name="data1">Objet des données de trace.</param>
        <param name="data">Tableau des objets de données de trace.</param>
        <summary>En cas de substitution dans une classe dérivée, détermine si l'écouteur doit tracer l'événement.</summary>
        <returns>
          <see langword="true" /> pour tracer l'événement spécifié ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment substituer la <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> méthode pour indiquer le traçage doit se produire lorsque le type d’événement de trace de l’événement est égal à <xref:System.Diagnostics.TraceEventType.Error?displayProperty=nameWithType>.  
  
 [!code-cpp[System.Diagnostics.TraceFilter#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.diagnostics.tracefilter/cpp/source.cpp#2)]
 [!code-csharp[System.Diagnostics.TraceFilter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.tracefilter/cs/source.cs#2)]
 [!code-vb[System.Diagnostics.TraceFilter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.tracefilter/vb/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Les implémentations de cette méthode doivent retourner <see langword="true" /> si l’événement spécifié par les paramètres passés doit être tracé. Sinon, la méthode doit retourner <see langword="false" />. Par exemple, un filtre qui autorise uniquement les événements erreur de passer par l’écouteur doit inspecter le <paramref name="eventType" /> paramètres et retour <see langword="true" /> si le niveau de type de l’événement de trace a la valeur <see cref="F:System.Diagnostics.TraceEventType.Error" /> ou supérieure ; sinon, elle doit retourner <see langword="false" />.  Les implémentations de la méthode doivent être préparées à gérer <see langword="null" /> dans les paramètres suivants : <paramref name="args" />, <paramref name="data1" />, <paramref name="data" />, <paramref name="formatOrMessage" />, et <paramref name="cache" />. Si la valeur du paramètre est <see langword="null" />, le paramètre ne fait pas partie de l’événement. Par exemple, si le <paramref name="args" /> paramètre est <see langword="null" />, cela signifie que l’événement n’a pas d’arguments. Si le <paramref name="data" /> paramètre est <see langword="null" />, puis il existe un ou aucun des objets de données. S’il existe un objet de données, il se trouve dans le <paramref name="data1" /> paramètre. La raison de la distinction entre un objet de données unique et un tableau d’objets de données concerne les performances. Il est inutile de créer un tableau d’objets si seul un objet est tracé, comme c’est normalement le cas. Si le <paramref name="data" /> paramètre n’est pas <see langword="null" />, le <paramref name="data1" /> paramètre ne doit pas également être <see langword="null" />.  Il est garanti que la <paramref name="source" /> paramètre n’est pas <see langword="null" /> et pas une chaîne vide (« »).  Les implémentations de la méthode peuvent éventuellement lever les exceptions suivantes :- <see cref="T:System.ArgumentNullException" /> si <paramref name="source" /> est <see langword="null" />.  - <see cref="T:System.ArgumentException" /> si <paramref name="eventType" /> ne fait pas partie de la <see cref="T:System.Diagnostics.TraceEventType" /> valeurs.  -Les exceptions non liées à l’implémentation de la méthode. Par exemple, un <see cref="T:System.Threading.ThreadAbortException" />.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>