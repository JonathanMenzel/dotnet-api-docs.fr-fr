<Type Name="IServiceBehavior" FullName="System.ServiceModel.Description.IServiceBehavior">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="778e3fb7b36e48f48f3deab84c6e43e92c9aeebe" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IServiceBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IServiceBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceBehavior" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="26a0a-101">Fournit un mécanisme permettant de modifier ou d'insérer des extensions personnalisées sur l'intégralité d'un service, y compris <see cref="T:System.ServiceModel.ServiceHostBase" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="26a0a-101">Provides a mechanism to modify or insert custom extensions across an entire service, including the <see cref="T:System.ServiceModel.ServiceHostBase" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26a0a-102">Implémentez <xref:System.ServiceModel.Description.IServiceBehavior> pour modifier, examiner ou étendre certains aspects de l'exécution à l'échelle du service au niveau de l'application :</span><span class="sxs-lookup"><span data-stu-id="26a0a-102">Implement <xref:System.ServiceModel.Description.IServiceBehavior> to modify, examine, or extend some aspect of service-wide execution at the application level:</span></span>  
  
-   <span data-ttu-id="26a0a-103">Utilisez la méthode <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> pour modifier des valeurs de propriété d'exécution ou insérer des objets d'extensions personnalisées tels que les gestionnaires d'erreurs, les intercepteurs de messages ou de paramètres, les extensions de sécurité et autres objets d'extensions personnalisées.</span><span class="sxs-lookup"><span data-stu-id="26a0a-103">Use the <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> method to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects.</span></span>  
  
-   <span data-ttu-id="26a0a-104">Utilisez la méthode <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> pour examiner la description avant que [!INCLUDE[indigo1](~/includes/indigo1-md.md)] ne construise le service en cours d'exécution pour confirmer qu'il peut s'exécuter correctement.</span><span class="sxs-lookup"><span data-stu-id="26a0a-104">Use the <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> method to examine the description before [!INCLUDE[indigo1](~/includes/indigo1-md.md)] constructs the executing service to confirm that it can execute properly.</span></span>  
  
-   <span data-ttu-id="26a0a-105">Utilisez la méthode <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> pour passer à un élément de liaison les informations personnalisées pour le service afin qu'il puisse correctement prendre en charge le service.</span><span class="sxs-lookup"><span data-stu-id="26a0a-105">Use the <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> method to pass to a binding element the custom information for the service so that it can support the service correctly.</span></span>  
  
 <span data-ttu-id="26a0a-106">Les objets <xref:System.ServiceModel.Description.IServiceBehavior> peuvent utiliser chacune de ces méthodes mais souvent, seule l'une d'elles est importante. Dans ce cas, les méthodes inutilisées peuvent ne retourner aucune valeur.</span><span class="sxs-lookup"><span data-stu-id="26a0a-106"><xref:System.ServiceModel.Description.IServiceBehavior> objects can make use of any of these methods, but often only one is important; in such cases the unused methods can return without a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26a0a-107">Toutes les méthodes <xref:System.ServiceModel.Description.IServiceBehavior> passent les objets <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> et <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> comme paramètres.</span><span class="sxs-lookup"><span data-stu-id="26a0a-107">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="26a0a-108">Le paramètre <xref:System.ServiceModel.Description.ServiceDescription> est présenté à titre d'examen uniquement ; si vous modifiez ces objets, le comportement d'exécution n'est pas défini.</span><span class="sxs-lookup"><span data-stu-id="26a0a-108">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination only; if you modify these objects the execution behavior is undefined.</span></span>  
  
 <span data-ttu-id="26a0a-109">Pour effectuer la tâche de personnalisation à laquelle ils se destine, l'objet <xref:System.ServiceModel.Description.IServiceBehavior> doit être ajouté à la propriété <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> avant la construction de l'exécution de service.</span><span class="sxs-lookup"><span data-stu-id="26a0a-109">To perform the customization task for which it is intended, the <xref:System.ServiceModel.Description.IServiceBehavior> object must be added to the <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> property prior to the construction of the service runtime.</span></span> <span data-ttu-id="26a0a-110">Il y a trois manières pour effectuer cette opération :</span><span class="sxs-lookup"><span data-stu-id="26a0a-110">There are three ways to do this:</span></span>  
  
-   <span data-ttu-id="26a0a-111">Par programme, ajoutez le comportement de service personnalisé à la propriété <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> avant le point où la méthode <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> est appelée sur l'objet <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="26a0a-111">Programmatically add the custom service behavior to the <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> property prior to the point where the <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> method is called on the <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> object.</span></span>  
  
-   <span data-ttu-id="26a0a-112">Créez un attribut personnalisé qui implémente le <xref:System.ServiceModel.Description.IServiceBehavior> et l'utilise pour marquer des classes de service qui doivent être modifiées.</span><span class="sxs-lookup"><span data-stu-id="26a0a-112">Create a custom attribute that implements <xref:System.ServiceModel.Description.IServiceBehavior> and use it to mark service classes that are to be modified.</span></span> <span data-ttu-id="26a0a-113">Lorsqu'un objet <xref:System.ServiceModel.ServiceHost> est construit, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] utilise la réflexion pour découvrir les attributs sur le type de service.</span><span class="sxs-lookup"><span data-stu-id="26a0a-113">When a <xref:System.ServiceModel.ServiceHost> object is constructed, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] uses reflection to discover the attributes on the service type.</span></span> <span data-ttu-id="26a0a-114">Si des attributs implémentent <xref:System.ServiceModel.Description.IServiceBehavior>, ils sont ajoutés à la collection de comportements sur <xref:System.ServiceModel.Description.ServiceDescription>.</span><span class="sxs-lookup"><span data-stu-id="26a0a-114">If any attributes implement <xref:System.ServiceModel.Description.IServiceBehavior>, they are added to the behaviors collection on <xref:System.ServiceModel.Description.ServiceDescription>.</span></span>  
  
-   <span data-ttu-id="26a0a-115">Étendez la classe <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> pour prendre en charge la spécification du comportement dans une application ou un fichier de configuration d'ordinateur.</span><span class="sxs-lookup"><span data-stu-id="26a0a-115">Extend the <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> class to support the specification of the behavior in an application or machine configuration file.</span></span> <span data-ttu-id="26a0a-116">Pour plus d'informations, consultez la section Exemple.</span><span class="sxs-lookup"><span data-stu-id="26a0a-116">See the Example section for more information.</span></span>  
  
 <span data-ttu-id="26a0a-117">Parmi les exemples de comportements de service de [!INCLUDE[indigo2](~/includes/indigo2-md.md)], figurent l'attribut <xref:System.ServiceModel.ServiceBehaviorAttribute>, le <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType>, le <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType> et le comportement <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="26a0a-117">Examples of service behaviors in [!INCLUDE[indigo2](~/includes/indigo2-md.md)] include the <xref:System.ServiceModel.ServiceBehaviorAttribute> attribute, the <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType>, the <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType> and the <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType> behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26a0a-118">L'exemple de code suivant montre l'utilisation d'un comportement de service spécifié dans un fichier de configuration pour insérer un gestionnaire d'erreurs personnalisé dans une application de service.</span><span class="sxs-lookup"><span data-stu-id="26a0a-118">The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</span></span> <span data-ttu-id="26a0a-119">Dans cet exemple, le gestionnaire d'erreurs intercepte toutes les exceptions et les convertit en une erreur `GreetingFault` SOAP personnalisée qui est ensuite retournée au client.</span><span class="sxs-lookup"><span data-stu-id="26a0a-119">In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.</span></span>  
  
 <span data-ttu-id="26a0a-120">L'implémentation <xref:System.ServiceModel.Description.IServiceBehavior> suivante n'ajoute pas d'objet de paramètre de liaison, ajoute l'objet personnalisé <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> à chaque propriété <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>, confirme que chaque opération du service auquel s'applique le comportement de service, et dispose d'un <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> de type `GreetingFault`.</span><span class="sxs-lookup"><span data-stu-id="26a0a-120">The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> of type `GreetingFault`.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="26a0a-121">Dans cet exemple, la classe de comportement implémente également l'<xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, qui permet au comportement de service d'être inséré en l'utilisant dans un fichier de configuration de l'application comme le montre l'exemple de code suivant.</span><span class="sxs-lookup"><span data-stu-id="26a0a-121">In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase, class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase, System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::ServiceEndpoint ^&gt; ^ endpoints, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
        <Parameter Name="endpoints" Type="System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt;" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">
          <span data-ttu-id="26a0a-122">Description du fonctionnement du service.</span>
          <span class="sxs-lookup">
            <span data-stu-id="26a0a-122">The service description of the service.</span>
          </span>
        </param>
        <param name="serviceHostBase">
          <span data-ttu-id="26a0a-123">Hôte du service.</span>
          <span class="sxs-lookup">
            <span data-stu-id="26a0a-123">The host of the service.</span>
          </span>
        </param>
        <param name="endpoints">
          <span data-ttu-id="26a0a-124">Points de terminaison de service.</span>
          <span class="sxs-lookup">
            <span data-stu-id="26a0a-124">The service endpoints.</span>
          </span>
        </param>
        <param name="bindingParameters">
          <span data-ttu-id="26a0a-125">Objets personnalisés auxquels ont accès les éléments de liaison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="26a0a-125">Custom objects to which binding elements have access.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="26a0a-126">Fournit la possibilité de passer des données personnalisées à des éléments de liaison pour prendre en charge l’implémentation de contrat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="26a0a-126">Provides the ability to pass custom data to binding elements to support the contract implementation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26a0a-127">Utilisez la méthode <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> pour ajouter des objets de données personnalisés à la collection `parameters` que les éléments de liaison peuvent utiliser pour acquérir des informations supplémentaires afin de leur permettre de prendre en charge le contrat.</span><span class="sxs-lookup"><span data-stu-id="26a0a-127">Use the <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> method to add custom data objects to the `parameters` collection that binding elements can use to acquire extra information to enable them to support the contract.</span></span>  
  
 <span data-ttu-id="26a0a-128">Cette méthode est appelée une fois pour chaque URI d'écoute.</span><span class="sxs-lookup"><span data-stu-id="26a0a-128">This method is called once for each listen URI.</span></span> <span data-ttu-id="26a0a-129">Par exemple, si un service dispose de quatre points de terminaison et que deux d'entre eux ont le même URI d'écoute, cette méthode est alors appelée trois fois.</span><span class="sxs-lookup"><span data-stu-id="26a0a-129">For example, if a service has four endpoints, and two of them have the same listen URI, then this method gets called three times.</span></span> <span data-ttu-id="26a0a-130">La raison est que le `bindingParameters` vise chaque pile de canal ; une pile de canal existe pour chaque URI d'écoute.</span><span class="sxs-lookup"><span data-stu-id="26a0a-130">The reason is that the `bindingParameters` target each channel stack and there is one channel stack for each listen URI.</span></span> <span data-ttu-id="26a0a-131">Étant donné que chaque appel reçoit ces points de terminaison au niveau de cet URI, deux appels reçoivent chacun un <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> unique, et un appel reçoit une collection de deux objets <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="26a0a-131">Because each call receives those endpoints at that listen URI, two calls each get a single <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>, and one call gets a collection of two <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26a0a-132">Toutes les méthodes <xref:System.ServiceModel.Description.IServiceBehavior> passent les objets <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> et <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> comme paramètres.</span><span class="sxs-lookup"><span data-stu-id="26a0a-132">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="26a0a-133">Le paramètre <xref:System.ServiceModel.Description.ServiceDescription> est présenté à titre d'examen et d'insertion de personnalisations uniquement. Sinon, si vous modifiez ces objets, le comportement d'exécution n'est pas défini.</span><span class="sxs-lookup"><span data-stu-id="26a0a-133">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">
          <span data-ttu-id="26a0a-134">Description du service.</span>
          <span class="sxs-lookup">
            <span data-stu-id="26a0a-134">The service description.</span>
          </span>
        </param>
        <param name="serviceHostBase">
          <span data-ttu-id="26a0a-135">Hôte en cours de génération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="26a0a-135">The host that is currently being built.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="26a0a-136">Fournit la possibilité de modifier des valeurs de propriété d'exécution ou insérer des objets d'extensions personnalisées tels que les gestionnaires d'erreurs, les intercepteurs de messages ou de paramètres, les extensions de sécurité et autres objets d'extensions personnalisées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="26a0a-136">Provides the ability to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26a0a-137">Implémentez la méthode <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> pour inspecter ou modifier l'objet <xref:System.ServiceModel.ServiceHostBase> en cours de construction pour prendre en charge des scénarios d'exécution personnalisés.</span><span class="sxs-lookup"><span data-stu-id="26a0a-137">Implement the <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> method to inspect or modify the <xref:System.ServiceModel.ServiceHostBase> object that is being constructed in order to support some custom execution scenario.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26a0a-138">Toutes les méthodes <xref:System.ServiceModel.Description.IServiceBehavior> passent les objets <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> et <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> comme paramètres.</span><span class="sxs-lookup"><span data-stu-id="26a0a-138">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="26a0a-139">Le paramètre <xref:System.ServiceModel.Description.ServiceDescription> est présenté à titre d'examen et d'insertion de personnalisations uniquement. Sinon, si vous modifiez ces objets, le comportement d'exécution n'est pas défini.</span><span class="sxs-lookup"><span data-stu-id="26a0a-139">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26a0a-140">L'exemple de code suivant montre l'utilisation d'un comportement de service spécifié dans un fichier de configuration pour insérer un gestionnaire d'erreurs personnalisé dans une application de service.</span><span class="sxs-lookup"><span data-stu-id="26a0a-140">The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</span></span> <span data-ttu-id="26a0a-141">Dans cet exemple, le gestionnaire d'erreurs intercepte toutes les exceptions et les convertit en une erreur `GreetingFault` SOAP personnalisée qui est ensuite retournée au client.</span><span class="sxs-lookup"><span data-stu-id="26a0a-141">In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.</span></span>  
  
 <span data-ttu-id="26a0a-142">L'implémentation <xref:System.ServiceModel.Description.IServiceBehavior> suivante n'ajoute pas d'objet de paramètre de liaison, ajoute l'objet personnalisé <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> à chaque propriété <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>, confirme que chaque opération du service auquel s'applique le comportement de service, et dispose d'un <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> de type `GreetingFault`.</span><span class="sxs-lookup"><span data-stu-id="26a0a-142">The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> of type `GreetingFault`.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="26a0a-143">Dans cet exemple, la classe de comportement implémente également l'<xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, qui permet au comportement de service d'être inséré en l'utilisant dans un fichier de configuration de l'application comme le montre l'exemple de code suivant.</span><span class="sxs-lookup"><span data-stu-id="26a0a-143">In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">
          <span data-ttu-id="26a0a-144">Description du service.</span>
          <span class="sxs-lookup">
            <span data-stu-id="26a0a-144">The service description.</span>
          </span>
        </param>
        <param name="serviceHostBase">
          <span data-ttu-id="26a0a-145">Hôte de service en cours de construction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="26a0a-145">The service host that is currently being constructed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="26a0a-146">Fournit la possibilité d'inspecter l'hôte de service et la description de service pour confirmer que le service peut correctement s'exécuter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="26a0a-146">Provides the ability to inspect the service host and the service description to confirm that the service can run successfully.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26a0a-147">Utilisez la méthode <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> pour confirmer si le service actuel peut correctement s'exécuter d'après votre scénario.</span><span class="sxs-lookup"><span data-stu-id="26a0a-147">Use the <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> method to confirm whether the current service can execute properly according to your scenario.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26a0a-148">Toutes les méthodes <xref:System.ServiceModel.Description.IServiceBehavior> passent les objets <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> et <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> comme paramètres.</span><span class="sxs-lookup"><span data-stu-id="26a0a-148">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="26a0a-149">Le paramètre <xref:System.ServiceModel.Description.ServiceDescription> est présenté à titre d'examen et d'insertion de personnalisations uniquement. Sinon, si vous modifiez ces objets, le comportement d'exécution n'est pas défini.</span><span class="sxs-lookup"><span data-stu-id="26a0a-149">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26a0a-150">L'exemple de code suivant montre l'utilisation d'un comportement de service spécifié dans un fichier de configuration pour insérer un gestionnaire d'erreurs personnalisé dans une application de service.</span><span class="sxs-lookup"><span data-stu-id="26a0a-150">The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</span></span> <span data-ttu-id="26a0a-151">Dans cet exemple, le gestionnaire d'erreurs intercepte toutes les exceptions et les convertit en une erreur `GreetingFault` SOAP personnalisée qui est ensuite retournée au client.</span><span class="sxs-lookup"><span data-stu-id="26a0a-151">In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.</span></span>  
  
 <span data-ttu-id="26a0a-152">L'implémentation <xref:System.ServiceModel.Description.IServiceBehavior> suivante n'ajoute pas d'objet de paramètre de liaison, ajoute l'objet personnalisé <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> à chaque propriété <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>, confirme que chaque opération du service auquel s'applique le comportement de service, et dispose d'un <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> de type `GreetingFault`.</span><span class="sxs-lookup"><span data-stu-id="26a0a-152">The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> of type `GreetingFault`.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="26a0a-153">Dans cet exemple, la classe de comportement implémente également l'<xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, qui permet au comportement de service d'être inséré en l'utilisant dans un fichier de configuration de l'application comme le montre l'exemple de code suivant.</span><span class="sxs-lookup"><span data-stu-id="26a0a-153">In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>