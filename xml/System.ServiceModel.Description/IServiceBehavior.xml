<Type Name="IServiceBehavior" FullName="System.ServiceModel.Description.IServiceBehavior">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8f26cbbfb79ab6e7cd4db524dfccbb6a72e11474" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37617241" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IServiceBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IServiceBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceBehavior" />
  <TypeSignature Language="F#" Value="type IServiceBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Fournit un mécanisme permettant de modifier ou d'insérer des extensions personnalisées sur l'intégralité d'un service, y compris <see cref="T:System.ServiceModel.ServiceHostBase" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez <xref:System.ServiceModel.Description.IServiceBehavior> pour modifier, examiner ou étendre certains aspects de l'exécution à l'échelle du service au niveau de l'application :  
  
-   Utilisez la méthode <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> pour modifier des valeurs de propriété d'exécution ou insérer des objets d'extensions personnalisées tels que les gestionnaires d'erreurs, les intercepteurs de messages ou de paramètres, les extensions de sécurité et autres objets d'extensions personnalisées.  
  
-   Utilisez le <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> méthode pour examiner la description avant que Windows Communication Foundation (WCF) construit le service en cours d’exécution pour confirmer qu’il peut s’exécuter correctement.  
  
-   Utilisez la méthode <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> pour passer à un élément de liaison les informations personnalisées pour le service afin qu'il puisse correctement prendre en charge le service.  
  
 Les objets <xref:System.ServiceModel.Description.IServiceBehavior> peuvent utiliser chacune de ces méthodes mais souvent, seule l'une d'elles est importante. Dans ce cas, les méthodes inutilisées peuvent ne retourner aucune valeur.  
  
> [!NOTE]
>  Toutes les méthodes <xref:System.ServiceModel.Description.IServiceBehavior> passent les objets <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> et <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> comme paramètres. Le paramètre <xref:System.ServiceModel.Description.ServiceDescription> est présenté à titre d'examen uniquement ; si vous modifiez ces objets, le comportement d'exécution n'est pas défini.  
  
 Pour effectuer la tâche de personnalisation à laquelle ils se destine, l'objet <xref:System.ServiceModel.Description.IServiceBehavior> doit être ajouté à la propriété <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> avant la construction de l'exécution de service. Il y a trois manières pour effectuer cette opération :  
  
-   Par programme, ajoutez le comportement de service personnalisé à la propriété <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> avant le point où la méthode <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> est appelée sur l'objet <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>.  
  
-   Créez un attribut personnalisé qui implémente le <xref:System.ServiceModel.Description.IServiceBehavior> et l'utilise pour marquer des classes de service qui doivent être modifiées. Quand un <xref:System.ServiceModel.ServiceHost> objet est construit, WCF utilise la réflexion pour découvrir les attributs sur le type de service. Si des attributs implémentent <xref:System.ServiceModel.Description.IServiceBehavior>, ils sont ajoutés à la collection de comportements sur <xref:System.ServiceModel.Description.ServiceDescription>.  
  
-   Étendez la classe <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> pour prendre en charge la spécification du comportement dans une application ou un fichier de configuration d'ordinateur. Pour plus d'informations, consultez la section Exemple.  
  
 Exemples de comportements de service dans WCF le <xref:System.ServiceModel.ServiceBehaviorAttribute> attribut, le <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType>, le <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType> et le <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType> comportement.  
  
   
  
## Examples  
 L'exemple de code suivant montre l'utilisation d'un comportement de service spécifié dans un fichier de configuration pour insérer un gestionnaire d'erreurs personnalisé dans une application de service. Dans cet exemple, le gestionnaire d'erreurs intercepte toutes les exceptions et les convertit en une erreur `GreetingFault` SOAP personnalisée qui est ensuite retournée au client.  
  
 L'implémentation <xref:System.ServiceModel.Description.IServiceBehavior> suivante n'ajoute pas d'objet de paramètre de liaison, ajoute l'objet personnalisé <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> à chaque propriété <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>, confirme que chaque opération du service auquel s'applique le comportement de service, et dispose d'un <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> de type `GreetingFault`.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 Dans cet exemple, la classe de comportement implémente également l'<xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, qui permet au comportement de service d'être inséré en l'utilisant dans un fichier de configuration de l'application comme le montre l'exemple de code suivant.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase, class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase, System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::ServiceEndpoint ^&gt; ^ endpoints, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase * System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iServiceBehavior.AddBindingParameters (serviceDescription, serviceHostBase, endpoints, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
        <Parameter Name="endpoints" Type="System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt;" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">Description du fonctionnement du service.</param>
        <param name="serviceHostBase">Hôte du service.</param>
        <param name="endpoints">Points de terminaison de service.</param>
        <param name="bindingParameters">Objets personnalisés auxquels ont accès les éléments de liaison.</param>
        <summary>Fournit la possibilité de passer des données personnalisées à des éléments de liaison pour prendre en charge l’implémentation de contrat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la méthode <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> pour ajouter des objets de données personnalisés à la collection `parameters` que les éléments de liaison peuvent utiliser pour acquérir des informations supplémentaires afin de leur permettre de prendre en charge le contrat.  
  
 Cette méthode est appelée une fois pour chaque URI d'écoute. Par exemple, si un service dispose de quatre points de terminaison et que deux d'entre eux ont le même URI d'écoute, cette méthode est alors appelée trois fois. La raison est que le `bindingParameters` vise chaque pile de canal ; une pile de canal existe pour chaque URI d'écoute. Étant donné que chaque appel reçoit ces points de terminaison au niveau de cet URI, deux appels reçoivent chacun un <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> unique, et un appel reçoit une collection de deux objets <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Toutes les méthodes <xref:System.ServiceModel.Description.IServiceBehavior> passent les objets <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> et <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> comme paramètres. Le paramètre <xref:System.ServiceModel.Description.ServiceDescription> est présenté à titre d'examen et d'insertion de personnalisations uniquement. Sinon, si vous modifiez ces objets, le comportement d'exécution n'est pas défini.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.ApplyDispatchBehavior (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">Description du service.</param>
        <param name="serviceHostBase">Hôte en cours de génération.</param>
        <summary>Fournit la possibilité de modifier des valeurs de propriété d'exécution ou insérer des objets d'extensions personnalisées tels que les gestionnaires d'erreurs, les intercepteurs de messages ou de paramètres, les extensions de sécurité et autres objets d'extensions personnalisées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez la méthode <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> pour inspecter ou modifier l'objet <xref:System.ServiceModel.ServiceHostBase> en cours de construction pour prendre en charge des scénarios d'exécution personnalisés.  
  
> [!NOTE]
>  Toutes les méthodes <xref:System.ServiceModel.Description.IServiceBehavior> passent les objets <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> et <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> comme paramètres. Le paramètre <xref:System.ServiceModel.Description.ServiceDescription> est présenté à titre d'examen et d'insertion de personnalisations uniquement. Sinon, si vous modifiez ces objets, le comportement d'exécution n'est pas défini.  
  
   
  
## Examples  
 L'exemple de code suivant montre l'utilisation d'un comportement de service spécifié dans un fichier de configuration pour insérer un gestionnaire d'erreurs personnalisé dans une application de service. Dans cet exemple, le gestionnaire d'erreurs intercepte toutes les exceptions et les convertit en une erreur `GreetingFault` SOAP personnalisée qui est ensuite retournée au client.  
  
 L'implémentation <xref:System.ServiceModel.Description.IServiceBehavior> suivante n'ajoute pas d'objet de paramètre de liaison, ajoute l'objet personnalisé <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> à chaque propriété <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>, confirme que chaque opération du service auquel s'applique le comportement de service, et dispose d'un <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> de type `GreetingFault`.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 Dans cet exemple, la classe de comportement implémente également l'<xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, qui permet au comportement de service d'être inséré en l'utilisant dans un fichier de configuration de l'application comme le montre l'exemple de code suivant.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.Validate (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">Description du service.</param>
        <param name="serviceHostBase">Hôte de service en cours de construction.</param>
        <summary>Fournit la possibilité d'inspecter l'hôte de service et la description de service pour confirmer que le service peut correctement s'exécuter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la méthode <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> pour confirmer si le service actuel peut correctement s'exécuter d'après votre scénario.  
  
> [!NOTE]
>  Toutes les méthodes <xref:System.ServiceModel.Description.IServiceBehavior> passent les objets <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> et <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> comme paramètres. Le paramètre <xref:System.ServiceModel.Description.ServiceDescription> est présenté à titre d'examen et d'insertion de personnalisations uniquement. Sinon, si vous modifiez ces objets, le comportement d'exécution n'est pas défini.  
  
   
  
## Examples  
 L'exemple de code suivant montre l'utilisation d'un comportement de service spécifié dans un fichier de configuration pour insérer un gestionnaire d'erreurs personnalisé dans une application de service. Dans cet exemple, le gestionnaire d'erreurs intercepte toutes les exceptions et les convertit en une erreur `GreetingFault` SOAP personnalisée qui est ensuite retournée au client.  
  
 L'implémentation <xref:System.ServiceModel.Description.IServiceBehavior> suivante n'ajoute pas d'objet de paramètre de liaison, ajoute l'objet personnalisé <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> à chaque propriété <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>, confirme que chaque opération du service auquel s'applique le comportement de service, et dispose d'un <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> de type `GreetingFault`.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 Dans cet exemple, la classe de comportement implémente également l'<xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, qui permet au comportement de service d'être inséré en l'utilisant dans un fichier de configuration de l'application comme le montre l'exemple de code suivant.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>