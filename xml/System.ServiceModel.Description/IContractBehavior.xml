<Type Name="IContractBehavior" FullName="System.ServiceModel.Description.IContractBehavior">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="09d3094f5aac8acb8245cc86bcace579c8673d5e" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37617273" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IContractBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContractBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IContractBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContractBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContractBehavior" />
  <TypeSignature Language="F#" Value="type IContractBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implémente des méthodes qui permettent d'étendre un comportement d'exécution pour un contrat, que ce soit pour une application cliente ou de service.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez l'interface <xref:System.ServiceModel.Description.IContractBehavior> pour modifier, examiner ou étendre certains aspects de l'exécution à l'échelle du contrat au niveau de l'application. À la différence des objets <xref:System.ServiceModel.Description.IServiceBehavior> et <xref:System.ServiceModel.Description.IEndpointBehavior>, les objets <xref:System.ServiceModel.Description.IContractBehavior> ne peuvent pas être ajoutés à l'exécution à l'aide d'un fichier de configuration de l'application ; ils ne peuvent l'être que par programme ou à l'aide d'un attribut.  
  
 Pour plus d’informations sur le choix entre le service, point de terminaison et comportements de contrat, consultez [configuration et extension de l’exécution des comportements](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).  
  
-   Utilisez la méthode <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> pour fournir aux éléments de liaison des données personnalisées pour prendre en charge le comportement.  
  
-   Utilisez la méthode <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> pour modifier, examiner ou insérer des extensions dans le contrat d'une application cliente.  
  
-   Utilisez la méthode <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> pour modifier, examiner ou insérer des extensions dans le contrat d'une application de service.  
  
-   Utilisez la méthode <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> pour assurer qu'un contrat peut prendre en charge une fonctionnalité particulière.  
  
 Les objets <xref:System.ServiceModel.Description.IContractBehavior> peuvent utiliser chacune de ces méthodes mais souvent, seule l'une d'elles est importante. Dans ce cas, les méthodes inutilisées peuvent ne retourner aucune valeur.  
  
> [!NOTE]
>  Toutes les méthodes <xref:System.ServiceModel.Description.IContractBehavior> passent <xref:System.ServiceModel.Description.ContractDescription?displayProperty=nameWithType> et <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> comme paramètres. Ces paramètres sont présentés à titre d'examen. Si vous modifiez les objets, le comportement d'exécution n'est pas défini.  
  
 Les types <xref:System.ServiceModel.Description.IContractBehavior> peuvent être utilisés sur le service, le client ou les deux. Pour effectuer une tâche de personnalisation sur le service, l'objet <xref:System.ServiceModel.Description.IContractBehavior> doit être ajouté à la propriété <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> avant la construction de l'exécution de service, qui se produit lors de l'appel à la méthode <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> sur l'objet <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. Il existe deux manières de procéder.  
  
 La première méthode consiste à ajouter par programme le comportement de contrat personnalisé à la propriété <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> avant l'appel à la méthode <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> sur l'objet <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. Lors d'une application de ce type, le comportement est appliqué pour tous les messages échangés sur ce contrat sur tous les points de terminaison.  
  
> [!NOTE]
>  Le comportement est appliqué à tous les contrats du même type. Par exemple, si vous ajoutez par programme le même type de contrat à plusieurs points de terminaison, le comportement modifie tous les points de terminaison qui font référence au même objet de contrat.  
  
 La deuxième méthode consiste à créer un attribut personnalisé qui implémente <xref:System.ServiceModel.Description.IContractBehavior> et l'applique aux éléments suivants :  
  
-   Interface de contrat. Dans ce cas, le comportement est appliqué à tous les contrats de ce type de tous les points de terminaison.  
  
-   Classe de service.  Dans ce cas, le comportement est appliqué à tous les points de terminaison indépendamment du contrat.  
  
-   Classe de rappel.  Dans ce cas, le comportement est appliqué au point de terminaison du client duplex.  
  
 Le comportement de la deuxième approche varie légèrement si l'attribut personnalisé implémente également <xref:System.ServiceModel.Description.IContractBehaviorAttribute?displayProperty=nameWithType>. Dans ce cas, le comportement est le suivant :  
  
-   Interface de contrat. Dans ce cas, le comportement est appliqué à tous les contrats de ce type dans n’importe quel point de terminaison et Windows Communication Foundation (WCF) ignore la valeur de la <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> propriété.  
  
-   Classe de service.  Dans ce cas, le comportement n'est appliqué qu'aux points de terminaison dont le contrat est la valeur de la propriété <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType>.  
  
-   Classe de rappel.  Dans ce cas, le comportement est appliqué au point de terminaison du client duplex et WCF ignore la valeur de la <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> propriété.  
  
 Pour effectuer la tâche de personnalisation sur le client auquel il est destiné, l'objet <xref:System.ServiceModel.Description.IContractBehavior> doit être ajouté à la propriété <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> avant la construction de l'exécution du client, qui se produit lors de l'appel à <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType>. Il existe deux façons d'effectuer cette opération :  
  
-   Par programme, ajoutez le comportement de contrat personnalisé à la propriété <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> avant l'appel du <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType>.  
  
-   Créez un attribut personnalisé qui implémente également <xref:System.ServiceModel.Description.IContractBehavior>.  
  
 Pour plus d’informations sur l’ajout par programme <xref:System.ServiceModel.Description.IContractBehavior> types pour le client ou service de l’application, consultez [configuration et extension de l’exécution des comportements](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).  
  
   
  
## Examples  
 L'exemple de code suivant suppose une implémentation <xref:System.ServiceModel.Dispatcher.IInstanceProvider> personnalisée appelée `ObjectProviderBehavior`, qui fournit un comportement singleton ; elle retourne toujours la même instance de service et ne la recycle pas.  
  
 Pour personnaliser le fournisseur d'instances, l'exemple illustre l'implémentation d'un attribut personnalisé (`SingletonBehaviorAttribute`) qui implémente <xref:System.ServiceModel.Description.IContractBehavior> pour insérer le fournisseur d'instances de services personnalisé. Il implémente également <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, qui lie son utilisation au contrat `ISampleService`.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iContractBehavior.AddBindingParameters (contractDescription, endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Description de contrat à modifier.</param>
        <param name="endpoint">Point de terminaison à modifier.</param>
        <param name="bindingParameters">Objets que requièrent les éléments de liaison pour prendre en charge le comportement.</param>
        <summary>Configure tous les éléments de liaison pour prendre en charge le comportement de contrat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez la méthode <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> pour fournir aux éléments de liaison les objets supplémentaires qu'ils requièrent pour prendre en charge le comportement de contrat.  
  
 Cette méthode est appelée une fois pour chaque point de terminaison qui utilise le contrat de service spécifié.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iContractBehavior.ApplyClientBehavior (contractDescription, endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Description de contrat auquel l’extension est destinée.</param>
        <param name="endpoint">Point de terminaison.</param>
        <param name="clientRuntime">Exécution du client.</param>
        <summary>Implémente une modification ou une extension du client sur l’intégralité d’un contrat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez la méthode <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> pour afficher, modifier ou ajouter des extensions personnalisées à l'exécution du client sur l'intégralité des messages ou pour une opération spécifique. Pour plus d'informations sur les personnalisations que vous pouvez effectuer avec un objet d'exécution d'un client, consultez <xref:System.ServiceModel.Dispatcher.ClientRuntime> et <xref:System.ServiceModel.Dispatcher.ClientOperation>.  
  
 La méthode <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> peut lever une exception <xref:System.NotImplementedException> si le comportement est uniquement destiné à une utilisation dans une application de service.  
  
 Cette méthode est appelée une fois pour chaque point de terminaison qui utilise le contrat de service spécifié.  
  
 Notez que deux opérations peuvent avoir le même nom dans la description (une dans chaque direction). Par conséquent, si vous devez itérer au sein des opérations dans lesquelles le contrat est un contrat duplex, vous devez corréler la direction de message entre le point de terminaison <xref:System.ServiceModel.Dispatcher.ClientRuntime> et celui retourné par la propriété <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A>.  
  
 Étant donné que d'autres comportements ont peut-être déjà ajouté ou supprimé des opérations de l'exécution, rien ne garantit que le nombre d'opérations dans les descriptions soit similaire à celui des objets <xref:System.ServiceModel.Dispatcher.ClientOperation> dans la propriété <xref:System.ServiceModel.Dispatcher.ClientRuntime.Operations%2A>.  
  
   
  
## Examples  
 L'exemple de code suivant suppose une implémentation <xref:System.ServiceModel.Dispatcher.IInstanceProvider> personnalisée appelée `ObjectProviderBehavior`, qui fournit un comportement singleton ; elle retourne toujours la même instance de service et ne la recycle pas.  
  
 Pour personnaliser le fournisseur d'instances, l'exemple illustre l'implémentation d'un attribut personnalisé (`SingletonBehaviorAttribute`) qui implémente <xref:System.ServiceModel.Description.IContractBehavior> pour insérer le fournisseur d'instances de services personnalisé. Il implémente également <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, qui lie son utilisation au contrat `ISampleService`.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::DispatchRuntime ^ dispatchRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.DispatchRuntime -&gt; unit" Usage="iContractBehavior.ApplyDispatchBehavior (contractDescription, endpoint, dispatchRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="dispatchRuntime" Type="System.ServiceModel.Dispatcher.DispatchRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Description de contrat à modifier.</param>
        <param name="endpoint">Point de terminaison qui expose le contrat.</param>
        <param name="dispatchRuntime">Exécution de répartiteur qui contrôle l'exécution de service.</param>
        <summary>Implémente une modification ou une extension du client sur l’intégralité d’un contrat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez l'<xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> pour afficher, modifier ou ajouter des extensions personnalisées à l'exécution de service sur l'intégralité des messages dans un contrat spécifique ou pour une opération spécifique de ce contrat. Pour plus d'informations sur les personnalisations que vous pouvez effectuer dans une application de service, consultez <xref:System.ServiceModel.Dispatcher.DispatchRuntime> et <xref:System.ServiceModel.Dispatcher.DispatchOperation>.  
  
 La méthode <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> peut lever une exception <xref:System.NotImplementedException> si le comportement est uniquement destiné à une utilisation dans une application cliente.  
  
 Cette méthode est appelée une fois pour chaque point de terminaison qui utilise le contrat de service spécifié.  
  
 Notez que deux opérations peuvent avoir le même nom dans la description (une dans chaque direction). Par conséquent, si vous devez itérer au sein des opérations dans lesquelles le contrat est un contrat duplex, vous devez corréler la direction de message entre le point de terminaison <xref:System.ServiceModel.Dispatcher.DispatchRuntime> et celui retourné par la propriété <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A>.  
  
 De plus, étant donné que d'autres comportements ont peut-être déjà ajouté ou supprimé des opérations de l'exécution, rien ne garantit que le nombre d'opérations dans les descriptions soit similaire à celui des objets <xref:System.ServiceModel.Dispatcher.DispatchOperation> dans la propriété <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A>.  
  
   
  
## Examples  
 L'exemple de code suivant suppose une implémentation <xref:System.ServiceModel.Dispatcher.IInstanceProvider> personnalisée appelée `ObjectProviderBehavior`, qui fournit un comportement singleton ; elle retourne toujours la même instance de service et ne la recycle pas.  
  
 Pour personnaliser le fournisseur d'instances, l'exemple illustre l'implémentation d'un attribut personnalisé (`SingletonBehaviorAttribute`) qui implémente <xref:System.ServiceModel.Description.IContractBehavior> pour insérer le fournisseur d'instances de services personnalisé. Il implémente également <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, qui lie son utilisation au contrat `ISampleService`.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iContractBehavior.Validate (contractDescription, endpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Contrat à valider.</param>
        <param name="endpoint">Point de terminaison à valider.</param>
        <summary>Effectuez une implémentation pour confirmer que le contrat et le point de terminaison peuvent prendre en charge le contrat ou le comportement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez la méthode <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> pour confirmer que la description de contrat est suffisante pour prendre en charge le comportement de contrat personnalisé. Les implémentations peuvent inspecter la description et ne génèrent ou ne retournent aucune valeur.  
  
 Cette méthode est appelée une fois pour chaque point de terminaison qui utilise le contrat de service spécifié.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>