<Type Name="IOperationBehavior" FullName="System.ServiceModel.Description.IOperationBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f5752ccf5bc577840b385c2a5217e832b33585ba" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56772620" /></Metadata><TypeSignature Language="C#" Value="public interface IOperationBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IOperationBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IOperationBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IOperationBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IOperationBehavior" />
  <TypeSignature Language="F#" Value="type IOperationBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implémente des méthodes qui permettent d'étendre un comportement d'exécution pour une opération, que ce soit pour une application cliente ou de service.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez l'interface <xref:System.ServiceModel.Description.IOperationBehavior> pour modifier, examiner ou étendre certains aspects de l'exécution à l'échelle de l'opération au niveau de l'application, que ce soit pour des applications clientes ou de service.  
  
-   Utilisez la méthode <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> pour passer des données personnalisées lors de l'exécution pour permettre aux liaisons de prendre en charge un comportement personnalisé.  
  
-   Utilisez la méthode <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> pour modifier, examiner ou insérer des extensions dans le répartiteur client d’une application cliente.  
  
-   Utilisez la méthode <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> pour modifier, examiner ou insérer des extensions dans l’exécution à l’échelle de l’opération dans une application de service.  
  
-   Utilisez la méthode <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> pour confirmer qu'un <xref:System.ServiceModel.Description.OperationDescription> remplit les conditions requises. Elle permet d’assurer qu’une opération dispose d’un certain paramètre de configuration activé, qu’elle prend en charge une fonctionnalité particulière et d’autres exigences.  
  
 Les objets <xref:System.ServiceModel.Description.IOperationBehavior> peuvent utiliser chacune de ces méthodes mais souvent, seule l'une d'elles est importante. Dans ce cas, les méthodes inutilisées ne retournent aucun élément, n'effectuant ainsi aucune action.  
  
> [!NOTE]
>  Toutes les méthodes <xref:System.ServiceModel.Description.IOperationBehavior> passent un objet <xref:System.ServiceModel.Description.OperationDescription> comme paramètre. Ce paramètre est présenté à titre d'examen uniquement ; si vous modifiez l'objet <xref:System.ServiceModel.Description.OperationDescription>, le comportement d'exécution n'est pas défini.  
  
 En général, les objets <xref:System.ServiceModel.Description.IOperationBehavior> permettent d'accéder aux différentes propriétés de l'objet <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> d'une application de service et à l'objet <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> d'une application cliente.  
  
 En général, le développeur examine tout d’abord les points d’extensibilité pour déterminer l’option de personnalisation qui convient au scénario d’application, puis implémente la personnalisation au niveau de la portée appropriée. Par exemple, les objets <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> peuvent insérer des personnalisations pour tous les messages dans l'intégralité d'un service et les objets <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> peuvent insérer des personnalisations pour tous les messages sur l'intégralité d'un contrat spécifique, etc. Pour obtenir une description des différentes propriétés et personnalisations disponibles, consultez [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
 Une fois qu’une personnalisation a été décidée (et l’interface de personnalisation implémentée, si nécessaire) et le <xref:System.ServiceModel.Description.IOperationBehavior> est la portée appropriée de personnalisation, la personnalisation doit être insérée dans le runtime Windows Communication Foundation (WCF) en implémentant <xref:System.ServiceModel.Description.IOperationBehavior> et en ajoutant le comportement d’opération à l’exécution.  
  
 Il existe deux méthodes pour ajouter le <xref:System.ServiceModel.Description.IOperationBehavior> à l'exécution :  
  
-   Par programme, ajoutez le comportement d'opération personnalisé à la propriété <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> avant l'ouverture de l'hôte de service (dans une application de service) ou de la fabrique de canal (dans une application cliente).  
  
-   Ajoutez le comportement à l'aide d'un attribut personnalisé.  
  
 Pour effectuer la tâche de personnalisation de service à laquelle il est destiné, l’objet <xref:System.ServiceModel.Description.IOperationBehavior> doit être ajouté à la propriété <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> avant la construction de l’exécution de service, qui se produit lors de l’appel à la méthode <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> sur <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. Pour effectuer une tâche de personnalisation cliente, l’objet <xref:System.ServiceModel.Description.IOperationBehavior> doit être ajouté à la propriété <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> avant l’appel aux méthodes <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> ou <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> sur <xref:System.ServiceModel.ChannelFactory%601>.  
  
 Bien que le comportement d'opération soit conçu pour un accès simplifié à l'exécution au niveau de la portée d'une opération individuelle, vous pouvez accéder à l'exécution au niveau d'une plus grande portée en accédant à l'objet d'exécution parent.  
  
   
  
## Examples  
 L'exemple de code suivant montre une implémentation de l'<xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> qui écrit sur la console lors de l'appel à l'inspecteur sur une opération. Cette personnalisation ne peut être attachée à l'<xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> ou l'<xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> et est par conséquent souvent insérée par un comportement d'opération.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 L'exemple de code suivant montre comment le comportement d'opération attache l'inspecteur de paramètre à l'exécution.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iOperationBehavior.AddBindingParameters (operationDescription, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Opération en cours d'examen. Utilisez-la à titre d'examen uniquement. Si la description d'opération est modifiée, les résultats ne sont pas définis.</param>
        <param name="bindingParameters">Collection d'objets que les éléments de liaison requièrent pour prendre en charge le comportement.</param>
        <summary>Effectuez une implémentation pour passer des données au moment de l’exécution à des liaisons afin de prendre en charge un comportement personnalisé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez la méthode <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> pour fournir aux éléments de liaison des objets supplémentaires qu’ils requièrent pour prendre en charge le comportement d’opération. Lors de l’ajout de paramètres de liaison ici, la liaison peut rechercher et traiter ces objets lors de la création de l’écouteur de canal ou de la fabrique de canal. En général, vous implémentez la méthode <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> pour passer des informations relatives à l'opération à un élément de liaison personnalisé, afin qu'il puisse correctement construire un canal de prise en charge. Ne retournez aucune valeur si aucune modification n'est requise.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.ClientOperation clientOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Dispatcher.ClientOperation clientOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Dispatcher::ClientOperation ^ clientOperation);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Dispatcher.ClientOperation -&gt; unit" Usage="iOperationBehavior.ApplyClientBehavior (operationDescription, clientOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="clientOperation" Type="System.ServiceModel.Dispatcher.ClientOperation" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Opération en cours d'examen. Utilisez-la à titre d'examen uniquement. Si la description d'opération est modifiée, les résultats ne sont pas définis.</param>
        <param name="clientOperation">Objet d'exécution qui expose des propriétés de personnalisation pour l'opération décrite par <paramref name="operationDescription" />.</param>
        <summary>Implémente une modification ou une extension du client sur l’intégralité d’une opération.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez la méthode <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> pour afficher, modifier ou ajouter une extension personnalisée à l’exécution du client sur l’intégralité des messages utilisés avec une opération spécifique. Pour plus d'informations sur les personnalisations que vous pouvez effectuer avec un objet d'exécution d'un client, consultez <xref:System.ServiceModel.Dispatcher.ClientRuntime> et <xref:System.ServiceModel.Dispatcher.ClientOperation>.  
  
 Il est recommandé que la méthode <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> lève une <xref:System.NotImplementedException> si le comportement est uniquement destiné à une utilisation dans une application de service.  
  
   
  
## Examples  
 L'exemple de code suivant montre une implémentation de l'<xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> qui écrit sur la console lors de l'appel à l'inspecteur sur une opération. Cette personnalisation ne peut être attachée à l'<xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> ou l'<xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> et est par conséquent souvent insérée par un comportement d'opération.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 L'exemple de code suivant montre comment le comportement d'opération attache l'inspecteur de paramètre à l'exécution.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Dispatcher::DispatchOperation ^ dispatchOperation);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Dispatcher.DispatchOperation -&gt; unit" Usage="iOperationBehavior.ApplyDispatchBehavior (operationDescription, dispatchOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="dispatchOperation" Type="System.ServiceModel.Dispatcher.DispatchOperation" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Opération en cours d'examen. Utilisez-la à titre d'examen uniquement. Si la description d'opération est modifiée, les résultats ne sont pas définis.</param>
        <param name="dispatchOperation">Objet d'exécution qui expose des propriétés de personnalisation pour l'opération décrite par <paramref name="operationDescription" />.</param>
        <summary>Implémente une modification ou une extension du client sur l’intégralité d’une opération.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez la méthode <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> pour afficher, modifier ou étendre l'exécution du service sur l'intégralité des messages ou pour une opération spécifique. Pour plus d'informations sur les personnalisations que vous pouvez effectuer dans une application de service, consultez <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> et <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>.  
  
 Il est recommandé que la méthode <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> lève une exception <xref:System.NotImplementedException> si le comportement est uniquement destiné à une utilisation dans une application cliente.  
  
   
  
## Examples  
 L'exemple de code suivant montre une implémentation de l'<xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> qui écrit sur la console lors de l'appel à l'inspecteur sur une opération. Cette personnalisation ne peut être attachée à l'<xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> ou l'<xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> et est par conséquent souvent insérée par un comportement d'opération.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 L'exemple de code suivant montre comment le comportement d'opération attache l'inspecteur de paramètre à l'exécution.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.OperationDescription operationDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.OperationDescription operationDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::OperationDescription ^ operationDescription);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.OperationDescription -&gt; unit" Usage="iOperationBehavior.Validate operationDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Opération en cours d'examen. Utilisez-la à titre d'examen uniquement. Si la description d'opération est modifiée, les résultats ne sont pas définis.</param>
        <summary>Effectuez une implémentation pour confirmer que l'opération répond à certains critères prévus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez la méthode <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> pour examiner la structure et confirmer tous les jeux de critères. Il n'est pas nécessaire d'effectuer toutes les personnalisations dans <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> ou <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> pour utiliser cette méthode. Si la validation de l’opération réussit, effectuez un retour ; sinon, levez une exception.  
  
 Par exemple, la méthode <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> permet d'assurer qu'une opération est autorisée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>