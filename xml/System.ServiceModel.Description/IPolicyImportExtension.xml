<Type Name="IPolicyImportExtension" FullName="System.ServiceModel.Description.IPolicyImportExtension">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4dacb12e8f4ae55b6d400f859ad650b5f3a4f3e5" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34316292" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPolicyImportExtension" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPolicyImportExtension" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IPolicyImportExtension" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPolicyImportExtension" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPolicyImportExtension" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Définit une méthode pour les objets qui importent des assertions de stratégie personnalisées relatives aux liaisons.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez l'interface <xref:System.ServiceModel.Description.IPolicyImportExtension> pour rechercher des informations WSDL exposées par un point de terminaison particulier pour des assertions de stratégie personnalisées relatives aux possibilités ou aux spécifications de point de terminaison. En général, un importateur de stratégie recherche une assertion spécifique et insère un élément de liaison, en configure un ou modifie le contrat pour prendre en charge les spécifications de l'assertion.  
  
 À la différence de son équivalent, <xref:System.ServiceModel.Description.IPolicyExportExtension>, <xref:System.ServiceModel.Description.IPolicyImportExtension> ne requiert pas d'implémentation par un objet <xref:System.ServiceModel.Channels.BindingElement>. Vous pouvez le charger à l'aide de la section de configuration du client, comme l'illustre la section Exemples ou par programme en l'ajoutant au constructeur <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType>.  
  
 Windows Communication Foundation (WCF) passe deux objets à la <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> (méthode), un <xref:System.ServiceModel.Description.MetadataImporter> et un <xref:System.ServiceModel.Description.PolicyConversionContext>. En général, l'objet <xref:System.ServiceModel.Description.PolicyConversionContext> contient déjà les assertions de stratégie pour chaque portée de liaison.  
  
 Une implémentation <xref:System.ServiceModel.Description.IPolicyImportExtension> effectue les étapes suivantes :  
  
1.  Recherche l'assertion de stratégie personnalisée de laquelle elle est chargée en appelant les méthodes <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A> ou <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A>, en fonction de la portée.  
  
2.  Supprime l’assertion de stratégie de la collection d’assertions. La méthode <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> recherche, retourne et supprime l'assertion en une seule étape.  
  
3.  Modifiez la pile de liaison ou le contrat en ajoutant un <xref:System.ServiceModel.Channels.BindingElement> personnalisé requis à la propriété <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> ou en modifiant la propriété <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=nameWithType>.  
  
 L'étape 2 est importante. Une fois que tous les importateurs de stratégie ont été appelées, WCF vérifie l’existence d’assertions de stratégie qui restent. S’il en existe, WCF suppose que l’importation de stratégie a échoué et n’importe pas la liaison associée.  
  
> [!IMPORTANT]
>  Un fournisseur de métadonnées malveillant peut tenter d'envoyer du code XML incorrect dans le cadre des métadonnées, dans une tentative d'exploiter un importateur de stratégie. Il est fortement recommandé que les importateurs de stratégie personnalisés soit fiables quant à toutes les formes de code XML qui peuvent y être passées.  
  
 Les implémentations <xref:System.ServiceModel.Description.MetadataImporter> personnalisées doivent implémenter leur propre objet <xref:System.ServiceModel.Description.PolicyConversionContext> pour extraire les assertions de stratégie attachées au format de métadonnées personnalisé.  
  
 Si vous souhaitez exporter et importer des éléments WSDL personnalisés qui ne sont pas des assertions de stratégie, consultez <xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=nameWithType> et <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Vous pouvez utiliser des importateurs de stratégie personnalisés et des exportateurs avec la [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) à l’aide des mêmes éléments de configuration dans un fichier de configuration et la `/svcutilConfig:<configFile>` option.  
  
   
  
## Examples  
 L'exemple de code suivant montre l'utilisation de la méthode <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> pour rechercher, retourner et supprimer l'assertion en une seule étape.  
  
 [!code-csharp[CustomPolicySample#1](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/policyimporter.cs#1)]
 [!code-vb[CustomPolicySample#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/policyimporter.vb#1)]  
  
 L'exemple de code suivant montre le fichier de configuration de l'application cliente pour charger l'importateur de stratégie personnalisé lors de l'appel à <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=nameWithType>.  
  
 [!code-xml[CustomPolicySample#7](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.exe.config#7)]   
  
 L'exemple de code suivant montre l'utilisation du <xref:System.ServiceModel.Description.MetadataResolver> pour télécharger et résoudre des métadonnées dans des objets de description.  
  
 [!code-csharp[CustomPolicySample#10](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.cs#10)]
 [!code-vb[CustomPolicySample#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/client.vb#10)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ImportPolicy">
      <MemberSignature Language="C#" Value="public void ImportPolicy (System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ImportPolicy(class System.ServiceModel.Description.MetadataImporter importer, class System.ServiceModel.Description.PolicyConversionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ImportPolicy (importer As MetadataImporter, context As PolicyConversionContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ImportPolicy(System::ServiceModel::Description::MetadataImporter ^ importer, System::ServiceModel::Description::PolicyConversionContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importer" Type="System.ServiceModel.Description.MetadataImporter" />
        <Parameter Name="context" Type="System.ServiceModel.Description.PolicyConversionContext" />
      </Parameters>
      <Docs>
        <param name="importer">Objet <see cref="T:System.ServiceModel.Description.MetadataImporter" /> utilisé.</param>
        <param name="context">Le <see cref="T:System.ServiceModel.Description.PolicyConversionContext" /> qui contient à la fois les assertions de stratégie qui peuvent être importées et les collections d'éléments de liaison au niveau desquelles les éléments de liaison doivent être implémentés peut être ajouté.</param>
        <summary>Définit une méthode qui peut importer des assertions de stratégie personnalisées et ajouter des éléments de liaison d’implémentation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez la méthode `ImportPolicy` pour obtenir des assertions de stratégie et apporter des modifications au contrat ou à la liaison importés afin de prendre en charge l'assertion. En général, un importateur de stratégie répond à la recherche d’une assertion de stratégie personnalisée en configurant ou insérant un élément de liaison dans la liaison en cours d’importation.  
  
 Windows Communication Foundation (WCF) passe deux objets à la <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> (méthode), un <xref:System.ServiceModel.Description.MetadataImporter> et un <xref:System.ServiceModel.Description.PolicyConversionContext>. En général, l'objet <xref:System.ServiceModel.Description.PolicyConversionContext> contient déjà les assertions de stratégie pour chaque portée de liaison.  
  
 Une implémentation <xref:System.ServiceModel.Description.IPolicyImportExtension> effectue les étapes suivantes :  
  
1.  Recherche l'assertion de stratégie personnalisée de laquelle elle est chargée en appelant les méthodes <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A> ou <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A>, en fonction de la portée.  
  
2.  Supprime l’assertion de stratégie de la collection d’assertions. La méthode <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> recherche, retourne et supprime l'assertion en une seule étape.  
  
3.  Modifie la pile de liaison ou le contrat en ajoutant un <xref:System.ServiceModel.Channels.BindingElement> personnalisé requis à la propriété <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> ou en modifiant la propriété <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=nameWithType>.  
  
 L'étape 2 est importante. Une fois que tous les importateurs de stratégie ont été appelées, WCF vérifie l’existence d’assertions de stratégie qui restent. S’il en existe, WCF suppose que l’importation de stratégie a échoué et n’importe pas la liaison associée.  
  
   
  
## Examples  
 L'exemple de code suivant montre l'utilisation de la méthode <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> pour rechercher, retourner et supprimer l'assertion en une seule étape.  
  
 [!code-csharp[CustomPolicySample#1](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/policyimporter.cs#1)]
 [!code-vb[CustomPolicySample#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/policyimporter.vb#1)]  
  
 L'exemple de code suivant montre le fichier de configuration de l'application cliente pour charger l'importateur de stratégie personnalisé lors de l'appel à <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=nameWithType>.  
  
 [!code-xml[CustomPolicySample#7](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.exe.config#7)]   
  
 L'exemple de code suivant montre l'utilisation du <xref:System.ServiceModel.Description.MetadataResolver> pour télécharger et résoudre des métadonnées dans des objets de description.  
  
 [!code-csharp[CustomPolicySample#10](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.cs#10)]
 [!code-vb[CustomPolicySample#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/client.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>