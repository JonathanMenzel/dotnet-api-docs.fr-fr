<Type Name="IEndpointBehavior" FullName="System.ServiceModel.Description.IEndpointBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="56717b15a48dcbf3c245a67f6ee66d0ccf41e8bb" /><Meta Name="ms.sourcegitcommit" Value="7461f9e28c2f184bd1596e6f07c25a3f34984516" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/28/2019" /><Meta Name="ms.locfileid" Value="58548157" /></Metadata><TypeSignature Language="C#" Value="public interface IEndpointBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEndpointBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IEndpointBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEndpointBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEndpointBehavior" />
  <TypeSignature Language="F#" Value="type IEndpointBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implémente des méthodes qui permettent d'étendre un comportement d'exécution pour un point de terminaison, que ce soit pour une application cliente ou de service.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez l'interface <xref:System.ServiceModel.Description.IEndpointBehavior> pour modifier, examiner ou étendre certains aspects de l'exécution à l'échelle du point de terminaison au niveau de l'application, que ce soit pour des applications clientes ou de service.  
  
-   Utilisez la méthode <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> pour passer des données personnalisées lors de l’exécution pour permettre aux liaisons de prendre en charge un comportement personnalisé.  
  
-   Utilisez la méthode <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> pour modifier, examiner ou insérer des extensions à un point de terminaison d'une application cliente.  
  
-   Utilisez la méthode <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> pour modifier, examiner ou insérer des extensions à l’exécution à l’échelle du point de terminaison d’une application de service.  
  
-   Utilisez la méthode <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> pour confirmer qu’un <xref:System.ServiceModel.Description.ServiceEndpoint> remplit les exigences requises. Elle permet d’assurer qu’un point de terminaison dispose d’un certain paramètre de configuration activé, qu’il prend en charge une fonctionnalité particulière et d’autres exigences.  
  
 Les objets <xref:System.ServiceModel.Description.IEndpointBehavior> peuvent utiliser chacune de ces méthodes mais souvent, seule l'une d'elles est importante. Dans ce cas, les méthodes inutilisées ne retournent aucun élément, n'effectuant ainsi aucune action.  
  
> [!NOTE]
>  Toutes les méthodes <xref:System.ServiceModel.Description.IEndpointBehavior> passent un objet <xref:System.ServiceModel.Description.ServiceEndpoint> comme paramètre. Ce paramètre est présenté à titre d'examen uniquement ; si vous modifiez l'objet <xref:System.ServiceModel.Description.ServiceEndpoint>, le comportement d'exécution n'est pas défini.  
  
 En général, les objets <xref:System.ServiceModel.Description.IEndpointBehavior> permettent d'accéder aux différentes propriétés des objets <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.EndpointDispatcher?displayProperty=nameWithType> et <xref:System.ServiceModel.Dispatcher.ChannelDispatcher?displayProperty=nameWithType> d'une application de service et à l'<xref:System.ServiceModel.Dispatcher.ClientRuntime?displayProperty=nameWithType> et à l'<xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> d'une application cliente. De plus, vous pouvez accéder aux propriétés de clients et services duplex, respectivement à l'aide des propriétés <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A?displayProperty=nameWithType> et <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType>.  
  
 Pour obtenir une description des différentes propriétés et personnalisations disponibles, consultez [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
 Une fois qu’une personnalisation a été décidée (et l’interface de personnalisation implémentée, si nécessaire) et le <xref:System.ServiceModel.Description.IEndpointBehavior> a été décidée est la portée appropriée de personnalisation, la personnalisation doit être insérée dans la Communication de Windows Runtime Foundation (WCF) en implémentant <xref:System.ServiceModel.Description.IEndpointBehavior> et en ajoutant le comportement de point de terminaison à l’exécution.  
  
 Il existe deux méthodes pour ajouter le comportement à l'exécution :  
  
-   Par programme, ajoutez le comportement de point de terminaison personnalisé à la propriété <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A> avant l'ouverture de l'hôte de service (dans une application de service) ou de la fabrique de canal (dans une application cliente).  
  
-   Configurez le comportement à l'aide d'un fichier de configuration de l'application. Pour plus d’informations, consultez [ &lt;behaviorExtensions&gt;](~/docs/framework/configure-apps/file-schema/wcf/behaviorextensions.md).  
  
 Pour effectuer la tâche de personnalisation de service à laquelle il est destiné, l’objet <xref:System.ServiceModel.Description.IEndpointBehavior> doit être ajouté à la propriété <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> avant la construction de l’exécution de service, qui se produit lors de l’appel à la méthode <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> sur <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. Pour effectuer une tâche de personnalisation cliente, l'objet <xref:System.ServiceModel.Description.IEndpointBehavior> doit être ajouté à la propriété <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> avant l'appel aux méthodes <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> ou <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> sur <xref:System.ServiceModel.ChannelFactory%601>.  
  
   
  
## Examples  
 L'exemple de code suivant montre l'implémentation d'un comportement de point de terminaison qui ajoute un objet <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> dans une application de service. Dans ce cas, la classe `EndpointBehaviorMessageInspector` implémente <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> pour inspecter le message entrant et sortant, l'interface <xref:System.ServiceModel.Description.IEndpointBehavior> pour insérer la classe Inspector dans le système d'inspection pour tous les points de terminaison auxquels s'applique le comportement et l'<xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> pour activer le comportement d'un inspecteur de message à l'aide d'un fichier de configuration de l'application.  
  
 La première étape consiste à implémenter l'inspecteur de message.  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 L'exemple de code suivant montre l'utilisation de la méthode <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> pour ajouter l'inspecteur de message à la propriété <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 L'exemple de code suivant montre l'implémentation de l'<xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> pour activer l'utilisation du comportement d'un inspecteur de message à partir d'un fichier de configuration.  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 Enfin, le fichier de configuration suivant montre comment l'exemple précédent peut être utilisé à partir de la configuration.  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBindingParameters (endpoint As ServiceEndpoint, bindingParameters As BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iEndpointBehavior.AddBindingParameters (endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="endpoint">Point de terminaison à modifier.</param>
        <param name="bindingParameters">Objets que requièrent les éléments de liaison pour prendre en charge le comportement.</param>
        <summary>Effectuez une implémentation pour passer des données au moment de l’exécution à des liaisons afin de prendre en charge un comportement personnalisé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez la méthode <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> pour fournir aux éléments de liaison des objets supplémentaires qu’ils requièrent pour prendre en charge le comportement de point de terminaison. Lors de l'ajout de paramètres de liaison ici, la liaison peut rechercher ces objets lors de la création de l'écouteur de canal ou de la fabrique de canal. En général, vous implémentez la méthode <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> pour passer des informations relatives au point de terminaison à un élément de liaison personnalisé, afin qu'il puisse correctement construire un canal de prise en charge. Ne retournez aucune valeur si aucune modification n'est requise.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iEndpointBehavior.ApplyClientBehavior (endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="endpoint">Point de terminaison à personnaliser.</param>
        <param name="clientRuntime">Exécution du client à personnaliser.</param>
        <summary>Implémente une modification ou une extension du client sur l’intégralité d’un point de terminaison.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez la méthode <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> pour afficher, modifier ou ajouter une extension personnalisée à l’exécution du client sur l’intégralité des messages utilisés avec un point de terminaison ou pour des opérations spécifiques. Pour plus d'informations sur les personnalisations que vous pouvez effectuer avec un objet d'exécution d'un client, consultez <xref:System.ServiceModel.Dispatcher.ClientRuntime> et <xref:System.ServiceModel.Dispatcher.ClientOperation>.  
  
 Il est recommandé que la méthode <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> lève une <xref:System.NotImplementedException> si le comportement est uniquement destiné à une utilisation dans une application de service.  
  
 Étant donné que d'autres comportements ont peut-être déjà ajouté ou supprimé des opérations de l'exécution, rien ne garantit que le nombre d'opérations dans la description soit similaire à celui des objets <xref:System.ServiceModel.Dispatcher.DispatchOperation> dans la propriété <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::EndpointDispatcher ^ endpointDispatcher);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.EndpointDispatcher -&gt; unit" Usage="iEndpointBehavior.ApplyDispatchBehavior (endpoint, endpointDispatcher)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="endpointDispatcher" Type="System.ServiceModel.Dispatcher.EndpointDispatcher" />
      </Parameters>
      <Docs>
        <param name="endpoint">Point de terminaison qui expose le contrat.</param>
        <param name="endpointDispatcher">Répartiteur de points de terminaison à modifier ou étendre.</param>
        <summary>Implémente une modification ou une extension du service sur l’intégralité du point de terminaison.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez la méthode <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> pour afficher, modifier ou étendre l'exécution de service sur l'intégralité des messages ou pour des opérations spécifiques dans un point de terminaison. Pour plus d'informations sur les personnalisations que vous pouvez effectuer dans une application de service, consultez <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> et <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>.  
  
 Il est recommandé que la méthode <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> lève une exception <xref:System.NotImplementedException> si le comportement est uniquement destiné à une utilisation dans une application cliente.  
  
 Notez que, lors de l'utilisation d'un contrat de rappel, deux opérations peuvent avoir le même nom dans la description (une opération dans chaque direction). Si vous itérez au sein des opérations, vous devez corréler la direction de message entre le point de terminaison <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> et ce qui est retourné par la propriété <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType>.  
  
 De plus, étant donné que d'autres comportements ont peut-être déjà ajouté ou supprimé des opérations de l'exécution, rien ne garantit que le nombre d'opérations dans les descriptions soit similaire à celui des objets <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> dans la propriété <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L'exemple de code suivant montre l'implémentation d'un comportement de point de terminaison qui ajoute un objet <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> dans une application de service. Dans ce cas, la classe `EndpointBehaviorMessageInspector` implémente <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> pour inspecter le message entrant et sortant, l'interface <xref:System.ServiceModel.Description.IEndpointBehavior> pour insérer la classe Inspector dans le système d'inspection pour tous les points de terminaison auxquels s'applique le comportement et l'<xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> pour activer le comportement d'un inspecteur de message à l'aide d'un fichier de configuration de l'application.  
  
 La première étape consiste à implémenter l'inspecteur de message.  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 L'exemple de code suivant montre l'utilisation de la méthode <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> pour ajouter l'inspecteur de message à la propriété <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 L'exemple de code suivant montre l'implémentation de l'<xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> pour activer l'utilisation du comportement d'un inspecteur de message à partir d'un fichier de configuration.  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 Enfin, le fichier de configuration suivant montre comment l'exemple précédent peut être utilisé à partir de la configuration.  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate (endpoint As ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iEndpointBehavior.Validate endpoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">Point de terminaison à valider.</param>
        <summary>Effectuez une implémentation pour confirmer que le point de terminaison répond à certains critères prévus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez la méthode <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> pour examiner la structure et confirmer tous les jeux de critères. Il n'est pas nécessaire d'effectuer toutes les personnalisations dans <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> ou <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> pour utiliser cette méthode. Si la validation du point de terminaison réussit, effectuez un retour ; sinon, levez une exception.  
  
 Par exemple, la méthode <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> permet d’assurer que tous les points de terminaison utilisent une liaison d’entreprise approuvée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>