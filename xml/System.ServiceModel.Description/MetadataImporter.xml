<Type Name="MetadataImporter" FullName="System.ServiceModel.Description.MetadataImporter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d7e50fcef3acfdf5c4c9a71dce5f9dc1f85791b2" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39945079" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MetadataImporter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MetadataImporter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.MetadataImporter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MetadataImporter" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataImporter abstract" />
  <TypeSignature Language="F#" Value="type MetadataImporter = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Importe des métadonnées dans des objets <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez une implémentation de la classe abstraite <xref:System.ServiceModel.Description.MetadataImporter> pour importer des métadonnées de service. Les types qui dérivent de la <xref:System.ServiceModel.Description.MetadataImporter> classe implémenter la prise en charge pour l’importation des formats de métadonnées qui tirent parti de la stratégie de WS-importer logique dans Windows Communication Foundation (WCF).  
  
 Une implémentation <xref:System.ServiceModel.Description.MetadataImporter> recueille les expressions de stratégie attachées aux métadonnées de service dans un objet <xref:System.ServiceModel.Description.PolicyConversionContext?displayProperty=nameWithType>. Le <xref:System.ServiceModel.Description.MetadataImporter> traite ensuite les stratégies dans le cadre de l'importation des métadonnées en appelant les implémentations de l'interface <xref:System.ServiceModel.Description.IPolicyImportExtension?displayProperty=nameWithType> dans la propriété <xref:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions%2A?displayProperty=nameWithType>.  
  
 Vous pouvez ajouter la prise en charge de l'importation de nouvelles assertions de stratégie vers <xref:System.ServiceModel.Description.MetadataImporter> en ajoutant votre propre implémentation de l'interface <xref:System.ServiceModel.Description.IPolicyImportExtension?displayProperty=nameWithType> à la propriété <xref:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions%2A?displayProperty=nameWithType> dans une instance <xref:System.ServiceModel.Description.MetadataImporter>. Vous pouvez également inscrire votre extension d’importation de stratégie dans votre fichier de configuration de l’application.  
  
 Le <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> type est l’implémentation de la <xref:System.ServiceModel.Description.MetadataImporter> inclus avec WCF de classe abstraite. Le type <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> importe des métadonnées WSDL avec les stratégies attachées fournies dans un objet <xref:System.ServiceModel.Description.MetadataSet?displayProperty=nameWithType>.  
  
 Vous pouvez ajouter la prise en charge pour importer des extensions WSDL en implémentant l'interface <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType> et en ajoutant ensuite votre implémentation à la propriété <xref:System.ServiceModel.Description.WsdlImporter.WsdlImportExtensions%2A?displayProperty=nameWithType> sur votre instance <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType>. Le <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> peut également charger des implémentations de l'interface <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType> inscrite dans votre fichier de configuration d'application.  
  
> [!NOTE]
>  Le constructeur <xref:System.ServiceModel.Description.MetadataImporter> étant interne, vous ne pouvez pas dériver à partir de <xref:System.ServiceModel.Description.MetadataImporter> dans cette version.  
  
   
  
## Examples  
 L'exemple suivant indique l'utilisation de la classe dérivée <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> pour importer des métadonnées à l'aide de l'état personnalisé, en vérifiant la propriété <xref:System.ServiceModel.Description.MetadataImporter.Errors%2A>, en compilant les métadonnées importées dans des types managés et en enregistrant le résultat dans un fichier de code.  
  
 [!code-csharp[C_CustomWSDLExtensions#8](~/samples/snippets/csharp/VS_Snippets_CFX/c_customwsdlextensions/cs/client.cs#8)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Errors">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.MetadataConversionError&gt; Errors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.MetadataConversionError&gt; Errors" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.MetadataImporter.Errors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Errors As Collection(Of MetadataConversionError)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::MetadataConversionError ^&gt; ^ Errors { System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::MetadataConversionError ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Errors : System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.MetadataConversionError&gt;" Usage="System.ServiceModel.Description.MetadataImporter.Errors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.MetadataConversionError&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si des erreurs se sont produites lors de l'importation des métadonnées.</summary>
        <value>Collection d'objets <see cref="T:System.ServiceModel.Description.MetadataConversionError" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vérifiez toujours la propriété <xref:System.ServiceModel.Description.MetadataImporter.Errors%2A> après avoir importé des métadonnées et avant d'utiliser les métadonnées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportAllContracts">
      <MemberSignature Language="C#" Value="public abstract System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ContractDescription&gt; ImportAllContracts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.ContractDescription&gt; ImportAllContracts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataImporter.ImportAllContracts" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ImportAllContracts () As Collection(Of ContractDescription)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::ContractDescription ^&gt; ^ ImportAllContracts();" />
      <MemberSignature Language="F#" Value="abstract member ImportAllContracts : unit -&gt; System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ContractDescription&gt;" Usage="metadataImporter.ImportAllContracts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ContractDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, retourne une collection de contrats importés à partir des métadonnées.</summary>
        <returns>Contrats importés à partir des métadonnées.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportAllEndpoints">
      <MemberSignature Language="C#" Value="public abstract System.ServiceModel.Description.ServiceEndpointCollection ImportAllEndpoints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Description.ServiceEndpointCollection ImportAllEndpoints() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.MetadataImporter.ImportAllEndpoints" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ImportAllEndpoints () As ServiceEndpointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::ServiceModel::Description::ServiceEndpointCollection ^ ImportAllEndpoints();" />
      <MemberSignature Language="F#" Value="abstract member ImportAllEndpoints : unit -&gt; System.ServiceModel.Description.ServiceEndpointCollection" Usage="metadataImporter.ImportAllEndpoints " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, retourne tous les points de terminaison dans les métadonnées.</summary>
        <returns>Collection d'objets <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> publiés par un service.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez la méthode <xref:System.ServiceModel.Description.MetadataImporter.ImportAllEndpoints%2A> pour retourner tous les points de terminaison dans les métadonnées importées. Les métadonnées importées en tant que points de terminaison de service ne peuvent pas servir à créer une exécution ou à exporter des métadonnées, car les points de terminaison importés ne contiennent pas d'informations sur les types managés. Pour utiliser les métadonnées afin de créer une exécution de client ou de service ou de générer des métadonnées, vous devez d'abord générer et compiler le code des métadonnées et utiliser ces informations de type pour créer un objet <xref:System.ServiceModel.Description.ContractDescription?displayProperty=nameWithType> à l'aide de <xref:System.ServiceModel.Description.ContractDescription.GetContract%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KnownContracts">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Dictionary&lt;System.Xml.XmlQualifiedName,System.ServiceModel.Description.ContractDescription&gt; KnownContracts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.Dictionary`2&lt;class System.Xml.XmlQualifiedName, class System.ServiceModel.Description.ContractDescription&gt; KnownContracts" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.MetadataImporter.KnownContracts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KnownContracts As Dictionary(Of XmlQualifiedName, ContractDescription)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::Dictionary&lt;System::Xml::XmlQualifiedName ^, System::ServiceModel::Description::ContractDescription ^&gt; ^ KnownContracts { System::Collections::Generic::Dictionary&lt;System::Xml::XmlQualifiedName ^, System::ServiceModel::Description::ContractDescription ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KnownContracts : System.Collections.Generic.Dictionary&lt;System.Xml.XmlQualifiedName, System.ServiceModel.Description.ContractDescription&gt;" Usage="System.ServiceModel.Description.MetadataImporter.KnownContracts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;System.Xml.XmlQualifiedName,System.ServiceModel.Description.ContractDescription&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un dictionnaire de contrats par nom que l'importateur connaît.</summary>
        <value>Dictionnaire de contrats répertoriés par nom complet XML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la propriété <xref:System.ServiceModel.Description.MetadataImporter.KnownContracts%2A> pour ajouter ou supprimer des descriptions de contrat et leurs noms XML associés que l'importateur peut référencer.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PolicyImportExtensions">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.KeyedByTypeCollection&lt;System.ServiceModel.Description.IPolicyImportExtension&gt; PolicyImportExtensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.KeyedByTypeCollection`1&lt;class System.ServiceModel.Description.IPolicyImportExtension&gt; PolicyImportExtensions" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PolicyImportExtensions As KeyedByTypeCollection(Of IPolicyImportExtension)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::KeyedByTypeCollection&lt;System::ServiceModel::Description::IPolicyImportExtension ^&gt; ^ PolicyImportExtensions { System::Collections::Generic::KeyedByTypeCollection&lt;System::ServiceModel::Description::IPolicyImportExtension ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PolicyImportExtensions : System.Collections.Generic.KeyedByTypeCollection&lt;System.ServiceModel.Description.IPolicyImportExtension&gt;" Usage="System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.KeyedByTypeCollection&lt;System.ServiceModel.Description.IPolicyImportExtension&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection d’importateurs de stratégie que l’importateur appelle pour traiter les assertions de stratégie.</summary>
        <value>Collection d'importateurs de stratégie que <see cref="T:System.ServiceModel.Description.MetadataImporter" /> utilise pour traiter les assertions de stratégie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la propriété <xref:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions%2A> pour ajouter ou supprimer des importateurs de stratégie appelés pour traiter les assertions de stratégie dans les métadonnées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Dictionary&lt;object,object&gt; State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.Dictionary`2&lt;object, object&gt; State" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.MetadataImporter.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As Dictionary(Of Object, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::Dictionary&lt;System::Object ^, System::Object ^&gt; ^ State { System::Collections::Generic::Dictionary&lt;System::Object ^, System::Object ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Collections.Generic.Dictionary&lt;obj, obj&gt;" Usage="System.ServiceModel.Description.MetadataImporter.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;System.Object,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une collection d’objets utilisés lors de l’importation de métadonnées.</summary>
        <value>Dictionnaire d'objets répertoriés par type.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la propriété `State` pour ajouter ou supprimer des objets utilisés lors de l'importation de métadonnées.  
  
   
  
## Examples  
 L'exemple suivant indique comment utiliser la propriété <xref:System.ServiceModel.Description.MetadataImporter.State%2A> pour ajouter un <xref:System.Runtime.Serialization.XsdDataContractImporter?displayProperty=nameWithType> personnalisé afin d'importer des structures de données de manière particulière.  
  
 [!code-csharp[C_CustomWSDLExtensions#8](~/samples/snippets/csharp/VS_Snippets_CFX/c_customwsdlextensions/cs/client.cs#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>