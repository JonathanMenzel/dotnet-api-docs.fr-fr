<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b1d40f8a8a99bf05bb613279f96e44d6af30c24b" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39755971" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type MemoryFailPoint = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="2c8db-101">Contrôle que les ressources mémoire sont suffisantes avant d'exécuter une opération.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2c8db-101">Checks for sufficient memory resources before executing an operation.</span>
      </span>
      <span data-ttu-id="2c8db-102">Cette classe ne peut pas être héritée.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2c8db-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="2c8db-103">Cette classe est destinée à être utilisée dans le développement avancé.</span><span class="sxs-lookup"><span data-stu-id="2c8db-103">This class is intended for use in advanced development.</span></span>  
  
 <span data-ttu-id="2c8db-104">Création d’une instance de la <xref:System.Runtime.MemoryFailPoint> classe crée une porte de mémoire.</span><span class="sxs-lookup"><span data-stu-id="2c8db-104">Creating an instance of the <xref:System.Runtime.MemoryFailPoint> class creates a memory gate.</span></span> <span data-ttu-id="2c8db-105">Une memory gate recherche suffisamment de ressources avant de lancer une activité nécessitant une grande quantité de mémoire.</span><span class="sxs-lookup"><span data-stu-id="2c8db-105">A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</span></span> <span data-ttu-id="2c8db-106">Si la vérification entraîne une <xref:System.InsufficientMemoryException> levée d’exception.</span><span class="sxs-lookup"><span data-stu-id="2c8db-106">Failing the check results in an <xref:System.InsufficientMemoryException> exception being thrown.</span></span> <span data-ttu-id="2c8db-107">Cette exception empêche une opération en cours de démarrage et réduit le risque d’échec en raison d’un manque de ressources.</span><span class="sxs-lookup"><span data-stu-id="2c8db-107">This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</span></span> <span data-ttu-id="2c8db-108">Cette permet de diminuer de performances afin d’éviter un <xref:System.OutOfMemoryException> exception et toute altération d’état qui peut-être résulter d’une mauvaise manipulation de l’exception dans des emplacements arbitraires dans votre code.</span><span class="sxs-lookup"><span data-stu-id="2c8db-108">This enables you decrease performance to avoid an <xref:System.OutOfMemoryException> exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2c8db-109">Ce type implémente le <xref:System.IDisposable> interface.</span><span class="sxs-lookup"><span data-stu-id="2c8db-109">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="2c8db-110">Lorsque vous avez fini d’utiliser le type, vous devez supprimer il directement ou indirectement.</span><span class="sxs-lookup"><span data-stu-id="2c8db-110">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="2c8db-111">Pour supprimer le type directement, appelez sa <xref:System.IDisposable.Dispose%2A> méthode dans un `try` / `catch` bloc.</span><span class="sxs-lookup"><span data-stu-id="2c8db-111">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="2c8db-112">Pour supprimer indirectement, utiliser une construction de langage tel que `using` (en c#) ou `Using` (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2c8db-112">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="2c8db-113">Pour plus d’informations, consultez la section « À l’aide un objet qui implémente IDisposable » dans le <xref:System.IDisposable> rubrique de l’interface.</span><span class="sxs-lookup"><span data-stu-id="2c8db-113">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="2c8db-114">En levant un <xref:System.InsufficientMemoryException> exception, une application peut faire la distinction entre une estimation une opération ne sera pas en mesure d’effectuer et une opération partiellement terminée qui a peut-être endommagé l’état de l’application.</span><span class="sxs-lookup"><span data-stu-id="2c8db-114">By throwing an <xref:System.InsufficientMemoryException> exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</span></span> <span data-ttu-id="2c8db-115">Cela permet à une application afin de réduire la fréquence d’une stratégie de hiérarchie pessimiste, laquelle peut requérir une déchargement actuel <xref:System.AppDomain> ou le recyclage du processus.</span><span class="sxs-lookup"><span data-stu-id="2c8db-115">This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current <xref:System.AppDomain> or recycling the process.</span></span>  
  
 <span data-ttu-id="2c8db-116"><xref:System.Runtime.MemoryFailPoint> vérifie si le système d’exploitation sont disponibles dans tous les garbage collection de segments de mémoire suffisamment de mémoire et d’espace d’adressage virtuel consécutifs et qu’il peuvent augmenter la taille du fichier d’échange.</span><span class="sxs-lookup"><span data-stu-id="2c8db-116"><xref:System.Runtime.MemoryFailPoint> checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</span></span>  <span data-ttu-id="2c8db-117"><xref:System.Runtime.MemoryFailPoint> aucune garantie quant à la disponibilité à long terme de la mémoire pendant la durée de vie de la grille, mais les appelants ne doit-elle toujours utilise le <xref:System.Runtime.MemoryFailPoint.Dispose%2A> méthode pour vous assurer que les ressources associées <xref:System.Runtime.MemoryFailPoint> sont libérées.</span><span class="sxs-lookup"><span data-stu-id="2c8db-117"><xref:System.Runtime.MemoryFailPoint> makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method to ensure that resources associated with <xref:System.Runtime.MemoryFailPoint> are released.</span></span>  
  
 <span data-ttu-id="2c8db-118">Pour utiliser une memory gate, vous devez créer un <xref:System.Runtime.MemoryFailPoint> de l’objet et spécifiez le nombre de mégaoctets (Mo) de mémoire que l’opération suivante doit utiliser.</span><span class="sxs-lookup"><span data-stu-id="2c8db-118">To use a memory gate, you must create a <xref:System.Runtime.MemoryFailPoint> object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</span></span> <span data-ttu-id="2c8db-119">Si suffisamment de mémoire n’est pas disponible, un <xref:System.InsufficientMemoryException> exception est levée.</span><span class="sxs-lookup"><span data-stu-id="2c8db-119">If enough memory is not available, an <xref:System.InsufficientMemoryException> exception is thrown.</span></span>  
  
 <span data-ttu-id="2c8db-120">Le paramètre du constructeur doit être un entier positif.</span><span class="sxs-lookup"><span data-stu-id="2c8db-120">The parameter of the constructor must be a positive integer.</span></span> <span data-ttu-id="2c8db-121">Une valeur négative déclenche une <xref:System.ArgumentOutOfRangeException> exception.</span><span class="sxs-lookup"><span data-stu-id="2c8db-121">A negative value raises an <xref:System.ArgumentOutOfRangeException> exception.</span></span>  
  
 <span data-ttu-id="2c8db-122"><xref:System.Runtime.MemoryFailPoint> fonctionne à un niveau de granularité de 16 Mo.</span><span class="sxs-lookup"><span data-stu-id="2c8db-122"><xref:System.Runtime.MemoryFailPoint> operates at a granularity of 16 MB.</span></span> <span data-ttu-id="2c8db-123">Toute valeur inférieure à 16 Mo est assimilées à 16 Mo, et les autres valeurs sont traitées comme la plus grande prochain multiple de 16 Mo.</span><span class="sxs-lookup"><span data-stu-id="2c8db-123">Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c8db-124"><xref:System.Runtime.MemoryFailPoint> permet à une application de ralentir afin d’éviter de manquer de mémoire entraînerait une altération.</span><span class="sxs-lookup"><span data-stu-id="2c8db-124"><xref:System.Runtime.MemoryFailPoint> enables an application to slow itself to avoid running out of memory in a corrupting manner.</span></span>  <span data-ttu-id="2c8db-125">Il doit être utilisé dans une portée lexicale.</span><span class="sxs-lookup"><span data-stu-id="2c8db-125">It should be used within a lexical scope.</span></span>  <span data-ttu-id="2c8db-126">L’exemple suivant lance des threads pour traiter les éléments dans une file d’attente de travail.</span><span class="sxs-lookup"><span data-stu-id="2c8db-126">The following example launches threads to process items in a work queue.</span></span>  <span data-ttu-id="2c8db-127">Avant de lancer chaque thread, les ressources mémoire disponibles sont vérifiées à l’aide de <xref:System.Runtime.MemoryFailPoint>.</span><span class="sxs-lookup"><span data-stu-id="2c8db-127">Before each thread is launched, the available memory resources are checked using <xref:System.Runtime.MemoryFailPoint>.</span></span>  <span data-ttu-id="2c8db-128">Si une exception est levée, la méthode principale attend jusqu'à ce que la mémoire est disponible avant de lancer le prochain thread.</span><span class="sxs-lookup"><span data-stu-id="2c8db-128">If an exception is thrown, the main method waits until memory is available before launching the next thread.</span></span>  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">
      <span data-ttu-id="2c8db-129">pour appeler du code non managé.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2c8db-129">for calling unmanaged code.</span>
      </span>
      <span data-ttu-id="2c8db-130">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2c8db-130">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
      </span>
      <span data-ttu-id="2c8db-131">Action de sécurité : <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span>
      <span class="sxs-lookup">
        <span data-stu-id="2c8db-131">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span>
      </span>
    </permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberSignature Language="F#" Value="new System.Runtime.MemoryFailPoint : int -&gt; System.Runtime.MemoryFailPoint" Usage="new System.Runtime.MemoryFailPoint sizeInMegabytes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes">
          <span data-ttu-id="2c8db-132">Taille de mémoire requise, en mégaoctets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c8db-132">The required memory size, in megabytes.</span>
          </span>
          <span data-ttu-id="2c8db-133">Cette valeur doit être positive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c8db-133">This must be a positive value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c8db-134">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.MemoryFailPoint" />, en spécifiant la quantité de mémoire requise pour réussir une exécution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c8db-134">Initializes a new instance of the <see cref="T:System.Runtime.MemoryFailPoint" /> class, specifying the amount of memory required for successful execution.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c8db-135">La quantité de mémoire utilisée par votre application pour traiter un élément de travail peut être déterminée de manière empirique.</span><span class="sxs-lookup"><span data-stu-id="2c8db-135">The amount of memory used by your application to process a work item can be determined empirically.</span></span>  <span data-ttu-id="2c8db-136">Pour estimer la quantité de mémoire de votre application a besoin pour traiter une demande, envisagez d’utiliser le <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> méthode pour déterminer la quantité de mémoire disponible avant et après l’appel de la méthode qui traite l’élément de travail.</span><span class="sxs-lookup"><span data-stu-id="2c8db-136">To estimate the amount of memory your application needs to process a request, consider using the <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> method to determine the amount of memory available before and after calling the method that processes the work item.</span></span> <span data-ttu-id="2c8db-137">Consultez le <xref:System.Runtime.MemoryFailPoint> classe pour obtenir un exemple de code qui détermine dynamiquement la valeur de la `sizeInMegabytes` paramètre.</span><span class="sxs-lookup"><span data-stu-id="2c8db-137">See the <xref:System.Runtime.MemoryFailPoint> class for a code example that dynamically determines the value for the `sizeInMegabytes` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c8db-138">L’exemple suivant montre comment déterminer la quantité de mémoire, qu'une méthode requiert lors de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="2c8db-138">The following example demonstrates how to determine the amount of memory a method requires when executing.</span></span> <span data-ttu-id="2c8db-139">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Runtime.MemoryFailPoint> classe.</span><span class="sxs-lookup"><span data-stu-id="2c8db-139">This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.</span></span>  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2c8db-140">La taille de mémoire spécifiée est négative.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c8db-140">The specified memory size is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.InsufficientMemoryException">
          <span data-ttu-id="2c8db-141">Mémoire insuffisante pour commencer l’exécution du code protégé par la porte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c8db-141">There is insufficient memory to begin execution of the code protected by the gate.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="2c8db-142">requiert une confiance totale pour l’appelant immédiat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c8db-142">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2c8db-143">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c8db-143">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="memoryFailPoint.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c8db-144">Libère toutes les ressources utilisées par <see cref="T:System.Runtime.MemoryFailPoint" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c8db-144">Releases all resources used by the <see cref="T:System.Runtime.MemoryFailPoint" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c8db-145">Appelez la méthode <xref:System.Runtime.MemoryFailPoint.Dispose%2A> une fois que vous avez terminé d'utiliser <xref:System.Runtime.MemoryFailPoint>.</span><span class="sxs-lookup"><span data-stu-id="2c8db-145">Call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> when you are finished using the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="2c8db-146">La méthode <xref:System.Runtime.MemoryFailPoint.Dispose%2A> rend le <xref:System.Runtime.MemoryFailPoint> inutilisable.</span><span class="sxs-lookup"><span data-stu-id="2c8db-146">The <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method leaves the <xref:System.Runtime.MemoryFailPoint> in an unusable state.</span></span> <span data-ttu-id="2c8db-147">Après avoir appelé <xref:System.Runtime.MemoryFailPoint>, vous devez libérer toutes les références à la <xref:System.Runtime.MemoryFailPoint> pour que le garbage collector puisse récupérer la mémoire qui le <xref:System.Runtime.MemoryFailPoint> occupée.</span><span class="sxs-lookup"><span data-stu-id="2c8db-147">After calling <xref:System.Runtime.MemoryFailPoint>, you must release all references to the <xref:System.Runtime.MemoryFailPoint> so the garbage collector can reclaim the memory that the <xref:System.Runtime.MemoryFailPoint> was occupying.</span></span> <span data-ttu-id="2c8db-148">Pour plus d’informations, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md) et [implémentation d’une méthode Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="2c8db-148">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c8db-149">Appelez toujours <xref:System.Runtime.MemoryFailPoint.Dispose%2A> avant de libérer votre dernière référence à <xref:System.Runtime.MemoryFailPoint>.</span><span class="sxs-lookup"><span data-stu-id="2c8db-149">Always call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> before you release your last reference to the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="2c8db-150">Sinon, les ressources utilisées ne seront pas libérées tant que le garbage collector n'aura pas appelé la méthode <xref:System.Runtime.MemoryFailPoint> de l'objet `Finalize`.</span><span class="sxs-lookup"><span data-stu-id="2c8db-150">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.MemoryFailPoint> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="memoryFailPoint.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c8db-151">Vérifie que les ressources sont libérées et que toute autre opération de nettoyage est effectuée quand le garbage collector récupère l'objet <see cref="T:System.Runtime.MemoryFailPoint" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c8db-151">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Runtime.MemoryFailPoint" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c8db-152">Le garbage collector appelle la <xref:System.Runtime.MemoryFailPoint.Finalize%2A> méthode lorsque l’objet actuel est prêt à être finalisé.</span><span class="sxs-lookup"><span data-stu-id="2c8db-152">The garbage collector calls the <xref:System.Runtime.MemoryFailPoint.Finalize%2A> method when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>