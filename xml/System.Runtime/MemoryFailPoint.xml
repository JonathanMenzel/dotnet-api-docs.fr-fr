<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MemoryFailPoint.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac561e44bc871caa29f826e0555271beb6a45d2de1c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">61e44bc871caa29f826e0555271beb6a45d2de1c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.MemoryFailPoint">
          <source>Checks for sufficient memory resources before executing an operation.</source>
          <target state="translated">Contrôle que les ressources mémoire sont suffisantes avant d'exécuter une opération.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Runtime.MemoryFailPoint">
          <source>This class cannot be inherited.</source>
          <target state="translated">Cette classe ne peut pas être héritée.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This class is intended for use in advanced development.</source>
          <target state="translated">Cette classe est destinée à être utilisée dans le développement avancé.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Creating an instance of the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> class creates a memory gate.</source>
          <target state="translated">Création d’une instance de la <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> classe crée une porte de mémoire.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</source>
          <target state="translated">Une porte de mémoire vérifie les ressources suffisantes avant d’initier une activité nécessitant une grande quantité de mémoire.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Failing the check results in an <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> exception being thrown.</source>
          <target state="translated">Échec de la vérification des résultats dans un <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> levée d’exception.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</source>
          <target state="translated">Cette exception empêche une opération en cours de démarrage et réduit le risque d’échec en raison d’un manque de ressources.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This enables you decrease performance to avoid an <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</source>
          <target state="translated">Ainsi, vous diminuez les performances pour éviter un <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> exception et toute altération d’état qui peut être dû à une gestion incorrecte de l’exception dans des emplacements arbitraires dans votre code.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Ce type implémente le <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Lorsque vous avez fini d’utiliser le type, vous devez la supprimer directement ou indirectement.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Pour supprimer le type directement, vous devez appeler sa <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> méthode dans un <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Pour la supprimer indirectement, utiliser une construction de langage telles que <ph id="ph1">`using`</ph> (en c#) ou <ph id="ph2">`Using`</ph> (en Visual Basic).</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Pour plus d’informations, consultez la section « Utilisant un objet qui implémente IDisposable » dans la <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> rubrique de l’interface.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>By throwing an <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</source>
          <target state="translated">En levant une <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> exception, une application peut faire la distinction entre une opération ne sera pas en mesure d’effectuer une estimation et une opération partiellement terminée qui a peut-être endommagé l’état de l’application.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> or recycling the process.</source>
          <target state="translated">Cela permet à une application afin de réduire la fréquence d’une stratégie de hiérarchie pessimiste, ce qui peut nécessiter le déchargement actuel <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> ou de recyclage du processus.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> vérifie si le système d’exploitation sont disponibles dans tous les garbage collection de segments de mémoire suffisamment de mémoire et espace d’adressage virtuel consécutifs et qu’il peuvent augmenter la taille du fichier d’échange.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> method to ensure that resources associated with <ph id="ph3">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> are released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> aucune garantie en ce qui concerne la disponibilité à long terme de la mémoire pendant la durée de vie de la grille, mais les appelants ne doit-elle toujours utilise le <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> pour s’assurer que les ressources associées <ph id="ph3">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> sont libérés.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>To use a memory gate, you must create a <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</source>
          <target state="translated">Pour utiliser une porte de mémoire, vous devez créer un <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> de l’objet et spécifier le nombre de mégaoctets (Mo) de mémoire que l’opération suivante est supposée utiliser.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>If enough memory is not available, an <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> exception is thrown.</source>
          <target state="translated">Si suffisamment de mémoire n’est pas disponible, un <ph id="ph1">&lt;xref:System.InsufficientMemoryException&gt;</ph> exception est levée.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>The parameter of the constructor must be a positive integer.</source>
          <target state="translated">Le paramètre du constructeur doit être un entier positif.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>A negative value raises an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception.</source>
          <target state="translated">Une valeur négative lève une <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> operates at a granularity of 16 MB.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> fonctionne à un niveau de granularité de 16 Mo.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</source>
          <target state="translated">Toute valeur inférieure à 16 Mo est assimilées à 16 Mo, et les autres valeurs sont traitées comme la plus grande prochain multiple de 16 Mo.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> enables an application to slow itself to avoid running out of memory in a corrupting manner.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> permet à une application de ralentir afin de ne pas manquer de mémoire entraînerait une altération.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>It should be used within a lexical scope.</source>
          <target state="translated">Elle doit être utilisée dans une portée lexicale.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>The following example launches threads to process items in a work queue.</source>
          <target state="translated">L’exemple suivant lance des threads pour traiter les éléments dans une file d’attente de travail.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Before each thread is launched, the available memory resources are checked using <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</source>
          <target state="translated">Avant de lancer chaque thread, les ressources mémoire disponibles sont vérifiées à l’aide de <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>If an exception is thrown, the main method waits until memory is available before launching the next thread.</source>
          <target state="translated">Si une exception est levée, la méthode principale attend jusqu'à ce que la mémoire est disponible avant de lancer le thread suivant.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>for calling unmanaged code.</source>
          <target state="translated">pour appeler du code non managé.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.MemoryFailPoint">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></source>
          <target state="translated">Action de sécurité : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>The required memory size, in megabytes.</source>
          <target state="translated">Taille de mémoire requise, en mégaoctets.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>This must be a positive value.</source>
          <target state="translated">Cette valeur doit être positive.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph> class, specifying the amount of memory required for successful execution.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph>, en spécifiant la quantité de mémoire requise pour réussir une exécution.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>The amount of memory used by your application to process a work item can be determined empirically.</source>
          <target state="translated">La quantité de mémoire utilisée par votre application pour traiter un élément de travail peut être déterminée de manière empirique.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>To estimate the amount of memory your application needs to process a request, consider using the <ph id="ph1">&lt;xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType&gt;</ph> method to determine the amount of memory available before and after calling the method that processes the work item.</source>
          <target state="translated">Pour estimer la quantité de mémoire de votre application doit traiter une demande, envisagez d’utiliser le <ph id="ph1">&lt;xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType&gt;</ph> méthode pour déterminer la quantité de mémoire disponible avant et après l’appel de la méthode qui traite l’élément de travail.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>See the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> class for a code example that dynamically determines the value for the <ph id="ph2">`sizeInMegabytes`</ph> parameter.</source>
          <target state="translated">Consultez le <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> classe pour obtenir un exemple de code qui détermine dynamiquement la valeur pour le <ph id="ph2">`sizeInMegabytes`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>The following example demonstrates how to determine the amount of memory a method requires when executing.</source>
          <target state="translated">L’exemple suivant montre comment déterminer la quantité de mémoire, qu'une méthode exige de lors de l’exécution.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>The specified memory size is negative.</source>
          <target state="translated">La taille de mémoire spécifiée est négative.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>There is insufficient memory to begin execution of the code protected by the gate.</source>
          <target state="translated">Mémoire insuffisante pour commencer l’exécution du code protégé par la porte.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph>.</source>
          <target state="translated">Libère toutes les ressources utilisées par <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>Call <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</source>
          <target state="translated">Appelez la méthode <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> une fois que vous avez terminé d'utiliser <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> method leaves the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> in an unusable state.</source>
          <target state="translated">La méthode <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> rend le <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> inutilisable.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>After calling <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> was occupying.</source>
          <target state="translated">Après avoir appelé <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>, vous devez libérer toutes les références à la <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> pour que le garbage collector puisse récupérer la mémoire qui le <ph id="ph3">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> occupée.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>de nettoyage des ressources non managées<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> et <bpt id="p2">[</bpt>implémentant une méthode de suppression<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>Always call <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</source>
          <target state="translated">Appelez toujours <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</ph> avant de libérer votre dernière référence à <ph id="ph2">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">Sinon, les ressources utilisées ne seront pas libérées tant que le garbage collector n'aura pas appelé la méthode <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint&gt;</ph> de l'objet <ph id="ph2">`Finalize`</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Runtime.MemoryFailPoint.Finalize">
          <source>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph> object.</source>
          <target state="translated">Vérifie que les ressources sont libérées et que toute autre opération de nettoyage est effectuée quand le garbage collector récupère l'objet <ph id="ph1">&lt;see cref="T:System.Runtime.MemoryFailPoint" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.MemoryFailPoint.Finalize">
          <source>The garbage collector calls the <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Finalize%2A&gt;</ph> method when the current object is ready to be finalized.</source>
          <target state="translated">Le garbage collector appelle la <ph id="ph1">&lt;xref:System.Runtime.MemoryFailPoint.Finalize%2A&gt;</ph> méthode lorsque l’objet actuel est prêt à être finalisé.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>