<Type Name="ProfileOptimization" FullName="System.Runtime.ProfileOptimization">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="080972883de9a24a3ad924070590e7903719dc51" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39954802" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ProfileOptimization" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ProfileOptimization extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ProfileOptimization" />
  <TypeSignature Language="VB.NET" Value="Public Class ProfileOptimization" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProfileOptimization abstract sealed" />
  <TypeSignature Language="F#" Value="type ProfileOptimization = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Améliore les performances de démarrage des domaines d'application dans les applications qui requièrent le compilateur juste-à-temps (JIT) lors de la compilation d'arrière-plan des méthodes susceptibles d'être exécutées, en fonction des profils créés lors des compilations précédentes.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Optimisation de profil nécessite un ordinateur multicœur. Les méthodes sont ignorés sur d’autres ordinateurs.  
  
 Chaque fois que vous lancez l’optimisation de profil dans un domaine d’application, le profil a été créé pendant l’utilisation précédente est en lecture. Les informations contenues dans le profil sont utilisés pour guider la compilation d’arrière-plan en identifiant les méthodes qui sont plus susceptibles d’être exécuté lors du démarrage. Sur les ordinateurs multicœurs, cela augmente le risque qu’une méthode est déjà compilés au moment où qu'il est nécessaire pour que le thread principal de l’application n’a pas d’appeler le compilateur JIT.  
  
 Le fichier du profil est remplacé à chaque utilisation, donc il contient toujours les informations les plus récentes sur les méthodes sont utilisées lors du démarrage.  
  
 Profils d’optimisation ne sont pas limitées à démarrage de domaine d’application. Ils peuvent être utilisés pour toute activité qui nécessitera une utilisation intensive du compilateur JIT. Vous pouvez conserver plusieurs profils pour un domaine d’application afin que chaque activité de ce type a son propre profil.  
  
 Pour utiliser des profils de l’optimisation dans un domaine d’application, vous devez appeler la <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> (méthode) et spécifiez le dossier où sont stockés les profils. Le dossier doit déjà exister. Pour commencer à l’aide d’un profil, appelez le <xref:System.Runtime.ProfileOptimization.StartProfile%2A> (méthode) et spécifiez le nom de fichier du profil. Si le fichier n’a pas été enregistré précédemment, il est créé à la première utilisation. Ne subit aucun performances avantage les premiers un profil est créé.  
  
 Optimisation de profil ne modifie pas l’ordre dans lequel les méthodes sont exécutées. Méthodes ne sont pas exécutées sur le thread d’arrière-plan ; Si une méthode est compilée, mais jamais appelée, il est tout simplement pas utilisé. Si un fichier de profil est endommagé ou qu’il ne peut pas être écrits dans le dossier spécifié (par exemple, étant donné que le dossier n’existe pas), l’exécution du programme se poursuit sans optimisation du profilage.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SetProfileRoot">
      <MemberSignature Language="C#" Value="public static void SetProfileRoot (string directoryPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProfileRoot(string directoryPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetProfileRoot (directoryPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetProfileRoot(System::String ^ directoryPath);" />
      <MemberSignature Language="F#" Value="static member SetProfileRoot : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.SetProfileRoot directoryPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directoryPath">Chemin d'accès complet au dossier dans lequel les fichiers de profil sont enregistrés pour le domaine d'application en cours.</param>
        <summary>Active le profilage d'optimisation pour le domaine d'application actif, et définit le dossier dans lequel les fichiers de profils d'optimisation sont enregistrés. Sur les ordinateurs à cœur unique, la méthode est ignorée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous devez appeler cette méthode avant d’appeler le <xref:System.Runtime.ProfileOptimization.StartProfile%2A> méthode pour la première fois dans le domaine d’application actuel. Si vous appelez <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> plusieurs fois dans le même domaine d’application, tous les appels après la première sont ignorées.  
  
 Le dossier spécifié doit déjà exister. Si elle n’existe pas, cette méthode ne crée pas et aucune profilage se produit.  
  
 Sur les ordinateurs qui n’ont pas de plusieurs cœurs, cette méthode est ignorée.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requiert une confiance totale pour l’appelant immédiat. Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</permission>
      </Docs>
    </Member>
    <Member MemberName="StartProfile">
      <MemberSignature Language="C#" Value="public static void StartProfile (string profile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartProfile(string profile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.StartProfile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub StartProfile (profile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void StartProfile(System::String ^ profile);" />
      <MemberSignature Language="F#" Value="static member StartProfile : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.StartProfile profile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="profile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="profile">Nom de fichier du profil à utiliser.</param>
        <summary>Démarre la compilation juste-à-temps (JIT) des méthodes qui ont été précédemment enregistrées dans le fichier de profil spécifié, sur un thread d'arrière-plan. Démarre le processus d'enregistrement de l'utilisation de méthode actuelle, qui remplace ultérieurement le fichier de profil spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le profil spécifié existe dans le dossier spécifié par le <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> méthode, les informations qu’il contient est utilisée pour déterminer l’ordre dans lequel les méthodes sont compilés sur le thread d’arrière-plan. Le <xref:System.Runtime.ProfileOptimization.StartProfile%2A> méthode crée le profil s’il n’existe pas déjà et lance l’enregistrement d’utilisation de la méthode.  
  
 Uniquement les méthodes qui sont appelées réellement sont enregistrées, indépendamment de si elles ont été compilés sur le thread d’arrière-plan ou sur le thread principal de l’application. Une méthode est compilée sur le thread principal de l’application si l’application doit appeler avant le thread d’arrière-plan a compilé.  
  
 Le code qui effectue l’enregistrement effectue le suivi de la vitesse à laquelle les méthodes sont compilées, y compris les méthodes qui sont compilés sur le thread d’arrière-plan et sur le thread principal. Lorsque le taux tombe au-dessous du niveau prédéterminé, l’enregistrement s’arrête. L’enregistrement s’arrête également si le taux de compilation JIT dépasse une limite prédéterminée.  
  
 Si le <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> méthode n’a pas été appelée pour le domaine d’application actuel, ou si l’ordinateur ne dispose pas de plusieurs cœurs, le <xref:System.Runtime.ProfileOptimization.StartProfile%2A> méthode n’a aucun effet.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requiert une confiance totale pour l’appelant immédiat. Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</permission>
      </Docs>
    </Member>
  </Members>
</Type>