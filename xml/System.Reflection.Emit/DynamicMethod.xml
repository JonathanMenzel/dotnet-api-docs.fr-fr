<Type Name="DynamicMethod" FullName="System.Reflection.Emit.DynamicMethod">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1bd4c32b39444d8bae0938e364893b4e9b22d0bd" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52591100" /></Metadata><TypeSignature Language="C#" Value="public sealed class DynamicMethod : System.Reflection.MethodInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DynamicMethod extends System.Reflection.MethodInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.DynamicMethod" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DynamicMethod&#xA;Inherits MethodInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicMethod sealed : System::Reflection::MethodInfo" />
  <TypeSignature Language="F#" Value="type DynamicMethod = class&#xA;    inherit MethodInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MethodInfo</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="737e2-101">Définit et représente une méthode dynamique qui peut être compilée, exécutée et ignorée.</span><span class="sxs-lookup"><span data-stu-id="737e2-101">Defines and represents a dynamic method that can be compiled, executed, and discarded.</span></span> <span data-ttu-id="737e2-102">Les méthodes ignorées sont disponibles pour le garbage collection.</span><span class="sxs-lookup"><span data-stu-id="737e2-102">Discarded methods are available for garbage collection.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-103">Vous pouvez utiliser la <xref:System.Reflection.Emit.DynamicMethod> classe pour générer et exécuter une méthode en cours d’exécution, sans avoir à générer un assembly dynamique et un type dynamique pour contenir la méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-103">You can use the <xref:System.Reflection.Emit.DynamicMethod> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method.</span></span> <span data-ttu-id="737e2-104">Le code exécutable créé par le compilateur juste-à-temps (JIT) est libéré lorsque la <xref:System.Reflection.Emit.DynamicMethod> objet est récupéré.</span><span class="sxs-lookup"><span data-stu-id="737e2-104">The executable code created by the just-in-time (JIT) compiler is reclaimed when the <xref:System.Reflection.Emit.DynamicMethod> object is reclaimed.</span></span> <span data-ttu-id="737e2-105">Les méthodes dynamiques sont le moyen le plus efficace pour générer et exécuter de petites quantités de code.</span><span class="sxs-lookup"><span data-stu-id="737e2-105">Dynamic methods are the most efficient way to generate and execute small amounts of code.</span></span>  
  
 <span data-ttu-id="737e2-106">Une méthode dynamique peut être hébergée anonymement, ou il peut être logiquement associée à un module ou à un type.</span><span class="sxs-lookup"><span data-stu-id="737e2-106">A dynamic method can be anonymously hosted, or it can be logically associated with a module or with a type.</span></span>  
  
-   <span data-ttu-id="737e2-107">Si la méthode dynamique est hébergée anonymement, il se trouve dans un assembly fourni par le système et par conséquent est isolé du reste du code.</span><span class="sxs-lookup"><span data-stu-id="737e2-107">If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code.</span></span> <span data-ttu-id="737e2-108">Par défaut, il n’a pas accès à toutes les données non publics.</span><span class="sxs-lookup"><span data-stu-id="737e2-108">By default, it does not have access to any non-public data.</span></span> <span data-ttu-id="737e2-109">Une méthode dynamique hébergée anonymement peut avoir restreint la possibilité d’ignorer les contrôles de visibilité du compilateur JIT, si elle a été accordée <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="737e2-109">An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="737e2-110">Le niveau de confiance de l’assembly dont les membres non publics sont accessibles par la méthode dynamique doit être égal à, ou un sous-ensemble de niveau de confiance de la pile des appels qui a émis la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-110">The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method.</span></span> <span data-ttu-id="737e2-111">Pour plus d’informations sur les méthodes dynamiques hébergées anonymement, consultez [procédure pas à pas : émission de Code dans les scénarios de confiance partielle](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).</span><span class="sxs-lookup"><span data-stu-id="737e2-111">For more information about anonymously hosted dynamic methods, see [Walkthrough: Emitting Code in Partial Trust Scenarios](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).</span></span>  
  
-   <span data-ttu-id="737e2-112">Si la méthode dynamique est associée à un module que vous spécifiez, la méthode dynamique est effectivement globale pour ce module.</span><span class="sxs-lookup"><span data-stu-id="737e2-112">If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module.</span></span> <span data-ttu-id="737e2-113">Il peut accéder à tous les types dans le module et tous les `internal` (`Friend` en Visual Basic) membres des types.</span><span class="sxs-lookup"><span data-stu-id="737e2-113">It can access all types in the module and all `internal` (`Friend` in Visual Basic) members of the types.</span></span> <span data-ttu-id="737e2-114">Vous pouvez associer un dynamique méthode avec n’importe quel module, indépendamment de si vous avez créé le module, pourvu qu’une demande pour <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> indicateur peut être satisfait par la pile des appels qui contient votre code.</span><span class="sxs-lookup"><span data-stu-id="737e2-114">You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag can be satisfied by the call stack that includes your code.</span></span> <span data-ttu-id="737e2-115">Si le <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> indicateur est inclus dans l’octroi, la méthode dynamique peut ignorer les contrôles de visibilité du compilateur JIT et accéder aux données de tous les types déclarés dans le module ou dans tout autre module de n’importe quel assembly privées.</span><span class="sxs-lookup"><span data-stu-id="737e2-115">If the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="737e2-116">Lorsque vous spécifiez le module auquel une méthode dynamique est associée, ce module ne doit pas être dans l’assembly fourni par le système qui est utilisé pour l’hébergement anonyme.</span><span class="sxs-lookup"><span data-stu-id="737e2-116">When you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.</span></span>  
  
-   <span data-ttu-id="737e2-117">Si la méthode dynamique est associée à un type que vous spécifiez, il a accès à tous les membres du type, quel que soit le niveau d’accès.</span><span class="sxs-lookup"><span data-stu-id="737e2-117">If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level.</span></span> <span data-ttu-id="737e2-118">En outre, les contrôles de visibilité JIT peuvent être ignorées.</span><span class="sxs-lookup"><span data-stu-id="737e2-118">In addition, JIT visibility checks can be skipped.</span></span> <span data-ttu-id="737e2-119">Ainsi, la méthode dynamique l’accès aux données privées d’autres types déclarés dans le même module ou dans tout autre module de n’importe quel assembly.</span><span class="sxs-lookup"><span data-stu-id="737e2-119">This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly.</span></span> <span data-ttu-id="737e2-120">Vous pouvez associer une méthode dynamique à n’importe quel type, mais votre code doit disposer de <xref:System.Security.Permissions.ReflectionPermission> avec à la fois le <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> et <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> indicateurs.</span><span class="sxs-lookup"><span data-stu-id="737e2-120">You can associate a dynamic method with any type, but your code must be granted <xref:System.Security.Permissions.ReflectionPermission> with both the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> and <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flags.</span></span>  
  
 <span data-ttu-id="737e2-121">Le tableau suivant indique les types et membres sont accessibles à une méthode dynamique hébergée de manière anonyme, avec et sans contrôles de visibilité JIT, selon que <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> indicateur est accordé.</span><span class="sxs-lookup"><span data-stu-id="737e2-121">The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag is granted.</span></span>  
  
||<span data-ttu-id="737e2-122">Sans <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span><span class="sxs-lookup"><span data-stu-id="737e2-122">Without <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|<span data-ttu-id="737e2-123">Avec <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span><span class="sxs-lookup"><span data-stu-id="737e2-123">With <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|  
|-|-|-|  
|<span data-ttu-id="737e2-124">Sans ignorer les contrôles de visibilité JIT</span><span class="sxs-lookup"><span data-stu-id="737e2-124">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="737e2-125">Membres publics de types publics dans n’importe quel assembly.</span><span class="sxs-lookup"><span data-stu-id="737e2-125">Public members of public types in any assembly.</span></span>|<span data-ttu-id="737e2-126">Membres publics de types publics dans n’importe quel assembly.</span><span class="sxs-lookup"><span data-stu-id="737e2-126">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="737e2-127">Ignorer le JIT les contrôles de visibilité, avec des restrictions</span><span class="sxs-lookup"><span data-stu-id="737e2-127">Skipping JIT visibility checks, with restrictions</span></span>|<span data-ttu-id="737e2-128">Membres publics de types publics dans n’importe quel assembly.</span><span class="sxs-lookup"><span data-stu-id="737e2-128">Public members of public types in any assembly.</span></span>|<span data-ttu-id="737e2-129">Tous les membres de tous les types, uniquement dans les assemblys dont les niveaux de confiance sont le niveau de confiance de l’assembly qui a émis la méthode dynamique, inférieur ou égal à.</span><span class="sxs-lookup"><span data-stu-id="737e2-129">All members of all types, only in assemblies whose trust levels are equal to or less than the trust level of the assembly that emitted the dynamic method.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="737e2-130">Avant la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], générant le code requis <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="737e2-130">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], emitting code required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="737e2-131">Cette autorisation est incluse par défaut dans le FullTrust et LocalIntranet jeux d’autorisations nommés, mais pas dans l’Internet jeu d’autorisations.</span><span class="sxs-lookup"><span data-stu-id="737e2-131">This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set.</span></span> <span data-ttu-id="737e2-132">Par conséquent, dans les versions antérieures de la [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] une bibliothèque peut être utilisée avec des autorisations Internet uniquement si elle possède le <xref:System.Security.SecurityCriticalAttribute> d’attribut et exécute également une <xref:System.Security.PermissionSet.Assert%2A> pour <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>.</span><span class="sxs-lookup"><span data-stu-id="737e2-132">Therefore, in earlier versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] a library can be used with Internet permissions only if it has the <xref:System.Security.SecurityCriticalAttribute> attribute and also executes an <xref:System.Security.PermissionSet.Assert%2A> for <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>.</span></span> <span data-ttu-id="737e2-133">Ces bibliothèques nécessitent une revue minutieuse de la sécurité, car les erreurs de codage peuvent entraîner des failles de sécurité.</span><span class="sxs-lookup"><span data-stu-id="737e2-133">Such libraries require careful security review because coding errors could result in security holes.</span></span> <span data-ttu-id="737e2-134">Le [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] permet au code d’être émis dans des scénarios de confiance partielle sans émettre de demandes de sécurité, car la génération de code n’est pas fondamentalement une opération nécessitant des privilèges.</span><span class="sxs-lookup"><span data-stu-id="737e2-134">The [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation.</span></span> <span data-ttu-id="737e2-135">Autrement dit, le code généré n'a pas plus d'autorisations que l'assembly qui l'émet.</span><span class="sxs-lookup"><span data-stu-id="737e2-135">That is, the generated code has no more permissions than the assembly that emits it.</span></span> <span data-ttu-id="737e2-136">Ceci permet aux bibliothèques qui émettent du code d'être transparentes de sécurité et supprime la nécessité de déclarer <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, ce qui simplifie l'écriture d'une bibliothèque sécurisée.</span><span class="sxs-lookup"><span data-stu-id="737e2-136">This allows libraries that emit code to be security transparent and removes the need to assert <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, which simplifies the task of writing a secure library.</span></span> <span data-ttu-id="737e2-137">Pour utiliser cette fonctionnalité, votre application doit cibler le [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="737e2-137">To use this feature, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 <span data-ttu-id="737e2-138">Le tableau suivant indique les types et membres sont accessibles à une méthode dynamique qui est associé à un module ou à un type dans un module.</span><span class="sxs-lookup"><span data-stu-id="737e2-138">The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module.</span></span>  
  
||<span data-ttu-id="737e2-139">Associé au module</span><span class="sxs-lookup"><span data-stu-id="737e2-139">Associated with module</span></span>|<span data-ttu-id="737e2-140">Associé au type</span><span class="sxs-lookup"><span data-stu-id="737e2-140">Associated with type</span></span>|  
|-|-|-|  
|<span data-ttu-id="737e2-141">Sans ignorer les contrôles de visibilité JIT</span><span class="sxs-lookup"><span data-stu-id="737e2-141">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="737e2-142">Membres publics et internes de types publics, internes et privés dans le module.</span><span class="sxs-lookup"><span data-stu-id="737e2-142">Public and internal members of public, internal, and private types in the module.</span></span><br /><br /> <span data-ttu-id="737e2-143">Membres publics de types publics dans n’importe quel assembly.</span><span class="sxs-lookup"><span data-stu-id="737e2-143">Public members of public types in any assembly.</span></span>|<span data-ttu-id="737e2-144">Tous les membres du type associé.</span><span class="sxs-lookup"><span data-stu-id="737e2-144">All members of the associated type.</span></span> <span data-ttu-id="737e2-145">Membres publics et internes de tous les autres types dans le module.</span><span class="sxs-lookup"><span data-stu-id="737e2-145">Public and internal members of all the other types in the module.</span></span><br /><br /> <span data-ttu-id="737e2-146">Membres publics de types publics dans n’importe quel assembly.</span><span class="sxs-lookup"><span data-stu-id="737e2-146">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="737e2-147">Contrôles de visibilité JIT est ignorés</span><span class="sxs-lookup"><span data-stu-id="737e2-147">Skipping JIT visibility checks</span></span>|<span data-ttu-id="737e2-148">Tous les membres de tous les types dans un assembly.</span><span class="sxs-lookup"><span data-stu-id="737e2-148">All members of all types in any assembly.</span></span>|<span data-ttu-id="737e2-149">Tous les membres de tous les types dans un assembly.</span><span class="sxs-lookup"><span data-stu-id="737e2-149">All members of all types in any assembly.</span></span>|  
  
 <span data-ttu-id="737e2-150">Une méthode dynamique qui est associée à un module a les autorisations de ce module.</span><span class="sxs-lookup"><span data-stu-id="737e2-150">A dynamic method that is associated with a module has the permissions of that module.</span></span> <span data-ttu-id="737e2-151">Une méthode dynamique qui est associée à un type a les autorisations du module contenant ce type.</span><span class="sxs-lookup"><span data-stu-id="737e2-151">A dynamic method that is associated with a type has the permissions of the module containing that type.</span></span>  
  
 <span data-ttu-id="737e2-152">Méthodes dynamiques et leurs paramètres n’ont pas d’être nommé, mais vous pouvez spécifier des noms pour faciliter le débogage.</span><span class="sxs-lookup"><span data-stu-id="737e2-152">Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging.</span></span> <span data-ttu-id="737e2-153">Attributs personnalisés ne sont pas pris en charge sur les méthodes dynamiques ou leurs paramètres.</span><span class="sxs-lookup"><span data-stu-id="737e2-153">Custom attributes are not supported on dynamic methods or their parameters.</span></span>  
  
 <span data-ttu-id="737e2-154">Bien que les méthodes dynamiques sont `static` méthodes (`Shared` méthodes en Visual Basic), les règles assouplies pour la liaison de délégués introduites dans le [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] autorisent une méthode dynamique doit être lié à un objet, afin qu’il agisse comme une méthode d’instance lorsque appelée à l’aide de cette instance de délégué.</span><span class="sxs-lookup"><span data-stu-id="737e2-154">Although dynamic methods are `static` methods (`Shared` methods in Visual Basic), the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance.</span></span> <span data-ttu-id="737e2-155">Un exemple illustrant cette approche est fourni pour le <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-155">An example that demonstrates this is provided for the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-156">Dans le [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], les méthodes dynamiques ne gèrent pas les informations de symbole, autrement dit, noms de variables locales et le mappage de numéro de ligne.</span><span class="sxs-lookup"><span data-stu-id="737e2-156">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], dynamic methods do not support symbol information, that is, local variable names and line-number mapping.</span></span> <span data-ttu-id="737e2-157">Cette limitation peut être supprimée dans une future version.</span><span class="sxs-lookup"><span data-stu-id="737e2-157">This limitation might be removed in a future version.</span></span> <span data-ttu-id="737e2-158">Vous pouvez utiliser <xref:System.Reflection.Emit.AssemblyBuilder> pendant le développement pour simplifier le débogage du langage intermédiaire Microsoft généré (MSIL), puis basculer sur les méthodes dynamiques pendant le déploiement final, étant donné que le <xref:System.Reflection.Emit.ILGenerator> appels sont les mêmes dans les deux cas.</span><span class="sxs-lookup"><span data-stu-id="737e2-158">You can use <xref:System.Reflection.Emit.AssemblyBuilder> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <xref:System.Reflection.Emit.ILGenerator> calls are the same in both cases.</span></span>  
  
## <a name="verification"></a><span data-ttu-id="737e2-159">Vérification</span><span class="sxs-lookup"><span data-stu-id="737e2-159">Verification</span></span>  
 <span data-ttu-id="737e2-160">La liste suivante résume les conditions sous lesquelles les méthodes dynamiques peuvent contenir du code non vérifiable.</span><span class="sxs-lookup"><span data-stu-id="737e2-160">The following list summarizes the conditions under which dynamic methods can contain unverifiable code.</span></span> <span data-ttu-id="737e2-161">(Par exemple, une méthode dynamique est non vérifiable si son <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> propriété est définie sur `false`.)</span><span class="sxs-lookup"><span data-stu-id="737e2-161">(For example, a dynamic method is unverifiable if its <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property is set to `false`.)</span></span>  
  
-   <span data-ttu-id="737e2-162">Une méthode dynamique qui est associée à un assembly critique de sécurité est également critique de sécurité et pouvez ignorer la vérification.</span><span class="sxs-lookup"><span data-stu-id="737e2-162">A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification.</span></span> <span data-ttu-id="737e2-163">Par exemple, un assembly sans attributs de sécurité qui est exécuté comme une application de bureau est traitée comme critique de sécurité par le runtime.</span><span class="sxs-lookup"><span data-stu-id="737e2-163">For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime.</span></span> <span data-ttu-id="737e2-164">Si vous associez une méthode dynamique à l’assembly, la méthode dynamique peut contenir du code non vérifiable.</span><span class="sxs-lookup"><span data-stu-id="737e2-164">If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.</span></span>  
  
-   <span data-ttu-id="737e2-165">Si une méthode dynamique qui contient du code non vérifiable est associée à un assembly qui a la transparence de niveau 1, le compilateur juste-à-temps (JIT) injecte une demande de sécurité.</span><span class="sxs-lookup"><span data-stu-id="737e2-165">If a dynamic method that contains unverifiable code is associated with an assembly that has level 1 transparency, the just-in-time (JIT) compiler injects a security demand.</span></span> <span data-ttu-id="737e2-166">La demande réussit uniquement si la méthode dynamique est exécutée par le code totalement approuvé.</span><span class="sxs-lookup"><span data-stu-id="737e2-166">The demand succeeds only if the dynamic method is executed by fully trusted code.</span></span> <span data-ttu-id="737e2-167">Consultez [Code Transparent de sécurité, niveau 1](~/docs/framework/misc/security-transparent-code-level-1.md).</span><span class="sxs-lookup"><span data-stu-id="737e2-167">See [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md).</span></span>  
  
-   <span data-ttu-id="737e2-168">Si une méthode dynamique qui contient du code non vérifiable est associée à un assembly qui a la transparence de niveau 2 (tel que mscorlib.dll), elle lève une exception (injectée par le compilateur JIT) au lieu de faire une demande de sécurité.</span><span class="sxs-lookup"><span data-stu-id="737e2-168">If a dynamic method that contains unverifiable code is associated with an assembly that has level 2 transparency (such as mscorlib.dll), it throws an exception (injected by the JIT compiler) instead of making a security demand.</span></span> <span data-ttu-id="737e2-169">Consultez [Code Transparent de sécurité, niveau 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="737e2-169">See [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
-   <span data-ttu-id="737e2-170">Une méthode dynamique hébergée anonymement qui contient du code non vérifiable toujours lève une exception.</span><span class="sxs-lookup"><span data-stu-id="737e2-170">An anonymously hosted dynamic method that contains unverifiable code always throws an exception.</span></span> <span data-ttu-id="737e2-171">Il peut ne jamais ignorer la vérification, même s’il est créé et exécuté par le code totalement approuvé.</span><span class="sxs-lookup"><span data-stu-id="737e2-171">It can never skip verification, even if it is created and executed by fully trusted code.</span></span>  
  
 <span data-ttu-id="737e2-172">L’exception est levée pour du code non vérifiable varie selon la façon dont la méthode dynamique est appelée.</span><span class="sxs-lookup"><span data-stu-id="737e2-172">The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked.</span></span> <span data-ttu-id="737e2-173">Si vous appelez une méthode dynamique à l’aide d’un délégué retourné par la <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> (méthode), un <xref:System.Security.VerificationException> est levée.</span><span class="sxs-lookup"><span data-stu-id="737e2-173">If you invoke a dynamic method by using a delegate returned from the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method, a <xref:System.Security.VerificationException> is thrown.</span></span> <span data-ttu-id="737e2-174">Si vous appelez la méthode dynamique à l’aide de la <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> (méthode), un <xref:System.Reflection.TargetInvocationException> est levée avec une exception interne <xref:System.Security.VerificationException>.</span><span class="sxs-lookup"><span data-stu-id="737e2-174">If you invoke the dynamic method by using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, a <xref:System.Reflection.TargetInvocationException> is thrown with an inner <xref:System.Security.VerificationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="737e2-175">L’exemple de code suivant crée une méthode dynamique qui prend deux paramètres.</span><span class="sxs-lookup"><span data-stu-id="737e2-175">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="737e2-176">L’exemple émet un corps de fonction simple qui imprime le premier paramètre de la console et l’exemple utilise le deuxième paramètre comme valeur de retour de la méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-176">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="737e2-177">L’exemple exécute la méthode en créant un délégué, appelle le délégué avec des paramètres différents et enfin appelle la méthode dynamique à l’aide de la <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="737e2-177">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.All#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.All#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="737e2-178">Guide pratique pour définir et exécuter des méthodes dynamiques</span><span class="sxs-lookup"><span data-stu-id="737e2-178">How to: Define and Execute Dynamic Methods</span></span></related>
    <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="737e2-179">Problèmes de sécurité dans l'émission de réflexion</span><span class="sxs-lookup"><span data-stu-id="737e2-179">Security Issues in Reflection Emit</span></span></related>
    <related type="Article" href="~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md"><span data-ttu-id="737e2-180">Procédure pas à pas : émission de code dans des scénarios de confiance partielle</span><span class="sxs-lookup"><span data-stu-id="737e2-180">Walkthrough: Emitting Code in Partial Trust Scenarios</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="737e2-181">Crée une méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-181">Creates a dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="737e2-182">Nom de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-182">The name of the dynamic method.</span></span> <span data-ttu-id="737e2-183">Il peut s’agir d’une chaîne de longueur nulle, mais pas de <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-183">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="737e2-184">Objet <see cref="T:System.Type" /> qui spécifie le type de retour de la méthode dynamique, ou <see langword="null" /> si la méthode n’a aucun type de retour.</span><span class="sxs-lookup"><span data-stu-id="737e2-184">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="737e2-185">Tableau d’objets <see cref="T:System.Type" /> spécifiant les types des paramètres de la méthode dynamique, ou <see langword="null" /> si la méthode ne possède aucun paramètre.</span><span class="sxs-lookup"><span data-stu-id="737e2-185">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <summary><span data-ttu-id="737e2-186">Initialise une méthode dynamique hébergée de manière anonyme, en spécifiant le nom de la méthode, le type de retour et les types de paramètres.</span><span class="sxs-lookup"><span data-stu-id="737e2-186">Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-187">La méthode dynamique qui est créée par ce constructeur est associée à un assembly anonyme au lieu d’un type existant ou un module.</span><span class="sxs-lookup"><span data-stu-id="737e2-187">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="737e2-188">L’assembly anonyme existe uniquement pour fournir un environnement de bac à sable pour les méthodes dynamiques, autrement dit, pour les isoler du reste du code.</span><span class="sxs-lookup"><span data-stu-id="737e2-188">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="737e2-189">Cet environnement sécurise la méthode dynamique être émis et exécuté par du code partiellement fiable.</span><span class="sxs-lookup"><span data-stu-id="737e2-189">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="737e2-190">Ce constructeur spécifie que juste-à-temps (JIT) les contrôles de visibilité seront appliqués pour le langage intermédiaire Microsoft (MSIL) de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-190">This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method.</span></span> <span data-ttu-id="737e2-191">Autrement dit, le code dans la méthode dynamique a accès aux méthodes publiques des classes publiques.</span><span class="sxs-lookup"><span data-stu-id="737e2-191">That is, the code in the dynamic method has access to public methods of public classes.</span></span> <span data-ttu-id="737e2-192">Les exceptions sont levées si la méthode essaie d’accéder aux types ou membres qui sont `private`, `protected`, ou `internal` (`Friend` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="737e2-192">Exceptions are thrown if the method tries to access types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="737e2-193">Pour créer une méthode dynamique qui a limité la possibilité d’ignorer les contrôles de visibilité JIT, utilisez le <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="737e2-193">To create a dynamic method that has restricted ability to skip JIT visibility checks, use the <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> constructor.</span></span>  
  
 <span data-ttu-id="737e2-194">Lorsqu’une méthode dynamique hébergée anonymement est construite, la pile des appels de l’assembly émetteur est incluse.</span><span class="sxs-lookup"><span data-stu-id="737e2-194">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="737e2-195">Lorsque la méthode est appelée, les autorisations de l’assembly émetteur sont utilisées au lieu des autorisations de l’appelant réel.</span><span class="sxs-lookup"><span data-stu-id="737e2-195">When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="737e2-196">Par conséquent, la méthode dynamique ne peut pas s’exécuter à un niveau de privilège supérieur à celui de l’assembly qui a émis, même s’il est passé à et exécuté par un assembly qui a un niveau de confiance supérieur.</span><span class="sxs-lookup"><span data-stu-id="737e2-196">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="737e2-197">Ce constructeur spécifie les attributs de méthode <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> et <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>et la convention d’appel <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="737e2-197">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-198">Ce constructeur a été introduit dans le [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="737e2-198">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="737e2-199">Un élément de <paramref name="parameterTypes" /> a la valeur <see langword="null" /> ou <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-199">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="737e2-200"><paramref name="name" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-200"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="737e2-201"><paramref name="returnType" /> est un type pour lequel <see cref="P:System.Type.IsByRef" /> retourne <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-201"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="737e2-202">Guide pratique pour définir et exécuter des méthodes dynamiques</span><span class="sxs-lookup"><span data-stu-id="737e2-202">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="737e2-203">Problèmes de sécurité dans l'émission de réflexion</span><span class="sxs-lookup"><span data-stu-id="737e2-203">Security Issues in Reflection Emit</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md"><span data-ttu-id="737e2-204">Procédure pas à pas : émission de code dans des scénarios de confiance partielle</span><span class="sxs-lookup"><span data-stu-id="737e2-204">Walkthrough: Emitting Code in Partial Trust Scenarios</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, bool restrictedSkipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), restrictedSkipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, bool restrictedSkipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, restrictedSkipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="restrictedSkipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="737e2-205">Nom de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-205">The name of the dynamic method.</span></span> <span data-ttu-id="737e2-206">Il peut s’agir d’une chaîne de longueur nulle, mais pas de <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-206">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="737e2-207">Objet <see cref="T:System.Type" /> qui spécifie le type de retour de la méthode dynamique, ou <see langword="null" /> si la méthode n’a aucun type de retour.</span><span class="sxs-lookup"><span data-stu-id="737e2-207">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="737e2-208">Tableau d’objets <see cref="T:System.Type" /> spécifiant les types des paramètres de la méthode dynamique, ou <see langword="null" /> si la méthode ne possède aucun paramètre.</span><span class="sxs-lookup"><span data-stu-id="737e2-208">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="restrictedSkipVisibility"><span data-ttu-id="737e2-209"><see langword="true" /> pour ignorer les contrôles de visibilité juste-à-temps pour les types et membres auxquels accède le langage MSIL de la méthode dynamique, avec cette restriction : le niveau d’approbation des assemblys qui contiennent ces types et membres doit être inférieur ou égal à celui de la pile des appels qui émet la méthode dynamique ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-209"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="737e2-210">Initialise une méthode dynamique hébergée de façon anonyme, en spécifiant le nom de la méthode, le type de retour, les types de paramètre et si les contrôles de visibilité juste-à-temps (JIT) doivent être ignorés pour les types et membres auxquels accède le langage MSIL (Microsoft Intermediate Language) de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-210">Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-211">La méthode dynamique qui est créée par ce constructeur est associée à un assembly anonyme au lieu d’un type existant ou un module.</span><span class="sxs-lookup"><span data-stu-id="737e2-211">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="737e2-212">L’assembly anonyme existe uniquement pour fournir un environnement de bac à sable pour les méthodes dynamiques, autrement dit, pour les isoler du reste du code.</span><span class="sxs-lookup"><span data-stu-id="737e2-212">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="737e2-213">Cet environnement sécurise la méthode dynamique être émis et exécuté par du code partiellement fiable.</span><span class="sxs-lookup"><span data-stu-id="737e2-213">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="737e2-214">Méthodes dynamiques hébergées anonymement n’ont pas automatiquement accès à tous les types ou membres qui sont `private`, `protected`, ou `internal` (`Friend` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="737e2-214">Anonymously hosted dynamic methods do not have automatic access to any types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="737e2-215">Cela diffère des méthodes dynamiques qui sont associés à un type existant ou un module, qui ont accès aux membres masqués dans la portée associée.</span><span class="sxs-lookup"><span data-stu-id="737e2-215">This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope.</span></span>  
  
 <span data-ttu-id="737e2-216">Spécifiez `true` pour `restrictedSkipVisibility` si votre méthode dynamique a accéder aux types ou membres qui sont `private`, `protected`, ou `internal`.</span><span class="sxs-lookup"><span data-stu-id="737e2-216">Specify `true` for `restrictedSkipVisibility` if your dynamic method has to access types or members that are `private`, `protected`, or `internal`.</span></span> <span data-ttu-id="737e2-217">Cela donne l’accès à la méthode dynamique restreint à ces membres.</span><span class="sxs-lookup"><span data-stu-id="737e2-217">This gives the dynamic method restricted access to these members.</span></span> <span data-ttu-id="737e2-218">Autrement dit, les membres accessibles uniquement si les conditions suivantes sont remplies :</span><span class="sxs-lookup"><span data-stu-id="737e2-218">That is, the members can be accessed only if the following conditions are met:</span></span>  
  
-   <span data-ttu-id="737e2-219">Les membres de la cible appartient à un assembly qui a un niveau de confiance égale ou inférieure à la pile des appels qui émet la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-219">The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.</span></span>  
  
-   <span data-ttu-id="737e2-220">La pile des appels qui émet la méthode dynamique est accordée <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="737e2-220">The call stack that emits the dynamic method is granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="737e2-221">Cela est toujours vrai quand le code est exécuté avec une confiance totale.</span><span class="sxs-lookup"><span data-stu-id="737e2-221">This is always true when the code is executed with full trust.</span></span> <span data-ttu-id="737e2-222">Pour du code partiellement fiable, il est vrai uniquement si l’hôte accorde explicitement l’autorisation.</span><span class="sxs-lookup"><span data-stu-id="737e2-222">For partially trusted code, it is true only if the host explicitly grants the permission.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="737e2-223">Si l’autorisation n’a pas été accordée, une exception de sécurité est levée lorsque <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> est appelée ou lorsque la méthode dynamique est appelée, pas lorsque ce constructeur est appelé.</span><span class="sxs-lookup"><span data-stu-id="737e2-223">If the permission has not been granted, a security exception is thrown when <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> is called or when the dynamic method is invoked, not when this constructor is called.</span></span> <span data-ttu-id="737e2-224">Aucune autorisation spéciale n’est requise pour émettre la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-224">No special permissions are required to emit the dynamic method.</span></span>  
  
 <span data-ttu-id="737e2-225">Par exemple, une méthode dynamique qui est créée avec `restrictedSkipVisibility` défini sur `true` peut accéder à un membre privé de tout assembly sur la pile des appels si l’accès membre restreint a été accordée à la pile des appels.</span><span class="sxs-lookup"><span data-stu-id="737e2-225">For example, a dynamic method that is created with `restrictedSkipVisibility` set to `true` can access a private member of any assembly on the call stack if the call stack has been granted restricted member access.</span></span> <span data-ttu-id="737e2-226">Si la méthode dynamique est créée avec du code partiellement fiable sur la pile des appels, il ne peut pas accéder à un membre privé d’un type dans un [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assembly, car ces assemblys sont entièrement fiables.</span><span class="sxs-lookup"><span data-stu-id="737e2-226">If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assembly, because such assemblies are fully trusted.</span></span>  
  
 <span data-ttu-id="737e2-227">Si `restrictedSkipVisibility` est `false`, contrôles de visibilité JIT sont appliqués.</span><span class="sxs-lookup"><span data-stu-id="737e2-227">If `restrictedSkipVisibility` is `false`, JIT visibility checks are enforced.</span></span> <span data-ttu-id="737e2-228">Le code dans la méthode dynamique a accès aux méthodes publiques des classes publiques et les exceptions sont levées si elle tente d’accéder aux types ou membres qui sont `private`, `protected`, ou `internal`.</span><span class="sxs-lookup"><span data-stu-id="737e2-228">The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are `private`, `protected`, or `internal`.</span></span>  
  
 <span data-ttu-id="737e2-229">Lorsqu’une méthode dynamique hébergée anonymement est construite, la pile des appels de l’assembly émetteur est incluse.</span><span class="sxs-lookup"><span data-stu-id="737e2-229">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="737e2-230">Lorsque la méthode est appelée, les autorisations de la pile des appels émettrice sont utilisées au lieu des autorisations de l’appelant réel.</span><span class="sxs-lookup"><span data-stu-id="737e2-230">When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="737e2-231">Par conséquent, la méthode dynamique ne peut pas s’exécuter à un niveau de privilège supérieur à celui de l’assembly qui a émis, même s’il est passé à et exécuté par un assembly qui a un niveau de confiance supérieur.</span><span class="sxs-lookup"><span data-stu-id="737e2-231">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="737e2-232">Ce constructeur spécifie les attributs de méthode <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> et <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>et la convention d’appel <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="737e2-232">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-233">Ce constructeur a été introduit dans le [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="737e2-233">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="737e2-234">Un élément de <paramref name="parameterTypes" /> a la valeur <see langword="null" /> ou <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-234">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="737e2-235"><paramref name="name" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-235"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="737e2-236"><paramref name="returnType" /> est un type pour lequel <see cref="P:System.Type.IsByRef" /> retourne <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-236"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="737e2-237">Guide pratique pour définir et exécuter des méthodes dynamiques</span><span class="sxs-lookup"><span data-stu-id="737e2-237">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="737e2-238">Problèmes de sécurité dans l'émission de réflexion</span><span class="sxs-lookup"><span data-stu-id="737e2-238">Security Issues in Reflection Emit</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md"><span data-ttu-id="737e2-239">Procédure pas à pas : émission de code dans des scénarios de confiance partielle</span><span class="sxs-lookup"><span data-stu-id="737e2-239">Walkthrough: Emitting Code in Partial Trust Scenarios</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * System.Reflection.Module -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, m)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="737e2-240">Nom de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-240">The name of the dynamic method.</span></span> <span data-ttu-id="737e2-241">Il peut s’agir d’une chaîne de longueur nulle, mais pas de <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-241">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="737e2-242">Objet <see cref="T:System.Type" /> qui spécifie le type de retour de la méthode dynamique, ou <see langword="null" /> si la méthode n’a aucun type de retour.</span><span class="sxs-lookup"><span data-stu-id="737e2-242">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="737e2-243">Tableau d’objets <see cref="T:System.Type" /> spécifiant les types des paramètres de la méthode dynamique, ou <see langword="null" /> si la méthode ne possède aucun paramètre.</span><span class="sxs-lookup"><span data-stu-id="737e2-243">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="m"><span data-ttu-id="737e2-244"><see cref="T:System.Reflection.Module" /> représentant le module auquel la méthode dynamique doit être associée de manière logique.</span><span class="sxs-lookup"><span data-stu-id="737e2-244">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span></span></param>
        <summary><span data-ttu-id="737e2-245">Crée une méthode dynamique qui est globale pour un module, en spécifiant le nom de la méthode, le type de retour, les types de paramètres et le module.</span><span class="sxs-lookup"><span data-stu-id="737e2-245">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-246">Ce constructeur spécifie les attributs de méthode <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> et <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, convention d’appel <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>et n’ignore pas les contrôles de visibilité juste-à-temps (JIT).</span><span class="sxs-lookup"><span data-stu-id="737e2-246">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
 <span data-ttu-id="737e2-247">La méthode dynamique créée avec ce constructeur a accès à public et `internal` (`Friend` en Visual Basic) les membres de tous les types contenus dans le module `m`.</span><span class="sxs-lookup"><span data-stu-id="737e2-247">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types contained in module `m`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-248">Pour la compatibilité descendante, ce constructeur demande <xref:System.Security.Permissions.SecurityPermission> avec la <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> indicateur si les conditions suivantes sont toutes deux true : `m` est un module autre que le module appelant et de la demande pour <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> indicateur a échoué.</span><span class="sxs-lookup"><span data-stu-id="737e2-248">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="737e2-249">Si la demande de <xref:System.Security.Permissions.SecurityPermission> réussit, l’opération est autorisée.</span><span class="sxs-lookup"><span data-stu-id="737e2-249">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-250">En commençant par le [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ce membre n’a plus besoin <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="737e2-250">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="737e2-251">(Consultez [des problèmes de sécurité dans la réflexion émission](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Pour utiliser cette fonctionnalité, votre application doit cibler [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="737e2-251">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="737e2-252">L’exemple de code suivant crée une méthode dynamique qui prend deux paramètres.</span><span class="sxs-lookup"><span data-stu-id="737e2-252">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="737e2-253">L’exemple émet un corps de fonction simple qui imprime le premier paramètre de la console et l’exemple utilise le deuxième paramètre comme valeur de retour de la méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-253">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="737e2-254">L’exemple exécute la méthode en créant un délégué, appelle le délégué avec des paramètres différents et enfin appelle la méthode dynamique à l’aide de la <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="737e2-254">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="737e2-255">Un élément de <paramref name="parameterTypes" /> a la valeur <see langword="null" /> ou <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-255">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
<span data-ttu-id="737e2-256">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-256">-or-</span></span> 
 <span data-ttu-id="737e2-257"><paramref name="m" /> est un module qui fournit l’hébergement anonyme pour les méthodes dynamiques.</span><span class="sxs-lookup"><span data-stu-id="737e2-257"><paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="737e2-258"><paramref name="name" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-258"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="737e2-259">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-259">-or-</span></span> 
 <span data-ttu-id="737e2-260"><paramref name="m" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-260"><paramref name="m" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="737e2-261"><paramref name="returnType" /> est un type pour lequel <see cref="P:System.Type.IsByRef" /> retourne <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-261"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="737e2-262">Pour associer la méthode dynamique à un module autre que le module appelant.</span><span class="sxs-lookup"><span data-stu-id="737e2-262">to associate the dynamic method with a module other than the calling module.</span></span> <span data-ttu-id="737e2-263">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-263">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="737e2-264">Guide pratique pour définir et exécuter des méthodes dynamiques</span><span class="sxs-lookup"><span data-stu-id="737e2-264">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="737e2-265">Problèmes de sécurité dans l'émission de réflexion</span><span class="sxs-lookup"><span data-stu-id="737e2-265">Security Issues in Reflection Emit</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * Type -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, owner)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="737e2-266">Nom de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-266">The name of the dynamic method.</span></span> <span data-ttu-id="737e2-267">Il peut s’agir d’une chaîne de longueur nulle, mais pas de <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-267">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="737e2-268">Objet <see cref="T:System.Type" /> qui spécifie le type de retour de la méthode dynamique, ou <see langword="null" /> si la méthode n’a aucun type de retour.</span><span class="sxs-lookup"><span data-stu-id="737e2-268">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="737e2-269">Tableau d’objets <see cref="T:System.Type" /> spécifiant les types des paramètres de la méthode dynamique, ou <see langword="null" /> si la méthode ne possède aucun paramètre.</span><span class="sxs-lookup"><span data-stu-id="737e2-269">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="owner"><span data-ttu-id="737e2-270"><see cref="T:System.Type" /> avec lequel la méthode dynamique est logiquement associée.</span><span class="sxs-lookup"><span data-stu-id="737e2-270">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span></span> <span data-ttu-id="737e2-271">La méthode dynamique a accès à tous les membres du type.</span><span class="sxs-lookup"><span data-stu-id="737e2-271">The dynamic method has access to all members of the type.</span></span></param>
        <summary><span data-ttu-id="737e2-272">Crée une méthode dynamique, en spécifiant le nom de la méthode, le type de retour, les types de paramètres et le type avec lequel la méthode dynamique est logiquement associée.</span><span class="sxs-lookup"><span data-stu-id="737e2-272">Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-273">La méthode dynamique créée avec ce constructeur a accès à tous les membres du type `owner`et public et `internal` (`Friend` en Visual Basic) de tous les autres types dans le module qui contient les membres `owner`.</span><span class="sxs-lookup"><span data-stu-id="737e2-273">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span>  
  
 <span data-ttu-id="737e2-274">Ce constructeur spécifie les attributs de méthode <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> et <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, convention d’appel <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>et n’ignore pas les contrôles de visibilité juste-à-temps (JIT).</span><span class="sxs-lookup"><span data-stu-id="737e2-274">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-275">Pour la compatibilité descendante, ce constructeur demande <xref:System.Security.Permissions.SecurityPermission> avec la <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> indicateur si les conditions suivantes sont toutes deux true : `owner` est dans un module autre que le module appelant et de la demande pour <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> Échec de l’indicateur.</span><span class="sxs-lookup"><span data-stu-id="737e2-275">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="737e2-276">Si la demande de <xref:System.Security.Permissions.SecurityPermission> réussit, l’opération est autorisée.</span><span class="sxs-lookup"><span data-stu-id="737e2-276">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-277">En commençant par le [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ce membre n’a plus besoin <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="737e2-277">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="737e2-278">(Consultez [des problèmes de sécurité dans la réflexion émission](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Pour utiliser cette fonctionnalité, votre application doit cibler [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="737e2-278">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="737e2-279">L’exemple de code suivant crée un <xref:System.Reflection.Emit.DynamicMethod> qui est logiquement associée à un type.</span><span class="sxs-lookup"><span data-stu-id="737e2-279">The following code example creates a <xref:System.Reflection.Emit.DynamicMethod> that is logically associated with a type.</span></span> <span data-ttu-id="737e2-280">Cette association de lui donne accès aux membres privés de ce type.</span><span class="sxs-lookup"><span data-stu-id="737e2-280">This association gives it access to the private members of that type.</span></span>  
  
 <span data-ttu-id="737e2-281">L’exemple de code définit une classe nommée `Example` avec un champ privé, une classe nommée `DerivedFromxample` qui dérive de la première classe, un type délégué nommé `UseLikeStatic` qui retourne <xref:System.Int32> et a des paramètres de type `Example` et <xref:System.Int32>et un type délégué nommé `UseLikeInstance` qui retourne <xref:System.Int32> et a un paramètre de type <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="737e2-281">The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="737e2-282">L’exemple de code crée ensuite un <xref:System.Reflection.Emit.DynamicMethod> qui modifie le champ privé d’une instance de `Example` et retourne la valeur précédente.</span><span class="sxs-lookup"><span data-stu-id="737e2-282">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-283">En règle générale, modifiant les champs internes de classes n’est pas une bonne pratique de programmation orientée objet.</span><span class="sxs-lookup"><span data-stu-id="737e2-283">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="737e2-284">L’exemple de code crée une instance de `Example` , puis crée deux délégués.</span><span class="sxs-lookup"><span data-stu-id="737e2-284">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="737e2-285">Le premier est de type `UseLikeStatic`, qui a les mêmes paramètres que la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-285">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="737e2-286">La seconde est de type `UseLikeInstance`, qui ne possède pas le premier paramètre (de type `Example`).</span><span class="sxs-lookup"><span data-stu-id="737e2-286">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="737e2-287">Ce délégué est créé à l’aide de la <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> surcharge de méthode ; le deuxième paramètre de cette surcharge de méthode est une instance de `Example`, dans ce cas l’instance venez de créer, qui est liée au délégué nouvellement créé.</span><span class="sxs-lookup"><span data-stu-id="737e2-287">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="737e2-288">Chaque fois que ce délégué est appelé, la méthode dynamique agit sur l’instance liée de `Example`.</span><span class="sxs-lookup"><span data-stu-id="737e2-288">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-289">Voici un exemple des règles assouplies pour la liaison de délégués introduites dans le [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], ainsi que de nouvelles surcharges de la <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="737e2-289">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="737e2-290">Pour plus d'informations, consultez la classe <xref:System.Delegate>.</span><span class="sxs-lookup"><span data-stu-id="737e2-290">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="737e2-291">Le `UseLikeStatic` délégué est appelé, en passant l’instance de `Example` qui est lié à la `UseLikeInstance` déléguer.</span><span class="sxs-lookup"><span data-stu-id="737e2-291">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="737e2-292">Le `UseLikeInstance` délégué est appelé, afin que les deux délégués agissent sur la même instance de `Example`.</span><span class="sxs-lookup"><span data-stu-id="737e2-292">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="737e2-293">Les modifications dans les valeurs du champ interne sont affichées après chaque appel.</span><span class="sxs-lookup"><span data-stu-id="737e2-293">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="737e2-294">Enfin, un `UseLikeInstance` délégué est lié à une instance de `DerivedFromxample`, et les appels de délégué sont répétés.</span><span class="sxs-lookup"><span data-stu-id="737e2-294">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="737e2-295">Un élément de <paramref name="parameterTypes" /> a la valeur <see langword="null" /> ou <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-295">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
<span data-ttu-id="737e2-296">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-296">-or-</span></span> 
 <span data-ttu-id="737e2-297"><paramref name="owner" /> est une interface, un tableau, un type générique ouvert ou un paramètre de type d’un type générique ou d’une méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-297"><paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="737e2-298"><paramref name="name" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-298"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="737e2-299">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-299">-or-</span></span> 
 <span data-ttu-id="737e2-300"><paramref name="owner" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-300"><paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="737e2-301"><paramref name="returnType" /> a la valeur <see langword="null" /> ou est un type pour lequel <see cref="P:System.Type.IsByRef" /> renvoie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-301"><paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="737e2-302">Pour associer la méthode dynamique à un type dans un module autre que le module appelant.</span><span class="sxs-lookup"><span data-stu-id="737e2-302">to associate the dynamic method with a type in a module other than the calling module.</span></span> <span data-ttu-id="737e2-303">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-303">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="737e2-304">Guide pratique pour définir et exécuter des méthodes dynamiques</span><span class="sxs-lookup"><span data-stu-id="737e2-304">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="737e2-305">Problèmes de sécurité dans l'émission de réflexion</span><span class="sxs-lookup"><span data-stu-id="737e2-305">Security Issues in Reflection Emit</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * System.Reflection.Module * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, m, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="737e2-306">Nom de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-306">The name of the dynamic method.</span></span> <span data-ttu-id="737e2-307">Il peut s’agir d’une chaîne de longueur nulle, mais pas de <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-307">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="737e2-308">Objet <see cref="T:System.Type" /> qui spécifie le type de retour de la méthode dynamique, ou <see langword="null" /> si la méthode n’a aucun type de retour.</span><span class="sxs-lookup"><span data-stu-id="737e2-308">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="737e2-309">Tableau d’objets <see cref="T:System.Type" /> spécifiant les types des paramètres de la méthode dynamique, ou <see langword="null" /> si la méthode ne possède aucun paramètre.</span><span class="sxs-lookup"><span data-stu-id="737e2-309">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="m"><span data-ttu-id="737e2-310"><see cref="T:System.Reflection.Module" /> représentant le module auquel la méthode dynamique doit être associée de manière logique.</span><span class="sxs-lookup"><span data-stu-id="737e2-310">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span></span></param>
        <param name="skipVisibility"><span data-ttu-id="737e2-311"><see langword="true" /> pour ignorer les contrôles de visibilité JIT sur les types et les membres auxquels a accès le langage MSIL de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-311"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.</span></span></param>
        <summary><span data-ttu-id="737e2-312">Crée une méthode dynamique qui est globale pour un module, en spécifiant le nom de la méthode, le type de retour, les types de paramètre, le module et si les contrôles de visibilité juste-à-temps (JIT) doivent être ignorés pour les types et membres auxquels a accès le langage MSIL (Microsoft Intermediate Language) de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-312">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-313">Ce constructeur spécifie les attributs de méthode <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> et <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>et la convention d’appel <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="737e2-313">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="737e2-314">La méthode dynamique créée avec ce constructeur a accès à public et `internal` (`Friend` en Visual Basic) les membres de tous les types de contenus dans le module `m`.</span><span class="sxs-lookup"><span data-stu-id="737e2-314">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types in contained module `m`.</span></span> <span data-ttu-id="737e2-315">Ignorer la compilation JIT des contrôles de visibilité du compilateur autorise également la méthode dynamique accéder aux membres privés et protégés de tous les autres types.</span><span class="sxs-lookup"><span data-stu-id="737e2-315">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="737e2-316">Cela est utile, par exemple, lors de l’écriture de code pour sérialiser des objets.</span><span class="sxs-lookup"><span data-stu-id="737e2-316">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-317">Pour la compatibilité descendante, ce constructeur demande <xref:System.Security.Permissions.SecurityPermission> avec la <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> indicateur si les conditions suivantes sont toutes deux true : `m` est un module autre que le module appelant et de la demande pour <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> indicateur a échoué.</span><span class="sxs-lookup"><span data-stu-id="737e2-317">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="737e2-318">Si la demande de <xref:System.Security.Permissions.SecurityPermission> réussit, l’opération est autorisée.</span><span class="sxs-lookup"><span data-stu-id="737e2-318">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-319">En commençant par le [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ce membre n’a plus besoin <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="737e2-319">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="737e2-320">(Consultez [des problèmes de sécurité dans la réflexion émission](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Pour utiliser cette fonctionnalité, votre application doit cibler [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="737e2-320">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="737e2-321">Un élément de <paramref name="parameterTypes" /> a la valeur <see langword="null" /> ou <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-321">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
<span data-ttu-id="737e2-322">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-322">-or-</span></span> 
 <span data-ttu-id="737e2-323"><paramref name="m" /> est un module qui fournit l’hébergement anonyme pour les méthodes dynamiques.</span><span class="sxs-lookup"><span data-stu-id="737e2-323"><paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="737e2-324"><paramref name="name" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-324"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="737e2-325">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-325">-or-</span></span> 
 <span data-ttu-id="737e2-326"><paramref name="m" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-326"><paramref name="m" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="737e2-327"><paramref name="returnType" /> est un type pour lequel <see cref="P:System.Type.IsByRef" /> retourne <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-327"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="737e2-328">Pour associer la méthode dynamique à un module autre que le module appelant.</span><span class="sxs-lookup"><span data-stu-id="737e2-328">to associate the dynamic method with a module other than the calling module.</span></span> <span data-ttu-id="737e2-329">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-329">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="737e2-330">Guide pratique pour définir et exécuter des méthodes dynamiques</span><span class="sxs-lookup"><span data-stu-id="737e2-330">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="737e2-331">Problèmes de sécurité dans l'émission de réflexion</span><span class="sxs-lookup"><span data-stu-id="737e2-331">Security Issues in Reflection Emit</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * Type * Type[] * Type * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, returnType, parameterTypes, owner, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="737e2-332">Nom de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-332">The name of the dynamic method.</span></span> <span data-ttu-id="737e2-333">Il peut s’agir d’une chaîne de longueur nulle, mais pas de <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-333">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="737e2-334">Objet <see cref="T:System.Type" /> qui spécifie le type de retour de la méthode dynamique, ou <see langword="null" /> si la méthode n’a aucun type de retour.</span><span class="sxs-lookup"><span data-stu-id="737e2-334">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="737e2-335">Tableau d’objets <see cref="T:System.Type" /> spécifiant les types des paramètres de la méthode dynamique, ou <see langword="null" /> si la méthode ne possède aucun paramètre.</span><span class="sxs-lookup"><span data-stu-id="737e2-335">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="owner"><span data-ttu-id="737e2-336"><see cref="T:System.Type" /> avec lequel la méthode dynamique est logiquement associée.</span><span class="sxs-lookup"><span data-stu-id="737e2-336">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span></span> <span data-ttu-id="737e2-337">La méthode dynamique a accès à tous les membres du type.</span><span class="sxs-lookup"><span data-stu-id="737e2-337">The dynamic method has access to all members of the type.</span></span></param>
        <param name="skipVisibility"><span data-ttu-id="737e2-338"><see langword="true" /> pour ignorer les contrôles de visibilité JIT sur les types et membres auxquels a accès le langage MSIL de la méthode dynamique ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-338"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="737e2-339">Crée une méthode dynamique, en spécifiant le nom de la méthode, le type de retour, les types de paramètre, le type auquel la méthode dynamique est associée logiquement, et si les contrôles de visibilité juste-à-temps (JIT) doivent être ignorés pour les types et membres auxquels accède le langage MSIL (Microsoft Intermediate Language) de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-339">Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-340">La méthode dynamique créée avec ce constructeur a accès à tous les membres du type `owner`et public et `internal` (`Friend` en Visual Basic) de tous les autres types dans le module qui contient les membres `owner`.</span><span class="sxs-lookup"><span data-stu-id="737e2-340">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span> <span data-ttu-id="737e2-341">Ignorer la compilation JIT des contrôles de visibilité du compilateur autorise également la méthode dynamique accéder aux membres privés et protégés de tous les autres types.</span><span class="sxs-lookup"><span data-stu-id="737e2-341">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="737e2-342">Cela est utile, par exemple, lors de l’écriture de code pour sérialiser des objets.</span><span class="sxs-lookup"><span data-stu-id="737e2-342">This is useful, for example, when writing code to serialize objects.</span></span>  
  
 <span data-ttu-id="737e2-343">Ce constructeur spécifie les attributs de méthode <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> et <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>et la convention d’appel <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="737e2-343">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-344">Pour la compatibilité descendante, ce constructeur demande <xref:System.Security.Permissions.SecurityPermission> avec la <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> indicateur si les conditions suivantes sont toutes deux true : `owner` est dans un module autre que le module appelant et de la demande pour <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> Échec de l’indicateur.</span><span class="sxs-lookup"><span data-stu-id="737e2-344">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="737e2-345">Si la demande de <xref:System.Security.Permissions.SecurityPermission> réussit, l’opération est autorisée.</span><span class="sxs-lookup"><span data-stu-id="737e2-345">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-346">En commençant par le [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ce membre n’a plus besoin <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="737e2-346">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="737e2-347">(Consultez [des problèmes de sécurité dans la réflexion émission](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Pour utiliser cette fonctionnalité, votre application doit cibler [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="737e2-347">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="737e2-348">Un élément de <paramref name="parameterTypes" /> a la valeur <see langword="null" /> ou <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-348">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
<span data-ttu-id="737e2-349">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-349">-or-</span></span> 
 <span data-ttu-id="737e2-350"><paramref name="owner" /> est une interface, un tableau, un type générique ouvert ou un paramètre de type d’un type générique ou d’une méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-350"><paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="737e2-351"><paramref name="name" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-351"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="737e2-352">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-352">-or-</span></span> 
 <span data-ttu-id="737e2-353"><paramref name="owner" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-353"><paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="737e2-354"><paramref name="returnType" /> a la valeur <see langword="null" /> ou est un type pour lequel <see cref="P:System.Type.IsByRef" /> renvoie <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-354"><paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="737e2-355">Pour associer la méthode dynamique à un type dans un module autre que le module appelant.</span><span class="sxs-lookup"><span data-stu-id="737e2-355">to associate the dynamic method with a type in a module other than the calling module.</span></span> <span data-ttu-id="737e2-356">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-356">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="737e2-357">Guide pratique pour définir et exécuter des méthodes dynamiques</span><span class="sxs-lookup"><span data-stu-id="737e2-357">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="737e2-358">Problèmes de sécurité dans l'émission de réflexion</span><span class="sxs-lookup"><span data-stu-id="737e2-358">Security Issues in Reflection Emit</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type * Type[] * System.Reflection.Module * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, attributes, callingConvention, returnType, parameterTypes, m, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="737e2-359">Nom de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-359">The name of the dynamic method.</span></span> <span data-ttu-id="737e2-360">Il peut s’agir d’une chaîne de longueur nulle, mais pas d’un <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-360">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="attributes"><span data-ttu-id="737e2-361">Combinaison de bits de valeurs <see cref="T:System.Reflection.MethodAttributes" /> qui spécifie les attributs de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-361">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span></span> <span data-ttu-id="737e2-362">La seule combinaison autorisée est <see cref="F:System.Reflection.MethodAttributes.Public" /> et <see cref="F:System.Reflection.MethodAttributes.Static" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-362">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="737e2-363">Convention d’appel de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-363">The calling convention for the dynamic method.</span></span> <span data-ttu-id="737e2-364">Doit être <see cref="F:System.Reflection.CallingConventions.Standard" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-364">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="737e2-365">Objet <see cref="T:System.Type" /> qui spécifie le type de retour de la méthode dynamique, ou <see langword="null" /> si la méthode n’a aucun type de retour.</span><span class="sxs-lookup"><span data-stu-id="737e2-365">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="737e2-366">Tableau d’objets <see cref="T:System.Type" /> spécifiant les types des paramètres de la méthode dynamique, ou <see langword="null" /> si la méthode ne possède aucun paramètre.</span><span class="sxs-lookup"><span data-stu-id="737e2-366">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="m"><span data-ttu-id="737e2-367"><see cref="T:System.Reflection.Module" /> représentant le module auquel la méthode dynamique doit être associée de manière logique.</span><span class="sxs-lookup"><span data-stu-id="737e2-367">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span></span></param>
        <param name="skipVisibility"><span data-ttu-id="737e2-368"><see langword="true" /> pour ignorer les contrôles de visibilité JIT sur les types et membres auxquels a accès le langage MSIL de la méthode dynamique ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-368"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="737e2-369">Crée une méthode dynamique qui est globale pour un module, en spécifiant le nom de la méthode, les attributs, les conventions d'appel, le type de retour, les types de paramètres, le module et si les contrôles de visibilité juste-à-temps (JIT) doivent être ignorés pour les types et membres auxquels accède le langage Microsoft Intermediate Language (MSIL) de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-369">Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-370">La méthode dynamique créée avec ce constructeur a accès à public et `internal` (`Friend` en Visual Basic) les membres de tous les types publics et internes contenus dans le module `m`.</span><span class="sxs-lookup"><span data-stu-id="737e2-370">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the public and internal types contained in module `m`.</span></span>  
  
 <span data-ttu-id="737e2-371">Ignorer la compilation JIT des contrôles de visibilité du compilateur autorise également la méthode dynamique accéder aux membres privés et protégés de tous les autres types dans le module et dans tous les autres assemblys.</span><span class="sxs-lookup"><span data-stu-id="737e2-371">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well.</span></span> <span data-ttu-id="737e2-372">Cela est utile, par exemple, lors de l’écriture de code pour sérialiser des objets.</span><span class="sxs-lookup"><span data-stu-id="737e2-372">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-373">Pour la compatibilité descendante, ce constructeur demande <xref:System.Security.Permissions.SecurityPermission> avec la <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> indicateur si les conditions suivantes sont toutes deux true : `m` est un module autre que le module appelant et de la demande pour <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> indicateur a échoué.</span><span class="sxs-lookup"><span data-stu-id="737e2-373">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="737e2-374">Si la demande de <xref:System.Security.Permissions.SecurityPermission> réussit, l’opération est autorisée.</span><span class="sxs-lookup"><span data-stu-id="737e2-374">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-375">En commençant par le [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ce membre n’a plus besoin <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="737e2-375">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="737e2-376">(Consultez [des problèmes de sécurité dans la réflexion émission](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Pour utiliser cette fonctionnalité, votre application doit cibler [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="737e2-376">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="737e2-377">Un élément de <paramref name="parameterTypes" /> a la valeur <see langword="null" /> ou <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-377">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
<span data-ttu-id="737e2-378">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-378">-or-</span></span> 
 <span data-ttu-id="737e2-379"><paramref name="m" /> est un module qui fournit l’hébergement anonyme pour les méthodes dynamiques.</span><span class="sxs-lookup"><span data-stu-id="737e2-379"><paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="737e2-380"><paramref name="name" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-380"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="737e2-381">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-381">-or-</span></span> 
 <span data-ttu-id="737e2-382"><paramref name="m" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-382"><paramref name="m" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="737e2-383"><paramref name="attributes" /> est une combinaison d’indicateurs autre que <see cref="F:System.Reflection.MethodAttributes.Public" /> et <see cref="F:System.Reflection.MethodAttributes.Static" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-383"><paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span></span>  
  
<span data-ttu-id="737e2-384">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-384">-or-</span></span> 
 <span data-ttu-id="737e2-385"><paramref name="callingConvention" /> n’est pas un <see cref="F:System.Reflection.CallingConventions.Standard" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-385"><paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span></span>  
  
<span data-ttu-id="737e2-386">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-386">-or-</span></span> 
 <span data-ttu-id="737e2-387"><paramref name="returnType" /> est un type pour lequel <see cref="P:System.Type.IsByRef" /> retourne <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-387"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="737e2-388">Pour associer la méthode dynamique à un module autre que le module appelant.</span><span class="sxs-lookup"><span data-stu-id="737e2-388">to associate the dynamic method with a module other than the calling module.</span></span> <span data-ttu-id="737e2-389">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-389">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="737e2-390">Guide pratique pour définir et exécuter des méthodes dynamiques</span><span class="sxs-lookup"><span data-stu-id="737e2-390">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="737e2-391">Problèmes de sécurité dans l'émission de réflexion</span><span class="sxs-lookup"><span data-stu-id="737e2-391">Security Issues in Reflection Emit</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Emit.DynamicMethod : string * System.Reflection.MethodAttributes * System.Reflection.CallingConventions * Type * Type[] * Type * bool -&gt; System.Reflection.Emit.DynamicMethod" Usage="new System.Reflection.Emit.DynamicMethod (name, attributes, callingConvention, returnType, parameterTypes, owner, skipVisibility)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="737e2-392">Nom de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-392">The name of the dynamic method.</span></span> <span data-ttu-id="737e2-393">Il peut s’agir d’une chaîne de longueur nulle, mais pas d’un <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-393">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="attributes"><span data-ttu-id="737e2-394">Combinaison de bits de valeurs <see cref="T:System.Reflection.MethodAttributes" /> qui spécifie les attributs de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-394">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span></span> <span data-ttu-id="737e2-395">La seule combinaison autorisée est <see cref="F:System.Reflection.MethodAttributes.Public" /> et <see cref="F:System.Reflection.MethodAttributes.Static" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-395">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="737e2-396">Convention d’appel de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-396">The calling convention for the dynamic method.</span></span> <span data-ttu-id="737e2-397">Doit être <see cref="F:System.Reflection.CallingConventions.Standard" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-397">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="737e2-398">Objet <see cref="T:System.Type" /> qui spécifie le type de retour de la méthode dynamique, ou <see langword="null" /> si la méthode n’a aucun type de retour.</span><span class="sxs-lookup"><span data-stu-id="737e2-398">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="737e2-399">Tableau d’objets <see cref="T:System.Type" /> spécifiant les types des paramètres de la méthode dynamique, ou <see langword="null" /> si la méthode ne possède aucun paramètre.</span><span class="sxs-lookup"><span data-stu-id="737e2-399">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="owner"><span data-ttu-id="737e2-400"><see cref="T:System.Type" /> avec lequel la méthode dynamique est logiquement associée.</span><span class="sxs-lookup"><span data-stu-id="737e2-400">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span></span> <span data-ttu-id="737e2-401">La méthode dynamique a accès à tous les membres du type.</span><span class="sxs-lookup"><span data-stu-id="737e2-401">The dynamic method has access to all members of the type.</span></span></param>
        <param name="skipVisibility"><span data-ttu-id="737e2-402"><see langword="true" /> pour ignorer les contrôles de visibilité JIT sur les types et membres auxquels a accès le langage MSIL de la méthode dynamique ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-402"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="737e2-403">Crée une méthode dynamique, en spécifiant le nom de la méthode, les attributs, la convention d’appel, le type de retour, les types de paramètre, le type auquel la méthode dynamique est associée logiquement, et si les contrôles de visibilité juste-à-temps (JIT) doivent être ignorés pour les types et membres auxquels accède le langage MSIL (Microsoft Intermediate Language) de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-403">Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-404">La méthode dynamique est globale pour le module qui contient le type `owner`.</span><span class="sxs-lookup"><span data-stu-id="737e2-404">The dynamic method is global to the module that contains the type `owner`.</span></span> <span data-ttu-id="737e2-405">Il a accès à tous les membres du type `owner`.</span><span class="sxs-lookup"><span data-stu-id="737e2-405">It has access to all members of the type `owner`.</span></span>  
  
 <span data-ttu-id="737e2-406">La méthode dynamique créée avec ce constructeur a accès à tous les membres du type `owner`et public et `internal` (`Friend` en Visual Basic) de tous les types contenus dans le module qui contient les membres `owner`.</span><span class="sxs-lookup"><span data-stu-id="737e2-406">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the types contained in the module that contains `owner`.</span></span> <span data-ttu-id="737e2-407">Ignorer la compilation JIT des contrôles de visibilité du compilateur autorise également la méthode dynamique accéder aux membres privés et protégés de tous les autres types.</span><span class="sxs-lookup"><span data-stu-id="737e2-407">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="737e2-408">Cela est utile, par exemple, lors de l’écriture de code pour sérialiser des objets.</span><span class="sxs-lookup"><span data-stu-id="737e2-408">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-409">Pour la compatibilité descendante, ce constructeur demande <xref:System.Security.Permissions.SecurityPermission> avec la <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> indicateur si les conditions suivantes sont toutes deux true : `owner` est dans un module autre que le module appelant et de la demande pour <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> Échec de l’indicateur.</span><span class="sxs-lookup"><span data-stu-id="737e2-409">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="737e2-410">Si la demande de <xref:System.Security.Permissions.SecurityPermission> réussit, l’opération est autorisée.</span><span class="sxs-lookup"><span data-stu-id="737e2-410">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-411">En commençant par le [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], ce membre n’a plus besoin <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="737e2-411">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="737e2-412">(Consultez [des problèmes de sécurité dans la réflexion émission](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Pour utiliser cette fonctionnalité, votre application doit cibler [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] ou version ultérieure.</span><span class="sxs-lookup"><span data-stu-id="737e2-412">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="737e2-413">Un élément de <paramref name="parameterTypes" /> a la valeur <see langword="null" /> ou <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-413">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
<span data-ttu-id="737e2-414">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-414">-or-</span></span> 
 <span data-ttu-id="737e2-415"><paramref name="owner" /> est une interface, un tableau, un type générique ouvert ou un paramètre de type d’un type générique ou d’une méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-415"><paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="737e2-416"><paramref name="name" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-416"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="737e2-417">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-417">-or-</span></span> 
 <span data-ttu-id="737e2-418"><paramref name="owner" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-418"><paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="737e2-419"><paramref name="attributes" /> est une combinaison d’indicateurs autre que <see cref="F:System.Reflection.MethodAttributes.Public" /> et <see cref="F:System.Reflection.MethodAttributes.Static" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-419"><paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span></span>  
  
<span data-ttu-id="737e2-420">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-420">-or-</span></span> 
 <span data-ttu-id="737e2-421"><paramref name="callingConvention" /> n’est pas un <see cref="F:System.Reflection.CallingConventions.Standard" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-421"><paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span></span>  
  
<span data-ttu-id="737e2-422">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-422">-or-</span></span> 
 <span data-ttu-id="737e2-423"><paramref name="returnType" /> est un type pour lequel <see cref="P:System.Type.IsByRef" /> retourne <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-423"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="737e2-424">Pour associer la méthode dynamique à un type dans un module autre que le module appelant.</span><span class="sxs-lookup"><span data-stu-id="737e2-424">to associate the dynamic method with a type in a module other than the calling module.</span></span> <span data-ttu-id="737e2-425">Énumération associée : <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-425">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="737e2-426">Guide pratique pour définir et exécuter des méthodes dynamiques</span><span class="sxs-lookup"><span data-stu-id="737e2-426">How to: Define and Execute Dynamic Methods</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="737e2-427">Problèmes de sécurité dans l'émission de réflexion</span><span class="sxs-lookup"><span data-stu-id="737e2-427">Security Issues in Reflection Emit</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As MethodAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodAttributes Attributes { System::Reflection::MethodAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.MethodAttributes" Usage="System.Reflection.Emit.DynamicMethod.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="737e2-428">Obtient les attributs qui ont été spécifiés quand la méthode dynamique a été créée.</span><span class="sxs-lookup"><span data-stu-id="737e2-428">Gets the attributes specified when the dynamic method was created.</span></span></summary>
        <value><span data-ttu-id="737e2-429">Combinaison d’opérations de bits des valeurs <see cref="T:System.Reflection.MethodAttributes" /> représentant les attributs de la méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-429">A bitwise combination of the <see cref="T:System.Reflection.MethodAttributes" /> values representing the attributes for the method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-430">Actuellement, les attributs de méthode pour une méthode dynamique sont toujours <xref:System.Reflection.MethodAttributes.Public> et <xref:System.Reflection.MethodAttributes.Static>.</span><span class="sxs-lookup"><span data-stu-id="737e2-430">Currently, the method attributes for a dynamic method are always <xref:System.Reflection.MethodAttributes.Public> and <xref:System.Reflection.MethodAttributes.Static>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="737e2-431">L’exemple de code suivant affiche les attributs de méthode d’une méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-431">The following code example displays the method attributes of a dynamic method.</span></span> <span data-ttu-id="737e2-432">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="737e2-432">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#21](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#21)]
 [!code-csharp[Reflection.DynamicMethod.All#21](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#21)]
 [!code-vb[Reflection.DynamicMethod.All#21](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public override System.Reflection.CallingConventions CallingConvention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.CallingConventions CallingConvention" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CallingConvention As CallingConventions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::CallingConventions CallingConvention { System::Reflection::CallingConventions get(); };" />
      <MemberSignature Language="F#" Value="member this.CallingConvention : System.Reflection.CallingConventions" Usage="System.Reflection.Emit.DynamicMethod.CallingConvention" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="737e2-433">Obtient la convention d’appel qui a été spécifiée quand la méthode dynamique a été créée.</span><span class="sxs-lookup"><span data-stu-id="737e2-433">Gets the calling convention specified when the dynamic method was created.</span></span></summary>
        <value><span data-ttu-id="737e2-434">Une des valeurs de <see cref="T:System.Reflection.CallingConventions" /> qui indique la convention d’appel de la méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-434">One of the <see cref="T:System.Reflection.CallingConventions" /> values that indicates the calling convention of the method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-435">Actuellement, la convention d’appel d’une méthode dynamique est toujours <xref:System.Reflection.CallingConventions.Standard>.</span><span class="sxs-lookup"><span data-stu-id="737e2-435">Currently, the calling convention for a dynamic method is always <xref:System.Reflection.CallingConventions.Standard>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="737e2-436">L’exemple de code suivant affiche la convention d’appel d’une méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-436">The following code example displays the calling convention of a dynamic method.</span></span> <span data-ttu-id="737e2-437">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="737e2-437">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#22](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#22)]
 [!code-csharp[Reflection.DynamicMethod.All#22](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#22)]
 [!code-vb[Reflection.DynamicMethod.All#22](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="737e2-438">Exécute la méthode dynamique et crée un délégué qui peut être utilisé pour l’exécuter.</span><span class="sxs-lookup"><span data-stu-id="737e2-438">Completes the dynamic method and creates a delegate that can be used to execute it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType);" />
      <MemberSignature Language="F#" Value="override this.CreateDelegate : Type -&gt; Delegate" Usage="dynamicMethod.CreateDelegate delegateType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="737e2-439">Type de délégué dont la signature correspond à celle de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-439">A delegate type whose signature matches that of the dynamic method.</span></span></param>
        <summary><span data-ttu-id="737e2-440">Exécute la méthode dynamique et crée un délégué qui peut être utilisé pour l’exécuter.</span><span class="sxs-lookup"><span data-stu-id="737e2-440">Completes the dynamic method and creates a delegate that can be used to execute it.</span></span></summary>
        <returns><span data-ttu-id="737e2-441">Délégué du type spécifié, qui peut être utilisé pour exécuter la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-441">A delegate of the specified type, which can be used to execute the dynamic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-442">Appelant le <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> méthode ou le <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> méthode exécute la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-442">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="737e2-443">Tout davantage de tenter de modifier la méthode dynamique, telles que la modification des définitions de paramètres ou d’émission plus Microsoft intermediate language (MSIL), est ignorée ; aucune exception n’est levée.</span><span class="sxs-lookup"><span data-stu-id="737e2-443">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="737e2-444">Pour créer un corps de méthode pour une méthode dynamique si vous possédez votre propre générateur MSIL, appelez le <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> méthode pour obtenir un <xref:System.Reflection.Emit.DynamicILInfo> objet.</span><span class="sxs-lookup"><span data-stu-id="737e2-444">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="737e2-445">Si vous n’avez pas votre propre générateur MSIL, appelez le <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> méthode pour obtenir un <xref:System.Reflection.Emit.ILGenerator> objet qui peut être utilisé pour générer le corps de méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-445">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="737e2-446">L’exemple de code suivant crée une méthode dynamique qui prend deux paramètres.</span><span class="sxs-lookup"><span data-stu-id="737e2-446">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="737e2-447">L’exemple émet un corps de fonction simple qui imprime le premier paramètre de la console et l’exemple utilise le deuxième paramètre comme valeur de retour de la méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-447">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="737e2-448">L’exemple exécute la méthode en créant un délégué, appelle le délégué avec des paramètres différents et enfin appelle la méthode dynamique à l’aide de la <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="737e2-448">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="737e2-449">La méthode dynamique ne possède aucun corps de méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-449">The dynamic method has no method body.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="737e2-450"><paramref name="delegateType" /> possède un nombre erroné de paramètres ou des types de paramètre incorrects.</span><span class="sxs-lookup"><span data-stu-id="737e2-450"><paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span></span></exception>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="737e2-451">Guide pratique pour définir et exécuter des méthodes dynamiques</span><span class="sxs-lookup"><span data-stu-id="737e2-451">How to: Define and Execute Dynamic Methods</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType, object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type, target As Object) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.CreateDelegate : Type * obj -&gt; Delegate" Usage="dynamicMethod.CreateDelegate (delegateType, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="737e2-452">Type de délégué dont la signature correspond à celle de la méthode dynamique, moins le premier paramètre.</span><span class="sxs-lookup"><span data-stu-id="737e2-452">A delegate type whose signature matches that of the dynamic method, minus the first parameter.</span></span></param>
        <param name="target"><span data-ttu-id="737e2-453">Objet auquel le délégué est lié.</span><span class="sxs-lookup"><span data-stu-id="737e2-453">An object the delegate is bound to.</span></span> <span data-ttu-id="737e2-454">Doit être du même type que le premier paramètre de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-454">Must be of the same type as the first parameter of the dynamic method.</span></span></param>
        <summary><span data-ttu-id="737e2-455">Exécute la méthode dynamique et crée un délégué qui peut être utilisé pour l’exécuter, en spécifiant le type de délégué et un objet auquel le délégué est lié.</span><span class="sxs-lookup"><span data-stu-id="737e2-455">Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.</span></span></summary>
        <returns><span data-ttu-id="737e2-456">Délégué du type spécifié, qui peut être utilisé pour exécuter la méthode dynamique avec l’objet cible spécifié.</span><span class="sxs-lookup"><span data-stu-id="737e2-456">A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-457">Cette surcharge de méthode crée un délégué lié à un objet particulier.</span><span class="sxs-lookup"><span data-stu-id="737e2-457">This method overload creates a delegate bound to a particular object.</span></span> <span data-ttu-id="737e2-458">Un délégué de ce type est dit être fermé sur son premier argument.</span><span class="sxs-lookup"><span data-stu-id="737e2-458">Such a delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="737e2-459">Bien que la méthode est statique, elle agit comme s’il s’agissait d’une méthode d’instance ; l’instance est `target`.</span><span class="sxs-lookup"><span data-stu-id="737e2-459">Although the method is static, it acts as if it were an instance method; the instance is `target`.</span></span>  
  
 <span data-ttu-id="737e2-460">Cette surcharge de méthode nécessite `target` du même type que le premier paramètre de la méthode dynamique, ou être assigné à ce type (par exemple, une classe dérivée).</span><span class="sxs-lookup"><span data-stu-id="737e2-460">This method overload requires `target` to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).</span></span>  <span data-ttu-id="737e2-461">La signature de `delegateType` possède tous les paramètres de la méthode dynamique, sauf le premier.</span><span class="sxs-lookup"><span data-stu-id="737e2-461">The signature of `delegateType` has all the parameters of the dynamic method except the first.</span></span> <span data-ttu-id="737e2-462">Par exemple, si la méthode dynamique possède les paramètres <xref:System.String>, <xref:System.Int32>, et <xref:System.Byte>, puis `delegateType` possède les paramètres <xref:System.Int32> et <xref:System.Byte>; `target` est de type <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="737e2-462">For example, if the dynamic method has the parameters <xref:System.String>, <xref:System.Int32>, and <xref:System.Byte>, then `delegateType` has the parameters <xref:System.Int32> and <xref:System.Byte>; `target` is of type <xref:System.String>.</span></span>  
  
 <span data-ttu-id="737e2-463">Appelant le <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> méthode ou le <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> méthode exécute la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-463">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="737e2-464">Tout davantage de tenter de modifier la méthode dynamique, telles que la modification des définitions de paramètres ou d’émission plus Microsoft intermediate language (MSIL), est ignorée ; aucune exception n’est levée.</span><span class="sxs-lookup"><span data-stu-id="737e2-464">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="737e2-465">Pour créer un corps de méthode pour une méthode dynamique si vous possédez votre propre générateur MSIL, appelez le <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> méthode pour obtenir un <xref:System.Reflection.Emit.DynamicILInfo> objet.</span><span class="sxs-lookup"><span data-stu-id="737e2-465">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="737e2-466">Si vous n’avez pas votre propre générateur MSIL, appelez le <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> méthode pour obtenir un <xref:System.Reflection.Emit.ILGenerator> objet qui peut être utilisé pour générer le corps de méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-466">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="737e2-467">L’exemple de code suivant crée le délégué qui lie un <xref:System.Reflection.Emit.DynamicMethod> à une instance d’un type, afin que la méthode agit sur la même instance chaque fois qu’elle est appelée.</span><span class="sxs-lookup"><span data-stu-id="737e2-467">The following code example creates delegate that binds a <xref:System.Reflection.Emit.DynamicMethod> to an instance of a type, so that the method acts on the same instance each time it is invoked.</span></span>  
  
 <span data-ttu-id="737e2-468">L’exemple de code définit une classe nommée `Example` avec un champ privé, une classe nommée `DerivedFromxample` qui dérive de la première classe, un type délégué nommé `UseLikeStatic` qui retourne <xref:System.Int32> et a des paramètres de type `Example` et <xref:System.Int32>et un type délégué nommé `UseLikeInstance` qui retourne <xref:System.Int32> et a un paramètre de type <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="737e2-468">The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="737e2-469">L’exemple de code crée ensuite un <xref:System.Reflection.Emit.DynamicMethod> qui modifie le champ privé d’une instance de `Example` et retourne la valeur précédente.</span><span class="sxs-lookup"><span data-stu-id="737e2-469">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-470">En règle générale, modifiant les champs internes de classes n’est pas une bonne pratique de programmation orientée objet.</span><span class="sxs-lookup"><span data-stu-id="737e2-470">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="737e2-471">L’exemple de code crée une instance de `Example` , puis crée deux délégués.</span><span class="sxs-lookup"><span data-stu-id="737e2-471">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="737e2-472">Le premier est de type `UseLikeStatic`, qui a les mêmes paramètres que la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-472">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="737e2-473">La seconde est de type `UseLikeInstance`, qui ne possède pas le premier paramètre (de type `Example`).</span><span class="sxs-lookup"><span data-stu-id="737e2-473">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="737e2-474">Ce délégué est créé à l’aide de la <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> surcharge de méthode ; le deuxième paramètre de cette surcharge de méthode est une instance de `Example`, dans ce cas l’instance venez de créer, qui est liée au délégué nouvellement créé.</span><span class="sxs-lookup"><span data-stu-id="737e2-474">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="737e2-475">Chaque fois que ce délégué est appelé, la méthode dynamique agit sur l’instance liée de `Example`.</span><span class="sxs-lookup"><span data-stu-id="737e2-475">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-476">Voici un exemple des règles assouplies pour la liaison de délégués introduites dans le [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], ainsi que de nouvelles surcharges de la <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="737e2-476">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="737e2-477">Pour plus d'informations, consultez la classe <xref:System.Delegate>.</span><span class="sxs-lookup"><span data-stu-id="737e2-477">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="737e2-478">Le `UseLikeStatic` délégué est appelé, en passant l’instance de `Example` qui est lié à la `UseLikeInstance` déléguer.</span><span class="sxs-lookup"><span data-stu-id="737e2-478">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="737e2-479">Le `UseLikeInstance` délégué est appelé, afin que les deux délégués agissent sur la même instance de `Example`.</span><span class="sxs-lookup"><span data-stu-id="737e2-479">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="737e2-480">Les modifications dans les valeurs du champ interne sont affichées après chaque appel.</span><span class="sxs-lookup"><span data-stu-id="737e2-480">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="737e2-481">Enfin, un `UseLikeInstance` délégué est lié à une instance de `DerivedFromxample`, et les appels de délégué sont répétés.</span><span class="sxs-lookup"><span data-stu-id="737e2-481">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="737e2-482">La méthode dynamique ne possède aucun corps de méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-482">The dynamic method has no method body.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="737e2-483"><paramref name="target" /> n’est pas du même type que le premier paramètre de la méthode dynamique et ne peut pas être assigné à ce type.</span><span class="sxs-lookup"><span data-stu-id="737e2-483"><paramref name="target" /> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.</span></span>  
  
<span data-ttu-id="737e2-484">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-484">-or-</span></span> 
 <span data-ttu-id="737e2-485"><paramref name="delegateType" /> possède un nombre erroné de paramètres ou des types de paramètre incorrects.</span><span class="sxs-lookup"><span data-stu-id="737e2-485"><paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Reflection.Emit.DynamicMethod.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="737e2-486">Obtient le type qui déclare la méthode, qui est toujours <see langword="null" /> pour les méthodes dynamiques.</span><span class="sxs-lookup"><span data-stu-id="737e2-486">Gets the type that declares the method, which is always <see langword="null" /> for dynamic methods.</span></span></summary>
        <value><span data-ttu-id="737e2-487">Toujours <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-487">Always <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-488">Cette propriété retourne toujours `null` pour les méthodes dynamiques.</span><span class="sxs-lookup"><span data-stu-id="737e2-488">This property always returns `null` for dynamic methods.</span></span> <span data-ttu-id="737e2-489">Même si une méthode dynamique est logiquement associée à un type, il n’est pas déclaré par le type.</span><span class="sxs-lookup"><span data-stu-id="737e2-489">Even when a dynamic method is logically associated with a type, it is not declared by the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="737e2-490">L’exemple de code suivant affiche le type déclarant d’une méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-490">The following code example displays the declaring type of a dynamic method.</span></span> <span data-ttu-id="737e2-491">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="737e2-491">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#23](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#23)]
 [!code-csharp[Reflection.DynamicMethod.All#23](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#23)]
 [!code-vb[Reflection.DynamicMethod.All#23](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ParameterBuilder DefineParameter(int32 position, valuetype System.Reflection.ParameterAttributes attributes, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineParameter (position As Integer, attributes As ParameterAttributes, parameterName As String) As ParameterBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ParameterBuilder ^ DefineParameter(int position, System::Reflection::ParameterAttributes attributes, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="member this.DefineParameter : int * System.Reflection.ParameterAttributes * string -&gt; System.Reflection.Emit.ParameterBuilder" Usage="dynamicMethod.DefineParameter (position, attributes, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="attributes" Type="System.Reflection.ParameterAttributes" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="position"><span data-ttu-id="737e2-492">Position du paramètre dans la liste des paramètres.</span><span class="sxs-lookup"><span data-stu-id="737e2-492">The position of the parameter in the parameter list.</span></span> <span data-ttu-id="737e2-493">Les paramètres sont indexés en commençant par le numéro 1 pour le premier paramètre.</span><span class="sxs-lookup"><span data-stu-id="737e2-493">Parameters are indexed beginning with the number 1 for the first parameter.</span></span></param>
        <param name="attributes"><span data-ttu-id="737e2-494">Combinaison de bits de valeurs <see cref="T:System.Reflection.ParameterAttributes" /> qui spécifie les attributs du paramètre.</span><span class="sxs-lookup"><span data-stu-id="737e2-494">A bitwise combination of <see cref="T:System.Reflection.ParameterAttributes" /> values that specifies the attributes of the parameter.</span></span></param>
        <param name="parameterName"><span data-ttu-id="737e2-495">Nom du paramètre.</span><span class="sxs-lookup"><span data-stu-id="737e2-495">The name of the parameter.</span></span> <span data-ttu-id="737e2-496">Le nom peut être une chaîne de longueur égale à zéro.</span><span class="sxs-lookup"><span data-stu-id="737e2-496">The name can be a zero-length string.</span></span></param>
        <summary><span data-ttu-id="737e2-497">Définit un paramètre de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-497">Defines a parameter of the dynamic method.</span></span></summary>
        <returns><span data-ttu-id="737e2-498">Retourne toujours <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-498">Always returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-499">Si `position` est 0, le <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> méthode fait référence à la valeur de retour.</span><span class="sxs-lookup"><span data-stu-id="737e2-499">If `position` is 0, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method refers to the return value.</span></span> <span data-ttu-id="737e2-500">Définition des informations de paramètre n’a aucun effet sur la valeur de retour.</span><span class="sxs-lookup"><span data-stu-id="737e2-500">Setting parameter information has no effect on the return value.</span></span>  
  
 <span data-ttu-id="737e2-501">Si la méthode dynamique a déjà été exécutée en appelant le <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> ou <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> (méthode), le <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> méthode n’a aucun effet.</span><span class="sxs-lookup"><span data-stu-id="737e2-501">If the dynamic method has already been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method has no effect.</span></span> <span data-ttu-id="737e2-502">Aucune exception n'est levée.</span><span class="sxs-lookup"><span data-stu-id="737e2-502">No exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="737e2-503">L’exemple de code suivant montre comment définir les informations de paramètre pour une méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-503">The following code example shows how to define parameter information for a dynamic method.</span></span> <span data-ttu-id="737e2-504">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="737e2-504">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#33](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#33)]
 [!code-csharp[Reflection.DynamicMethod.All#33](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#33)]
 [!code-vb[Reflection.DynamicMethod.All#33](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="737e2-505">La méthode n'a pas de paramètre.</span><span class="sxs-lookup"><span data-stu-id="737e2-505">The method has no parameters.</span></span>  
  
<span data-ttu-id="737e2-506">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-506">-or-</span></span> 
 <span data-ttu-id="737e2-507"><paramref name="position" /> est inférieur à 0.</span><span class="sxs-lookup"><span data-stu-id="737e2-507"><paramref name="position" /> is less than 0.</span></span>  
  
<span data-ttu-id="737e2-508">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-508">-or-</span></span> 
 <span data-ttu-id="737e2-509"><paramref name="position" /> est supérieur au nombre de paramètres de la méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-509"><paramref name="position" /> is greater than the number of the method's parameters.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetBaseDefinition">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetBaseDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetBaseDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBaseDefinition () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ GetBaseDefinition();" />
      <MemberSignature Language="F#" Value="override this.GetBaseDefinition : unit -&gt; System.Reflection.MethodInfo" Usage="dynamicMethod.GetBaseDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="737e2-510">Retourne l’implémentation de base pour la méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-510">Returns the base implementation for the method.</span></span></summary>
        <returns><span data-ttu-id="737e2-511">Implémentation de base de la méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-511">The base implementation of the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-512">Cette méthode retourne toujours en cours `DynamicMethod` objet.</span><span class="sxs-lookup"><span data-stu-id="737e2-512">This method always returns the current `DynamicMethod` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="737e2-513">Retourne les attributs personnalisés appliqués à la méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-513">Returns the custom attributes applied to the method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : bool -&gt; obj[]" Usage="dynamicMethod.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit"><span data-ttu-id="737e2-514"><see langword="true" /> pour explorer la chaîne d’héritage de la méthode et rechercher les attributs personnalisés ; <see langword="false" /> pour vérifier uniquement la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="737e2-514"><see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span></span></param>
        <summary><span data-ttu-id="737e2-515">Retourne tous les attributs personnalisés définis pour cette méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-515">Returns all the custom attributes defined for the method.</span></span></summary>
        <returns><span data-ttu-id="737e2-516">Tableau d’objets représentant tous les attributs personnalisés de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-516">An array of objects representing all the custom attributes of the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-517">Pour les méthodes dynamiques, en spécifiant `true` pour `inherit` n’a aucun effet, car la méthode n’est pas déclarée dans un type.</span><span class="sxs-lookup"><span data-stu-id="737e2-517">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-518">Attributs personnalisés ne sont pas actuellement pris en charge sur les méthodes dynamiques.</span><span class="sxs-lookup"><span data-stu-id="737e2-518">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="737e2-519">Le seul attribut retourné est <xref:System.Runtime.CompilerServices.MethodImplAttribute>; vous pouvez obtenir la méthode indicateurs d’implémentation plus facilement en utilisant le <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="737e2-519">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : Type * bool -&gt; obj[]" Usage="dynamicMethod.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="737e2-520"><see cref="T:System.Type" /> représentant le type d’attribut personnalisé à retourner.</span><span class="sxs-lookup"><span data-stu-id="737e2-520">A <see cref="T:System.Type" /> representing the type of custom attribute to return.</span></span></param>
        <param name="inherit"><span data-ttu-id="737e2-521"><see langword="true" /> pour explorer la chaîne d’héritage de la méthode et rechercher les attributs personnalisés ; <see langword="false" /> pour vérifier uniquement la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="737e2-521"><see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span></span></param>
        <summary><span data-ttu-id="737e2-522">Retourne les attributs personnalisés du type spécifié qui ont été appliqués à la méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-522">Returns the custom attributes of the specified type that have been applied to the method.</span></span></summary>
        <returns><span data-ttu-id="737e2-523">Tableau d’objets représentant les attributs de la méthode qui sont de type <paramref name="attributeType" /> ou qui sont dérivés du type <paramref name="attributeType" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-523">An array of objects representing the attributes of the method that are of type <paramref name="attributeType" /> or derive from type <paramref name="attributeType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-524">Pour les méthodes dynamiques, en spécifiant `true` pour `inherit` n’a aucun effet, car la méthode n’est pas déclarée dans un type.</span><span class="sxs-lookup"><span data-stu-id="737e2-524">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-525">Attributs personnalisés ne sont pas actuellement pris en charge sur les méthodes dynamiques.</span><span class="sxs-lookup"><span data-stu-id="737e2-525">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="737e2-526">Le seul attribut retourné est <xref:System.Runtime.CompilerServices.MethodImplAttribute>; vous pouvez obtenir la méthode indicateurs d’implémentation plus facilement en utilisant le <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="737e2-526">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="737e2-527"><paramref name="attributeType" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-527"><paramref name="attributeType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetDynamicILInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.DynamicILInfo GetDynamicILInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.DynamicILInfo GetDynamicILInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDynamicILInfo () As DynamicILInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::DynamicILInfo ^ GetDynamicILInfo();" />
      <MemberSignature Language="F#" Value="member this.GetDynamicILInfo : unit -&gt; System.Reflection.Emit.DynamicILInfo" Usage="dynamicMethod.GetDynamicILInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.DynamicILInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="737e2-528">Retourne un objet <see cref="T:System.Reflection.Emit.DynamicILInfo" /> qui peut être utilisé pour générer un corps de méthode à partir de jetons de métadonnées, de portées et de flux MSIL (Microsoft Intermediate Language).</span><span class="sxs-lookup"><span data-stu-id="737e2-528">Returns a <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.</span></span></summary>
        <returns><span data-ttu-id="737e2-529">Objet <see cref="T:System.Reflection.Emit.DynamicILInfo" /> qui peut être utilisé pour générer un corps de méthode à partir de jetons de métadonnées, de portées et de flux MSIL.</span><span class="sxs-lookup"><span data-stu-id="737e2-529">A <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-530">Le <xref:System.Reflection.Emit.DynamicILInfo> classe est fournie pour prendre en charge la génération de code non managé.</span><span class="sxs-lookup"><span data-stu-id="737e2-530">The <xref:System.Reflection.Emit.DynamicILInfo> class is provided to support unmanaged code generation.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="737e2-531">Pour exécuter du code non managé.</span><span class="sxs-lookup"><span data-stu-id="737e2-531">to execute unmanaged code.</span></span> <span data-ttu-id="737e2-532">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-532">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <altmember cref="T:System.Reflection.Emit.DynamicILInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetILGenerator">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="737e2-533">Retourne un générateur MSIL qui peut être utilisé pour émettre un corps pour la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-533">Returns an MSIL generator that can be used to emit a body for the dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator () As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator();" />
      <MemberSignature Language="F#" Value="member this.GetILGenerator : unit -&gt; System.Reflection.Emit.ILGenerator" Usage="dynamicMethod.GetILGenerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="737e2-534">Retourne un générateur de langage MSIL (Microsoft Intermediate Language) pour la méthode avec une taille de flux MSIL par défaut de 64 bits.</span><span class="sxs-lookup"><span data-stu-id="737e2-534">Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.</span></span></summary>
        <returns><span data-ttu-id="737e2-535">Objet <see cref="T:System.Reflection.Emit.ILGenerator" /> pour la méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-535">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-536">Une fois une méthode dynamique terminée, en appelant le <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> ou <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> (méthode), toute tentative supplémentaire ajouter le code MSIL est ignorée.</span><span class="sxs-lookup"><span data-stu-id="737e2-536">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="737e2-537">Aucune exception n'est levée.</span><span class="sxs-lookup"><span data-stu-id="737e2-537">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-538">Il existe des restrictions sur du code non vérifiable dans les méthodes dynamiques, même dans certains scénarios de confiance totale.</span><span class="sxs-lookup"><span data-stu-id="737e2-538">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="737e2-539">Consultez la section « Vérification » dans la section Notes pour <xref:System.Reflection.Emit.DynamicMethod>.</span><span class="sxs-lookup"><span data-stu-id="737e2-539">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="737e2-540">L’exemple de code suivant crée une méthode dynamique qui prend deux paramètres.</span><span class="sxs-lookup"><span data-stu-id="737e2-540">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="737e2-541">L’exemple émet un corps de fonction simple qui imprime le premier paramètre de la console et l’exemple utilise le deuxième paramètre comme valeur de retour de la méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-541">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="737e2-542">L’exemple exécute la méthode en créant un délégué, appelle le délégué avec des paramètres différents et enfin appelle la méthode dynamique à l’aide de la <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="737e2-542">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="737e2-543">Guide pratique pour définir et exécuter des méthodes dynamiques</span><span class="sxs-lookup"><span data-stu-id="737e2-543">How to: Define and Execute Dynamic Methods</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator (int streamSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator(int32 streamSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator (streamSize As Integer) As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator(int streamSize);" />
      <MemberSignature Language="F#" Value="member this.GetILGenerator : int -&gt; System.Reflection.Emit.ILGenerator" Usage="dynamicMethod.GetILGenerator streamSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="streamSize"><span data-ttu-id="737e2-544">Taille du flux MSIL, en octets.</span><span class="sxs-lookup"><span data-stu-id="737e2-544">The size of the MSIL stream, in bytes.</span></span></param>
        <summary><span data-ttu-id="737e2-545">Retourne un générateur de langage MSIL (Microsoft Intermediate Language) pour la méthode avec la taille de flux MSIL spécifiée.</span><span class="sxs-lookup"><span data-stu-id="737e2-545">Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.</span></span></summary>
        <returns><span data-ttu-id="737e2-546">Objet <see cref="T:System.Reflection.Emit.ILGenerator" /> pour la méthode avec la taille de flux MSIL spécifiée.</span><span class="sxs-lookup"><span data-stu-id="737e2-546">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method, with the specified MSIL stream size.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-547">Une fois une méthode dynamique terminée, en appelant le <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> ou <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> (méthode), toute tentative supplémentaire ajouter le code MSIL est ignorée.</span><span class="sxs-lookup"><span data-stu-id="737e2-547">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="737e2-548">Aucune exception n'est levée.</span><span class="sxs-lookup"><span data-stu-id="737e2-548">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-549">Il existe des restrictions sur du code non vérifiable dans les méthodes dynamiques, même dans certains scénarios de confiance totale.</span><span class="sxs-lookup"><span data-stu-id="737e2-549">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="737e2-550">Consultez la section « Vérification » dans la section Notes pour <xref:System.Reflection.Emit.DynamicMethod>.</span><span class="sxs-lookup"><span data-stu-id="737e2-550">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="737e2-551">L’exemple de code suivant illustre cette surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-551">The following code example demonstrates this method overload.</span></span> <span data-ttu-id="737e2-552">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="737e2-552">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#2](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#2)]
 [!code-csharp[Reflection.DynamicMethod.All#2](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#2)]
 [!code-vb[Reflection.DynamicMethod.All#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods.md"><span data-ttu-id="737e2-553">Guide pratique pour définir et exécuter des méthodes dynamiques</span><span class="sxs-lookup"><span data-stu-id="737e2-553">How to: Define and Execute Dynamic Methods</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethodImplementationFlags () As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodImplAttributes GetMethodImplementationFlags();" />
      <MemberSignature Language="F#" Value="override this.GetMethodImplementationFlags : unit -&gt; System.Reflection.MethodImplAttributes" Usage="dynamicMethod.GetMethodImplementationFlags " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="737e2-554">Retourne les indicateurs d’implémentation pour la méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-554">Returns the implementation flags for the method.</span></span></summary>
        <returns><span data-ttu-id="737e2-555">Combinaison d’opérations de bits des valeurs <see cref="T:System.Reflection.MethodImplAttributes" /> représentant les indicateurs d’implémentation de la méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-555">A bitwise combination of <see cref="T:System.Reflection.MethodImplAttributes" /> values representing the implementation flags for the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-556">Actuellement, les attributs d’implémentation de méthode pour les méthodes dynamiques sont toujours <xref:System.Reflection.MethodImplAttributes.IL> et <xref:System.Reflection.MethodImplAttributes.NoInlining>.</span><span class="sxs-lookup"><span data-stu-id="737e2-556">Currently, method implementation attributes for dynamic methods are always <xref:System.Reflection.MethodImplAttributes.IL> and <xref:System.Reflection.MethodImplAttributes.NoInlining>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo[] GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ParameterInfo[] GetParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetParameters();" />
      <MemberSignature Language="F#" Value="override this.GetParameters : unit -&gt; System.Reflection.ParameterInfo[]" Usage="dynamicMethod.GetParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="737e2-557">Retourne les paramètres de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-557">Returns the parameters of the dynamic method.</span></span></summary>
        <returns><span data-ttu-id="737e2-558">Tableau d’objets <see cref="T:System.Reflection.ParameterInfo" /> qui représentent les paramètres de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-558">An array of <see cref="T:System.Reflection.ParameterInfo" /> objects that represent the parameters of the dynamic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-559">Le <xref:System.Reflection.ParameterInfo> sont des objets retournés par cette méthode pour information uniquement.</span><span class="sxs-lookup"><span data-stu-id="737e2-559">The <xref:System.Reflection.ParameterInfo> objects returned by this method are for information only.</span></span> <span data-ttu-id="737e2-560">Utilisez le <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> méthode pour définir ou modifier les caractéristiques des paramètres.</span><span class="sxs-lookup"><span data-stu-id="737e2-560">Use the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method to set or change the characteristics of the parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="737e2-561">L’exemple de code suivant affiche les paramètres d’une méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-561">The following code example displays the parameters of a dynamic method.</span></span> <span data-ttu-id="737e2-562">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="737e2-562">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#34](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#34)]
 [!code-csharp[Reflection.DynamicMethod.All#34](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#34)]
 [!code-vb[Reflection.DynamicMethod.All#34](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public bool InitLocals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InitLocals { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.InitLocals : bool with get, set" Usage="System.Reflection.Emit.DynamicMethod.InitLocals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="737e2-563">Obtient ou définit une valeur qui indique si les variables locales de la méthode sont initialisées à zéro.</span><span class="sxs-lookup"><span data-stu-id="737e2-563">Gets or sets a value indicating whether the local variables in the method are zero-initialized.</span></span></summary>
        <value><span data-ttu-id="737e2-564"><see langword="true" /> si les variables locales dans la méthode sont initialisées à zéro ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-564"><see langword="true" /> if the local variables in the method are zero-initialized; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="737e2-565">La valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-565">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-566">Si cette propriété est définie sur `true`, l’émis Microsoft intermediate language (MSIL) comprend l’initialisation de variables locales.</span><span class="sxs-lookup"><span data-stu-id="737e2-566">If this property is set to `true`, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables.</span></span> <span data-ttu-id="737e2-567">Si elle est définie sur `false`, les variables locales ne sont pas initialisées et le code généré est non vérifiable.</span><span class="sxs-lookup"><span data-stu-id="737e2-567">If it is set to `false`, local variables are not initialized and the generated code is unverifiable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="737e2-568">Le code suivant exemple affiche le <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> propriété d’une méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-568">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property of a dynamic method.</span></span> <span data-ttu-id="737e2-569">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="737e2-569">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#24](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#24)]
 [!code-csharp[Reflection.DynamicMethod.All#24](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#24)]
 [!code-vb[Reflection.DynamicMethod.All#24](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ Invoke(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ parameters, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="override this.Invoke : obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="dynamicMethod.Invoke (obj, invokeAttr, binder, parameters, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="737e2-570">Ce paramètre est ignoré pour les méthodes dynamiques, car elles sont statiques.</span><span class="sxs-lookup"><span data-stu-id="737e2-570">This parameter is ignored for dynamic methods, because they are static.</span></span> <span data-ttu-id="737e2-571">Spécifiez <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-571">Specify <see langword="null" />.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="737e2-572">Combinaison d’opérations de bits de valeurs <see cref="T:System.Reflection.BindingFlags" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-572">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</span></span></param>
        <param name="binder"><span data-ttu-id="737e2-573">Objet <see cref="T:System.Reflection.Binder" /> qui active la liaison, la contrainte de types d’arguments, l’appel des membres et la récupération d’objets <see cref="T:System.Reflection.MemberInfo" /> par la réflexion.</span><span class="sxs-lookup"><span data-stu-id="737e2-573">A <see cref="T:System.Reflection.Binder" /> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="737e2-574">Si <paramref name="binder" /> est <see langword="null" />, le binder par défaut est utilisé.</span><span class="sxs-lookup"><span data-stu-id="737e2-574">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span> <span data-ttu-id="737e2-575">Pour plus d'informations, consultez <see cref="T:System.Reflection.Binder" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-575">For more details, see <see cref="T:System.Reflection.Binder" />.</span></span></param>
        <param name="parameters"><span data-ttu-id="737e2-576">Liste d’arguments.</span><span class="sxs-lookup"><span data-stu-id="737e2-576">An argument list.</span></span> <span data-ttu-id="737e2-577">Il s’agit d’un tableau d’arguments possédant les mêmes nombre, ordre et type que les paramètres de la méthode à appeler.</span><span class="sxs-lookup"><span data-stu-id="737e2-577">This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked.</span></span> <span data-ttu-id="737e2-578">En l’absence de paramètres, ce paramètre doit avoir la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-578">If there are no parameters this parameter should be <see langword="null" />.</span></span></param>
        <param name="culture"><span data-ttu-id="737e2-579">Instance de <see cref="T:System.Globalization.CultureInfo" /> utilisée pour régir la contrainte des types.</span><span class="sxs-lookup"><span data-stu-id="737e2-579">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types.</span></span> <span data-ttu-id="737e2-580">Si la valeur est <see langword="null" />, le <see cref="T:System.Globalization.CultureInfo" /> du thread actuel est utilisé.</span><span class="sxs-lookup"><span data-stu-id="737e2-580">If this is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span> <span data-ttu-id="737e2-581">Par exemple, ces informations sont nécessaires pour convertir correctement un <see cref="T:System.String" /> représentant 1000 en valeur <see cref="T:System.Double" />, car 1000 est représenté de différentes manières selon la culture.</span><span class="sxs-lookup"><span data-stu-id="737e2-581">For example, this information is needed to correctly convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, because 1000 is represented differently by different cultures.</span></span></param>
        <summary><span data-ttu-id="737e2-582">Appelle la méthode dynamique à l’aide des paramètres spécifiés, sous les contraintes du binder spécifié, avec les informations de culture spécifiées.</span><span class="sxs-lookup"><span data-stu-id="737e2-582">Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.</span></span></summary>
        <returns><span data-ttu-id="737e2-583"><see cref="T:System.Object" /> contenant la valeur de retour de la méthode appelée.</span><span class="sxs-lookup"><span data-stu-id="737e2-583">A <see cref="T:System.Object" /> containing the return value of the invoked method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-584">Outre les exceptions répertoriées, le code appelant doit être préparé pour intercepter les exceptions levées par la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-584">In addition to the listed exceptions, the calling code should be prepared to catch any exceptions thrown by the dynamic method.</span></span>  
  
 <span data-ttu-id="737e2-585">L’exécution d’une méthode dynamique avec un délégué créé par le <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> méthode est plus efficace que l’exécution avec le <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="737e2-585">Executing a dynamic method with a delegate created by the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method is more efficient than executing it with the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 <span data-ttu-id="737e2-586">Appelant le <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> méthode ou le <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> méthode exécute la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-586">Calling the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method completes the dynamic method.</span></span> <span data-ttu-id="737e2-587">Tout davantage de tenter de modifier la méthode dynamique, telles que la modification des définitions de paramètres ou d’émission plus Microsoft intermediate language (MSIL), est ignorée ; aucune exception n’est levée.</span><span class="sxs-lookup"><span data-stu-id="737e2-587">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="737e2-588">Toutes les méthodes dynamiques sont statiques, donc le `obj` paramètre est toujours ignoré.</span><span class="sxs-lookup"><span data-stu-id="737e2-588">All dynamic methods are static, so the `obj` parameter is always ignored.</span></span> <span data-ttu-id="737e2-589">Pour traiter une méthode dynamique comme s’il s’agissait d’une méthode d’instance, utilisez le <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> surcharge qui accepte une instance d’objet.</span><span class="sxs-lookup"><span data-stu-id="737e2-589">To treat a dynamic method as if it were an instance method, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload that takes an object instance.</span></span>  
  
 <span data-ttu-id="737e2-590">Si la méthode dynamique n’a aucun paramètre, la valeur de `parameters` doit être `null`.</span><span class="sxs-lookup"><span data-stu-id="737e2-590">If the dynamic method has no parameters, the value of `parameters` should be `null`.</span></span> <span data-ttu-id="737e2-591">Sinon, le nombre, le type et l’ordre des éléments dans le tableau de paramètres doivent être identiques sur le nombre, le type et l’ordre des paramètres de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-591">Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters of the dynamic method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-592">Cette surcharge de méthode est appelée par le <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> surcharge de méthode est héritée de la <xref:System.Reflection.MethodBase> classe, les remarques précédentes s’appliquent pour les deux surcharges.</span><span class="sxs-lookup"><span data-stu-id="737e2-592">This method overload is called by the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> method overload inherited from the <xref:System.Reflection.MethodBase> class, so the preceding remarks apply to both overloads.</span></span>  
  
 <span data-ttu-id="737e2-593">Cette méthode ne demande pas directement les autorisations, mais l’appel de la méthode dynamique peut entraîner des demandes de sécurité, en fonction de la méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-593">This method does not demand permissions directly, but invoking the dynamic method can result in security demands, depending on the method.</span></span> <span data-ttu-id="737e2-594">Par exemple, aucune des demandes ne sont effectuées pour les méthodes dynamiques hébergées anonymement qui sont créés avec le `restrictedSkipVisibility` paramètre défini sur `false`.</span><span class="sxs-lookup"><span data-stu-id="737e2-594">For example, no demands are made for anonymously hosted dynamic methods that are created with the `restrictedSkipVisibility` parameter set to `false`.</span></span> <span data-ttu-id="737e2-595">En revanche, si vous créez une méthode avec `restrictedSkipVisibility` définie sur `true` afin qu’il peut accéder à un membre masqué d’un assembly cible, la méthode provoquera une demande pour les autorisations de l’assembly cible plu <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="737e2-595">On the other hand, if you create a method with `restrictedSkipVisibility` set to `true` so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-596">Avant la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], cette méthode requise <xref:System.Security.Permissions.ReflectionPermission> avec la <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> indicateur.</span><span class="sxs-lookup"><span data-stu-id="737e2-596">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flag.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="737e2-597">L’exemple de code suivant appelle une méthode dynamique avec liaison exacte, à l’aide de la culture anglais des États-Unis.</span><span class="sxs-lookup"><span data-stu-id="737e2-597">The following code example invokes a dynamic method with exact binding, using the US-English culture.</span></span> <span data-ttu-id="737e2-598">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="737e2-598">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#4](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#4)]
 [!code-csharp[Reflection.DynamicMethod.All#4](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#4)]
 [!code-vb[Reflection.DynamicMethod.All#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="737e2-599">La convention d’appel <see cref="F:System.Reflection.CallingConventions.VarArgs" /> n’est pas prise en charge.</span><span class="sxs-lookup"><span data-stu-id="737e2-599">The <see cref="F:System.Reflection.CallingConventions.VarArgs" /> calling convention is not supported.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="737e2-600">Le nombre d’éléments dans <paramref name="parameters" /> ne correspond pas au nombre de paramètres dans la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-600">The number of elements in <paramref name="parameters" /> does not match the number of parameters in the dynamic method.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="737e2-601">Le type d’un ou plusieurs éléments de <paramref name="parameters" /> ne correspond pas au type du paramètre correspondant de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-601">The type of one or more elements of <paramref name="parameters" /> does not match the type of the corresponding parameter of the dynamic method.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="737e2-602">La méthode dynamique est associée à un module, n’est pas hébergée de manière anonyme, et la valeur <see langword="false" /> a été affectée à <paramref name="skipVisibility" /> lors de sa construction. Toutefois, la méthode dynamique accède à des membres qui ne sont pas <see langword="public" /> ou <see langword="internal" /> (<see langword="Friend" /> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="737e2-602">The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but the dynamic method accesses members that are not <see langword="public" /> or <see langword="internal" /> (<see langword="Friend" /> in Visual Basic).</span></span>  
  
<span data-ttu-id="737e2-603">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-603">-or-</span></span> 
<span data-ttu-id="737e2-604">La méthode dynamique est hébergée de manière anonyme, et la valeur <see langword="false" /> a été affectée à <paramref name="skipVisibility" /> lors de sa construction. Toutefois, elle accède à des membres qui ne sont pas <see langword="public" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-604">The dynamic method is anonymously hosted and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but it accesses members that are not <see langword="public" />.</span></span>  
  
<span data-ttu-id="737e2-605">- ou -</span><span class="sxs-lookup"><span data-stu-id="737e2-605">-or-</span></span> 
<span data-ttu-id="737e2-606">La méthode dynamique contient du code non vérifiable.</span><span class="sxs-lookup"><span data-stu-id="737e2-606">The dynamic method contains unverifiable code.</span></span> <span data-ttu-id="737e2-607">Consultez la section « Vérification » dans la section Notes pour <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-607">See the "Verification" section in Remarks for <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.IsDefined : Type * bool -&gt; bool" Usage="dynamicMethod.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="737e2-608"><see cref="T:System.Type" /> qui représente le type d’attribut personnalisé à rechercher.</span><span class="sxs-lookup"><span data-stu-id="737e2-608">A <see cref="T:System.Type" /> representing the type of custom attribute to search for.</span></span></param>
        <param name="inherit"><span data-ttu-id="737e2-609"><see langword="true" /> pour explorer la chaîne d’héritage de la méthode et rechercher les attributs personnalisés ; <see langword="false" /> pour vérifier uniquement la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="737e2-609"><see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span></span></param>
        <summary><span data-ttu-id="737e2-610">Indique si le type d’attribut personnalisé spécifié est défini.</span><span class="sxs-lookup"><span data-stu-id="737e2-610">Indicates whether the specified custom attribute type is defined.</span></span></summary>
        <returns><span data-ttu-id="737e2-611"><see langword="true" /> si le type d’attribut personnalisé spécifié est défini ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-611"><see langword="true" /> if the specified custom attribute type is defined; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-612">Pour les méthodes dynamiques, en spécifiant `true` pour `inherit` n’a aucun effet.</span><span class="sxs-lookup"><span data-stu-id="737e2-612">For dynamic methods, specifying `true` for `inherit` has no effect.</span></span> <span data-ttu-id="737e2-613">Les méthodes dynamiques n’ont aucune chaîne d’héritage.</span><span class="sxs-lookup"><span data-stu-id="737e2-613">Dynamic methods have no inheritance chain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="737e2-614">Attributs personnalisés ne sont pas actuellement pris en charge sur les méthodes dynamiques.</span><span class="sxs-lookup"><span data-stu-id="737e2-614">Custom attributes are not currently supported on dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityCritical : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="737e2-615">Obtient une valeur qui indique si la méthode dynamique actuelle est critique de sécurité (security-critical) ou critique sécurisée (security-safe-critical), et peut donc effectuer des opérations critiques.</span><span class="sxs-lookup"><span data-stu-id="737e2-615">Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.</span></span></summary>
        <value><span data-ttu-id="737e2-616"><see langword="true" /> si la méthode dynamique actuelle est critique de sécurité ou critique sécurisée ; <see langword="false" /> si elle est transparente.</span><span class="sxs-lookup"><span data-stu-id="737e2-616"><see langword="true" /> if the current dynamic method is security-critical or security-safe-critical; <see langword="false" /> if it is transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-617">Le <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, et <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> propriétés signalent le niveau de transparence de la méthode dynamique, tel que déterminé par le common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="737e2-617">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="737e2-618">Les combinaisons de ces propriétés sont affichées dans le tableau suivant :</span><span class="sxs-lookup"><span data-stu-id="737e2-618">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="737e2-619">Niveau de sécurité</span><span class="sxs-lookup"><span data-stu-id="737e2-619">Security level</span></span>|<span data-ttu-id="737e2-620">EstCritiqueDeSécurité</span><span class="sxs-lookup"><span data-stu-id="737e2-620">IsSecurityCritical</span></span>|<span data-ttu-id="737e2-621">EstCritiqueSécurisé</span><span class="sxs-lookup"><span data-stu-id="737e2-621">IsSecuritySafeCritical</span></span>|<span data-ttu-id="737e2-622">EstTransparentDeSécurité</span><span class="sxs-lookup"><span data-stu-id="737e2-622">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="737e2-623">Critique</span><span class="sxs-lookup"><span data-stu-id="737e2-623">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="737e2-624">Critique de sécurité</span><span class="sxs-lookup"><span data-stu-id="737e2-624">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="737e2-625">Transparent</span><span class="sxs-lookup"><span data-stu-id="737e2-625">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="737e2-626">L'utilisation de ces propriétés est beaucoup plus simple que d'examiner les annotations de sécurité d'un assembly et ses types, de vérifier le niveau de confiance actuel et de tenter de dupliquer les règles du runtime.</span><span class="sxs-lookup"><span data-stu-id="737e2-626">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="737e2-627">La transparence d’une méthode dynamique dépend du module, qu'il est associé.</span><span class="sxs-lookup"><span data-stu-id="737e2-627">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="737e2-628">Si la méthode dynamique est associée à un type plutôt qu’un module, sa transparence dépend du module qui contient le type.</span><span class="sxs-lookup"><span data-stu-id="737e2-628">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="737e2-629">Méthodes dynamiques n’ont pas d’annotations de sécurité, afin qu’ils sont affectés à la transparence par défaut pour le module associé.</span><span class="sxs-lookup"><span data-stu-id="737e2-629">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="737e2-630">Méthodes dynamiques hébergées anonymement sont toujours transparents, car le module fournie par le système qui les contient est transparent.</span><span class="sxs-lookup"><span data-stu-id="737e2-630">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="737e2-631">La transparence d’une méthode dynamique qui est associée à un assembly de confiance (autrement dit, un assembly avec nom fort qui est installé dans le global assembly cache) est décrite dans le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="737e2-631">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="737e2-632">Annotation d’assembly</span><span class="sxs-lookup"><span data-stu-id="737e2-632">Assembly annotation</span></span>|<span data-ttu-id="737e2-633">Transparence de niveau 1</span><span class="sxs-lookup"><span data-stu-id="737e2-633">Level 1 transparency</span></span>|<span data-ttu-id="737e2-634">Transparence de niveau 2</span><span class="sxs-lookup"><span data-stu-id="737e2-634">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="737e2-635">Entièrement transparent</span><span class="sxs-lookup"><span data-stu-id="737e2-635">Fully transparent</span></span>|<span data-ttu-id="737e2-636">Transparent</span><span class="sxs-lookup"><span data-stu-id="737e2-636">Transparent</span></span>|<span data-ttu-id="737e2-637">Transparent</span><span class="sxs-lookup"><span data-stu-id="737e2-637">Transparent</span></span>|  
    |<span data-ttu-id="737e2-638">Complètement critique</span><span class="sxs-lookup"><span data-stu-id="737e2-638">Fully critical</span></span>|<span data-ttu-id="737e2-639">Critique</span><span class="sxs-lookup"><span data-stu-id="737e2-639">Critical</span></span>|<span data-ttu-id="737e2-640">Critique</span><span class="sxs-lookup"><span data-stu-id="737e2-640">Critical</span></span>|  
    |<span data-ttu-id="737e2-641">Transparence mixte</span><span class="sxs-lookup"><span data-stu-id="737e2-641">Mixed transparency</span></span>|<span data-ttu-id="737e2-642">Transparent</span><span class="sxs-lookup"><span data-stu-id="737e2-642">Transparent</span></span>|<span data-ttu-id="737e2-643">Transparent</span><span class="sxs-lookup"><span data-stu-id="737e2-643">Transparent</span></span>|  
    |<span data-ttu-id="737e2-644">Indépendant de la sécurité</span><span class="sxs-lookup"><span data-stu-id="737e2-644">Security-agnostic</span></span>|<span data-ttu-id="737e2-645">Critique sécurisé</span><span class="sxs-lookup"><span data-stu-id="737e2-645">Safe-critical</span></span>|<span data-ttu-id="737e2-646">Critique</span><span class="sxs-lookup"><span data-stu-id="737e2-646">Critical</span></span>|  
  
     <span data-ttu-id="737e2-647">Par exemple, si vous associez une méthode dynamique à un type qui se trouve dans le fichier mscorlib.dll, qui a transparence de niveau 2 mixte, la méthode dynamique est transparente et ne peut pas exécuter de code critique.</span><span class="sxs-lookup"><span data-stu-id="737e2-647">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="737e2-648">Pour plus d’informations sur les niveaux de transparence, consultez [Code Transparent de sécurité, niveau 1](~/docs/framework/misc/security-transparent-code-level-1.md) et [Code Transparent de sécurité, niveau 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="737e2-648">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="737e2-649">Association d’une méthode dynamique à un module dans un assembly de niveau 1 approuvé qui est indépendant de la sécurité, tels que System.dll, n’autorise pas l’élévation d’approbation.</span><span class="sxs-lookup"><span data-stu-id="737e2-649">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="737e2-650">Si le jeu d’autorisations du code qui appelle la méthode dynamique n’inclut pas le jeu d’autorisations de System.dll (autrement dit, une confiance totale), <xref:System.Security.SecurityException> est levée lorsque la méthode dynamique est appelée.</span><span class="sxs-lookup"><span data-stu-id="737e2-650">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="737e2-651">La transparence d’une méthode dynamique qui est associée à un assembly partiellement approuvé dépend de la façon dont l’assembly est chargé.</span><span class="sxs-lookup"><span data-stu-id="737e2-651">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="737e2-652">Si l’assembly est chargé avec une confiance partielle (par exemple, dans un domaine d’application sandbox), le runtime ignore les annotations de sécurité de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="737e2-652">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="737e2-653">L’assembly et tous ses types et membres, y compris les méthodes dynamiques, sont traités comme étant transparent.</span><span class="sxs-lookup"><span data-stu-id="737e2-653">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="737e2-654">Le runtime tient compte des annotations de sécurité uniquement si l’assembly de confiance partielle est chargé avec une confiance totale (par exemple, dans le domaine d’application par défaut d’une application de bureau).</span><span class="sxs-lookup"><span data-stu-id="737e2-654">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="737e2-655">Dans ce cas, le runtime affecte la transparence par défaut pour les méthodes en fonction des annotations de l’assembly à la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-655">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="737e2-656">Pour plus d’informations sur la réflexion émettre et la transparence, consultez [problèmes de sécurité dans l’émission de réflexion](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="737e2-656">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="737e2-657">Pour plus d’informations sur la transparence, consultez [modifications de sécurité](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="737e2-657">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="737e2-658">La méthode dynamique n’a pas de corps de méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-658">The dynamic method doesn't have a method body.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="737e2-659">Problèmes de sécurité dans l'émission de réflexion</span><span class="sxs-lookup"><span data-stu-id="737e2-659">Security Issues in Reflection Emit</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="737e2-660">Considérations sur la sécurité de la réflexion</span><span class="sxs-lookup"><span data-stu-id="737e2-660">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="737e2-661">Modifications de sécurité dans le .NET Framework Version 4.0</span><span class="sxs-lookup"><span data-stu-id="737e2-661">Security Changes in the .NET Framework Version 4.0</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/5fd8f46d-3961-46a7-84af-2eb1f48e75cf"><span data-ttu-id="737e2-662">Code Transparent de sécurité, niveau 1</span><span class="sxs-lookup"><span data-stu-id="737e2-662">Security-Transparent Code, Level 1</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/4d05610a-0da6-4f08-acea-d54c9d6143c0"><span data-ttu-id="737e2-663">Code transparent de sécurité, niveau 2</span><span class="sxs-lookup"><span data-stu-id="737e2-663">Security-Transparent Code, Level 2</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecuritySafeCritical : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="737e2-664">Obtient une valeur qui indique si la méthode dynamique actuelle est critique sécurisée au niveau de confiance actuel, autrement dit si elle peut exécuter des opérations critiques et être accessible par du code transparent.</span><span class="sxs-lookup"><span data-stu-id="737e2-664">Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span></span></summary>
        <value><span data-ttu-id="737e2-665"><see langword="true" /> si la méthode dynamique est critique sécurisée au niveau de confiance actuel ; <see langword="false" /> si elle est critique de sécurité ou transparente.</span><span class="sxs-lookup"><span data-stu-id="737e2-665"><see langword="true" /> if the dynamic method is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-666">Le <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, et <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> propriétés signalent le niveau de transparence de la méthode dynamique, tel que déterminé par le common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="737e2-666">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="737e2-667">Les combinaisons de ces propriétés sont affichées dans le tableau suivant :</span><span class="sxs-lookup"><span data-stu-id="737e2-667">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="737e2-668">Niveau de sécurité</span><span class="sxs-lookup"><span data-stu-id="737e2-668">Security level</span></span>|<span data-ttu-id="737e2-669">EstCritiqueDeSécurité</span><span class="sxs-lookup"><span data-stu-id="737e2-669">IsSecurityCritical</span></span>|<span data-ttu-id="737e2-670">EstCritiqueSécurisé</span><span class="sxs-lookup"><span data-stu-id="737e2-670">IsSecuritySafeCritical</span></span>|<span data-ttu-id="737e2-671">EstTransparentDeSécurité</span><span class="sxs-lookup"><span data-stu-id="737e2-671">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="737e2-672">Critique</span><span class="sxs-lookup"><span data-stu-id="737e2-672">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="737e2-673">Critique de sécurité</span><span class="sxs-lookup"><span data-stu-id="737e2-673">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="737e2-674">Transparent</span><span class="sxs-lookup"><span data-stu-id="737e2-674">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="737e2-675">L'utilisation de ces propriétés est beaucoup plus simple que d'examiner les annotations de sécurité d'un assembly et ses types, de vérifier le niveau de confiance actuel et de tenter de dupliquer les règles du runtime.</span><span class="sxs-lookup"><span data-stu-id="737e2-675">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="737e2-676">La transparence d’une méthode dynamique dépend du module, qu'il est associé.</span><span class="sxs-lookup"><span data-stu-id="737e2-676">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="737e2-677">Si la méthode dynamique est associée à un type plutôt qu’un module, sa transparence dépend du module qui contient le type.</span><span class="sxs-lookup"><span data-stu-id="737e2-677">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="737e2-678">Méthodes dynamiques n’ont pas d’annotations de sécurité, afin qu’ils sont affectés à la transparence par défaut pour le module associé.</span><span class="sxs-lookup"><span data-stu-id="737e2-678">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="737e2-679">Méthodes dynamiques hébergées anonymement sont toujours transparents, car le module fournie par le système qui les contient est transparent.</span><span class="sxs-lookup"><span data-stu-id="737e2-679">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="737e2-680">La transparence d’une méthode dynamique qui est associée à un assembly de confiance (autrement dit, un assembly avec nom fort qui est installé dans le global assembly cache) est décrite dans le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="737e2-680">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="737e2-681">Annotation d’assembly</span><span class="sxs-lookup"><span data-stu-id="737e2-681">Assembly annotation</span></span>|<span data-ttu-id="737e2-682">Transparence de niveau 1</span><span class="sxs-lookup"><span data-stu-id="737e2-682">Level 1 transparency</span></span>|<span data-ttu-id="737e2-683">Transparence de niveau 2</span><span class="sxs-lookup"><span data-stu-id="737e2-683">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="737e2-684">Entièrement transparent</span><span class="sxs-lookup"><span data-stu-id="737e2-684">Fully transparent</span></span>|<span data-ttu-id="737e2-685">Transparent</span><span class="sxs-lookup"><span data-stu-id="737e2-685">Transparent</span></span>|<span data-ttu-id="737e2-686">Transparent</span><span class="sxs-lookup"><span data-stu-id="737e2-686">Transparent</span></span>|  
    |<span data-ttu-id="737e2-687">Complètement critique</span><span class="sxs-lookup"><span data-stu-id="737e2-687">Fully critical</span></span>|<span data-ttu-id="737e2-688">Critique</span><span class="sxs-lookup"><span data-stu-id="737e2-688">Critical</span></span>|<span data-ttu-id="737e2-689">Critique</span><span class="sxs-lookup"><span data-stu-id="737e2-689">Critical</span></span>|  
    |<span data-ttu-id="737e2-690">Transparence mixte</span><span class="sxs-lookup"><span data-stu-id="737e2-690">Mixed transparency</span></span>|<span data-ttu-id="737e2-691">Transparent</span><span class="sxs-lookup"><span data-stu-id="737e2-691">Transparent</span></span>|<span data-ttu-id="737e2-692">Transparent</span><span class="sxs-lookup"><span data-stu-id="737e2-692">Transparent</span></span>|  
    |<span data-ttu-id="737e2-693">Indépendant de la sécurité</span><span class="sxs-lookup"><span data-stu-id="737e2-693">Security-agnostic</span></span>|<span data-ttu-id="737e2-694">Critique sécurisé</span><span class="sxs-lookup"><span data-stu-id="737e2-694">Safe-critical</span></span>|<span data-ttu-id="737e2-695">Critique</span><span class="sxs-lookup"><span data-stu-id="737e2-695">Critical</span></span>|  
  
     <span data-ttu-id="737e2-696">Par exemple, si vous associez une méthode dynamique à un type qui se trouve dans le fichier mscorlib.dll, qui a transparence de niveau 2 mixte, la méthode dynamique est transparente et ne peut pas exécuter de code critique.</span><span class="sxs-lookup"><span data-stu-id="737e2-696">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="737e2-697">Pour plus d’informations sur les niveaux de transparence, consultez [Code Transparent de sécurité, niveau 1](~/docs/framework/misc/security-transparent-code-level-1.md) et [Code Transparent de sécurité, niveau 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="737e2-697">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="737e2-698">Association d’une méthode dynamique à un module dans un assembly de niveau 1 approuvé qui est indépendant de la sécurité, tels que System.dll, n’autorise pas l’élévation d’approbation.</span><span class="sxs-lookup"><span data-stu-id="737e2-698">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="737e2-699">Si le jeu d’autorisations du code qui appelle la méthode dynamique n’inclut pas le jeu d’autorisations de System.dll (autrement dit, une confiance totale), <xref:System.Security.SecurityException> est levée lorsque la méthode dynamique est appelée.</span><span class="sxs-lookup"><span data-stu-id="737e2-699">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="737e2-700">La transparence d’une méthode dynamique qui est associée à un assembly partiellement approuvé dépend de la façon dont l’assembly est chargé.</span><span class="sxs-lookup"><span data-stu-id="737e2-700">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="737e2-701">Si l’assembly est chargé avec une confiance partielle (par exemple, dans un domaine d’application sandbox), le runtime ignore les annotations de sécurité de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="737e2-701">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="737e2-702">L’assembly et tous ses types et membres, y compris les méthodes dynamiques, sont traités comme étant transparent.</span><span class="sxs-lookup"><span data-stu-id="737e2-702">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="737e2-703">Le runtime tient compte des annotations de sécurité uniquement si l’assembly de confiance partielle est chargé avec une confiance totale (par exemple, dans le domaine d’application par défaut d’une application de bureau).</span><span class="sxs-lookup"><span data-stu-id="737e2-703">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="737e2-704">Dans ce cas, le runtime affecte la transparence par défaut pour les méthodes en fonction des annotations de l’assembly à la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-704">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="737e2-705">Pour plus d’informations sur la réflexion émettre et la transparence, consultez [problèmes de sécurité dans l’émission de réflexion](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="737e2-705">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="737e2-706">Pour plus d’informations sur la transparence, consultez [modifications de sécurité](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="737e2-706">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="737e2-707">La méthode dynamique n’a pas de corps de méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-707">The dynamic method doesn't have a method body.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="737e2-708">Problèmes de sécurité dans l'émission de réflexion</span><span class="sxs-lookup"><span data-stu-id="737e2-708">Security Issues in Reflection Emit</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="737e2-709">Considérations sur la sécurité de la réflexion</span><span class="sxs-lookup"><span data-stu-id="737e2-709">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="737e2-710">Modifications de sécurité dans le .NET Framework Version 4.0</span><span class="sxs-lookup"><span data-stu-id="737e2-710">Security Changes in the .NET Framework Version 4.0</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/5fd8f46d-3961-46a7-84af-2eb1f48e75cf"><span data-ttu-id="737e2-711">Code Transparent de sécurité, niveau 1</span><span class="sxs-lookup"><span data-stu-id="737e2-711">Security-Transparent Code, Level 1</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/4d05610a-0da6-4f08-acea-d54c9d6143c0"><span data-ttu-id="737e2-712">Code transparent de sécurité, niveau 2</span><span class="sxs-lookup"><span data-stu-id="737e2-712">Security-Transparent Code, Level 2</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public override bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityTransparent : bool" Usage="System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="737e2-713">Obtient une valeur qui indique si la méthode dynamique actuelle est transparente au niveau de confiance actuel et ne peut donc pas exécuter d’opérations critiques.</span><span class="sxs-lookup"><span data-stu-id="737e2-713">Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.</span></span></summary>
        <value><span data-ttu-id="737e2-714"><see langword="true" /> si la méthode dynamique est transparente de sécurité au niveau de confiance actuel ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-714"><see langword="true" /> if the dynamic method is security-transparent at the current trust level; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-715">Le <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, et <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> propriétés signalent le niveau de transparence de la méthode dynamique, tel que déterminé par le common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="737e2-715">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="737e2-716">Les combinaisons de ces propriétés sont affichées dans le tableau suivant :</span><span class="sxs-lookup"><span data-stu-id="737e2-716">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="737e2-717">Niveau de sécurité</span><span class="sxs-lookup"><span data-stu-id="737e2-717">Security level</span></span>|<span data-ttu-id="737e2-718">EstCritiqueDeSécurité</span><span class="sxs-lookup"><span data-stu-id="737e2-718">IsSecurityCritical</span></span>|<span data-ttu-id="737e2-719">EstCritiqueSécurisé</span><span class="sxs-lookup"><span data-stu-id="737e2-719">IsSecuritySafeCritical</span></span>|<span data-ttu-id="737e2-720">EstTransparentDeSécurité</span><span class="sxs-lookup"><span data-stu-id="737e2-720">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="737e2-721">Critique</span><span class="sxs-lookup"><span data-stu-id="737e2-721">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="737e2-722">Critique de sécurité</span><span class="sxs-lookup"><span data-stu-id="737e2-722">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="737e2-723">Transparent</span><span class="sxs-lookup"><span data-stu-id="737e2-723">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="737e2-724">L'utilisation de ces propriétés est beaucoup plus simple que d'examiner les annotations de sécurité d'un assembly et ses types, de vérifier le niveau de confiance actuel et de tenter de dupliquer les règles du runtime.</span><span class="sxs-lookup"><span data-stu-id="737e2-724">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="737e2-725">La transparence d’une méthode dynamique dépend du module, qu'il est associé.</span><span class="sxs-lookup"><span data-stu-id="737e2-725">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="737e2-726">Si la méthode dynamique est associée à un type plutôt qu’un module, sa transparence dépend du module qui contient le type.</span><span class="sxs-lookup"><span data-stu-id="737e2-726">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="737e2-727">Méthodes dynamiques n’ont pas d’annotations de sécurité, afin qu’ils sont affectés à la transparence par défaut pour le module associé.</span><span class="sxs-lookup"><span data-stu-id="737e2-727">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="737e2-728">Méthodes dynamiques hébergées anonymement sont toujours transparents, car le module fournie par le système qui les contient est transparent.</span><span class="sxs-lookup"><span data-stu-id="737e2-728">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="737e2-729">La transparence d’une méthode dynamique qui est associée à un assembly de confiance (autrement dit, un assembly avec nom fort qui est installé dans le global assembly cache) est décrite dans le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="737e2-729">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="737e2-730">Annotation d’assembly</span><span class="sxs-lookup"><span data-stu-id="737e2-730">Assembly annotation</span></span>|<span data-ttu-id="737e2-731">Transparence de niveau 1</span><span class="sxs-lookup"><span data-stu-id="737e2-731">Level 1 transparency</span></span>|<span data-ttu-id="737e2-732">Transparence de niveau 2</span><span class="sxs-lookup"><span data-stu-id="737e2-732">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="737e2-733">Entièrement transparent</span><span class="sxs-lookup"><span data-stu-id="737e2-733">Fully transparent</span></span>|<span data-ttu-id="737e2-734">Transparent</span><span class="sxs-lookup"><span data-stu-id="737e2-734">Transparent</span></span>|<span data-ttu-id="737e2-735">Transparent</span><span class="sxs-lookup"><span data-stu-id="737e2-735">Transparent</span></span>|  
    |<span data-ttu-id="737e2-736">Complètement critique</span><span class="sxs-lookup"><span data-stu-id="737e2-736">Fully critical</span></span>|<span data-ttu-id="737e2-737">Critique</span><span class="sxs-lookup"><span data-stu-id="737e2-737">Critical</span></span>|<span data-ttu-id="737e2-738">Critique</span><span class="sxs-lookup"><span data-stu-id="737e2-738">Critical</span></span>|  
    |<span data-ttu-id="737e2-739">Transparence mixte</span><span class="sxs-lookup"><span data-stu-id="737e2-739">Mixed transparency</span></span>|<span data-ttu-id="737e2-740">Transparent</span><span class="sxs-lookup"><span data-stu-id="737e2-740">Transparent</span></span>|<span data-ttu-id="737e2-741">Transparent</span><span class="sxs-lookup"><span data-stu-id="737e2-741">Transparent</span></span>|  
    |<span data-ttu-id="737e2-742">Indépendant de la sécurité</span><span class="sxs-lookup"><span data-stu-id="737e2-742">Security-agnostic</span></span>|<span data-ttu-id="737e2-743">Critique sécurisé</span><span class="sxs-lookup"><span data-stu-id="737e2-743">Safe-critical</span></span>|<span data-ttu-id="737e2-744">Critique</span><span class="sxs-lookup"><span data-stu-id="737e2-744">Critical</span></span>|  
  
     <span data-ttu-id="737e2-745">Par exemple, si vous associez une méthode dynamique à un type qui se trouve dans le fichier mscorlib.dll, qui a transparence de niveau 2 mixte, la méthode dynamique est transparente et ne peut pas exécuter de code critique.</span><span class="sxs-lookup"><span data-stu-id="737e2-745">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="737e2-746">Pour plus d’informations sur les niveaux de transparence, consultez [Code Transparent de sécurité, niveau 1](~/docs/framework/misc/security-transparent-code-level-1.md) et [Code Transparent de sécurité, niveau 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="737e2-746">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="737e2-747">Association d’une méthode dynamique à un module dans un assembly de niveau 1 approuvé qui est indépendant de la sécurité, tels que System.dll, n’autorise pas l’élévation d’approbation.</span><span class="sxs-lookup"><span data-stu-id="737e2-747">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="737e2-748">Si le jeu d’autorisations du code qui appelle la méthode dynamique n’inclut pas le jeu d’autorisations de System.dll (autrement dit, une confiance totale), <xref:System.Security.SecurityException> est levée lorsque la méthode dynamique est appelée.</span><span class="sxs-lookup"><span data-stu-id="737e2-748">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="737e2-749">La transparence d’une méthode dynamique qui est associée à un assembly partiellement approuvé dépend de la façon dont l’assembly est chargé.</span><span class="sxs-lookup"><span data-stu-id="737e2-749">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="737e2-750">Si l’assembly est chargé avec une confiance partielle (par exemple, dans un domaine d’application sandbox), le runtime ignore les annotations de sécurité de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="737e2-750">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="737e2-751">L’assembly et tous ses types et membres, y compris les méthodes dynamiques, sont traités comme étant transparent.</span><span class="sxs-lookup"><span data-stu-id="737e2-751">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="737e2-752">Le runtime tient compte des annotations de sécurité uniquement si l’assembly de confiance partielle est chargé avec une confiance totale (par exemple, dans le domaine d’application par défaut d’une application de bureau).</span><span class="sxs-lookup"><span data-stu-id="737e2-752">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="737e2-753">Dans ce cas, le runtime affecte la transparence par défaut pour les méthodes en fonction des annotations de l’assembly à la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-753">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="737e2-754">Pour plus d’informations sur la réflexion émettre et la transparence, consultez [problèmes de sécurité dans l’émission de réflexion](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="737e2-754">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="737e2-755">Pour plus d’informations sur la transparence, consultez [modifications de sécurité](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="737e2-755">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="737e2-756">La méthode dynamique n’a pas de corps de méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-756">The dynamic method doesn't have a method body.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md"><span data-ttu-id="737e2-757">Problèmes de sécurité dans l'émission de réflexion</span><span class="sxs-lookup"><span data-stu-id="737e2-757">Security Issues in Reflection Emit</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="737e2-758">Considérations sur la sécurité de la réflexion</span><span class="sxs-lookup"><span data-stu-id="737e2-758">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="737e2-759">Modifications de sécurité dans le .NET Framework Version 4.0</span><span class="sxs-lookup"><span data-stu-id="737e2-759">Security Changes in the .NET Framework Version 4.0</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/5fd8f46d-3961-46a7-84af-2eb1f48e75cf"><span data-ttu-id="737e2-760">Code Transparent de sécurité, niveau 1</span><span class="sxs-lookup"><span data-stu-id="737e2-760">Security-Transparent Code, Level 1</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/4d05610a-0da6-4f08-acea-d54c9d6143c0"><span data-ttu-id="737e2-761">Code transparent de sécurité, niveau 2</span><span class="sxs-lookup"><span data-stu-id="737e2-761">Security-Transparent Code, Level 2</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MethodHandle">
      <MemberSignature Language="C#" Value="public override RuntimeMethodHandle MethodHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeMethodHandle MethodHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodHandle As RuntimeMethodHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeMethodHandle MethodHandle { RuntimeMethodHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodHandle : RuntimeMethodHandle" Usage="System.Reflection.Emit.DynamicMethod.MethodHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeMethodHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="737e2-762">Non pris en charge pour les méthodes dynamiques.</span><span class="sxs-lookup"><span data-stu-id="737e2-762">Not supported for dynamic methods.</span></span></summary>
        <value><span data-ttu-id="737e2-763">Non pris en charge pour les méthodes dynamiques.</span><span class="sxs-lookup"><span data-stu-id="737e2-763">Not supported for dynamic methods.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="737e2-764">Non autorisé pour les méthodes dynamiques.</span><span class="sxs-lookup"><span data-stu-id="737e2-764">Not allowed for dynamic methods.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodImplAttributes MethodImplementationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodImplementationFlags As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodImplAttributes MethodImplementationFlags { System::Reflection::MethodImplAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodImplementationFlags : System.Reflection.MethodImplAttributes" Usage="System.Reflection.Emit.DynamicMethod.MethodImplementationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Reflection.Emit.DynamicMethod.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="737e2-765">Obtient le module auquel la méthode dynamique est logiquement associée.</span><span class="sxs-lookup"><span data-stu-id="737e2-765">Gets the module with which the dynamic method is logically associated.</span></span></summary>
        <value><span data-ttu-id="737e2-766"><see cref="T:System.Reflection.Module" /> auquel la méthode dynamique est logiquement associée.</span><span class="sxs-lookup"><span data-stu-id="737e2-766">The <see cref="T:System.Reflection.Module" /> with which the current dynamic method is associated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-767">Si un module a été spécifié lors de la méthode dynamique a été créée, cette propriété retourne ce module.</span><span class="sxs-lookup"><span data-stu-id="737e2-767">If a module was specified when the dynamic method was created, this property returns that module.</span></span> <span data-ttu-id="737e2-768">Si un type a été spécifié comme propriétaire lors de la méthode dynamique a été créée, cette propriété retourne le module qui contient ce type.</span><span class="sxs-lookup"><span data-stu-id="737e2-768">If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="737e2-769">Le code suivant exemple affiche le <xref:System.Reflection.Emit.DynamicMethod.Module%2A> propriété d’une méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-769">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.Module%2A> property of a dynamic method.</span></span> <span data-ttu-id="737e2-770">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="737e2-770">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#26](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#26)]
 [!code-csharp[Reflection.DynamicMethod.All#26](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#26)]
 [!code-vb[Reflection.DynamicMethod.All#26](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Reflection.Emit.DynamicMethod.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="737e2-771">Obtient le nom de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-771">Gets the name of the dynamic method.</span></span></summary>
        <value><span data-ttu-id="737e2-772">Nom simple de la méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-772">The simple name of the method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="737e2-773">Il n’est pas nécessaire de nommer les méthodes dynamiques.</span><span class="sxs-lookup"><span data-stu-id="737e2-773">It is not necessary to name dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="737e2-774">L’exemple de code suivant affiche le nom d’une méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-774">The following code example displays the name of a dynamic method.</span></span> <span data-ttu-id="737e2-775">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="737e2-775">This code example is part of a larger example provided for  the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#27](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#27)]
 [!code-csharp[Reflection.DynamicMethod.All#27](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#27)]
 [!code-vb[Reflection.DynamicMethod.All#27](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Reflection.Emit.DynamicMethod.ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="737e2-776">Obtient la classe qui a été utilisée dans la réflexion pour obtenir la méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-776">Gets the class that was used in reflection to obtain the method.</span></span></summary>
        <value><span data-ttu-id="737e2-777">Toujours <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-777">Always <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-778">Cette propriété retourne toujours `null` pour les méthodes dynamiques.</span><span class="sxs-lookup"><span data-stu-id="737e2-778">This property always returns `null` for dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="737e2-779">L’exemple de code suivant affiche le type réfléchi d’une méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-779">The following code example displays the reflected type of a dynamic method.</span></span> <span data-ttu-id="737e2-780">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="737e2-780">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#28](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#28)]
 [!code-csharp[Reflection.DynamicMethod.All#28](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#28)]
 [!code-vb[Reflection.DynamicMethod.All#28](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnParameter">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo ReturnParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo ReturnParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnParameter As ParameterInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ParameterInfo ^ ReturnParameter { System::Reflection::ParameterInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnParameter : System.Reflection.ParameterInfo" Usage="System.Reflection.Emit.DynamicMethod.ReturnParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="737e2-781">Obtient le paramètre de retour de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-781">Gets the return parameter of the dynamic method.</span></span></summary>
        <value><span data-ttu-id="737e2-782">Toujours <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="737e2-782">Always <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-783">Cette propriété retourne toujours `null` pour les méthodes dynamiques.</span><span class="sxs-lookup"><span data-stu-id="737e2-783">This property always returns `null` for dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public override Type ReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReturnType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnType : Type" Usage="System.Reflection.Emit.DynamicMethod.ReturnType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="737e2-784">Obtient le type de la valeur de retour de la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-784">Gets the type of return value for the dynamic method.</span></span></summary>
        <value><span data-ttu-id="737e2-785"><see cref="T:System.Type" /> représentant le type de la valeur de retour de la méthode actuelle ; <see cref="T:System.Void" /> si la méthode n’a aucun type de retour.</span><span class="sxs-lookup"><span data-stu-id="737e2-785">A <see cref="T:System.Type" /> representing the type of the return value of the current method; <see cref="T:System.Void" /> if the method has no return type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-786">Si `null` a été spécifié pour le type de retour lorsque la méthode dynamique a été créée, cette propriété retourne <xref:System.Void?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="737e2-786">If `null` was specified for the return type when the dynamic method was created, this property returns <xref:System.Void?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="737e2-787">L’exemple de code suivant affiche le type de retour d’une méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-787">The following code example displays the return type of a dynamic method.</span></span> <span data-ttu-id="737e2-788">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="737e2-788">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#30](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#30)]
 [!code-csharp[Reflection.DynamicMethod.All#30](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#30)]
 [!code-vb[Reflection.DynamicMethod.All#30](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnTypeCustomAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnTypeCustomAttributes As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ICustomAttributeProvider ^ ReturnTypeCustomAttributes { System::Reflection::ICustomAttributeProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnTypeCustomAttributes : System.Reflection.ICustomAttributeProvider" Usage="System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="737e2-789">Obtient les attributs personnalisés du type de retour pour la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-789">Gets the custom attributes of the return type for the dynamic method.</span></span></summary>
        <value><span data-ttu-id="737e2-790"><see cref="T:System.Reflection.ICustomAttributeProvider" /> représentant les attributs personnalisés du type de retour pour la méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-790">An <see cref="T:System.Reflection.ICustomAttributeProvider" /> representing the custom attributes of the return type for the dynamic method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-791">Attributs personnalisés ne sont pas pris en charge sur le type de retour d’une méthode dynamique, donc le tableau d’attributs personnalisés retourné par la <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> méthode est toujours vide.</span><span class="sxs-lookup"><span data-stu-id="737e2-791">Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> method is always empty.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="737e2-792">L’exemple de code suivant montre comment afficher les attributs personnalisés du type de retour d’une méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-792">The following code example shows how to display the custom attributes of the return type of a dynamic method.</span></span> <span data-ttu-id="737e2-793">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="737e2-793">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#31](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#31)]
 [!code-csharp[Reflection.DynamicMethod.All#31](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#31)]
 [!code-vb[Reflection.DynamicMethod.All#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dynamicMethod.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="737e2-794">Retourne la signature de la méthode, représentée sous forme de chaîne.</span><span class="sxs-lookup"><span data-stu-id="737e2-794">Returns the signature of the method, represented as a string.</span></span></summary>
        <returns><span data-ttu-id="737e2-795">Chaîne représentant la signature de la méthode.</span><span class="sxs-lookup"><span data-stu-id="737e2-795">A string representing the method signature.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="737e2-796">La signature inclut uniquement les types et le nom de la méthode, le cas échéant.</span><span class="sxs-lookup"><span data-stu-id="737e2-796">The signature includes only types and the method name, if any.</span></span> <span data-ttu-id="737e2-797">Noms de paramètres ne sont pas inclus.</span><span class="sxs-lookup"><span data-stu-id="737e2-797">Parameter names are not included.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="737e2-798">Le code suivant exemple affiche la <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> méthode d’une méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="737e2-798">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> method of a dynamic method.</span></span> <span data-ttu-id="737e2-799">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Reflection.Emit.DynamicMethod> classe.</span><span class="sxs-lookup"><span data-stu-id="737e2-799">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#32](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#32)]
 [!code-csharp[Reflection.DynamicMethod.All#32](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#32)]
 [!code-vb[Reflection.DynamicMethod.All#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>