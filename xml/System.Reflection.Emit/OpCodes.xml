<Type Name="OpCodes" FullName="System.Reflection.Emit.OpCodes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b90a20583f24b5370819a5d643b5b26bb93210ac" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37643729" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class OpCodes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OpCodes extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.OpCodes" />
  <TypeSignature Language="VB.NET" Value="Public Class OpCodes" />
  <TypeSignature Language="C++ CLI" Value="public ref class OpCodes" />
  <TypeSignature Language="F#" Value="type OpCodes = class" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="0ca49-101">Fournit les représentations des champs des instructions MSIL (Microsoft Intermediate Language) pour l'émission par les membres de classe <see cref="T:System.Reflection.Emit.ILGenerator" /> (par exemple, <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</span>
      <span class="sxs-lookup">
        <span data-stu-id="0ca49-101">Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the <see cref="T:System.Reflection.Emit.ILGenerator" /> class members (such as <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-102">Pour obtenir une description détaillée des codes de membre d’une opération de données, consultez la documentation de Common Language Infrastructure (CLI), en particulier « Partition III : CIL Instruction Set » et « Partition II : Metadata Definition and Semantics ».</span><span class="sxs-lookup"><span data-stu-id="0ca49-102">For a detailed description of the member opcodes, see the Common Language Infrastructure (CLI) documentation, especially "Partition III: CIL Instruction Set" and "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="0ca49-103">La documentation est disponible en ligne. Consultez [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) sur MSDN et [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) sur le site web d’Ecma International.</span><span class="sxs-lookup"><span data-stu-id="0ca49-103">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ca49-104">L’exemple suivant illustre la construction d’une méthode dynamique à l’aide <xref:System.Reflection.Emit.ILGenerator> à émettre `OpCodes` dans un <xref:System.Reflection.Emit.MethodBuilder>.</span><span class="sxs-lookup"><span data-stu-id="0ca49-104">The following example demonstrates the construction of a dynamic method using <xref:System.Reflection.Emit.ILGenerator> to emit `OpCodes` into a <xref:System.Reflection.Emit.MethodBuilder>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-105">Ajoute deux valeurs et exécute un push du résultat dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-105">Adds two values and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-106">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-106">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-107">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-107">Format</span></span>|<span data-ttu-id="0ca49-108">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-108">Assembly Format</span></span>|<span data-ttu-id="0ca49-109">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-109">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-110">58</span><span class="sxs-lookup"><span data-stu-id="0ca49-110">58</span></span>|<span data-ttu-id="0ca49-111">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-111">add</span></span>|<span data-ttu-id="0ca49-112">Ajoute deux valeurs numériques, retournant une nouvelle valeur numérique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-112">Adds two numeric values, returning a new numeric value.</span></span>|  
  
 <span data-ttu-id="0ca49-113">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-113">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-114">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-114">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-115">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-115">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-116">`value2` et `value1` sont dépilés de la pile ; `value1` est ajouté à `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-116">`value2` and `value1` are popped from the stack; `value1` is added to `value2`.</span></span>  
  
4.  <span data-ttu-id="0ca49-117">Le résultat est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-117">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-118">Dépassement de capacité n’est pas détecté pour les opérations sur les entiers (pour la gestion du dépassement de capacité, consultez <xref:System.Reflection.Emit.OpCodes.Add_Ovf>).</span><span class="sxs-lookup"><span data-stu-id="0ca49-118">Overflow is not detected for integer operations (for proper overflow handling, see <xref:System.Reflection.Emit.OpCodes.Add_Ovf>).</span></span>  
  
 <span data-ttu-id="0ca49-119">Ajout de l’entier encapsule, au lieu de saturer.</span><span class="sxs-lookup"><span data-stu-id="0ca49-119">Integer addition wraps, rather than saturates.</span></span> <span data-ttu-id="0ca49-120">Par exemple, en supposant que des entiers 8 bits où `value1` a la valeur 255 et `value2` est définie sur 1, le résultat renvoyé à la ligne est 0 au lieu de 256.</span><span class="sxs-lookup"><span data-stu-id="0ca49-120">For example, assuming 8-bit integers where `value1` is set to 255 and `value2` is set to 1, the wrapped result is 0 rather than 256.</span></span>  
  
 <span data-ttu-id="0ca49-121">Dépassement de capacité à virgule flottante retourne `+inf` (`PositiveInfinity`) ou `-inf` (`NegativeInfinity`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-121">Floating-point overflow returns `+inf` (`PositiveInfinity`) or `-inf` (`NegativeInfinity`).</span></span>  
  
 <span data-ttu-id="0ca49-122">Les types d’opérande acceptables et leur type de données de résultat correspondant sont répertoriés dans le tableau ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="0ca49-122">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="0ca49-123">S’il n’existe aucune entrée pour une combinaison de type particulier (par exemple, `int32` et `float`; `int32` et `int64`), il est un non valide langage MSIL (Microsoft Intermediate) et génère une erreur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-123">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) and generates an error.</span></span>  
  
|<span data-ttu-id="0ca49-124">opérande</span><span class="sxs-lookup"><span data-stu-id="0ca49-124">operand</span></span>|<span data-ttu-id="0ca49-125">type valeur 1</span><span class="sxs-lookup"><span data-stu-id="0ca49-125">value1 type</span></span>|<span data-ttu-id="0ca49-126">type valeur 2</span><span class="sxs-lookup"><span data-stu-id="0ca49-126">value2 type</span></span>|<span data-ttu-id="0ca49-127">type de résultat</span><span class="sxs-lookup"><span data-stu-id="0ca49-127">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="0ca49-128">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-128">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="0ca49-129">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-129">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="0ca49-130">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-130">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="0ca49-131">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-131">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="0ca49-132">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-132">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="0ca49-133">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-133">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="0ca49-134">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-134">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="0ca49-135">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-135">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="0ca49-136">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-136">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="0ca49-137">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-137">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="0ca49-138">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-138">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="0ca49-139">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-139">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="0ca49-140">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-140">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="0ca49-141">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-141">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="0ca49-142">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `add` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-142">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-143">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-143">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-144">Ajoute deux entiers, effectue un contrôle de dépassement de capacité et exécute un push du résultat dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-144">Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-145">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-145">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-146">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-146">Format</span></span>|<span data-ttu-id="0ca49-147">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-147">Assembly Format</span></span>|<span data-ttu-id="0ca49-148">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-148">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-149">D6</span><span class="sxs-lookup"><span data-stu-id="0ca49-149">D6</span></span>|<span data-ttu-id="0ca49-150">Add.ovf</span><span class="sxs-lookup"><span data-stu-id="0ca49-150">add.ovf</span></span>|<span data-ttu-id="0ca49-151">Ajoute deux valeurs entières signées avec une vérification de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-151">Adds two signed integer values with an overflow check.</span></span>|  
  
 <span data-ttu-id="0ca49-152">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-152">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-153">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-153">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-154">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-154">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-155">`value2` et `value1` sont dépilés de la pile ; `value1` est ajouté à `value2` avec une vérification de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-155">`value2` and `value1` are popped from the stack; `value1` is added to `value2` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="0ca49-156">Le résultat est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-156">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-157"><xref:System.OverflowException> est levée si le résultat n’est pas représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-157"><xref:System.OverflowException> is thrown if the result is not represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-158">Vous pouvez effectuer cette opération sur les entiers signés.</span><span class="sxs-lookup"><span data-stu-id="0ca49-158">You can perform this operation on signed integers.</span></span> <span data-ttu-id="0ca49-159">Pour les valeurs à virgule flottante, utilisez <xref:System.Reflection.Emit.OpCodes.Add>.</span><span class="sxs-lookup"><span data-stu-id="0ca49-159">For floating-point values, use <xref:System.Reflection.Emit.OpCodes.Add>.</span></span>  
  
 <span data-ttu-id="0ca49-160">Les types d’opérande acceptables et leur type de données de résultat correspondant sont répertoriés dans le tableau ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="0ca49-160">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="0ca49-161">S’il n’existe aucune entrée pour une combinaison de type particulier (par exemple, `int32` et `float`; `int32` et `int64`), il est une instruction de langage MSIL (Microsoft Intermediate Language) non valide et génère une erreur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-161">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.</span></span>  
  
|<span data-ttu-id="0ca49-162">opérande</span><span class="sxs-lookup"><span data-stu-id="0ca49-162">operand</span></span>|<span data-ttu-id="0ca49-163">type valeur 1</span><span class="sxs-lookup"><span data-stu-id="0ca49-163">value1 type</span></span>|<span data-ttu-id="0ca49-164">type valeur 2</span><span class="sxs-lookup"><span data-stu-id="0ca49-164">value2 type</span></span>|<span data-ttu-id="0ca49-165">type de résultat</span><span class="sxs-lookup"><span data-stu-id="0ca49-165">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="0ca49-166">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-166">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="0ca49-167">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-167">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="0ca49-168">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-168">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="0ca49-169">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-169">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="0ca49-170">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-170">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="0ca49-171">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-171">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="0ca49-172">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-172">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="0ca49-173">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-173">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="0ca49-174">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-174">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="0ca49-175">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-175">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="0ca49-176">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-176">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="0ca49-177">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-177">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="0ca49-178">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-178">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="0ca49-179">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-179">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="0ca49-180">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `add.ovf` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-180">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-181">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-181">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-182">Ajoute deux valeurs entières non signées, effectue un contrôle de dépassement de capacité et exécute un push du résultat dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-182">Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-183">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-183">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-184">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-184">Format</span></span>|<span data-ttu-id="0ca49-185">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-185">Assembly Format</span></span>|<span data-ttu-id="0ca49-186">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-186">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-187">D7</span><span class="sxs-lookup"><span data-stu-id="0ca49-187">D7</span></span>|<span data-ttu-id="0ca49-188">Add.ovf.un</span><span class="sxs-lookup"><span data-stu-id="0ca49-188">add.ovf.un</span></span>|<span data-ttu-id="0ca49-189">Ajoute deux valeurs entières non signées avec une vérification de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-189">Adds two unsigned integer values with an overflow check.</span></span>|  
  
 <span data-ttu-id="0ca49-190">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-190">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-191">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-191">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-192">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-192">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-193">`value2` et `value1` sont dépilés de la pile ; `value1` est ajouté à `value2` avec une vérification de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-193">`value2` and `value1` are popped from the stack; `value1` is added to `value2` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="0ca49-194">Le résultat est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-194">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-195"><xref:System.OverflowException> est levée si le résultat n’est pas représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-195"><xref:System.OverflowException> is thrown if the result is not represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-196">Vous pouvez effectuer cette opération sur les entiers signés.</span><span class="sxs-lookup"><span data-stu-id="0ca49-196">You can perform this operation on signed integers.</span></span> <span data-ttu-id="0ca49-197">Pour les valeurs à virgule flottante, utilisez <xref:System.Reflection.Emit.OpCodes.Add>.</span><span class="sxs-lookup"><span data-stu-id="0ca49-197">For floating-point values, use <xref:System.Reflection.Emit.OpCodes.Add>.</span></span>  
  
 <span data-ttu-id="0ca49-198">Les types d’opérande acceptables et leur type de données de résultat correspondant sont répertoriés dans le tableau ci-dessous.</span><span class="sxs-lookup"><span data-stu-id="0ca49-198">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="0ca49-199">S’il n’existe aucune entrée pour une combinaison de type particulier (par exemple, `int32` et `float`; `int32` et `int64`), il est une instruction de langage MSIL (Microsoft Intermediate Language) non valide et génère une erreur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-199">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.</span></span>  
  
|<span data-ttu-id="0ca49-200">opérande</span><span class="sxs-lookup"><span data-stu-id="0ca49-200">operand</span></span>|<span data-ttu-id="0ca49-201">type valeur 1</span><span class="sxs-lookup"><span data-stu-id="0ca49-201">value1 type</span></span>|<span data-ttu-id="0ca49-202">type valeur 2</span><span class="sxs-lookup"><span data-stu-id="0ca49-202">value2 type</span></span>|<span data-ttu-id="0ca49-203">type de résultat</span><span class="sxs-lookup"><span data-stu-id="0ca49-203">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="0ca49-204">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-204">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="0ca49-205">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-205">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="0ca49-206">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-206">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="0ca49-207">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-207">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="0ca49-208">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-208">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="0ca49-209">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-209">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="0ca49-210">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-210">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="0ca49-211">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-211">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="0ca49-212">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-212">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="0ca49-213">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-213">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="0ca49-214">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-214">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="0ca49-215">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-215">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="0ca49-216">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-216">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="0ca49-217">add</span><span class="sxs-lookup"><span data-stu-id="0ca49-217">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="0ca49-218">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `add.ovf.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-218">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-219">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-219">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode And;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode And" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.And" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly And As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode And;" />
      <MemberSignature Language="F#" Value=" staticval mutable And : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.And" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-220">Calcule l'opération de bits AND de deux valeurs et exécute un push du résultat dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-220">Computes the bitwise AND of two values and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-221">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-221">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-222">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-222">Format</span></span>|<span data-ttu-id="0ca49-223">Instruction</span><span class="sxs-lookup"><span data-stu-id="0ca49-223">Instruction</span></span>|<span data-ttu-id="0ca49-224">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-224">Description</span></span>|  
|------------|-----------------|-----------------|  
|<span data-ttu-id="0ca49-225">5F</span><span class="sxs-lookup"><span data-stu-id="0ca49-225">5F</span></span>|<span data-ttu-id="0ca49-226">et</span><span class="sxs-lookup"><span data-stu-id="0ca49-226">and</span></span>|<span data-ttu-id="0ca49-227">Détermine l’opération de bits AND de deux valeurs entières.</span><span class="sxs-lookup"><span data-stu-id="0ca49-227">Determines the bitwise AND of two integer values.</span></span>|  
  
 <span data-ttu-id="0ca49-228">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-228">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-229">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-229">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-230">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-230">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-231">`value1` et `value2` sont dépilés ; l’opération de bits AND de deux valeurs est calculée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-231">`value1` and `value2` are popped from the stack; the bitwise AND of the two values is computed.</span></span>  
  
4.  <span data-ttu-id="0ca49-232">Le résultat est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-232">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-233">La `and` instruction calcule le AND au niveau du bit des valeurs des deux premiers sur la pile et laisse le résultat dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-233">The `and` instruction computes the bitwise AND of the top two values on the stack and leaves the result on the stack.</span></span>  
  
 <span data-ttu-id="0ca49-234">`And` est une opération spécifique aux entiers.</span><span class="sxs-lookup"><span data-stu-id="0ca49-234">`And` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="0ca49-235">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `and` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-235">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `and` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-236">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-236">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arglist">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Arglist;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Arglist" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Arglist" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Arglist As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Arglist;" />
      <MemberSignature Language="F#" Value=" staticval mutable Arglist : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Arglist" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-237">Retourne un pointeur non managé vers la liste d'arguments de la méthode actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-237">Returns an unmanaged pointer to the argument list of the current method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-238">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-238">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-239">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-239">Format</span></span>|<span data-ttu-id="0ca49-240">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-240">Assembly Format</span></span>|<span data-ttu-id="0ca49-241">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-241">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-242">FE 00</span><span class="sxs-lookup"><span data-stu-id="0ca49-242">FE 00</span></span>|<span data-ttu-id="0ca49-243">arglist</span><span class="sxs-lookup"><span data-stu-id="0ca49-243">arglist</span></span>|<span data-ttu-id="0ca49-244">Retourne un handle de liste d’arguments pour la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-244">Returns an argument list handle for the current method.</span></span>|  
  
 <span data-ttu-id="0ca49-245">Aucun comportement de la pile d’évaluation n’est effectuées par cette opération.</span><span class="sxs-lookup"><span data-stu-id="0ca49-245">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="0ca49-246">Le `arglist` instruction retourne un handle opaque (un pointeur non managé, de type `native int`) qui représente la liste d’arguments de la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-246">The `arglist` instruction returns an opaque handle (an unmanaged pointer, of type `native int`) that represents the argument list of the current method.</span></span> <span data-ttu-id="0ca49-247">Ce handle est uniquement valide pendant la durée de vie de la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-247">This handle is valid only during the lifetime of the current method.</span></span> <span data-ttu-id="0ca49-248">Vous pouvez, toutefois, passez le handle à d’autres méthodes tant que la méthode actuelle est sur le thread de contrôle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-248">You can, however, pass the handle to other methods as long as the current method is on the thread of control.</span></span> <span data-ttu-id="0ca49-249">Vous pouvez uniquement exécuter la `arglist` instruction dans une méthode qui accepte un nombre variable d’arguments.</span><span class="sxs-lookup"><span data-stu-id="0ca49-249">You can only execute the `arglist` instruction within a method that takes a variable number of arguments.</span></span>  
  
 <span data-ttu-id="0ca49-250">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `arglist` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-250">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `arglist` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-251">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-251">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq;" />
      <MemberSignature Language="F#" Value=" staticval mutable Beq : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Beq" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-252">Transfère le contrôle à une instruction cible si les deux valeurs sont égales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-252">Transfers control to a target instruction if two values are equal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-253">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-253">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-254">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-254">Format</span></span>|<span data-ttu-id="0ca49-255">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-255">Assembly Format</span></span>|<span data-ttu-id="0ca49-256">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-256">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-257">3 B &LT; `int32` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-257">3B < `int32` ></span></span>|<span data-ttu-id="0ca49-258">beq `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-258">beq `target`</span></span>|<span data-ttu-id="0ca49-259">Branche à l’instruction cible à l’offset `target` si les deux valeurs sont égales.</span><span class="sxs-lookup"><span data-stu-id="0ca49-259">Branch to the target instruction at offset `target` if the two values are equal.</span></span>|  
  
 <span data-ttu-id="0ca49-260">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-260">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-261">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-261">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-262">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-262">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-263">`value2` et `value1` sont dépilés ; si `value1` est égal à `value2`, cette opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-263">`value2` and `value1` are popped from the stack; if `value1` is equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="0ca49-264">Le `beq` instruction transfère le contrôle à l’instruction cible spécifiée si `value1` est égal à `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-264">The `beq` instruction transfers control to the specified target instruction if `value1` is equal to `value2`.</span></span> <span data-ttu-id="0ca49-265">L’effet est le même résultat qu’un `ceq` instruction suivie d’un `brtrue` branche à l’instruction cible spécifique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-265">The effect is the same as performing a `ceq` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="0ca49-266">L’instruction de la cible est représentée par un offset signé de 4 octets à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-266">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-267">Les types d’opérande acceptables sont encapsulés ci-dessous :</span><span class="sxs-lookup"><span data-stu-id="0ca49-267">The acceptable operand types are encapsulated below:</span></span>  
  
 <span data-ttu-id="0ca49-268">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-268">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="0ca49-269">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction (ces transferts sont strictement limités et devez utiliser la <xref:System.Reflection.Emit.OpCodes.Leave> instruction à la place).</span><span class="sxs-lookup"><span data-stu-id="0ca49-269">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction instead).</span></span>  
  
 <span data-ttu-id="0ca49-270">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `beq` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-270">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `beq` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-271">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-271">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Beq_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-272">Transfère le contrôle à une instruction cible (forme abrégée) si les deux valeurs sont égales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-272">Transfers control to a target instruction (short form) if two values are equal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-273">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-273">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-274">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-274">Format</span></span>|<span data-ttu-id="0ca49-275">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-275">Assembly Format</span></span>|<span data-ttu-id="0ca49-276">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-276">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-277">2E &LT; `int8` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-277">2E < `int8` ></span></span>|<span data-ttu-id="0ca49-278">beq.s `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-278">beq.s `target`</span></span>|<span data-ttu-id="0ca49-279">Branche à l’instruction cible à l’offset `target` Si égal, forme abrégée</span><span class="sxs-lookup"><span data-stu-id="0ca49-279">Branch to the target instruction at offset `target` if equal, short form</span></span>|  
  
 <span data-ttu-id="0ca49-280">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-280">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-281">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-281">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-282">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-282">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-283">`value2` et `value1` sont dépilés ; si `value1` est égal à `value2`, cette opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-283">`value2` and `value1` are popped from the stack; if `value1` is equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="0ca49-284">Le `beq.s` instruction transfère le contrôle à l’instruction cible spécifiée si `value1` est égal à `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-284">The `beq.s` instruction transfers control to the specified target instruction if `value1` is equal to `value2`.</span></span> <span data-ttu-id="0ca49-285">L’effet est le même résultat qu’un `ceq` instruction suivie d’un `brtrue` branche à l’instruction cible spécifique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-285">The effect is the same as performing a `ceq` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="0ca49-286">L’instruction de la cible est représentée par un offset signé de 1 octet à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-286">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-287">Les types d’opérande acceptables sont encapsulés ci-dessous :</span><span class="sxs-lookup"><span data-stu-id="0ca49-287">The acceptable operand types are encapsulated below:</span></span>  
  
 <span data-ttu-id="0ca49-288">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-288">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="0ca49-289">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction (ces transferts sont strictement limités et devez utiliser la <xref:System.Reflection.Emit.OpCodes.Leave> instruction à la place).</span><span class="sxs-lookup"><span data-stu-id="0ca49-289">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction instead).</span></span>  
  
 <span data-ttu-id="0ca49-290">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `beq.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-290">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `beq.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-291">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-291">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-292">Transfère le contrôle à une instruction cible si la première valeur est supérieure ou égale à la deuxième.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-292">Transfers control to a target instruction if the first value is greater than or equal to the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-293">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-293">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-294">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-294">Format</span></span>|<span data-ttu-id="0ca49-295">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-295">Assembly Format</span></span>|<span data-ttu-id="0ca49-296">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-296">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-297">3C `<int32>`</span><span class="sxs-lookup"><span data-stu-id="0ca49-297">3C `<int32>`</span></span>|<span data-ttu-id="0ca49-298">bge `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-298">bge `target`</span></span>|<span data-ttu-id="0ca49-299">Branche à l’instruction cible à l’offset spécifié si la première valeur est supérieure ou égale à la deuxième valeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-299">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value.</span></span>|  
  
 <span data-ttu-id="0ca49-300">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-300">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-301">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-301">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-302">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-302">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-303">`value2` et `value1` sont dépilés ; si `value1` est supérieur ou égal à `value2`, cette opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-303">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="0ca49-304">Le `bge` instruction transfère le contrôle à l’instruction cible spécifiée si `value1` est supérieur ou égal à `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-304">The `bge` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`.</span></span> <span data-ttu-id="0ca49-305">L’effet est identique à l’exécution d’un `clt.un` instruction suivie d’un `brfalse` branche à l’instruction cible spécifique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-305">The effect is identical to performing a `clt.un` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="0ca49-306">L’instruction de la cible est représentée par un offset signé de 4 octets à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-306">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-307">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-307">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-308">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-308">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-309">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `bge` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-309">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-310">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-310">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-311">Transfère le contrôle à une instruction cible (forme abrégée) si la première valeur est supérieure ou égale à la deuxième.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-311">Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-312">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-312">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-313">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-313">Format</span></span>|<span data-ttu-id="0ca49-314">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-314">Assembly Format</span></span>|<span data-ttu-id="0ca49-315">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-315">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-316">2F `<int8>`</span><span class="sxs-lookup"><span data-stu-id="0ca49-316">2F `<int8>`</span></span>|<span data-ttu-id="0ca49-317">bge.s `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-317">bge.s `target`</span></span>|<span data-ttu-id="0ca49-318">Branche à l’instruction cible à l’offset spécifié si la première valeur est supérieure ou égale à la deuxième forme abrégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-318">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value, short form.</span></span>|  
  
 <span data-ttu-id="0ca49-319">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-319">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-320">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-320">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-321">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-321">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-322">`value2` et `value1` sont dépilés ; si `value1` est supérieur ou égal à `value2`, cette opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-322">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="0ca49-323">Le `bge.s` instruction transfère le contrôle à l’instruction cible spécifiée si `value1` est supérieur ou égal à `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-323">The `bge.s` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`.</span></span> <span data-ttu-id="0ca49-324">L’effet est identique à l’exécution d’un `clt.un` instruction suivie d’un `brfalse` branche à l’instruction cible spécifique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-324">The effect is identical to performing a `clt.un` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="0ca49-325">L’instruction de la cible est représentée par un offset signé de 1 octet à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-325">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-326">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-326">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-327">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-327">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-328">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `bge.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-328">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-329">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-329">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-330">Transfère le contrôle à une instruction cible si la première valeur est supérieure à la deuxième lors de la comparaison des valeurs entières non signées ou des valeurs float non ordonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-330">Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-331">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-331">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-332">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-332">Format</span></span>|<span data-ttu-id="0ca49-333">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-333">Assembly Format</span></span>|<span data-ttu-id="0ca49-334">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-334">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-335">41 `<int32>`</span><span class="sxs-lookup"><span data-stu-id="0ca49-335">41 `<int32>`</span></span>|<span data-ttu-id="0ca49-336">bge.un `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-336">bge.un `target`</span></span>|<span data-ttu-id="0ca49-337">Branche à l’instruction cible à l’offset spécifié si la première valeur est supérieure ou égale à la deuxième valeur (valeurs non signées).</span><span class="sxs-lookup"><span data-stu-id="0ca49-337">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="0ca49-338">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-338">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-339">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-339">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-340">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-340">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-341">`value2` et `value1` sont dépilés ; si `value1` est supérieur ou égal à `value2`, cette opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-341">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="0ca49-342">Le `bge.un` instruction transfère le contrôle à l’instruction cible spécifiée si `value1` est supérieur ou égal à `value2`, par rapport à l’aide d’entières non signées ou valeurs float non ordonnées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-342">The `bge.un` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="0ca49-343">L’effet est identique à l’exécution d’un `clt` instruction suivie d’un `brfalse` branche à l’instruction cible spécifique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-343">The effect is identical to performing a `clt` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="0ca49-344">L’instruction de la cible est représentée par un offset signé de 4 octets à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-344">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-345">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-345">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-346">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-346">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-347">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `bge.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-347">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-348">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-348">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-349">Transfère le contrôle à une instruction cible (forme abrégée) si la première valeur est supérieure à la deuxième lors de la comparaison des valeurs entières non signées ou des valeurs float non ordonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-349">Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-350">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-350">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-351">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-351">Format</span></span>|<span data-ttu-id="0ca49-352">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-352">Assembly Format</span></span>|<span data-ttu-id="0ca49-353">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-353">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-354">34 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-354">34 < `int8` ></span></span>|<span data-ttu-id="0ca49-355">bge.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-355">bge.un.s `target`</span></span>|<span data-ttu-id="0ca49-356">Branche à l’instruction cible à l’offset spécifié si la première valeur est supérieure ou égale à la deuxième valeur (valeurs non signées), forme abrégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-356">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="0ca49-357">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-357">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-358">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-358">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-359">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-359">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-360">`value2` et `value1` sont dépilés ; si `value1` est supérieur ou égal à `value2`, cette opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-360">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="0ca49-361">Le `bge.un.s` instruction transfère le contrôle à l’instruction cible spécifiée si `value1` est supérieur ou égal à `value2`, par rapport à l’aide d’entières non signées ou valeurs float non ordonnées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-361">The `bge.un.s` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="0ca49-362">L’effet est identique à l’exécution d’un `clt` instruction suivie d’un `brfalse` branche à l’instruction cible spécifique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-362">The effect is identical to performing a `clt` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="0ca49-363">L’instruction de la cible est représentée par un offset signé de 1 octet à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-363">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-364">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-364">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-365">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-365">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-366">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `bge.un.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-366">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-367">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-367">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-368">Transfère le contrôle à une instruction cible si la première valeur est supérieure à la deuxième.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-368">Transfers control to a target instruction if the first value is greater than the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-369">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-369">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-370">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-370">Format</span></span>|<span data-ttu-id="0ca49-371">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-371">Assembly Format</span></span>|<span data-ttu-id="0ca49-372">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-372">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-373">3D &LT; `int32` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-373">3D < `int32` ></span></span>|<span data-ttu-id="0ca49-374">bgt `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-374">bgt `target`</span></span>|<span data-ttu-id="0ca49-375">Branche à l’instruction cible à l’offset spécifié si la première valeur est supérieure à la deuxième valeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-375">Branch to the target instruction at the specified offset if the first value is greater than the second value.</span></span>|  
  
 <span data-ttu-id="0ca49-376">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-376">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-377">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-377">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-378">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-378">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-379">`value2` et `value1` sont dépilés ; si `value1` est supérieur à `value2`, cette opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-379">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="0ca49-380">Le `bgt` instruction transfère le contrôle à l’instruction cible spécifiée si `value1` est supérieur à `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-380">The `bgt` instruction transfers control to the specified target instruction if `value1` is greater than `value2`.</span></span> <span data-ttu-id="0ca49-381">L’effet est identique à l’exécution d’un `cgt` instruction suivie d’un `brtrue` branche à l’instruction cible spécifique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-381">The effect is identical to performing a `cgt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="0ca49-382">L’instruction de la cible est représentée par un offset signé de 4 octets à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-382">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-383">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-383">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-384">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-384">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-385">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `bgt` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-385">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-386">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-386">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-387">Transfère le contrôle à une instruction cible (forme abrégée) si la première valeur est supérieure à la deuxième.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-387">Transfers control to a target instruction (short form) if the first value is greater than the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-388">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-388">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-389">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-389">Format</span></span>|<span data-ttu-id="0ca49-390">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-390">Assembly Format</span></span>|<span data-ttu-id="0ca49-391">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-391">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-392">30 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-392">30 < `int8` ></span></span>|<span data-ttu-id="0ca49-393">bgt.s `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-393">bgt.s `target`</span></span>|<span data-ttu-id="0ca49-394">Branche à l’instruction cible à l’offset spécifié si la première valeur est supérieure à la deuxième valeur, forme abrégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-394">Branch to the target instruction at the specified offset if the first value is greater than the second value, short form.</span></span>|  
  
 <span data-ttu-id="0ca49-395">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-395">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-396">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-396">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-397">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-397">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-398">`value2` et `value1` sont dépilés ; si `value1` est supérieur à `value2`, cette opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-398">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="0ca49-399">Le `bgt.s` instruction transfère le contrôle à l’instruction cible spécifiée si `value1` est supérieur à `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-399">The `bgt.s` instruction transfers control to the specified target instruction if `value1` is greater than `value2`.</span></span> <span data-ttu-id="0ca49-400">L’effet est identique à l’exécution d’un `cgt` instruction suivie d’un `brtrue` branche à l’instruction cible spécifique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-400">The effect is identical to performing a `cgt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="0ca49-401">L’instruction de la cible est représentée par un offset signé de 1 octet à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-401">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-402">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-402">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-403">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-403">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-404">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `bgt.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-404">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-405">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-405">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-406">Transfère le contrôle à une instruction cible si la première valeur est supérieure à la deuxième lors de la comparaison des valeurs entières non signées ou des valeurs float non ordonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-406">Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-407">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-407">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-408">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-408">Format</span></span>|<span data-ttu-id="0ca49-409">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-409">Assembly Format</span></span>|<span data-ttu-id="0ca49-410">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-410">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-411">42 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-411">42 < `int32` ></span></span>|<span data-ttu-id="0ca49-412">bgt.un `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-412">bgt.un `target`</span></span>|<span data-ttu-id="0ca49-413">Branche à l’instruction cible à l’offset spécifié si la première valeur est supérieure à la deuxième valeur (valeurs non signées).</span><span class="sxs-lookup"><span data-stu-id="0ca49-413">Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="0ca49-414">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-414">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-415">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-415">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-416">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-416">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-417">`value2` et `value1` sont dépilés ; si `value1` est supérieur à `value2`, cette opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-417">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="0ca49-418">Le `bgt.un` instruction transfère le contrôle à l’instruction cible spécifiée si `value1` est supérieur à `value2`, par rapport à l’aide d’entières non signées ou valeurs float non ordonnées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-418">The `bgt.un` instruction transfers control to the specified target instruction if `value1` is greater than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="0ca49-419">L’effet est identique à l’exécution d’un `cgt.un` instruction suivie d’un `brtrue` branche à l’instruction cible spécifique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-419">The effect is identical to performing a `cgt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="0ca49-420">L’instruction de la cible est représentée par un offset signé de 4 octets à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-420">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-421">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-421">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-422">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-422">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-423">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `bgt.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-423">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-424">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-424">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-425">Transfère le contrôle à une instruction cible (forme abrégée) si la première valeur est supérieure à la deuxième lors de la comparaison des valeurs entières non signées ou des valeurs float non ordonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-425">Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-426">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-426">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-427">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-427">Format</span></span>|<span data-ttu-id="0ca49-428">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-428">Assembly Format</span></span>|<span data-ttu-id="0ca49-429">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-429">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-430">35 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-430">35 < `int8` ></span></span>|<span data-ttu-id="0ca49-431">bgt.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-431">bgt.un.s `target`</span></span>|<span data-ttu-id="0ca49-432">Branche à l’instruction cible à l’offset spécifié si la première valeur est supérieure à la deuxième valeur (valeurs non signées), forme abrégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-432">Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="0ca49-433">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-433">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-434">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-434">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-435">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-435">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-436">`value2` et `value1` sont dépilés ; si `value1` est supérieur à `value2`, cette opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-436">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="0ca49-437">Le `bgt.un.s` instruction transfère le contrôle à l’instruction cible spécifiée si `value1` est supérieur à `value2`, par rapport à l’aide d’entières non signées ou valeurs float non ordonnées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-437">The `bgt.un.s` instruction transfers control to the specified target instruction if `value1` is greater than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="0ca49-438">L’effet est identique à l’exécution d’un `cgt.un` instruction suivie d’un `brtrue` branche à l’instruction cible spécifique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-438">The effect is identical to performing a `cgt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="0ca49-439">L’instruction de la cible est représentée par un offset signé de 1 octet à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-439">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-440">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-440">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-441">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-441">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-442">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `bgt.un.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-442">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-443">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-443">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-444">Transfère le contrôle à une instruction cible si la première valeur est inférieure ou égale à la deuxième.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-444">Transfers control to a target instruction if the first value is less than or equal to the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-445">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-445">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-446">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-446">Format</span></span>|<span data-ttu-id="0ca49-447">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-447">Assembly Format</span></span>|<span data-ttu-id="0ca49-448">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-448">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-449">3E `<int32>`</span><span class="sxs-lookup"><span data-stu-id="0ca49-449">3E `<int32>`</span></span>|<span data-ttu-id="0ca49-450">bLe `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-450">ble `target`</span></span>|<span data-ttu-id="0ca49-451">Branche à l’instruction cible à l’offset spécifié si la première valeur est inférieure ou égale à la deuxième valeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-451">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value.</span></span>|  
  
 <span data-ttu-id="0ca49-452">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-452">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-453">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-453">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-454">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-454">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-455">`value2` et `value1` sont dépilés ; si `value1` est inférieure ou égale à `value2`, cette opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-455">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="0ca49-456">Le `ble` instruction transfère le contrôle à l’instruction cible spécifiée si `value1` est inférieure ou égale à `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-456">The `ble` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="0ca49-457">L’effet est identique à l’exécution d’un `cgt` instruction (`cgt.un` à virgule flottante) suivie d’un `brfalse` branche à l’instruction cible spécifique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-457">The effect is identical to performing a `cgt` instruction (`cgt.un` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="0ca49-458">L’instruction de la cible est représentée par un offset signé de 4 octets à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-458">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-459">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-459">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-460">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-460">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-461">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ble` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-461">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-462">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-462">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-463">Transfère le contrôle à une instruction cible (forme abrégée) si la première valeur est inférieure ou égale à la deuxième.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-463">Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-464">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-464">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-465">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-465">Format</span></span>|<span data-ttu-id="0ca49-466">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-466">Assembly Format</span></span>|<span data-ttu-id="0ca49-467">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-467">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-468">31 `<int8>`</span><span class="sxs-lookup"><span data-stu-id="0ca49-468">31 `<int8>`</span></span>|<span data-ttu-id="0ca49-469">bLe.s `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-469">ble.s `target`</span></span>|<span data-ttu-id="0ca49-470">Branche à l’instruction cible à l’offset spécifié si la première valeur est inférieure ou égale à la deuxième forme abrégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-470">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value, short form.</span></span>|  
  
 <span data-ttu-id="0ca49-471">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-471">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-472">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-472">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-473">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-473">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-474">`value2` et `value1` sont dépilés ; si `value1` est inférieure ou égale à `value2`, cette opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-474">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="0ca49-475">Le `ble.s` instruction transfère le contrôle à l’instruction cible spécifiée si `value1` est inférieure ou égale à `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-475">The `ble.s` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="0ca49-476">L’effet est identique à l’exécution d’un `cgt` instruction (`cgt.un` à virgule flottante) instruction suivie d’un`brfalse` branche à l’instruction cible spécifique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-476">The effect is identical to performing a `cgt` instruction (`cgt.un` for floats) instruction followed by a`brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="0ca49-477">L’instruction de la cible est représentée par un offset signé de 1 octet à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-477">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-478">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-478">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-479">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-479">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-480">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ble.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-480">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-481">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-481">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-482">Transfère le contrôle à une instruction cible si la première valeur est inférieure ou égale à la deuxième lors de la comparaison des valeurs entières non signées ou des valeurs float non ordonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-482">Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-483">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-483">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-484">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-484">Format</span></span>|<span data-ttu-id="0ca49-485">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-485">Assembly Format</span></span>|<span data-ttu-id="0ca49-486">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-486">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-487">43 `<int32>`</span><span class="sxs-lookup"><span data-stu-id="0ca49-487">43 `<int32>`</span></span>|<span data-ttu-id="0ca49-488">bLe.un `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-488">ble.un `target`</span></span>|<span data-ttu-id="0ca49-489">Branche à l’instruction cible à l’offset spécifié si la première valeur est inférieure ou égale à la deuxième valeur (valeurs non signées).</span><span class="sxs-lookup"><span data-stu-id="0ca49-489">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="0ca49-490">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-490">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-491">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-491">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-492">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-492">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-493">`value2` et `value1` sont dépilés ; si `value1` est inférieure ou égale à `value2`, cette opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-493">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="0ca49-494">Le `ble.un` instruction transfère le contrôle à l’instruction cible spécifiée si `value1` est inférieure ou égale à `value2`, par rapport à l’aide d’entières non signées ou valeurs float non ordonnées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-494">The `ble.un` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="0ca49-495">L’effet est identique à l’exécution d’un `cgt.un` instruction (`cgt` à virgule flottante) suivie d’un `brfalse` branche à l’instruction cible spécifique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-495">The effect is identical to performing a `cgt.un` instruction (`cgt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="0ca49-496">L’instruction de la cible est représentée par un offset signé de 4 octets à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-496">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-497">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-497">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-498">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-498">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-499">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ble.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-499">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-500">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-500">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-501">Transfère le contrôle à une instruction cible (forme abrégée) si la première valeur est inférieure ou égale à la deuxième lors de la comparaison des valeurs entières non signées ou des valeurs float non ordonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-501">Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-502">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-502">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-503">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-503">Format</span></span>|<span data-ttu-id="0ca49-504">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-504">Assembly Format</span></span>|<span data-ttu-id="0ca49-505">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-505">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-506">36 `<int8>`</span><span class="sxs-lookup"><span data-stu-id="0ca49-506">36 `<int8>`</span></span>|<span data-ttu-id="0ca49-507">bLe.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-507">ble.un.s `target`</span></span>|<span data-ttu-id="0ca49-508">Branche à l’instruction cible à l’offset spécifié si la première valeur est inférieure ou égale à la deuxième valeur (valeurs non signées), forme abrégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-508">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="0ca49-509">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-509">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-510">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-510">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-511">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-511">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-512">`value2` et `value1` sont dépilés ; si `value1` est inférieure ou égale à `value2`, cette opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-512">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="0ca49-513">Le `ble.un.s` instruction transfère le contrôle à l’instruction cible spécifiée si `value1` est inférieure ou égale à `value2`, par rapport à l’aide d’entières non signées ou valeurs float non ordonnées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-513">The `ble.un.s` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="0ca49-514">L’effet est identique à l’exécution d’un `cgt.un` instruction (`cgt` à virgule flottante) suivie d’un `brfalse` branche à l’instruction cible spécifique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-514">The effect is identical to performing a `cgt.un` instruction (`cgt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="0ca49-515">L’instruction de la cible est représentée par un offset signé de 1 octet à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-515">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-516">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-516">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-517">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-517">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-518">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ble.un.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-518">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-519">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-519">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-520">Transfère le contrôle à une instruction cible si la première valeur est inférieure à la deuxième.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-520">Transfers control to a target instruction if the first value is less than the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-521">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-521">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-522">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-522">Format</span></span>|<span data-ttu-id="0ca49-523">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-523">Assembly Format</span></span>|<span data-ttu-id="0ca49-524">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-524">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-525">3F < `int32` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-525">3F < `int32` ></span></span>|<span data-ttu-id="0ca49-526">blt `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-526">blt `target`</span></span>|<span data-ttu-id="0ca49-527">Branche à l’instruction cible à l’offset spécifié si la première valeur est inférieure à la deuxième valeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-527">Branch to the target instruction at the specified offset if the first value is less than the second value.</span></span>|  
  
 <span data-ttu-id="0ca49-528">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-528">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-529">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-529">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-530">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-530">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-531">`value2` et `value1` sont dépilés ; si `value1` est inférieure à `value2`, cette opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-531">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="0ca49-532">Le `blt` instruction transfère le contrôle à l’instruction cible spécifiée si `value1` est inférieure ou égale à `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-532">The `blt` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="0ca49-533">L’effet est identique à l’exécution d’un `clt` instruction suivie d’un `brtrue` branche à l’instruction cible spécifique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-533">The effect is identical to performing a `clt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="0ca49-534">L’instruction de la cible est représentée par un offset signé de 4 octets à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-534">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-535">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-535">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-536">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-536">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-537">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `blt` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-537">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-538">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-538">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-539">Transfère le contrôle à une instruction cible (forme abrégée) si la première valeur est inférieure à la deuxième.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-539">Transfers control to a target instruction (short form) if the first value is less than the second value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-540">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-540">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-541">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-541">Format</span></span>|<span data-ttu-id="0ca49-542">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-542">Assembly Format</span></span>|<span data-ttu-id="0ca49-543">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-543">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-544">32 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-544">32 < `int8` ></span></span>|<span data-ttu-id="0ca49-545">blt.s `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-545">blt.s `target`</span></span>|<span data-ttu-id="0ca49-546">Branche à l’instruction cible à l’offset spécifié si la première valeur est inférieure à la deuxième, forme abrégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-546">Branch to the target instruction at the specified offset if the first value is less than the second value, short form.</span></span>|  
  
 <span data-ttu-id="0ca49-547">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-547">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-548">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-548">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-549">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-549">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-550">`value2` et `value1` sont dépilés ; si `value1` est inférieure à `value2`, cette opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-550">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="0ca49-551">Le `blt.s` instruction transfère le contrôle à l’instruction cible spécifiée si `value1` est inférieure à `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-551">The `blt.s` instruction transfers control to the specified target instruction if `value1` is less than `value2`.</span></span> <span data-ttu-id="0ca49-552">L’effet est identique à l’exécution d’un `clt` instruction suivie d’un `brtrue` branche à l’instruction cible spécifique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-552">The effect is identical to performing a `clt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="0ca49-553">L’instruction de la cible est représentée par un offset signé de 1 octet à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-553">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-554">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-554">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-555">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-555">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-556">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `blt.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-556">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-557">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-557">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-558">Transfère le contrôle à une instruction cible si la première valeur est inférieure à la deuxième lors de la comparaison des valeurs entières non signées ou des valeurs float non ordonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-558">Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-559">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-559">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-560">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-560">Format</span></span>|<span data-ttu-id="0ca49-561">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-561">Assembly Format</span></span>|<span data-ttu-id="0ca49-562">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-562">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-563">44 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-563">44 < `int32` ></span></span>|<span data-ttu-id="0ca49-564">blt.un `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-564">blt.un `target`</span></span>|<span data-ttu-id="0ca49-565">Branche à l’instruction cible à l’offset spécifié si la première valeur est inférieure à la deuxième valeur (valeurs non signées).</span><span class="sxs-lookup"><span data-stu-id="0ca49-565">Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="0ca49-566">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-566">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-567">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-567">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-568">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-568">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-569">`value2` et `value1` sont dépilés ; si `value1` est inférieure à `value2`, cette opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-569">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="0ca49-570">Le `blt.un` instruction transfère le contrôle à l’instruction cible spécifiée si `value1` est inférieure à `value2`, par rapport à l’aide d’entières non signées ou valeurs float non ordonnées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-570">The `blt.un` instruction transfers control to the specified target instruction if `value1` is less than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="0ca49-571">L’effet est identique à l’exécution d’un `clt.un` instruction suivie d’un `brtrue` branche à l’instruction cible spécifique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-571">The effect is identical to performing a `clt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="0ca49-572">L’instruction de la cible est représentée par un offset signé de 4 octets à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-572">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-573">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-573">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-574">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-574">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-575">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `blt.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-575">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-576">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-576">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-577">Transfère le contrôle à une instruction cible (forme abrégée) si la première valeur est inférieure à la deuxième lors de la comparaison des valeurs entières non signées ou des valeurs float non ordonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-577">Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-578">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-578">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-579">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-579">Format</span></span>|<span data-ttu-id="0ca49-580">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-580">Assembly Format</span></span>|<span data-ttu-id="0ca49-581">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-581">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-582">37 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-582">37 < `int8` ></span></span>|<span data-ttu-id="0ca49-583">blt.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-583">blt.un.s `target`</span></span>|<span data-ttu-id="0ca49-584">Branche à l’instruction cible à l’offset spécifié si la première valeur est inférieure à la deuxième valeur (valeurs non signées), forme abrégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-584">Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="0ca49-585">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-585">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-586">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-586">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-587">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-587">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-588">`value2` et `value1` sont dépilés ; si `value1` est inférieure à `value2`, cette opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-588">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="0ca49-589">Le `blt.un` instruction transfère le contrôle à l’instruction cible spécifiée si `value1` est inférieure à `value2`, par rapport à l’aide d’entières non signées ou valeurs float non ordonnées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-589">The `blt.un` instruction transfers control to the specified target instruction if `value1` is less than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="0ca49-590">L’effet est identique à l’exécution d’un `clt.un` instruction suivie d’un `brtrue` branche à l’instruction cible spécifique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-590">The effect is identical to performing a `clt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="0ca49-591">L’instruction de la cible est représentée par un offset signé de 4 octets à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-591">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-592">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-592">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-593">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-593">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-594">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `blt.un.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-594">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-595">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-595">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bne_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-596">Transfère le contrôle à une instruction cible lorsque deux valeurs entières non signées ou valeurs float non ordonnées ne sont pas égales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-596">Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-597">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-597">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-598">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-598">Format</span></span>|<span data-ttu-id="0ca49-599">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-599">Assembly Format</span></span>|<span data-ttu-id="0ca49-600">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-600">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-601">40 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-601">40 < `int32` ></span></span>|<span data-ttu-id="0ca49-602">bne.un `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-602">bne.un `target`</span></span>|<span data-ttu-id="0ca49-603">Branche à la cible instruction à l’offset spécifié si les deux valeurs entières non signées ne sont ne pas égales (valeurs non signées).</span><span class="sxs-lookup"><span data-stu-id="0ca49-603">Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values).</span></span>|  
  
 <span data-ttu-id="0ca49-604">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-604">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-605">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-605">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-606">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-606">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-607">`value2` et `value1` sont dépilés ; si `value1` n’est pas égal à `value2`, cette opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-607">`value2` and `value1` are popped from the stack; if `value1` is not equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="0ca49-608">Le `bne.un` instruction transfère le contrôle à l’instruction cible spécifiée si `value1` n’est pas égal à `value2`, par rapport à l’aide d’entières non signées ou valeurs float non ordonnées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-608">The `bne.un` instruction transfers control to the specified target instruction if `value1` is not equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="0ca49-609">L’effet est identique à l’exécution d’un `ceq` instruction suivie d’un `brfalse` branche à l’instruction cible spécifique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-609">The effect is identical to performing a `ceq` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="0ca49-610">L’instruction de la cible est représentée par un offset signé de 4 octets à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-610">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-611">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-611">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-612">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-612">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-613">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `bne.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-613">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bne.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-614">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-614">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bne_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-615">Transfère le contrôle à une instruction cible lorsque deux valeurs entières non signées ou valeurs float non ordonnées ne sont pas égales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-615">Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-616">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-616">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-617">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-617">Format</span></span>|<span data-ttu-id="0ca49-618">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-618">Assembly Format</span></span>|<span data-ttu-id="0ca49-619">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-619">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-620">33 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-620">33 < `int8` ></span></span>|<span data-ttu-id="0ca49-621">bne.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-621">bne.un.s `target`</span></span>|<span data-ttu-id="0ca49-622">Branche à la cible instruction à l’offset spécifié si les deux valeurs entières non signées ne sont pas égales (valeurs non signées), forme abrégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-622">Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="0ca49-623">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-623">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-624">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-624">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-625">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-625">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-626">`value2` et `value1` sont dépilés ; si `value1` n’est pas égal à `value2`, cette opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-626">`value2` and `value1` are popped from the stack; if `value1` is not equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="0ca49-627">Le `bne.un` instruction transfère le contrôle à l’instruction cible spécifiée si `value1` n’est pas égal à `value2`, par rapport à l’aide d’entières non signées ou valeurs float non ordonnées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-627">The `bne.un` instruction transfers control to the specified target instruction if `value1` is not equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="0ca49-628">L’effet est identique à l’exécution d’un `ceq` instruction suivie d’un `brfalse` branche à l’instruction cible spécifique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-628">The effect is identical to performing a `ceq` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="0ca49-629">L’instruction de la cible est représentée par un offset signé de 4 octets à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-629">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-630">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-630">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-631">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-631">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-632">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `bne.un.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-632">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bne.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-633">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-633">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Box">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Box;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Box" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Box" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Box As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Box;" />
      <MemberSignature Language="F#" Value=" staticval mutable Box : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Box" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-634">Convertit un type valeur en référence d'objet (type <see langword="O" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-634">Converts a value type to an object reference (type <see langword="O" />).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-635">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-635">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-636">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-636">Format</span></span>|<span data-ttu-id="0ca49-637">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-637">Assembly Format</span></span>|<span data-ttu-id="0ca49-638">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-638">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-639">8C < `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-639">8C < `T` ></span></span>|<span data-ttu-id="0ca49-640">zone `valTypeToken`</span><span class="sxs-lookup"><span data-stu-id="0ca49-640">box `valTypeToken`</span></span>|<span data-ttu-id="0ca49-641">Convertir un type valeur (du type spécifié dans `valTypeToken`) à une référence d’objet true.</span><span class="sxs-lookup"><span data-stu-id="0ca49-641">Convert a value type (of the type specified in `valTypeToken`) to a true object reference.</span></span>|  
  
 <span data-ttu-id="0ca49-642">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-642">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-643">Un type valeur est envoyé à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-643">A value type is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-644">Le type de valeur est retirée de la pile ; le `box` opération est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-644">The value type is popped from the stack; the `box` operation is performed.</span></span>  
  
3.  <span data-ttu-id="0ca49-645">Une référence d’objet pour le type de valeur « boxed » qui en résulte est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-645">An object reference to the resulting "boxed" value type is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-646">Un type valeur a deux représentations distinctes au sein de l’Infrastructure (CLI) :</span><span class="sxs-lookup"><span data-stu-id="0ca49-646">A value type has two separate representations within the Common Language Infrastructure (CLI):</span></span>  
  
-   <span data-ttu-id="0ca49-647">Un formulaire « brut » utilisé lorsqu’un type valeur est incorporé au sein d’un autre objet ou sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-647">A 'raw' form used when a value type is embedded within another object or on the stack.</span></span>  
  
-   <span data-ttu-id="0ca49-648">Un formulaire « boxed », où les données dans le type de valeur sont encapsulées (boxed) dans un objet afin qu’il peut exister une entité indépendante.</span><span class="sxs-lookup"><span data-stu-id="0ca49-648">A 'boxed' form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.</span></span>  
  
 <span data-ttu-id="0ca49-649">Le `box` instruction convertit le type de valeur « brut » (unboxed) en une référence d’objet (type `O`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-649">The `box` instruction converts the 'raw' (unboxed) value type into an object reference (type `O`).</span></span> <span data-ttu-id="0ca49-650">Cela s’effectue en créant un nouvel objet et de copie des données à partir du type de valeur dans l’objet nouvellement alloué.</span><span class="sxs-lookup"><span data-stu-id="0ca49-650">This is accomplished by creating a new object and copying the data from the value type into the newly allocated object.</span></span> <span data-ttu-id="0ca49-651">`valTypeToken` est un jeton de métadonnées indiquant le type du type de valeur sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-651">`valTypeToken` is a metadata token indicating the type of the value type on the stack.</span></span>  
  
 <span data-ttu-id="0ca49-652"><xref:System.OutOfMemoryException> est levée si la mémoire est insuffisante pour satisfaire la requête.</span><span class="sxs-lookup"><span data-stu-id="0ca49-652"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="0ca49-653"><xref:System.TypeLoadException> est levée si la classe est introuvable.</span><span class="sxs-lookup"><span data-stu-id="0ca49-653"><xref:System.TypeLoadException> is thrown if the class cannot be found.</span></span> <span data-ttu-id="0ca49-654">Cela est généralement détecté lorsque le langage MSIL (Microsoft Intermediate Language) est converti en code natif, plutôt que lors de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="0ca49-654">This is typically detected when Microsoft Intermediate Language (MSIL) is converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="0ca49-655">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `box` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-655">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `box` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-656">ILGenerator.Emit (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="0ca49-656">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br;" />
      <MemberSignature Language="F#" Value=" staticval mutable Br : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Br" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-657">Transfère le contrôle à une instruction cible de manière non conditionnelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-657">Unconditionally transfers control to a target instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-658">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-658">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-659">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-659">Format</span></span>|<span data-ttu-id="0ca49-660">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-660">Assembly Format</span></span>|<span data-ttu-id="0ca49-661">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-661">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-662">38 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-662">38 < `int32` ></span></span>|<span data-ttu-id="0ca49-663">br `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-663">br `target`</span></span>|<span data-ttu-id="0ca49-664">Branches à une instruction cible à l’offset spécifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-664">Branches to a target instruction at the specified offset.</span></span>|  
  
 <span data-ttu-id="0ca49-665">Aucun comportement de la pile d’évaluation n’est effectuées par cette opération.</span><span class="sxs-lookup"><span data-stu-id="0ca49-665">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="0ca49-666">La `br` instruction transfère sans condition le contrôle à une instruction cible.</span><span class="sxs-lookup"><span data-stu-id="0ca49-666">The `br` instruction unconditionally transfers control to a target instruction.</span></span> <span data-ttu-id="0ca49-667">L’instruction de la cible est représentée par un offset signé de 4 octets à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-667">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-668">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-668">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-669">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-669">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-670">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `br` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-670">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `br` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-671">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-671">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Br_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Br_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-672">Transfère le contrôle à une instruction cible de manière non conditionnelle (forme abrégée).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-672">Unconditionally transfers control to a target instruction (short form).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-673">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-673">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-674">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-674">Format</span></span>|<span data-ttu-id="0ca49-675">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-675">Assembly Format</span></span>|<span data-ttu-id="0ca49-676">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-676">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-677">2 B &LT; `int8` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-677">2B < `int8` ></span></span>|<span data-ttu-id="0ca49-678">br.s `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-678">br.s `target`</span></span>|<span data-ttu-id="0ca49-679">Branches à une instruction cible à l’offset spécifié, la forme abrégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-679">Branches to a target instruction at the specified offset, short form.</span></span>|  
  
 <span data-ttu-id="0ca49-680">Aucun comportement de la pile d’évaluation n’est effectuées par cette opération.</span><span class="sxs-lookup"><span data-stu-id="0ca49-680">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="0ca49-681">La `br.s` instruction transfère sans condition le contrôle à une instruction cible.</span><span class="sxs-lookup"><span data-stu-id="0ca49-681">The `br.s` instruction unconditionally transfers control to a target instruction.</span></span> <span data-ttu-id="0ca49-682">L’instruction de la cible est représentée par un offset signé de 1 octet à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-682">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-683">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-683">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-684">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-684">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-685">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `br.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-685">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `br.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-686">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-686">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Break;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Break" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Break" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Break As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Break;" />
      <MemberSignature Language="F#" Value=" staticval mutable Break : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Break" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-687">Active l'infrastructure CLI de façon à informer le débogueur qu'un point d'arrêt a été dépassé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-687">Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-688">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-688">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-689">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-689">Format</span></span>|<span data-ttu-id="0ca49-690">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-690">Assembly Format</span></span>|<span data-ttu-id="0ca49-691">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-691">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-692">01</span><span class="sxs-lookup"><span data-stu-id="0ca49-692">01</span></span>|<span data-ttu-id="0ca49-693">break</span><span class="sxs-lookup"><span data-stu-id="0ca49-693">break</span></span>|<span data-ttu-id="0ca49-694">signale à un débogueur qu’un point d’arrêt a été atteint.</span><span class="sxs-lookup"><span data-stu-id="0ca49-694">inform a debugger that a breakpoint has been reached.</span></span>|  
  
 <span data-ttu-id="0ca49-695">Aucun comportement de la pile d’évaluation n’est effectuées par cette opération.</span><span class="sxs-lookup"><span data-stu-id="0ca49-695">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="0ca49-696">La `break` instruction est prise en charge de débogage.</span><span class="sxs-lookup"><span data-stu-id="0ca49-696">The `break` instruction is for debugging support.</span></span> <span data-ttu-id="0ca49-697">Il signale l’interface CLI pour informer le débogueur qu’un point d’arrêt a été dépassé.</span><span class="sxs-lookup"><span data-stu-id="0ca49-697">It signals the CLI to inform the debugger that a break point has been tripped.</span></span> <span data-ttu-id="0ca49-698">Il n’a aucun autre effet sur l’état de l’interpréteur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-698">It has no other effect on the interpreter state.</span></span>  
  
 <span data-ttu-id="0ca49-699">La `break` instruction a le plus petit possible taille activation code instructions mise à jour corrective avec un point d’arrêt et d’affecter le code environnant.</span><span class="sxs-lookup"><span data-stu-id="0ca49-699">The `break` instruction has the smallest possible instruction size enabling code patching with a break point and generating minimal disturbance to the surrounding code.</span></span>  
  
 <span data-ttu-id="0ca49-700">La `break` instruction peut intercepter un débogueur, ne rien faire ou lever une exception de sécurité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-700">The `break` instruction can trap to a debugger, do nothing, or raise a security exception.</span></span> <span data-ttu-id="0ca49-701">Le comportement exact est défini par l’implémentation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-701">The exact behavior is implementation-defined.</span></span>  
  
 <span data-ttu-id="0ca49-702">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `break` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-702">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `break` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-703">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-703">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brfalse : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-704">Transfère le contrôle à une instruction cible si <paramref name="value" /> est <see langword="false" />, une référence null (<see langword="Nothing" /> en Visual Basic) ou zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-704">Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference (<see langword="Nothing" /> in Visual Basic), or zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-705">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-705">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-706">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-706">Format</span></span>|<span data-ttu-id="0ca49-707">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-707">Assembly Format</span></span>|<span data-ttu-id="0ca49-708">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-708">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-709">39 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-709">39 < `int32` ></span></span>|<span data-ttu-id="0ca49-710">brfalse `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-710">brfalse `target`</span></span><br /><br /> <span data-ttu-id="0ca49-711">brnull `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-711">brnull `target`</span></span><br /><br /> <span data-ttu-id="0ca49-712">brzero correspondants `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-712">brzero `target`</span></span>|<span data-ttu-id="0ca49-713">Branches à une instruction cible à l’offset spécifié si `false`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-713">Branches to a target instruction at the specified offset if `false`.</span></span>|  
  
 <span data-ttu-id="0ca49-714">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-714">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-715">`value` est placé sur la pile par une opération précédente.</span><span class="sxs-lookup"><span data-stu-id="0ca49-715">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="0ca49-716">`value` est retirée de la pile ; Si `value` est `false`, créer une branche vers `target`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-716">`value` is popped from the stack; if `value` is `false`, branch to `target`.</span></span>  
  
 <span data-ttu-id="0ca49-717">Le `brfalse` instruction (et ses alias `brnull` et `brzero`) transfère le contrôle à l’instruction cible spécifiée si `value` (de type `int32`, `int64`, référence d’objet `O`managé pointeur `&`, pointeur transitoire `*`, `native int`) est égal à zéro (`false`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-717">The `brfalse` instruction (and its aliases `brnull` and `brzero`) transfers control to the specified target instruction if `value` (of type `int32`, `int64`, object reference `O`, managed pointer `&`, transient pointer `*`, `native int`) is zero (`false`).</span></span> <span data-ttu-id="0ca49-718">Si `value` est différente de zéro (`true`) l’exécution se poursuit à l’instruction suivante.</span><span class="sxs-lookup"><span data-stu-id="0ca49-718">If `value` is non-zero (`true`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="0ca49-719">L’instruction de la cible est représentée par un offset signé de 4 octets à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-719">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-720">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-720">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-721">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-721">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-722">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `brfalse` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-722">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brfalse` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-723">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-723">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brfalse_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-724">Transfère le contrôle à une instruction cible si <paramref name="value" /> est <see langword="false" />, une référence null ou zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-724">Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference, or zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-725">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-725">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-726">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-726">Format</span></span>|<span data-ttu-id="0ca49-727">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-727">Assembly Format</span></span>|<span data-ttu-id="0ca49-728">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-728">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-729">2C <`int8` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-729">2C <`int8` ></span></span>|<span data-ttu-id="0ca49-730">brfalse.s `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-730">brfalse.s `target`</span></span><br /><br /> <span data-ttu-id="0ca49-731">brnull.s `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-731">brnull.s `target`</span></span><br /><br /> <span data-ttu-id="0ca49-732">brzero.s `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-732">brzero.s `target`</span></span>|<span data-ttu-id="0ca49-733">Branches à une instruction cible à l’offset spécifié si `false`, forme abrégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-733">Branches to a target instruction at the specified offset if `false`, short form.</span></span>|  
  
 <span data-ttu-id="0ca49-734">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-734">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-735">`value` est placé sur la pile par une opération précédente.</span><span class="sxs-lookup"><span data-stu-id="0ca49-735">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="0ca49-736">`value` est retirée de la pile ; Si `value` est `false`, créer une branche vers `target`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-736">`value` is popped from the stack; if `value` is `false`, branch to `target`.</span></span>  
  
 <span data-ttu-id="0ca49-737">Le `brfalse.s` instruction (et ses alias `brnull` et `brzero`) transfère le contrôle à l’instruction cible spécifiée si `value` (de type `int32`, `int64`, référence d’objet `O`managé pointeur `&`, pointeur transitoire `*`, `native int`) est égal à zéro (`false`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-737">The `brfalse.s` instruction (and its aliases `brnull` and `brzero`) transfers control to the specified target instruction if `value` (of type `int32`, `int64`, object reference `O`, managed pointer `&`, transient pointer `*`, `native int`) is zero (`false`).</span></span> <span data-ttu-id="0ca49-738">Si `value` est différente de zéro (`true`) l’exécution se poursuit à l’instruction suivante.</span><span class="sxs-lookup"><span data-stu-id="0ca49-738">If `value` is non-zero (`true`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="0ca49-739">L’instruction de la cible est représentée par un offset signé de 1 octet à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-739">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-740">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-740">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-741">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-741">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-742">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `brfalse.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-742">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brfalse.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-743">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-743">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brtrue : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-744">Transfère le contrôle à une instruction cible si <paramref name="value" /> est <see langword="true" />, non null ou différent de zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-744">Transfers control to a target instruction if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-745">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-745">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-746">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-746">Format</span></span>|<span data-ttu-id="0ca49-747">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-747">Assembly Format</span></span>|<span data-ttu-id="0ca49-748">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-748">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-749">3A < `int32` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-749">3A < `int32` ></span></span>|<span data-ttu-id="0ca49-750">brtrue `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-750">brtrue `target`</span></span><br /><br /> <span data-ttu-id="0ca49-751">brinst `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-751">brinst `target`</span></span>|<span data-ttu-id="0ca49-752">Créer une branche vers une instruction cible à l’offset spécifié si différente de zéro (`true`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-752">Branch to a target instruction at the specified offset if non-zero (`true`).</span></span>|  
  
 <span data-ttu-id="0ca49-753">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-753">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-754">`value` est placé sur la pile par une opération précédente.</span><span class="sxs-lookup"><span data-stu-id="0ca49-754">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="0ca49-755">`value` est retirée de la pile ; Si `value` est `true`, créer une branche vers `target`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-755">`value` is popped from the stack; if `value` is `true`, branch to `target`.</span></span>  
  
 <span data-ttu-id="0ca49-756">Le `brtrue` instruction transfère le contrôle à l’instruction cible spécifiée si `value` (type `native int`) est différent de zéro (`true`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-756">The `brtrue` instruction transfers control to the specified target instruction if `value` (type `native int`) is nonzero (`true`).</span></span> <span data-ttu-id="0ca49-757">Si `value` est égal à zéro (`false`) l’exécution se poursuit à l’instruction suivante.</span><span class="sxs-lookup"><span data-stu-id="0ca49-757">If `value` is zero (`false`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="0ca49-758">Si `value` est une référence d’objet (type `O`) puis `brinst` (un alias pour `brtrue`) transfère le contrôle s’il représente une instance d’un objet (par exemple, si elle n’est pas la référence d’objet null ; consultez <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span><span class="sxs-lookup"><span data-stu-id="0ca49-758">If `value` is an object reference (type `O`) then `brinst` (an alias for `brtrue`) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span></span>  
  
 <span data-ttu-id="0ca49-759">L’instruction de la cible est représentée par un offset signé de 4 octets à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-759">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-760">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-760">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-761">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-761">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-762">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `brtrue` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-762">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brtrue` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-763">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-763">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brtrue_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-764">Transfère le contrôle à une instruction cible (forme abrégée) si <paramref name="value" /> est <see langword="true" />, non null ou différent de zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-764">Transfers control to a target instruction (short form) if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-765">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-765">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-766">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-766">Format</span></span>|<span data-ttu-id="0ca49-767">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-767">Assembly Format</span></span>|<span data-ttu-id="0ca49-768">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-768">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-769">2D &LT; `int8` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-769">2D < `int8` ></span></span>|<span data-ttu-id="0ca49-770">brtrue.s `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-770">brtrue.s `target`</span></span><br /><br /> <span data-ttu-id="0ca49-771">brinst.s `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-771">brinst.s `target`</span></span>|<span data-ttu-id="0ca49-772">Créer une branche vers une instruction cible à l’offset spécifié si différente de zéro (`true`), forme abrégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-772">Branch to a target instruction at the specified offset if non-zero (`true`), short form.</span></span>|  
  
 <span data-ttu-id="0ca49-773">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-773">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-774">`value` est placé sur la pile par une opération précédente.</span><span class="sxs-lookup"><span data-stu-id="0ca49-774">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="0ca49-775">`value` est retirée de la pile ; Si `value` est `true`, créer une branche vers `target`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-775">`value` is popped from the stack; if `value` is `true`, branch to `target`.</span></span>  
  
 <span data-ttu-id="0ca49-776">Le `brtrue.s` instruction transfère le contrôle à l’instruction cible spécifiée si `value` (type `native int`) est différent de zéro (`true`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-776">The `brtrue.s` instruction transfers control to the specified target instruction if `value` (type `native int`) is nonzero (`true`).</span></span> <span data-ttu-id="0ca49-777">Si `value` est égal à zéro (`false`) l’exécution se poursuit à l’instruction suivante.</span><span class="sxs-lookup"><span data-stu-id="0ca49-777">If `value` is zero (`false`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="0ca49-778">Si `value` est une référence d’objet (type `O`) puis `brinst` (un alias pour `brtrue`) transfère le contrôle s’il représente une instance d’un objet (par exemple, si elle n’est pas la référence d’objet null ; consultez <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span><span class="sxs-lookup"><span data-stu-id="0ca49-778">If `value` is an object reference (type `O`) then `brinst` (an alias for `brtrue`) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span></span>  
  
 <span data-ttu-id="0ca49-779">L’instruction de la cible est représentée par un offset signé de 1 octet à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-779">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-780">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-780">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="0ca49-781">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-781">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-782">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `brtrue.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-782">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brtrue.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-783">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-783">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Call;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Call" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Call" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Call As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Call;" />
      <MemberSignature Language="F#" Value=" staticval mutable Call : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Call" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-784">Appelle la méthode indiquée par le descripteur de méthode passé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-784">Calls the method indicated by the passed method descriptor.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-785">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-785">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-786">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-786">Format</span></span>|<span data-ttu-id="0ca49-787">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-787">Assembly Format</span></span>|<span data-ttu-id="0ca49-788">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-788">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-789">28 < `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-789">28 < `T` ></span></span>|<span data-ttu-id="0ca49-790">Appel `methodDesc`</span><span class="sxs-lookup"><span data-stu-id="0ca49-790">call `methodDesc`</span></span>|<span data-ttu-id="0ca49-791">Appelez la méthode décrite par `methodDesc`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-791">Call the method described by `methodDesc`.</span></span>|  
  
 <span data-ttu-id="0ca49-792">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-792">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-793">Arguments de méthode `arg1` via `argN` sont envoyées dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-793">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-794">Arguments de méthode `arg1` via `argN` sont dépilés ; l’appel de méthode est effectué avec ces arguments et le contrôle est transféré à la méthode référencée par le descripteur de méthode.</span><span class="sxs-lookup"><span data-stu-id="0ca49-794">Method arguments `arg1` through `argN` are popped from the stack; the method call is performed with these arguments and control is transferred to the method referred to by the method descriptor.</span></span> <span data-ttu-id="0ca49-795">Lorsque vous avez terminé, une valeur de retour est générée par la méthode de l’appelé et envoyée à l’appelant.</span><span class="sxs-lookup"><span data-stu-id="0ca49-795">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
3.  <span data-ttu-id="0ca49-796">La valeur de retour est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-796">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-797">La `call` instruction appelle la méthode indiquée par le descripteur de méthode passé avec l’instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-797">The `call` instruction calls the method indicated by the method descriptor passed with the instruction.</span></span> <span data-ttu-id="0ca49-798">Le descripteur de méthode est un jeton de métadonnées qui indique la méthode à l’appel et le nombre, le type et l’ordre des arguments qui ont été placés sur la pile à passer à cette méthode, ainsi que la convention d’appel à utiliser.</span><span class="sxs-lookup"><span data-stu-id="0ca49-798">The method descriptor is a metadata token that indicates the method to call and the number, type, and order of the arguments that have been placed on the stack to be passed to that method as well as the calling convention to be used.</span></span> <span data-ttu-id="0ca49-799">Le `call` instruction peut être immédiatement précédée d’un `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) instruction pour spécifier que l’état actuel de la méthode doit être libéré avant le transfert du contrôle du préfixe.</span><span class="sxs-lookup"><span data-stu-id="0ca49-799">The `call` instruction can be immediately preceded by a `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefix instruction to specify that the current method state should be released before transferring control.</span></span> <span data-ttu-id="0ca49-800">Si l’appel transfère le contrôle à une méthode de confiance plus élevé que la méthode d’origine, le frame de pile n’est pas libéré.</span><span class="sxs-lookup"><span data-stu-id="0ca49-800">If the call transfers control to a method of higher trust than the origin method, the stack frame is not released.</span></span> <span data-ttu-id="0ca49-801">Au lieu de cela, l’exécution se poursuit en mode silencieux comme si le `tail` n’avait pas été fourni.</span><span class="sxs-lookup"><span data-stu-id="0ca49-801">Instead, the execution continues silently as if the `tail` had not been supplied.</span></span> <span data-ttu-id="0ca49-802">Le jeton de métadonnées transporte des informations suffisantes pour déterminer si l’appel concerne une méthode statique, une méthode d’instance, une méthode virtuelle ou une fonction globale.</span><span class="sxs-lookup"><span data-stu-id="0ca49-802">The metadata token carries sufficient information to determine whether the call is to a static method, an instance method, a virtual method, or a global function.</span></span> <span data-ttu-id="0ca49-803">Dans tous ces cas l’adresse de destination est entièrement déterminée à partir du descripteur de méthode (Ceci contraste avec le <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction d’appel de méthodes virtuelles, où l’adresse de destination dépend également du type de runtime de l’instance référence envoyé avant le <xref:System.Reflection.Emit.OpCodes.Callvirt>).</span><span class="sxs-lookup"><span data-stu-id="0ca49-803">In all of these cases the destination address is determined entirely from the method descriptor (contrast this with the <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction for calling virtual methods, where the destination address also depends upon the runtime type of the instance reference pushed before the <xref:System.Reflection.Emit.OpCodes.Callvirt>).</span></span>  
  
 <span data-ttu-id="0ca49-804">Les arguments sont placés sur la pile dans l’ordre de gauche à droite.</span><span class="sxs-lookup"><span data-stu-id="0ca49-804">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="0ca49-805">Autrement dit, le premier argument est calculé et placé sur la pile, puis le deuxième argument, puis le troisième, jusqu'à ce que tous les arguments nécessaires sont située en haut de la pile dans l’ordre décroissant.</span><span class="sxs-lookup"><span data-stu-id="0ca49-805">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="0ca49-806">Il existe trois cas particuliers importants :</span><span class="sxs-lookup"><span data-stu-id="0ca49-806">There are three important special cases:</span></span>  
  
 1. <span data-ttu-id="0ca49-807">Les appels à une instance (ou virtuel) méthode doit transmettre cette référence d’instance avant tout l’argument visible par l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-807">Calls to an instance (or virtual) method must push that instance reference before any of the user-visible arguments.</span></span> <span data-ttu-id="0ca49-808">La référence d’instance ne doit pas être une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-808">The instance reference must not be a null reference.</span></span> <span data-ttu-id="0ca49-809">La signature dans les métadonnées ne contient pas une entrée dans la liste de paramètres pour le `this` pointeur ; au lieu de cela, elle utilise un bit pour indiquer si la méthode requiert le passage du `this` pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-809">The signature carried in the metadata does not contain an entry in the parameter list for the `this` pointer; instead, it uses a bit to indicate whether the method requires passing the `this` pointer.</span></span>  
  
 2. <span data-ttu-id="0ca49-810">Il est possible d’appeler une méthode virtuelle à l’aide `call` (au lieu de `callvirt`) ; cela indique que la méthode doit être résolu à l’aide de la classe spécifiée par la méthode plutôt que comme spécifié dynamiquement à partir de l’objet appelé.</span><span class="sxs-lookup"><span data-stu-id="0ca49-810">It is valid to call a virtual method using `call` (rather than `callvirt`); this indicates that the method is to be resolved using the class specified by method rather than as specified dynamically from the object being invoked.</span></span>  
  
 3. <span data-ttu-id="0ca49-811">Notez que d’un délégué `Invoke` méthode peut être appelée avec soit le `call` ou `callvirt` instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-811">Note that a delegate's `Invoke` method can be called with either the `call` or `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="0ca49-812"><xref:System.Security.SecurityException> peut être levée si le système de sécurité n’accorde pas l’appelant l’accès à la méthode appelée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-812"><xref:System.Security.SecurityException> may be thrown if system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="0ca49-813">La vérification de sécurité peut se produire lorsque les instructions de langage MSIL (Microsoft Intermediate Language) sont converties en code natif plutôt qu’au moment de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="0ca49-813">The security check may occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0ca49-814">Lorsque vous appelez des méthodes de System.Object sur des types valeur, envisagez d’utiliser le `constrained` avec le préfixe le `callvirt` instruction au lieu de l’émission d’un `call` instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-814">When calling methods of System.Object on value types, consider using the `constrained` prefix with the `callvirt` instruction instead of emitting a `call` instruction.</span></span> <span data-ttu-id="0ca49-815">Cela supprime la nécessité d’émettre un IL différent en fonction de la valeur déterminant le type de valeur substitue la méthode, en évitant un problème potentiel de la gestion des versions.</span><span class="sxs-lookup"><span data-stu-id="0ca49-815">This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem.</span></span> <span data-ttu-id="0ca49-816">Envisagez d’utiliser le `constrained` préfixe lors de l’appel des méthodes d’interface sur des types valeur, étant donné que la méthode de type valeur mise en œuvre de la méthode d’interface peut être modifié à l’aide un `MethodImpl`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-816">Consider using the `constrained` prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="0ca49-817">Ces problèmes sont décrits plus en détail dans le <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span><span class="sxs-lookup"><span data-stu-id="0ca49-817">These issues are described in more detail in the <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span></span>  
  
 <span data-ttu-id="0ca49-818">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> les surcharges de méthode peuvent utiliser le `call` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-818">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `call` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-819">ILGenerator.Emit (OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="0ca49-819">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="0ca49-820">ILGenerator.EmitCall (OpCode, MethodInfo, Type[])</span><span class="sxs-lookup"><span data-stu-id="0ca49-820">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0ca49-821">Le <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> méthode est fournie pour `varargs` appels.</span><span class="sxs-lookup"><span data-stu-id="0ca49-821">The <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> method is provided for `varargs` calls.</span></span> <span data-ttu-id="0ca49-822">Utilisez le <xref:System.Reflection.Emit.ILGenerator.Emit%2A> méthode pour les appels normaux.</span><span class="sxs-lookup"><span data-stu-id="0ca49-822">Use the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method for normal calls.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Calli">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Calli;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Calli" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Calli" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Calli As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Calli;" />
      <MemberSignature Language="F#" Value=" staticval mutable Calli : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Calli" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-823">Appelle la méthode indiquée dans la pile d'évaluation (sous la forme d'un pointeur vers un point d'entrée) avec les arguments décrits par une convention d'appel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-823">Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-824">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-824">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-825">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-825">Format</span></span>|<span data-ttu-id="0ca49-826">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-826">Assembly Format</span></span>|<span data-ttu-id="0ca49-827">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-827">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-828">29 < `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-828">29 < `T` ></span></span>|<span data-ttu-id="0ca49-829">calli `callSiteDescr`</span><span class="sxs-lookup"><span data-stu-id="0ca49-829">calli `callSiteDescr`</span></span>|<span data-ttu-id="0ca49-830">Appelle la méthode pointée avec les arguments décrits par la convention d’appel.</span><span class="sxs-lookup"><span data-stu-id="0ca49-830">Calls the method pointed to with arguments described by the calling convention.</span></span>|  
  
 <span data-ttu-id="0ca49-831">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-831">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-832">Arguments de méthode `arg1` via `argN` sont envoyées dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-832">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-833">Le pointeur d’entrée de méthode est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-833">The method entry pointer is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-834">Arguments de méthode `arg1` via `argN` et le pointeur d’entrée de méthode sont dépilés ; l’appel à la méthode est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-834">Method arguments `arg1` through `argN` and the method entry pointer are popped from the stack; the call to the method is performed.</span></span> <span data-ttu-id="0ca49-835">Lorsque vous avez terminé, une valeur de retour est générée par la méthode de l’appelé et envoyée à l’appelant.</span><span class="sxs-lookup"><span data-stu-id="0ca49-835">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
4.  <span data-ttu-id="0ca49-836">La valeur de retour est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-836">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-837">Le `calli` instruction appelle le pointeur d’entrée de méthode avec les arguments `arg1` via `argN`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-837">The `calli` instruction calls the method entry pointer with the arguments `arg1` through `argN`.</span></span> <span data-ttu-id="0ca49-838">Les types de ces arguments sont décrits par la convention d’appel spécifique (`callSiteDesc`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-838">The types of these arguments are described by the specific calling convention (`callSiteDesc`).</span></span> <span data-ttu-id="0ca49-839">Le `calli` instruction peut être immédiatement précédée d’un `tail` préfixe (<xref:System.Reflection.Emit.OpCodes.Tailcall>) pour spécifier que l’état actuel de la méthode doit être libéré avant le transfert du contrôle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-839">The `calli` instruction may be immediately preceded by a `tail` prefix (<xref:System.Reflection.Emit.OpCodes.Tailcall>) to specify that the current method state should be released before transferring control.</span></span> <span data-ttu-id="0ca49-840">Si l’appel transfère le contrôle à une méthode de confiance plus élevé que la méthode d’origine le frame de pile n’est pas libéré ; au lieu de cela, l’exécution se poursuit en silence comme si le `tail` n’avait pas été fourni.</span><span class="sxs-lookup"><span data-stu-id="0ca49-840">If the call would transfer control to a method of higher trust than the origin method the stack frame will not be released; instead, the execution will continue silently as if the `tail` had not been supplied.</span></span>  
  
 <span data-ttu-id="0ca49-841">Le pointeur d’entrée de méthode est censé pour être un pointeur spécifique en code natif (de l’ordinateur cible) qui peut être appelée de manière légitime avec les arguments décrits par la convention d’appel (un jeton de métadonnées pour une signature autonome).</span><span class="sxs-lookup"><span data-stu-id="0ca49-841">The method entry pointer is assumed to be a specific pointer to native code (of the target machine) that can be legitimately called with the arguments described by the calling convention (a metadata token for a stand-alone signature).</span></span> <span data-ttu-id="0ca49-842">Ce type de pointeur peut être créé à l’aide de la <xref:System.Reflection.Emit.OpCodes.Ldftn> ou <xref:System.Reflection.Emit.OpCodes.Ldvirtftn> obtenir des instructions, ou transmise par le code natif.</span><span class="sxs-lookup"><span data-stu-id="0ca49-842">Such a pointer can be created using the <xref:System.Reflection.Emit.OpCodes.Ldftn> or <xref:System.Reflection.Emit.OpCodes.Ldvirtftn> instructions, or passed in from native code.</span></span>  
  
 <span data-ttu-id="0ca49-843">La convention d’appel n’est pas vérifiée dynamiquement, par conséquent, code qui utilise un `calli` instruction ne fonctionne pas correctement si la destination n’utilise pas réellement la convention d’appel spécifiée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-843">The calling convention is not checked dynamically, so code that uses a `calli` instruction does not work correctly if the destination does not actually use the specified calling convention.</span></span>  
  
 <span data-ttu-id="0ca49-844">Les arguments sont placés sur la pile dans l’ordre de gauche à droite.</span><span class="sxs-lookup"><span data-stu-id="0ca49-844">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="0ca49-845">Autrement dit, le premier argument est calculé et placé sur la pile, puis le deuxième argument, puis le troisième, jusqu'à ce que tous les arguments nécessaires sont située en haut de la pile dans l’ordre décroissant.</span><span class="sxs-lookup"><span data-stu-id="0ca49-845">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="0ca49-846">La séquence de génération de code pour une instance ou une méthode virtuelle doit transmettre cette référence d’instance (qui ne doit pas être une référence null) avant tout argument visible par l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-846">The argument-building code sequence for an instance or virtual method must push that instance reference (which must not be a null reference) before any of the user-visible arguments.</span></span>  
  
 <span data-ttu-id="0ca49-847"><xref:System.Security.SecurityException> peut être levée si le système de sécurité n’accorde pas l’accès de l’appelant à la méthode appelée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-847"><xref:System.Security.SecurityException> may be thrown if the system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="0ca49-848">La vérification de sécurité peut se produire lorsque les instructions de langage MSIL (Microsoft Intermediate Language) sont converties en code natif, plutôt que lors de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="0ca49-848">The security check can occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="0ca49-849">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> méthodes peuvent être utilisées pour effectuer un `calli` obtenir des instructions sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-849">The following <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> methods can be used to perform a `calli` instruction on the stack.</span></span> <span data-ttu-id="0ca49-850">Notez que `calli` doit être appelé via les méthodes ci-dessous au lieu d’utiliser la <xref:System.Reflection.Emit.ILGenerator.Emit%2A> classe pour placer l’instruction directement sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-850">Note that `calli` should be called through the below methods rather than using the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> class to place the instruction directly on the stack.</span></span>  
  
-   <span data-ttu-id="0ca49-851">ILGenerator.EmitCalli (Opcode, CallingConventions, Type, Type [], Type[]) pour les appels à l’aide d’une convention d’appel managée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-851">ILGenerator.EmitCalli(Opcode, CallingConventions, Type, Type[], Type[]) for calls using a managed calling convention.</span></span>  
  
-   <span data-ttu-id="0ca49-852">ILGenerator.EmitCalli (Opcode, Type[]) CallingConvention, Type, pour les appels à l’aide d’une convention d’appel non managée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-852">ILGenerator.EmitCalli(Opcode, CallingConvention, Type, Type[]) for calls using an unmanaged calling convention.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Callvirt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Callvirt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Callvirt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Callvirt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Callvirt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Callvirt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-853">Appelle une méthode à liaison tardive sur un objet, en exécutant un push de la valeur de retour dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-853">Calls a late-bound method on an object, pushing the return value onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-854">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-854">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-855">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-855">Format</span></span>|<span data-ttu-id="0ca49-856">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-856">Assembly Format</span></span>|<span data-ttu-id="0ca49-857">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-857">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-858">6F < `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-858">6F < `T` ></span></span>|<span data-ttu-id="0ca49-859">callvirt `method`</span><span class="sxs-lookup"><span data-stu-id="0ca49-859">callvirt `method`</span></span>|<span data-ttu-id="0ca49-860">Appelle une méthode spécifique associée `obj`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-860">Calls a specific method associated with `obj`.</span></span>|  
  
 <span data-ttu-id="0ca49-861">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-861">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-862">Une référence d’objet `obj` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-862">An object reference `obj` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-863">Arguments de méthode `arg1` via `argN` sont envoyées dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-863">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-864">Arguments de méthode `arg1` via `argN` et la référence d’objet `obj` sont dépilés ; l’appel de méthode est effectué avec ces arguments et le contrôle est transféré à la méthode dans `obj` référencé par la méthode jeton de métadonnées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-864">Method arguments `arg1` through `argN` and the object reference `obj` are popped from the stack; the method call is performed with these arguments and control is transferred to the method in `obj` referred to by the method metadata token.</span></span> <span data-ttu-id="0ca49-865">Lorsque vous avez terminé, une valeur de retour est générée par la méthode de l’appelé et envoyée à l’appelant.</span><span class="sxs-lookup"><span data-stu-id="0ca49-865">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
4.  <span data-ttu-id="0ca49-866">La valeur de retour est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-866">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-867">La `callvirt` instruction appelle une méthode à liaison tardive sur un objet.</span><span class="sxs-lookup"><span data-stu-id="0ca49-867">The `callvirt` instruction calls a late-bound method on an object.</span></span> <span data-ttu-id="0ca49-868">Autrement dit, la méthode est choisie en fonction du type de runtime de `obj` plutôt que de la classe de compilation visible dans le pointeur de la méthode.</span><span class="sxs-lookup"><span data-stu-id="0ca49-868">That is, the method is chosen based on the runtime type of `obj` rather than the compile-time class visible in the method pointer.</span></span> <span data-ttu-id="0ca49-869">`Callvirt` peut être utilisé pour appeler à la fois virtuels et de méthodes d’instance.</span><span class="sxs-lookup"><span data-stu-id="0ca49-869">`Callvirt` can be used to call both virtual and instance methods.</span></span> <span data-ttu-id="0ca49-870">Le `callvirt` instruction peut être immédiatement précédée d’un `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) pour spécifier que le frame de pile actuel doit être libéré avant de transférer le contrôle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-870">The `callvirt` instruction may be immediately preceded by a `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefix to specify that the current stack frame should be released before transferring control.</span></span> <span data-ttu-id="0ca49-871">Si l’appel transfère le contrôle à une méthode de confiance plus élevé que la méthode d’origine, le frame de pile ne sera pas publié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-871">If the call would transfer control to a method of higher trust than the original method the stack frame will not be released.</span></span>  
  
 <span data-ttu-id="0ca49-872">Le jeton de métadonnées de méthode fournit le nom, la classe et la signature de la méthode à appeler.</span><span class="sxs-lookup"><span data-stu-id="0ca49-872">The method metadata token provides the name, class and signature of the method to call.</span></span> <span data-ttu-id="0ca49-873">La classe associée `obj` est la classe dont il s’agit d’une instance.</span><span class="sxs-lookup"><span data-stu-id="0ca49-873">The class associated with `obj` is the class of which it is an instance.</span></span> <span data-ttu-id="0ca49-874">Si la classe définit une méthode non statique qui correspond au nom de la méthode indiquée et signature, cette méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-874">If the class defines a non-static method that matches the indicated method name and signature, this method is called.</span></span> <span data-ttu-id="0ca49-875">Dans le cas contraire, toutes les classes dans la chaîne de la classe de base de cette classe sont vérifiées dans l’ordre.</span><span class="sxs-lookup"><span data-stu-id="0ca49-875">Otherwise all classes in the base class chain of this class are checked in order.</span></span> <span data-ttu-id="0ca49-876">C’est une erreur si aucune méthode n’est trouvée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-876">It is an error if no method is found.</span></span>  
  
 <span data-ttu-id="0ca49-877">`Callvirt` Dépile l’objet et les arguments associés de la pile d’évaluation avant d’appeler la méthode.</span><span class="sxs-lookup"><span data-stu-id="0ca49-877">`Callvirt` pops the object and the associated arguments off the evaluation stack before calling the method.</span></span> <span data-ttu-id="0ca49-878">Si la méthode a une valeur de retour, elle est ajoutée à la pile à l’achèvement de la méthode.</span><span class="sxs-lookup"><span data-stu-id="0ca49-878">If the method has a return value, it is pushed on the stack upon method completion.</span></span> <span data-ttu-id="0ca49-879">Sur le côté de l’appelé, le `obj` paramètre est accessible en tant qu’argument 0, `arg1` en tant qu’argument 1 et ainsi de suite.</span><span class="sxs-lookup"><span data-stu-id="0ca49-879">On the callee side, the `obj` parameter is accessed as argument 0, `arg1` as argument 1, and so on.</span></span>  
  
 <span data-ttu-id="0ca49-880">Les arguments sont placés sur la pile dans l’ordre de gauche à droite.</span><span class="sxs-lookup"><span data-stu-id="0ca49-880">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="0ca49-881">Autrement dit, le premier argument est calculé et placé sur la pile, puis le deuxième argument, puis le troisième, jusqu'à ce que tous les arguments nécessaires sont située en haut de la pile dans l’ordre décroissant.</span><span class="sxs-lookup"><span data-stu-id="0ca49-881">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="0ca49-882">La référence d’instance `obj` (toujours obligatoire pour `callvirt`) doivent être envoyées avant les arguments visible par l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-882">The instance reference `obj` (always required for `callvirt`) must be pushed before any of the user-visible arguments.</span></span> <span data-ttu-id="0ca49-883">La signature (contenue dans le jeton de métadonnées) pas besoin de contenir une entrée dans la liste de paramètres pour ce pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-883">The signature (carried in the metadata token) need not contain an entry in the parameter list for the this pointer.</span></span>  
  
 <span data-ttu-id="0ca49-884">Notez qu’une méthode virtuelle peut également être appelée à l’aide de la <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-884">Note that a virtual method can also be called using the <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span></span>  
  
 <span data-ttu-id="0ca49-885"><xref:System.MissingMethodException> est levée si une méthode non statique avec le nom indiqué et la signature est introuvable dans la classe associée `obj` ou l’un de ses classes de base.</span><span class="sxs-lookup"><span data-stu-id="0ca49-885"><xref:System.MissingMethodException> is thrown if a non-static method with the indicated name and signature could not be found in the class associated with `obj` or any of its base classes.</span></span> <span data-ttu-id="0ca49-886">Cela est généralement détecté lorsque les instructions de langage MSIL (Microsoft Intermediate Language) sont converties en code natif, plutôt que lors de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="0ca49-886">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="0ca49-887"><xref:System.NullReferenceException> est levé si obj est null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-887"><xref:System.NullReferenceException> is thrown if obj is null.</span></span>  
  
 <span data-ttu-id="0ca49-888"><xref:System.Security.SecurityException> est levée si le système de sécurité n’accorde pas l’appelant l’accès à la méthode appelée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-888"><xref:System.Security.SecurityException> is thrown if system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="0ca49-889">La vérification de sécurité peut se produire lorsque le fichier CIL est converti en code natif plutôt qu’au moment de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="0ca49-889">The security check may occur when the CIL is converted to native code rather than at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0ca49-890">Lorsque vous appelez des méthodes de System.Object sur des types valeur, envisagez d’utiliser le `constrained` avec le préfixe le `callvirt` instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-890">When calling methods of System.Object on value types, consider using the `constrained` prefix with the `callvirt` instruction.</span></span> <span data-ttu-id="0ca49-891">Cela supprime la nécessité d’émettre un IL différent en fonction de la valeur déterminant le type de valeur substitue la méthode, en évitant un problème potentiel de la gestion des versions.</span><span class="sxs-lookup"><span data-stu-id="0ca49-891">This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem.</span></span> <span data-ttu-id="0ca49-892">Envisagez d’utiliser le `constrained` préfixe lors de l’appel des méthodes d’interface sur des types valeur, étant donné que la méthode de type valeur mise en œuvre de la méthode d’interface peut être modifié à l’aide un `MethodImpl`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-892">Consider using the `constrained` prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="0ca49-893">Ces problèmes sont décrits plus en détail dans le <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span><span class="sxs-lookup"><span data-stu-id="0ca49-893">These issues are described in more detail in the <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span></span>  
  
 <span data-ttu-id="0ca49-894">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `callvirt` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-894">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `callvirt` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-895">ILGenerator.Emit (OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="0ca49-895">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="0ca49-896">ILGenerator.EmitCall (OpCode, MethodInfo, Type[])</span><span class="sxs-lookup"><span data-stu-id="0ca49-896">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Castclass">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Castclass;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Castclass" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Castclass" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Castclass As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Castclass;" />
      <MemberSignature Language="F#" Value=" staticval mutable Castclass : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Castclass" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-897">Tente d'effectuer un cast d'un objet passé par référence en classe spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-897">Attempts to cast an object passed by reference to the specified class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-898">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-898">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-899">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-899">Format</span></span>|<span data-ttu-id="0ca49-900">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-900">Assembly Format</span></span>|<span data-ttu-id="0ca49-901">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-901">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-902">74 < `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-902">74 < `T` ></span></span>|<span data-ttu-id="0ca49-903">castclass `class`</span><span class="sxs-lookup"><span data-stu-id="0ca49-903">castclass `class`</span></span>|<span data-ttu-id="0ca49-904">Convertit un objet vers un nouvel objet de type `class`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-904">Casts an object to a new object of type `class`.</span></span>|  
  
 <span data-ttu-id="0ca49-905">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-905">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-906">Une référence d’objet est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-906">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-907">La référence d’objet est retirée de la pile ; l’objet référencé est convertie comme spécifié `class`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-907">The object reference is popped from the stack; the referenced object is cast as the specified `class`.</span></span>  
  
3.  <span data-ttu-id="0ca49-908">En cas de réussite, une nouvelle référence d’objet est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-908">If successful, a new object reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-909">Le `castclass` instruction tente d’effectuer un cast de la référence d’objet (type `O`) située en haut de la pile pour une classe spécifiée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-909">The `castclass` instruction attempts to cast the object reference (type `O`) atop the stack to a specified class.</span></span> <span data-ttu-id="0ca49-910">La nouvelle classe est spécifiée par un jeton de métadonnées indiquant la classe souhaitée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-910">The new class is specified by a metadata token indicating the desired class.</span></span> <span data-ttu-id="0ca49-911">Si la classe de l’objet en haut de la pile n’implémente pas la nouvelle classe (en supposant que la nouvelle classe est une interface) et n’est pas une classe dérivée de la nouvelle classe puis un <xref:System.InvalidCastException> est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-911">If the class of the object on the top of the stack does not implement the new class (assuming the new class is an interface) and is not a derived class of the new class then an <xref:System.InvalidCastException> is thrown.</span></span> <span data-ttu-id="0ca49-912">Si la référence d’objet est une référence null, `castclass` réussit et retourne le nouvel objet comme une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-912">If the object reference is a null reference, `castclass` succeeds and returns the new object as a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-913"><xref:System.InvalidCastException> est levé si obj ne peut pas être casté en classe.</span><span class="sxs-lookup"><span data-stu-id="0ca49-913"><xref:System.InvalidCastException> is thrown if obj cannot be cast to class.</span></span>  
  
 <span data-ttu-id="0ca49-914"><xref:System.TypeLoadException> est levée si la classe est introuvable.</span><span class="sxs-lookup"><span data-stu-id="0ca49-914"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="0ca49-915">Cela est généralement détecté lorsqu’une instruction de langage MSIL (Microsoft Intermediate Language) est convertie en code natif, plutôt que lors de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="0ca49-915">This is typically detected when a Microsoft Intermediate Language (MSIL)instruction is converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="0ca49-916">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `castclass` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-916">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `castclass` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-917">ILGenerator.Emit (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="0ca49-917">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ceq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ceq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ceq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ceq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ceq;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ceq : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ceq" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-918">Compare deux valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-918">Compares two values.</span>
          </span>
          <span data-ttu-id="0ca49-919">Si elles sont égales, la valeur entière 1 (<see langword="(int32" />) fait l'objet d'un push dans la pile d'évaluation ; sinon, le push est exécuté sur la valeur 0 (<see langword="int32" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-919">If they are equal, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-920">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-920">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-921">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-921">Format</span></span>|<span data-ttu-id="0ca49-922">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-922">Assembly Format</span></span>|<span data-ttu-id="0ca49-923">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-923">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-924">FE 01</span><span class="sxs-lookup"><span data-stu-id="0ca49-924">FE 01</span></span>|<span data-ttu-id="0ca49-925">ceq</span><span class="sxs-lookup"><span data-stu-id="0ca49-925">ceq</span></span>|<span data-ttu-id="0ca49-926">Exécute un push de 1 si `value1` est égal à `value2`; sinon exécute un push de 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-926">Pushes 1 if `value1` equals `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="0ca49-927">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-927">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-928">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-928">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-929">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-929">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-930">`value2` et `value1` sont dépilés de la pile ; `value1` est comparé à `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-930">`value2` and `value1` are popped from the stack; `value1` is compared to `value2`.</span></span>  
  
4.  <span data-ttu-id="0ca49-931">Si `value1` est égal à `value2`, 1 est placé sur la pile ; sinon, 0 est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-931">If `value1` is equal to `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-932">Le `ceq` instruction compare `value1` et `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-932">The `ceq` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="0ca49-933">Si `value1` est égal à `value2`, la valeur 1 (de type `int32`) est ajoutée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-933">If `value1` is equal to `value2`, then 1 (of type `int32`) is pushed on the stack.</span></span> <span data-ttu-id="0ca49-934">Sinon, 0 (de type `int32`) est ajoutée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-934">Otherwise 0 (of type `int32`) is pushed on the stack.</span></span>  
  
 <span data-ttu-id="0ca49-935">Pour un nombre à virgule flottante, `ceq` retourne 0 si les nombres ne sont pas ordonnés (ou les deux sont des valeurs NaN).</span><span class="sxs-lookup"><span data-stu-id="0ca49-935">For floating-point number, `ceq` will return 0 if the numbers are unordered (either or both are NaN).</span></span> <span data-ttu-id="0ca49-936">Les valeurs infinies sont égales à eux-mêmes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-936">The infinite values are equal to themselves.</span></span>  
  
 <span data-ttu-id="0ca49-937">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ceq` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-937">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ceq` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-938">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-938">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cgt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cgt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-939">Compare deux valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-939">Compares two values.</span>
          </span>
          <span data-ttu-id="0ca49-940">Si la première valeur est supérieure à la deuxième, la valeur entière 1 (<see langword="(int32" />) fait l'objet d'un push dans la pile d'évaluation ; sinon, le push est exécuté sur la valeur 0 (<see langword="int32" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-940">If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-941">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-941">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-942">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-942">Format</span></span>|<span data-ttu-id="0ca49-943">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-943">Assembly Format</span></span>|<span data-ttu-id="0ca49-944">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-944">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-945">FE 02</span><span class="sxs-lookup"><span data-stu-id="0ca49-945">FE 02</span></span>|<span data-ttu-id="0ca49-946">cgt</span><span class="sxs-lookup"><span data-stu-id="0ca49-946">cgt</span></span>|<span data-ttu-id="0ca49-947">Exécute un push de 1 si `value1` est supérieur à `value2`; sinon exécute un push de 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-947">Pushes 1 if `value1` is greater than `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="0ca49-948">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-948">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-949">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-949">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-950">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-950">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-951">`value2` et `value1` sont dépilés de la pile ; `cgt` teste si `value1` est supérieur à `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-951">`value2` and `value1` are popped from the stack; `cgt` tests if `value1` is greater than `value2`.</span></span>  
  
4.  <span data-ttu-id="0ca49-952">Si `value1` est supérieur à `value2`, 1 est placé sur la pile ; sinon, 0 est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-952">If `value1` is greater than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-953">Le `cgt` instruction compare `value1` et `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-953">The `cgt` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="0ca49-954">Si `value1` est strictement supérieur à `value2`, puis un `int32` la valeur 1 est ajoutée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-954">If `value1` is strictly greater than `value2`, then an `int32` value of 1 is pushed on the stack.</span></span> <span data-ttu-id="0ca49-955">Sinon, un `int32` la valeur 0 est ajoutée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-955">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
-   <span data-ttu-id="0ca49-956">Pour les nombres à virgule flottante, `cgt` retourne 0 si les nombres ne sont pas ordonnés (autrement dit, si un ou les deux arguments sont des valeurs NaN).</span><span class="sxs-lookup"><span data-stu-id="0ca49-956">For floating-point numbers, `cgt` returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).</span></span>  
  
 <span data-ttu-id="0ca49-957">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `cgt` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-957">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cgt` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-958">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-958">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cgt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-959">Compare deux valeurs non signées ou non ordonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-959">Compares two unsigned or unordered values.</span>
          </span>
          <span data-ttu-id="0ca49-960">Si la première valeur est supérieure à la deuxième, la valeur entière 1 (<see langword="(int32" />) fait l'objet d'un push dans la pile d'évaluation ; sinon, le push est exécuté sur la valeur 0 (<see langword="int32" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-960">If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-961">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-961">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-962">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-962">Format</span></span>|<span data-ttu-id="0ca49-963">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-963">Assembly Format</span></span>|<span data-ttu-id="0ca49-964">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-964">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-965">FE 03</span><span class="sxs-lookup"><span data-stu-id="0ca49-965">FE 03</span></span>|<span data-ttu-id="0ca49-966">cgt.un</span><span class="sxs-lookup"><span data-stu-id="0ca49-966">cgt.un</span></span>|<span data-ttu-id="0ca49-967">Exécute un push de 1 si `value1` est supérieur à `value2`; sinon exécute un push de 0 (valeurs non signées).</span><span class="sxs-lookup"><span data-stu-id="0ca49-967">Pushes 1 if `value1` is greater than `value2`; else pushes 0 (unsigned values).</span></span>|  
  
 <span data-ttu-id="0ca49-968">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-968">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-969">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-969">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-970">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-970">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-971">`value2` et `value1` sont dépilés de la pile ; `cgt.un` teste si `value1` est supérieur à `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-971">`value2` and `value1` are popped from the stack; `cgt.un` tests if `value1` is greater than `value2`.</span></span>  
  
4.  <span data-ttu-id="0ca49-972">Si `value1` est supérieur à `value2`, 1 est placé sur la pile ; sinon, 0 est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-972">If `value1` is greater than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-973">Un `int32` la valeur 1 est ajoutée à la pile si une des opérations suivantes est `true` :</span><span class="sxs-lookup"><span data-stu-id="0ca49-973">An `int32` value of 1 is pushed on the stack if any of the following is `true` :</span></span>  
  
 <span data-ttu-id="0ca49-974">Pour les nombres à virgule flottante, `value1` n’est pas ordonné par rapport à `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-974">For floating-point numbers, `value1` is not ordered with respect to `value2`.</span></span>  
  
 <span data-ttu-id="0ca49-975">Pour les valeurs entières, `value1` est strictement supérieur à `value2` lorsqu’elles sont considérées comme des nombres non signés.</span><span class="sxs-lookup"><span data-stu-id="0ca49-975">For integer values, `value1` is strictly greater than `value2` when considered as unsigned numbers.</span></span>  
  
 <span data-ttu-id="0ca49-976">Sinon, un `int32` la valeur 0 est ajoutée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-976">Otherwise an `int32` value of 0 is pushed on the stack.</span></span>  
  
 <span data-ttu-id="0ca49-977">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `cgt.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-977">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cgt.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-978">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-978">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ckfinite">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ckfinite;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ckfinite" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ckfinite As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ckfinite;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ckfinite : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-979">Lève <see cref="T:System.ArithmeticException" /> si la valeur n'est pas un nombre fini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-979">Throws <see cref="T:System.ArithmeticException" /> if value is not a finite number.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-980">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-980">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-981">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-981">Format</span></span>|<span data-ttu-id="0ca49-982">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-982">Assembly Format</span></span>|<span data-ttu-id="0ca49-983">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-983">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-984">C3</span><span class="sxs-lookup"><span data-stu-id="0ca49-984">C3</span></span>|<span data-ttu-id="0ca49-985">ckfinite</span><span class="sxs-lookup"><span data-stu-id="0ca49-985">ckfinite</span></span>|<span data-ttu-id="0ca49-986">lever <xref:System.ArithmeticException> si la valeur n’est pas un nombre fini.</span><span class="sxs-lookup"><span data-stu-id="0ca49-986">throw <xref:System.ArithmeticException> if value is not a finite number.</span></span>|  
  
 <span data-ttu-id="0ca49-987">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-987">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-988">`value` est placé sur la pile...</span><span class="sxs-lookup"><span data-stu-id="0ca49-988">`value` is pushed onto the stack..</span></span>  
  
2.  <span data-ttu-id="0ca49-989">`value` est retirée de la pile et la `ckfinite` instruction est exécutée sur celui-ci.</span><span class="sxs-lookup"><span data-stu-id="0ca49-989">`value` is popped from the stack and the `ckfinite` instruction is performed on it.</span></span>  
  
3.  <span data-ttu-id="0ca49-990">`value` sont réinsérées dans la pile si aucune exception n’est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-990">`value` is pushed back onto the stack if no exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-991">Le `ckfinite instruction` lève <xref:System.ArithmeticException> si `value` (un nombre à virgule flottante) est soit un « not a number » valeur (NaN) ou un `+-` valeur d’infini.</span><span class="sxs-lookup"><span data-stu-id="0ca49-991">The `ckfinite instruction` throws <xref:System.ArithmeticException> if `value` (a floating-point number) is either a "not a number" value (NaN) or a `+-` infinity value.</span></span> <span data-ttu-id="0ca49-992">`Ckfinite` laisse la valeur dans la pile si aucune exception n’est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-992">`Ckfinite` leaves the value on the stack if no exception is thrown.</span></span> <span data-ttu-id="0ca49-993">L’exécution n’est pas spécifiée si `value` n’est pas un nombre à virgule flottante.</span><span class="sxs-lookup"><span data-stu-id="0ca49-993">Execution is unspecified if `value` is not a floating-point number.</span></span>  
  
 <span data-ttu-id="0ca49-994"><xref:System.ArithmeticException> est levée si `value` n’est pas un nombre « normal ».</span><span class="sxs-lookup"><span data-stu-id="0ca49-994"><xref:System.ArithmeticException> is thrown if `value` is not a 'normal' number.</span></span>  
  
 <span data-ttu-id="0ca49-995">Notez qu’une exception spécifique ou une classe dérivée de <xref:System.ArithmeticException> peut être plus appropriée, en passant la valeur incorrecte au gestionnaire d’exceptions.</span><span class="sxs-lookup"><span data-stu-id="0ca49-995">Note that a special exception or a derived class of <xref:System.ArithmeticException> may be more appropriate, passing the incorrect value to the exception handler.</span></span>  
  
 <span data-ttu-id="0ca49-996">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ckfinite` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-996">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ckfinite` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-997">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-997">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Clt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Clt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-998">Compare deux valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-998">Compares two values.</span>
          </span>
          <span data-ttu-id="0ca49-999">Si la première valeur est inférieure à la deuxième, la valeur entière 1 (<see langword="(int32" />) fait l'objet d'un push dans la pile d'évaluation ; sinon, le push est exécuté sur la valeur 0 (<see langword="int32" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-999">If the first value is less than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1000">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1000">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1001">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1001">Format</span></span>|<span data-ttu-id="0ca49-1002">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1002">Assembly Format</span></span>|<span data-ttu-id="0ca49-1003">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1003">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1004">FE 04</span><span class="sxs-lookup"><span data-stu-id="0ca49-1004">FE 04</span></span>|<span data-ttu-id="0ca49-1005">clt</span><span class="sxs-lookup"><span data-stu-id="0ca49-1005">clt</span></span>|<span data-ttu-id="0ca49-1006">Exécute un push de 1 si `value1` est inférieure à `value2`; sinon exécute un push de 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1006">Pushes 1 if `value1` is less than `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="0ca49-1007">Le comportement de transition de pile, dans un ordre séquentiel, est : `value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1007">The stack transitional behavior, in sequential order, is: `value1` is pushed onto the stack.</span></span>  
  
1.  <span data-ttu-id="0ca49-1008">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1008">`value2` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1009">`value2` et `value1` sont dépilés de la pile ; `clt` teste si `value1` est inférieure à `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1009">`value2` and `value1` are popped from the stack; `clt` tests if `value1` is less than `value2`.</span></span>  
  
3.  <span data-ttu-id="0ca49-1010">Si `value1` est inférieure à `value2`, 1 est placé sur la pile ; sinon, 0 est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1010">If `value1` is less than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1011">Le `clt` instruction compare `value1` et `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1011">The `clt` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="0ca49-1012">Si `value1` est strictement inférieur à `value2`, puis un `int32` la valeur 1 est ajoutée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1012">If `value1` is strictly less than `value2`, then an `int32` value of 1 is pushed on the stack.</span></span> <span data-ttu-id="0ca49-1013">Sinon, un `int32` la valeur 0 est ajoutée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1013">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
-   <span data-ttu-id="0ca49-1014">Pour les nombres à virgule flottante, `clt` retourne 0 si les nombres ne sont pas ordonnés (autrement dit, si un ou les deux arguments sont des valeurs NaN).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1014">For floating-point numbers, `clt` returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).</span></span>  
  
 <span data-ttu-id="0ca49-1015">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `clt` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1015">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `clt` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1016">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1016">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Clt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1017">Compare les valeurs non signées ou non ordonnées <paramref name="value1" /> et <paramref name="value2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1017">Compares the unsigned or unordered values <paramref name="value1" /> and <paramref name="value2" />.</span>
          </span>
          <span data-ttu-id="0ca49-1018">Si <paramref name="value1" /> est inférieur à <paramref name="value2" />, la valeur entière 1 (<see langword="(int32" />) fait alors l'objet d'un push dans la pile d'évaluation ; sinon, le push est exécuté sur la valeur 0 (<see langword="int32" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1018">If <paramref name="value1" /> is less than <paramref name="value2" />, then the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1019">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1019">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1020">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1020">Format</span></span>|<span data-ttu-id="0ca49-1021">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1021">Assembly Format</span></span>|<span data-ttu-id="0ca49-1022">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1022">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1023">FE 05</span><span class="sxs-lookup"><span data-stu-id="0ca49-1023">FE 05</span></span>|<span data-ttu-id="0ca49-1024">clt.un</span><span class="sxs-lookup"><span data-stu-id="0ca49-1024">clt.un</span></span>|<span data-ttu-id="0ca49-1025">Exécute un push de 1 si `value1` est inférieure à `value2`; sinon exécute un push de 0 (valeurs non signées).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1025">Pushes 1 if `value1` is less than `value2`; else pushes 0 (unsigned values).</span></span>|  
  
 <span data-ttu-id="0ca49-1026">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1026">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1027">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1027">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1028">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1028">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-1029">`value2` et `value1` sont dépilés de la pile ; `clt.un` teste si `value1` est inférieure à `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1029">`value2` and `value1` are popped from the stack; `clt.un` tests if `value1` is less than `value2`.</span></span>  
  
4.  <span data-ttu-id="0ca49-1030">Si `value1` est inférieure à `value2`, 1 est placé sur la pile ; sinon, 0 est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1030">If `value1` is less than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1031">Le `clt.un` instruction compare `value1` et `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1031">The `clt.un` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="0ca49-1032">Un `int32` la valeur 1 est ajoutée à la pile si une des opérations suivantes est vraie :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1032">An `int32` value of 1 is pushed on the stack if any of the following is true:</span></span>  
  
-   <span data-ttu-id="0ca49-1033">`value1` est strictement inférieur à `value2` (comme pour `clt`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1033">`value1` is strictly less than `value2` (as for `clt`).</span></span>  
  
-   <span data-ttu-id="0ca49-1034">Pour les nombres à virgule flottante, `value1` n’est pas ordonné par rapport à `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1034">For floating-point numbers, `value1` is not ordered with respect to `value2`.</span></span>  
  
-   <span data-ttu-id="0ca49-1035">Pour les valeurs entières, `value1` est strictement inférieur à `value2` lorsqu’elles sont considérées comme des nombres non signés.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1035">For integer values, `value1` is strictly less than `value2` when considered as unsigned numbers.</span></span>  
  
 <span data-ttu-id="0ca49-1036">Sinon, un `int32` la valeur 0 est ajoutée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1036">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1037">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `clt.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1037">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `clt.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1038">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1038">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constrained">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Constrained;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Constrained" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Constrained" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Constrained As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Constrained;" />
      <MemberSignature Language="F#" Value=" staticval mutable Constrained : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Constrained" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1039">Contraint le type sur lequel un appel à une méthode virtuelle est effectué.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1039">Constrains the type on which a virtual method call is made.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1040">Le tableau suivant répertorie les instructions format hexadécimal et Microsoft intermediate language (MSIL) assembly, ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1040">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1041">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1041">Format</span></span>|<span data-ttu-id="0ca49-1042">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1042">Assembly Format</span></span>|<span data-ttu-id="0ca49-1043">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1043">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1044">FE 16 &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-1044">FE 16 < `T` ></span></span>|<span data-ttu-id="0ca49-1045">contrainte.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1045">constrained.</span></span> `thisType`|<span data-ttu-id="0ca49-1046">Appel d’une méthode virtuelle sur un type contraint à être de type `T`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1046">Call a virtual method on a type constrained to be type `T`.</span></span>|  
  
 <span data-ttu-id="0ca49-1047">Le `constrained` préfixe est autorisé uniquement sur un `callvirt` instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1047">The `constrained` prefix is permitted only on a `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="0ca49-1048">L’état de la pile MSIL à ce stade doit être comme suit :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1048">The state of the MSIL stack at this point must be as follows:</span></span>  
  
1.  <span data-ttu-id="0ca49-1049">Un pointeur managé, `ptr`, est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1049">A managed pointer, `ptr`, is pushed onto the stack.</span></span> <span data-ttu-id="0ca49-1050">Le type de `ptr` doit être un pointeur managé (`&`) à `thisType`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1050">The type of `ptr` must be a managed pointer (`&`) to `thisType`.</span></span> <span data-ttu-id="0ca49-1051">Notez que cela est différent du cas d’un sans préfixe `callvirt` qui attend une référence de `thisType`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1051">Note that this is different from the case of an unprefixed `callvirt` instruction, which expects a reference of `thisType`.</span></span>  
  
2.  <span data-ttu-id="0ca49-1052">Arguments de méthode `arg1` via `argN` sont envoyées dans la pile, comme avec un sans préfixe `callvirt` instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1052">Method arguments `arg1` through `argN` are pushed onto the stack, just as with an unprefixed `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="0ca49-1053">Le `constrained` préfixe est conçu pour permettre `callvirt` instructions effectuées uniforme de façon indépendante si `thisType` est un type valeur ou un type référence.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1053">The `constrained` prefix is designed to allow `callvirt` instructions to be made in a uniform way independent of whether `thisType` is a value type or a reference type.</span></span>  
  
 <span data-ttu-id="0ca49-1054">Quand un `callvirt` `method` l’instruction a été préfixée par `constrained` `thisType`, l’instruction est exécutée comme suit :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1054">When a `callvirt` `method` instruction has been prefixed by `constrained` `thisType`, the instruction is executed as follows:</span></span>  
  
-   <span data-ttu-id="0ca49-1055">Si `thisType` est un type référence (par opposition à un type valeur) puis `ptr` est déréférencé et passé en tant que le pointeur 'this' à la `callvirt` de `method`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1055">If `thisType` is a reference type (as opposed to a value type) then `ptr` is dereferenced and passed as the 'this' pointer to the `callvirt` of `method`.</span></span>  
  
-   <span data-ttu-id="0ca49-1056">Si `thisType` est un type valeur et `thisType` implémente `method` puis `ptr` est passée non modifié comme le pointeur 'this' à un `call` `method` instruction, pour l’implémentation de `method` par `thisType`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1056">If `thisType` is a value type and `thisType` implements `method` then `ptr` is passed unmodified as the 'this' pointer to a `call` `method` instruction, for the implementation of `method` by `thisType`.</span></span>  
  
-   <span data-ttu-id="0ca49-1057">Si `thisType` est un type valeur et `thisType` n’implémente pas `method` puis `ptr` est déréférencé, boxed et passé en tant que le pointeur 'this' à la `callvirt` `method` instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1057">If `thisType` is a value type and `thisType` does not implement `method` then `ptr` is dereferenced, boxed, and passed as the 'this' pointer to the `callvirt` `method` instruction.</span></span>  
  
 <span data-ttu-id="0ca49-1058">Ce dernier cas peut se produire uniquement lorsque `method` a été définie sur <xref:System.Object>, <xref:System.ValueType>, ou <xref:System.Enum> et ne pas remplacé par `thisType`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1058">This last case can occur only when `method` was defined on <xref:System.Object>, <xref:System.ValueType>, or <xref:System.Enum> and not overridden by `thisType`.</span></span> <span data-ttu-id="0ca49-1059">Dans ce cas, la conversion boxing entraîne une copie de l’objet d’origine qu’il veut.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1059">In this case, the boxing causes a copy of the original object to be made.</span></span> <span data-ttu-id="0ca49-1060">Toutefois, car aucune des méthodes de <xref:System.Object>, <xref:System.ValueType>, et <xref:System.Enum> modifier l’état de l’objet, cette action ne peut pas être détectée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1060">However, because none of the methods of <xref:System.Object>, <xref:System.ValueType>, and <xref:System.Enum> modify the state of the object, this fact cannot be detected.</span></span>  
  
 <span data-ttu-id="0ca49-1061">Le `constrained` préfixe prend en charge les générateurs IL qui créent du code générique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1061">The `constrained` prefix supports IL generators that create generic code.</span></span> <span data-ttu-id="0ca49-1062">Normalement la `callvirt` instruction n’est pas valide sur les types valeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1062">Normally the `callvirt` instruction is not valid on value types.</span></span> <span data-ttu-id="0ca49-1063">Au lieu de cela, il est nécessaire que les compilateurs de langage intermédiaire exécutent de manière efficace la transformation « this » décrite ci-dessus au moment de la compilation, selon le type de `ptr` et la méthode appelée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1063">Instead it is required that IL compilers effectively perform the 'this' transformation outlined above at compile time, depending on the type of `ptr` and the method being called.</span></span> <span data-ttu-id="0ca49-1064">Toutefois, lorsque `ptr` est un type générique qui est inconnu au moment de la compilation, il n’est pas possible d’effectuer cette transformation au moment de la compilation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1064">However, when `ptr` is a generic type that is unknown at compile time, it is not possible to make this transformation at compile time.</span></span>  
  
 <span data-ttu-id="0ca49-1065">Le `constrained` opcode permet aux compilateurs IL d’effectuer un appel à une fonction virtuelle uniforme façon de s’il `ptr` est un type valeur ou un type référence.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1065">The `constrained` opcode allows IL compilers to make a call to a virtual function in a uniform way independent of whether `ptr` is a value type or a reference type.</span></span> <span data-ttu-id="0ca49-1066">Même s’il est destiné à être le cas où `thisType` est une variable de type générique, le `constrained` peut réduire la complexité de la génération d’appels virtuels dans des langages qui masquent la distinction entre les types valeur et utilisez le préfixe également fonctionne pour les types non génériques et types de référence.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1066">Although it is intended for the case where `thisType` is a generic type variable, the `constrained` prefix also works for nongeneric types and can reduce the complexity of generating virtual calls in languages that hide the distinction between value types and reference types.</span></span>  
  
 <span data-ttu-id="0ca49-1067">À l’aide de la `constrained` préfixe évite également d’éventuels problèmes de versioning avec les types valeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1067">Using the `constrained` prefix also avoids potential versioning problems with value types.</span></span> <span data-ttu-id="0ca49-1068">Si le `constrained` préfixe n’est pas utilisé, IL différent doit être émis selon ou non un type valeur substitue à une méthode de System.Object.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1068">If the `constrained` prefix is not used, different IL must be emitted depending on whether or not a value type overrides a method of System.Object.</span></span> <span data-ttu-id="0ca49-1069">Par exemple, si un type valeur `V` substitue la méthode Object.ToString (), un `call` `V.ToString()` l’instruction est émise ; dans ce cas, un `box` instruction et un `callvirt` `Object.ToString()` instruction sont émis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1069">For example, if a value type `V` overrides the Object.ToString() method, a `call` `V.ToString()` instruction is emitted; if it does not, a `box` instruction and a `callvirt` `Object.ToString()` instruction are emitted.</span></span> <span data-ttu-id="0ca49-1070">Un problème de contrôle de version peut se produire dans le premier cas, si la substitution est supprimée ultérieurement et dans ce cas si une substitution est ajoutée ultérieurement.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1070">A versioning problem can arise in the former case if the override is later removed, and in the latter case if an override is later added.</span></span>  
  
 <span data-ttu-id="0ca49-1071">Le `constrained` préfixe peut également servir pour l’appel de méthodes d’interface sur des types valeur, car la méthode de type valeur mise en œuvre de la méthode d’interface peut être changée à l’aide un `MethodImpl`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1071">The `constrained` prefix can also be used for invocation of interface methods on value types, because the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="0ca49-1072">Si le `constrained` préfixe n’est pas utilisé, le compilateur est forcé de choisir les de la valeur de méthodes du type à lier au moment de la compilation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1072">If the `constrained` prefix is not used, the compiler is forced to choose which of the value type's methods to bind to at compile time.</span></span> <span data-ttu-id="0ca49-1073">À l’aide de la `constrained` préfixe permet au code MSIL de la lier à la méthode qui implémente la méthode d’interface au moment de l’exécution, plutôt qu’au moment de la compilation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1073">Using the `constrained` prefix allows the MSIL to bind to the method that implements the interface method at run time, rather than at compile time.</span></span>  
  
 <span data-ttu-id="0ca49-1074">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `constrained` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1074">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `constrained` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1075">ILGenerator.Emit (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1075">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1076">Convertit la valeur située en haut de la pile d'évaluation en <see langword="native int" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1076">Converts the value on top of the evaluation stack to <see langword="native int" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1077">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1077">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1078">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1078">Format</span></span>|<span data-ttu-id="0ca49-1079">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1079">Assembly Format</span></span>|<span data-ttu-id="0ca49-1080">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1080">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1081">D3</span><span class="sxs-lookup"><span data-stu-id="0ca49-1081">D3</span></span>|<span data-ttu-id="0ca49-1082">conv.i</span><span class="sxs-lookup"><span data-stu-id="0ca49-1082">conv.i</span></span>|<span data-ttu-id="0ca49-1083">Convertir en `native int`, exécution de type push `native int` sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1083">Convert to `native int`, pushing `native int` on stack.</span></span>|  
  
 <span data-ttu-id="0ca49-1084">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1084">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1085">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1085">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1086">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1086">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="0ca49-1087">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1087">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1088">Le `conv.i` opcode convertit le `value` sur la pile pour le type spécifié dans l’opcode et laisse cette valeur convertie en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1088">The `conv.i` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1089">Les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.i` ou `conv.u` est utilisé, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1089">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="0ca49-1090">Les valeurs à virgule flottante sont converties en la `F` type.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1090">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="0ca49-1091">Conversion de nombres à virgule flottante en valeurs entières tronque le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1091">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="0ca49-1092">Lors de la conversion à partir d’un `float64` à un `float32`, la précision peut être perdue.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1092">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="0ca49-1093">Si `value` est trop grande pour tenir dans un `float32 (F)`, l’infini positif (si `value` est un nombre positif) ou l’infini négatif (si `value` est négative) est retourné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1093">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="0ca49-1094">Si le dépassement de capacité produit la conversion d’un type entier à un autre, les bits de poids fort sont tronqués.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1094">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="0ca49-1095">Si le résultat est inférieur à un `int32`, la valeur est étendue avec un signe pour remplir l’emplacement.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1095">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="0ca49-1096">En cas de dépassement de capacité de conversion d’un type à virgule flottante en entier, la valeur retournée n’est pas spécifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1096">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="0ca49-1097">Aucune exception n’est levée lors de l’utilisation de ce champ.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1097">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="0ca49-1098">Consultez <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> et <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> pour obtenir des instructions équivalentes qui lèvent une exception lorsque le type de résultat ne peut pas représenter correctement la valeur de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1098">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="0ca49-1099">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.i` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1099">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1100">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1100">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1101">Convertit la valeur située en haut de la pile d'évaluation en <see langword="int8" /> et l'étend (remplit) à <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1101">Converts the value on top of the evaluation stack to <see langword="int8" />, then extends (pads) it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1102">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1102">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1103">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1103">Format</span></span>|<span data-ttu-id="0ca49-1104">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1104">Assembly Format</span></span>|<span data-ttu-id="0ca49-1105">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1105">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1106">67</span><span class="sxs-lookup"><span data-stu-id="0ca49-1106">67</span></span>|<span data-ttu-id="0ca49-1107">conv.i1</span><span class="sxs-lookup"><span data-stu-id="0ca49-1107">conv.i1</span></span>|<span data-ttu-id="0ca49-1108">Convertir en `int8`, exécution de type push `int32` sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1108">Convert to `int8`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="0ca49-1109">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1109">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1110">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1110">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1111">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1111">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="0ca49-1112">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1112">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1113">Le `conv.i1` opcode convertit le `value` sur la pile pour le type spécifié dans l’opcode et laisse cette valeur convertie en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1113">The `conv.i1` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1114">Les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.i` ou `conv.u` est utilisé, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1114">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="0ca49-1115">Les valeurs à virgule flottante sont converties en la `F` type.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1115">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="0ca49-1116">Conversion de nombres à virgule flottante en valeurs entières tronque le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1116">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="0ca49-1117">Lors de la conversion à partir d’un `float64` à un `float32`, la précision peut être perdue.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1117">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="0ca49-1118">Si `value` est trop grande pour tenir dans un `float32 (F)`, l’infini positif (si `value` est un nombre positif) ou l’infini négatif (si `value` est négative) est retourné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1118">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="0ca49-1119">Si le dépassement de capacité produit la conversion d’un type entier à un autre, les bits de poids fort sont tronqués.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1119">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="0ca49-1120">Si le résultat est inférieur à un `int32`, la valeur est étendue avec un signe pour remplir l’emplacement.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1120">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="0ca49-1121">En cas de dépassement de capacité de conversion d’un type à virgule flottante en entier, la valeur retournée n’est pas spécifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1121">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="0ca49-1122">Aucune exception n’est levée lors de l’utilisation de ce champ.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1122">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="0ca49-1123">Consultez <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> et <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> pour obtenir des instructions équivalentes qui lèvent une exception lorsque le type de résultat ne peut pas représenter correctement la valeur de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1123">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="0ca49-1124">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.i1` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1124">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i1` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1125">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1125">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1126">Convertit la valeur située en haut de la pile d'évaluation en <see langword="int16" /> et l'étend (remplit) à <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1126">Converts the value on top of the evaluation stack to <see langword="int16" />, then extends (pads) it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1127">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1127">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1128">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1128">Format</span></span>|<span data-ttu-id="0ca49-1129">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1129">Assembly Format</span></span>|<span data-ttu-id="0ca49-1130">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1130">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1131">68</span><span class="sxs-lookup"><span data-stu-id="0ca49-1131">68</span></span>|<span data-ttu-id="0ca49-1132">conv.i2</span><span class="sxs-lookup"><span data-stu-id="0ca49-1132">conv.i2</span></span>|<span data-ttu-id="0ca49-1133">Convertir en `int16`, exécution de type push `int32` sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1133">Convert to `int16`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="0ca49-1134">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1134">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1135">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1135">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1136">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1136">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="0ca49-1137">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1137">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1138">Le `conv.i2` opcode convertit le `value` sur la pile pour le type spécifié dans l’opcode et laisse cette valeur convertie en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1138">The `conv.i2` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1139">Les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.i` ou `conv.u` est utilisé, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1139">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="0ca49-1140">Les valeurs à virgule flottante sont converties en la `F` type.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1140">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="0ca49-1141">Conversion de nombres à virgule flottante en valeurs entières tronque le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1141">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="0ca49-1142">Lors de la conversion à partir d’un `float64` à un `float32`, la précision peut être perdue.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1142">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="0ca49-1143">Si `value` est trop grande pour tenir dans un `float32 (F)`, l’infini positif (si `value` est un nombre positif) ou l’infini négatif (si `value` est négative) est retourné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1143">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="0ca49-1144">Si le dépassement de capacité produit la conversion d’un type entier à un autre, les bits de poids fort sont tronqués.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1144">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="0ca49-1145">Si le résultat est inférieur à un `int32`, la valeur est étendue avec un signe pour remplir l’emplacement.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1145">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="0ca49-1146">En cas de dépassement de capacité de conversion d’un type à virgule flottante en entier, la valeur retournée n’est pas spécifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1146">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="0ca49-1147">Aucune exception n’est levée lors de l’utilisation de ce champ.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1147">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="0ca49-1148">Consultez <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> et <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> pour obtenir des instructions équivalentes qui lèvent une exception lorsque le type de résultat ne peut pas représenter correctement la valeur de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1148">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="0ca49-1149">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.i2` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1149">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i2` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1150">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1150">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1151">Convertit la valeur située en haut de la pile d'évaluation en <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1151">Converts the value on top of the evaluation stack to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1152">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1152">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1153">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1153">Format</span></span>|<span data-ttu-id="0ca49-1154">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1154">Assembly Format</span></span>|<span data-ttu-id="0ca49-1155">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1155">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1156">69</span><span class="sxs-lookup"><span data-stu-id="0ca49-1156">69</span></span>|<span data-ttu-id="0ca49-1157">conv.i4</span><span class="sxs-lookup"><span data-stu-id="0ca49-1157">conv.i4</span></span>|<span data-ttu-id="0ca49-1158">Convertir en `int32`, exécution de type push `int32` sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1158">Convert to `int32`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="0ca49-1159">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1159">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1160">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1160">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1161">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1161">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="0ca49-1162">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1162">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1163">Le `conv.i4` opcode convertit le `value` sur la pile pour le type spécifié dans l’opcode et laisse cette valeur convertie en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1163">The `conv.i4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1164">Les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.i` ou `conv.u` est utilisé, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1164">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="0ca49-1165">Les valeurs à virgule flottante sont converties en la `F` type.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1165">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="0ca49-1166">Conversion de nombres à virgule flottante en valeurs entières tronque le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1166">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="0ca49-1167">Lors de la conversion à partir d’un `float64` à un `float32`, la précision peut être perdue.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1167">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="0ca49-1168">Si `value` est trop grande pour tenir dans un `float32 (F)`, l’infini positif (si `value` est un nombre positif) ou l’infini négatif (si `value` est négative) est retourné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1168">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="0ca49-1169">Si le dépassement de capacité produit la conversion d’un type entier à un autre, les bits de poids fort sont tronqués.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1169">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="0ca49-1170">Si le résultat est inférieur à un `int32`, la valeur est étendue avec un signe pour remplir l’emplacement.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1170">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="0ca49-1171">En cas de dépassement de capacité de conversion d’un type à virgule flottante en entier, la valeur retournée n’est pas spécifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1171">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="0ca49-1172">Aucune exception n’est levée lors de l’utilisation de ce champ.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1172">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="0ca49-1173">Consultez <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> et <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> pour obtenir des instructions équivalentes qui lèvent une exception lorsque le type de résultat ne peut pas représenter correctement la valeur de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1173">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="0ca49-1174">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.i4` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1174">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i4` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1175">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1175">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1176">Convertit la valeur située en haut de la pile d'évaluation en <see langword="int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1176">Converts the value on top of the evaluation stack to <see langword="int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1177">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1177">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1178">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1178">Format</span></span>|<span data-ttu-id="0ca49-1179">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1179">Assembly Format</span></span>|<span data-ttu-id="0ca49-1180">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1180">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1181">6 A</span><span class="sxs-lookup"><span data-stu-id="0ca49-1181">6A</span></span>|<span data-ttu-id="0ca49-1182">conv.i8</span><span class="sxs-lookup"><span data-stu-id="0ca49-1182">conv.i8</span></span>|<span data-ttu-id="0ca49-1183">Convertir en `int64`, exécution de type push `int64` sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1183">Convert to `int64`, pushing `int64` on stack.</span></span>|  
  
 <span data-ttu-id="0ca49-1184">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1184">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1185">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1185">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1186">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1186">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="0ca49-1187">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1187">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1188">Le `conv.i8` opcode convertit le `value` sur la pile pour le type spécifié dans l’opcode et laisse cette valeur convertie en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1188">The `conv.i8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1189">Les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.i` ou `conv.u` est utilisé, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1189">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="0ca49-1190">Les valeurs à virgule flottante sont converties en la `F` type.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1190">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="0ca49-1191">Conversion de nombres à virgule flottante en valeurs entières tronque le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1191">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="0ca49-1192">Lors de la conversion à partir d’un `float64` à un `float32`, la précision peut être perdue.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1192">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="0ca49-1193">Si `value` est trop grande pour tenir dans un `float32 (F)`, l’infini positif (si `value` est un nombre positif) ou l’infini négatif (si `value` est négative) est retourné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1193">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="0ca49-1194">Si le dépassement de capacité produit la conversion d’un type entier à un autre, les bits de poids fort sont tronqués.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1194">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="0ca49-1195">Si le résultat est inférieur à un `int32`, la valeur est étendue avec un signe pour remplir l’emplacement.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1195">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="0ca49-1196">En cas de dépassement de capacité de conversion d’un type à virgule flottante en entier, la valeur retournée n’est pas spécifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1196">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="0ca49-1197">Aucune exception n’est levée lors de l’utilisation de ce champ.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1197">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="0ca49-1198">Consultez <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> et <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> pour obtenir des instructions équivalentes qui lèvent une exception lorsque le type de résultat ne peut pas représenter correctement la valeur de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1198">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="0ca49-1199">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.i8` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1199">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i8` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1200">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1200">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1201">Convertit la valeur signée située en haut de la pile d'évaluation en <see langword="native int" /> signé, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1201">Converts the signed value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1202">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1202">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1203">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1203">Format</span></span>|<span data-ttu-id="0ca49-1204">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1204">Assembly Format</span></span>|<span data-ttu-id="0ca49-1205">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1205">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1206">D4</span><span class="sxs-lookup"><span data-stu-id="0ca49-1206">D4</span></span>|<span data-ttu-id="0ca49-1207">conv.ovf.i</span><span class="sxs-lookup"><span data-stu-id="0ca49-1207">conv.ovf.i</span></span>|<span data-ttu-id="0ca49-1208">Convertir un `native int` (sur la pile en tant que `native int`) et lève une exception de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1208">Convert to a `native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="0ca49-1209">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1209">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1210">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1210">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1211">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1211">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="0ca49-1212">En cas de dépassement de capacité, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1212">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="0ca49-1213">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1213">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1214">Le `conv.ovf.i` opcode convertit le `value` sur la pile pour le type spécifié dans le code d’opération et place cette valeur en haut de la pile convertie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1214">The `conv.ovf.i` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1215">Si la valeur est trop grande ou trop petite pour être représentée par le type de cible, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1215">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-1216">Les conversions de nombres à virgule flottante en valeurs entières tronquent le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1216">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="0ca49-1217">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.ovf.i` ou `conv.ovf.u` sont utilisés, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1217">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-1218"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1218"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-1219">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.ovf.i` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1219">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1220">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1220">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1221">Convertit la valeur non signée située en haut de la pile d'évaluation en <see langword="native int" /> signé, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1221">Converts the unsigned value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1222">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1222">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1223">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1223">Format</span></span>|<span data-ttu-id="0ca49-1224">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1224">Assembly Format</span></span>|<span data-ttu-id="0ca49-1225">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1225">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1226">8 A</span><span class="sxs-lookup"><span data-stu-id="0ca49-1226">8A</span></span>|<span data-ttu-id="0ca49-1227">conv.ovf.i.un</span><span class="sxs-lookup"><span data-stu-id="0ca49-1227">conv.ovf.i.un</span></span>|<span data-ttu-id="0ca49-1228">Convertit une valeur non signée à un `native int` (sur la pile en tant que `native int`) et lève une exception de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1228">Converts an unsigned value to a `native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="0ca49-1229">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1229">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1230">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1230">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1231">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1231">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="0ca49-1232">En cas de dépassement de capacité, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1232">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="0ca49-1233">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1233">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1234">Le `conv.ovf.i.un` opcode convertit le `value` sur la pile pour le type spécifié dans le code d’opération et place cette valeur en haut de la pile convertie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1234">The `conv.ovf.i.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1235">Si la valeur est trop grande ou trop petite pour être représentée par le type de cible, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1235">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-1236">Les conversions de nombres à virgule flottante en valeurs entières tronquent le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1236">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="0ca49-1237">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.ovf.i` ou `conv.ovf.u` sont utilisés, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1237">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-1238"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1238"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-1239">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.ovf.i.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1239">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1240">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1240">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1241">Convertit la valeur signée située en haut de la pile d’évaluation en <see langword="int8" /> signé et l’étend à <see langword="int32" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1241">Converts the signed value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1242">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1242">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1243">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1243">Format</span></span>|<span data-ttu-id="0ca49-1244">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1244">Assembly Format</span></span>|<span data-ttu-id="0ca49-1245">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1245">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1246">B3</span><span class="sxs-lookup"><span data-stu-id="0ca49-1246">B3</span></span>|<span data-ttu-id="0ca49-1247">conv.ovf.i1</span><span class="sxs-lookup"><span data-stu-id="0ca49-1247">conv.ovf.i1</span></span>|<span data-ttu-id="0ca49-1248">Convertir un `int8` (sur la pile en tant que `int32`) et lève une exception de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1248">Convert to an `int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="0ca49-1249">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1249">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1250">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1250">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1251">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1251">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="0ca49-1252">En cas de dépassement de capacité, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1252">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="0ca49-1253">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1253">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1254">Le `conv.ovf.i1` opcode convertit le `value` sur la pile pour le type spécifié dans le code d’opération et place cette valeur en haut de la pile convertie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1254">The `conv.ovf.i1` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1255">Si la valeur est trop grande ou trop petite pour être représentée par le type de cible, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1255">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-1256">Les conversions de nombres à virgule flottante en valeurs entières tronquent le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1256">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="0ca49-1257">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.ovf.i` ou `conv.ovf.u` sont utilisés, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1257">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-1258"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1258"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-1259">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.ovf.i1` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1259">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i1` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1260">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1260">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I1_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1261">Convertit la valeur non signée située en haut de la pile d'évaluation en <see langword="int8" /> signé et l'étend à <see langword="int32" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1261">Converts the unsigned value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1262">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1262">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1263">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1263">Format</span></span>|<span data-ttu-id="0ca49-1264">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1264">Assembly Format</span></span>|<span data-ttu-id="0ca49-1265">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1265">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1266">82</span><span class="sxs-lookup"><span data-stu-id="0ca49-1266">82</span></span>|<span data-ttu-id="0ca49-1267">conv.ovf.i1.un</span><span class="sxs-lookup"><span data-stu-id="0ca49-1267">conv.ovf.i1.un</span></span>|<span data-ttu-id="0ca49-1268">Convertit une valeur non signée à un `int8` (sur la pile en tant que `int32`) et lève une exception de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1268">Converts an unsigned value to an `int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="0ca49-1269">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1269">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1270">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1270">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1271">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1271">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="0ca49-1272">En cas de dépassement de capacité, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1272">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="0ca49-1273">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1273">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1274">Le `conv.ovf.i1.un` opcode convertit le `value` sur la pile pour le type spécifié dans le code d’opération et place cette valeur en haut de la pile convertie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1274">The `conv.ovf.i1.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1275">Si la valeur est trop grande ou trop petite pour être représentée par le type de cible, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1275">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-1276">Les conversions de nombres à virgule flottante en valeurs entières tronquent le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1276">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="0ca49-1277">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.ovf.i` ou `conv.ovf.u` sont utilisés, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1277">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-1278"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1278"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-1279">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.ovf.i1.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1279">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i1.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1280">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1280">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1281">Convertit la valeur signée située en haut de la pile d'évaluation en <see langword="int16" /> signé et l'étend à <see langword="int32" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1281">Converts the signed value on top of the evaluation stack to signed <see langword="int16" /> and extending it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1282">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1282">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1283">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1283">Format</span></span>|<span data-ttu-id="0ca49-1284">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1284">Assembly Format</span></span>|<span data-ttu-id="0ca49-1285">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1285">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1286">B5</span><span class="sxs-lookup"><span data-stu-id="0ca49-1286">B5</span></span>|<span data-ttu-id="0ca49-1287">conv.ovf.i2</span><span class="sxs-lookup"><span data-stu-id="0ca49-1287">conv.ovf.i2</span></span>|<span data-ttu-id="0ca49-1288">Convertir un `int16` (sur la pile en tant que `int32`) et lève une exception de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1288">Convert to an `int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="0ca49-1289">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1289">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1290">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1290">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1291">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1291">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="0ca49-1292">En cas de dépassement de capacité, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1292">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="0ca49-1293">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1293">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1294">Le `conv.ovf.i2` opcode convertit le `value` sur la pile pour le type spécifié dans le code d’opération et place cette valeur en haut de la pile convertie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1294">The `conv.ovf.i2` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1295">Si la valeur est trop grande ou trop petite pour être représentée par le type de cible, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1295">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-1296">Les conversions de nombres à virgule flottante en valeurs entières tronquent le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1296">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="0ca49-1297">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.ovf.i` ou `conv.ovf.u` sont utilisés, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1297">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-1298"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1298"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-1299">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.ovf.i2` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1299">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i2` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1300">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1300">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I2_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1301">Convertit la valeur non signée située en haut de la pile d'évaluation en <see langword="int16" /> signé et l'étend à <see langword="int32" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1301">Converts the unsigned value on top of the evaluation stack to signed <see langword="int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1302">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1302">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1303">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1303">Format</span></span>|<span data-ttu-id="0ca49-1304">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1304">Assembly Format</span></span>|<span data-ttu-id="0ca49-1305">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1305">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1306">83</span><span class="sxs-lookup"><span data-stu-id="0ca49-1306">83</span></span>|<span data-ttu-id="0ca49-1307">conv.ovf.i2.un</span><span class="sxs-lookup"><span data-stu-id="0ca49-1307">conv.ovf.i2.un</span></span>|<span data-ttu-id="0ca49-1308">Convertit une valeur non signée à un `int16` (sur la pile en tant que `int32`) et lève une exception de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1308">Converts an unsigned value to an `int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="0ca49-1309">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1309">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1310">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1310">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1311">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1311">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="0ca49-1312">En cas de dépassement de capacité, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1312">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="0ca49-1313">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1313">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1314">Le `conv.ovf.i2.un` opcode convertit le `value` sur la pile pour le type spécifié dans le code d’opération et place cette valeur en haut de la pile convertie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1314">The `conv.ovf.i2.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1315">Si la valeur est trop grande ou trop petite pour être représentée par le type de cible, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1315">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-1316">Les conversions de nombres à virgule flottante en valeurs entières tronquent le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1316">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="0ca49-1317">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.ovf.i` ou `conv.ovf.u` sont utilisés, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1317">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-1318"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1318"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-1319">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.ovf.i2.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1319">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i2.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1320">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1320">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1321">Convertit la valeur signée située en haut de la pile d'évaluation en <see langword="int32" /> signé, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1321">Converts the signed value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1322">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1322">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1323">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1323">Format</span></span>|<span data-ttu-id="0ca49-1324">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1324">Assembly Format</span></span>|<span data-ttu-id="0ca49-1325">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1325">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1326">B7</span><span class="sxs-lookup"><span data-stu-id="0ca49-1326">B7</span></span>|<span data-ttu-id="0ca49-1327">conv.ovf.i4</span><span class="sxs-lookup"><span data-stu-id="0ca49-1327">conv.ovf.i4</span></span>|<span data-ttu-id="0ca49-1328">Convertir un `int32` (sur la pile en tant que `int32`) et lève une exception de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1328">Convert to an `int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="0ca49-1329">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1329">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1330">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1330">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1331">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1331">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="0ca49-1332">En cas de dépassement de capacité, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1332">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="0ca49-1333">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1333">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1334">Le `conv.ovf.i4` opcode convertit le `value` sur la pile pour le type spécifié dans le code d’opération et place cette valeur en haut de la pile convertie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1334">The `conv.ovf.i4` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1335">Si la valeur est trop grande ou trop petite pour être représentée par le type de cible, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1335">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-1336">Les conversions de nombres à virgule flottante en valeurs entières tronquent le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1336">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="0ca49-1337">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.ovf.i` ou `conv.ovf.u` sont utilisés, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1337">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-1338"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1338"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-1339">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.ovf.i4` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1339">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i4` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1340">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1340">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I4_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1341">Convertit la valeur non signée située en haut de la pile d'évaluation en <see langword="int32" /> signé, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1341">Converts the unsigned value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1342">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1342">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1343">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1343">Format</span></span>|<span data-ttu-id="0ca49-1344">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1344">Assembly Format</span></span>|<span data-ttu-id="0ca49-1345">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1345">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1346">84</span><span class="sxs-lookup"><span data-stu-id="0ca49-1346">84</span></span>|<span data-ttu-id="0ca49-1347">conv.ovf.i4.un</span><span class="sxs-lookup"><span data-stu-id="0ca49-1347">conv.ovf.i4.un</span></span>|<span data-ttu-id="0ca49-1348">Convertit une valeur non signée à un `int32` (sur la pile en tant que `int32`) et lève une exception de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1348">Converts an unsigned value to an `int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="0ca49-1349">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1349">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1350">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1350">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1351">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1351">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="0ca49-1352">En cas de dépassement de capacité, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1352">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="0ca49-1353">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1353">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1354">Le `conv.ovf.i4.un` opcode convertit le `value` sur la pile pour le type spécifié dans le code d’opération et place cette valeur en haut de la pile convertie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1354">The `conv.ovf.i4.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1355">Si la valeur est trop grande ou trop petite pour être représentée par le type de cible, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1355">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-1356">Les conversions de nombres à virgule flottante en valeurs entières tronquent le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1356">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="0ca49-1357">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.ovf.i` ou `conv.ovf.u` sont utilisés, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1357">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-1358"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1358"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-1359">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.ovf.i4.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1359">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i4.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1360">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1360">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1361">Convertit la valeur signée située en haut de la pile d'évaluation en <see langword="int64" /> signé, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1361">Converts the signed value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1362">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1362">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1363">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1363">Format</span></span>|<span data-ttu-id="0ca49-1364">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1364">Assembly Format</span></span>|<span data-ttu-id="0ca49-1365">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1365">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1366">B9</span><span class="sxs-lookup"><span data-stu-id="0ca49-1366">B9</span></span>|<span data-ttu-id="0ca49-1367">conv.ovf.i8</span><span class="sxs-lookup"><span data-stu-id="0ca49-1367">conv.ovf.i8</span></span>|<span data-ttu-id="0ca49-1368">Convertir un `int64` (sur la pile en tant que `int64`) et lève une exception de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1368">Convert to an `int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="0ca49-1369">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1369">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1370">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1370">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1371">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1371">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="0ca49-1372">En cas de dépassement de capacité, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1372">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="0ca49-1373">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1373">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1374">Le `conv.ovf.i8` opcode convertit le `value` sur la pile pour le type spécifié dans le code d’opération et place cette valeur en haut de la pile convertie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1374">The `conv.ovf.i8` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1375">Si la valeur est trop grande ou trop petite pour être représentée par le type de cible, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1375">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-1376">Les conversions de nombres à virgule flottante en valeurs entières tronquent le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1376">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="0ca49-1377">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.ovf.i` ou `conv.ovf.u` sont utilisés, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1377">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-1378"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1378"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-1379">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.ovf.i8` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1379">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i8` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1380">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1380">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I8_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1381">Convertit la valeur non signée située en haut de la pile d'évaluation en <see langword="int64" /> signé, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1381">Converts the unsigned value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1382">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1382">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1383">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1383">Format</span></span>|<span data-ttu-id="0ca49-1384">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1384">Assembly Format</span></span>|<span data-ttu-id="0ca49-1385">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1385">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1386">85</span><span class="sxs-lookup"><span data-stu-id="0ca49-1386">85</span></span>|<span data-ttu-id="0ca49-1387">conv.ovf.i8.un</span><span class="sxs-lookup"><span data-stu-id="0ca49-1387">conv.ovf.i8.un</span></span>|<span data-ttu-id="0ca49-1388">Convertit une valeur non signée à un `int64` (sur la pile en tant que `int64`) et lève une exception de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1388">Converts an unsigned value to an `int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="0ca49-1389">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1389">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1390">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1390">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1391">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1391">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="0ca49-1392">En cas de dépassement de capacité, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1392">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="0ca49-1393">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1393">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1394">Le `conv.ovf.i8.un` opcode convertit le `value` sur la pile pour le type spécifié dans le code d’opération et place cette valeur en haut de la pile convertie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1394">The `conv.ovf.i8.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1395">Si la valeur est trop grande ou trop petite pour être représentée par le type de cible, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1395">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-1396">Les conversions de nombres à virgule flottante en valeurs entières tronquent le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1396">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="0ca49-1397">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.ovf.i` ou `conv.ovf.u` sont utilisés, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1397">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-1398"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1398"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-1399">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.ovf.i8.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1399">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i8.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1400">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1400">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1401">Convertit la valeur signée située en haut de la pile d'évaluation en <see langword="unsigned native int" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1401">Converts the signed value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1402">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1402">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1403">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1403">Format</span></span>|<span data-ttu-id="0ca49-1404">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1404">Assembly Format</span></span>|<span data-ttu-id="0ca49-1405">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1405">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1406">D5</span><span class="sxs-lookup"><span data-stu-id="0ca49-1406">D5</span></span>|<span data-ttu-id="0ca49-1407">conv.ovf.u</span><span class="sxs-lookup"><span data-stu-id="0ca49-1407">conv.ovf.u</span></span>|<span data-ttu-id="0ca49-1408">Convertir un `unsigned native int` (sur la pile en tant que `native int`) et lève une exception de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1408">Convert to an `unsigned native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="0ca49-1409">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1409">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1410">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1410">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1411">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1411">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="0ca49-1412">En cas de dépassement de capacité, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1412">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="0ca49-1413">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1413">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1414">Le `conv.ovf.u` opcode convertit le `value` sur la pile pour le type spécifié dans le code d’opération et place cette valeur en haut de la pile convertie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1414">The `conv.ovf.u` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1415">Si la valeur est trop grande ou trop petite pour être représentée par le type de cible, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1415">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-1416">Les conversions de nombres à virgule flottante en valeurs entières tronquent le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1416">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="0ca49-1417">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.ovf.i` ou `conv.ovf.u` sont utilisés, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1417">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-1418"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1418"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-1419">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.ovf.u` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1419">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1420">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1420">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1421">Convertit la valeur non signée située en haut de la pile d'évaluation en <see langword="unsigned native int" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1421">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1422">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1422">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1423">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1423">Format</span></span>|<span data-ttu-id="0ca49-1424">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1424">Assembly Format</span></span>|<span data-ttu-id="0ca49-1425">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1425">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1426">8 B</span><span class="sxs-lookup"><span data-stu-id="0ca49-1426">8B</span></span>|<span data-ttu-id="0ca49-1427">conv.ovf.u.un</span><span class="sxs-lookup"><span data-stu-id="0ca49-1427">conv.ovf.u.un</span></span>|<span data-ttu-id="0ca49-1428">Convertit valeur non signée en une `unsigned native int` (sur la pile en tant que `native int`) et lève une exception de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1428">Converts un unsigned value to an `unsigned native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="0ca49-1429">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1429">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1430">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1430">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1431">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1431">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="0ca49-1432">En cas de dépassement de capacité, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1432">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="0ca49-1433">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1433">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1434">Le `conv.ovf.u.un` opcode convertit le `value` sur la pile pour le type spécifié dans le code d’opération et place cette valeur en haut de la pile convertie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1434">The `conv.ovf.u.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1435">Si la valeur est trop grande ou trop petite pour être représentée par le type de cible, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1435">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-1436">Les conversions de nombres à virgule flottante en valeurs entières tronquent le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1436">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="0ca49-1437">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.ovf.i` ou `conv.ovf.u` sont utilisés, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1437">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-1438"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1438"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-1439">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.uvf.u.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1439">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.uvf.u.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1440">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1440">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1441">Convertit la valeur signée située en haut de la pile d'évaluation en <see langword="unsigned int8" /> et l'étend à <see langword="int32" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1441">Converts the signed value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1442">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1442">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1443">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1443">Format</span></span>|<span data-ttu-id="0ca49-1444">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1444">Assembly Format</span></span>|<span data-ttu-id="0ca49-1445">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1445">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1446">B4</span><span class="sxs-lookup"><span data-stu-id="0ca49-1446">B4</span></span>|<span data-ttu-id="0ca49-1447">conv.ovf.U1</span><span class="sxs-lookup"><span data-stu-id="0ca49-1447">conv.ovf.u1</span></span>|<span data-ttu-id="0ca49-1448">Convertir un `unsigned int8` (sur la pile en tant que `int32`) et lève une exception de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1448">Convert to an `unsigned int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="0ca49-1449">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1449">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1450">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1450">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1451">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1451">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="0ca49-1452">En cas de dépassement de capacité, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1452">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="0ca49-1453">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1453">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1454">Le `conv.ovf.u1` opcode convertit le `value` sur la pile pour le type spécifié dans le code d’opération et place cette valeur en haut de la pile convertie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1454">The `conv.ovf.u1` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1455">Si la valeur est trop grande ou trop petite pour être représentée par le type de cible, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1455">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-1456">Les conversions de nombres à virgule flottante en valeurs entières tronquent le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1456">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="0ca49-1457">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.ovf.i` ou `conv.ovf.u` sont utilisés, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1457">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-1458"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1458"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-1459">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.ovf.u1` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1459">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u1` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1460">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1460">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U1_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1461">Convertit la valeur non signée située en haut de la pile d'évaluation en <see langword="unsigned int8" /> et l'étend à <see langword="int32" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1461">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1462">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1462">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1463">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1463">Format</span></span>|<span data-ttu-id="0ca49-1464">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1464">Assembly Format</span></span>|<span data-ttu-id="0ca49-1465">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1465">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1466">86</span><span class="sxs-lookup"><span data-stu-id="0ca49-1466">86</span></span>|<span data-ttu-id="0ca49-1467">conv.ovf.U1.un</span><span class="sxs-lookup"><span data-stu-id="0ca49-1467">conv.ovf.u1.un</span></span>|<span data-ttu-id="0ca49-1468">Convertit une valeur non signée à un `unsigned int8` (sur la pile en tant que `int32`) et lève une exception de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1468">Converts an unsigned value to an `unsigned int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="0ca49-1469">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1469">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1470">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1470">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1471">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1471">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="0ca49-1472">En cas de dépassement de capacité, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1472">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="0ca49-1473">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1473">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1474">Le `conv.ovf.u1.un` opcode convertit le `value` sur la pile pour le type spécifié dans le code d’opération et place cette valeur en haut de la pile convertie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1474">The `conv.ovf.u1.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1475">Si la valeur est trop grande ou trop petite pour être représentée par le type de cible, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1475">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-1476">Les conversions de nombres à virgule flottante en valeurs entières tronquent le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1476">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="0ca49-1477">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.ovf.i` ou `conv.ovf.u` sont utilisés, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1477">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-1478"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1478"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-1479">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.ovf.u1.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1479">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u1.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1480">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1480">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1481">Convertit la valeur signée située en haut de la pile d'évaluation en <see langword="unsigned int16" /> et l'étend à <see langword="int32" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1481">Converts the signed value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1482">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1482">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1483">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1483">Format</span></span>|<span data-ttu-id="0ca49-1484">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1484">Assembly Format</span></span>|<span data-ttu-id="0ca49-1485">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1485">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1486">B6</span><span class="sxs-lookup"><span data-stu-id="0ca49-1486">B6</span></span>|<span data-ttu-id="0ca49-1487">conv.ovf.U2</span><span class="sxs-lookup"><span data-stu-id="0ca49-1487">conv.ovf.u2</span></span>|<span data-ttu-id="0ca49-1488">Convertir un `unsigned int16` (sur la pile en tant que `int32`) et lève une exception de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1488">Convert to an `unsigned int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="0ca49-1489">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1489">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1490">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1490">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1491">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1491">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="0ca49-1492">En cas de dépassement de capacité, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1492">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="0ca49-1493">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1493">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1494">Le `conv.ovf.u2` opcode convertit le `value` sur la pile pour le type spécifié dans le code d’opération et place cette valeur en haut de la pile convertie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1494">The `conv.ovf.u2` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1495">Si la valeur est trop grande ou trop petite pour être représentée par le type de cible, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1495">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-1496">Les conversions de nombres à virgule flottante en valeurs entières tronquent le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1496">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="0ca49-1497">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.ovf.i` ou `conv.ovf.u` sont utilisés, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1497">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-1498"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1498"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-1499">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.ovf.u2` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1499">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u2` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1500">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1500">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U2_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1501">Convertit la valeur non signée située en haut de la pile d'évaluation en <see langword="unsigned int16" /> et l'étend à <see langword="int32" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1501">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1502">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1502">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1503">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1503">Format</span></span>|<span data-ttu-id="0ca49-1504">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1504">Assembly Format</span></span>|<span data-ttu-id="0ca49-1505">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1505">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1506">87</span><span class="sxs-lookup"><span data-stu-id="0ca49-1506">87</span></span>|<span data-ttu-id="0ca49-1507">conv.ovf.U2.un</span><span class="sxs-lookup"><span data-stu-id="0ca49-1507">conv.ovf.u2.un</span></span>|<span data-ttu-id="0ca49-1508">Convertit une valeur non signée à un `unsigned int16` (sur la pile en tant que `int32`) et lève une exception de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1508">Converts an unsigned value to an `unsigned int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="0ca49-1509">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1509">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1510">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1510">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1511">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1511">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="0ca49-1512">En cas de dépassement de capacité, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1512">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="0ca49-1513">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1513">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1514">Le `conv.ovf.u2.un` opcode convertit le `value` sur la pile pour le type spécifié dans le code d’opération et place cette valeur en haut de la pile convertie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1514">The `conv.ovf.u2.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1515">Si la valeur est trop grande ou trop petite pour être représentée par le type de cible, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1515">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-1516">Les conversions de nombres à virgule flottante en valeurs entières tronquent le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1516">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="0ca49-1517">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.ovf.i` ou `conv.ovf.u` sont utilisés, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1517">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-1518"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1518"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-1519">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.ovf.u2.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1519">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u2.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1520">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1520">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1521">Convertit la valeur signée située en haut de la pile d'évaluation en <see langword="unsigned int32" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1521">Converts the signed value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1522">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1522">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1523">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1523">Format</span></span>|<span data-ttu-id="0ca49-1524">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1524">Assembly Format</span></span>|<span data-ttu-id="0ca49-1525">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1525">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1526">B8</span><span class="sxs-lookup"><span data-stu-id="0ca49-1526">B8</span></span>|<span data-ttu-id="0ca49-1527">conv.ovf.U4</span><span class="sxs-lookup"><span data-stu-id="0ca49-1527">conv.ovf.u4</span></span>|<span data-ttu-id="0ca49-1528">Convertir un `unsigned int32` (sur la pile en tant que `int32`) et lève une exception de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1528">Convert to an `unsigned int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="0ca49-1529">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1529">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1530">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1530">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1531">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1531">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="0ca49-1532">En cas de dépassement de capacité, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1532">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="0ca49-1533">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1533">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1534">Le `conv.ovf.u4` opcode convertit le `value` sur la pile pour le type spécifié dans le code d’opération et place cette valeur en haut de la pile convertie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1534">The `conv.ovf.u4` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1535">Si la valeur est trop grande ou trop petite pour être représentée par le type de cible, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1535">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-1536">Les conversions de nombres à virgule flottante en valeurs entières tronquent le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1536">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="0ca49-1537">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.ovf.i` ou `conv.ovf.u` sont utilisés, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1537">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-1538"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1538"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-1539">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.ovf.u4` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1539">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u4` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1540">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1540">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U4_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1541">Convertit la valeur non signée située en haut de la pile d'évaluation en <see langword="unsigned int32" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1541">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1542">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1542">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1543">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1543">Format</span></span>|<span data-ttu-id="0ca49-1544">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1544">Assembly Format</span></span>|<span data-ttu-id="0ca49-1545">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1545">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1546">88</span><span class="sxs-lookup"><span data-stu-id="0ca49-1546">88</span></span>|<span data-ttu-id="0ca49-1547">conv.ovf.U4.un</span><span class="sxs-lookup"><span data-stu-id="0ca49-1547">conv.ovf.u4.un</span></span>|<span data-ttu-id="0ca49-1548">Convertit une valeur non signée à un `unsigned int32` (sur la pile en tant que `int32`) et lève une exception de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1548">Converts an unsigned value to an `unsigned int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="0ca49-1549">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1549">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1550">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1550">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1551">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1551">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="0ca49-1552">En cas de dépassement de capacité, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1552">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="0ca49-1553">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1553">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1554">Le `conv.ovf.u4.un` opcode convertit le `value` sur la pile pour le type spécifié dans le code d’opération et place cette valeur en haut de la pile convertie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1554">The `conv.ovf.u4.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1555">Si la valeur est trop grande ou trop petite pour être représentée par le type de cible, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1555">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-1556">Les conversions de nombres à virgule flottante en valeurs entières tronquent le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1556">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="0ca49-1557">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.ovf.i` ou `conv.ovf.u` sont utilisés, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1557">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-1558"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1558"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-1559">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.ovf.u4.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1559">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u4.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1560">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1560">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1561">Convertit la valeur signée située en haut de la pile d'évaluation en <see langword="unsigned int64" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1561">Converts the signed value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1562">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1562">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1563">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1563">Format</span></span>|<span data-ttu-id="0ca49-1564">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1564">Assembly Format</span></span>|<span data-ttu-id="0ca49-1565">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1565">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1566">BA</span><span class="sxs-lookup"><span data-stu-id="0ca49-1566">BA</span></span>|<span data-ttu-id="0ca49-1567">conv.ovf.U8</span><span class="sxs-lookup"><span data-stu-id="0ca49-1567">conv.ovf.u8</span></span>|<span data-ttu-id="0ca49-1568">Convertir un `unsigned int64` (sur la pile en tant que `int64`) et lève une exception de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1568">Convert to an `unsigned int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="0ca49-1569">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1569">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1570">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1570">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1571">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1571">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="0ca49-1572">En cas de dépassement de capacité, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1572">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="0ca49-1573">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1573">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1574">Le `conv.ovf.u8` opcode convertit le `value` sur la pile pour le type spécifié dans le code d’opération et place cette valeur en haut de la pile convertie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1574">The `conv.ovf.u8` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1575">Si la valeur est trop grande ou trop petite pour être représentée par le type de cible, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1575">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-1576">Les conversions de nombres à virgule flottante en valeurs entières tronquent le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1576">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="0ca49-1577">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.ovf.i` ou `conv.ovf.u` sont utilisés, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1577">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-1578"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1578"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-1579">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.ovf.u8` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1579">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u8` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1580">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1580">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U8_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1581">Convertit la valeur non signée située en haut de la pile d'évaluation en <see langword="unsigned int64" />, en levant <see cref="T:System.OverflowException" /> en cas de dépassement de capacité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1581">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1582">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1582">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1583">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1583">Format</span></span>|<span data-ttu-id="0ca49-1584">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1584">Assembly Format</span></span>|<span data-ttu-id="0ca49-1585">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1585">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1586">89</span><span class="sxs-lookup"><span data-stu-id="0ca49-1586">89</span></span>|<span data-ttu-id="0ca49-1587">conv.ovf.U8.un</span><span class="sxs-lookup"><span data-stu-id="0ca49-1587">conv.ovf.u8.un</span></span>|<span data-ttu-id="0ca49-1588">Convertit une valeur non signée à un `unsigned int64` (sur la pile en tant que `int64`) et lève une exception de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1588">Converts an unsigned value to an `unsigned int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="0ca49-1589">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1589">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1590">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1590">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1591">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1591">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="0ca49-1592">En cas de dépassement de capacité, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1592">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="0ca49-1593">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1593">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1594">Le `conv.ovf.u8.un` opcode convertit le `value` sur la pile pour le type spécifié dans le code d’opération et place cette valeur en haut de la pile convertie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1594">The `conv.ovf.u8.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1595">Si la valeur est trop grande ou trop petite pour être représentée par le type de cible, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1595">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="0ca49-1596">Les conversions de nombres à virgule flottante en valeurs entières tronquent le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1596">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="0ca49-1597">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.ovf.i` ou `conv.ovf.u` sont utilisés, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1597">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-1598"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1598"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-1599">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.ovf.u8.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1599">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u8.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1600">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1600">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1601">Convertit la valeur entière non signée située en haut de la pile d'évaluation en <see langword="float32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1601">Converts the unsigned integer value on top of the evaluation stack to <see langword="float32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1602">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1602">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1603">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1603">Format</span></span>|<span data-ttu-id="0ca49-1604">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1604">Assembly Format</span></span>|<span data-ttu-id="0ca49-1605">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1605">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1606">76</span><span class="sxs-lookup"><span data-stu-id="0ca49-1606">76</span></span>|<span data-ttu-id="0ca49-1607">conv.r.un</span><span class="sxs-lookup"><span data-stu-id="0ca49-1607">conv.r.un</span></span>|<span data-ttu-id="0ca49-1608">Convert entier non signé à virgule flottante, en exécutant un push `F` sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1608">Convert unsigned integer to floating-point, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="0ca49-1609">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1609">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1610">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1610">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1611">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1611">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="0ca49-1612">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1612">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1613">Le `conv.r.un` opcode convertit le `value` sur la pile pour le type spécifié dans l’opcode et laisse cette valeur convertie en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1613">The `conv.r.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1614">Les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.i` ou `conv.u` est utilisé, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1614">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="0ca49-1615">Les valeurs à virgule flottante sont converties en la `F` type.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1615">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="0ca49-1616">Conversion de nombres à virgule flottante en valeurs entières tronque le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1616">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="0ca49-1617">Lors de la conversion à partir d’un `float64` à un `float32`, la précision peut être perdue.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1617">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="0ca49-1618">Si `value` est trop grande pour tenir dans un `float32 (F)`, l’infini positif (si `value` est un nombre positif) ou l’infini négatif (si `value` est négative) est retourné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1618">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="0ca49-1619">Si le dépassement de capacité produit la conversion d’un type entier à un autre, les bits de poids fort sont tronqués.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1619">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="0ca49-1620">Si le résultat est inférieur à un `int32`, la valeur est étendue avec un signe pour remplir l’emplacement.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1620">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="0ca49-1621">Si le dépassement de capacité se produit la conversion d’un type à virgule flottante en entier la `result` retournée n’est pas spécifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1621">If overflow occurs converting a floating-point type to an integer the `result` returned is unspecified.</span></span> <span data-ttu-id="0ca49-1622">Le `conv.r.un` opération prend un entier de la pile, il interprète comme étant non signés et le remplace par un nombre à virgule flottante pour représenter l’entier : soit un `float32`, si c’est assez large pour représenter l’entier sans perte de précision, sans quoi un `float64`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1622">The `conv.r.un` operation takes an integer off the stack, interprets it as unsigned, and replaces it with a floating-point number to represent the integer: either a `float32`, if this is wide enough to represent the integer without loss of precision, or else a `float64`.</span></span>  
  
 <span data-ttu-id="0ca49-1623">Aucune exception n’est levée lors de l’utilisation de ce champ.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1623">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="0ca49-1624">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.r.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1624">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1625">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1625">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1626">Convertit la valeur située en haut de la pile d'évaluation en <see langword="float32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1626">Converts the value on top of the evaluation stack to <see langword="float32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1627">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1627">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1628">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1628">Format</span></span>|<span data-ttu-id="0ca49-1629">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1629">Assembly Format</span></span>|<span data-ttu-id="0ca49-1630">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1630">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1631">6 B</span><span class="sxs-lookup"><span data-stu-id="0ca49-1631">6B</span></span>|<span data-ttu-id="0ca49-1632">conv.r4</span><span class="sxs-lookup"><span data-stu-id="0ca49-1632">conv.r4</span></span>|<span data-ttu-id="0ca49-1633">Convertir en `float32`, exécution de type push `F` sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1633">Convert to `float32`, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="0ca49-1634">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1634">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1635">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1635">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1636">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1636">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="0ca49-1637">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1637">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1638">Le `conv.r4` opcode convertit le `value` sur la pile pour le type spécifié dans l’opcode et laisse cette valeur convertie en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1638">The `conv.r4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1639">Les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.i` ou `conv.u` est utilisé, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1639">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="0ca49-1640">Les valeurs à virgule flottante sont converties en la `F` type.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1640">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="0ca49-1641">Conversion de nombres à virgule flottante en valeurs entières tronque le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1641">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="0ca49-1642">Lors de la conversion à partir d’un `float64` à un `float32`, la précision peut être perdue.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1642">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="0ca49-1643">Si `value` est trop grande pour tenir dans un `float32 (F)`, l’infini positif (si `value` est un nombre positif) ou l’infini négatif (si `value` est négative) est retourné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1643">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="0ca49-1644">Si le dépassement de capacité produit la conversion d’un type entier à un autre, les bits de poids fort sont tronqués.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1644">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="0ca49-1645">Si le résultat est inférieur à un `int32`, la valeur est étendue avec un signe pour remplir l’emplacement.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1645">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="0ca49-1646">En cas de dépassement de capacité de conversion d’un type à virgule flottante en entier, la valeur retournée n’est pas spécifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1646">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="0ca49-1647">Aucune exception n’est levée lors de l’utilisation de ce champ.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1647">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="0ca49-1648">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.r4` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1648">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r4` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1649">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1649">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1650">Convertit la valeur située en haut de la pile d'évaluation en <see langword="float64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1650">Converts the value on top of the evaluation stack to <see langword="float64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1651">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1651">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1652">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1652">Format</span></span>|<span data-ttu-id="0ca49-1653">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1653">Assembly Format</span></span>|<span data-ttu-id="0ca49-1654">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1654">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1655">6C</span><span class="sxs-lookup"><span data-stu-id="0ca49-1655">6C</span></span>|<span data-ttu-id="0ca49-1656">conv.r8</span><span class="sxs-lookup"><span data-stu-id="0ca49-1656">conv.r8</span></span>|<span data-ttu-id="0ca49-1657">Convertir en `float64`, exécution de type push `F` sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1657">Convert to `float64`, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="0ca49-1658">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1658">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1659">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1659">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1660">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1660">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="0ca49-1661">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1661">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1662">Le `conv.r8` opcode convertit le `value` sur la pile pour le type spécifié dans l’opcode et laisse cette valeur convertie en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1662">The `conv.r8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1663">Les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.i` ou `conv.u` est utilisé, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1663">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="0ca49-1664">Les valeurs à virgule flottante sont converties en la `F` type.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1664">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="0ca49-1665">Conversion de nombres à virgule flottante en valeurs entières tronque le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1665">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="0ca49-1666">Lors de la conversion à partir d’un `float64` à un `float32`, la précision peut être perdue.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1666">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="0ca49-1667">Si `value` est trop grande pour tenir dans un `float32 (F)`, l’infini positif (si `value` est un nombre positif) ou l’infini négatif (si `value` est négative) est retourné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1667">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="0ca49-1668">Si le dépassement de capacité produit la conversion d’un type entier à un autre, les bits de poids fort sont tronqués.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1668">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="0ca49-1669">Si le résultat est inférieur à un `int32`, la valeur est étendue avec un signe pour remplir l’emplacement.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1669">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="0ca49-1670">En cas de dépassement de capacité de conversion d’un type à virgule flottante en entier, la valeur retournée n’est pas spécifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1670">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="0ca49-1671">Aucune exception n’est levée lors de l’utilisation de ce champ.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1671">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="0ca49-1672">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.r8` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1672">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r8` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1673">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1673">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1674">Convertit la valeur située en haut de la pile d'évaluation en <see langword="unsigned native int" /> et l'étend à <see langword="native int" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1674">Converts the value on top of the evaluation stack to <see langword="unsigned native int" />, and extends it to <see langword="native int" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1675">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1675">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1676">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1676">Format</span></span>|<span data-ttu-id="0ca49-1677">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1677">Assembly Format</span></span>|<span data-ttu-id="0ca49-1678">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1678">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1679">E0</span><span class="sxs-lookup"><span data-stu-id="0ca49-1679">E0</span></span>|<span data-ttu-id="0ca49-1680">conv.u</span><span class="sxs-lookup"><span data-stu-id="0ca49-1680">conv.u</span></span>|<span data-ttu-id="0ca49-1681">Convertir en `unsigned native int`, exécution de type push `native int` sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1681">Convert to `unsigned native int`, pushing `native int` on stack.</span></span>|  
  
 <span data-ttu-id="0ca49-1682">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1682">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1683">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1683">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1684">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1684">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="0ca49-1685">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1685">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1686">Le `conv.u` opcode convertit le `value` sur la pile pour le type spécifié dans l’opcode et laisse cette valeur convertie en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1686">The `conv.u` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1687">Les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.i` ou `conv.u` est utilisé, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1687">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="0ca49-1688">Les valeurs à virgule flottante sont converties en la `F` type.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1688">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="0ca49-1689">Conversion de nombres à virgule flottante en valeurs entières tronque le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1689">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="0ca49-1690">Lors de la conversion à partir d’un `float64` à un `float32`, la précision peut être perdue.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1690">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="0ca49-1691">Si `value` est trop grande pour tenir dans un `float32 (F)`, l’infini positif (si `value` est un nombre positif) ou l’infini négatif (si `value` est négative) est retourné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1691">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="0ca49-1692">Si le dépassement de capacité produit la conversion d’un type entier à un autre, les bits de poids fort sont tronqués.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1692">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="0ca49-1693">Si le résultat est inférieur à un `int32`, la valeur est étendue avec un signe pour remplir l’emplacement.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1693">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="0ca49-1694">En cas de dépassement de capacité de conversion d’un type à virgule flottante en entier, la valeur retournée n’est pas spécifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1694">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="0ca49-1695">Aucune exception n’est levée lors de l’utilisation de ce champ.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1695">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="0ca49-1696">Consultez <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> et <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> pour obtenir des instructions équivalentes qui lèvent une exception lorsque le type de résultat ne peut pas représenter correctement la valeur de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1696">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="0ca49-1697">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.u` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1697">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1698">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1698">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1699">Convertit la valeur située en haut de la pile d'évaluation en <see langword="unsigned int8" /> et l'étend à <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1699">Converts the value on top of the evaluation stack to <see langword="unsigned int8" />, and extends it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1700">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1700">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1701">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1701">Format</span></span>|<span data-ttu-id="0ca49-1702">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1702">Assembly Format</span></span>|<span data-ttu-id="0ca49-1703">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1703">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1704">D2</span><span class="sxs-lookup"><span data-stu-id="0ca49-1704">D2</span></span>|<span data-ttu-id="0ca49-1705">conv.U1</span><span class="sxs-lookup"><span data-stu-id="0ca49-1705">conv.u1</span></span>|<span data-ttu-id="0ca49-1706">Convertir en `int8`, exécution de type push `int32` sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1706">Convert to `int8`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="0ca49-1707">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1707">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1708">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1708">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1709">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1709">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="0ca49-1710">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1710">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1711">Le `conv.u1` opcode convertit le `value` sur la pile pour le type spécifié dans l’opcode et laisse cette valeur convertie en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1711">The `conv.u1` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1712">Les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.i` ou `conv.u` est utilisé, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1712">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="0ca49-1713">Les valeurs à virgule flottante sont converties en la `F` type.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1713">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="0ca49-1714">Conversion de nombres à virgule flottante en valeurs entières tronque le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1714">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="0ca49-1715">Lors de la conversion à partir d’un `float64` à un `float32`, la précision peut être perdue.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1715">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="0ca49-1716">Si `value` est trop grande pour tenir dans un `float32 (F)`, l’infini positif (si `value` est un nombre positif) ou l’infini négatif (si `value` est négative) est retourné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1716">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="0ca49-1717">Si le dépassement de capacité produit la conversion d’un type entier à un autre, les bits de poids fort sont tronqués.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1717">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="0ca49-1718">Si le résultat est inférieur à un `int32`, la valeur est étendue avec un signe pour remplir l’emplacement.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1718">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="0ca49-1719">En cas de dépassement de capacité de conversion d’un type à virgule flottante en entier, la valeur retournée n’est pas spécifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1719">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="0ca49-1720">Aucune exception n’est levée lors de l’utilisation de ce champ.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1720">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="0ca49-1721">Consultez <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> et <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> pour obtenir des instructions équivalentes qui lèvent une exception lorsque le type de résultat ne peut pas représenter correctement la valeur de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1721">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="0ca49-1722">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.u1` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1722">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u1` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1723">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1723">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1724">Convertit la valeur située en haut de la pile d'évaluation en <see langword="unsigned int16" /> et l'étend à <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1724">Converts the value on top of the evaluation stack to <see langword="unsigned int16" />, and extends it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1725">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1725">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1726">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1726">Format</span></span>|<span data-ttu-id="0ca49-1727">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1727">Assembly Format</span></span>|<span data-ttu-id="0ca49-1728">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1728">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1729">D1</span><span class="sxs-lookup"><span data-stu-id="0ca49-1729">D1</span></span>|<span data-ttu-id="0ca49-1730">conv.U2</span><span class="sxs-lookup"><span data-stu-id="0ca49-1730">conv.u2</span></span>|<span data-ttu-id="0ca49-1731">Convertir en `int16`, exécution de type push `int32` sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1731">Convert to `int16`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="0ca49-1732">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1732">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1733">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1733">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1734">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1734">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="0ca49-1735">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1735">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1736">Le `conv.u2` opcode convertit le `value` sur la pile pour le type spécifié dans l’opcode et laisse cette valeur convertie en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1736">The `conv.u2` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1737">Les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.i` ou `conv.u` est utilisé, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1737">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="0ca49-1738">Les valeurs à virgule flottante sont converties en la `F` type.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1738">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="0ca49-1739">Conversion de nombres à virgule flottante en valeurs entières tronque le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1739">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="0ca49-1740">Lors de la conversion à partir d’un `float64` à un `float32`, la précision peut être perdue.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1740">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="0ca49-1741">Si `value` est trop grande pour tenir dans un `float32 (F)`, l’infini positif (si `value` est un nombre positif) ou l’infini négatif (si `value` est négative) est retourné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1741">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="0ca49-1742">Si le dépassement de capacité produit la conversion d’un type entier à un autre, les bits de poids fort sont tronqués.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1742">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="0ca49-1743">Si le résultat est inférieur à un `int32`, la valeur est étendue avec un signe pour remplir l’emplacement.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1743">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="0ca49-1744">En cas de dépassement de capacité de conversion d’un type à virgule flottante en entier, la valeur retournée n’est pas spécifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1744">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="0ca49-1745">Aucune exception n’est levée lors de l’utilisation de ce champ.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1745">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="0ca49-1746">Consultez <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> et <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> pour obtenir des instructions équivalentes qui lèvent une exception lorsque le type de résultat ne peut pas représenter correctement la valeur de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1746">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="0ca49-1747">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.u2` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1747">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u2` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1748">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1748">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1749">Convertit la valeur située en haut de la pile d'évaluation en <see langword="unsigned int32" /> et l'étend à <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1749">Converts the value on top of the evaluation stack to <see langword="unsigned int32" />, and extends it to <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1750">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1750">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1751">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1751">Format</span></span>|<span data-ttu-id="0ca49-1752">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1752">Assembly Format</span></span>|<span data-ttu-id="0ca49-1753">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1753">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1754">6D</span><span class="sxs-lookup"><span data-stu-id="0ca49-1754">6D</span></span>|<span data-ttu-id="0ca49-1755">conv.U4</span><span class="sxs-lookup"><span data-stu-id="0ca49-1755">conv.u4</span></span>|<span data-ttu-id="0ca49-1756">Convertir en `unsigned int32`, exécution de type push `int32` sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1756">Convert to `unsigned int32`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="0ca49-1757">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1757">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1758">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1758">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1759">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1759">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="0ca49-1760">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1760">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1761">Le `conv.u4` opcode convertit le `value` sur la pile pour le type spécifié dans l’opcode et laisse cette valeur convertie en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1761">The `conv.u4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1762">Les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.i` ou `conv.u` est utilisé, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1762">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="0ca49-1763">Les valeurs à virgule flottante sont converties en la `F` type.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1763">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="0ca49-1764">Conversion de nombres à virgule flottante en valeurs entières tronque le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1764">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="0ca49-1765">Lors de la conversion à partir d’un `float64` à un `float32`, la précision peut être perdue.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1765">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="0ca49-1766">Si `value` est trop grande pour tenir dans un `float32 (F)`, l’infini positif (si `value` est un nombre positif) ou l’infini négatif (si `value` est négative) est retourné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1766">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="0ca49-1767">Si le dépassement de capacité produit la conversion d’un type entier à un autre, les bits de poids fort sont tronqués.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1767">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="0ca49-1768">Si le résultat est inférieur à un `int32`, la valeur est étendue avec un signe pour remplir l’emplacement.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1768">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="0ca49-1769">En cas de dépassement de capacité de conversion d’un type à virgule flottante en entier, la valeur retournée n’est pas spécifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1769">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="0ca49-1770">Aucune exception n’est levée lors de l’utilisation de ce champ.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1770">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="0ca49-1771">Consultez <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> et <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> pour obtenir des instructions équivalentes qui lèvent une exception lorsque le type de résultat ne peut pas représenter correctement la valeur de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1771">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="0ca49-1772">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.u4` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1772">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u4` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1773">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1773">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1774">Convertit la valeur située en haut de la pile d'évaluation en <see langword="unsigned int64" /> et l'étend à <see langword="int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1774">Converts the value on top of the evaluation stack to <see langword="unsigned int64" />, and extends it to <see langword="int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1775">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1775">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1776">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1776">Format</span></span>|<span data-ttu-id="0ca49-1777">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1777">Assembly Format</span></span>|<span data-ttu-id="0ca49-1778">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1778">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1779">6E</span><span class="sxs-lookup"><span data-stu-id="0ca49-1779">6E</span></span>|<span data-ttu-id="0ca49-1780">conv.U8</span><span class="sxs-lookup"><span data-stu-id="0ca49-1780">conv.u8</span></span>|<span data-ttu-id="0ca49-1781">Convertir en `int64`, exécution de type push `int64` sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1781">Convert to `int64`, pushing `int64` on stack.</span></span>|  
  
 <span data-ttu-id="0ca49-1782">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1782">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1783">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1783">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1784">`value` est dépilée de la pile et la conversion est tentée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1784">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="0ca49-1785">Si la conversion est réussie, la valeur résultante est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1785">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1786">Le `conv.u8` opcode convertit le `value` sur la pile pour le type spécifié dans l’opcode et laisse cette valeur convertie en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1786">The `conv.u8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="0ca49-1787">Les valeurs entières inférieures à 4 octets sont étendues à `int32` lorsqu’elles sont chargées dans la pile d’évaluation (sauf si `conv.i` ou `conv.u` est utilisé, auquel cas le résultat est également `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1787">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="0ca49-1788">Les valeurs à virgule flottante sont converties en la `F` type.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1788">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="0ca49-1789">Conversion de nombres à virgule flottante en valeurs entières tronque le nombre vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1789">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="0ca49-1790">Lors de la conversion à partir d’un `float64` à un `float32`, la précision peut être perdue.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1790">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="0ca49-1791">Si `value` est trop grande pour tenir dans un `float32 (F)`, l’infini positif (si `value` est un nombre positif) ou l’infini négatif (si `value` est négative) est retourné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1791">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="0ca49-1792">Si le dépassement de capacité produit la conversion d’un type entier à un autre, les bits de poids fort sont tronqués.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1792">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="0ca49-1793">Si le résultat est inférieur à un `int32`, la valeur est étendue avec un signe pour remplir l’emplacement.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1793">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="0ca49-1794">En cas de dépassement de capacité de conversion d’un type à virgule flottante en entier, la valeur retournée n’est pas spécifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1794">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="0ca49-1795">Aucune exception n’est levée lors de l’utilisation de ce champ.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1795">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="0ca49-1796">Consultez <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> et <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> pour obtenir des instructions équivalentes qui lèvent une exception lorsque le type de résultat ne peut pas représenter correctement la valeur de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1796">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="0ca49-1797">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `conv.u8` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1797">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u8` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1798">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1798">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpblk;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cpblk : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1799">Copie un nombre d'octets spécifié d'une adresse source vers une adresse de destination.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1799">Copies a specified number bytes from a source address to a destination address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1800">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1800">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1801">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1801">Format</span></span>|<span data-ttu-id="0ca49-1802">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1802">Assembly Format</span></span>|<span data-ttu-id="0ca49-1803">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1803">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1804">FE 17</span><span class="sxs-lookup"><span data-stu-id="0ca49-1804">FE 17</span></span>|<span data-ttu-id="0ca49-1805">cpblk</span><span class="sxs-lookup"><span data-stu-id="0ca49-1805">cpblk</span></span>|<span data-ttu-id="0ca49-1806">Copier des données à partir d’un bloc de mémoire à un autre.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1806">Copy data from one memory block to another.</span></span>|  
  
 <span data-ttu-id="0ca49-1807">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1807">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1808">L’adresse de destination est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1808">The destination address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1809">L’adresse source est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1809">The source address is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-1810">Le nombre d’octets à copier est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1810">The number of bytes to copy is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="0ca49-1811">Le nombre d’octets, l’adresse source et l’adresse de destination est dépilé de la pile ; le nombre spécifié d’octets est copié à partir de l’adresse source à l’adresse de destination.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1811">The number of bytes, the source address, and the destination address are popped from the stack; the specified number of bytes are copied from the source address to the destination address.</span></span>  
  
 <span data-ttu-id="0ca49-1812">Le `cpblk` instruction copie un nombre (type `unsigned int32`) d’octets à partir d’une adresse source (de type `*`, `native int`, ou `&`) à une adresse de destination (de type `*`, `native int`, ou `&`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1812">The `cpblk` instruction copies a number (type `unsigned int32`) of bytes from a source address (of type `*`, `native int`, or `&`) to a destination address (of type `*`, `native int`, or `&`).</span></span> <span data-ttu-id="0ca49-1813">Le comportement de `cpblk` n’est pas spécifié si les zones source et de destination se chevauchent.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1813">The behavior of `cpblk` is unspecified if the source and destination areas overlap.</span></span>  
  
 <span data-ttu-id="0ca49-1814">`cpblk` suppose que la source et la destination traités sont alignées avec la taille naturelle de l’ordinateur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1814">`cpblk` assumes that both the source and destination addressed are aligned to the natural size of the machine.</span></span> <span data-ttu-id="0ca49-1815">Le `cpblk` instruction peut être immédiatement précédée par le `unaligned.<prefix>` pour indiquer que la source ou la destination n’est pas alignée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1815">The `cpblk` instruction can be immediately preceded by the `unaligned.<prefix>` instruction to indicate that either the source or the destination is unaligned.</span></span>  
  
 <span data-ttu-id="0ca49-1816">L’opération de la `cpblk` instruction peut être modifiée par une instruction <xref:System.Reflection.Emit.OpCodes.Volatile> ou <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction de préfixe.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1816">The operation of the `cpblk` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="0ca49-1817"><xref:System.NullReferenceException> peut être levée si une adresse non valide est détectée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1817"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="0ca49-1818">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `cpblk` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1818">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cpblk` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1819">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1819">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cpobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1820">Copie le type valeur situé à l'adresse d'un objet (type <see langword="&amp;" />, <see langword="*" /> ou <see langword="native int" />) à l'adresse de l'objet de destination (type <see langword="&amp;" />, <see langword="*" /> ou <see langword="native int" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1820">Copies the value type located at the address of an object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />) to the address of the destination object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1821">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1821">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1822">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1822">Format</span></span>|<span data-ttu-id="0ca49-1823">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1823">Assembly Format</span></span>|<span data-ttu-id="0ca49-1824">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1824">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1825">70 < `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-1825">70 < `T` ></span></span>|<span data-ttu-id="0ca49-1826">cpobj `classTok`</span><span class="sxs-lookup"><span data-stu-id="0ca49-1826">cpobj `classTok`</span></span>|<span data-ttu-id="0ca49-1827">Copie un type valeur à partir d’un objet source vers un objet de destination.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1827">Copies a value type from a source object to a destination object.</span></span>|  
  
 <span data-ttu-id="0ca49-1828">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1828">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1829">La référence d’objet de destination est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1829">The destination object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1830">La référence d’objet source est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1830">The source object reference is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-1831">Les deux références d’objet sont dépilés de la pile ; le type de valeur à l’adresse de l’objet source est copié à l’adresse de l’objet de destination.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1831">The two object references are popped from the stack; the value type at the address of the source object is copied to the address of the destination object.</span></span>  
  
 <span data-ttu-id="0ca49-1832">Le comportement de `cpobj` n’est pas spécifié si la source et la destination de l’objet références ne sont pas des pointeurs vers des instances de la classe représentée par le jeton de la classe `classTok` (un `typeref` ou `typedef`), ou si `classTok` ne représente pas un type de valeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1832">The behavior of `cpobj` is unspecified if the source and destination object references are not pointers to instances of the class represented by the class token `classTok` (a `typeref` or `typedef`), or if `classTok` does not represent a value type.</span></span>  
  
 <span data-ttu-id="0ca49-1833"><xref:System.NullReferenceException> peut être levée si une adresse non valide est détectée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1833"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="0ca49-1834">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `cpobj` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1834">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cpobj` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1835">ILGenerator.Emit (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1835">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div;" />
      <MemberSignature Language="F#" Value=" staticval mutable Div : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Div" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1836">Divise une valeur par une autre et exécute un push du résultat en tant que valeur à virgule flottante (type <see langword="F" />) ou quotient (type <see langword="int32" />) dans la pile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1836">Divides two values and pushes the result as a floating-point (type <see langword="F" />) or quotient (type <see langword="int32" />) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1837">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1837">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1838">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1838">Format</span></span>|<span data-ttu-id="0ca49-1839">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1839">Assembly Format</span></span>|<span data-ttu-id="0ca49-1840">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1840">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1841">5 B</span><span class="sxs-lookup"><span data-stu-id="0ca49-1841">5B</span></span>|<span data-ttu-id="0ca49-1842">div</span><span class="sxs-lookup"><span data-stu-id="0ca49-1842">div</span></span>|<span data-ttu-id="0ca49-1843">Divise deux valeurs pour retourner un quotient ou un résultat à virgule flottante.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1843">Divides two values to return a quotient or floating-point result.</span></span>|  
  
 <span data-ttu-id="0ca49-1844">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1844">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1845">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1845">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1846">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1846">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-1847">`value2` et `value1` sont dépilés de la pile ; `value1` est divisé par `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1847">`value2` and `value1` are popped from the stack; `value1` is divided by `value2`.</span></span>  
  
4.  <span data-ttu-id="0ca49-1848">Le résultat est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1848">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1849">`result` = `value1` value2 répond aux conditions suivantes :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1849">`result` = `value1` div value2 satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="0ca49-1850">&#124;`result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;, et :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1850">&#124; `result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;, and:</span></span>  
  
 <span data-ttu-id="0ca49-1851">signe (`result`) = +, if signer (`value1`) = connexion (`value2`), ou-, si l’authentification (`value1`) ~ = connexion (`value2`)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1851">sign(`result`) = +, if sign(`value1`) = sign(`value2`), or -, if sign(`value1`) ~= sign(`value2`)</span></span>  
  
 <span data-ttu-id="0ca49-1852">La `div` instruction calcule le résultat et il exécute un push sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1852">The `div` instruction computes the result and pushes it on the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1853">Division d’entier tronque vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1853">Integer division truncates towards zero.</span></span>  
  
 <span data-ttu-id="0ca49-1854">Division d’un nombre fini par zéro produit la valeur infinie correctement signée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1854">Division of a finite number by zero produces the correctly signed infinite value.</span></span>  
  
 <span data-ttu-id="0ca49-1855">La division de zéro par zéro ou l’infini par l’infini produit la valeur NaN (Not-A-Number).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1855">Dividing zero by zero or infinity by infinity produces the NaN (Not-A-Number) value.</span></span> <span data-ttu-id="0ca49-1856">N’importe quel nombre divisé par l’infini produit une valeur de zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1856">Any number divided by infinity will produce a zero value.</span></span>  
  
 <span data-ttu-id="0ca49-1857">Opérations intégrales lever <xref:System.ArithmeticException> si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1857">Integral operations throw <xref:System.ArithmeticException> if the result cannot be represented in the result type.</span></span> <span data-ttu-id="0ca49-1858">Cela peut se produire si `value1` est la valeur négative maximale, et `value2` est -1.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1858">This can happen if `value1` is the maximum negative value, and `value2` is -1.</span></span>  
  
 <span data-ttu-id="0ca49-1859">Opérations intégrales lever <xref:System.DivideByZeroException> si `value2` est égal à zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1859">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="0ca49-1860">Notez que sur les plateformes Intel un <xref:System.OverflowException> est levée lors du calcul (minint div -1).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1860">Note that on Intel-based platforms an <xref:System.OverflowException> is thrown when computing (minint div -1).</span></span> <span data-ttu-id="0ca49-1861">Opérations à virgule flottante ne lèvent jamais d’exception (elles produisent NaN ou les valeurs infinies).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1861">Floating-point operations never throw an exception (they produce NaNs or infinities instead).</span></span>  
  
 <span data-ttu-id="0ca49-1862">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `div` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1862">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `div` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1863">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1863">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Div_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1864">Divise une valeur entière non signée par une autre et exécute un push du résultat (<see langword="int32" />) dans la pile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1864">Divides two unsigned integer values and pushes the result (<see langword="int32" />) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1865">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1865">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1866">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1866">Format</span></span>|<span data-ttu-id="0ca49-1867">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1867">Assembly Format</span></span>|<span data-ttu-id="0ca49-1868">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1868">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1869">5C</span><span class="sxs-lookup"><span data-stu-id="0ca49-1869">5C</span></span>|<span data-ttu-id="0ca49-1870">div.un</span><span class="sxs-lookup"><span data-stu-id="0ca49-1870">div.un</span></span>|<span data-ttu-id="0ca49-1871">Divise deux valeurs, non signés, retournant un quotient.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1871">Divides two values, unsigned, returning a quotient.</span></span>|  
  
 <span data-ttu-id="0ca49-1872">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1872">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1873">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1873">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1874">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1874">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-1875">`value2` et `value1` sont dépilés de la pile ; `value1` est divisé par `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1875">`value2` and `value1` are popped from the stack; `value1` is divided by `value2`.</span></span>  
  
4.  <span data-ttu-id="0ca49-1876">Le résultat est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1876">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1877">Le `div.un` instruction calcule `value1` divisé par `value2`, les deux étant pris en tant qu’entiers non signés et exécute un push le `result` sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1877">The `div.un` instruction computes `value1` divided by `value2`, both taken as unsigned integers, and pushes the `result` on the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1878">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `div.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1878">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `div.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1879">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1879">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dup">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Dup;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Dup" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Dup" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Dup As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Dup;" />
      <MemberSignature Language="F#" Value=" staticval mutable Dup : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Dup" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1880">Copie la valeur actuelle la plus haute dans la pile d'évaluation et exécute un push de la copie dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1880">Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1881">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1881">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1882">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1882">Format</span></span>|<span data-ttu-id="0ca49-1883">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1883">Assembly Format</span></span>|<span data-ttu-id="0ca49-1884">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1884">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1885">25</span><span class="sxs-lookup"><span data-stu-id="0ca49-1885">25</span></span>|<span data-ttu-id="0ca49-1886">DUP</span><span class="sxs-lookup"><span data-stu-id="0ca49-1886">dup</span></span>|<span data-ttu-id="0ca49-1887">Duplique la valeur en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1887">Duplicates the value on the top of the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-1888">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1888">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1889">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1889">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1890">`value` est expulsé de la pile pour la duplication.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1890">`value` is popped off of the stack for duplication.</span></span>  
  
3.  <span data-ttu-id="0ca49-1891">`value` sont réinsérées dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1891">`value` is pushed back onto the stack.</span></span>  
  
4.  <span data-ttu-id="0ca49-1892">Une valeur en double est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1892">A duplicate value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1893">La `dup` instruction duplique l’élément supérieur de la pile et laisse deux valeurs identiques au-dessus d’elle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1893">The `dup` instruction duplicates the top element of the stack, and leaves two identical values atop it.</span></span>  
  
 <span data-ttu-id="0ca49-1894">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `dup` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1894">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `dup` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1895">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1895">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfilter">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfilter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfilter" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfilter As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfilter;" />
      <MemberSignature Language="F#" Value=" staticval mutable Endfilter : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1896">Transfère à nouveau le contrôle de la clause <see langword="filter" /> d'une exception au gestionnaire d'exceptions CLI.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1896">Transfers control from the <see langword="filter" /> clause of an exception back to the Common Language Infrastructure (CLI) exception handler.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1897">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1897">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1898">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1898">Format</span></span>|<span data-ttu-id="0ca49-1899">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1899">Assembly Format</span></span>|<span data-ttu-id="0ca49-1900">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1900">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1901">FE 11</span><span class="sxs-lookup"><span data-stu-id="0ca49-1901">FE 11</span></span>|<span data-ttu-id="0ca49-1902">endfilter</span><span class="sxs-lookup"><span data-stu-id="0ca49-1902">endfilter</span></span>|<span data-ttu-id="0ca49-1903">Clause de filtre de fin de la gestion des exceptions SEH.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1903">End filter clause of SEH exception handling.</span></span>|  
  
 <span data-ttu-id="0ca49-1904">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1904">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1905">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1905">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1906">`value` est retirée de la pile ; `endfilter` est exécutée et le contrôle est transféré au gestionnaire d’exceptions.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1906">`value` is popped from the stack; `endfilter` is executed and control is transferred to the exception handler.</span></span>  
  
 <span data-ttu-id="0ca49-1907">`Value` (qui doit être de type `int32` et fait partie d’un ensemble spécifique de valeurs) est retournée à partir de la clause de filtre.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1907">`Value` (which must be of type `int32` and is one of a specific set of values) is returned from the filter clause.</span></span> <span data-ttu-id="0ca49-1908">Il doit s’agir de :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1908">It should be one of:</span></span>  
  
-   <span data-ttu-id="0ca49-1909">`exception_continue_search` (`value` = 0) pour poursuivre la recherche pour un gestionnaire d’exceptions</span><span class="sxs-lookup"><span data-stu-id="0ca49-1909">`exception_continue_search` (`value` = 0) to continue searching for an exception handler</span></span>  
  
-   <span data-ttu-id="0ca49-1910">`exception_execute_handler` (`value` = 1) pour lancer la deuxième phase de gestion des exceptions où les blocs finally sont exécutés jusqu'à ce que le gestionnaire associé à cette clause de filtre se trouve.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1910">`exception_execute_handler` (`value` = 1) to start the second phase of exception handling where finally blocks are run until the handler associated with this filter clause is located.</span></span> <span data-ttu-id="0ca49-1911">Lors de la découverte, le gestionnaire est exécuté.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1911">Upon discovery, the handler is executed.</span></span>  
  
 <span data-ttu-id="0ca49-1912">D’autres valeurs entières produira des résultats non spécifiées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1912">Other integer values will produce unspecified results.</span></span>  
  
 <span data-ttu-id="0ca49-1913">Le point d’entrée d’un filtre, comme indiqué dans la table d’exceptions de la méthode, doit être la première instruction dans le bloc de code du filtre.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1913">The entry point of a filter, as shown in the method's exception table, must be the first instruction in the filter's code block.</span></span> <span data-ttu-id="0ca49-1914">Le `endfilter` instruction doit être la dernière instruction dans le bloc de code du filtre (par conséquent, il peut être seulement un `endfilter` pour chaque bloc de filtre).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1914">The `endfilter` instruction must be the last instruction in the filter's code block (hence there can only be one `endfilter` for any single filter block).</span></span> <span data-ttu-id="0ca49-1915">Après avoir exécuté la `endfilter` instruction, logiquement le flux de contrôle au mécanisme de gestion d’exceptions CLI.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1915">After executing the `endfilter` instruction, control logically flows back to the CLI exception handling mechanism.</span></span>  
  
 <span data-ttu-id="0ca49-1916">Contrôle ne peut pas être transféré dans un bloc de filtre sauf via le mécanisme d’exception.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1916">Control cannot be transferred into a filter block except through the exception mechanism.</span></span> <span data-ttu-id="0ca49-1917">Le contrôle ne peut pas être transféré en dehors d’un bloc de filtre à l’exception à l’aide d’un `throw` instruction ou en exécutant la dernière `endfilter` instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1917">Control cannot be transferred out of a filter block except through the use of a `throw` instruction or by executing the final `endfilter` instruction.</span></span> <span data-ttu-id="0ca49-1918">Vous ne pouvez pas incorporer un `try` bloquer dans un `filter` bloc.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1918">You cannot embed a `try` block within a `filter` block.</span></span> <span data-ttu-id="0ca49-1919">Si une exception est levée à l’intérieur de la `filter` bloc, elle est interceptée et la valeur 0 (`exception_continue_search`) est retournée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1919">If an exception is thrown inside the `filter` block, it is intercepted and a value of 0 (`exception_continue_search`) is returned.</span></span>  
  
 <span data-ttu-id="0ca49-1920">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `endfilter` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1920">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `endfilter` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1921">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1921">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfinally">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfinally;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfinally" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfinally As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfinally;" />
      <MemberSignature Language="F#" Value=" staticval mutable Endfinally : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1922">Transfère à nouveau le contrôle de la clause <see langword="fault" /> ou <see langword="finally" /> d'un bloc d'exception au gestionnaire d'exceptions CLI.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1922">Transfers control from the <see langword="fault" /> or <see langword="finally" /> clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1923">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1923">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1924">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1924">Format</span></span>|<span data-ttu-id="0ca49-1925">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1925">Assembly Format</span></span>|<span data-ttu-id="0ca49-1926">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1926">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1927">DC</span><span class="sxs-lookup"><span data-stu-id="0ca49-1927">DC</span></span>|<span data-ttu-id="0ca49-1928">endfinally</span><span class="sxs-lookup"><span data-stu-id="0ca49-1928">endfinally</span></span><br /><br /> <span data-ttu-id="0ca49-1929">endfault</span><span class="sxs-lookup"><span data-stu-id="0ca49-1929">endfault</span></span>|<span data-ttu-id="0ca49-1930">Met fin à la `finally` ou `fault` clause d’un bloc d’exception.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1930">Ends the `finally` or `fault` clause of an exception block.</span></span>|  
  
 <span data-ttu-id="0ca49-1931">Il n’existe aucune pile de comportements de transition pour cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1931">There are no stack transition behaviors for this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-1932">`Endfinally` et `endfault` signaler la fin de la `finally` ou `fault` clause afin que le déroulement puisse continuer jusqu'à ce que le Gestionnaire d’exceptions est appelé.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1932">`Endfinally` and `endfault` signal the end of the `finally` or `fault` clause so that stack unwinding can continue until the exception handler is invoked.</span></span> <span data-ttu-id="0ca49-1933">Le `endfinally` ou `endfault` instruction transfère le contrôle vers le mécanisme d’exception CLI.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1933">The `endfinally` or `endfault` instruction transfers control back to the CLI exception mechanism.</span></span> <span data-ttu-id="0ca49-1934">La recherche pour le prochain ensuite `finally` clause dans la chaîne si le bloc protégé a été fermé avec une instruction leave.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1934">The mechanism then searches for the next `finally` clause in the chain if the protected block was exited with a leave instruction.</span></span> <span data-ttu-id="0ca49-1935">Si le bloc protégé a été fermé avec une exception, l’interface CLI recherchera la prochaine `finally` ou `fault`, ou entrez le Gestionnaire d’exceptions au moment de la première passe de la gestion des exceptions.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1935">If the protected block was exited with an exception, the CLI will search for the next `finally` or `fault`, or enter the exception handler chosen during the first pass of exception handling.</span></span>  
  
 <span data-ttu-id="0ca49-1936">Un `endfinally` instruction peut apparaître uniquement sur le plan lexical dans un `finally` bloc.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1936">An `endfinally` instruction might only appear lexically within a `finally` block.</span></span> <span data-ttu-id="0ca49-1937">Contrairement à la `endfilter` obtenir des instructions, il n’est pas nécessaire que le bloc se termine avec un `endfinally` instruction et peut avoir autant `endfinally` instructions au sein du bloc en fonction des besoins.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1937">Unlike the `endfilter` instruction, there is no requirement that the block end with an `endfinally` instruction, and there can be as many `endfinally` instructions within the block as required.</span></span> <span data-ttu-id="0ca49-1938">Ces mêmes restrictions s’appliquent à la `endfault` instruction et le `fault` bloc.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1938">These same restrictions apply to the `endfault` instruction and the `fault` block.</span></span>  
  
 <span data-ttu-id="0ca49-1939">Le contrôle ne peut pas être transféré dans un `finally` (ou `fault`) bloquer, sauf via le mécanisme d’exception.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1939">Control cannot be transferred into a `finally` (or `fault`) block except through the exception mechanism.</span></span> <span data-ttu-id="0ca49-1940">Contrôle ne peut pas être transféré hors d’un `finally` (ou `fault`) bloquer à l’exception à l’aide d’un `throw` instruction ou en exécutant la `endfinally` (ou `endfault`) instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1940">Control cannot be transferred out of a `finally` (or `fault`) block except through the use of a `throw` instruction or executing the `endfinally` (or `endfault`) instruction.</span></span> <span data-ttu-id="0ca49-1941">En particulier, vous ne pouvez pas » se répartissent » d’un `finally` (ou `fault`) bloc ou d’exécuter un <xref:System.Reflection.Emit.OpCodes.Ret> ou <xref:System.Reflection.Emit.OpCodes.Leave> instruction dans un `finally` (ou `fault`) bloc.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1941">In particular, you cannot "fall out" of a `finally` (or `fault`) block or to execute a <xref:System.Reflection.Emit.OpCodes.Ret> or <xref:System.Reflection.Emit.OpCodes.Leave> instruction within a `finally` (or `fault`) block.</span></span>  
  
 <span data-ttu-id="0ca49-1942">Notez que le `endfault` et `endfinally` instructions sont des alias : ils correspondent au même opcode.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1942">Note that the `endfault` and `endfinally` instructions are aliases - they correspond to the same opcode.</span></span>  
  
 <span data-ttu-id="0ca49-1943">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `endfinally` (`endfault`) opcode, ainsi que le `ILGenerator` méthode <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1943">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `endfinally` (`endfault`) opcode, as well as the `ILGenerator` method <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>.</span></span>  
  
-   <span data-ttu-id="0ca49-1944">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1944">ILGenerator.Emit(OpCode)</span></span>  
  
-   <span data-ttu-id="0ca49-1945">ILGenerator.EndExceptionBlock()</span><span class="sxs-lookup"><span data-stu-id="0ca49-1945">ILGenerator.EndExceptionBlock()</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initblk;" />
      <MemberSignature Language="F#" Value=" staticval mutable Initblk : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Initblk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1946">Initialise un bloc de mémoire spécifié situé à une adresse spécifique en utilisant une taille et une valeur initiale données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1946">Initializes a specified block of memory at a specific address to a given size and initial value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1947">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1947">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1948">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1948">Format</span></span>|<span data-ttu-id="0ca49-1949">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1949">Assembly Format</span></span>|<span data-ttu-id="0ca49-1950">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1950">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1951">FE 18</span><span class="sxs-lookup"><span data-stu-id="0ca49-1951">FE 18</span></span>|<span data-ttu-id="0ca49-1952">initblk</span><span class="sxs-lookup"><span data-stu-id="0ca49-1952">initblk</span></span>|<span data-ttu-id="0ca49-1953">Définir chaque emplacement dans un bloc de mémoire à une valeur donnée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1953">Set each location in a block of memory to a given value.</span></span>|  
  
 <span data-ttu-id="0ca49-1954">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1954">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1955">Une adresse de début est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1955">A starting address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1956">Une valeur d’initialisation est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1956">An initialization value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-1957">Le nombre d’octets à initialiser est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1957">The number of bytes to initialize is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="0ca49-1958">Le nombre d’octets, la valeur d’initialisation et l’adresse de départ est dépilé et l’initialisation est exécutée conformément à leurs valeurs.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1958">The number of bytes, the initialization value, and the starting address are popped from the stack, and the initialization is performed as per their values.</span></span>  
  
 <span data-ttu-id="0ca49-1959">Le `initblk` instruction définit le nombre (`unsigned int32`) d’octets commençant à l’adresse spécifiée (de type `native int`, `&`, ou `*`) à la valeur d’initialisation (de type `unsigned int8`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-1959">The `initblk` instruction sets the number (`unsigned int32`) of bytes starting at the specified address (of type `native int`, `&`, or `*`) to the initialization value (of type `unsigned int8`).</span></span> <span data-ttu-id="0ca49-1960">`initblk` suppose que l’adresse de départ est alignée avec la taille naturelle de l’ordinateur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1960">`initblk` assumes that the starting address is aligned to the natural size of the machine.</span></span>  
  
 <span data-ttu-id="0ca49-1961">L’opération de la `initblk` instructions peuvent être modifiées par une instruction <xref:System.Reflection.Emit.OpCodes.Volatile> ou <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction de préfixe.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1961">The operation of the `initblk` instructions can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="0ca49-1962"><xref:System.NullReferenceException> peut être levée si une adresse non valide est détectée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1962"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="0ca49-1963">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `initblk` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1963">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `initblk` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1964">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1964">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Initobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Initobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1965">Initialise tous les champs du type de valeur figurant à l'adresse spécifiée en utilisant la référence null ou la valeur 0 du type primitif qui convient.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1965">Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1966">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1966">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1967">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1967">Format</span></span>|<span data-ttu-id="0ca49-1968">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1968">Assembly Format</span></span>|<span data-ttu-id="0ca49-1969">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1969">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1970">FE 15 &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-1970">FE 15 < `T` ></span></span>|<span data-ttu-id="0ca49-1971">`initobj` `typeTok`</span><span class="sxs-lookup"><span data-stu-id="0ca49-1971">`initobj` `typeTok`</span></span>|<span data-ttu-id="0ca49-1972">Initialise un type valeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1972">Initializes a value type.</span></span>|  
  
 <span data-ttu-id="0ca49-1973">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1973">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1974">L’adresse du type valeur à initialiser est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1974">The address of the value type to initialize is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1975">L’adresse est retirée de la pile ; le type de valeur à l’adresse spécifiée est initialisé en tant que type `typeTok`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1975">The address is popped from the stack; the value type at the specified address is initialized as type `typeTok`.</span></span>  
  
 <span data-ttu-id="0ca49-1976">Le `initobj` instruction initialise chaque champ du type valeur spécifié par l’adresse envoyée (de type `native int`, `&`, ou `*`) à une référence null ou une valeur 0 du type primitif qui convient.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1976">The `initobj` instruction initializes each field of the value type specified by the pushed address (of type `native int`, `&`, or `*`) to a null reference or a 0 of the appropriate primitive type.</span></span> <span data-ttu-id="0ca49-1977">Une fois que cette méthode est appelée, l’instance est prête pour une méthode de constructeur à appeler.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1977">After this method is called, the instance is ready for a constructor method to be called.</span></span> <span data-ttu-id="0ca49-1978">Si `typeTok` est un type référence, cette instruction a le même effet que `ldnull` suivie `stind.ref`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1978">If `typeTok` is a reference type, this instruction has the same effect as `ldnull` followed by `stind.ref`.</span></span>  
  
 <span data-ttu-id="0ca49-1979">Contrairement aux <xref:System.Reflection.Emit.OpCodes.Newobj>, `initobj` n’appelle pas la méthode de constructeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1979">Unlike <xref:System.Reflection.Emit.OpCodes.Newobj>, `initobj` does not call the constructor method.</span></span> <span data-ttu-id="0ca49-1980">`Initobj` est conçu pour l’initialisation des types valeur, tandis que `newobj` est utilisé pour allouer et initialiser des objets.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1980">`Initobj` is intended for initializing value types, while `newobj` is used to allocate and initialize objects.</span></span>  
  
 <span data-ttu-id="0ca49-1981">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `initobj` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1981">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `initobj` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-1982">ILGenerator.Emit (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="0ca49-1982">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Isinst">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Isinst;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Isinst" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Isinst" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Isinst As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Isinst;" />
      <MemberSignature Language="F#" Value=" staticval mutable Isinst : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Isinst" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-1983">Vérifie si une référence d'objet (type <see langword="O" />) est une instance d'une classe particulière.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-1983">Tests whether an object reference (type <see langword="O" />) is an instance of a particular class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-1984">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1984">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-1985">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-1985">Format</span></span>|<span data-ttu-id="0ca49-1986">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-1986">Assembly Format</span></span>|<span data-ttu-id="0ca49-1987">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-1987">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-1988">75 < `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-1988">75 < `T` ></span></span>|<span data-ttu-id="0ca49-1989">isinst `class`</span><span class="sxs-lookup"><span data-stu-id="0ca49-1989">isinst `class`</span></span>|<span data-ttu-id="0ca49-1990">Teste si une référence d’objet est une instance de `class`, retournant une référence null ou une instance de cette classe ou interface.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1990">Tests if an object reference is an instance of `class`, returning either a null reference or an instance of that class or interface.</span></span>|  
  
 <span data-ttu-id="0ca49-1991">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-1991">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-1992">Une référence d’objet est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1992">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-1993">La référence d’objet est dépilée et testée pour s’il s’agit d’une instance de la classe passée dans `class`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1993">The object reference is popped from the stack and tested to see if it is an instance of the class passed in `class`.</span></span>  
  
3.  <span data-ttu-id="0ca49-1994">Le résultat (une référence d’objet ou une référence null) est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1994">The result (either an object reference or a null reference) is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-1995">`Class` est un jeton de métadonnées indiquant la classe souhaitée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1995">`Class` is a metadata token indicating the desired class.</span></span> <span data-ttu-id="0ca49-1996">Si la classe de l’objet en haut de la pile implémente `class` (si `class` est une interface) ou est une classe dérivée de `class` (si `class` est une classe normale), puis elle est convertie en type `class` et le résultat est ajoutée à la pile, exactement comme si <xref:System.Reflection.Emit.OpCodes.Castclass> avait été appelée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1996">If the class of the object on the top of the stack implements `class` (if `class` is an interface) or is a derived class of `class` (if `class` is a regular class) then it is cast to type `class` and the result is pushed on the stack, exactly as though <xref:System.Reflection.Emit.OpCodes.Castclass> had been called.</span></span> <span data-ttu-id="0ca49-1997">Sinon, une référence null est ajoutée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1997">Otherwise, a null reference is pushed on the stack.</span></span> <span data-ttu-id="0ca49-1998">Si la référence d’objet est une référence null, alors `isinst` même retourne une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1998">If the object reference itself is a null reference, then `isinst` likewise returns a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-1999"><xref:System.TypeLoadException> est levée si la classe est introuvable.</span><span class="sxs-lookup"><span data-stu-id="0ca49-1999"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="0ca49-2000">Cela est généralement détecté lorsque les instructions de langage MSIL (Microsoft Intermediate Language) sont converties en code natif, plutôt que lors de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2000">This is typically detected when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="0ca49-2001">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `isinst` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2001">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `isinst` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2002">ILGenerator.Emit (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2002">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Jmp">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Jmp;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Jmp" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Jmp" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Jmp As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Jmp;" />
      <MemberSignature Language="F#" Value=" staticval mutable Jmp : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Jmp" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2003">Quitte la méthode actuelle et passe à la méthode spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2003">Exits current method and jumps to specified method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2004">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2004">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2005">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2005">Format</span></span>|<span data-ttu-id="0ca49-2006">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2006">Assembly Format</span></span>|<span data-ttu-id="0ca49-2007">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2007">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2008">27 < `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-2008">27 < `T` ></span></span>|<span data-ttu-id="0ca49-2009">jmp `method`</span><span class="sxs-lookup"><span data-stu-id="0ca49-2009">jmp `method`</span></span>|<span data-ttu-id="0ca49-2010">Quitte la méthode actuelle et passer à la méthode spécifiée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2010">Exit current method and jump to specified method.</span></span>|  
  
 <span data-ttu-id="0ca49-2011">Il n’existe aucune pile de comportements de transition pour cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2011">There are no stack transition behaviors for this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-2012">Le `jmp` (lien) instruction transfère le contrôle à la méthode spécifiée par `method`, qui est un jeton de métadonnées pour une référence de méthode.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2012">The `jmp` (jump) instruction transfers control to the method specified by `method`, which is a metadata token for a method reference.</span></span> <span data-ttu-id="0ca49-2013">Les arguments actuels sont transférés à la méthode de destination.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2013">The current arguments are transferred to the destination method.</span></span>  
  
 <span data-ttu-id="0ca49-2014">La pile d’évaluation doit être vide lorsque cette instruction est exécutée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2014">The evaluation stack must be empty when this instruction is executed.</span></span> <span data-ttu-id="0ca49-2015">La convention d’appel, le nombre et le type d’arguments à l’adresse de destination doivent correspondre à celui de la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2015">The calling convention, number and type of arguments at the destination address must match that of the current method.</span></span>  
  
 <span data-ttu-id="0ca49-2016">Le `jmp` ne peut pas être utilisée pour transférer le contrôle d’un `try`, `filter`, `catch`, ou `finally` bloc.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2016">The `jmp` instruction cannot be used to transferred control out of a `try`, `filter`, `catch`, or `finally` block.</span></span>  
  
 <span data-ttu-id="0ca49-2017">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `jmp` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2017">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `jmp` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2018">ILGenerator.Emit (OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2018">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2019">Charge un argument (référencé par une valeur d’index spécifiée) dans la pile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2019">Loads an argument (referenced by a specified index value) onto the stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2020">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2020">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2021">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2021">Format</span></span>|<span data-ttu-id="0ca49-2022">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2022">Assembly Format</span></span>|<span data-ttu-id="0ca49-2023">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2023">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2024">FE 09 &LT; `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-2024">FE 09 < `unsigned int16` ></span></span>|<span data-ttu-id="0ca49-2025">ldarg `index`</span><span class="sxs-lookup"><span data-stu-id="0ca49-2025">ldarg `index`</span></span>|<span data-ttu-id="0ca49-2026">Charge l’argument à `index` sur pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2026">Load argument at `index` onto stack.</span></span>|  
  
 <span data-ttu-id="0ca49-2027">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2027">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2028">La valeur d’argument à `index` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2028">The argument value at `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2029">Le `ldarg` push de l’argument indexé à `index`, où les arguments sont indexés à partir de 0, dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2029">The `ldarg` instruction pushes the argument indexed at `index`, where arguments are indexed from 0 onwards, onto the evaluation stack.</span></span> <span data-ttu-id="0ca49-2030">La `ldarg` instruction peut être utilisée pour charger un type valeur ou une valeur primitive dans la pile en le copiant à partir d’un argument entrant.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2030">The `ldarg` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="0ca49-2031">Le type de la valeur d’argument est le même que le type de l’argument, comme spécifié par la signature de la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2031">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="0ca49-2032">Pour connaître les procédures qui acceptent une liste d’arguments de longueur variable, le `ldarg` instruction peut être utilisée uniquement lors du premier fixé d’arguments, pas celles dans la partie variable de la signature (voir la <xref:System.Reflection.Emit.OpCodes.Arglist> instruction pour plus d’informations).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2032">For procedures that take a variable-length argument list, the `ldarg` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <xref:System.Reflection.Emit.OpCodes.Arglist> instruction for more details).</span></span>  
  
 <span data-ttu-id="0ca49-2033">Les arguments qui contiennent une valeur entière inférieure à 4 octets sont étendus au type `int32` lorsqu’elles sont chargées dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2033">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="0ca49-2034">Valeurs à virgule flottante sont étendues à leur taille native (type `F`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2034">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="0ca49-2035">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldarg` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2035">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2036">ILGenerator.Emit (OpCode, short)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2036">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2037">Charge l'argument à l'index 0 dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2037">Loads the argument at index 0 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2038">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2038">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2039">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2039">Format</span></span>|<span data-ttu-id="0ca49-2040">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2040">Assembly Format</span></span>|<span data-ttu-id="0ca49-2041">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2041">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2042">02</span><span class="sxs-lookup"><span data-stu-id="0ca49-2042">02</span></span>|<span data-ttu-id="0ca49-2043">ldarg.0</span><span class="sxs-lookup"><span data-stu-id="0ca49-2043">ldarg.0</span></span>|<span data-ttu-id="0ca49-2044">Charge l’argument 0 dans la pile</span><span class="sxs-lookup"><span data-stu-id="0ca49-2044">Load argument 0 onto stack</span></span>|  
  
 <span data-ttu-id="0ca49-2045">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2045">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2046">La valeur d’argument à l’index 0 est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2046">The argument value at index 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2047">La `ldarg.0` instruction est un codage efficace pour charger la valeur d’argument à l’index 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2047">The `ldarg.0` instruction is an efficient encoding for loading the argument value at index 0.</span></span>  
  
 <span data-ttu-id="0ca49-2048">La `ldarg.0` instruction exécute un push de l’argument indexé à 0 dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2048">The `ldarg.0` instruction pushes the argument indexed at 0 onto the evaluation stack.</span></span> <span data-ttu-id="0ca49-2049">La `ldarg.0` instruction peut être utilisée pour charger un type valeur ou une valeur primitive dans la pile en le copiant à partir d’un argument entrant.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2049">The `ldarg.0` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="0ca49-2050">Le type de la valeur d’argument est le même que le type de l’argument, comme spécifié par la signature de la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2050">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="0ca49-2051">Les arguments qui contiennent une valeur entière inférieure à 4 octets sont étendus au type `int32` lorsqu’elles sont chargées dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2051">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="0ca49-2052">Valeurs à virgule flottante sont étendues à leur taille native (type `F`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2052">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="0ca49-2053">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldarg.0` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2053">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.0` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2054">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2054">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2055">Charge l’argument à l’index 1 dans la pile d’évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2055">Loads the argument at index 1 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2056">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2056">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2057">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2057">Format</span></span>|<span data-ttu-id="0ca49-2058">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2058">Assembly Format</span></span>|<span data-ttu-id="0ca49-2059">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2059">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2060">03</span><span class="sxs-lookup"><span data-stu-id="0ca49-2060">03</span></span>|<span data-ttu-id="0ca49-2061">ldarg.1</span><span class="sxs-lookup"><span data-stu-id="0ca49-2061">ldarg.1</span></span>|<span data-ttu-id="0ca49-2062">Charge l’argument 1 dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2062">Load argument 1 onto stack.</span></span>|  
  
 <span data-ttu-id="0ca49-2063">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2063">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2064">La valeur d’argument à l’index 1 est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2064">The argument value at index 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2065">La `ldarg.1` instruction est un codage efficace pour charger la valeur d’argument à l’index 1.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2065">The `ldarg.1` instruction is an efficient encoding for loading the argument value at index 1.</span></span>  
  
 <span data-ttu-id="0ca49-2066">La `ldarg.1` instruction exécute un push de l’argument indexé à 1 dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2066">The `ldarg.1` instruction pushes the argument indexed at 1 onto the evaluation stack.</span></span> <span data-ttu-id="0ca49-2067">La `ldarg.1` instruction peut être utilisée pour charger un type valeur ou une valeur primitive dans la pile en le copiant à partir d’un argument entrant.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2067">The `ldarg.1` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="0ca49-2068">Le type de la valeur d’argument est le même que le type de l’argument, comme spécifié par la signature de la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2068">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="0ca49-2069">Les arguments qui contiennent une valeur entière inférieure à 4 octets sont étendus au type `int32` lorsqu’elles sont chargées dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2069">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="0ca49-2070">Valeurs à virgule flottante sont étendues à leur taille native (type `F`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2070">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="0ca49-2071">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldarg.1` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2071">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.1` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2072">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2072">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2073">Charge l’argument à l’index 2 dans la pile d’évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2073">Loads the argument at index 2 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2074">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2074">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2075">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2075">Format</span></span>|<span data-ttu-id="0ca49-2076">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2076">Assembly Format</span></span>|<span data-ttu-id="0ca49-2077">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2077">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2078">04</span><span class="sxs-lookup"><span data-stu-id="0ca49-2078">04</span></span>|<span data-ttu-id="0ca49-2079">ldarg.2</span><span class="sxs-lookup"><span data-stu-id="0ca49-2079">ldarg.2</span></span>|<span data-ttu-id="0ca49-2080">Charge l’argument 2 dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2080">Load argument 2 onto stack.</span></span>|  
  
 <span data-ttu-id="0ca49-2081">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2081">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2082">La valeur d’argument à l’index 2 est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2082">The argument value at index 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2083">La `ldarg.2` instruction est un codage efficace pour charger la valeur d’argument à l’index 2.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2083">The `ldarg.2` instruction is an efficient encoding for loading the argument value at index 2.</span></span>  
  
 <span data-ttu-id="0ca49-2084">La `ldarg.2` instruction exécute un push de l’argument indexé à 2 dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2084">The `ldarg.2` instruction pushes the argument indexed at 2 onto the evaluation stack.</span></span> <span data-ttu-id="0ca49-2085">La `ldarg.2` instruction peut être utilisée pour charger un type valeur ou une valeur primitive dans la pile en le copiant à partir d’un argument entrant.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2085">The `ldarg.2` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="0ca49-2086">Le type de la valeur d’argument est le même que le type de l’argument, comme spécifié par la signature de la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2086">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="0ca49-2087">Les arguments qui contiennent une valeur entière inférieure à 4 octets sont étendus au type `int32` lorsqu’elles sont chargées dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2087">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="0ca49-2088">Valeurs à virgule flottante sont étendues à leur taille native (type `F`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2088">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="0ca49-2089">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldarg.2` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2089">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.2` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2090">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2090">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2091">Charge l’argument à l’index 3 dans la pile d’évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2091">Loads the argument at index 3 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2092">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2092">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2093">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2093">Format</span></span>|<span data-ttu-id="0ca49-2094">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2094">Assembly Format</span></span>|<span data-ttu-id="0ca49-2095">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2095">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2096">05</span><span class="sxs-lookup"><span data-stu-id="0ca49-2096">05</span></span>|<span data-ttu-id="0ca49-2097">ldarg.3</span><span class="sxs-lookup"><span data-stu-id="0ca49-2097">ldarg.3</span></span>|<span data-ttu-id="0ca49-2098">Charge l’argument 3 dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2098">Load argument 3 onto stack.</span></span>|  
  
 <span data-ttu-id="0ca49-2099">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2099">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2100">La valeur d’argument à l’index 3 est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2100">The argument value at index 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2101">La `ldarg.3` instruction est un codage efficace pour charger la valeur d’argument à l’index 3.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2101">The `ldarg.3` instruction is an efficient encoding for loading the argument value at index 3.</span></span>  
  
 <span data-ttu-id="0ca49-2102">La `ldarg.3` instruction exécute un push de l’argument indexé à 3 dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2102">The `ldarg.3` instruction pushes the argument indexed at 3 onto the evaluation stack.</span></span> <span data-ttu-id="0ca49-2103">La `ldarg.3` instruction peut être utilisée pour charger un type valeur ou une valeur primitive dans la pile en le copiant à partir d’un argument entrant.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2103">The `ldarg.3` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="0ca49-2104">Le type de la valeur d’argument est le même que le type de l’argument, comme spécifié par la signature de la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2104">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="0ca49-2105">Les arguments qui contiennent une valeur entière inférieure à 4 octets sont étendus au type `int32` lorsqu’elles sont chargées dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2105">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="0ca49-2106">Valeurs à virgule flottante sont étendues à leur taille native (type `F`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2106">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="0ca49-2107">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldarg.3` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2107">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.3` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2108">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2108">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2109">Charge l'argument (référencé par un index sous la forme abrégée) dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2109">Loads the argument (referenced by a specified short form index) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2110">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2110">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2111">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2111">Format</span></span>|<span data-ttu-id="0ca49-2112">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2112">Assembly Format</span></span>|<span data-ttu-id="0ca49-2113">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2113">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2114">0E &LT; `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-2114">0E < `unsigned int8` ></span></span>|<span data-ttu-id="0ca49-2115">ldarg.s `index`</span><span class="sxs-lookup"><span data-stu-id="0ca49-2115">ldarg.s `index`</span></span>|<span data-ttu-id="0ca49-2116">Charge l’argument à `index` dans la pile, forme abrégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2116">Load argument at `index` onto stack, short form.</span></span>|  
  
 <span data-ttu-id="0ca49-2117">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2117">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2118">La valeur d’argument à `index` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2118">The argument value at `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2119">La `ldarg.s` instruction est un codage efficace pour charger les arguments indexés de 4 à 255.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2119">The `ldarg.s` instruction is an efficient encoding for loading arguments indexed from 4 through 255.</span></span>  
  
 <span data-ttu-id="0ca49-2120">Le `ldarg.s` push de l’argument indexé à `index`, où les arguments sont indexés à partir de 0, dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2120">The `ldarg.s` instruction pushes the argument indexed at `index`, where arguments are indexed from 0 onwards, onto the evaluation stack.</span></span> <span data-ttu-id="0ca49-2121">La `ldarg.s` instruction peut être utilisée pour charger un type valeur ou une valeur primitive dans la pile en le copiant à partir d’un argument entrant.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2121">The `ldarg.s` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="0ca49-2122">Le type de la valeur d’argument est le même que le type de l’argument, comme spécifié par la signature de la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2122">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="0ca49-2123">Pour connaître les procédures qui acceptent une liste d’arguments de longueur variable, le `ldarg.s` instruction peut être utilisée uniquement lors du premier fixé d’arguments, pas celles dans la partie variable de la signature (voir la <xref:System.Reflection.Emit.OpCodes.Arglist> instruction pour plus d’informations).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2123">For procedures that take a variable-length argument list, the `ldarg.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <xref:System.Reflection.Emit.OpCodes.Arglist> instruction for more details).</span></span>  
  
 <span data-ttu-id="0ca49-2124">Les arguments qui contiennent une valeur entière inférieure à 4 octets sont étendus au type `int32` lorsqu’elles sont chargées dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2124">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="0ca49-2125">Valeurs à virgule flottante sont étendues à leur taille native (type `F`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2125">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="0ca49-2126">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldarg.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2126">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2127">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2127">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarga : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2128">Charge une adresse d’argument dans la pile d’évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2128">Load an argument address onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2129">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2129">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2130">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2130">Format</span></span>|<span data-ttu-id="0ca49-2131">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2131">Assembly Format</span></span>|<span data-ttu-id="0ca49-2132">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2132">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2133">0 A FE &LT; `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-2133">FE 0A < `unsigned int16` ></span></span>|<span data-ttu-id="0ca49-2134">ldarga `index`</span><span class="sxs-lookup"><span data-stu-id="0ca49-2134">ldarga `index`</span></span>|<span data-ttu-id="0ca49-2135">Extrait l’adresse de l’argument indexé par `index`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2135">Fetch the address of argument indexed by `index`.</span></span>|  
  
 <span data-ttu-id="0ca49-2136">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2136">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2137">L’adresse `addr` de l’argument indexé par `index` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2137">The address `addr` of the argument indexed by `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2138">Le `ldarga` instruction extrait l’adresse (de type `*`) de l’argument indexé par `index`, où les arguments sont indexés à partir de 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2138">The `ldarga` instruction fetches the address (of type `*`) of the argument indexed by `index`, where arguments are indexed from 0 onwards.</span></span> <span data-ttu-id="0ca49-2139">L’adresse `addr` est toujours aligné sur une frontière naturelle sur l’ordinateur cible.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2139">The address `addr` is always aligned to a natural boundary on the target machine.</span></span>  
  
 <span data-ttu-id="0ca49-2140">Pour connaître les procédures qui acceptent une liste d’arguments de longueur variable, la `ldarga` instruction peut être utilisée uniquement lors du premier fixé d’arguments, pas celles dans la partie variable de la signature.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2140">For procedures that take a variable-length argument list, the `ldarga` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="0ca49-2141">`ldarga` est utilisé pour le passage de paramètres par référence.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2141">`ldarga` is used for by-ref parameter passing.</span></span> <span data-ttu-id="0ca49-2142">Pour les autres cas, <xref:System.Reflection.Emit.OpCodes.Ldarg> et <xref:System.Reflection.Emit.OpCodes.Starg> doit être utilisé.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2142">For other cases, <xref:System.Reflection.Emit.OpCodes.Ldarg> and <xref:System.Reflection.Emit.OpCodes.Starg> should be used.</span></span>  
  
 <span data-ttu-id="0ca49-2143">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldarga` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2143">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarga` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2144">ILGenerator.Emit (OpCode, short)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2144">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarga_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2145">Charge une adresse d'argument, sous la forme abrégée, dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2145">Load an argument address, in short form, onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2146">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2146">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2147">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2147">Format</span></span>|<span data-ttu-id="0ca49-2148">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2148">Assembly Format</span></span>|<span data-ttu-id="0ca49-2149">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2149">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2150">0F < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-2150">0F < `unsigned int8` ></span></span>|<span data-ttu-id="0ca49-2151">ldarga.s `index`</span><span class="sxs-lookup"><span data-stu-id="0ca49-2151">ldarga.s `index`</span></span>|<span data-ttu-id="0ca49-2152">Extrait l’adresse de l’argument indexé par `index`, forme abrégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2152">Fetch the address of argument indexed by `index`, short form.</span></span>|  
  
 <span data-ttu-id="0ca49-2153">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2153">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2154">L’adresse `addr` de l’argument indexé par `index` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2154">The address `addr` of the argument indexed by `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2155">`ldarga.s` (la forme abrégée de `ldarga`) doit être utilisé pour les numéros d’arguments de 0 à 255 et constitue un encodage plus efficace.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2155">`ldarga.s` (the short form of `ldarga`) should be used for argument numbers 0 through 255, and is a more efficient encoding.</span></span>  
  
 <span data-ttu-id="0ca49-2156">Le `ldarga.s` instruction extrait l’adresse (de type`*`) de l’argument indexé par `index`, où les arguments sont indexés à partir de 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2156">The `ldarga.s` instruction fetches the address (of type`*`) of the argument indexed by `index`, where arguments are indexed from 0 onwards.</span></span> <span data-ttu-id="0ca49-2157">L’adresse `addr` est toujours aligné sur une frontière naturelle sur l’ordinateur cible.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2157">The address `addr` is always aligned to a natural boundary on the target machine.</span></span>  
  
 <span data-ttu-id="0ca49-2158">Pour connaître les procédures qui acceptent une liste d’arguments de longueur variable, la `ldarga.s` instruction peut être utilisée uniquement lors du premier fixé d’arguments, pas celles dans la partie variable de la signature.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2158">For procedures that take a variable-length argument list, the `ldarga.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="0ca49-2159">`ldarga.s` est utilisé pour le passage de paramètres par référence.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2159">`ldarga.s` is used for by-ref parameter passing.</span></span> <span data-ttu-id="0ca49-2160">Pour les autres cas, <xref:System.Reflection.Emit.OpCodes.Ldarg_S> et <xref:System.Reflection.Emit.OpCodes.Starg_S> doit être utilisé.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2160">For other cases, <xref:System.Reflection.Emit.OpCodes.Ldarg_S> and <xref:System.Reflection.Emit.OpCodes.Starg_S> should be used.</span></span>  
  
 <span data-ttu-id="0ca49-2161">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldarga.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2161">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarga.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2162">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2162">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2163">Exécute un push d'une valeur fournie de type <see langword="int32" /> dans la pile d'évaluation en tant que <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2163">Pushes a supplied value of type <see langword="int32" /> onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2164">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2164">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2165">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2165">Format</span></span>|<span data-ttu-id="0ca49-2166">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2166">Assembly Format</span></span>|<span data-ttu-id="0ca49-2167">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2167">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2168">20 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-2168">20 < `int32` ></span></span>|<span data-ttu-id="0ca49-2169">ldc.i4 `num`</span><span class="sxs-lookup"><span data-stu-id="0ca49-2169">ldc.i4 `num`</span></span>|<span data-ttu-id="0ca49-2170">Exécute un push de la valeur `num` dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2170">Pushes the value `num` onto the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-2171">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2171">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2172">La valeur `num` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2172">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2173">Notez qu’il n’y a les encodages abrégés (et donc plus efficaces) spéciaux pour les entiers -128 à 127 et particulièrement-1 à 8.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2173">Note that there are special short (and hence more efficient) encodings for the integers -128 through 127, and especially short encodings for -1 through 8.</span></span> <span data-ttu-id="0ca49-2174">Tous les encodages abrégés push des entiers de 4 octets dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2174">All short encodings push 4 byte integers on the stack.</span></span> <span data-ttu-id="0ca49-2175">Les codages plus longs sont utilisés pour les entiers de 8 octets et 4 et 8 nombres à virgule flottante octets, ainsi que les valeurs de 4 octets qui ne tiennent pas dans les formes abrégées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2175">Longer encodings are used for 8 byte integers and 4 and 8 byte floating-point numbers, as well as 4-byte values that do not fit in the short forms.</span></span> <span data-ttu-id="0ca49-2176">Il existe trois façons pour transmettre une constante entière de 8 octets dans la pile</span><span class="sxs-lookup"><span data-stu-id="0ca49-2176">There are three ways to push an 8 byte integer constant onto the stack</span></span>  
  
 1. <span data-ttu-id="0ca49-2177">Utilisez la <xref:System.Reflection.Emit.OpCodes.Ldc_I8> instruction pour les constantes doivent être exprimées en plus de 32 bits.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2177">Use the <xref:System.Reflection.Emit.OpCodes.Ldc_I8> instruction for constants that must be expressed in more than 32 bits.</span></span>  
  
 2. <span data-ttu-id="0ca49-2178">Utilisez le <xref:System.Reflection.Emit.OpCodes.Ldc_I4> instruction suivie d’un <xref:System.Reflection.Emit.OpCodes.Conv_I8> pour les constantes qui requièrent de 9 à 32 bits.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2178">Use the <xref:System.Reflection.Emit.OpCodes.Ldc_I4> instruction followed by a <xref:System.Reflection.Emit.OpCodes.Conv_I8> for constants that require 9 to 32 bits.</span></span>  
  
 3. <span data-ttu-id="0ca49-2179">Utilisez une instruction de forme abrégée suivie d’un <xref:System.Reflection.Emit.OpCodes.Conv_I8> pour les constantes qui peuvent être exprimées en moins de 8 bits.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2179">Use a short form instruction followed by a <xref:System.Reflection.Emit.OpCodes.Conv_I8> for constants that can be expressed in 8 or fewer bits.</span></span>  
  
 <span data-ttu-id="0ca49-2180">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldc.i4` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2180">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2181">ILGenerator.Emit (OpCode, int)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2181">ILGenerator.Emit(OpCode, int)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2182">Exécute un push de la valeur entière 0 dans la pile d'évaluation en tant que <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2182">Pushes the integer value of 0 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2183">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2183">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2184">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2184">Format</span></span>|<span data-ttu-id="0ca49-2185">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2185">Assembly Format</span></span>|<span data-ttu-id="0ca49-2186">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2186">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2187">16</span><span class="sxs-lookup"><span data-stu-id="0ca49-2187">16</span></span>|<span data-ttu-id="0ca49-2188">ldc.i4.0</span><span class="sxs-lookup"><span data-stu-id="0ca49-2188">ldc.i4.0</span></span>|<span data-ttu-id="0ca49-2189">Exécute un push de 0 dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2189">Pushes 0 onto the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-2190">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2190">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2191">La valeur 0 est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2191">The value 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2192">Voici une courte un codage spécial pour le push de la valeur entière 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2192">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="0ca49-2193">Tous les encodages abrégés spéciaux push des entiers de 4 octets dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2193">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2194">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldc.i4.0` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2194">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.0` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2195">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2195">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2196">Exécute un envoi (push) de la valeur entière 1 dans la pile d’évaluation en tant que <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2196">Pushes the integer value of 1 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2197">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2197">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2198">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2198">Format</span></span>|<span data-ttu-id="0ca49-2199">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2199">Assembly Format</span></span>|<span data-ttu-id="0ca49-2200">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2200">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2201">17</span><span class="sxs-lookup"><span data-stu-id="0ca49-2201">17</span></span>|<span data-ttu-id="0ca49-2202">ldc.i4.1</span><span class="sxs-lookup"><span data-stu-id="0ca49-2202">ldc.i4.1</span></span>|<span data-ttu-id="0ca49-2203">Exécute un push de 1 dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2203">Pushes 1 onto the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-2204">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2204">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2205">La valeur 1 est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2205">The value 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2206">Voici une courte un codage spécial pour le push de la valeur entière 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2206">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="0ca49-2207">Tous les encodages abrégés spéciaux push des entiers de 4 octets dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2207">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2208">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldc.i4.1` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2208">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.1` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2209">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2209">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2210">Exécute un envoi (push) de la valeur entière 2 dans la pile d’évaluation en tant que <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2210">Pushes the integer value of 2 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2211">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2211">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2212">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2212">Format</span></span>|<span data-ttu-id="0ca49-2213">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2213">Assembly Format</span></span>|<span data-ttu-id="0ca49-2214">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2214">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2215">18</span><span class="sxs-lookup"><span data-stu-id="0ca49-2215">18</span></span>|<span data-ttu-id="0ca49-2216">ldc.i4.2</span><span class="sxs-lookup"><span data-stu-id="0ca49-2216">ldc.i4.2</span></span>|<span data-ttu-id="0ca49-2217">Exécute un push de 2 dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2217">Pushes 2 onto the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-2218">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2218">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2219">La valeur 2 est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2219">The value 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2220">Voici une courte un codage spécial pour le push de la valeur entière 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2220">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="0ca49-2221">Tous les encodages abrégés spéciaux push des entiers de 4 octets dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2221">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2222">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldc.i4.2` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2222">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.2` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2223">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2223">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2224">Exécute un envoi (push) de la valeur entière 3 dans la pile d’évaluation en tant que <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2224">Pushes the integer value of 3 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2225">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2225">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2226">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2226">Format</span></span>|<span data-ttu-id="0ca49-2227">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2227">Assembly Format</span></span>|<span data-ttu-id="0ca49-2228">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2228">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2229">19</span><span class="sxs-lookup"><span data-stu-id="0ca49-2229">19</span></span>|<span data-ttu-id="0ca49-2230">ldc.i4.3</span><span class="sxs-lookup"><span data-stu-id="0ca49-2230">ldc.i4.3</span></span>|<span data-ttu-id="0ca49-2231">Exécute un push de 3 dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2231">Pushes 3 onto the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-2232">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2232">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2233">La valeur 3 est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2233">The value 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2234">Voici une courte un codage spécial pour le push de la valeur entière 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2234">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="0ca49-2235">Tous les encodages abrégés spéciaux push des entiers de 4 octets dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2235">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2236">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldc.i4.3` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2236">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.3` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2237">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2237">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2238">Exécute un envoi (push) de la valeur entière 4 dans la pile d’évaluation en tant que <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2238">Pushes the integer value of 4 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2239">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2239">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2240">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2240">Format</span></span>|<span data-ttu-id="0ca49-2241">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2241">Assembly Format</span></span>|<span data-ttu-id="0ca49-2242">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2242">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2243">1 A</span><span class="sxs-lookup"><span data-stu-id="0ca49-2243">1A</span></span>|<span data-ttu-id="0ca49-2244">ldc.i4.4</span><span class="sxs-lookup"><span data-stu-id="0ca49-2244">ldc.i4.4</span></span>|<span data-ttu-id="0ca49-2245">Exécute un push de 4 dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2245">Pushes 4 onto the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-2246">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2246">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2247">La valeur 4 est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2247">The value 4 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2248">Voici une courte un codage spécial pour le push de la valeur entière 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2248">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="0ca49-2249">Tous les encodages abrégés spéciaux push des entiers de 4 octets dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2249">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2250">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldc.i4.4` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2250">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.4` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2251">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2251">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_5;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_5 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2252">Exécute un envoi (push) de la valeur entière 5 dans la pile d’évaluation en tant que <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2252">Pushes the integer value of 5 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2253">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2253">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2254">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2254">Format</span></span>|<span data-ttu-id="0ca49-2255">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2255">Assembly Format</span></span>|<span data-ttu-id="0ca49-2256">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2256">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2257">1 B</span><span class="sxs-lookup"><span data-stu-id="0ca49-2257">1B</span></span>|<span data-ttu-id="0ca49-2258">ldc.i4.5</span><span class="sxs-lookup"><span data-stu-id="0ca49-2258">ldc.i4.5</span></span>|<span data-ttu-id="0ca49-2259">Exécute un push de 5 dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2259">Pushes 5 onto the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-2260">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2260">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2261">La valeur 5 est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2261">The value 5 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2262">Voici une courte un codage spécial pour le push de la valeur entière 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2262">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="0ca49-2263">Tous les encodages abrégés spéciaux push des entiers de 4 octets dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2263">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2264">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldc.i4.5` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2264">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.5` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2265">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2265">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_6;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_6 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2266">Exécute un envoi (push) de la valeur entière 6 dans la pile d’évaluation en tant que <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2266">Pushes the integer value of 6 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2267">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2267">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2268">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2268">Format</span></span>|<span data-ttu-id="0ca49-2269">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2269">Assembly Format</span></span>|<span data-ttu-id="0ca49-2270">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2270">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2271">1C</span><span class="sxs-lookup"><span data-stu-id="0ca49-2271">1C</span></span>|<span data-ttu-id="0ca49-2272">ldc.i4.6</span><span class="sxs-lookup"><span data-stu-id="0ca49-2272">ldc.i4.6</span></span>|<span data-ttu-id="0ca49-2273">Exécute un push de 6 dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2273">Pushes 6 onto the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-2274">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2274">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2275">La valeur 6 est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2275">The value 6 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2276">Voici une courte un codage spécial pour le push de la valeur entière 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2276">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="0ca49-2277">Tous les encodages abrégés spéciaux push des entiers de 4 octets dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2277">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2278">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldc.i4.6` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2278">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.6` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2279">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2279">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_7;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_7 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2280">Exécute un envoi (push) de la valeur entière 7 dans la pile d’évaluation en tant que <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2280">Pushes the integer value of 7 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2281">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2281">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2282">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2282">Format</span></span>|<span data-ttu-id="0ca49-2283">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2283">Assembly Format</span></span>|<span data-ttu-id="0ca49-2284">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2284">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2285">1D</span><span class="sxs-lookup"><span data-stu-id="0ca49-2285">1D</span></span>|<span data-ttu-id="0ca49-2286">ldc.i4.7</span><span class="sxs-lookup"><span data-stu-id="0ca49-2286">ldc.i4.7</span></span>|<span data-ttu-id="0ca49-2287">Exécute un push de 7 dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2287">Pushes 7 onto the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-2288">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2288">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2289">La valeur 7 est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2289">The value 7 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2290">Voici une courte un codage spécial pour le push de la valeur entière 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2290">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="0ca49-2291">Tous les encodages abrégés spéciaux push des entiers de 4 octets dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2291">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2292">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldc.i4.7` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2292">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.7` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2293">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2293">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2294">Exécute un envoi (push) de la valeur entière 8 dans la pile d’évaluation en tant que <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2294">Pushes the integer value of 8 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2295">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2295">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2296">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2296">Format</span></span>|<span data-ttu-id="0ca49-2297">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2297">Assembly Format</span></span>|<span data-ttu-id="0ca49-2298">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2298">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2299">1E</span><span class="sxs-lookup"><span data-stu-id="0ca49-2299">1E</span></span>|<span data-ttu-id="0ca49-2300">ldc.i4.8</span><span class="sxs-lookup"><span data-stu-id="0ca49-2300">ldc.i4.8</span></span>|<span data-ttu-id="0ca49-2301">Exécute un push de 8 dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2301">Pushes 8 onto the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-2302">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2302">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2303">La valeur 8 est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2303">The value 8 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2304">Voici une courte un codage spécial pour le push de la valeur entière 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2304">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="0ca49-2305">Tous les encodages abrégés spéciaux push des entiers de 4 octets dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2305">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2306">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldc.i4.8` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2306">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.8` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2307">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2307">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_M1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_M1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_M1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_M1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_M1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_M1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2308">Exécute un envoi (push) de la valeur entière -1 dans la pile d’évaluation en tant que <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2308">Pushes the integer value of -1 onto the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2309">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2309">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2310">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2310">Format</span></span>|<span data-ttu-id="0ca49-2311">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2311">Assembly Format</span></span>|<span data-ttu-id="0ca49-2312">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2312">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2313">15</span><span class="sxs-lookup"><span data-stu-id="0ca49-2313">15</span></span>|<span data-ttu-id="0ca49-2314">ldc.i4.M1</span><span class="sxs-lookup"><span data-stu-id="0ca49-2314">ldc.i4.m1</span></span>|<span data-ttu-id="0ca49-2315">Exécute un push de -1 dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2315">Pushes -1 onto the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-2316">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2316">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2317">La valeur -1 est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2317">The value -1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2318">Voici une courte un codage spécial pour le push de la valeur entière 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2318">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="0ca49-2319">Tous les encodages abrégés spéciaux push des entiers de 4 octets dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2319">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2320">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldc.i4.m1` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2320">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.m1` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2321">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2321">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2322">Exécute un push de la valeur fournie <see langword="int8" /> dans la pile d'évaluation en tant que <see langword="int32" /> (forme abrégée).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2322">Pushes the supplied <see langword="int8" /> value onto the evaluation stack as an <see langword="int32" />, short form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2323">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2323">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2324">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2324">Format</span></span>|<span data-ttu-id="0ca49-2325">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2325">Assembly Format</span></span>|<span data-ttu-id="0ca49-2326">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2326">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2327">1F < `int8` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-2327">1F < `int8` ></span></span>|<span data-ttu-id="0ca49-2328">ldc.i4.s `num`</span><span class="sxs-lookup"><span data-stu-id="0ca49-2328">ldc.i4.s `num`</span></span>|<span data-ttu-id="0ca49-2329">Exécute un push `num` dans la pile en tant que `int32`, forme abrégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2329">Pushes `num` onto the stack as `int32`, short form.</span></span>|  
  
 <span data-ttu-id="0ca49-2330">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2330">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2331">La valeur `num` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2331">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2332">`ldc.i4.s` est un encodage plus efficace pour pousser les entiers de -128 à 127 dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2332">`ldc.i4.s` is a more efficient encoding for pushing the integers from -128 to 127 onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2333">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldc.i4.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2333">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2334">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2334">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2335">Exécute un push d'une valeur fournie de type <see langword="int64" /> dans la pile d'évaluation en tant que <see langword="int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2335">Pushes a supplied value of type <see langword="int64" /> onto the evaluation stack as an <see langword="int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2336">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2336">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2337">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2337">Format</span></span>|<span data-ttu-id="0ca49-2338">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2338">Assembly Format</span></span>|<span data-ttu-id="0ca49-2339">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2339">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2340">21 < `int64` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-2340">21 < `int64` ></span></span>|<span data-ttu-id="0ca49-2341">ldc.i8 `num`</span><span class="sxs-lookup"><span data-stu-id="0ca49-2341">ldc.i8 `num`</span></span>|<span data-ttu-id="0ca49-2342">Exécute un push `num` dans la pile en tant que `int64`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2342">Pushes `num` onto the stack as `int64`.</span></span>|  
  
 <span data-ttu-id="0ca49-2343">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2343">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2344">La valeur `num` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2344">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2345">Cet encodage exécute un push d’un `int64` valeur sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2345">This encoding pushes an `int64` value onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2346">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldc.i8` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2346">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i8` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2347">ILGenerator.Emit (OpCode, long)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2347">ILGenerator.Emit(OpCode, long)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2348">Exécute un push d'une valeur fournie de type <see langword="float32" /> dans la pile d'évaluation en tant que type <see langword="F" /> (float).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2348">Pushes a supplied value of type <see langword="float32" /> onto the evaluation stack as type <see langword="F" /> (float).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2349">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2349">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2350">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2350">Format</span></span>|<span data-ttu-id="0ca49-2351">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2351">Assembly Format</span></span>|<span data-ttu-id="0ca49-2352">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2352">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2353">22 < `float32` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-2353">22 < `float32` ></span></span>|<span data-ttu-id="0ca49-2354">ldc.r4 `num`</span><span class="sxs-lookup"><span data-stu-id="0ca49-2354">ldc.r4 `num`</span></span>|<span data-ttu-id="0ca49-2355">Exécute un push `num` dans la pile en tant que `F`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2355">Pushes `num` onto the stack as `F`.</span></span>|  
  
 <span data-ttu-id="0ca49-2356">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2356">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2357">La valeur `num` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2357">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2358">Cet encodage exécute un push d’un `float32` valeur sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2358">This encoding pushes a `float32` value onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2359">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldc.r4` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2359">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.r4` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2360">ILGenerator.Emit (OpCode, unique)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2360">ILGenerator.Emit(OpCode, single)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2361">Exécute un push d'une valeur fournie de type <see langword="float64" /> dans la pile d'évaluation en tant que type <see langword="F" /> (float).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2361">Pushes a supplied value of type <see langword="float64" /> onto the evaluation stack as type <see langword="F" /> (float).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2362">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2362">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2363">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2363">Format</span></span>|<span data-ttu-id="0ca49-2364">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2364">Assembly Format</span></span>|<span data-ttu-id="0ca49-2365">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2365">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2366">23 < `float64` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-2366">23 < `float64` ></span></span>|<span data-ttu-id="0ca49-2367">ldc.r8 `num`</span><span class="sxs-lookup"><span data-stu-id="0ca49-2367">ldc.r8 `num`</span></span>|<span data-ttu-id="0ca49-2368">Exécute un push `num` dans la pile en tant que `F`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2368">Pushes `num` onto the stack as `F`.</span></span>|  
  
 <span data-ttu-id="0ca49-2369">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2369">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2370">La valeur `num` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2370">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2371">Cet encodage exécute un push d’un `float64` valeur sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2371">This encoding pushes a `float64` value onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2372">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldc.r8` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2372">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.r8` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2373">ILGenerator.Emit (OpCode, double)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2373">ILGenerator.Emit(OpCode, double)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2374">Charge l'élément à un index de tableau spécifié en haut de la pile d'évaluation en tant que type spécifié par l'instruction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2374">Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2375">Le tableau suivant répertorie les instructions format hexadécimal et Microsoft intermediate language (MSIL) assembly, ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2375">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2376">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2376">Format</span></span>|<span data-ttu-id="0ca49-2377">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2377">Assembly Format</span></span>|<span data-ttu-id="0ca49-2378">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2378">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2379">A3 &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-2379">A3 < `T` ></span></span>|<span data-ttu-id="0ca49-2380">ldelem `typeTok`</span><span class="sxs-lookup"><span data-stu-id="0ca49-2380">ldelem `typeTok`</span></span>|<span data-ttu-id="0ca49-2381">Charge l’élément à `index` en haut de la pile en tant que type `typeTok`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2381">Loads the element at `index` onto the top of the stack as type `typeTok`.</span></span>|  
  
 <span data-ttu-id="0ca49-2382">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2382">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2383">Une référence d’objet `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2383">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2384">Une valeur d’index `index` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2384">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-2385">`index` et `array` sont dépilés ; la valeur stockée à la position `index` dans `array` est recherché.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2385">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="0ca49-2386">La valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2386">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2387">Le `ldelem` instruction charge la valeur de l’élément avec index `index` (type `native int`) dans le tableau unidimensionnel de base zéro `array` et le place en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2387">The `ldelem` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="0ca49-2388">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2388">Arrays are objects, and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="0ca49-2389">Le type de la valeur de retour est spécifié par le jeton `typeTok` dans l’instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2389">The type of the return value is specified by the token `typeTok` in the instruction.</span></span>  
  
 <span data-ttu-id="0ca49-2390"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2390"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-2391"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite supérieure de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2391"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the upper bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-2392">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldelem` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2392">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2393">ILGenerator.Emit (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2393">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2394">Charge l'élément avec le type <see langword="native int" /> à un index de tableau spécifié en haut de la pile d'évaluation en tant que <see langword="native int" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2394">Loads the element with type <see langword="native int" /> at a specified array index onto the top of the evaluation stack as a <see langword="native int" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2395">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2395">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2396">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2396">Format</span></span>|<span data-ttu-id="0ca49-2397">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2397">Assembly Format</span></span>|<span data-ttu-id="0ca49-2398">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2398">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2399">97</span><span class="sxs-lookup"><span data-stu-id="0ca49-2399">97</span></span>|<span data-ttu-id="0ca49-2400">ldelem.i</span><span class="sxs-lookup"><span data-stu-id="0ca49-2400">ldelem.i</span></span>|<span data-ttu-id="0ca49-2401">Charge l’élément avec le type `native int` à `index` en haut de la pile en tant qu’un `native int`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2401">Loads the element with type `native int` at `index` onto the top of the stack as a `native int`.</span></span>|  
  
 <span data-ttu-id="0ca49-2402">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2402">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2403">Une référence d’objet `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2403">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2404">Une valeur d’index `index` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2404">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-2405">`index` et `array` sont dépilés ; la valeur stockée à la position `index` dans `array` est recherché.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2405">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="0ca49-2406">La valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2406">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2407">Le `ldelem.i` instruction charge la valeur de l’élément avec index `index` (type `native int`) dans le tableau unidimensionnel de base zéro `array` et le place en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2407">The `ldelem.i` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="0ca49-2408">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2408">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="0ca49-2409">La valeur de retour pour `ldelem.i` est `native int`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2409">The return value for `ldelem.i` is `native int`.</span></span>  
  
 <span data-ttu-id="0ca49-2410">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` (pas `native int`) lorsqu’elles sont chargées dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2410">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2411"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2411"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-2412"><xref:System.ArrayTypeMismatchException> est levée si `array` ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2412"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-2413"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2413"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-2414">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldelem.i` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2414">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2415">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2415">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2416">Charge l'élément avec le type <see langword="int8" /> à un index de tableau spécifié en haut de la pile d'évaluation en tant que <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2416">Loads the element with type <see langword="int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2417">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2417">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2418">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2418">Format</span></span>|<span data-ttu-id="0ca49-2419">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2419">Assembly Format</span></span>|<span data-ttu-id="0ca49-2420">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2420">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2421">90</span><span class="sxs-lookup"><span data-stu-id="0ca49-2421">90</span></span>|<span data-ttu-id="0ca49-2422">ldelem.i1</span><span class="sxs-lookup"><span data-stu-id="0ca49-2422">ldelem.i1</span></span>|<span data-ttu-id="0ca49-2423">Charge l’élément avec le type `int8` à `index` en haut de la pile en tant qu’un `int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2423">Loads the element with type `int8` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="0ca49-2424">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2424">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2425">Une référence d’objet `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2425">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2426">Une valeur d’index `index` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2426">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-2427">`index` et `array` sont dépilés ; la valeur stockée à la position `index` dans `array` est recherché.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2427">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="0ca49-2428">La valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2428">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2429">Le `ldelem.i1` instruction charge la valeur de l’élément avec index `index` (type `native int`) dans le tableau unidimensionnel de base zéro `array` et le place en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2429">The `ldelem.i1` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="0ca49-2430">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2430">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="0ca49-2431">La valeur de retour pour `ldelem.i1` est `int8`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2431">The return value for `ldelem.i1` is `int8`.</span></span>  
  
 <span data-ttu-id="0ca49-2432">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` (pas `native int`) lorsqu’elles sont chargées dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2432">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2433"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2433"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-2434"><xref:System.ArrayTypeMismatchException> est levée si `array` ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2434"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-2435"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2435"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-2436">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldelem.i1` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2436">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i1` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2437">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2437">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2438">Charge l'élément avec le type <see langword="int16" /> à un index de tableau spécifié en haut de la pile d'évaluation en tant que <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2438">Loads the element with type <see langword="int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2439">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2439">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2440">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2440">Format</span></span>|<span data-ttu-id="0ca49-2441">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2441">Assembly Format</span></span>|<span data-ttu-id="0ca49-2442">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2442">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2443">92</span><span class="sxs-lookup"><span data-stu-id="0ca49-2443">92</span></span>|<span data-ttu-id="0ca49-2444">ldelem.i2</span><span class="sxs-lookup"><span data-stu-id="0ca49-2444">ldelem.i2</span></span>|<span data-ttu-id="0ca49-2445">Charge l’élément avec le type `int16` à `index` en haut de la pile en tant qu’un `int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2445">Loads the element with type `int16` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="0ca49-2446">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2446">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2447">Une référence d’objet `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2447">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2448">Une valeur d’index `index` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2448">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-2449">`index` et `array` sont dépilés ; la valeur stockée à la position `index` dans `array` est recherché.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2449">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="0ca49-2450">La valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2450">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2451">Le `ldelem.i2` instruction charge la valeur de l’élément avec index `index` (type `native int`) dans le tableau unidimensionnel de base zéro `array` et le place en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2451">The `ldelem.i2` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="0ca49-2452">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2452">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="0ca49-2453">La valeur de retour pour `ldelem.i2` est `int16`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2453">The return value for `ldelem.i2` is `int16`.</span></span>  
  
 <span data-ttu-id="0ca49-2454">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` (pas `native int`) lorsqu’elles sont chargées dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2454">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2455"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2455"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-2456"><xref:System.ArrayTypeMismatchException> est levée si `array` ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2456"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-2457"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2457"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-2458">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldelem.i2` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2458">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i2` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2459">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2459">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2460">Charge l'élément avec le type <see langword="int32" /> à un index de tableau spécifié en haut de la pile d'évaluation en tant que <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2460">Loads the element with type <see langword="int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2461">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2461">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2462">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2462">Format</span></span>|<span data-ttu-id="0ca49-2463">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2463">Assembly Format</span></span>|<span data-ttu-id="0ca49-2464">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2464">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2465">94</span><span class="sxs-lookup"><span data-stu-id="0ca49-2465">94</span></span>|<span data-ttu-id="0ca49-2466">ldelem.i4</span><span class="sxs-lookup"><span data-stu-id="0ca49-2466">ldelem.i4</span></span>|<span data-ttu-id="0ca49-2467">Charge l’élément avec le type `int32` à `index` en haut de la pile en tant qu’un `int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2467">Loads the element with type `int32` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="0ca49-2468">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2468">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2469">Une référence d’objet `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2469">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2470">Une valeur d’index `index` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2470">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-2471">`index` et `array` sont dépilés ; la valeur stockée à la position `index` dans `array` est recherché.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2471">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="0ca49-2472">La valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2472">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2473">Le `ldelem.i4` instruction charge la valeur de l’élément avec index `index` (type `native int`) dans le tableau unidimensionnel de base zéro `array` et le place en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2473">The `ldelem.i4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="0ca49-2474">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2474">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="0ca49-2475">La valeur de retour pour `ldelem.i4` est `int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2475">The return value for `ldelem.i4` is `int32`.</span></span>  
  
 <span data-ttu-id="0ca49-2476">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` (pas `native int`) lorsqu’elles sont chargées dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2476">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2477"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2477"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-2478"><xref:System.ArrayTypeMismatchException> est levée si `array` ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2478"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-2479"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2479"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-2480">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldelem.i4` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2480">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i4` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2481">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2481">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2482">Charge l'élément avec le type <see langword="int64" /> à un index de tableau spécifié en haut de la pile d'évaluation en tant que <see langword="int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2482">Loads the element with type <see langword="int64" /> at a specified array index onto the top of the evaluation stack as an <see langword="int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2483">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2483">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2484">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2484">Format</span></span>|<span data-ttu-id="0ca49-2485">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2485">Assembly Format</span></span>|<span data-ttu-id="0ca49-2486">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2486">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2487">96</span><span class="sxs-lookup"><span data-stu-id="0ca49-2487">96</span></span>|<span data-ttu-id="0ca49-2488">ldelem.i8</span><span class="sxs-lookup"><span data-stu-id="0ca49-2488">ldelem.i8</span></span>|<span data-ttu-id="0ca49-2489">Charge l’élément avec le type `int64` à `index` en haut de la pile en tant qu’un `int64`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2489">Loads the element with type `int64` at `index` onto the top of the stack as an `int64`.</span></span>|  
  
 <span data-ttu-id="0ca49-2490">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2490">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2491">Une référence d’objet `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2491">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2492">Une valeur d’index `index` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2492">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-2493">`index` et `array` sont dépilés ; la valeur stockée à la position `index` dans `array` est recherché.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2493">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="0ca49-2494">La valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2494">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2495">Le `ldelem.i8` instruction charge la valeur de l’élément avec index `index` (type `native int`) dans le tableau unidimensionnel de base zéro `array` et le place en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2495">The `ldelem.i8` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="0ca49-2496">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2496">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="0ca49-2497">La valeur de retour pour `ldelem.i8` est `int64`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2497">The return value for `ldelem.i8` is `int64`.</span></span>  
  
 <span data-ttu-id="0ca49-2498">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` (pas `native int`) lorsqu’elles sont chargées dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2498">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2499"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2499"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-2500"><xref:System.ArrayTypeMismatchException> est levée si `array` ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2500"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-2501"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2501"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-2502">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldelem.i8` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2502">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i8` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2503">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2503">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2504">Charge l'élément avec le type <see langword="float32" /> à un index de tableau spécifié en haut de la pile d'évaluation en tant que type <see langword="F" /> (float).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2504">Loads the element with type <see langword="float32" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2505">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2505">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2506">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2506">Format</span></span>|<span data-ttu-id="0ca49-2507">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2507">Assembly Format</span></span>|<span data-ttu-id="0ca49-2508">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2508">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2509">98</span><span class="sxs-lookup"><span data-stu-id="0ca49-2509">98</span></span>|<span data-ttu-id="0ca49-2510">ldelem.r4</span><span class="sxs-lookup"><span data-stu-id="0ca49-2510">ldelem.r4</span></span>|<span data-ttu-id="0ca49-2511">Charge l’élément avec le type `float32` à `index` en haut de la pile en tant que type `F`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2511">Loads the element with type `float32` at `index` onto the top of the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="0ca49-2512">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2512">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2513">Une référence d’objet `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2513">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2514">Une valeur d’index `index` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2514">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-2515">`index` et `array` sont dépilés ; la valeur stockée à la position `index` dans `array` est recherché.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2515">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="0ca49-2516">La valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2516">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2517">Le `ldelem.r4` instruction charge la valeur de l’élément avec index `index` (type `native int`) dans le tableau unidimensionnel de base zéro `array` et le place en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2517">The `ldelem.r4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="0ca49-2518">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2518">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="0ca49-2519">La valeur de retour pour `ldelem.r4` est `float32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2519">The return value for `ldelem.r4` is `float32`.</span></span>  
  
 <span data-ttu-id="0ca49-2520">Valeurs à virgule flottante sont convertis en type `F` lors du chargement dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2520">Floating-point values are converted to type `F` when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2521"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2521"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-2522"><xref:System.ArrayTypeMismatchException> est levée si `array` ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2522"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-2523"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2523"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-2524">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldelem.r4` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2524">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.r4` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2525">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2525">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2526">Charge l'élément avec le type <see langword="float64" /> à un index de tableau spécifié en haut de la pile d'évaluation en tant que type <see langword="F" /> (float).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2526">Loads the element with type <see langword="float64" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2527">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2527">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2528">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2528">Format</span></span>|<span data-ttu-id="0ca49-2529">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2529">Assembly Format</span></span>|<span data-ttu-id="0ca49-2530">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2530">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2531">99</span><span class="sxs-lookup"><span data-stu-id="0ca49-2531">99</span></span>|<span data-ttu-id="0ca49-2532">ldelem.r8</span><span class="sxs-lookup"><span data-stu-id="0ca49-2532">ldelem.r8</span></span>|<span data-ttu-id="0ca49-2533">Charge l’élément avec le type `float64` à `index` en haut de la pile en tant que type `F`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2533">Loads the element with type `float64` at `index` onto the top of the stack as type `F`.</span></span>|  
  
 <span data-ttu-id="0ca49-2534">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2534">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2535">Une référence d’objet `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2535">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2536">Une valeur d’index `index` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2536">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-2537">`index` et `array` sont dépilés ; la valeur stockée à la position `index` dans `array` est recherché.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2537">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="0ca49-2538">La valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2538">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2539">Le `ldelem.r8` instruction charge la valeur de l’élément avec index `index` (type `native int`) dans le tableau unidimensionnel de base zéro `array` et le place en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2539">The `ldelem.r8` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="0ca49-2540">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2540">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="0ca49-2541">La valeur de retour pour `ldelem.r8` est `float64`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2541">The return value for `ldelem.r8` is `float64`.</span></span>  
  
 <span data-ttu-id="0ca49-2542">Valeurs à virgule flottante sont convertis en type `F` lors du chargement dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2542">Floating-point values are converted to type `F` when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2543"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2543"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-2544"><xref:System.ArrayTypeMismatchException> est levée si `array` ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2544"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-2545"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2545"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-2546">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldelem.r8` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2546">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.r8` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2547">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2547">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2548">Charge l'élément contenant une référence d'objet à un index de tableau spécifié en haut de la pile d'évaluation en tant que type <see langword="O" /> (référence d'objet).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2548">Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type <see langword="O" /> (object reference).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2549">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2549">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2550">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2550">Format</span></span>|<span data-ttu-id="0ca49-2551">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2551">Assembly Format</span></span>|<span data-ttu-id="0ca49-2552">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2552">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2553">9 A</span><span class="sxs-lookup"><span data-stu-id="0ca49-2553">9A</span></span>|<span data-ttu-id="0ca49-2554">ldelem.ref</span><span class="sxs-lookup"><span data-stu-id="0ca49-2554">ldelem.ref</span></span>|<span data-ttu-id="0ca49-2555">Charge l’élément avec une référence d’objet à `index` en haut de la pile en tant que type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2555">Loads the element with an object reference at `index` onto the top of the stack as type `O`.</span></span>|  
  
 <span data-ttu-id="0ca49-2556">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2556">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2557">Une référence d’objet `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2557">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2558">Une valeur d’index `index` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2558">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-2559">`index` et `array` sont dépilés ; la valeur stockée à la position `index` dans `array` est recherché.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2559">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="0ca49-2560">La valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2560">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2561">Le `ldelem.ref` instruction charge la valeur de l’élément avec index `index` (type `native int`) dans le tableau unidimensionnel de base zéro `array` et le place en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2561">The `ldelem.ref` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="0ca49-2562">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2562">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="0ca49-2563">La valeur de retour pour `ldelem.ref` est de type `O` (référence d’objet).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2563">The return value for `ldelem.ref` is type `O` (object reference).</span></span>  
  
 <span data-ttu-id="0ca49-2564"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2564"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-2565"><xref:System.ArrayTypeMismatchException> est levée si `array` ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2565"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-2566"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2566"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-2567">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldelem.ref` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2567">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.ref` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2568">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2568">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2569">Charge l'élément avec le type <see langword="unsigned int8" /> à un index de tableau spécifié en haut de la pile d'évaluation en tant que <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2569">Loads the element with type <see langword="unsigned int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2570">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2570">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2571">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2571">Format</span></span>|<span data-ttu-id="0ca49-2572">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2572">Assembly Format</span></span>|<span data-ttu-id="0ca49-2573">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2573">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2574">91</span><span class="sxs-lookup"><span data-stu-id="0ca49-2574">91</span></span>|<span data-ttu-id="0ca49-2575">ldelem.U1</span><span class="sxs-lookup"><span data-stu-id="0ca49-2575">ldelem.u1</span></span>|<span data-ttu-id="0ca49-2576">Charge l’élément avec le type `unsigned int8` à `index` en haut de la pile en tant qu’un `int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2576">Loads the element with type `unsigned int8` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="0ca49-2577">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2577">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2578">Une référence d’objet `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2578">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2579">Une valeur d’index `index` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2579">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-2580">`index` et `array` sont dépilés ; la valeur stockée à la position `index` dans `array` est recherché.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2580">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="0ca49-2581">La valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2581">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2582">Le `ldelem.u1` instruction charge la valeur de l’élément avec index `index` (type `native int`) dans le tableau unidimensionnel de base zéro `array` et le place en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2582">The `ldelem.u1` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="0ca49-2583">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2583">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="0ca49-2584">La valeur de retour pour `ldelem.u1` est `int8`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2584">The return value for `ldelem.u1` is `int8`.</span></span>  
  
 <span data-ttu-id="0ca49-2585">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` (pas `native int`) lorsqu’elles sont chargées dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2585">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2586"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2586"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-2587"><xref:System.ArrayTypeMismatchException> est levée si `array` ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2587"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-2588"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2588"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-2589">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldelem.u1` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2589">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u1` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2590">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2590">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2591">Charge l'élément avec le type <see langword="unsigned int16" /> à un index de tableau spécifié en haut de la pile d'évaluation en tant que <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2591">Loads the element with type <see langword="unsigned int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2592">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2592">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2593">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2593">Format</span></span>|<span data-ttu-id="0ca49-2594">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2594">Assembly Format</span></span>|<span data-ttu-id="0ca49-2595">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2595">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2596">93</span><span class="sxs-lookup"><span data-stu-id="0ca49-2596">93</span></span>|<span data-ttu-id="0ca49-2597">ldelem.U2</span><span class="sxs-lookup"><span data-stu-id="0ca49-2597">ldelem.u2</span></span>|<span data-ttu-id="0ca49-2598">Charge l’élément avec le type `unsigned int16` à index en haut de la pile en tant qu’un `int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2598">Loads the element with type `unsigned int16` at index onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="0ca49-2599">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2599">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2600">Une référence d’objet `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2600">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2601">Une valeur d’index `index` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2601">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-2602">`index` et `array` sont dépilés ; la valeur stockée à la position `index` dans `array` est recherché.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2602">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="0ca49-2603">La valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2603">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2604">Le `ldelem.u2` instruction charge la valeur de l’élément avec index `index` (type `native int`) dans le tableau unidimensionnel de base zéro `array` et le place en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2604">The `ldelem.u2` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="0ca49-2605">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2605">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="0ca49-2606">La valeur de retour pour `ldelem.u2` est `int16`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2606">The return value for `ldelem.u2` is `int16`.</span></span>  
  
 <span data-ttu-id="0ca49-2607">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` (pas `native int`) lorsqu’elles sont chargées dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2607">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2608"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2608"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-2609"><xref:System.ArrayTypeMismatchException> est levée si `array` ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2609"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-2610"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2610"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-2611">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldelem.u2` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2611">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u2` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2612">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2612">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2613">Charge l'élément avec le type <see langword="unsigned int32" /> à un index de tableau spécifié en haut de la pile d'évaluation en tant que <see langword="int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2613">Loads the element with type <see langword="unsigned int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2614">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2614">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2615">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2615">Format</span></span>|<span data-ttu-id="0ca49-2616">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2616">Assembly Format</span></span>|<span data-ttu-id="0ca49-2617">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2617">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2618">95</span><span class="sxs-lookup"><span data-stu-id="0ca49-2618">95</span></span>|<span data-ttu-id="0ca49-2619">ldelem.U4</span><span class="sxs-lookup"><span data-stu-id="0ca49-2619">ldelem.u4</span></span>|<span data-ttu-id="0ca49-2620">Charge l’élément avec le type `unsigned int32` à index en haut de la pile en tant qu’un `int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2620">Loads the element with type `unsigned int32` at index onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="0ca49-2621">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2621">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2622">Une référence d’objet `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2622">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2623">Une valeur d’index `index` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2623">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-2624">`index` et `array` sont dépilés ; la valeur stockée à la position `index` dans `array` est recherché.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2624">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="0ca49-2625">La valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2625">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2626">Le `ldelem.u4` instruction charge la valeur de l’élément avec index `index` (type `native int`) dans le tableau unidimensionnel de base zéro `array` et le place en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2626">The `ldelem.u4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="0ca49-2627">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2627">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="0ca49-2628">La valeur de retour pour `ldelem.u4` est `int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2628">The return value for `ldelem.u4` is `int32`.</span></span>  
  
 <span data-ttu-id="0ca49-2629">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` (pas `native int`) lorsqu’elles sont chargées dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2629">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2630"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2630"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-2631"><xref:System.ArrayTypeMismatchException> est levée si le tableau ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2631"><xref:System.ArrayTypeMismatchException> is thrown if array does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-2632"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2632"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-2633">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldelem.u4` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2633">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u4` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2634">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2634">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelema">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelema;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelema" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelema As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelema;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelema : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2635">Charge l'adresse de l'élément de tableau situé à un index de tableau spécifié en haut de la pile d'évaluation en tant que type <see langword="&amp;" /> (pointeur managé).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2635">Loads the address of the array element at a specified array index onto the top of the evaluation stack as type <see langword="&amp;" /> (managed pointer).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2636">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2636">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2637">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2637">Format</span></span>|<span data-ttu-id="0ca49-2638">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2638">Assembly Format</span></span>|<span data-ttu-id="0ca49-2639">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2639">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2640">8F < `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-2640">8F < `T` ></span></span>|<span data-ttu-id="0ca49-2641">ldelema `class`</span><span class="sxs-lookup"><span data-stu-id="0ca49-2641">ldelema `class`</span></span>|<span data-ttu-id="0ca49-2642">Charge l’adresse de l’élément de tableau à `index` en haut de la pile d’évaluation en tant que type `&` (pointeur managé).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2642">Loads the address of the array element at `index` onto the top of the evaluation stack as type `&` (managed pointer).</span></span>|  
  
 <span data-ttu-id="0ca49-2643">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2643">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2644">Une référence d’objet `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2644">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2645">Une valeur d’index `index` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2645">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-2646">`index` et `array` sont dépilés ; l’adresse stockée à la position `index` dans `array` est recherché.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2646">`index` and `array` are popped from the stack; the address stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="0ca49-2647">L’adresse est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2647">The address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2648">Le `ldelema` est utilisé pour récupérer l’adresse d’un objet à un index particulier dans un tableau d’objets (de type `class`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2648">The `ldelema` is used to retrieve the address of an object at a particular index in an array of objects (of type `class`).</span></span> <span data-ttu-id="0ca49-2649">Le `ldelema` instruction charge l’adresse de la valeur à l’index `index` (type `native int`) dans le tableau unidimensionnel de base zéro `array` et le place en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2649">The `ldelema` instruction loads the address of the value at index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="0ca49-2650">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2650">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="0ca49-2651">La valeur doit être de type `class` passé avec l’instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2651">The value must be of type `class` passed with the instruction.</span></span>  
  
 <span data-ttu-id="0ca49-2652">La valeur de retour pour `ldelema` est un pointeur managé (type `&`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2652">The return value for `ldelema` is a managed pointer (type `&`).</span></span>  
  
 <span data-ttu-id="0ca49-2653">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` (pas `native int`) lorsqu’elles sont chargées dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2653">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2654"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2654"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-2655"><xref:System.ArrayTypeMismatchException> est levée si `array` ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2655"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-2656"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2656"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-2657">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldelema` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2657">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelema` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2658">ILGenerator.Emit (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2658">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2659">Recherche la valeur d'un champ dans l'objet dont la référence est actuellement située dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2659">Finds the value of a field in the object whose reference is currently on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2660">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2660">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2661">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2661">Format</span></span>|<span data-ttu-id="0ca49-2662">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2662">Assembly Format</span></span>|<span data-ttu-id="0ca49-2663">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2663">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2664">7 B &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-2664">7B < `T` ></span></span>|<span data-ttu-id="0ca49-2665">ldfld `field`</span><span class="sxs-lookup"><span data-stu-id="0ca49-2665">ldfld `field`</span></span>|<span data-ttu-id="0ca49-2666">Exécute un push de la valeur d’un champ dans un objet spécifié dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2666">Pushes the value of a field in a specified object onto the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-2667">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2667">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2668">Une référence d’objet (ou pointeur) est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2668">An object reference (or pointer) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2669">La référence d’objet (ou pointeur) est retirée de la pile ; la valeur du champ spécifié dans l’objet est trouvée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2669">The object reference (or pointer) is popped from the stack; the value of the specified field in the object is found.</span></span>  
  
3.  <span data-ttu-id="0ca49-2670">La valeur stockée dans le champ est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2670">The value stored in the field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2671">La `ldfld` instruction exécute un push de la valeur d’un champ situé dans un objet dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2671">The `ldfld` instruction pushes the value of a field located in an object onto the stack.</span></span> <span data-ttu-id="0ca49-2672">L’objet doit se trouver sur la pile en tant que référence d’objet (type `O`), un pointeur managé (type `&`), un pointeur non managé (type `native int`), un pointeur transitoire (type `*`), ou une instance d’un type valeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2672">The object must be on the stack as an object reference (type `O`), a managed pointer (type `&`), an unmanaged pointer (type `native int`), a transient pointer (type `*`), or an instance of a value type.</span></span> <span data-ttu-id="0ca49-2673">L’utilisation d’un pointeur non managé n’est pas autorisée dans du code vérifiable.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2673">The use of an unmanaged pointer is not permitted in verifiable code.</span></span> <span data-ttu-id="0ca49-2674">Champ de l’objet est spécifié par un jeton de métadonnées qui doit faire référence à un membre de champ.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2674">The object's field is specified by a metadata token that must refer to a field member.</span></span> <span data-ttu-id="0ca49-2675">Le type de retour est identique à celui associé au champ.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2675">The return type is the same as the one associated with the field.</span></span> <span data-ttu-id="0ca49-2676">Le champ peut être un champ d’instance (auquel cas l’objet ne doit pas être une référence null) ou un champ statique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2676">The field may be either an instance field (in which case the object must not be a null reference) or a static field.</span></span>  
  
 <span data-ttu-id="0ca49-2677">Le `ldfld` instruction peut être précédée d’une des deux le <xref:System.Reflection.Emit.OpCodes.Unaligned> et <xref:System.Reflection.Emit.OpCodes.Volatile> préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2677">The `ldfld` instruction can be preceded by either or both of the <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile> prefixes.</span></span>  
  
 <span data-ttu-id="0ca49-2678"><xref:System.NullReferenceException> est levée si l’objet est null et que le champ n’est pas statique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2678"><xref:System.NullReferenceException> is thrown if the object is null and the field is not static.</span></span>  
  
 <span data-ttu-id="0ca49-2679"><xref:System.MissingFieldException> est levée si le champ spécifié est introuvable dans les métadonnées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2679"><xref:System.MissingFieldException> is thrown if the specified field is not found in the metadata.</span></span> <span data-ttu-id="0ca49-2680">Cette option est généralement activée lorsque des instructions de langage MSIL (Microsoft Intermediate Language) en code natif, pas en cours d’exécution.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2680">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="0ca49-2681">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldfld` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2681">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldfld` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2682">ILGenerator.Emit (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2682">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldflda;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldflda : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2683">Recherche l'adresse d'un champ dans l'objet dont la référence est actuellement située dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2683">Finds the address of a field in the object whose reference is currently on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2684">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2684">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2685">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2685">Format</span></span>|<span data-ttu-id="0ca49-2686">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2686">Assembly Format</span></span>|<span data-ttu-id="0ca49-2687">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2687">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2688">7C < `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-2688">7C < `T` ></span></span>|<span data-ttu-id="0ca49-2689">ldflda `field`</span><span class="sxs-lookup"><span data-stu-id="0ca49-2689">ldflda `field`</span></span>|<span data-ttu-id="0ca49-2690">Exécute un push de l’adresse de `field` dans un objet spécifié dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2690">Pushes the address of `field` in a specified object onto the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-2691">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2691">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2692">Une référence d’objet (ou pointeur) est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2692">An object reference (or pointer) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2693">La référence d’objet (ou pointeur) est retirée de la pile ; l’adresse du champ spécifié dans l’objet est trouvé.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2693">The object reference (or pointer) is popped from the stack; the address of the specified field in the object is found.</span></span>  
  
3.  <span data-ttu-id="0ca49-2694">L’adresse du champ spécifié est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2694">The address of the specified field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2695">La `ldflda` instruction exécute un push de l’adresse d’un champ situé dans un objet dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2695">The `ldflda` instruction pushes the address of a field located in an object onto the stack.</span></span> <span data-ttu-id="0ca49-2696">L’objet doit se trouver sur la pile en tant que référence d’objet (type `O`), un pointeur managé (type `&`), un pointeur non managé (type `native int`), un pointeur transitoire (type `*`), ou une instance d’un type valeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2696">The object must be on the stack as an object reference (type `O`), a managed pointer (type `&`), an unmanaged pointer (type `native int`), a transient pointer (type `*`), or an instance of a value type.</span></span> <span data-ttu-id="0ca49-2697">L’utilisation d’un pointeur non managé n’est pas autorisée dans du code vérifiable.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2697">The use of an unmanaged pointer is not permitted in verifiable code.</span></span> <span data-ttu-id="0ca49-2698">Champ de l’objet est spécifié par un jeton de métadonnées qui doit faire référence à un membre de champ.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2698">The object's field is specified by a metadata token that must refer to a field member.</span></span>  
  
 <span data-ttu-id="0ca49-2699">La valeur retournée par `ldflda` est un pointeur managé (type `&`), sauf si l’objet est placé sur la pile en tant que pointeur non managé, auquel cas l’adresse de retour est également un pointeur non managé (type `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2699">The value returned by `ldflda` is a managed pointer (type `&`) unless the object is pushed onto the stack as an unmanaged pointer, in which case the return address is also an unmanaged pointer (type `native int`).</span></span>  
  
 <span data-ttu-id="0ca49-2700">Le `ldflda` instruction peut être précédée d’une des deux le <xref:System.Reflection.Emit.OpCodes.Unaligned> et <xref:System.Reflection.Emit.OpCodes.Volatile> préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2700">The `ldflda` instruction can be preceded by either or both of the <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile> prefixes.</span></span>  
  
 <span data-ttu-id="0ca49-2701"><xref:System.InvalidOperationException> est levée si l’objet n’est pas dans le domaine d’application à partir de laquelle il est accessible.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2701"><xref:System.InvalidOperationException> is thrown if the object is not within the application domain from which it is being accessed.</span></span> <span data-ttu-id="0ca49-2702">L’adresse d’un champ qui n’est pas dans le domaine d’application accès ne peut pas être chargé.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2702">The address of a field that is not inside the accessing application domain cannot be loaded.</span></span>  
  
 <span data-ttu-id="0ca49-2703"><xref:System.NullReferenceException> est levée si l’objet est null et que le champ n’est pas statique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2703"><xref:System.NullReferenceException> is thrown if the object is null and the field is not static.</span></span>  
  
 <span data-ttu-id="0ca49-2704"><xref:System.MissingFieldException> est levée si le champ spécifié est introuvable dans les métadonnées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2704"><xref:System.MissingFieldException> is thrown if the specified field is not found in the metadata.</span></span> <span data-ttu-id="0ca49-2705">Cette option est généralement activée lorsque des instructions de langage MSIL (Microsoft Intermediate Language) en code natif, pas en cours d’exécution.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2705">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="0ca49-2706">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldflda` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2706">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldflda` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2707">ILGenerator.Emit (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2707">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldftn;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldftn : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2708">Exécute un push d'un pointeur non managé (type <see langword="native int" />) sur le code natif implémentant une méthode spécifique dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2708">Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a specific method onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2709">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2709">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2710">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2710">Format</span></span>|<span data-ttu-id="0ca49-2711">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2711">Assembly Format</span></span>|<span data-ttu-id="0ca49-2712">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2712">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2713">FE 06 &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-2713">FE 06 < `T` ></span></span>|<span data-ttu-id="0ca49-2714">ldftn `method`</span><span class="sxs-lookup"><span data-stu-id="0ca49-2714">ldftn `method`</span></span>|<span data-ttu-id="0ca49-2715">Exécute un push d’un pointeur vers une méthode référencée par `method` sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2715">Pushes a pointer to a method referenced by `method` on the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-2716">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2716">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2717">Le pointeur non managé vers une méthode spécifique est envoyé à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2717">The unmanaged pointer to a specific method is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2718">La méthode spécifique (`method`) peut être appelée à l’aide de la <xref:System.Reflection.Emit.OpCodes.Calli> instruction si elle fait référence à une méthode managée (ou un stub qui effectue la transition à partir de code non managé).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2718">The specific method (`method`) can be called using the <xref:System.Reflection.Emit.OpCodes.Calli> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).</span></span>  
  
 <span data-ttu-id="0ca49-2719">La valeur retournée de points de code natif à l’aide de la convention d’appel de CLR.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2719">The value returned points to native code using the CLR calling convention.</span></span> <span data-ttu-id="0ca49-2720">Ce pointeur de la méthode ne doit pas être passé au code natif non managé comme une routine de rappel.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2720">This method pointer should not be passed to unmanaged native code as a callback routine.</span></span>  
  
 <span data-ttu-id="0ca49-2721">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldftn` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2721">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldftn` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2722">ILGenerator.Emit (OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2722">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2723">Charge indirectement une valeur de type <see langword="native int" /> en tant que <see langword="native int" /> dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2723">Loads a value of type <see langword="native int" /> as a <see langword="native int" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2724">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2724">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2725">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2725">Format</span></span>|<span data-ttu-id="0ca49-2726">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2726">Assembly Format</span></span>|<span data-ttu-id="0ca49-2727">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2727">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2728">4D</span><span class="sxs-lookup"><span data-stu-id="0ca49-2728">4D</span></span>|<span data-ttu-id="0ca49-2729">ldind.i</span><span class="sxs-lookup"><span data-stu-id="0ca49-2729">ldind.i</span></span>|<span data-ttu-id="0ca49-2730">Charge le `native int` valeur à l’adresse `addr` dans la pile en tant qu’un `native int`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2730">Loads the `native int` value at address `addr` onto the stack as a `native int`.</span></span>|  
  
 <span data-ttu-id="0ca49-2731">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2731">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2732">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2732">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2733">L’adresse est retirée de la pile ; la valeur située à l’adresse est extraite.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2733">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="0ca49-2734">La valeur récupérée est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2734">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2735">Le `ldind.i` instruction charge indirectement une `native int` valeur à partir de l’adresse spécifiée (de type `native int`, `&`, ou \*) dans la pile en tant qu’un `native int`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2735">The `ldind.i` instruction indirectly loads a `native int` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a `native int`.</span></span>  
  
 <span data-ttu-id="0ca49-2736">Tous les `ldind` instructions sont des raccourcis pour un <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction qui spécifie la classe de valeur intégrée correspondante.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2736">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="0ca49-2737">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` (pas `native int`) lorsqu’elles sont chargées dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2737">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="0ca49-2738">Les valeurs à virgule flottante sont converties en `F` tapez lors du chargement dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2738">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2739">Correct langage MSIL (Microsoft Intermediate) garantit que le `ldind` instructions sont utilisées de manière cohérente avec le type du pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2739">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="0ca49-2740">L’adresse initialement placé sur la pile doit être alignée avec la taille naturelle des objets sur l’ordinateur ou un <xref:System.NullReferenceException> peut se produire (consultez la <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction pour des mesures préventives du préfixe).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2740">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="0ca49-2741">Les résultats de toutes les instructions MSIL qui retournent des adresses (par exemple, <xref:System.Reflection.Emit.OpCodes.Ldloca> et <xref:System.Reflection.Emit.OpCodes.Ldarga>) sont alignés en toute sécurité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2741">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="0ca49-2742">Pour les types de données supérieurs à 1 octet, le classement des octets dépend de l’unité centrale cible.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2742">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="0ca49-2743">Code qui dépend de l’ordre des octets ne peut pas exécuter sur toutes les plateformes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2743">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="0ca49-2744"><xref:System.NullReferenceException> peut être levée si une adresse non valide est détectée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2744"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="0ca49-2745">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldind.i` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2745">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2746">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2746">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2747">Charge indirectement une valeur de type <see langword="int8" /> en tant que <see langword="int32" /> dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2747">Loads a value of type <see langword="int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2748">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2748">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2749">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2749">Format</span></span>|<span data-ttu-id="0ca49-2750">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2750">Assembly Format</span></span>|<span data-ttu-id="0ca49-2751">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2751">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2752">46</span><span class="sxs-lookup"><span data-stu-id="0ca49-2752">46</span></span>|<span data-ttu-id="0ca49-2753">ldind.i1</span><span class="sxs-lookup"><span data-stu-id="0ca49-2753">ldind.i1</span></span>|<span data-ttu-id="0ca49-2754">Charge le `int8` valeur à l’adresse `addr` dans la pile en tant qu’un `int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2754">Loads the `int8` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="0ca49-2755">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2755">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2756">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2756">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2757">L’adresse est retirée de la pile ; la valeur située à l’adresse est extraite.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2757">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="0ca49-2758">La valeur récupérée est placée sur la pile...</span><span class="sxs-lookup"><span data-stu-id="0ca49-2758">The fetched value is pushed onto the stack..</span></span>  
  
 <span data-ttu-id="0ca49-2759">Le `ldind.i1` instruction charge indirectement une `int8` valeur à partir de l’adresse spécifiée (de type `native int`, `&`, ou \*) dans la pile en tant qu’un `int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2759">The `ldind.i1` instruction indirectly loads an `int8` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="0ca49-2760">Tous les `ldind` instructions sont des raccourcis pour un <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction qui spécifie la classe de valeur intégrée correspondante.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2760">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="0ca49-2761">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` (pas `native int`) lorsqu’elles sont chargées dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2761">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="0ca49-2762">Les valeurs à virgule flottante sont converties en `F` tapez lors du chargement dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2762">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2763">Correct langage MSIL (Microsoft Intermediate) garantit que le `ldind` instructions sont utilisées de manière cohérente avec le type du pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2763">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="0ca49-2764">L’adresse initialement placé sur la pile doit être alignée avec la taille naturelle des objets sur l’ordinateur ou un <xref:System.NullReferenceException> peut se produire (consultez la <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction pour des mesures préventives du préfixe).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2764">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="0ca49-2765">Les résultats de toutes les instructions MSIL qui retournent des adresses (par exemple, <xref:System.Reflection.Emit.OpCodes.Ldloca> et <xref:System.Reflection.Emit.OpCodes.Ldarga>) sont alignés en toute sécurité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2765">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="0ca49-2766">Pour les types de données supérieurs à 1 octet, le classement des octets dépend de l’unité centrale cible.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2766">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="0ca49-2767">Code qui dépend de l’ordre des octets ne peut pas exécuter sur toutes les plateformes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2767">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="0ca49-2768"><xref:System.NullReferenceException> peut être levée si une adresse non valide est détectée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2768"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="0ca49-2769">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldind.i1` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2769">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i1` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2770">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2770">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2771">Charge indirectement une valeur de type <see langword="int16" /> en tant que <see langword="int32" /> dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2771">Loads a value of type <see langword="int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2772">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2772">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2773">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2773">Format</span></span>|<span data-ttu-id="0ca49-2774">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2774">Assembly Format</span></span>|<span data-ttu-id="0ca49-2775">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2775">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2776">48</span><span class="sxs-lookup"><span data-stu-id="0ca49-2776">48</span></span>|<span data-ttu-id="0ca49-2777">ldind.i2</span><span class="sxs-lookup"><span data-stu-id="0ca49-2777">ldind.i2</span></span>|<span data-ttu-id="0ca49-2778">Charge le `int16` valeur à l’adresse `addr` dans la pile en tant qu’un `int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2778">Loads the `int16` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="0ca49-2779">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2779">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2780">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2780">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2781">L’adresse est retirée de la pile ; la valeur située à l’adresse est extraite.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2781">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="0ca49-2782">La valeur récupérée est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2782">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2783">Le `ldind.i2` instruction charge indirectement une `int16` valeur à partir de l’adresse spécifiée (de type `native int`, `&`, ou \*) dans la pile en tant qu’un `int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2783">The `ldind.i2` instruction indirectly loads an `int16` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="0ca49-2784">Tous les `ldind` instructions sont des raccourcis pour un <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction qui spécifie la classe de valeur intégrée correspondante.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2784">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="0ca49-2785">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` (pas `native int`) lorsqu’elles sont chargées dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2785">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="0ca49-2786">Les valeurs à virgule flottante sont converties en `F` tapez lors du chargement dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2786">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2787">Correct langage MSIL (Microsoft Intermediate) garantit que le `ldind` instructions sont utilisées de manière cohérente avec le type du pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2787">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="0ca49-2788">L’adresse initialement placé sur la pile doit être alignée avec la taille naturelle des objets sur l’ordinateur ou un <xref:System.NullReferenceException> peut se produire (consultez la <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction pour des mesures préventives du préfixe).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2788">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="0ca49-2789">Les résultats de toutes les instructions MSIL qui retournent des adresses (par exemple, <xref:System.Reflection.Emit.OpCodes.Ldloca> et <xref:System.Reflection.Emit.OpCodes.Ldarga>) sont alignés en toute sécurité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2789">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="0ca49-2790">Pour les types de données supérieurs à 1 octet, le classement des octets dépend de l’unité centrale cible.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2790">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="0ca49-2791">Code qui dépend de l’ordre des octets ne peut pas exécuter sur toutes les plateformes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2791">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="0ca49-2792"><xref:System.NullReferenceException> peut être levée si une adresse non valide est détectée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2792"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="0ca49-2793">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldind.i2` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2793">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i2` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2794">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2794">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2795">Charge indirectement une valeur de type <see langword="int32" /> en tant que <see langword="int32" /> dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2795">Loads a value of type <see langword="int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2796">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2796">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2797">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2797">Format</span></span>|<span data-ttu-id="0ca49-2798">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2798">Assembly Format</span></span>|<span data-ttu-id="0ca49-2799">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2799">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2800">4 A</span><span class="sxs-lookup"><span data-stu-id="0ca49-2800">4A</span></span>|<span data-ttu-id="0ca49-2801">ldind.i4</span><span class="sxs-lookup"><span data-stu-id="0ca49-2801">ldind.i4</span></span>|<span data-ttu-id="0ca49-2802">Charge le `int32` valeur à l’adresse `addr` dans la pile en tant qu’un `int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2802">Loads the `int32` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="0ca49-2803">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2803">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2804">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2804">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2805">L’adresse est retirée de la pile ; la valeur située à l’adresse est extraite.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2805">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="0ca49-2806">La valeur récupérée est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2806">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2807">Le `ldind.i4` instruction charge indirectement une `int32` valeur à partir de l’adresse spécifiée (de type `native int`, `&`, ou \*) dans la pile en tant qu’un `int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2807">The `ldind.i4` instruction indirectly loads an `int32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="0ca49-2808">Tous les `ldind` instructions sont des raccourcis pour un <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction qui spécifie la classe de valeur intégrée correspondante.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2808">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="0ca49-2809">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` (pas `native int`) lorsqu’elles sont chargées dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2809">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="0ca49-2810">Les valeurs à virgule flottante sont converties en `F` tapez lors du chargement dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2810">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2811">Correct langage MSIL (Microsoft Intermediate) garantit que le `ldind` instructions sont utilisées de manière cohérente avec le type du pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2811">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="0ca49-2812">L’adresse initialement placé sur la pile doit être alignée avec la taille naturelle des objets sur l’ordinateur ou un <xref:System.NullReferenceException> peut se produire (consultez la <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction pour des mesures préventives du préfixe).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2812">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="0ca49-2813">Les résultats de toutes les instructions MSIL qui retournent des adresses (par exemple, <xref:System.Reflection.Emit.OpCodes.Ldloca> et <xref:System.Reflection.Emit.OpCodes.Ldarga>) sont alignés en toute sécurité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2813">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="0ca49-2814">Pour les types de données supérieurs à 1 octet, le classement des octets dépend de l’unité centrale cible.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2814">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="0ca49-2815">Code qui dépend de l’ordre des octets ne peut pas exécuter sur toutes les plateformes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2815">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="0ca49-2816"><xref:System.NullReferenceException> peut être levée si une adresse non valide est détectée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2816"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="0ca49-2817">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldind.i4` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2817">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i4` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2818">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2818">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2819">Charge indirectement une valeur de type <see langword="int64" /> en tant que <see langword="int64" /> dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2819">Loads a value of type <see langword="int64" /> as an <see langword="int64" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2820">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2820">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2821">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2821">Format</span></span>|<span data-ttu-id="0ca49-2822">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2822">Assembly Format</span></span>|<span data-ttu-id="0ca49-2823">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2823">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2824">4C</span><span class="sxs-lookup"><span data-stu-id="0ca49-2824">4C</span></span>|<span data-ttu-id="0ca49-2825">ldind.i8</span><span class="sxs-lookup"><span data-stu-id="0ca49-2825">ldind.i8</span></span>|<span data-ttu-id="0ca49-2826">Charge le `int64` valeur à l’adresse `addr` dans la pile en tant qu’un `int64`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2826">Loads the `int64` value at address `addr` onto the stack as an `int64`.</span></span>|  
  
 <span data-ttu-id="0ca49-2827">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2827">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2828">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2828">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2829">L’adresse est retirée de la pile ; la valeur située à l’adresse est extraite.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2829">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="0ca49-2830">La valeur récupérée est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2830">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2831">Le `ldind.i8` instruction charge indirectement une `int64` valeur à partir de l’adresse spécifiée (de type `native int`, `&`, ou \*) dans la pile en tant qu’un `int64`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2831">The `ldind.i8` instruction indirectly loads an `int64` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int64`.</span></span>  
  
 <span data-ttu-id="0ca49-2832">Tous les `ldind` instructions sont des raccourcis pour un <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction qui spécifie la classe de valeur intégrée correspondante.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2832">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="0ca49-2833">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` (pas `native int`) lorsqu’elles sont chargées dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2833">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="0ca49-2834">Les valeurs à virgule flottante sont converties en `F` tapez lors du chargement dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2834">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2835">Correct langage MSIL (Microsoft Intermediate) garantit que le `ldind` instructions sont utilisées de manière cohérente avec le type du pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2835">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="0ca49-2836">L’adresse initialement placé sur la pile doit être alignée avec la taille naturelle des objets sur l’ordinateur ou un <xref:System.NullReferenceException> peut se produire (consultez la <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction pour des mesures préventives du préfixe).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2836">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="0ca49-2837">Les résultats de toutes les instructions MSIL qui retournent des adresses (par exemple, <xref:System.Reflection.Emit.OpCodes.Ldloca> et <xref:System.Reflection.Emit.OpCodes.Ldarga>) sont alignés en toute sécurité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2837">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="0ca49-2838">Pour les types de données supérieurs à 1 octet, le classement des octets dépend de l’unité centrale cible.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2838">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="0ca49-2839">Code qui dépend de l’ordre des octets ne peut pas exécuter sur toutes les plateformes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2839">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="0ca49-2840"><xref:System.NullReferenceException> peut être levée si une adresse non valide est détectée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2840"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="0ca49-2841">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldind.i8` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2841">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i8` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2842">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2842">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2843">Charge indirectement une valeur de type <see langword="float32" /> en tant que type <see langword="F" /> (float) dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2843">Loads a value of type <see langword="float32" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2844">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2844">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2845">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2845">Format</span></span>|<span data-ttu-id="0ca49-2846">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2846">Assembly Format</span></span>|<span data-ttu-id="0ca49-2847">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2847">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2848">4E</span><span class="sxs-lookup"><span data-stu-id="0ca49-2848">4E</span></span>|<span data-ttu-id="0ca49-2849">ldind.r4</span><span class="sxs-lookup"><span data-stu-id="0ca49-2849">ldind.r4</span></span>|<span data-ttu-id="0ca49-2850">Charge le `float32` valeur à l’adresse `addr` dans la pile en tant que type `F`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2850">Loads the `float32` value at address `addr` onto the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="0ca49-2851">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2851">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2852">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2852">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2853">L’adresse est retirée de la pile ; la valeur située à l’adresse est extraite.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2853">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="0ca49-2854">La valeur récupérée est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2854">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2855">Le `ldind.r4` instruction charge indirectement une `float32` valeur à partir de l’adresse spécifiée (de type `native int`, `&`, ou \*) dans la pile en tant que type `F`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2855">The `ldind.r4` instruction indirectly loads a `float32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a type `F`.</span></span>  
  
 <span data-ttu-id="0ca49-2856">Tous les `ldind` instructions sont des raccourcis pour un <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction qui spécifie la classe de valeur intégrée correspondante.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2856">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="0ca49-2857">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` (pas `native int`) lorsqu’elles sont chargées dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2857">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="0ca49-2858">Les valeurs à virgule flottante sont converties en `F` tapez lors du chargement dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2858">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2859">Correct langage MSIL (Microsoft Intermediate) garantit que le `ldind` instructions sont utilisées de manière cohérente avec le type du pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2859">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="0ca49-2860">L’adresse initialement placé sur la pile doit être alignée avec la taille naturelle des objets sur l’ordinateur ou un <xref:System.NullReferenceException> peut se produire (consultez la <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction pour des mesures préventives du préfixe).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2860">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="0ca49-2861">Les résultats de toutes les instructions MSIL qui retournent des adresses (par exemple, <xref:System.Reflection.Emit.OpCodes.Ldloca> et <xref:System.Reflection.Emit.OpCodes.Ldarga>) sont alignés en toute sécurité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2861">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="0ca49-2862">Pour les types de données supérieurs à 1 octet, le classement des octets dépend de l’unité centrale cible.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2862">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="0ca49-2863">Code qui dépend de l’ordre des octets ne peut pas exécuter sur toutes les plateformes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2863">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="0ca49-2864"><xref:System.NullReferenceException> peut être levée si une adresse non valide est détectée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2864"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="0ca49-2865">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldind.r4` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2865">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.r4` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2866">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2866">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2867">Charge indirectement une valeur de type <see langword="float64" /> en tant que type <see langword="F" /> (float) dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2867">Loads a value of type <see langword="float64" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2868">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2868">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2869">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2869">Format</span></span>|<span data-ttu-id="0ca49-2870">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2870">Assembly Format</span></span>|<span data-ttu-id="0ca49-2871">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2871">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2872">4F</span><span class="sxs-lookup"><span data-stu-id="0ca49-2872">4F</span></span>|<span data-ttu-id="0ca49-2873">ldind.r8</span><span class="sxs-lookup"><span data-stu-id="0ca49-2873">ldind.r8</span></span>|<span data-ttu-id="0ca49-2874">Charge le `float64` valeur à l’adresse `addr` dans la pile en tant que type `F`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2874">Loads the `float64` value at address `addr` onto the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="0ca49-2875">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2875">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2876">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2876">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2877">L’adresse est retirée de la pile ; la valeur située à l’adresse est extraite.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2877">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="0ca49-2878">La valeur récupérée est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2878">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2879">Le `ldind.r8` instruction charge indirectement une `float64` valeur à partir de l’adresse spécifiée (de type `native int`, `&`, ou \*) dans la pile en tant qu’un `float64`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2879">The `ldind.r8` instruction indirectly loads a `float64` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a `float64`.</span></span>  
  
 <span data-ttu-id="0ca49-2880">Tous les `ldind` instructions sont des raccourcis pour un <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction qui spécifie la classe de valeur intégrée correspondante.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2880">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="0ca49-2881">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` (pas `native int`) lorsqu’elles sont chargées dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2881">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="0ca49-2882">Les valeurs à virgule flottante sont converties en `F` tapez lors du chargement dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2882">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2883">Correct langage MSIL (Microsoft Intermediate) garantit que le `ldind` instructions sont utilisées de manière cohérente avec le type du pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2883">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="0ca49-2884">L’adresse initialement placé sur la pile doit être alignée avec la taille naturelle des objets sur l’ordinateur ou un <xref:System.NullReferenceException> peut se produire (consultez la <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction pour des mesures préventives du préfixe).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2884">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="0ca49-2885">Les résultats de toutes les instructions MSIL qui retournent des adresses (par exemple, <xref:System.Reflection.Emit.OpCodes.Ldloca> et <xref:System.Reflection.Emit.OpCodes.Ldarga>) sont alignés en toute sécurité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2885">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="0ca49-2886">Pour les types de données supérieurs à 1 octet, le classement des octets dépend de l’unité centrale cible.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2886">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="0ca49-2887">Code qui dépend de l’ordre des octets ne peut pas exécuter sur toutes les plateformes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2887">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="0ca49-2888"><xref:System.NullReferenceException> peut être levée si une adresse non valide est détectée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2888"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="0ca49-2889">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldind.r8` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2889">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.r8` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2890">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2890">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2891">Charge indirectement une référence d'objet en tant que type <see langword="O" /> (référence d'objet) dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2891">Loads an object reference as a type <see langword="O" /> (object reference) onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2892">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2892">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2893">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2893">Format</span></span>|<span data-ttu-id="0ca49-2894">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2894">Assembly Format</span></span>|<span data-ttu-id="0ca49-2895">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2895">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2896">50</span><span class="sxs-lookup"><span data-stu-id="0ca49-2896">50</span></span>|<span data-ttu-id="0ca49-2897">ldind.ref</span><span class="sxs-lookup"><span data-stu-id="0ca49-2897">ldind.ref</span></span>|<span data-ttu-id="0ca49-2898">Charge la référence d’objet à l’adresse `addr` dans la pile en tant que type `O`</span><span class="sxs-lookup"><span data-stu-id="0ca49-2898">Loads the object reference at address `addr` onto the stack as a type `O`</span></span>|  
  
 <span data-ttu-id="0ca49-2899">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2899">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2900">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2900">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2901">L’adresse est retirée de la pile ; la référence d’objet située à l’adresse est extraite.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2901">The address is popped from the stack; the object reference located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="0ca49-2902">La référence extraite est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2902">The fetched reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2903">Le `ldind.ref` instruction charge indirectement la référence d’objet l’adresse spécifiée (de type `native int`, `&`, ou \*) dans la pile en tant que type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2903">The `ldind.ref` instruction indirectly loads the object reference the specified address (of type `native int`, `&`, or \*) onto the stack as type `O`.</span></span>  
  
 <span data-ttu-id="0ca49-2904">Tous les `ldind` instructions sont des raccourcis pour un <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction qui spécifie la classe de valeur intégrée correspondante.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2904">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="0ca49-2905">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` (pas `native int`) lorsqu’elles sont chargées dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2905">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="0ca49-2906">Les valeurs à virgule flottante sont converties en `F` tapez lors du chargement dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2906">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2907">Correct langage MSIL (Microsoft Intermediate) garantit que le `ldind` instructions sont utilisées de manière cohérente avec le type du pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2907">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="0ca49-2908">L’adresse initialement placé sur la pile doit être alignée avec la taille naturelle des objets sur l’ordinateur ou un <xref:System.NullReferenceException> peut se produire (consultez la <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction pour des mesures préventives du préfixe).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2908">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="0ca49-2909">Les résultats de toutes les instructions MSIL qui retournent des adresses (par exemple, <xref:System.Reflection.Emit.OpCodes.Ldloca> et <xref:System.Reflection.Emit.OpCodes.Ldarga>) sont alignés en toute sécurité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2909">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="0ca49-2910">Pour les types de données supérieurs à 1 octet, le classement des octets dépend de l’unité centrale cible.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2910">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="0ca49-2911">Code qui dépend de l’ordre des octets ne peut pas exécuter sur toutes les plateformes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2911">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="0ca49-2912"><xref:System.NullReferenceException> peut être levée si une adresse non valide est détectée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2912"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="0ca49-2913">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldind.ref` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2913">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.ref` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2914">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2914">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2915">Charge indirectement une valeur de type <see langword="unsigned int8" /> en tant que <see langword="int32" /> dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2915">Loads a value of type <see langword="unsigned int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2916">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2916">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2917">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2917">Format</span></span>|<span data-ttu-id="0ca49-2918">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2918">Assembly Format</span></span>|<span data-ttu-id="0ca49-2919">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2919">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2920">47</span><span class="sxs-lookup"><span data-stu-id="0ca49-2920">47</span></span>|<span data-ttu-id="0ca49-2921">ldind.U1</span><span class="sxs-lookup"><span data-stu-id="0ca49-2921">ldind.u1</span></span>|<span data-ttu-id="0ca49-2922">Charge le `unsigned int8` valeur à l’adresse `addr` dans la pile en tant qu’un `int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2922">Loads the `unsigned int8` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="0ca49-2923">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2923">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2924">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2924">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2925">L’adresse est retirée de la pile ; la valeur située à l’adresse est extraite.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2925">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="0ca49-2926">La valeur récupérée est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2926">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2927">Le `ldind.u1` instruction charge indirectement une `unsigned int8` valeur à partir de l’adresse spécifiée (de type`native int`, `&`, ou \*) dans la pile en tant qu’un `int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2927">The `ldind.u1` instruction indirectly loads an `unsigned int8` value from the specified address (of type`native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="0ca49-2928">Tous les `ldind` instructions sont des raccourcis pour un <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction qui spécifie la classe de valeur intégrée correspondante.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2928">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="0ca49-2929">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` (pas `native int`) lorsqu’elles sont chargées dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2929">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="0ca49-2930">Les valeurs à virgule flottante sont converties en `F` tapez lors du chargement dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2930">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2931">Correct langage MSIL (Microsoft Intermediate) garantit que le `ldind` instructions sont utilisées de manière cohérente avec le type du pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2931">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="0ca49-2932">L’adresse initialement placé sur la pile doit être alignée avec la taille naturelle des objets sur l’ordinateur ou un <xref:System.NullReferenceException> peut se produire (consultez la <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction pour des mesures préventives du préfixe).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2932">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="0ca49-2933">Les résultats de toutes les instructions MSIL qui retournent des adresses (par exemple, <xref:System.Reflection.Emit.OpCodes.Ldloca> et <xref:System.Reflection.Emit.OpCodes.Ldarga>) sont alignés en toute sécurité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2933">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="0ca49-2934">Pour les types de données supérieurs à 1 octet, le classement des octets dépend de l’unité centrale cible.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2934">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="0ca49-2935">Code qui dépend de l’ordre des octets ne peut pas exécuter sur toutes les plateformes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2935">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="0ca49-2936"><xref:System.NullReferenceException> peut être levée si une adresse non valide est détectée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2936"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="0ca49-2937">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldind.u1` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2937">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u1` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2938">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2938">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2939">Charge indirectement une valeur de type <see langword="unsigned int16" /> en tant que <see langword="int32" /> dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2939">Loads a value of type <see langword="unsigned int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2940">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2940">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2941">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2941">Format</span></span>|<span data-ttu-id="0ca49-2942">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2942">Assembly Format</span></span>|<span data-ttu-id="0ca49-2943">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2943">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2944">49</span><span class="sxs-lookup"><span data-stu-id="0ca49-2944">49</span></span>|<span data-ttu-id="0ca49-2945">ldind.U2</span><span class="sxs-lookup"><span data-stu-id="0ca49-2945">ldind.u2</span></span>|<span data-ttu-id="0ca49-2946">Charge le `unsigned int16` valeur à l’adresse `addr` dans la pile en tant qu’un `int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2946">Loads the `unsigned int16` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="0ca49-2947">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2947">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2948">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2948">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2949">L’adresse est retirée de la pile ; la valeur située à l’adresse est extraite.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2949">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="0ca49-2950">La valeur récupérée est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2950">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2951">Le `ldind.u2` instruction charge indirectement une `unsigned int16` valeur à partir de l’adresse spécifiée (de type `native int`, `&`, ou \*) dans la pile en tant qu’un `int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2951">The `ldind.u2` instruction indirectly loads an `unsigned int16` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="0ca49-2952">Tous les `ldind` instructions sont des raccourcis pour un <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction qui spécifie la classe de valeur intégrée correspondante.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2952">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="0ca49-2953">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` (pas `native int`) lorsqu’elles sont chargées dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2953">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="0ca49-2954">Les valeurs à virgule flottante sont converties en `F` tapez lors du chargement dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2954">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2955">Correct langage MSIL (Microsoft Intermediate) garantit que le `ldind` instructions sont utilisées de manière cohérente avec le type du pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2955">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="0ca49-2956">L’adresse initialement placé sur la pile doit être alignée avec la taille naturelle des objets sur l’ordinateur ou un <xref:System.NullReferenceException> peut se produire (consultez la <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction pour des mesures préventives du préfixe).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2956">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="0ca49-2957">Les résultats de toutes les instructions MSIL qui retournent des adresses (par exemple, <xref:System.Reflection.Emit.OpCodes.Ldloca> et <xref:System.Reflection.Emit.OpCodes.Ldarga>) sont alignés en toute sécurité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2957">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="0ca49-2958">Pour les types de données supérieurs à 1 octet, le classement des octets dépend de l’unité centrale cible.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2958">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="0ca49-2959">Code qui dépend de l’ordre des octets ne peut pas exécuter sur toutes les plateformes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2959">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="0ca49-2960"><xref:System.NullReferenceException> peut être levée si une adresse non valide est détectée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2960"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="0ca49-2961">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldind.u2` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2961">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u2` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2962">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2962">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2963">Charge indirectement une valeur de type <see langword="unsigned int32" /> en tant que <see langword="int32" /> dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2963">Loads a value of type <see langword="unsigned int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2964">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2964">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2965">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2965">Format</span></span>|<span data-ttu-id="0ca49-2966">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2966">Assembly Format</span></span>|<span data-ttu-id="0ca49-2967">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2967">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2968">4 B</span><span class="sxs-lookup"><span data-stu-id="0ca49-2968">4B</span></span>|<span data-ttu-id="0ca49-2969">ldind.U4</span><span class="sxs-lookup"><span data-stu-id="0ca49-2969">ldind.u4</span></span>|<span data-ttu-id="0ca49-2970">Charge le `unsigned int32` valeur à l’adresse `addr` dans la pile en tant qu’un `int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2970">Loads the `unsigned int32` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="0ca49-2971">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2971">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2972">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2972">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2973">L’adresse est retirée de la pile ; la valeur située à l’adresse est extraite.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2973">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="0ca49-2974">La valeur récupérée est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2974">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2975">Le `ldind.u4` instruction charge indirectement une `unsigned int32` valeur à partir de l’adresse spécifiée (de type `native int`, `&`, ou \*) dans la pile en tant qu’un `int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2975">The `ldind.u4` instruction indirectly loads an `unsigned int32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="0ca49-2976">Tous les `ldind` instructions sont des raccourcis pour un <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction qui spécifie la classe de valeur intégrée correspondante.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2976">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="0ca49-2977">Notez que les valeurs entières inférieures à 4 octets sont étendues à `int32` (pas `native int`) lorsqu’elles sont chargées dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2977">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="0ca49-2978">Les valeurs à virgule flottante sont converties en `F` tapez lors du chargement dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2978">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-2979">Correct langage MSIL (Microsoft Intermediate) garantit que le `ldind` instructions sont utilisées de manière cohérente avec le type du pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2979">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="0ca49-2980">L’adresse initialement placé sur la pile doit être alignée avec la taille naturelle des objets sur l’ordinateur ou un <xref:System.NullReferenceException> peut se produire (consultez la <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction pour des mesures préventives du préfixe).</span><span class="sxs-lookup"><span data-stu-id="0ca49-2980">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="0ca49-2981">Les résultats de toutes les instructions MSIL qui retournent des adresses (par exemple, <xref:System.Reflection.Emit.OpCodes.Ldloca> et <xref:System.Reflection.Emit.OpCodes.Ldarga>) sont alignés en toute sécurité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2981">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="0ca49-2982">Pour les types de données supérieurs à 1 octet, le classement des octets dépend de l’unité centrale cible.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2982">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="0ca49-2983">Code qui dépend de l’ordre des octets ne peut pas exécuter sur toutes les plateformes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2983">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="0ca49-2984"><xref:System.NullReferenceException> peut être levée si une adresse non valide est détectée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2984"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="0ca49-2985">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldind.u4` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2985">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u4` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-2986">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-2986">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldlen">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldlen;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldlen" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldlen As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldlen;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldlen : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-2987">Exécute un push du nombre d'éléments d'un tableau unidimensionnel de base zéro dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-2987">Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-2988">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2988">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-2989">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-2989">Format</span></span>|<span data-ttu-id="0ca49-2990">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-2990">Assembly Format</span></span>|<span data-ttu-id="0ca49-2991">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-2991">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-2992">8E</span><span class="sxs-lookup"><span data-stu-id="0ca49-2992">8E</span></span>|<span data-ttu-id="0ca49-2993">ldlen</span><span class="sxs-lookup"><span data-stu-id="0ca49-2993">ldlen</span></span>|<span data-ttu-id="0ca49-2994">Exécute un push de la longueur (de type `natural unsigned int`) d’un tableau sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2994">Pushes the length (of type `natural unsigned int`) of an array on the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-2995">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-2995">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-2996">Une référence d’objet à un tableau est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2996">An object reference to an array is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-2997">La référence de tableau est dépilée et la longueur est calculée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2997">The array reference is popped from the stack and the length is computed.</span></span>  
  
3.  <span data-ttu-id="0ca49-2998">La longueur est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2998">The length is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-2999">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-2999">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="0ca49-3000">La longueur est retournée en tant qu’un `natural unsigned int`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3000">The length is returned as a `natural unsigned int`.</span></span>  
  
 <span data-ttu-id="0ca49-3001"><xref:System.NullReferenceException> est levé si la référence de tableau est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3001"><xref:System.NullReferenceException> is thrown if the array reference is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-3002">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldlen` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3002">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldlen` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3003">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3003">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3004">Charge la variable locale à un index spécifique dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3004">Loads the local variable at a specific index onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3005">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3005">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3006">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3006">Format</span></span>|<span data-ttu-id="0ca49-3007">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3007">Assembly Format</span></span>|<span data-ttu-id="0ca49-3008">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3008">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3009">FE 0C &LT; `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3009">FE 0C < `unsigned int16` ></span></span>|<span data-ttu-id="0ca49-3010">ldloc `index`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3010">ldloc `index`</span></span>|<span data-ttu-id="0ca49-3011">Charge la variable locale à l’index `index` sur pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3011">Loads the local variable at index `index` onto stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3012">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3012">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3013">La valeur de variable locale à l’index spécifié est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3013">The local variable value at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3014">La `ldloc` instruction exécute un push le contenu de la variable locale à l’index passé dans la pile d’évaluation, où les variables locales sont numérotées à partir de 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3014">The `ldloc` instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards.</span></span> <span data-ttu-id="0ca49-3015">Variables locales sont initialisées à 0 avant d’entrer la méthode uniquement si l’indicateur d’initialisation sur la méthode a la valeur true.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3015">Local variables are initialized to 0 before entering the method only if the initialize flag on the method is true.</span></span> <span data-ttu-id="0ca49-3016">Il existe 65 535 (2 ^ 16 - 1) variables locales possibles (0-65 534).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3016">There are 65,535 (2^16-1) local variables possible (0-65,534).</span></span> <span data-ttu-id="0ca49-3017">L’index 65 535 n’est pas valide, car les implémentations éventuelles utiliseront un entier de 2 octets pour effectuer le suivi à la fois un index de variable locale, ainsi que le nombre total de variables locales pour une méthode donnée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3017">Index 65,535 is not valid since likely implementations will use a 2-byte integer to track both a local's index, along with the total number of locals for a given method.</span></span> <span data-ttu-id="0ca49-3018">Si un index 65 535 avait été rendu valide, un entier plus large pour suivre le nombre de variables locales dans une telle méthode serait nécessaire.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3018">If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.</span></span>  
  
 <span data-ttu-id="0ca49-3019">Le `ldloc.0`, `ldloc.1`, `ldloc.2`, et `ldloc.3` fournissent un codage efficace pour l’accès aux quatre premières variables locales.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3019">The `ldloc.0`, `ldloc.1`, `ldloc.2`, and `ldloc.3` instructions provide an efficient encoding for accessing the first four local variables.</span></span>  
  
 <span data-ttu-id="0ca49-3020">Le type de la valeur est le même que le type de la variable locale, qui est spécifiée dans l’en-tête de méthode.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3020">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="0ca49-3021">Consultez Partition I. Local variables qui sont inférieures à 4 octets sont étendus au type `int32` lorsqu’elles sont chargées dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3021">See Partition I. Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="0ca49-3022">Valeurs à virgule flottante sont étendues à leur taille native (type `F`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3022">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="0ca49-3023">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> les surcharges de méthode peuvent utiliser le `ldloc` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3023">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldloc` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3024">ILGenerator.Emit (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3024">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="0ca49-3025">ILGenerator.Emit (OpCode, short)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3025">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3026">Charge la variable locale à l'index 0 dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3026">Loads the local variable at index 0 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3027">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3027">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3028">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3028">Format</span></span>|<span data-ttu-id="0ca49-3029">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3029">Assembly Format</span></span>|<span data-ttu-id="0ca49-3030">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3030">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3031">06</span><span class="sxs-lookup"><span data-stu-id="0ca49-3031">06</span></span>|<span data-ttu-id="0ca49-3032">ldloc.0</span><span class="sxs-lookup"><span data-stu-id="0ca49-3032">ldloc.0</span></span>|<span data-ttu-id="0ca49-3033">Charge la variable locale à l'index 0 dans la pile d'évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3033">Loads the local variable at index 0 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3034">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3034">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3035">La valeur de variable locale à l’index 0 est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3035">The local variable value at the index 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3036">`ldloc.0` est un encodage particulièrement efficace pour <xref:System.Reflection.Emit.OpCodes.Ldloc>, autorisant l’accès à la variable locale à l’index 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3036">`ldloc.0` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 0.</span></span>  
  
 <span data-ttu-id="0ca49-3037">Le type de la valeur est le même que le type de la variable locale, qui est spécifiée dans l’en-tête de méthode.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3037">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="0ca49-3038">Les variables locales qui sont inférieures à 4 octets sont étendus au type `int32` lorsqu’elles sont chargées dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3038">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="0ca49-3039">Valeurs à virgule flottante sont étendues à leur taille native (type `F`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3039">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="0ca49-3040">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldloc.0` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3040">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.0` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3041">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3041">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3042">Charge la variable locale à l'index 1 dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3042">Loads the local variable at index 1 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3043">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3043">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3044">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3044">Format</span></span>|<span data-ttu-id="0ca49-3045">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3045">Assembly Format</span></span>|<span data-ttu-id="0ca49-3046">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3046">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3047">07</span><span class="sxs-lookup"><span data-stu-id="0ca49-3047">07</span></span>|<span data-ttu-id="0ca49-3048">ldloc.1</span><span class="sxs-lookup"><span data-stu-id="0ca49-3048">ldloc.1</span></span>|<span data-ttu-id="0ca49-3049">Charge la variable locale à l'index 1 dans la pile d'évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3049">Loads the local variable at index 1 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3050">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3050">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3051">La valeur de variable locale à l’index 1 est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3051">The local variable value at the index 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3052">`ldloc.1` est un encodage particulièrement efficace pour <xref:System.Reflection.Emit.OpCodes.Ldloc>, autorisant l’accès à la variable locale à l’index 1.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3052">`ldloc.1` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 1.</span></span>  
  
 <span data-ttu-id="0ca49-3053">Le type de la valeur est le même que le type de la variable locale, qui est spécifiée dans l’en-tête de méthode.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3053">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="0ca49-3054">Les variables locales qui sont inférieures à 4 octets sont étendus au type `int32` lorsqu’elles sont chargées dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3054">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="0ca49-3055">Valeurs à virgule flottante sont étendues à leur taille native (type `F`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3055">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="0ca49-3056">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldloc.1` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3056">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.1` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3057">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3057">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3058">Charge la variable locale à l'index 2 dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3058">Loads the local variable at index 2 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3059">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3059">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3060">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3060">Format</span></span>|<span data-ttu-id="0ca49-3061">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3061">Assembly Format</span></span>|<span data-ttu-id="0ca49-3062">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3062">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3063">08</span><span class="sxs-lookup"><span data-stu-id="0ca49-3063">08</span></span>|<span data-ttu-id="0ca49-3064">ldloc.2</span><span class="sxs-lookup"><span data-stu-id="0ca49-3064">ldloc.2</span></span>|<span data-ttu-id="0ca49-3065">Charge la variable locale à l'index 2 dans la pile d'évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3065">Loads the local variable at index 2 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3066">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3066">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3067">La valeur de variable locale à l’index 2 est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3067">The local variable value at the index 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3068">`ldloc.2` est un encodage particulièrement efficace pour <xref:System.Reflection.Emit.OpCodes.Ldloc>, autorisant l’accès à la variable locale à l’index 2.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3068">`ldloc.2` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 2.</span></span>  
  
 <span data-ttu-id="0ca49-3069">Le type de la valeur est le même que le type de la variable locale, qui est spécifiée dans l’en-tête de méthode.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3069">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="0ca49-3070">Les variables locales qui sont inférieures à 4 octets sont étendus au type `int32` lorsqu’elles sont chargées dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3070">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="0ca49-3071">Valeurs à virgule flottante sont étendues à leur taille native (type `F`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3071">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="0ca49-3072">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldloc.2` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3072">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.2` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3073">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3073">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3074">Charge la variable locale à l'index 3 dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3074">Loads the local variable at index 3 onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3075">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3075">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3076">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3076">Format</span></span>|<span data-ttu-id="0ca49-3077">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3077">Assembly Format</span></span>|<span data-ttu-id="0ca49-3078">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3078">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3079">09</span><span class="sxs-lookup"><span data-stu-id="0ca49-3079">09</span></span>|<span data-ttu-id="0ca49-3080">ldloc.3</span><span class="sxs-lookup"><span data-stu-id="0ca49-3080">ldloc.3</span></span>|<span data-ttu-id="0ca49-3081">Charge la variable locale à l'index 3 dans la pile d'évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3081">Loads the local variable at index 3 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3082">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3082">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3083">La valeur de variable locale à l’index 3 est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3083">The local variable value at the index 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3084">`ldloc.3` est un encodage particulièrement efficace pour <xref:System.Reflection.Emit.OpCodes.Ldloc>, autorisant l’accès à la variable locale à l’index 3.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3084">`ldloc.3` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 3.</span></span>  
  
 <span data-ttu-id="0ca49-3085">Le type de la valeur est le même que le type de la variable locale, qui est spécifiée dans l’en-tête de méthode.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3085">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="0ca49-3086">Les variables locales qui sont inférieures à 4 octets sont étendus au type `int32` lorsqu’elles sont chargées dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3086">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="0ca49-3087">Valeurs à virgule flottante sont étendues à leur taille native (type `F`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3087">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="0ca49-3088">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldloc.3` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3088">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.3` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3089">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3089">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3090">Charge la variable locale à un index spécifique dans la pile d'évaluation (forme abrégée).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3090">Loads the local variable at a specific index onto the evaluation stack, short form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3091">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3091">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3092">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3092">Format</span></span>|<span data-ttu-id="0ca49-3093">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3093">Assembly Format</span></span>|<span data-ttu-id="0ca49-3094">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3094">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3095">11 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3095">11 < `unsigned int8` ></span></span>|<span data-ttu-id="0ca49-3096">ldloc.s `index`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3096">ldloc.s `index`</span></span>|<span data-ttu-id="0ca49-3097">Charge la variable locale à l’index `index` dans la pile, forme abrégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3097">Loads the local variable at index `index` onto stack, short form.</span></span>|  
  
 <span data-ttu-id="0ca49-3098">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3098">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3099">La valeur de variable locale à l’index spécifié est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3099">The local variable value at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3100">La `ldloc.s` instruction exécute un push le contenu de la variable locale à l’index passé dans la pile d’évaluation, où les variables locales sont numérotées à partir de 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3100">The `ldloc.s` instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards.</span></span> <span data-ttu-id="0ca49-3101">Variables locales sont initialisées à 0 avant d’entrer la méthode si l’indicateur d’initialisation sur la méthode a la valeur true.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3101">Local variables are initialized to 0 before entering the method if the initialize flag on the method is true.</span></span> <span data-ttu-id="0ca49-3102">Il existe 256 (2 ^ 8) variables locales possibles (0-255) sous la forme abrégée, qui est un encodage plus efficace que `ldloc`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3102">There are 256 (2^8) local variables possible (0-255) in the short form, which is a more efficient encoding than `ldloc`.</span></span>  
  
 <span data-ttu-id="0ca49-3103">Le type de la valeur est le même que le type de la variable locale, qui est spécifiée dans l’en-tête de méthode.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3103">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="0ca49-3104">Consultez Partition I. Local variables qui sont inférieures à 4 octets sont étendus au type `int32` lorsqu’elles sont chargées dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3104">See Partition I. Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="0ca49-3105">Valeurs à virgule flottante sont étendues à leur taille native (type `F`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3105">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="0ca49-3106">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> les surcharges de méthode peuvent utiliser le `ldloc.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3106">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldloc.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3107">ILGenerator.Emit (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3107">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="0ca49-3108">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3108">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloca : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3109">Charge l'adresse de la variable locale à un index spécifique dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3109">Loads the address of the local variable at a specific index onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3110">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3110">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3111">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3111">Format</span></span>|<span data-ttu-id="0ca49-3112">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3112">Assembly Format</span></span>|<span data-ttu-id="0ca49-3113">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3113">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3114">FE OD &LT; `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3114">FE OD < `unsigned int16` ></span></span>|<span data-ttu-id="0ca49-3115">ldloca `index`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3115">ldloca `index`</span></span>|<span data-ttu-id="0ca49-3116">Charge l’adresse de la variable locale à `index` dans la pile d’évaluation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3116">Loads the address of the local variable at `index` onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3117">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3117">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3118">L’adresse stockée dans la variable locale à l’index spécifié est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3118">The address stored in the local variable at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3119">Le `ldloca` push de l’adresse de la variable locale à l’index passé dans la pile, où les variables locales sont numérotées à partir de 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3119">The `ldloca` instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="0ca49-3120">La valeur ajoutée à la pile est déjà correctement alignée pour une utilisation avec des instructions telles que <xref:System.Reflection.Emit.OpCodes.Ldind_I> et <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3120">The value pushed on the stack is already aligned correctly for use with instructions like <xref:System.Reflection.Emit.OpCodes.Ldind_I> and <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span></span> <span data-ttu-id="0ca49-3121">Le résultat est un pointeur transitoire (type `*`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3121">The result is a transient pointer (type `*`).</span></span>  
  
 <span data-ttu-id="0ca49-3122">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldloca` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3122">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloca` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3123">ILGenerator.Emit (OpCode, short)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3123">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloca_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3124">Charge l'adresse de la variable locale à un index spécifique dans la pile d'évaluation (forme abrégée).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3124">Loads the address of the local variable at a specific index onto the evaluation stack, short form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3125">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3125">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3126">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3126">Format</span></span>|<span data-ttu-id="0ca49-3127">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3127">Assembly Format</span></span>|<span data-ttu-id="0ca49-3128">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3128">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3129">12 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3129">12 < `unsigned int8` ></span></span>|<span data-ttu-id="0ca49-3130">ldloca.s `index`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3130">ldloca.s `index`</span></span>|<span data-ttu-id="0ca49-3131">Charge l’adresse de la variable locale à `index` dans la pile d’évaluation, la forme abrégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3131">Loads the address of the local variable at `index` onto the evaluation stack, short form.</span></span>|  
  
 <span data-ttu-id="0ca49-3132">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3132">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3133">L’adresse stockée dans la variable locale à l’index spécifié est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3133">The address stored in the local variable at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3134">Le `ldloca.s` push de l’adresse de la variable locale à l’index passé dans la pile, où les variables locales sont numérotées à partir de 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3134">The `ldloca.s` instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="0ca49-3135">La valeur ajoutée à la pile est déjà correctement alignée pour une utilisation avec des instructions telles que <xref:System.Reflection.Emit.OpCodes.Ldind_I> et <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3135">The value pushed on the stack is already aligned correctly for use with instructions like <xref:System.Reflection.Emit.OpCodes.Ldind_I> and <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span></span> <span data-ttu-id="0ca49-3136">Le résultat est un pointeur transitoire (type `*`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3136">The result is a transient pointer (type `*`).</span></span>  
  
 <span data-ttu-id="0ca49-3137">La `ldloca.s` instruction fournit un codage efficace pour une utilisation avec les variables locales de 0 à 255.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3137">The `ldloca.s` instruction provides an efficient encoding for use with the local variables 0 through 255.</span></span>  
  
 <span data-ttu-id="0ca49-3138">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldloca.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3138">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloca.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3139">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3139">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldnull">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldnull;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldnull" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldnull As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldnull;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldnull : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3140">Exécute un push d'une référence null (type <see langword="O" />) dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3140">Pushes a null reference (type <see langword="O" />) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3141">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3141">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3142">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3142">Format</span></span>|<span data-ttu-id="0ca49-3143">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3143">Assembly Format</span></span>|<span data-ttu-id="0ca49-3144">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3144">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3145">14</span><span class="sxs-lookup"><span data-stu-id="0ca49-3145">14</span></span>|<span data-ttu-id="0ca49-3146">ldnull</span><span class="sxs-lookup"><span data-stu-id="0ca49-3146">ldnull</span></span>|<span data-ttu-id="0ca49-3147">transmettre une référence null dans la pile</span><span class="sxs-lookup"><span data-stu-id="0ca49-3147">push a null reference onto the stack</span></span>|  
  
 <span data-ttu-id="0ca49-3148">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3148">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3149">Une référence d’objet null est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3149">A null object reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3150">`ldnull` exécute un push d’une référence null (type `O`) sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3150">`ldnull` pushes a null reference (type `O`) on the stack.</span></span> <span data-ttu-id="0ca49-3151">Cela est utilisé pour initialiser les emplacements avant de les remplir avec des données, ou lorsqu’ils sont déconseillés.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3151">This is used to initialize locations before they are populated with data, or when they become deprecated.</span></span>  
  
 <span data-ttu-id="0ca49-3152">`ldnull` Fournit une référence null est indépendante de la taille.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3152">`ldnull` provides a null reference that is size-independent.</span></span>  
  
 <span data-ttu-id="0ca49-3153">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldnull` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3153">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldnull` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3154">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3154">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3155">Copie l'objet de type de valeur sur lequel pointe une adresse en haut de la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3155">Copies the value type object pointed to by an address to the top of the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3156">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3156">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3157">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3157">Format</span></span>|<span data-ttu-id="0ca49-3158">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3158">Assembly Format</span></span>|<span data-ttu-id="0ca49-3159">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3159">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3160">71 < `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3160">71 < `T` ></span></span>|<span data-ttu-id="0ca49-3161">ldobj `class`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3161">ldobj `class`</span></span>|<span data-ttu-id="0ca49-3162">Copie une instance du type de valeur `class` à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3162">Copy instance of value type `class` to the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3163">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3163">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3164">L’adresse d’un objet de type valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3164">The address of a value type object is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3165">L’adresse est dépilée et l’instance à l’adresse spécifique est recherchée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3165">The address is popped from the stack and the instance at that particular address is looked up.</span></span>  
  
3.  <span data-ttu-id="0ca49-3166">La valeur de l’objet stocké à cette adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3166">The value of the object stored at that address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3167">La `ldobj` instruction est utilisée pour passer un type valeur en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3167">The `ldobj` instruction is used to pass a value type as a parameter.</span></span>  
  
 <span data-ttu-id="0ca49-3168">Le `ldobj` instruction copie la valeur vers laquelle pointée `addrOfValObj` (de type `&`, `*`, ou `native int`) vers le haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3168">The `ldobj` instruction copies the value pointed to by `addrOfValObj` (of type `&`, `*`, or `native int`) to the top of the stack.</span></span> <span data-ttu-id="0ca49-3169">Le nombre d’octets copiés dépend de la taille de la classe (comme spécifié par le `class` paramètre).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3169">The number of bytes copied depends on the size of the class (as specified by the `class` parameter).</span></span> <span data-ttu-id="0ca49-3170">Le `class` paramètre est un jeton de métadonnées représentant le type de valeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3170">The `class` parameter is a metadata token representing the value type.</span></span>  
  
 <span data-ttu-id="0ca49-3171">L’opération de la `ldobj` instruction peut être modifiée par une instruction <xref:System.Reflection.Emit.OpCodes.Volatile> ou <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction de préfixe.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3171">The operation of the `ldobj` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="0ca49-3172"><xref:System.TypeLoadException> est levée si la classe est introuvable.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3172"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="0ca49-3173">Cela est généralement détectée lors de l’instruction de langage MSIL (Microsoft Intermediate Language) est convertie en code natif, plutôt que lors de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3173">This is typically detected when the Microsoft Intermediate Language (MSIL) instruction is converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="0ca49-3174">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldobj` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3174">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldobj` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3175">ILGenerator.Emit (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3175">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldsfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3176">Exécute un push de la valeur d’un champ static dans la pile d’évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3176">Pushes the value of a static field onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3177">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3177">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3178">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3178">Format</span></span>|<span data-ttu-id="0ca49-3179">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3179">Assembly Format</span></span>|<span data-ttu-id="0ca49-3180">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3180">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3181">7E &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3181">7E < `T` ></span></span>|<span data-ttu-id="0ca49-3182">ldsfld `field`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3182">ldsfld `field`</span></span>|<span data-ttu-id="0ca49-3183">Exécute un push de `field` sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3183">Push the value of `field` on the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3184">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3184">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3185">La valeur du champ spécifique est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3185">The value of the specific field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3186">La `ldsfld` instruction exécute un push de la valeur de statique (partagé entre toutes les instances d’une classe) champ sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3186">The `ldsfld` instruction pushes the value of a static (shared among all instances of a class) field on the stack.</span></span> <span data-ttu-id="0ca49-3187">Le type de retour est celui associé au jeton de métadonnées passé `field`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3187">The return type is that associated with the passed metadata token `field`.</span></span>  
  
 <span data-ttu-id="0ca49-3188">Le `ldsfld` instruction peut avoir un <xref:System.Reflection.Emit.OpCodes.Volatile> préfixe.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3188">The `ldsfld` instruction can have a <xref:System.Reflection.Emit.OpCodes.Volatile> prefix.</span></span>  
  
 <span data-ttu-id="0ca49-3189">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldsfld` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3189">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldsfld` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3190">ILGenerator.Emit (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3190">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsflda;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldsflda : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3191">Exécute un push de l’adresse d’un champ static dans la pile d’évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3191">Pushes the address of a static field onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3192">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3192">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3193">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3193">Format</span></span>|<span data-ttu-id="0ca49-3194">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3194">Assembly Format</span></span>|<span data-ttu-id="0ca49-3195">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3195">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3196">7F < `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3196">7F < `T` ></span></span>|<span data-ttu-id="0ca49-3197">ldsflda `field`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3197">ldsflda `field`</span></span>|<span data-ttu-id="0ca49-3198">Push de l’adresse de `field` sur la pile</span><span class="sxs-lookup"><span data-stu-id="0ca49-3198">Push the address of `field` on the stack</span></span>|  
  
 <span data-ttu-id="0ca49-3199">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3199">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3200">L’adresse d’un champ spécifique est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3200">The address of a specific field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3201">La `ldsflda` instruction exécute un push de l’adresse de statique (partagé entre toutes les instances d’une classe) champ sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3201">The `ldsflda` instruction pushes the address of a static (shared among all instances of a class) field on the stack.</span></span> <span data-ttu-id="0ca49-3202">L’adresse peut être représenté comme un pointeur transitoire (type `*`) si le jeton de métadonnées `field` fait référence à un type dont la mémoire est gérée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3202">The address may be represented as a transient pointer (type `*`) if the metadata token `field` refers to a type whose memory is managed.</span></span> <span data-ttu-id="0ca49-3203">Sinon, elle correspond à un pointeur non managé (type `native int`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3203">Otherwise, it corresponds to an unmanaged pointer (type `native int`).</span></span> <span data-ttu-id="0ca49-3204">Notez que `field` peut être de type statique global avec une adresse virtuelle relative assignée (l’offset du champ de l’adresse de base à laquelle le fichier PE conteneur est chargé en mémoire) où la mémoire n’est pas gérée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3204">Note that `field` may be a static global with an assigned relative virtual address (the offset of the field from the base address at which its containing PE file is loaded into memory) where the memory is unmanaged.</span></span>  
  
 <span data-ttu-id="0ca49-3205">Le `ldsflda` instruction peut avoir un <xref:System.Reflection.Emit.OpCodes.Volatile> préfixe.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3205">The `ldsflda` instruction can have a <xref:System.Reflection.Emit.OpCodes.Volatile> prefix.</span></span>  
  
 <span data-ttu-id="0ca49-3206"><xref:System.MissingFieldException> est levée si le champ est introuvable dans les métadonnées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3206"><xref:System.MissingFieldException> is thrown if field is not found in the metadata.</span></span> <span data-ttu-id="0ca49-3207">Cette option est généralement activée lorsque les instructions de langage MSIL (Microsoft Intermediate Language) sont converties en code natif, pas lors de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3207">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at runtime.</span></span>  
  
 <span data-ttu-id="0ca49-3208">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldsflda` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3208">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldsflda` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3209">ILGenerator.Emit (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3209">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldstr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldstr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldstr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldstr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldstr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldstr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3210">Exécute un push d'une nouvelle référence d'objet à un littéral de chaîne stocké dans les métadonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3210">Pushes a new object reference to a string literal stored in the metadata.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3211">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3211">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3212">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3212">Format</span></span>|<span data-ttu-id="0ca49-3213">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3213">Assembly Format</span></span>|<span data-ttu-id="0ca49-3214">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3214">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3215">72 < `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3215">72 < `T` ></span></span>|<span data-ttu-id="0ca49-3216">ldstr `mdToken`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3216">ldstr `mdToken`</span></span>|<span data-ttu-id="0ca49-3217">Exécute un push d’un objet de chaîne pour le jeton de chaîne de métadonnées `mdToken`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3217">Pushes a string object for the metadata string token `mdToken`.</span></span>|  
  
 <span data-ttu-id="0ca49-3218">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3218">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3219">Une référence d’objet en une chaîne est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3219">An object reference to a string is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3220">Le `ldstr` instruction exécute un push d’une référence d’objet (type `O`) vers un nouvel objet de chaîne qui représente le littéral de chaîne spécifique stocké dans les métadonnées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3220">The `ldstr` instruction pushes an object reference (type `O`) to a new string object representing the specific string literal stored in the metadata.</span></span> <span data-ttu-id="0ca49-3221">La `ldstr` instruction alloue la quantité de mémoire requise et exécute toute conversion de format nécessaire pour convertir le littéral de chaîne du format utilisé dans le fichier au format de chaîne requis lors de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3221">The `ldstr` instruction allocates the requisite amount of memory and performs any format conversion required to convert the string literal from the form used in the file to the string format required at runtime.</span></span>  
  
 <span data-ttu-id="0ca49-3222">Le Common Language Infrastructure (CLI) garantit que le résultat de deux `ldstr` instructions faisant référence à deux jetons de métadonnées ayant la même séquence de caractères retournent précisément le même objet chaîne (processus appelé « centralisation des chaînes »).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3222">The Common Language Infrastructure (CLI) guarantees that the result of two `ldstr` instructions referring to two metadata tokens that have the same sequence of characters return precisely the same string object (a process known as "string interning").</span></span>  
  
 <span data-ttu-id="0ca49-3223">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldstr` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3223">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldstr` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3224">ILGenerator.Emit (OpCode, chaîne)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3224">ILGenerator.Emit(OpCode, string)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldtoken">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldtoken;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldtoken" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldtoken As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldtoken;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldtoken : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3225">Convertit un jeton de métadonnées en sa représentation runtime et exécute un push de cette représentation dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3225">Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3226">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3226">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3227">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3227">Format</span></span>|<span data-ttu-id="0ca49-3228">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3228">Assembly Format</span></span>|<span data-ttu-id="0ca49-3229">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3229">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3230">D0 &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3230">D0 < `T` ></span></span>|<span data-ttu-id="0ca49-3231">ldtoken `token`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3231">ldtoken `token`</span></span>|<span data-ttu-id="0ca49-3232">Convertit un jeton de métadonnées en sa représentation sous forme de runtime.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3232">Converts a metadata token to its runtime representation.</span></span>|  
  
 <span data-ttu-id="0ca49-3233">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3233">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3234">Le jeton passé est converti en un `RuntimeHandle` et la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3234">The passed token is converted to a `RuntimeHandle` and pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3235">Le `ldtoken` instruction push un `RuntimeHandle` pour le jeton de métadonnées spécifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3235">The `ldtoken` instruction pushes a `RuntimeHandle` for the specified metadata token.</span></span> <span data-ttu-id="0ca49-3236">Un `RuntimeHandle` peut être un `fieldref/fielddef`, un `methodref/methoddef`, ou un `typeref/typedef`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3236">A `RuntimeHandle` can be a `fieldref/fielddef`, a `methodref/methoddef`, or a `typeref/typedef`.</span></span>  
  
 <span data-ttu-id="0ca49-3237">La valeur ajoutée à la pile peut être utilisée dans les appels à `Reflection` méthodes dans la bibliothèque de classes système.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3237">The value pushed on the stack can be used in calls to `Reflection` methods in the system class library.</span></span>  
  
 <span data-ttu-id="0ca49-3238">Pour plus d’informations sur les handles runtime, consultez les classes suivantes : <xref:System.RuntimeFieldHandle>, <xref:System.RuntimeTypeHandle>, et <xref:System.RuntimeMethodHandle>.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3238">For information on runtime handles, see the following classes: <xref:System.RuntimeFieldHandle>, <xref:System.RuntimeTypeHandle>, and <xref:System.RuntimeMethodHandle>.</span></span>  
  
 <span data-ttu-id="0ca49-3239">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> les surcharges de méthode peuvent utiliser le `ldtoken` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3239">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldtoken` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3240">ILGenerator.Emit (OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3240">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="0ca49-3241">ILGenerator.Emit (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3241">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
-   <span data-ttu-id="0ca49-3242">ILGenerator.Emit (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3242">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldvirtftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldvirtftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldvirtftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldvirtftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldvirtftn;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldvirtftn : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3243">Exécute un push d'un pointeur non managé (type <see langword="native int" />) sur le code natif implémentant une méthode virtuelle spécifique associée à un objet spécifié dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3243">Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3244">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3244">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3245">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3245">Format</span></span>|<span data-ttu-id="0ca49-3246">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3246">Assembly Format</span></span>|<span data-ttu-id="0ca49-3247">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3247">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3248">FE 07 &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3248">FE 07 < `T` ></span></span>|<span data-ttu-id="0ca49-3249">ldvirtftn `method`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3249">ldvirtftn `method`</span></span>|<span data-ttu-id="0ca49-3250">Exécute un push le pointeur à la méthode virtuelle d’un objet `method` sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3250">Pushes the pointer to an object's virtual method `method` on the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3251">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3251">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3252">Une référence d’objet est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3252">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3253">La référence d’objet est dépilée de la pile et l’adresse du point d’entrée à la méthode (comme spécifié par le jeton de métadonnées `method`) est recherché.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3253">The object reference is popped from the stack and the address of the entry point to the method (as specified by the metadata token `method`) is looked up.</span></span>  
  
3.  <span data-ttu-id="0ca49-3254">Le pointeur vers `method` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3254">The pointer to `method` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3255">Le pointeur non managé qui en résulte est envoyée à la pile par le `ldvirtftn` instruction peut être appelée à l’aide de la <xref:System.Reflection.Emit.OpCodes.Calli> instruction si elle fait référence à une méthode managée (ou un stub qui effectue la transition à partir de code non managé).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3255">The resulting unmanaged pointer pushed onto the stack by the `ldvirtftn` instruction can be called using the <xref:System.Reflection.Emit.OpCodes.Calli> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).</span></span>  
  
 <span data-ttu-id="0ca49-3256">Le pointeur non managé pointe vers le code natif à l’aide de la convention d’appel de CLR.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3256">The unmanaged pointer points to native code using the CLR calling convention.</span></span> <span data-ttu-id="0ca49-3257">Ce pointeur de la méthode ne doit pas être passé au code natif non managé comme une routine de rappel.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3257">This method pointer should not be passed to unmanaged native code as a callback routine.</span></span>  
  
 <span data-ttu-id="0ca49-3258">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ldvirtftn` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3258">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldvirtftn` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3259">ILGenerator.Emit (OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3259">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave;" />
      <MemberSignature Language="F#" Value=" staticval mutable Leave : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Leave" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3260">Quitte une région de code protégée, en transférant le contrôle à une instruction cible spécifique de manière non conditionnelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3260">Exits a protected region of code, unconditionally transferring control to a specific target instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3261">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3261">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3262">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3262">Format</span></span>|<span data-ttu-id="0ca49-3263">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3263">Assembly Format</span></span>|<span data-ttu-id="0ca49-3264">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3264">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3265">DD &LT; `int32` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3265">DD < `int32` ></span></span>|<span data-ttu-id="0ca49-3266">Laissez le champ `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3266">leave `target`</span></span>|<span data-ttu-id="0ca49-3267">Quitte une région de code protégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3267">Exits a protected region of code.</span></span>|  
  
 <span data-ttu-id="0ca49-3268">Il n’existe aucun comportement de transition de pile spécifié pour cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3268">There is no stack transition behavior specified for this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-3269">La `leave` instruction transfère sans condition le contrôle à l’instruction cible spécifique, représentée par un offset signé de 4 octets à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3269">The `leave` instruction unconditionally transfers control to the specific target instruction, represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-3270">Le `leave` instruction est identique à la `br` instruction, mais il peut être utilisé pour quitter une `try`, `filter`, ou `catch` bloquer tandis que les instructions de branche ordinaire peuvent uniquement être utilisées dans ce type de bloc pour transférer le contrôle Il.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3270">The `leave` instruction is similar to the `br` instruction, but it can be used to exit a `try`, `filter`, or `catch` block whereas the ordinary branch instructions can only be used in such a block to transfer control within it.</span></span> <span data-ttu-id="0ca49-3271">Le `leave` instruction vide la pile d’évaluation et garantit que l’approprié qui entoure `finally` blocs sont exécutés.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3271">The `leave` instruction empties the evaluation stack and ensures that the appropriate surrounding `finally` blocks are executed.</span></span>  
  
 <span data-ttu-id="0ca49-3272">Vous ne pouvez pas utiliser un `leave` instruction pour quitter un `finally` bloc.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3272">You cannot use a `leave` instruction to exit a `finally` block.</span></span> <span data-ttu-id="0ca49-3273">Pour faciliter la génération de code pour les gestionnaires d’exception qu’il est valide à partir d’un bloc catch à utiliser un `leave` instruction pour transférer le contrôle à une instruction dans associé `try` bloc.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3273">To ease code generation for exception handlers it is valid from within a catch block to use a `leave` instruction to transfer control to any instruction within the associated `try` block.</span></span>  
  
 <span data-ttu-id="0ca49-3274">Si une instruction contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré vers le premier de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3274">If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="0ca49-3275">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> les surcharges de méthode peuvent utiliser le `leave` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3275">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `leave` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3276">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3276">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Leave_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3277">Quitte une région de code protégée, en transférant le contrôle à une instruction cible (forme abrégée) de manière non conditionnelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3277">Exits a protected region of code, unconditionally transferring control to a target instruction (short form).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3278">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3278">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3279">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3279">Format</span></span>|<span data-ttu-id="0ca49-3280">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3280">Assembly Format</span></span>|<span data-ttu-id="0ca49-3281">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3281">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3282">ALLEMAGNE &LT; `int8` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3282">DE < `int8` ></span></span>|<span data-ttu-id="0ca49-3283">leave.s `target`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3283">leave.s `target`</span></span>|<span data-ttu-id="0ca49-3284">Quitte une région protégée du code, forme abrégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3284">Exit a protected region of code, short form.</span></span>|  
  
 <span data-ttu-id="0ca49-3285">Il n’existe aucun comportement de transition de pile spécifié pour cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3285">There is no stack transition behavior specified for this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-3286">La `leave.s` instruction transfère sans condition le contrôle à l’instruction cible passée, représentée par un offset signé de 1 octet à partir du début de l’instruction suivant l’instruction actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3286">The `leave.s` instruction unconditionally transfers control to the passed target instruction, represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="0ca49-3287">Le `leave.s` instruction est identique à la `br` instruction, mais il peut être utilisé pour quitter une `try`, `filter`, ou `catch` bloquer tandis que les instructions de branche ordinaire peuvent uniquement être utilisées dans ce type de bloc pour transférer le contrôle Il.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3287">The `leave.s` instruction is similar to the `br` instruction, but it can be used to exit a `try`, `filter`, or `catch` block whereas the ordinary branch instructions can only be used in such a block to transfer control within it.</span></span> <span data-ttu-id="0ca49-3288">Le `leave.s` instruction vide la pile d’évaluation et garantit que l’approprié qui entoure `finally` blocs sont exécutés.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3288">The `leave.s` instruction empties the evaluation stack and ensures that the appropriate surrounding `finally` blocks are executed.</span></span>  
  
 <span data-ttu-id="0ca49-3289">Vous ne pouvez pas utiliser un `leave.s` instruction pour quitter un `finally` bloc.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3289">You cannot use a `leave.s` instruction to exit a `finally` block.</span></span> <span data-ttu-id="0ca49-3290">Pour faciliter la génération de code pour les gestionnaires d’exception qu’il est valide à partir d’un bloc catch à utiliser un `leave.s` instruction pour transférer le contrôle à une instruction dans associé `try` bloc.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3290">To ease code generation for exception handlers it is valid from within a catch block to use a `leave.s` instruction to transfer control to any instruction within the associated `try` block.</span></span>  
  
 <span data-ttu-id="0ca49-3291">Si une instruction contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré vers le premier de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3291">If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="0ca49-3292">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `leave.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3292">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `leave.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3293">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3293">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Localloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Localloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Localloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Localloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Localloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Localloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Localloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Localloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3294">Alloue un certain nombre d'octets à partir du pool de mémoires dynamique local et exécute un push de l'adresse (pointeur transitoire, type <see langword="*" />) du premier octet alloué dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3294">Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type <see langword="*" />) of the first allocated byte onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3295">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3295">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3296">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3296">Format</span></span>|<span data-ttu-id="0ca49-3297">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3297">Assembly Format</span></span>|<span data-ttu-id="0ca49-3298">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3298">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3299">FE 0F</span><span class="sxs-lookup"><span data-stu-id="0ca49-3299">FE 0F</span></span>|<span data-ttu-id="0ca49-3300">localloc</span><span class="sxs-lookup"><span data-stu-id="0ca49-3300">localloc</span></span>|<span data-ttu-id="0ca49-3301">Allouer de l’espace à partir du tas local.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3301">Allocate space from the local heap.</span></span>|  
  
 <span data-ttu-id="0ca49-3302">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3302">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3303">Le nombre d’octets à allouer est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3303">The number of bytes to be allocated is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3304">Le nombre d’octets est retirée de la pile ; une quantité de mémoire correspondant à la taille est allouée à partir du tas local.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3304">The number of bytes is popped from the stack; an amount of memory corresponding to the size is allocated from the local heap.</span></span>  
  
3.  <span data-ttu-id="0ca49-3305">Un pointeur vers le premier octet de la mémoire allouée est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3305">A pointer to the first byte of the allocated memory is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3306">Le `localloc` alloue de l’instruction `size` (type `natural unsigned int`) octets à partir de la mémoire dynamique locale du pool et retourne l’adresse (pointeur transitoire, type `*`) du premier octet alloué.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3306">The `localloc` instruction allocates `size` (type `natural unsigned int`) bytes from the local dynamic memory pool and returns the address (a transient pointer, type `*`) of the first allocated byte.</span></span> <span data-ttu-id="0ca49-3307">Le bloc de mémoire retourné est initialisé à 0 uniquement si l’indicateur d’initialisation sur la méthode est `true`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3307">The block of memory returned is initialized to 0 only if the initialize flag on the method is `true`.</span></span> <span data-ttu-id="0ca49-3308">Lorsque la méthode actuelle exécute un <xref:System.Reflection.Emit.OpCodes.Ret>, le pool de mémoire local devient disponible pour une réutilisation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3308">When the current method executes a <xref:System.Reflection.Emit.OpCodes.Ret>, the local memory pool is made available for reuse.</span></span>  
  
 <span data-ttu-id="0ca49-3309">L’adresse obtenue est alignée afin que n’importe quel type de données primitif puisse y être stocké à l’aide de la `stind` instructions (comme <xref:System.Reflection.Emit.OpCodes.Stind_I4>) et chargé à l’aide la `ldind` instructions (comme <xref:System.Reflection.Emit.OpCodes.Ldind_I4>).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3309">The resulting address is aligned so that any primitive data type can be stored there using the `stind` instructions (such as <xref:System.Reflection.Emit.OpCodes.Stind_I4>) and loaded using the `ldind` instructions (such as <xref:System.Reflection.Emit.OpCodes.Ldind_I4>).</span></span>  
  
 <span data-ttu-id="0ca49-3310">Le `localloc` instruction ne peut pas se produire dans un `filter`, `catch`, `finally`, ou `fault` bloc.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3310">The `localloc` instruction cannot occur within a `filter`, `catch`, `finally`, or `fault` block.</span></span>  
  
 <span data-ttu-id="0ca49-3311"><xref:System.StackOverflowException> est levée si la mémoire est insuffisante pour traiter la demande.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3311"><xref:System.StackOverflowException> is thrown if there is insufficient memory to service the request.</span></span>  
  
 <span data-ttu-id="0ca49-3312">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `localloc` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3312">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `localloc` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3313">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3313">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mkrefany">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mkrefany;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mkrefany" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mkrefany As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mkrefany;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mkrefany : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3314">Exécute un push d'une référence typée à une instance d'un type spécifique dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3314">Pushes a typed reference to an instance of a specific type onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3315">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3315">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3316">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3316">Format</span></span>|<span data-ttu-id="0ca49-3317">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3317">Assembly Format</span></span>|<span data-ttu-id="0ca49-3318">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3318">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3319">C6 < `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3319">C6 < `T` ></span></span>|<span data-ttu-id="0ca49-3320">mkrefany `class`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3320">mkrefany `class`</span></span>|<span data-ttu-id="0ca49-3321">Exécute un push d’une référence typée de type `class` dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3321">Pushes a typed reference of type `class` onto the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3322">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3322">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3323">Un pointeur vers l’élément de données est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3323">A pointer to piece of data is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3324">Le pointeur est dépilé et converti en une référence typée de type `class`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3324">The pointer is popped and converted to a typed reference of type `class`.</span></span>  
  
3.  <span data-ttu-id="0ca49-3325">La référence typée est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3325">The typed reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3326">La `mkrefany` instruction prend en charge le passage de références typées dynamiquement.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3326">The `mkrefany` instruction supports the passing of dynamically typed references.</span></span> <span data-ttu-id="0ca49-3327">Le pointeur doit être de type `&`, `*`, ou `native int`et contenir l’adresse valide d’un élément de données.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3327">The pointer must be of type `&`, `*`, or `native int`, and hold the valid address of a piece of data.</span></span> <span data-ttu-id="0ca49-3328">`Class` est-ce que le jeton de classe décrivant le type des données référencées par le pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3328">`Class` is the class token describing the type of the data referenced by the pointer.</span></span> <span data-ttu-id="0ca49-3329">`Mkrefany` exécute un push d’une référence typée dans la pile, en fournissant un descripteur opaque du pointeur et le type `class`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3329">`Mkrefany` pushes a typed reference on the stack, providing an opaque descriptor of the pointer and the type `class`.</span></span>  
  
 <span data-ttu-id="0ca49-3330">L’opération valide uniquement autorisée sur une référence typée consiste à passer à une méthode qui requiert une référence typée en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3330">The only valid operation permitted upon a typed reference is to pass it to a method that requires a typed reference as a parameter.</span></span> <span data-ttu-id="0ca49-3331">L’appelé peut ensuite utiliser le <xref:System.Reflection.Emit.OpCodes.Refanytype> et <xref:System.Reflection.Emit.OpCodes.Refanyval> des instructions pour récupérer respectivement le type (classe) et l’adresse.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3331">The callee can then use the <xref:System.Reflection.Emit.OpCodes.Refanytype> and <xref:System.Reflection.Emit.OpCodes.Refanyval> instructions to retrieve the type (class) and the address respectively.</span></span>  
  
 <span data-ttu-id="0ca49-3332"><xref:System.TypeLoadException> est levée si `class` est introuvable.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3332"><xref:System.TypeLoadException> is thrown if `class` cannot be found.</span></span> <span data-ttu-id="0ca49-3333">Cela est généralement détecté lorsque les instructions de langage MSIL (Microsoft Intermediate Language) sont converties en code natif, plutôt que lors de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3333">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="0ca49-3334">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `mkrefany` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3334">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mkrefany` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3335">ILGenerator.Emit (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3335">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3336">Multiplie deux valeurs et exécute un push du résultat dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3336">Multiplies two values and pushes the result on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3337">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3337">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3338">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3338">Format</span></span>|<span data-ttu-id="0ca49-3339">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3339">Assembly Format</span></span>|<span data-ttu-id="0ca49-3340">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3340">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3341">5 A</span><span class="sxs-lookup"><span data-stu-id="0ca49-3341">5A</span></span>|<span data-ttu-id="0ca49-3342">mul</span><span class="sxs-lookup"><span data-stu-id="0ca49-3342">mul</span></span>|<span data-ttu-id="0ca49-3343">Multiplie deux valeurs sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3343">Multiplies two values on the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3344">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3344">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3345">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3345">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3346">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3346">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-3347">`value2` et `value1` sont dépilés de la pile ; `value1` est multipliée par `value2`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3347">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`.</span></span>  
  
4.  <span data-ttu-id="0ca49-3348">Le résultat est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3348">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3349">Le `mul` instruction multiplie `value1` par `value2` et pousse le résultat sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3349">The `mul` instruction multiplies `value1` by `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="0ca49-3350">Opérations sur les entiers tronquent en silence les bits de poids fort de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3350">Integer operations silently truncate the upper bits on overflow.</span></span>  
  
 <span data-ttu-id="0ca49-3351">Consultez <xref:System.Reflection.Emit.OpCodes.Mul_Ovf> pour un entier spécifique multiplier opération avec gestion de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3351">See <xref:System.Reflection.Emit.OpCodes.Mul_Ovf> for an integer-specific multiply operation with overflow handling.</span></span>  
  
 <span data-ttu-id="0ca49-3352">Pour les types à virgule flottante, 0 \* infini = NaN.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3352">For floating-point types, 0 \* infinity = NaN.</span></span>  
  
 <span data-ttu-id="0ca49-3353">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `mul` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3353">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3354">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3354">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3355">Multiplie deux valeurs entières, effectue un contrôle de dépassement de capacité et exécute un push du résultat dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3355">Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3356">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3356">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3357">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3357">Format</span></span>|<span data-ttu-id="0ca49-3358">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3358">Assembly Format</span></span>|<span data-ttu-id="0ca49-3359">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3359">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3360">D8</span><span class="sxs-lookup"><span data-stu-id="0ca49-3360">D8</span></span>|<span data-ttu-id="0ca49-3361">mul.ovf</span><span class="sxs-lookup"><span data-stu-id="0ca49-3361">mul.ovf</span></span>|<span data-ttu-id="0ca49-3362">Multiplie deux valeurs entières sur la pile avec une vérification de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3362">Multiplies two integer values on the stack with an overflow check.</span></span>|  
  
 <span data-ttu-id="0ca49-3363">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3363">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3364">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3364">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3365">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3365">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-3366">`value2` et `value1` sont dépilés de la pile ; `value1` est multipliée par `value2`, avec une vérification de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3366">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`, with an overflow check.</span></span>  
  
4.  <span data-ttu-id="0ca49-3367">Le résultat est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3367">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3368">Le `mul.ovf` instruction multiplie entier `value1` par entier `value2` et pousse le résultat sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3368">The `mul.ovf` instruction multiplies integer `value1` by integer `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="0ca49-3369">Une exception est levée si le résultat ne tient pas dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3369">An exception is thrown if the result will not fit in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-3370"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3370"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-3371">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `mul.ovf` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3371">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3372">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3372">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3373">Multiplie deux valeurs entières non signées, effectue un contrôle de dépassement de capacité et exécute un push du résultat dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3373">Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3374">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3374">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3375">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3375">Format</span></span>|<span data-ttu-id="0ca49-3376">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3376">Assembly Format</span></span>|<span data-ttu-id="0ca49-3377">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3377">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3378">D9</span><span class="sxs-lookup"><span data-stu-id="0ca49-3378">D9</span></span>|<span data-ttu-id="0ca49-3379">mul.ovf.un</span><span class="sxs-lookup"><span data-stu-id="0ca49-3379">mul.ovf.un</span></span>|<span data-ttu-id="0ca49-3380">Multiplie deux valeurs non signées sur la pile avec une vérification de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3380">Multiplies two unsigned values on the stack with an overflow check.</span></span>|  
  
 <span data-ttu-id="0ca49-3381">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3381">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3382">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3382">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3383">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3383">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-3384">`value2` et `value1` sont dépilés de la pile ; `value1` est multipliée par `value2`, avec une vérification de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3384">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`, with an overflow check.</span></span>  
  
4.  <span data-ttu-id="0ca49-3385">Le résultat est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3385">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3386">Le `mul.ovf.un` instruction multiplie l’entier non signé `value1` en entier non signé `value2` et pousse le résultat sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3386">The `mul.ovf.un` instruction multiplies unsigned integer `value1` by unsigned integer `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="0ca49-3387">Une exception est levée si le résultat ne tient pas dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3387">An exception is thrown if the result will not fit in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-3388"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3388"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-3389">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `mul.ovf.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3389">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3390">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3390">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Neg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Neg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Neg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Neg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Neg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Neg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Neg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Neg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3391">Met en négatif une valeur et exécute un push du résultat dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3391">Negates a value and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3392">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3392">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3393">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3393">Format</span></span>|<span data-ttu-id="0ca49-3394">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3394">Assembly Format</span></span>|<span data-ttu-id="0ca49-3395">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3395">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3396">65</span><span class="sxs-lookup"><span data-stu-id="0ca49-3396">65</span></span>|<span data-ttu-id="0ca49-3397">neg</span><span class="sxs-lookup"><span data-stu-id="0ca49-3397">neg</span></span>|<span data-ttu-id="0ca49-3398">Inverse la valeur actuellement située en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3398">Negates the value currently on top of the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3399">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3399">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3400">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3400">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3401">Une valeur est dépilée et négatif.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3401">A value is popped from the stack and negated.</span></span>  
  
3.  <span data-ttu-id="0ca49-3402">Le résultat est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3402">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3403">La `neg` instruction rend négative la valeur et exécute un push du résultat en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3403">The `neg` instruction negates value and pushes the result on top of the stack.</span></span> <span data-ttu-id="0ca49-3404">Le type de retour est le même type que l’opérande.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3404">The return type is the same as the operand type.</span></span>  
  
 <span data-ttu-id="0ca49-3405">La négation de valeurs intégrales est standard du complément à deux négation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3405">Negation of integral values is standard two's complement negation.</span></span> <span data-ttu-id="0ca49-3406">En particulier, annulant ainsi le plus grand nombre négatif (qui n’a pas un équivalent positif) produit le plus grand nombre négatif.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3406">In particular, negating the most negative number (which does not have a positive counterpart) yields the most negative number.</span></span> <span data-ttu-id="0ca49-3407">Pour détecter ce dépassement de capacité, utilisez la <xref:System.Reflection.Emit.OpCodes.Sub_Ovf> instruction à la place (autrement dit, la soustraction de 0).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3407">To detect this overflow use the <xref:System.Reflection.Emit.OpCodes.Sub_Ovf> instruction instead (that is, subtract from 0).</span></span>  
  
 <span data-ttu-id="0ca49-3408">La négation d’un nombre à virgule flottante ne peut pas dépassement de capacité et la négation NaN retourne NaN.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3408">Negating a floating-point number cannot overflow, and negating NaN returns NaN.</span></span>  
  
 <span data-ttu-id="0ca49-3409">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `neg` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3409">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `neg` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3410">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3410">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newarr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newarr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newarr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newarr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newarr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newarr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Newarr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Newarr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3411">Exécute un push dans la pile d'évaluation sur une référence d'objet à un nouveau tableau unidimensionnel de base zéro dont les éléments sont d'un type spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3411">Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3412">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3412">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3413">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3413">Format</span></span>|<span data-ttu-id="0ca49-3414">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3414">Assembly Format</span></span>|<span data-ttu-id="0ca49-3415">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3415">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3416">8D &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3416">8D < `T` ></span></span>|<span data-ttu-id="0ca49-3417">newarr `etype`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3417">newarr `etype`</span></span>|<span data-ttu-id="0ca49-3418">Crée un nouveau tableau avec des éléments de type `etype`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3418">Creates a new array with elements of type `etype`.</span></span>|  
  
 <span data-ttu-id="0ca49-3419">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3419">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3420">Le nombre d’éléments dans le tableau est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3420">The number of elements in the array is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3421">Le nombre d’éléments est retirée de la pile et le tableau est créé.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3421">The number of elements is popped from the stack and the array is created.</span></span>  
  
3.  <span data-ttu-id="0ca49-3422">Une référence d’objet au nouveau groupe est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3422">An object reference to the new array is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3423">Le `newarr` instruction exécute un push d’une référence d’objet (type `O`) vers un nouveau tableau unidimensionnel de base zéro dont les éléments sont de type `etype` (un jeton de métadonnées décrivant le type).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3423">The `newarr` instruction pushes an object reference (type `O`) to a new zero-based, one-dimensional array whose elements are of type `etype` (a metadata token describing the type).</span></span> <span data-ttu-id="0ca49-3424">Le nombre d’éléments dans le nouveau tableau doit être spécifié comme un `native int`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3424">The number of elements in the new array should be specified as a `native int`.</span></span> <span data-ttu-id="0ca49-3425">Plage d’index de tableau valide compris entre zéro et le nombre maximal d’éléments moins 1.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3425">Valid array indexes range from zero to the maximum number of elements minus one.</span></span>  
  
 <span data-ttu-id="0ca49-3426">Les éléments d’un tableau peuvent être n’importe quel type, y compris les types de valeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3426">The elements of an array can be any type, including value types.</span></span>  
  
 <span data-ttu-id="0ca49-3427">Tableaux unidimensionnels de base zéro de nombres sont créés à l’aide d’un jeton de métadonnées référencent le type de valeur appropriée (<xref:System.Int32>, et ainsi de suite).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3427">Zero-based, one-dimensional arrays of numbers are created using a metadata token referencing the appropriate value type (<xref:System.Int32>, and so on).</span></span> <span data-ttu-id="0ca49-3428">Éléments du tableau sont initialisés à 0 du type approprié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3428">Elements of the array are initialized to 0 of the appropriate type.</span></span>  
  
 <span data-ttu-id="0ca49-3429">Tableaux unidimensionnels de base et les tableaux multidimensionnels sont créés à l’aide de <xref:System.Reflection.Emit.OpCodes.Newobj> plutôt que `newarr`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3429">Nonzero-based one-dimensional arrays and multidimensional arrays are created using <xref:System.Reflection.Emit.OpCodes.Newobj> rather than `newarr`.</span></span> <span data-ttu-id="0ca49-3430">En général, ils sont créés à l’aide des méthodes de la <xref:System.Array> classe dans le .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3430">More commonly, they are created using the methods of the <xref:System.Array> class in the .NET Framework.</span></span>  
  
 <span data-ttu-id="0ca49-3431"><xref:System.OutOfMemoryException> est levée si la mémoire est insuffisante pour satisfaire la requête.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3431"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="0ca49-3432"><xref:System.OverflowException> est levée si `numElems` est inférieur à 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3432"><xref:System.OverflowException> is thrown if `numElems` is less than 0.</span></span>  
  
 <span data-ttu-id="0ca49-3433">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `newarr` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3433">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `newarr` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3434">ILGenerator.Emit (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3434">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Newobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Newobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3435">Crée un nouvel objet ou une nouvelle instance d'un type valeur, en exécutant un push d'une référence d'objet (type <see langword="O" />) dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3435">Creates a new object or a new instance of a value type, pushing an object reference (type <see langword="O" />) onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3436">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3436">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3437">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3437">Format</span></span>|<span data-ttu-id="0ca49-3438">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3438">Assembly Format</span></span>|<span data-ttu-id="0ca49-3439">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3439">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3440">73 < `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3440">73 < `T` ></span></span>|<span data-ttu-id="0ca49-3441">newobj `ctor`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3441">newobj `ctor`</span></span>|<span data-ttu-id="0ca49-3442">Alloue un type valeur ou un objet non initialisé et appelle la méthode de constructeur `ctor`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3442">Allocates an uninitialized object or value type and calls the constructor method `ctor`.</span></span>|  
  
 <span data-ttu-id="0ca49-3443">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3443">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3444">Arguments `arg1` via `argn` sont envoyées sur la pile dans la séquence.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3444">Arguments `arg1` through `argn` are pushed on the stack in sequence.</span></span>  
  
2.  <span data-ttu-id="0ca49-3445">Arguments `argn` via `arg1` sont dépilés et passés à `ctor` pour la création d’objets.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3445">Arguments `argn` through `arg1` are popped from the stack and passed to `ctor` for object creation.</span></span>  
  
3.  <span data-ttu-id="0ca49-3446">Une référence au nouvel objet est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3446">A reference to the new object is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3447">La `newobj` instruction crée un nouvel objet ou une nouvelle instance d’un type valeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3447">The `newobj` instruction creates a new object or a new instance of a value type.</span></span> <span data-ttu-id="0ca49-3448">`Ctor` est un jeton de métadonnées (un `methodref` ou `methoddef` qui doit être marquée en tant que constructeur) qui indique le nom, la classe et la signature du constructeur à appeler.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3448">`Ctor` is a metadata token (a `methodref` or `methoddef` that must be marked as a constructor) that indicates the name, class and signature of the constructor to call.</span></span>  
  
 <span data-ttu-id="0ca49-3449">Le `newobj` instruction alloue une nouvelle instance de la classe associée `ctor` et initialise tous les champs dans la nouvelle instance de la valeur 0 (du type approprié) ou les références null comme il convient.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3449">The `newobj` instruction allocates a new instance of the class associated with `ctor` and initializes all the fields in the new instance to 0 (of the proper type) or null references as appropriate.</span></span> <span data-ttu-id="0ca49-3450">Il appelle ensuite le constructeur `ctor` avec les arguments donnés, ainsi que l’instance nouvellement créée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3450">It then calls the constructor `ctor` with the given arguments along with the newly created instance.</span></span> <span data-ttu-id="0ca49-3451">Une fois que le constructeur a été appelé, le présent initialisée référence d’objet (type `O`) est ajoutée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3451">After the constructor has been called, the now initialized object reference (type `O`) is pushed on the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3452">À partir du point de vue constructeur, l’objet non initialisé est l’argument 0 et les autres arguments passés à newobj suivent dans l’ordre.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3452">From the constructor's point of view, the uninitialized object is argument 0 and the other arguments passed to newobj follow in order.</span></span>  
  
 <span data-ttu-id="0ca49-3453">Tous les tableaux unidimensionnels de base zéro sont créés à l’aide de <xref:System.Reflection.Emit.OpCodes.Newarr>, et non `newobj`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3453">All zero-based, one-dimensional arrays are created using <xref:System.Reflection.Emit.OpCodes.Newarr>, not `newobj`.</span></span> <span data-ttu-id="0ca49-3454">En revanche, tous les autres tableaux (multidimensionnels ou unidimensionnels mais pas de base zéro) sont créés à l’aide de `newobj`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3454">On the other hand, all other arrays (more than one dimension, or one-dimensional but not zero-based) are created using `newobj`.</span></span>  
  
 <span data-ttu-id="0ca49-3455">Les types valeur ne sont pas généralement créés à l’aide de `newobj`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3455">Value types are not usually created using `newobj`.</span></span> <span data-ttu-id="0ca49-3456">Ils sont généralement alloués en tant qu’arguments ou variables locales, à l’aide de `newarr` (pour les tableaux unidimensionnels de base zéro) ou en tant que champs d’objets.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3456">They are usually allocated either as arguments or local variables, using `newarr` (for zero-based, one-dimensional arrays), or as fields of objects.</span></span> <span data-ttu-id="0ca49-3457">Une fois allouée, ils sont initialisés à l’aide de <xref:System.Reflection.Emit.OpCodes.Initobj>.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3457">Once allocated, they are initialized using <xref:System.Reflection.Emit.OpCodes.Initobj>.</span></span> <span data-ttu-id="0ca49-3458">Toutefois, la `newobj` instruction peut être utilisée pour créer une nouvelle instance d’un type valeur dans la pile, ce qui peut ensuite être transmise en tant qu’argument, stocké dans une variable locale et ainsi de suite.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3458">However, the `newobj` instruction can be used to create a new instance of a value type on the stack, that can then be passed as an argument, stored in a local, and so on.</span></span>  
  
 <span data-ttu-id="0ca49-3459"><xref:System.OutOfMemoryException> est levée si la mémoire est insuffisante pour satisfaire la requête.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3459"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="0ca49-3460"><xref:System.MissingMethodException> est levée si une méthode de constructeur `ctor` portant le nom indiqué, classe et la signature est introuvable.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3460"><xref:System.MissingMethodException> is thrown if a constructor method `ctor` with the indicated name, class and signature could not be found.</span></span> <span data-ttu-id="0ca49-3461">Cela est généralement détecté lorsque les instructions de langage MSIL (Microsoft Intermediate Language) sont converties en code natif, plutôt que lors de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3461">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="0ca49-3462">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `newobj` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3462">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `newobj` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3463">ILGenerator.Emit (OpCode, ConstructorInfo)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3463">ILGenerator.Emit(OpCode, ConstructorInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Nop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Nop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Nop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Nop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Nop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Nop;" />
      <MemberSignature Language="F#" Value=" staticval mutable Nop : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Nop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3464">Remplit l’espace si les opcodes sont corrigés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3464">Fills space if opcodes are patched.</span>
          </span>
          <span data-ttu-id="0ca49-3465">Aucune opération significative n'est exécutée bien qu'un cycle de traitement puisse être utilisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3465">No meaningful operation is performed although a processing cycle can be consumed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3466">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3466">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3467">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3467">Format</span></span>|<span data-ttu-id="0ca49-3468">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3468">Assembly Format</span></span>|<span data-ttu-id="0ca49-3469">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3469">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3470">00</span><span class="sxs-lookup"><span data-stu-id="0ca49-3470">00</span></span>|<span data-ttu-id="0ca49-3471">nop</span><span class="sxs-lookup"><span data-stu-id="0ca49-3471">nop</span></span>|<span data-ttu-id="0ca49-3472">Effectue une opération sans comportement.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3472">Performs an operation without behavior.</span></span>|  
  
 <span data-ttu-id="0ca49-3473">Il n’existe aucun comportement de transition de pile défini pour cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3473">There is no stack transitional behavior defined for this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-3474">Le `nop` opération ne fait rien.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3474">The `nop` operation does nothing.</span></span> <span data-ttu-id="0ca49-3475">Il est destiné à remplir l’espace si les opcodes sont corrigés.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3475">It is intended to fill in space if opcodes are patched.</span></span>  
  
 <span data-ttu-id="0ca49-3476">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `nop` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3476">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `nop` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3477">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3477">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Not;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Not" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Not" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Not As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Not;" />
      <MemberSignature Language="F#" Value=" staticval mutable Not : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Not" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3478">Calcule le complément de bits de la valeur entière située en haut de la pile et exécute un push du résultat dans la pile d'évaluation en tant que type identique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3478">Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3479">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3479">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3480">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3480">Format</span></span>|<span data-ttu-id="0ca49-3481">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3481">Assembly Format</span></span>|<span data-ttu-id="0ca49-3482">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3482">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3483">66</span><span class="sxs-lookup"><span data-stu-id="0ca49-3483">66</span></span>|<span data-ttu-id="0ca49-3484">not</span><span class="sxs-lookup"><span data-stu-id="0ca49-3484">not</span></span>|<span data-ttu-id="0ca49-3485">Calcule le complément de bits d’une valeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3485">Computes the bitwise complement of a value.</span></span>|  
  
 <span data-ttu-id="0ca49-3486">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3486">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3487">`value` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3487">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3488">`value` est dépilée de la pile et sa au niveau du bit complément calculée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3488">`value` is popped from the stack and its bitwise complement computed.</span></span>  
  
3.  <span data-ttu-id="0ca49-3489">Le résultat est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3489">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3490">La `not` instruction le complément de bits d’une valeur entière et exécute un push du résultat dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3490">The `not` instruction computes the bitwise complement of an integer value and pushes the result onto the stack.</span></span> <span data-ttu-id="0ca49-3491">Le type de retour est le même type que l’opérande.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3491">The return type is the same as the operand type.</span></span>  
  
 <span data-ttu-id="0ca49-3492">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `not` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3492">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `not` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3493">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3493">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Or;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Or" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Or" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Or As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Or;" />
      <MemberSignature Language="F#" Value=" staticval mutable Or : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Or" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3494">Calcule le complément de bits de deux valeurs entières situées en haut de la pile et exécute un push du résultat dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3494">Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3495">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3495">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3496">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3496">Format</span></span>|<span data-ttu-id="0ca49-3497">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3497">Assembly Format</span></span>|<span data-ttu-id="0ca49-3498">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3498">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3499">60</span><span class="sxs-lookup"><span data-stu-id="0ca49-3499">60</span></span>|<span data-ttu-id="0ca49-3500">ou</span><span class="sxs-lookup"><span data-stu-id="0ca49-3500">or</span></span>|<span data-ttu-id="0ca49-3501">Calcule l’opérateur de bits ou de deux valeurs entières, retourne un entier.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3501">Computes the bitwise OR of two integer values, returns an integer.</span></span>|  
  
 <span data-ttu-id="0ca49-3502">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3502">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3503">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3503">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3504">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3504">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-3505">`value2` et `value1` sont dépilés à partir de la pile et leur opération de bits OR calculée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3505">`value2` and `value1` are popped from the stack and their bitwise OR computed.</span></span>  
  
4.  <span data-ttu-id="0ca49-3506">Le résultat est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3506">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3507">La `or` instruction calcule l’opération OR au niveau du bit des deux premières valeurs de la pile, en exécutant un push du résultat dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3507">The `or` instruction computes the bitwise OR of two values atop the stack, pushing the result onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3508">`Or` est une opération spécifique aux entiers.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3508">`Or` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="0ca49-3509">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `or` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3509">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `or` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3510">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3510">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Pop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Pop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Pop;" />
      <MemberSignature Language="F#" Value=" staticval mutable Pop : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Pop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3511">Supprime la valeur actuellement située en haut de la pile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3511">Removes the value currently on top of the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3512">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3512">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3513">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3513">Format</span></span>|<span data-ttu-id="0ca49-3514">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3514">Assembly Format</span></span>|<span data-ttu-id="0ca49-3515">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3515">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3516">26</span><span class="sxs-lookup"><span data-stu-id="0ca49-3516">26</span></span>|<span data-ttu-id="0ca49-3517">pop</span><span class="sxs-lookup"><span data-stu-id="0ca49-3517">pop</span></span>|<span data-ttu-id="0ca49-3518">Dépile la valeur de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3518">Pops the top value from the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3519">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3519">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3520">La valeur supérieure est retirée de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3520">The top value is popped from the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3521">La `pop` instruction supprime l’élément supérieur de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3521">The `pop` instruction removes the top element from the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3522">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `pop` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3522">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `pop` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3523">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3523">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3524">Cette instruction est réservée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3524">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3525">Cette instruction est réservée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3525">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3526">Cette instruction est réservée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3526">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3527">Cette instruction est réservée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3527">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix5;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix5 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3528">Cette instruction est réservée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3528">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix6;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix6 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3529">Cette instruction est réservée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3529">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix7;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix7 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3530">Cette instruction est réservée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3530">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefixref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefixref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefixref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefixref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefixref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefixref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3531">Cette instruction est réservée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3531">This is a reserved instruction.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Readonly">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Readonly;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Readonly" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Readonly" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Readonly As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Readonly;" />
      <MemberSignature Language="F#" Value=" staticval mutable Readonly : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Readonly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3532">Spécifie que l'opération d'adresse de tableau suivante n'exécute aucun contrôle de type au moment de l'exécution et qu'il retourne un pointeur managé dont la mutabilité est restreinte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3532">Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3533">Le tableau suivant répertorie les instructions format hexadécimal et Microsoft intermediate language (MSIL) assembly, ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3533">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3534">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3534">Format</span></span>|<span data-ttu-id="0ca49-3535">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3535">Assembly Format</span></span>|<span data-ttu-id="0ca49-3536">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3536">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3537">FE 1E</span><span class="sxs-lookup"><span data-stu-id="0ca49-3537">FE 1E</span></span>|<span data-ttu-id="0ca49-3538">en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3538">readonly.</span></span>|<span data-ttu-id="0ca49-3539">Spécifier que l’opération d’adresse de tableau suivante n’exécute aucun contrôle de type au moment de l’exécution, et qu’il retourne un pointeur managé avec la mutabilité est restreinte.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3539">Specify that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer with restricted mutability.</span></span>|  
  
 <span data-ttu-id="0ca49-3540">Ce préfixe ne peut apparaître qu’immédiatement précédent le `ldelema` instruction et les appels à spéciale `Address` (méthode) sur les tableaux.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3540">This prefix can only appear immediately preceding the `ldelema` instruction and calls to the special `Address` method on arrays.</span></span> <span data-ttu-id="0ca49-3541">Son effet sur l’opération suivante est double :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3541">Its effect on the subsequent operation is twofold:</span></span>  
  
1.  <span data-ttu-id="0ca49-3542">Au moment de l’exécution, aucune opération de vérification de type n’est effectuée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3542">At run time, no type check operation is performed.</span></span> <span data-ttu-id="0ca49-3543">Notez qu’il existe normalement une vérification de type implicite pour les `ldelema` et `stelem` instructions lorsqu’il est utilisé sur la référence des tableaux de types.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3543">Note that there is normally an implicit type check for the `ldelema` and `stelem` instructions when used on reference type arrays.</span></span> <span data-ttu-id="0ca49-3544">Il n’est jamais une vérification de type au moment de l’exécution pour les classes de valeur, par conséquent, `readonly` est une absence d’opération dans ce cas.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3544">There is never a run-time type check for value classes, so `readonly` is a no-op in that case.</span></span>  
  
2.  <span data-ttu-id="0ca49-3545">Le vérificateur traite le résultat de l’opération d’adresse comme un pointeur managé avec la mutabilité est restreinte.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3545">The verifier treats the result of the address-of operation as a managed pointer with restricted mutability.</span></span>  
  
 <span data-ttu-id="0ca49-3546">Le pointeur est dite mutabilité est restreinte, car le type de définition contrôle si la valeur peut être MUTÉE.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3546">The pointer is said to have restricted mutability because the defining type controls whether the value can be mutated.</span></span> <span data-ttu-id="0ca49-3547">Pour les classes de valeur qui n’exposent aucun champ public ou les méthodes qui mettent à jour la valeur en place, le pointeur est en lecture seule (par conséquent, le nom du préfixe).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3547">For value classes that expose no public fields or methods that update the value in place, the pointer is read-only (hence the name of the prefix).</span></span> <span data-ttu-id="0ca49-3548">En particulier, les classes qui représentent des types primitifs (par exemple, System.Int32) n’exposent pas les mutateurs et sont donc en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3548">In particular, the classes representing primitive types (for example, System.Int32) do not expose mutators and thus are read-only.</span></span>  
  
 <span data-ttu-id="0ca49-3549">Un pointeur managé restreint de cette manière peut être utilisé uniquement dans des manières suivantes :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3549">A managed pointer restricted in this fashion can be used only in the following ways:</span></span>  
  
-   <span data-ttu-id="0ca49-3550">Comme le `object` paramètre pour le `ldfld`, `ldflda`, `stfld`, `call`, ou`constrained callvirt` obtenir des instructions.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3550">As the `object` parameter for the `ldfld`, `ldflda`, `stfld`, `call`, or`constrained callvirt` instructions.</span></span>  
  
-   <span data-ttu-id="0ca49-3551">Comme le `pointer` paramètre à la `ldobj` instruction ou à un de la `ldind` obtenir des instructions.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3551">As the `pointer` parameter to the `ldobj` instruction or to one of the `ldind` instructions.</span></span>  
  
-   <span data-ttu-id="0ca49-3552">Comme le `source` paramètre à la `cpobj` instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3552">As the `source` parameter to the `cpobj` instruction.</span></span>  
  
 <span data-ttu-id="0ca49-3553">Toutes les autres opérations interdites, notamment le `stobj`, `initobj`, ou `mkrefany` operations ou l’un de la `stind` obtenir des instructions.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3553">All other operations disallowed, including the `stobj`, `initobj`, or `mkrefany` operations, or any of the `stind` instructions.</span></span>  
  
 <span data-ttu-id="0ca49-3554">L’objectif de la `readonly` préfixe est d’éviter une vérification de type lors de l’extraction d’un élément à partir d’un tableau dans le code générique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3554">The purpose of the `readonly` prefix is to avoid a type check when fetching an element from an array in generic code.</span></span> <span data-ttu-id="0ca49-3555">Par exemple, l’expression `arr[i].m()`, où le type d’élément du tableau `arr` est un type générique qui a été contraint à posséder une interface avec la méthode `m`, peut compiler dans le code MSIL suivant.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3555">For example, the expression `arr[i].m()`, where the element type of the array `arr` is a generic type that has been constrained to have an interface with method `m`, might compile to the following MSIL.</span></span>  
  
```  
ldloc arr  
ldloc i  
readonly.  
ldelema !0    // Loads the pointer to the object.  
…             // Load the arguments to the call.  
constrained. !0  
callvirt m  
```  
  
 <span data-ttu-id="0ca49-3556">Sans le `readonly` préfixe, la `ldelema` instruction effectue une vérification de type dans le cas où ! 0 a un type référence.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3556">Without the `readonly` prefix, the `ldelema` instruction would perform a type check in the case where !0 was a reference type.</span></span> <span data-ttu-id="0ca49-3557">Non seulement cette vérification de type inefficace, mais il est sémantiquement incorrect.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3557">Not only is this type check inefficient, but it is semantically incorrect.</span></span> <span data-ttu-id="0ca49-3558">La vérification des types pour `ldelema` est une correspondance exacte qui est trop forte.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3558">The type check for `ldelema` is an exact match, which is too strong.</span></span> <span data-ttu-id="0ca49-3559">Si le tableau contenait des sous-classes de type ! 0, le code ci-dessus échoue la vérification de type.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3559">If the array held subclasses of type !0, the code above would fail the type check.</span></span>  
  
 <span data-ttu-id="0ca49-3560">L’adresse de l’élément de tableau est extraite, au lieu de l’élément lui-même, afin de disposer d’un handle pour `arr[i]` que fonctionne pour les deux types valeur et types référence et peut donc être passé à la `constrained callvirt` instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3560">The address of the array element is fetched, instead of the element itself, in order to have a handle for `arr[i]` that works for both value types and reference types, and thus can be passed to the `constrained callvirt` instruction.</span></span>  
  
 <span data-ttu-id="0ca49-3561">En général, il serait risqué d’ignorer la vérification de l’exécution si le tableau contient des éléments d’un type référence.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3561">In general it would be unsafe to skip the run-time check if the array held elements of a reference type.</span></span> <span data-ttu-id="0ca49-3562">Pour plus de sécurité, il est nécessaire pour s’assurer qu’aucune modification du tableau n’est effectuées via ce pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3562">To be safe, it is necessary to ensure that no modifications to the array are made through this pointer.</span></span> <span data-ttu-id="0ca49-3563">Les règles de vérificateur Vérifiez cela.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3563">The verifier rules ensure this.</span></span> <span data-ttu-id="0ca49-3564">Le pointeur managé restreint peut être passé en tant que l’objet d’appels de méthode d’instance, par conséquent, il n’est pas à proprement parler en lecture seule pour les types valeur, mais aucun problème de sécurité de type pour les types valeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3564">The restricted managed pointer can be passed as the object of instance method calls, so it is not strictly speaking read-only for value types, but there is no type safety problem for value types.</span></span>  
  
 <span data-ttu-id="0ca49-3565">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `readonly` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3565">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `readonly` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3566">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3566">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanytype">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanytype;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanytype" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanytype As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanytype;" />
      <MemberSignature Language="F#" Value=" staticval mutable Refanytype : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3567">Récupère le jeton de type incorporé dans une référence typée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3567">Retrieves the type token embedded in a typed reference.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3568">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3568">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3569">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3569">Format</span></span>|<span data-ttu-id="0ca49-3570">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3570">Assembly Format</span></span>|<span data-ttu-id="0ca49-3571">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3571">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3572">FE 1D</span><span class="sxs-lookup"><span data-stu-id="0ca49-3572">FE 1D</span></span>|<span data-ttu-id="0ca49-3573">refanytype</span><span class="sxs-lookup"><span data-stu-id="0ca49-3573">refanytype</span></span>|<span data-ttu-id="0ca49-3574">Exécute un push du jeton de type stocké dans une référence typée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3574">Pushes the type token stored in a typed reference.</span></span>|  
  
 <span data-ttu-id="0ca49-3575">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3575">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3576">Une référence de type valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3576">A value type reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3577">La référence typée est dépilée et le type de jeton correspondant est récupéré.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3577">The typed reference is popped from the stack and its corresponding type token retrieved.</span></span>  
  
3.  <span data-ttu-id="0ca49-3578">Le jeton du type est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3578">The type token is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3579">Une référence typée contient un jeton de type et une adresse à une instance d’objet.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3579">A typed reference contains a type token and an address to an object instance.</span></span>  
  
 <span data-ttu-id="0ca49-3580">La `refanytype` instruction récupère le jeton de type incorporé dans la référence typée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3580">The `refanytype` instruction retrieves the type token embedded in the typed reference.</span></span> <span data-ttu-id="0ca49-3581">Consultez le <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction pour plus d’informations sur la création de références typées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3581">See the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction for information on creating typed references.</span></span>  
  
 <span data-ttu-id="0ca49-3582">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `refanytype` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3582">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `refanytype` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3583">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3583">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanyval">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanyval;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanyval" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanyval As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanyval;" />
      <MemberSignature Language="F#" Value=" staticval mutable Refanyval : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3584">Récupère l'adresse (type <see langword="&amp;" />) incorporée dans une référence typée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3584">Retrieves the address (type <see langword="&amp;" />) embedded in a typed reference.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3585">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3585">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3586">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3586">Format</span></span>|<span data-ttu-id="0ca49-3587">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3587">Assembly Format</span></span>|<span data-ttu-id="0ca49-3588">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3588">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3589">C2 < `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3589">C2 < `T` ></span></span>|<span data-ttu-id="0ca49-3590">refanyval `type`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3590">refanyval `type`</span></span>|<span data-ttu-id="0ca49-3591">Exécute un push de l’adresse stockée dans une référence typée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3591">Pushes the address stored in a typed reference.</span></span>|  
  
 <span data-ttu-id="0ca49-3592">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3592">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3593">Une référence de type valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3593">A value type reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3594">La référence typée est dépilée et l’adresse correspondante est récupérée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3594">The typed reference is popped from the stack and the corresponding address retrieved.</span></span>  
  
3.  <span data-ttu-id="0ca49-3595">L’adresse est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3595">The address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3596">Une référence typée contient un jeton de type et une adresse à une instance d’objet.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3596">A typed reference contains a type token and an address to an object instance.</span></span>  
  
 <span data-ttu-id="0ca49-3597">La `refanyval` instruction récupère l’adresse incorporée dans la référence typée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3597">The `refanyval` instruction retrieves the address embedded in the a typed reference.</span></span> <span data-ttu-id="0ca49-3598">Le type incorporé dans la référence typée fournie dans la pile doit correspondre au type spécifié par `type` (jeton de métadonnées, soit un `typedef` ou `typeref`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3598">The type embedded in the typed reference supplied on the stack must match the type specified by `type` (a metadata token, either a `typedef` or a `typeref`).</span></span> <span data-ttu-id="0ca49-3599">Consultez le <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction concernant le contenu.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3599">See the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction for related content.</span></span>  
  
 <span data-ttu-id="0ca49-3600"><xref:System.InvalidCastException> est levée si `type` n’est pas identique au type stocké dans la référence de type (dans ce cas, `type` est la classe fournie à la <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction construit ladite référence typée).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3600"><xref:System.InvalidCastException> is thrown if `type` is not identical to the type stored in the type reference (in this case, `type` is the class supplied to the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction that constructed said typed reference).</span></span>  
  
 <span data-ttu-id="0ca49-3601"><xref:System.TypeLoadException> est levée si `type` est introuvable.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3601"><xref:System.TypeLoadException> is thrown if `type` cannot be found.</span></span>  
  
 <span data-ttu-id="0ca49-3602">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `refanyval` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3602">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `refanyval` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3603">ILGenerator.Emit (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3603">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3604">Divise une valeur par une autre et exécute un push du reste dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3604">Divides two values and pushes the remainder onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3605">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3605">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3606">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3606">Format</span></span>|<span data-ttu-id="0ca49-3607">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3607">Assembly Format</span></span>|<span data-ttu-id="0ca49-3608">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3608">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3609">5D</span><span class="sxs-lookup"><span data-stu-id="0ca49-3609">5D</span></span>|<span data-ttu-id="0ca49-3610">REM</span><span class="sxs-lookup"><span data-stu-id="0ca49-3610">rem</span></span>|<span data-ttu-id="0ca49-3611">Exécute un push du reste de la division `value1` par `value2` dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3611">Pushes the remainder of dividing `value1` by `value2` onto the stack.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="0ca49-3612">ReplaceThisText</span><span class="sxs-lookup"><span data-stu-id="0ca49-3612">ReplaceThisText</span></span>  
  
 <span data-ttu-id="0ca49-3613">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3613">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3614">Un `value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3614">A `value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3615">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3615">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-3616">`value2` et `value1` sont dépilés à partir de la pile et le reste de `value1` `div` `value2` calculée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3616">`value2` and `value1` are popped from the stack and the remainder of `value1` `div` `value2` computed.</span></span>  
  
4.  <span data-ttu-id="0ca49-3617">Le résultat est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3617">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3618">`result` = `value1` `rem` `value2` satisfait les conditions suivantes :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3618">`result` = `value1` `rem` `value2` satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="0ca49-3619">`result` = `value1` - `value2` `×` (`value1` `div` `value2`), et :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3619">`result` = `value1` - `value2` `×` (`value1` `div` `value2`), and:</span></span>  
  
 <span data-ttu-id="0ca49-3620">0 = &#124; `result` &#124; < &#124; `value2` &#124;, signe (`result`) = connexion (`value1`), où `div` est l’instruction de division qui tronque vers zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3620">0 = &#124; `result` &#124; < &#124; `value2` &#124;, sign(`result`) = sign(`value1`), where `div` is the division instruction that truncates towards zero.</span></span>  
  
 <span data-ttu-id="0ca49-3621">Si `value2` est égal à zéro ou `value1` est infini, le résultat est NaN.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3621">If `value2` is zero or `value1` is infinity the result is NaN.</span></span> <span data-ttu-id="0ca49-3622">Si `value2` est l’infini, le résultat est `value1` (exclue pour `-infinity`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3622">If `value2` is infinity, the result is `value1` (negated for `-infinity`).</span></span>  
  
 <span data-ttu-id="0ca49-3623">Opérations intégrales lever <xref:System.DivideByZeroException> si `value2` est égal à zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3623">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="0ca49-3624">Notez que sur les plateformes Intel un <xref:System.OverflowException> est levée lors du calcul (minint `rem` -1).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3624">Note that on the Intel-based platforms an <xref:System.OverflowException> is thrown when computing (minint `rem` -1).</span></span>  
  
 <span data-ttu-id="0ca49-3625">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `rem` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3625">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rem` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3626">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3626">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rem_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3627">Divise une valeur non signée par une autre et exécute un push du reste dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3627">Divides two unsigned values and pushes the remainder onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3628">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3628">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3629">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3629">Format</span></span>|<span data-ttu-id="0ca49-3630">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3630">Assembly Format</span></span>|<span data-ttu-id="0ca49-3631">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3631">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3632">5E</span><span class="sxs-lookup"><span data-stu-id="0ca49-3632">5E</span></span>|<span data-ttu-id="0ca49-3633">rem.un</span><span class="sxs-lookup"><span data-stu-id="0ca49-3633">rem.un</span></span>|<span data-ttu-id="0ca49-3634">Exécute un push du reste de la division non signé `value1` par non signé `value2` dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3634">Pushes the remainder of dividing unsigned `value1` by unsigned `value2` onto the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3635">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3635">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3636">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3636">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3637">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3637">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-3638">`value2` et `value1` sont dépilés à partir de la pile et le reste de `value1` `div` `value2` calculée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3638">`value2` and `value1` are popped from the stack and the remainder of `value1` `div` `value2` computed.</span></span>  
  
4.  <span data-ttu-id="0ca49-3639">Le résultat est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3639">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3640">`result` = `value1` `rem.un` `value2` satisfait les conditions suivantes :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3640">`result` = `value1` `rem.un` `value2` satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="0ca49-3641">`result` = `value1` - `value2` x (`value1` `div.un` `value2`), et :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3641">`result` = `value1` - `value2` x(`value1` `div.un` `value2`), and:</span></span>  
  
 <span data-ttu-id="0ca49-3642">0 = `result`  <  `value2`, où `div.un` est l’instruction de division non signée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3642">0 = `result` < `value2`, where `div.un` is the unsigned division instruction.</span></span>  
  
 <span data-ttu-id="0ca49-3643">Le `rem.un` instruction calcule `result` et qu’il exécute un push sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3643">The `rem.un` instruction computes `result` and pushes it on the stack.</span></span> <span data-ttu-id="0ca49-3644">`Rem.un` traite ses arguments comme des entiers non signés, tandis que <xref:System.Reflection.Emit.OpCodes.Rem> les traite comme des entiers signés.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3644">`Rem.un` treats its arguments as unsigned integers, while <xref:System.Reflection.Emit.OpCodes.Rem> treats them as signed integers.</span></span>  
  
 <span data-ttu-id="0ca49-3645">`Rem.un` n’est pas spécifié pour les nombres à virgule flottante.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3645">`Rem.un` is unspecified for floating-point numbers.</span></span>  
  
 <span data-ttu-id="0ca49-3646">Opérations intégrales lever <xref:System.DivideByZeroException> si `value2` est égal à zéro.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3646">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="0ca49-3647">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `rem.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3647">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rem.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3648">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3648">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ret">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ret;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ret" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ret" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ret As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ret;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ret : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ret" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3649">Effectue un retour à partir de la méthode actuelle en exécutant un push d'une valeur de retour (si elle existe) à partir de la pile d'évaluation de l'appelé dans celle de l'appelant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3649">Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3650">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3650">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3651">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3651">Format</span></span>|<span data-ttu-id="0ca49-3652">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3652">Assembly Format</span></span>|<span data-ttu-id="0ca49-3653">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3653">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3654">2 A</span><span class="sxs-lookup"><span data-stu-id="0ca49-3654">2A</span></span>|<span data-ttu-id="0ca49-3655">RET</span><span class="sxs-lookup"><span data-stu-id="0ca49-3655">ret</span></span>|<span data-ttu-id="0ca49-3656">Renvoie, à partir de la méthode, éventuellement retournant une valeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3656">Returns from method, possibly returning a value.</span></span>|  
  
 <span data-ttu-id="0ca49-3657">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3657">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3658">La valeur de retour est dépilée de la pile d’évaluation appelé.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3658">The return value is popped from the callee evaluation stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3659">La valeur de retour obtenue à l’étape 1 est placée sur la pile d’évaluation de l’appelant.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3659">The return value obtained in step 1 is pushed onto the caller evaluation stack.</span></span>  
  
 <span data-ttu-id="0ca49-3660">Si la valeur de retour n’est pas présente sur la pile d’évaluation appelé, aucune valeur n’est retournée (aucun comportement de transition de pile pour la méthode appelant ou appelé).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3660">If the return value is not present on the callee evaluation stack, no value is returned (no stack transition behaviors for either the callee or caller method).</span></span>  
  
 <span data-ttu-id="0ca49-3661">Le type de la valeur de retour, le cas échéant, de la méthode actuelle détermine le type de valeur à extraire à partir du haut de la pile et à copier dans la pile de la méthode qui a appelé la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3661">The type of the return value, if any, of the current method determines the type of value to be fetched from the top of the stack and copied onto the stack of the method that called the current method.</span></span> <span data-ttu-id="0ca49-3662">La pile d’évaluation de la méthode actuelle doit être vide sauf pour la valeur à retourner.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3662">The evaluation stack for the current method must be empty except for the value to be returned.</span></span>  
  
 <span data-ttu-id="0ca49-3663">Le `ret` ne peut pas être utilisée pour transférer le contrôle d’un`try`, `filter`, `catch`, ou `finally` bloc.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3663">The `ret` instruction cannot be used to transfer control out of a`try`, `filter`, `catch`, or `finally` block.</span></span> <span data-ttu-id="0ca49-3664">Depuis un `try` ou `catch`, utiliser le <xref:System.Reflection.Emit.OpCodes.Leave> instruction avec une destination d’un `ret` instruction située en dehors d’englobant tous les blocs d’exception.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3664">From within a `try` or `catch`, use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction with a destination of a `ret` instruction that is outside all enclosing exception blocks.</span></span> <span data-ttu-id="0ca49-3665">Étant donné que le `filter` et `finally` blocs font logiquement partie de la gestion des exceptions et pas la méthode dans laquelle leur code est incorporé, les instructions de langage MSIL (Microsoft Intermediate Language) générées correctement n’effectuent pas un retour à partir de la méthode un `filter` ou `finally`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3665">Because the `filter` and `finally` blocks are logically part of exception handling and not the method in which their code is embedded, correctly generated Microsoft Intermediate Language (MSIL) instructions do not perform a method return from within a `filter` or `finally`.</span></span>  
  
 <span data-ttu-id="0ca49-3666">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `ret` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3666">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ret` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3667">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3667">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rethrow;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rethrow" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rethrow As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rethrow;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rethrow : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3668">Lève de nouveau l'exception actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3668">Rethrows the current exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3669">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3669">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3670">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3670">Format</span></span>|<span data-ttu-id="0ca49-3671">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3671">Assembly Format</span></span>|<span data-ttu-id="0ca49-3672">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3672">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3673">1 A FE</span><span class="sxs-lookup"><span data-stu-id="0ca49-3673">FE 1A</span></span>|<span data-ttu-id="0ca49-3674">rethrow</span><span class="sxs-lookup"><span data-stu-id="0ca49-3674">rethrow</span></span>|<span data-ttu-id="0ca49-3675">Lève à nouveau l’exception actuelle</span><span class="sxs-lookup"><span data-stu-id="0ca49-3675">Rethrows the current exception</span></span>|  
  
 <span data-ttu-id="0ca49-3676">Aucun comportement de transition de pile n’est défini pour cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3676">No stack transition behavior is defined for this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-3677">Le `rethrow` instruction n’est autorisée dans le corps d’un `catch` gestionnaire.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3677">The `rethrow` instruction is only permitted within the body of a `catch` handler.</span></span> <span data-ttu-id="0ca49-3678">Elle lève la même exception qui a été interceptée par ce gestionnaire.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3678">It throws the same exception that was caught by this handler.</span></span>  
  
 <span data-ttu-id="0ca49-3679">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `rethrow` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3679">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rethrow` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3680">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3680">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shl">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shl;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shl As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shl;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shl : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3681">Déplace une valeur entière vers la gauche (décalage des zéros) d'un nombre de bits spécifié, en exécutant un push du résultat dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3681">Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3682">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3682">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3683">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3683">Format</span></span>|<span data-ttu-id="0ca49-3684">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3684">Assembly Format</span></span>|<span data-ttu-id="0ca49-3685">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3685">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3686">62</span><span class="sxs-lookup"><span data-stu-id="0ca49-3686">62</span></span>|<span data-ttu-id="0ca49-3687">shl</span><span class="sxs-lookup"><span data-stu-id="0ca49-3687">shl</span></span>|<span data-ttu-id="0ca49-3688">Déplace un entier vers la gauche (décalage des zéros).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3688">Shifts an integer to the left (shifting in zeros).</span></span>|  
  
 <span data-ttu-id="0ca49-3689">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3689">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3690">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3690">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3691">La quantité de bits à décaler est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3691">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-3692">Le nombre de bits à décaler et la valeur sont dépilés de la pile ; la valeur est déplacée vers la gauche du nombre spécifié de bits.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3692">The number of bits to be shifted and the value are popped from the stack; the value is shifted left by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="0ca49-3693">Le résultat est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3693">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3694">Le `shl` instruction décale la valeur (type `int32`, `int64` ou `native int`) gauche du nombre spécifié de bits.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3694">The `shl` instruction shifts the value (type `int32`, `int64` or `native int`) left by the specified number of bits.</span></span> <span data-ttu-id="0ca49-3695">Le nombre de bits est une valeur de type `int32` ou `native int`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3695">The number of bits is a value of type `int32` or `native int`.</span></span> <span data-ttu-id="0ca49-3696">La valeur de retour n’est pas spécifiée si le nombre de bits de décalage est supérieur ou égal à la largeur (en bits) de la valeur fournie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3696">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="0ca49-3697">`Shl` Insère un bit zéro dans la position la plus basse sur chaque décalage.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3697">`Shl` inserts a zero bit in the lowest position on each shift.</span></span>  
  
 <span data-ttu-id="0ca49-3698">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `shl` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3698">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shl` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3699">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3699">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3700">Déplace une valeur entière (dans le signe) vers la droite d'un nombre de bits spécifié, en exécutant un push du résultat dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3700">Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3701">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3701">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3702">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3702">Format</span></span>|<span data-ttu-id="0ca49-3703">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3703">Assembly Format</span></span>|<span data-ttu-id="0ca49-3704">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3704">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3705">63</span><span class="sxs-lookup"><span data-stu-id="0ca49-3705">63</span></span>|<span data-ttu-id="0ca49-3706">shr</span><span class="sxs-lookup"><span data-stu-id="0ca49-3706">shr</span></span>|<span data-ttu-id="0ca49-3707">Déplace un entier vers la droite (décalage des connexion).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3707">Shifts an integer to the right (shifting in sign).</span></span>|  
  
 <span data-ttu-id="0ca49-3708">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3708">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3709">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3709">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3710">La quantité de bits à décaler est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3710">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-3711">Le nombre de bits à décaler et la valeur sont dépilés de la pile ; la valeur est décalée vers la droite du nombre de bits spécifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3711">The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="0ca49-3712">Le résultat est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3712">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3713">Le `shr.un` instruction décale la valeur (type `int32`, `int64` ou `native int`) directement par le nombre de bits spécifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3713">The `shr.un` instruction shifts the value (type `int32`, `int64` or `native int`) right by the specified number of bits.</span></span> <span data-ttu-id="0ca49-3714">Le nombre de bits est une valeur de type `int32` ou `native int`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3714">The number of bits is a value of type `int32` or `native int`.</span></span> <span data-ttu-id="0ca49-3715">La valeur de retour n’est pas spécifiée si le nombre de bits de décalage est supérieur ou égal à la largeur (en bits) de la valeur fournie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3715">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="0ca49-3716">`Shr` réplique l’ordre élevé bit sur chaque décalage, en conservant le signe de la valeur d’origine dans le `result`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3716">`Shr` replicates the high order bit on each shift, preserving the sign of the original value in the `result`.</span></span>  
  
 <span data-ttu-id="0ca49-3717">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `shr` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3717">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shr` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3718">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3718">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shr_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3719">Déplace une valeur entière non signée (décalage des zéros) vers la droite d'un nombre de bits spécifié, en exécutant un push du résultat dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3719">Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3720">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3720">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3721">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3721">Format</span></span>|<span data-ttu-id="0ca49-3722">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3722">Assembly Format</span></span>|<span data-ttu-id="0ca49-3723">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3723">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3724">64</span><span class="sxs-lookup"><span data-stu-id="0ca49-3724">64</span></span>|<span data-ttu-id="0ca49-3725">shr.un</span><span class="sxs-lookup"><span data-stu-id="0ca49-3725">shr.un</span></span>|<span data-ttu-id="0ca49-3726">Déplace un entier vers la droite (décalage des zéros).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3726">Shifts an integer to the right (shifting in zeroes).</span></span>|  
  
 <span data-ttu-id="0ca49-3727">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3727">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3728">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3728">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3729">La quantité de bits à décaler est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3729">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-3730">Le nombre de bits à décaler et la valeur sont dépilés de la pile ; la valeur est décalée vers la droite du nombre de bits spécifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3730">The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="0ca49-3731">Le résultat est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3731">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3732">Le `shr.un` instruction décale la valeur (type `int32`, `int64` ou `native int`) directement par le nombre de bits spécifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3732">The `shr.un` instruction shifts the value (type `int32`, `int64` or `native int`) right by the specified number of bits.</span></span> <span data-ttu-id="0ca49-3733">Le nombre de bits est une valeur de type `int32`, `int64` ou `native int`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3733">The number of bits is a value of type `int32`, `int64` or `native int`.</span></span> <span data-ttu-id="0ca49-3734">La valeur de retour n’est pas spécifiée si le nombre de bits de décalage est supérieur ou égal à la largeur (en bits) de la valeur fournie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3734">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="0ca49-3735">`Shr.un` Insère un bit zéro dans la position la plus élevée sur chaque décalage.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3735">`Shr.un` inserts a zero bit in the highest position on each shift.</span></span>  
  
 <span data-ttu-id="0ca49-3736">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `shr.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3736">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shr.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3737">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3737">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sizeof">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sizeof;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sizeof" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sizeof As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sizeof;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sizeof : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3738">Exécute un push de la taille (en octets) d'un type de valeur fourni dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3738">Pushes the size, in bytes, of a supplied value type onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3739">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3739">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3740">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3740">Format</span></span>|<span data-ttu-id="0ca49-3741">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3741">Assembly Format</span></span>|<span data-ttu-id="0ca49-3742">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3742">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3743">FE 1C &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3743">FE 1C < `T` ></span></span>|<span data-ttu-id="0ca49-3744">sizeof `valType`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3744">sizeof `valType`</span></span>|<span data-ttu-id="0ca49-3745">Push de la taille, en octets, d’un type valeur comme un `unsigned int32`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3745">Push the size, in bytes, of a value type as an `unsigned int32`.</span></span>|  
  
 <span data-ttu-id="0ca49-3746">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3746">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3747">La taille (en octets) du type de valeur fourni (`valType`) est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3747">The size (in bytes) of the supplied value type (`valType`) is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3748">`valType` doit être un jeton de métadonnées (un `typeref` ou `typedef`) qui spécifie un type valeur, un type référence ou un paramètre de type générique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3748">`valType` must be a metadata token (a `typeref` or `typedef`) that specifies a value type, reference type, or generic type parameter.</span></span>  
  
 <span data-ttu-id="0ca49-3749">Pour un type référence, la taille retournée est la taille d’une valeur de référence correspondante tapez (4 octets sur les systèmes 32 bits), pas la taille des données stockées dans les objets référencés par la valeur de référence.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3749">For a reference type, the size returned is the size of a reference value of the corresponding type (4 bytes on 32-bit systems), not the size of the data stored in objects referred to by the reference value.</span></span> <span data-ttu-id="0ca49-3750">Un paramètre de type générique peut être utilisé uniquement dans le corps du type ou de méthode qui le définit.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3750">A generic type parameter can be used only in the body of the type or method that defines it.</span></span> <span data-ttu-id="0ca49-3751">Lorsque ce type ou cette méthode est instancié, le paramètre de type générique est remplacé par un type valeur ou un type référence.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3751">When that type or method is instantiated, the generic type parameter is replaced by a value type or reference type.</span></span>  
  
 <span data-ttu-id="0ca49-3752">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `sizeof` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3752">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sizeof` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3753">ILGenerator.Emit (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3753">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Starg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Starg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Starg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3754">Stocke la valeur en haut de la pile d’évaluation à l’emplacement d’argument situé à un index spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3754">Stores the value on top of the evaluation stack in the argument slot at a specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3755">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3755">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3756">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3756">Format</span></span>|<span data-ttu-id="0ca49-3757">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3757">Assembly Format</span></span>|<span data-ttu-id="0ca49-3758">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3758">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3759">0 B FE &LT; `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3759">FE 0B < `unsigned int16` ></span></span>|<span data-ttu-id="0ca49-3760">starg `num`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3760">starg `num`</span></span>|<span data-ttu-id="0ca49-3761">Dépile la valeur de la pile et la stocke dans l’emplacement d’argument `num`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3761">Pops the top value from the stack and stores it in argument slot `num`.</span></span>|  
  
 <span data-ttu-id="0ca49-3762">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3762">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3763">La valeur actuellement située en haut de la pile est dépilée et placée dans l’emplacement d’argument `num`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3763">The value currently on top of the stack is popped and placed in argument slot `num`.</span></span>  
  
 <span data-ttu-id="0ca49-3764">Le `starg` instruction Dépile une valeur de la pile et la place dans l’emplacement d’argument `num`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3764">The `starg` instruction pops a value from the stack and places it in argument slot `num`.</span></span> <span data-ttu-id="0ca49-3765">Le type de la valeur doit correspondre au type de l’argument, comme spécifié dans la signature de la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3765">The type of the value must match the type of the argument, as specified in the current method's signature.</span></span>  
  
 <span data-ttu-id="0ca49-3766">Pour connaître les procédures qui acceptent une liste d’arguments variable, la `starg` instruction peut être utilisée uniquement lors du premier fixé d’arguments, pas celles dans la partie variable de la signature.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3766">For procedures that take a variable argument list, the `starg` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="0ca49-3767">Stocker dans les arguments qui contiennent une valeur entière inférieure à 4 octets tronque la valeur lorsqu’il passe à partir de la pile à l’argument.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3767">Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument.</span></span> <span data-ttu-id="0ca49-3768">Les valeurs à virgule flottante sont arrondies à partir de leur taille native (type `F`) à la taille associée à l’argument.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3768">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="0ca49-3769">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `starg` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3769">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `starg` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3770">ILGenerator.Emit (OpCode, short)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3770">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Starg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Starg_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3771">Stocke la valeur en haut de la pile d’évaluation à l’emplacement d’argument situé à un index spécifié (forme abrégée).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3771">Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3772">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3772">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3773">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3773">Format</span></span>|<span data-ttu-id="0ca49-3774">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3774">Assembly Format</span></span>|<span data-ttu-id="0ca49-3775">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3775">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3776">10 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3776">10 < `unsigned int8` ></span></span>|<span data-ttu-id="0ca49-3777">starg.s `num`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3777">starg.s `num`</span></span>|<span data-ttu-id="0ca49-3778">Dépile la valeur de la pile et la stocke dans l’emplacement de l’argument `num`, forme abrégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3778">Pops the top value from the stack and stores it in argument slot `num`, short form.</span></span>|  
  
 <span data-ttu-id="0ca49-3779">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3779">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3780">La valeur actuellement située en haut de la pile est dépilée et placée dans l’emplacement d’argument `num`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3780">The value currently on top of the stack is popped and placed in argument slot `num`.</span></span>  
  
 <span data-ttu-id="0ca49-3781">Le `starg.s` instruction Dépile une valeur de la pile et la place dans l’emplacement d’argument `num`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3781">The `starg.s` instruction pops a value from the stack and places it in argument slot `num`.</span></span> <span data-ttu-id="0ca49-3782">Le type de la valeur doit correspondre au type de l’argument, comme spécifié dans la signature de la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3782">The type of the value must match the type of the argument, as specified in the current method's signature.</span></span>  
  
 <span data-ttu-id="0ca49-3783">La `starg.s` instruction fournit un codage efficace pour une utilisation avec les 256 premiers arguments.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3783">The `starg.s` instruction provides an efficient encoding for use with the first 256 arguments.</span></span>  
  
 <span data-ttu-id="0ca49-3784">Pour connaître les procédures qui acceptent une liste d’arguments variable, la `starg.s` instruction peut être utilisée uniquement lors du premier fixé d’arguments, pas celles dans la partie variable de la signature.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3784">For procedures that take a variable argument list, the `starg.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="0ca49-3785">Stocker dans les arguments qui contiennent une valeur entière inférieure à 4 octets tronque la valeur lorsqu’il passe à partir de la pile à l’argument.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3785">Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument.</span></span> <span data-ttu-id="0ca49-3786">Les valeurs à virgule flottante sont arrondies à partir de leur taille native (type `F`) à la taille associée à l’argument.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3786">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="0ca49-3787">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `starg.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3787">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `starg.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3788">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3788">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3789">Remplace l'élément de tableau à un index donné par la valeur de la pile d'évaluation dont le type est spécifié dans l'instruction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3789">Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3790">Le tableau suivant répertorie les instructions format hexadécimal et Microsoft intermediate language (MSIL) assembly, ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3790">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3791">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3791">Format</span></span>|<span data-ttu-id="0ca49-3792">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3792">Assembly Format</span></span>|<span data-ttu-id="0ca49-3793">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3793">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3794">A4 &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3794">A4 < `T` ></span></span>|<span data-ttu-id="0ca49-3795">stelem `typeTok`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3795">stelem `typeTok`</span></span>|<span data-ttu-id="0ca49-3796">Remplace l’élément de tableau à l’index fourni par une valeur de type `typeTok` sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3796">Replaces the array element at the supplied index with a value of type `typeTok` on the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3797">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3797">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3798">Une référence d’objet dans un tableau, `array`, est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3798">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3799">Une valeur d’index, `index`, à un élément dans `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3799">An index value, `index`, to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-3800">Une valeur du type spécifié dans l’instruction est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3800">A value of the type specified in the instruction is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="0ca49-3801">La valeur, l’index et la référence de tableau sont dépilés de la pile ; la valeur est placée dans l’élément de tableau à l’index donné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3801">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="0ca49-3802">Le `stelem` instruction remplace la valeur de l’élément à l’index de base zéro fourni dans le tableau unidimensionnel `array` avec la valeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3802">The `stelem` instruction replaces the value of the element at the supplied zero-based index in the one-dimensional array `array` with the value.</span></span> <span data-ttu-id="0ca49-3803">La valeur a le type spécifié par le jeton `typeTok` dans l’instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3803">The value has the type specified by the token `typeTok` in the instruction.</span></span>  
  
 <span data-ttu-id="0ca49-3804">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3804">Arrays are objects, and hence represented by a value of type `O`.</span></span> <span data-ttu-id="0ca49-3805">L’index est de type `native int`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3805">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="0ca49-3806"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3806"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-3807"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3807"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-3808"><xref:System.ArrayTypeMismatchException> est levée si `array` ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3808"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-3809">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stelem` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3809">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3810">ILGenerator.Emit (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3810">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3811">Remplace l'élément de tableau situé à un index donné par la valeur <see langword="native int" /> dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3811">Replaces the array element at a given index with the <see langword="native int" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3812">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3812">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3813">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3813">Format</span></span>|<span data-ttu-id="0ca49-3814">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3814">Assembly Format</span></span>|<span data-ttu-id="0ca49-3815">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3815">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3816">9 B</span><span class="sxs-lookup"><span data-stu-id="0ca49-3816">9B</span></span>|<span data-ttu-id="0ca49-3817">stelem.i</span><span class="sxs-lookup"><span data-stu-id="0ca49-3817">stelem.i</span></span>|<span data-ttu-id="0ca49-3818">Remplace un élément de tableau à l’index fourni avec le `native int` valeur sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3818">Replaces an array element at the supplied index with the `native int` value on the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3819">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3819">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3820">Une référence d’objet dans un tableau, `array`, est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3820">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3821">Un index valide à un élément dans `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3821">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-3822">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3822">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="0ca49-3823">La valeur, l’index et la référence de tableau sont dépilés de la pile ; la valeur est placée dans l’élément de tableau à l’index donné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3823">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="0ca49-3824">Le `stelem.i` instruction remplace la valeur de l’élément `index` dans le tableau unidimensionnel `array` avec la `native int` valeur envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3824">The `stelem.i` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `native int` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3825">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3825">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="0ca49-3826">L’index est de type `native int`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3826">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="0ca49-3827"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3827"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-3828"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3828"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-3829"><xref:System.ArrayTypeMismatchException> est levée si `array` ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3829"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-3830">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stelem.i` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3830">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3831">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3831">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3832">Remplace l'élément de tableau situé à un index donné par la valeur <see langword="int8" /> dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3832">Replaces the array element at a given index with the <see langword="int8" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3833">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3833">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3834">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3834">Format</span></span>|<span data-ttu-id="0ca49-3835">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3835">Assembly Format</span></span>|<span data-ttu-id="0ca49-3836">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3836">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3837">9C</span><span class="sxs-lookup"><span data-stu-id="0ca49-3837">9C</span></span>|<span data-ttu-id="0ca49-3838">stelem.i1</span><span class="sxs-lookup"><span data-stu-id="0ca49-3838">stelem.i1</span></span>|<span data-ttu-id="0ca49-3839">Remplace un élément de tableau à l’index fourni avec le `int8` valeur sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3839">Replaces an array element at the supplied index with the `int8` value on the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3840">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3840">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3841">Une référence d’objet dans un tableau, `array`, est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3841">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3842">Un index valide à un élément dans `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3842">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-3843">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3843">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="0ca49-3844">La valeur, l’index et la référence de tableau sont dépilés de la pile ; la valeur est placée dans l’élément de tableau à l’index donné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3844">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="0ca49-3845">Le `stelem.i1` instruction remplace la valeur de l’élément `index` dans le tableau unidimensionnel `array` avec la `int8` valeur envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3845">The `stelem.i1` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int8` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3846">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3846">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="0ca49-3847">L’index est de type `native int`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3847">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="0ca49-3848"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3848"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-3849"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3849"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-3850"><xref:System.ArrayTypeMismatchException> est levée si `array` ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3850"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-3851">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stelem.i1` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3851">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i1` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3852">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3852">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3853">Remplace l'élément de tableau situé à un index donné par la valeur <see langword="int16" /> dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3853">Replaces the array element at a given index with the <see langword="int16" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3854">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3854">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3855">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3855">Format</span></span>|<span data-ttu-id="0ca49-3856">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3856">Assembly Format</span></span>|<span data-ttu-id="0ca49-3857">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3857">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3858">9D</span><span class="sxs-lookup"><span data-stu-id="0ca49-3858">9D</span></span>|<span data-ttu-id="0ca49-3859">stelem.i2</span><span class="sxs-lookup"><span data-stu-id="0ca49-3859">stelem.i2</span></span>|<span data-ttu-id="0ca49-3860">Remplace un élément de tableau à l’index fourni avec le `int16` valeur sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3860">Replaces an array element at the supplied index with the `int16` value on the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3861">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3861">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3862">Une référence d’objet dans un tableau, `array`, est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3862">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3863">Un index valide à un élément dans `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3863">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-3864">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3864">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="0ca49-3865">La valeur, l’index et la référence de tableau sont dépilés de la pile ; la valeur est placée dans l’élément de tableau à l’index donné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3865">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="0ca49-3866">Le `stelem.i2` instruction remplace la valeur de l’élément `index` dans le tableau unidimensionnel `array` avec la `int16` valeur envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3866">The `stelem.i2` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int16` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3867">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3867">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="0ca49-3868">L’index est de type `native int`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3868">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="0ca49-3869"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3869"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-3870"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3870"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-3871"><xref:System.ArrayTypeMismatchException> est levée si `array` ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3871"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-3872">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stelem.i2` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3872">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i2` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3873">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3873">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3874">Remplace l'élément de tableau situé à un index donné par la valeur <see langword="int32" /> dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3874">Replaces the array element at a given index with the <see langword="int32" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3875">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3875">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3876">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3876">Format</span></span>|<span data-ttu-id="0ca49-3877">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3877">Assembly Format</span></span>|<span data-ttu-id="0ca49-3878">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3878">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3879">9 E</span><span class="sxs-lookup"><span data-stu-id="0ca49-3879">9E</span></span>|<span data-ttu-id="0ca49-3880">stelem.i4</span><span class="sxs-lookup"><span data-stu-id="0ca49-3880">stelem.i4</span></span>|<span data-ttu-id="0ca49-3881">Remplace un élément de tableau à l’index fourni avec le `int32` valeur sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3881">Replaces an array element at the supplied index with the `int32` value on the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3882">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3882">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3883">Une référence d’objet dans un tableau, `array`, est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3883">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3884">Un index valide à un élément dans `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3884">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-3885">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3885">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="0ca49-3886">La valeur, l’index et la référence de tableau sont dépilés de la pile ; la valeur est placée dans l’élément de tableau à l’index donné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3886">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="0ca49-3887">Le `stelem.i4` instruction remplace la valeur de l’élément `index` dans le tableau unidimensionnel `array` avec la `int32` valeur envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3887">The `stelem.i4` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int32` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3888">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3888">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="0ca49-3889">L’index est de type `native int`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3889">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="0ca49-3890"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3890"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-3891"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3891"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-3892"><xref:System.ArrayTypeMismatchException> est levée si `array` ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3892"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-3893">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stelem.i4` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3893">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i4` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3894">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3894">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3895">Remplace l'élément de tableau situé à un index donné par la valeur <see langword="int64" /> dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3895">Replaces the array element at a given index with the <see langword="int64" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3896">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3896">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3897">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3897">Format</span></span>|<span data-ttu-id="0ca49-3898">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3898">Assembly Format</span></span>|<span data-ttu-id="0ca49-3899">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3899">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3900">9F</span><span class="sxs-lookup"><span data-stu-id="0ca49-3900">9F</span></span>|<span data-ttu-id="0ca49-3901">stelem.i8</span><span class="sxs-lookup"><span data-stu-id="0ca49-3901">stelem.i8</span></span>|<span data-ttu-id="0ca49-3902">Remplace un élément de tableau à l’index fourni avec le `int64` valeur sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3902">Replaces an array element at the supplied index with the `int64` value on the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3903">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3903">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3904">Une référence d’objet dans un tableau, `array`, est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3904">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3905">Un index valide à un élément dans `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3905">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-3906">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3906">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="0ca49-3907">La valeur, l’index et la référence de tableau sont dépilés de la pile ; la valeur est placée dans l’élément de tableau à l’index donné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3907">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="0ca49-3908">Le `stelem.i8` instruction remplace la valeur de l’élément `index` dans le tableau unidimensionnel `array` avec la `int64` valeur envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3908">The `stelem.i8` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int64` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3909">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3909">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="0ca49-3910">L’index est de type `native int`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3910">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="0ca49-3911"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3911"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-3912"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3912"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-3913"><xref:System.ArrayTypeMismatchException> est levée si `array` ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3913"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-3914">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stelem.i8` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3914">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i8` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3915">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3915">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3916">Remplace l'élément de tableau situé à un index donné par la valeur <see langword="float32" /> dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3916">Replaces the array element at a given index with the <see langword="float32" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3917">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3917">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3918">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3918">Format</span></span>|<span data-ttu-id="0ca49-3919">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3919">Assembly Format</span></span>|<span data-ttu-id="0ca49-3920">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3920">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3921">A0</span><span class="sxs-lookup"><span data-stu-id="0ca49-3921">A0</span></span>|<span data-ttu-id="0ca49-3922">stelem.r4</span><span class="sxs-lookup"><span data-stu-id="0ca49-3922">stelem.r4</span></span>|<span data-ttu-id="0ca49-3923">Remplace un élément de tableau à l’index fourni avec le `float32` valeur sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3923">Replaces an array element at the supplied index with the `float32` value on the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3924">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3924">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3925">Une référence d’objet dans un tableau, `array`, est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3925">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3926">Un index valide à un élément dans `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3926">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-3927">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3927">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="0ca49-3928">La valeur, l’index et la référence de tableau sont dépilés de la pile ; la valeur est placée dans l’élément de tableau à l’index donné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3928">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="0ca49-3929">Le `stelem.r4` instruction remplace la valeur de l’élément `index` dans le tableau unidimensionnel `array` avec la `float32` valeur envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3929">The `stelem.r4` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `float32` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3930">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3930">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="0ca49-3931">L’index est de type `native int`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3931">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="0ca49-3932"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3932"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-3933"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3933"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-3934"><xref:System.ArrayTypeMismatchException> est levée si `array` ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3934"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-3935">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stelem.r4` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3935">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.r4` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3936">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3936">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3937">Remplace l'élément de tableau situé à un index donné par la valeur <see langword="float64" /> dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3937">Replaces the array element at a given index with the <see langword="float64" /> value on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3938">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3938">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3939">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3939">Format</span></span>|<span data-ttu-id="0ca49-3940">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3940">Assembly Format</span></span>|<span data-ttu-id="0ca49-3941">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3941">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3942">A1</span><span class="sxs-lookup"><span data-stu-id="0ca49-3942">A1</span></span>|<span data-ttu-id="0ca49-3943">stelem.r8</span><span class="sxs-lookup"><span data-stu-id="0ca49-3943">stelem.r8</span></span>|<span data-ttu-id="0ca49-3944">Remplace un élément de tableau à l’index fourni avec le `float64` valeur sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3944">Replaces an array element at the supplied index with the `float64` value on the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3945">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3945">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3946">Une référence d’objet dans un tableau, `array`, est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3946">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3947">Un index valide à un élément dans `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3947">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-3948">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3948">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="0ca49-3949">La valeur, l’index et la référence de tableau sont dépilés de la pile ; la valeur est placée dans l’élément de tableau à l’index donné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3949">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="0ca49-3950">Le `stelem.r8` instruction remplace la valeur de l’élément `index` dans le tableau unidimensionnel `array` avec la `float64` valeur envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3950">The `stelem.r8` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `float64` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3951">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3951">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="0ca49-3952">L’index est de type `native int`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3952">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="0ca49-3953"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3953"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-3954"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3954"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-3955"><xref:System.ArrayTypeMismatchException> est levée si `array` ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3955"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-3956">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stelem.r8` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3956">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.r8` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3957">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3957">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3958">Remplace l'élément de tableau situé à un index donné par la valeur de référence d'objet (type <see langword="O" />) dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3958">Replaces the array element at a given index with the object ref value (type <see langword="O" />) on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3959">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3959">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3960">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3960">Format</span></span>|<span data-ttu-id="0ca49-3961">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3961">Assembly Format</span></span>|<span data-ttu-id="0ca49-3962">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3962">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3963">A2</span><span class="sxs-lookup"><span data-stu-id="0ca49-3963">A2</span></span>|<span data-ttu-id="0ca49-3964">stelem.ref</span><span class="sxs-lookup"><span data-stu-id="0ca49-3964">stelem.ref</span></span>|<span data-ttu-id="0ca49-3965">Remplace un élément de tableau à l’index fourni avec le `ref` valeur (type `O`) sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3965">Replaces an array element at the supplied index with the `ref` value (type `O`) on the stack.</span></span>|  
  
 <span data-ttu-id="0ca49-3966">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3966">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3967">Une référence d’objet dans un tableau, `array`, est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3967">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3968">Un index valide à un élément dans `array` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3968">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-3969">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3969">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="0ca49-3970">La valeur, l’index et la référence de tableau sont dépilés de la pile ; la valeur est placée dans l’élément de tableau à l’index donné.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3970">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="0ca49-3971">Le `stelem.ref` instruction remplace la valeur de l’élément à l’index fourni dans le tableau unidimensionnel `array` avec la `ref` (type `O`) valeur envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3971">The `stelem.ref` instruction replaces the value of the element at the supplied index in the one-dimensional array `array` with the `ref` (type `O`) value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-3972">Les tableaux sont des objets et sont donc représentés par une valeur de type `O`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3972">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="0ca49-3973">L’index est de type `native int`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3973">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="0ca49-3974">Notez que `stelem.ref` convertit implicitement la valeur fournie pour le type d’élément de `array` avant d’affecter la valeur à l’élément de tableau.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3974">Note that `stelem.ref` implicitly casts the supplied value to the element type of `array` before assigning the value to the array element.</span></span> <span data-ttu-id="0ca49-3975">Cette conversion peut échouer, même pour le code vérifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3975">This cast can fail, even for verified code.</span></span> <span data-ttu-id="0ca49-3976">Par conséquent, le `stelem.ref` instruction peut lever <xref:System.InvalidCastException>.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3976">Thus the `stelem.ref` instruction can throw <xref:System.InvalidCastException>.</span></span> <span data-ttu-id="0ca49-3977">Pour les tableaux unidimensionnels qui ne sont pas de base zéro et pour les tableaux multidimensionnels, le <xref:System.Array> classe fournit un <xref:System.Array.SetValue%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="0ca49-3977">For one-dimensional arrays that aren't zero-based and for multidimensional arrays, the <xref:System.Array> class provides a <xref:System.Array.SetValue%2A> method.</span></span>  
  
 <span data-ttu-id="0ca49-3978"><xref:System.NullReferenceException> est levée si `array` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3978"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-3979"><xref:System.IndexOutOfRangeException> est levée si `index` est négatif ou supérieur à la limite de `array`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3979"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="0ca49-3980"><xref:System.ArrayTypeMismatchException> est levée si `array` ne contient pas d’éléments du type requis.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3980"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="0ca49-3981">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stelem.ref` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3981">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.ref` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-3982">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-3982">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-3983">Remplace la valeur stockée dans le champ d'une référence d'objet ou d'un pointeur par une nouvelle valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-3983">Replaces the value stored in the field of an object reference or pointer with a new value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-3984">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3984">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-3985">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-3985">Format</span></span>|<span data-ttu-id="0ca49-3986">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-3986">Assembly Format</span></span>|<span data-ttu-id="0ca49-3987">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-3987">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-3988">7D &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-3988">7D < `T` ></span></span>|<span data-ttu-id="0ca49-3989">stfld `field`</span><span class="sxs-lookup"><span data-stu-id="0ca49-3989">stfld `field`</span></span>|<span data-ttu-id="0ca49-3990">Remplace la valeur de `field` de l’objet avec une nouvelle valeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3990">Replaces the value of `field` of the object with a new value.</span></span>|  
  
 <span data-ttu-id="0ca49-3991">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-3991">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-3992">Une référence d’objet ou le pointeur est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3992">An object reference or pointer is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-3993">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3993">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-3994">La valeur et la référence d’objet/pointeur sont dépilés de la pile ; la valeur de `field` dans l’objet est remplacé par la valeur fournie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3994">The value and the object reference/pointer are popped from the stack; the value of `field` in the object is replaced with the supplied value.</span></span>  
  
 <span data-ttu-id="0ca49-3995">Le `stfld` instruction remplace la valeur d’un champ d’un objet (type `O`) ou via un pointeur (type `native int`, `&`, ou `*`) avec une valeur donnée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3995">The `stfld` instruction replaces the value of a field of an object (type `O`) or via a pointer (type `native int`, `&`, or `*`) with a given value.</span></span> <span data-ttu-id="0ca49-3996">`Field` est un jeton de métadonnées qui fait référence à une référence de membre de champ.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3996">`Field` is a metadata token that refers to a field member reference.</span></span> <span data-ttu-id="0ca49-3997">Le `stfld` instruction peut avoir un préfixe d’une des deux <xref:System.Reflection.Emit.OpCodes.Unaligned> et <xref:System.Reflection.Emit.OpCodes.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3997">The `stfld` instruction can have a prefix of either or both of <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile>.</span></span>  
  
 <span data-ttu-id="0ca49-3998"><xref:System.NullReferenceException> est levée si la référence d’objet ou le pointeur est une référence null et que le champ n’est pas statique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3998"><xref:System.NullReferenceException> is thrown if the object reference or pointer is a null reference and the field isn't static.</span></span>  
  
 <span data-ttu-id="0ca49-3999"><xref:System.MissingFieldException> est levée si `field` est introuvable dans les métadonnées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-3999"><xref:System.MissingFieldException> is thrown if `field` is not found in the metadata.</span></span> <span data-ttu-id="0ca49-4000">Cette option est généralement activée quand l’instruction de langage MSIL (Microsoft Intermediate Language) est convertie en code natif, pas lors de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4000">This is typically checked when the Microsoft Intermediate Language (MSIL) instruction is converted to native code, not at runtime.</span></span>  
  
 <span data-ttu-id="0ca49-4001">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stfld` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4001">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stfld` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4002">ILGenerator.Emit (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4002">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4003">Stocke une valeur de type <see langword="native int" /> à une adresse fournie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4003">Stores a value of type <see langword="native int" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4004">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4004">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4005">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4005">Format</span></span>|<span data-ttu-id="0ca49-4006">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4006">Assembly Format</span></span>|<span data-ttu-id="0ca49-4007">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4007">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4008">DF</span><span class="sxs-lookup"><span data-stu-id="0ca49-4008">DF</span></span>|<span data-ttu-id="0ca49-4009">stind.i</span><span class="sxs-lookup"><span data-stu-id="0ca49-4009">stind.i</span></span>|<span data-ttu-id="0ca49-4010">Stocke un `native int` valeur à une adresse donnée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4010">Stores a `native int` value at a given address.</span></span>|  
  
 <span data-ttu-id="0ca49-4011">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4011">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4012">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4012">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-4013">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4013">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-4014">La valeur et l’adresse sont dépilés de la pile ; la valeur est stockée à l’adresse.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4014">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="0ca49-4015">Le `stind.i` instruction stocke un `native int` valeur à l’adresse fournie (type `native int`, `*`, ou `&`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-4015">The `stind.i` instruction stores a `native int` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="0ca49-4016">Opération de type sécurisé requiert que le `stind.i` instruction soit utilisée de manière cohérente avec le type du pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4016">Type safe operation requires that the `stind.i` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="0ca49-4017">L’opération de la `stind.i` instruction peut être modifiée par une instruction <xref:System.Reflection.Emit.OpCodes.Volatile> ou <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction de préfixe.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4017">The operation of the `stind.i` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="0ca49-4018"><xref:System.NullReferenceException> est levée si `addr` n’est pas aligné naturellement pour le type d’argument impliqué par le suffixe d’instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4018"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="0ca49-4019">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stind.i` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4019">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4020">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4020">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4021">Stocke une valeur de type <see langword="int8" /> à une adresse fournie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4021">Stores a value of type <see langword="int8" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4022">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4022">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4023">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4023">Format</span></span>|<span data-ttu-id="0ca49-4024">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4024">Assembly Format</span></span>|<span data-ttu-id="0ca49-4025">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4025">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4026">52</span><span class="sxs-lookup"><span data-stu-id="0ca49-4026">52</span></span>|<span data-ttu-id="0ca49-4027">stind.i1</span><span class="sxs-lookup"><span data-stu-id="0ca49-4027">stind.i1</span></span>|<span data-ttu-id="0ca49-4028">Stocke un `int8` valeur à une adresse donnée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4028">Stores an `int8` value at a given address.</span></span>|  
  
 <span data-ttu-id="0ca49-4029">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4029">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4030">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4030">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-4031">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4031">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-4032">La valeur et l’adresse sont dépilés de la pile ; la valeur est stockée à l’adresse.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4032">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="0ca49-4033">Le `stind.i1` instruction stocke un `int8` valeur à l’adresse fournie (type `native int`, `*`, ou `&`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-4033">The `stind.i1` instruction stores an `int8` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="0ca49-4034">Opération de type sécurisé requiert que le `stind.i1` instruction soit utilisée de manière cohérente avec le type du pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4034">Type safe operation requires that the `stind.i1` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="0ca49-4035">L’opération de la `stind.i1` instruction peut être modifiée par une instruction <xref:System.Reflection.Emit.OpCodes.Volatile> ou <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction de préfixe.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4035">The operation of the `stind.i1` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="0ca49-4036"><xref:System.NullReferenceException> est levée si `addr` n’est pas aligné naturellement pour le type d’argument impliqué par le suffixe d’instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4036"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="0ca49-4037">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stind.i1` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4037">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i1` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4038">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4038">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4039">Stocke une valeur de type <see langword="int16" /> à une adresse fournie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4039">Stores a value of type <see langword="int16" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4040">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4040">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4041">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4041">Format</span></span>|<span data-ttu-id="0ca49-4042">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4042">Assembly Format</span></span>|<span data-ttu-id="0ca49-4043">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4043">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4044">53</span><span class="sxs-lookup"><span data-stu-id="0ca49-4044">53</span></span>|<span data-ttu-id="0ca49-4045">stind.i2</span><span class="sxs-lookup"><span data-stu-id="0ca49-4045">stind.i2</span></span>|<span data-ttu-id="0ca49-4046">Stocke un `int16` valeur à une adresse donnée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4046">Stores an `int16` value at a given address.</span></span>|  
  
 <span data-ttu-id="0ca49-4047">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4047">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4048">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4048">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-4049">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4049">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-4050">La valeur et l’adresse sont dépilés de la pile ; la valeur est stockée à l’adresse.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4050">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="0ca49-4051">Le `stind.i2` instruction stocke un `int16` valeur à l’adresse fournie (type `native int`, `*`, ou `&`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-4051">The `stind.i2` instruction stores an `int16` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="0ca49-4052">Opération de type sécurisé requiert que le `stind.2i` instruction soit utilisée de manière cohérente avec le type du pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4052">Type safe operation requires that the `stind.2i` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="0ca49-4053">L’opération de la `stind.i2` instruction peut être modifiée par une instruction <xref:System.Reflection.Emit.OpCodes.Volatile> ou <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction de préfixe.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4053">The operation of the `stind.i2` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="0ca49-4054"><xref:System.NullReferenceException> est levée si `addr` n’est pas aligné naturellement pour le type d’argument impliqué par le suffixe d’instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4054"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="0ca49-4055">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stind.i2` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4055">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i2` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4056">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4056">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4057">Stocke une valeur de type <see langword="int32" /> à une adresse fournie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4057">Stores a value of type <see langword="int32" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4058">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4058">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4059">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4059">Format</span></span>|<span data-ttu-id="0ca49-4060">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4060">Assembly Format</span></span>|<span data-ttu-id="0ca49-4061">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4061">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4062">54</span><span class="sxs-lookup"><span data-stu-id="0ca49-4062">54</span></span>|<span data-ttu-id="0ca49-4063">stind.i4</span><span class="sxs-lookup"><span data-stu-id="0ca49-4063">stind.i4</span></span>|<span data-ttu-id="0ca49-4064">Stocke un `int32` valeur à une adresse donnée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4064">Stores an `int32` value at a given address.</span></span>|  
  
 <span data-ttu-id="0ca49-4065">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4065">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4066">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4066">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-4067">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4067">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-4068">La valeur et l’adresse sont dépilés de la pile ; la valeur est stockée à l’adresse.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4068">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="0ca49-4069">Le `stind.i4` instruction stocke un `int32` valeur à l’adresse fournie (type `native int`, `*`, ou `&`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-4069">The `stind.i4` instruction stores an `int32` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="0ca49-4070">Opération de type sécurisé requiert que le `stind.i4` instruction soit utilisée de manière cohérente avec le type du pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4070">Type safe operation requires that the `stind.i4` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="0ca49-4071">L’opération de la `stind.i4` instruction peut être modifiée par une instruction <xref:System.Reflection.Emit.OpCodes.Volatile> ou <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction de préfixe.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4071">The operation of the `stind.i4` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="0ca49-4072"><xref:System.NullReferenceException> est levée si `addr` n’est pas aligné naturellement pour le type d’argument impliqué par le suffixe d’instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4072"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="0ca49-4073">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stind.i4` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4073">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i4` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4074">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4074">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4075">Stocke une valeur de type <see langword="int64" /> à une adresse fournie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4075">Stores a value of type <see langword="int64" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4076">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4076">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4077">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4077">Format</span></span>|<span data-ttu-id="0ca49-4078">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4078">Assembly Format</span></span>|<span data-ttu-id="0ca49-4079">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4079">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4080">55</span><span class="sxs-lookup"><span data-stu-id="0ca49-4080">55</span></span>|<span data-ttu-id="0ca49-4081">stind.i8</span><span class="sxs-lookup"><span data-stu-id="0ca49-4081">stind.i8</span></span>|<span data-ttu-id="0ca49-4082">Stocke un `int64` valeur à une adresse donnée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4082">Stores an `int64` value at a given address.</span></span>|  
  
 <span data-ttu-id="0ca49-4083">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4083">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4084">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4084">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-4085">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4085">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-4086">La valeur et l’adresse sont dépilés de la pile ; la valeur est stockée à l’adresse.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4086">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="0ca49-4087">Le `stind.i8` instruction stocke un `int64` valeur à l’adresse fournie (type `native int`, `*`, ou `&`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-4087">The `stind.i8` instruction stores an `int64` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="0ca49-4088">Opération de type sécurisé requiert que le `stind.i8` instruction soit utilisée de manière cohérente avec le type du pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4088">Type safe operation requires that the `stind.i8` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="0ca49-4089">L’opération de la `stind.i` instruction peut être modifiée par une instruction <xref:System.Reflection.Emit.OpCodes.Volatile> ou <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction de préfixe.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4089">The operation of the `stind.i` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="0ca49-4090"><xref:System.NullReferenceException> est levée si `addr` n’est pas aligné naturellement pour le type d’argument impliqué par le suffixe d’instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4090"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="0ca49-4091">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stind.i8` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4091">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i8` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4092">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4092">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4093">Stocke une valeur de type <see langword="float32" /> à une adresse fournie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4093">Stores a value of type <see langword="float32" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4094">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4094">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4095">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4095">Format</span></span>|<span data-ttu-id="0ca49-4096">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4096">Assembly Format</span></span>|<span data-ttu-id="0ca49-4097">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4097">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4098">56</span><span class="sxs-lookup"><span data-stu-id="0ca49-4098">56</span></span>|<span data-ttu-id="0ca49-4099">stind.r4</span><span class="sxs-lookup"><span data-stu-id="0ca49-4099">stind.r4</span></span>|<span data-ttu-id="0ca49-4100">Stocke un `float32` valeur à une adresse donnée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4100">Stores a `float32` value at a given address.</span></span>|  
  
 <span data-ttu-id="0ca49-4101">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4101">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4102">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4102">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-4103">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4103">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-4104">La valeur et l’adresse sont dépilés de la pile ; la valeur est stockée à l’adresse.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4104">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="0ca49-4105">Le `stind.r4` instruction stocke un `float32` valeur à l’adresse fournie (type `native int`, `*`, ou `&`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-4105">The `stind.r4` instruction stores a `float32` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="0ca49-4106">Opération de type sécurisé requiert que le `stind.r4` instruction soit utilisée de manière cohérente avec le type du pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4106">Type safe operation requires that the `stind.r4` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="0ca49-4107">L’opération de la `stind.r4` instruction peut être modifiée par une instruction <xref:System.Reflection.Emit.OpCodes.Volatile> ou <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction de préfixe.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4107">The operation of the `stind.r4` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="0ca49-4108"><xref:System.NullReferenceException> est levée si `addr` n’est pas aligné naturellement pour le type d’argument impliqué par le suffixe d’instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4108"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="0ca49-4109">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stind.r4` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4109">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.r4` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4110">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4110">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4111">Stocke une valeur de type <see langword="float64" /> à une adresse fournie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4111">Stores a value of type <see langword="float64" /> at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4112">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4112">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4113">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4113">Format</span></span>|<span data-ttu-id="0ca49-4114">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4114">Assembly Format</span></span>|<span data-ttu-id="0ca49-4115">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4115">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4116">57</span><span class="sxs-lookup"><span data-stu-id="0ca49-4116">57</span></span>|<span data-ttu-id="0ca49-4117">stind.r8</span><span class="sxs-lookup"><span data-stu-id="0ca49-4117">stind.r8</span></span>|<span data-ttu-id="0ca49-4118">Stocke un `float64` valeur à une adresse donnée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4118">Stores a `float64` value at a given address.</span></span>|  
  
 <span data-ttu-id="0ca49-4119">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4119">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4120">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4120">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-4121">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4121">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-4122">La valeur et l’adresse sont dépilés de la pile ; la valeur est stockée à l’adresse.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4122">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="0ca49-4123">Le `stind.r8` instruction stocke un `float64` valeur à l’adresse fournie (type `native int`, `*`, ou `&`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-4123">The `stind.r8` instruction stores a `float64` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="0ca49-4124">Opération de type sécurisé requiert que le `stind.r8` instruction soit utilisée de manière cohérente avec le type du pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4124">Type safe operation requires that the `stind.r8` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="0ca49-4125">L’opération de la `stind.r8` instruction peut être modifiée par une instruction <xref:System.Reflection.Emit.OpCodes.Volatile> ou <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction de préfixe.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4125">The operation of the `stind.r8` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="0ca49-4126"><xref:System.NullReferenceException> est levée si `addr` n’est pas aligné naturellement pour le type d’argument impliqué par le suffixe d’instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4126"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="0ca49-4127">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stind.r8` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4127">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.r8` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4128">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4128">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4129">Stocke une valeur de référence d'objet à une adresse fournie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4129">Stores a object reference value at a supplied address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4130">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4130">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4131">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4131">Format</span></span>|<span data-ttu-id="0ca49-4132">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4132">Assembly Format</span></span>|<span data-ttu-id="0ca49-4133">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4133">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4134">51</span><span class="sxs-lookup"><span data-stu-id="0ca49-4134">51</span></span>|<span data-ttu-id="0ca49-4135">stind.ref</span><span class="sxs-lookup"><span data-stu-id="0ca49-4135">stind.ref</span></span>|<span data-ttu-id="0ca49-4136">Stocke une référence d’objet (type `O`) valeur à une adresse donnée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4136">Stores an object reference (type `O`) value at a given address.</span></span>|  
  
 <span data-ttu-id="0ca49-4137">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4137">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4138">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4138">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-4139">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4139">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-4140">La valeur et l’adresse sont dépilés de la pile ; la valeur est stockée à l’adresse.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4140">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="0ca49-4141">Le `stind.ref` instruction stocke une valeur de référence d’objet à l’adresse fournie (type `native int`, `*`, ou `&`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-4141">The `stind.ref` instruction stores an object reference value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="0ca49-4142">Opération de type sécurisé requiert que le `stind.ref` instruction soit utilisée de manière cohérente avec le type du pointeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4142">Type safe operation requires that the `stind.ref` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="0ca49-4143">L’opération de la `stind.ref` instruction peut être modifiée par une instruction <xref:System.Reflection.Emit.OpCodes.Volatile> ou <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction de préfixe.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4143">The operation of the `stind.ref` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="0ca49-4144"><xref:System.NullReferenceException> est levée si `addr` n’est pas aligné naturellement pour le type d’argument impliqué par le suffixe d’instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4144"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="0ca49-4145">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stind.ref` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4145">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.ref` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4146">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4146">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4147">Dépile la valeur actuelle du haut de la pile d'évaluation et la stocke dans la liste de variables locales à un index spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4147">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4148">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4148">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4149">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4149">Format</span></span>|<span data-ttu-id="0ca49-4150">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4150">Assembly Format</span></span>|<span data-ttu-id="0ca49-4151">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4151">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4152">FE 0E &LT; `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-4152">FE 0E < `unsigned int16` ></span></span>|<span data-ttu-id="0ca49-4153">stloc `index`</span><span class="sxs-lookup"><span data-stu-id="0ca49-4153">stloc `index`</span></span>|<span data-ttu-id="0ca49-4154">Dépile une valeur de la pile et la stocke dans la variable locale `index`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4154">Pops a value from the stack and stores it in local variable `index`.</span></span>|  
  
 <span data-ttu-id="0ca49-4155">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4155">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4156">Une valeur est dépilée et placée dans la variable locale `index`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4156">A value is popped off of the stack and placed in local variable `index`.</span></span>  
  
 <span data-ttu-id="0ca49-4157">Le `stloc` instruction dépile la valeur la pile d’évaluation et la déplace dans le numéro de variable locale `index`, où les variables locales sont numérotées à partir de 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4157">The `stloc` instruction pops the top value off the evaluation stack and moves it into local variable number `index`, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="0ca49-4158">Le type de la valeur doit correspondre au type de la variable locale, comme spécifié dans la signature locale de la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4158">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="0ca49-4159">Stocker dans les variables locales contenant une valeur entière inférieure à 4 octets tronque lorsqu’il passe à partir de la pile à la variable locale.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4159">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="0ca49-4160">Les valeurs à virgule flottante sont arrondies à partir de leur taille native (type `F`) à la taille associée à l’argument.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4160">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="0ca49-4161">Les instructions de langage MSIL (Microsoft Intermediate Language) correctes requièrent que `index` soit un index local valid.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4161">Correct Microsoft Intermediate Language (MSIL) instructions require that `index` be a valid local index.</span></span> <span data-ttu-id="0ca49-4162">Pour le `stloc` instruction, `index` doit être compris entre 0 et 65534 inclus (spécifiquement, 65535 n’est pas valide).</span><span class="sxs-lookup"><span data-stu-id="0ca49-4162">For the `stloc` instruction, `index` must lie in the range 0 to 65534 inclusive (specifically, 65535 is not valid).</span></span> <span data-ttu-id="0ca49-4163">La raison de l’exclusion de 65535 est pragmatique : susceptibles d’implémentations utilisent un entier de 2 octets pour effectuer le suivi d’un index de variable locale, ainsi que le nombre total de variables locales pour une méthode donnée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4163">The reason for excluding 65535 is pragmatic: likely implementations will use a 2-byte integer to track both a local's index, as well as the total number of locals for a given method.</span></span> <span data-ttu-id="0ca49-4164">Si un index 65 535 avait été rendu valide, un entier plus large pour suivre le nombre de variables locales dans une telle méthode serait nécessaire.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4164">If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.</span></span>  
  
 <span data-ttu-id="0ca49-4165">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> les surcharges de méthode peuvent utiliser le `stloc` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4165">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `stloc` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4166">ILGenerator.Emit (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4166">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="0ca49-4167">ILGenerator.Emit (OpCode, short)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4167">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4168">Dépile la valeur actuelle du haut de la pile d'évaluation et la stocke dans la liste de variables locales à l'index 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4168">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 0.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4169">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4169">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4170">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4170">Format</span></span>|<span data-ttu-id="0ca49-4171">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4171">Assembly Format</span></span>|<span data-ttu-id="0ca49-4172">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4172">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4173">0 A</span><span class="sxs-lookup"><span data-stu-id="0ca49-4173">0A</span></span>|<span data-ttu-id="0ca49-4174">stloc.0</span><span class="sxs-lookup"><span data-stu-id="0ca49-4174">stloc.0</span></span>|<span data-ttu-id="0ca49-4175">Dépile une valeur de la pile dans la variable locale 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4175">Pops a value from the stack into local variable 0.</span></span>|  
  
 <span data-ttu-id="0ca49-4176">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4176">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4177">Une valeur est dépilée et placée dans la variable locale indexée par 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4177">A value is popped off of the stack and placed in the local variable indexed by 0.</span></span>  
  
 <span data-ttu-id="0ca49-4178">La `stloc.0` instruction dépile la valeur la pile d’évaluation et la déplace dans la variable locale indexée par 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4178">The `stloc.0` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 0.</span></span> <span data-ttu-id="0ca49-4179">Le type de la valeur doit correspondre au type de la variable locale, comme spécifié dans la signature locale de la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4179">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="0ca49-4180">`stloc.0` est un encodage particulièrement efficace pour stocker des valeurs dans la variable locale 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4180">`stloc.0` is an especially efficient encoding for storing values in local variable 0.</span></span>  
  
 <span data-ttu-id="0ca49-4181">Stocker dans les variables locales contenant une valeur entière inférieure à 4 octets tronque lorsqu’il passe à partir de la pile à la variable locale.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4181">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="0ca49-4182">Les valeurs à virgule flottante sont arrondies à partir de leur taille native (type `F`) à la taille associée à l’argument.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4182">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="0ca49-4183">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stloc.0` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4183">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.0` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4184">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4184">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4185">Dépile la valeur actuelle du haut de la pile d'évaluation et la stocke dans la liste de variables locales à l'index 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4185">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 1.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4186">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4186">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4187">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4187">Format</span></span>|<span data-ttu-id="0ca49-4188">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4188">Assembly Format</span></span>|<span data-ttu-id="0ca49-4189">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4189">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4190">0 B</span><span class="sxs-lookup"><span data-stu-id="0ca49-4190">0B</span></span>|<span data-ttu-id="0ca49-4191">stloc.1</span><span class="sxs-lookup"><span data-stu-id="0ca49-4191">stloc.1</span></span>|<span data-ttu-id="0ca49-4192">Dépile une valeur de la pile dans la variable locale 1.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4192">Pops a value from the stack into local variable 1.</span></span>|  
  
 <span data-ttu-id="0ca49-4193">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4193">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4194">Une valeur est dépilée et placée dans la variable locale indexée par 1.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4194">A value is popped off of the stack and placed in the local variable indexed by 1.</span></span>  
  
 <span data-ttu-id="0ca49-4195">La `stloc.1` instruction dépile la valeur la pile d’évaluation et la déplace dans la variable locale indexée par 1.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4195">The `stloc.1` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 1.</span></span> <span data-ttu-id="0ca49-4196">Le type de la valeur doit correspondre au type de la variable locale, comme spécifié dans la signature locale de la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4196">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="0ca49-4197">`stloc.1` est un encodage particulièrement efficace pour stocker des valeurs dans la variable locale 1.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4197">`stloc.1` is an especially efficient encoding for storing values in local variable 1.</span></span>  
  
 <span data-ttu-id="0ca49-4198">Stocker dans les variables locales contenant une valeur entière inférieure à 4 octets tronque lorsqu’il passe à partir de la pile à la variable locale.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4198">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="0ca49-4199">Les valeurs à virgule flottante sont arrondies à partir de leur taille native (type `F`) à la taille associée à l’argument.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4199">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="0ca49-4200">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stloc.1` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4200">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.1` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4201">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4201">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4202">Dépile la valeur actuelle du haut de la pile d'évaluation et la stocke dans la liste de variables locales à l'index 2.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4202">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 2.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4203">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4203">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4204">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4204">Format</span></span>|<span data-ttu-id="0ca49-4205">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4205">Assembly Format</span></span>|<span data-ttu-id="0ca49-4206">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4206">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4207">0C</span><span class="sxs-lookup"><span data-stu-id="0ca49-4207">0C</span></span>|<span data-ttu-id="0ca49-4208">stloc.2</span><span class="sxs-lookup"><span data-stu-id="0ca49-4208">stloc.2</span></span>|<span data-ttu-id="0ca49-4209">Dépile une valeur de la pile dans la variable locale 2</span><span class="sxs-lookup"><span data-stu-id="0ca49-4209">Pops a value from the stack into local variable 2</span></span>|  
  
 <span data-ttu-id="0ca49-4210">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4210">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4211">Une valeur est dépilée et placée dans la variable locale indexée par 2.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4211">A value is popped off of the stack and placed in the local variable indexed by 2.</span></span>  
  
 <span data-ttu-id="0ca49-4212">La `stloc.2` instruction dépile la valeur la pile d’évaluation et la déplace dans la variable locale indexée par 2.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4212">The `stloc.2` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 2.</span></span> <span data-ttu-id="0ca49-4213">Le type de la valeur doit correspondre au type de la variable locale, comme spécifié dans la signature locale de la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4213">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="0ca49-4214">`stloc.2` est un encodage particulièrement efficace pour stocker des valeurs dans la variable locale 2.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4214">`stloc.2` is an especially efficient encoding for storing values in local variable 2.</span></span>  
  
 <span data-ttu-id="0ca49-4215">Stocker dans les variables locales contenant une valeur entière inférieure à 4 octets tronque lorsqu’il passe à partir de la pile à la variable locale.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4215">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="0ca49-4216">Les valeurs à virgule flottante sont arrondies à partir de leur taille native (type `F`) à la taille associée à l’argument.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4216">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="0ca49-4217">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stloc.2` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4217">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.2` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4218">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4218">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4219">Dépile la valeur actuelle du haut de la pile d'évaluation et la stocke dans la liste de variables locales à l'index 3.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4219">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 3.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4220">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4220">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4221">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4221">Format</span></span>|<span data-ttu-id="0ca49-4222">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4222">Assembly Format</span></span>|<span data-ttu-id="0ca49-4223">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4223">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4224">0D</span><span class="sxs-lookup"><span data-stu-id="0ca49-4224">0D</span></span>|<span data-ttu-id="0ca49-4225">stloc.3</span><span class="sxs-lookup"><span data-stu-id="0ca49-4225">stloc.3</span></span>|<span data-ttu-id="0ca49-4226">Dépile une valeur de la pile dans la variable locale 3</span><span class="sxs-lookup"><span data-stu-id="0ca49-4226">Pops a value from the stack into local variable 3</span></span>|  
  
 <span data-ttu-id="0ca49-4227">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4227">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4228">Une valeur est dépilée et placée dans la variable locale indexée par 3.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4228">A value is popped off of the stack and placed in the local variable indexed by 3.</span></span>  
  
 <span data-ttu-id="0ca49-4229">La `stloc.3` instruction dépile la valeur la pile d’évaluation et la déplace dans la variable locale indexée par 3.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4229">The `stloc.3` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 3.</span></span> <span data-ttu-id="0ca49-4230">Le type de la valeur doit correspondre au type de la variable locale, comme spécifié dans la signature locale de la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4230">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="0ca49-4231">`stloc.3` est un encodage particulièrement efficace pour stocker des valeurs dans la variable locale 3.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4231">`stloc.3` is an especially efficient encoding for storing values in local variable 3.</span></span>  
  
 <span data-ttu-id="0ca49-4232">Stocker dans les variables locales contenant une valeur entière inférieure à 4 octets tronque lorsqu’il passe à partir de la pile à la variable locale.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4232">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="0ca49-4233">Les valeurs à virgule flottante sont arrondies à partir de leur taille native (type `F`) à la taille associée à l’argument.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4233">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="0ca49-4234">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stloc.3` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4234">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.3` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4235">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4235">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4236">Dépile la valeur actuelle du haut de la pile d'évaluation et la stocke dans la liste de variables locales à <paramref name="index" /> (forme abrégée).</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4236">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at <paramref name="index" /> (short form).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4237">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4237">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4238">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4238">Format</span></span>|<span data-ttu-id="0ca49-4239">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4239">Assembly Format</span></span>|<span data-ttu-id="0ca49-4240">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4240">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4241">13 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-4241">13 < `unsigned int8` ></span></span>|<span data-ttu-id="0ca49-4242">stloc.s `index`</span><span class="sxs-lookup"><span data-stu-id="0ca49-4242">stloc.s `index`</span></span>|<span data-ttu-id="0ca49-4243">Dépile une valeur de la pile et la stocke dans la variable locale `index`, forme abrégée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4243">Pops a value from the stack and stores it in local variable `index`, short form.</span></span>|  
  
 <span data-ttu-id="0ca49-4244">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4244">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4245">Une valeur est dépilée et placée dans la variable locale `index`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4245">A value is popped off of the stack and placed in local variable `index`.</span></span>  
  
 <span data-ttu-id="0ca49-4246">Le `stloc.s` instruction dépile la valeur la pile d’évaluation et la déplace dans le numéro de variable locale `index`, où les variables locales sont numérotées à partir de 0.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4246">The `stloc.s` instruction pops the top value off the evaluation stack and moves it into local variable number `index`, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="0ca49-4247">Le type de la valeur doit correspondre au type de la variable locale, comme spécifié dans la signature locale de la méthode actuelle.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4247">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="0ca49-4248">La `stloc.s` instruction fournit un codage efficace pour les variables locales de 0 à 255.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4248">The `stloc.s` instruction provides an efficient encoding for local variables 0 through 255.</span></span>  
  
 <span data-ttu-id="0ca49-4249">Stocker dans les variables locales contenant une valeur entière inférieure à 4 octets tronque lorsqu’il passe à partir de la pile à la variable locale.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4249">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="0ca49-4250">Les valeurs à virgule flottante sont arrondies à partir de leur taille native (type `F`) à la taille associée à l’argument.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4250">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="0ca49-4251">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> les surcharges de méthode peuvent utiliser le `stloc.s` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4251">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `stloc.s` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4252">ILGenerator.Emit (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4252">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="0ca49-4253">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4253">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4254">Copie une valeur d'un type spécifié de la pile d'évaluation vers une adresse mémoire fournie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4254">Copies a value of a specified type from the evaluation stack into a supplied memory address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4255">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4255">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4256">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4256">Format</span></span>|<span data-ttu-id="0ca49-4257">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4257">Assembly Format</span></span>|<span data-ttu-id="0ca49-4258">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4258">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4259">81 < `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-4259">81 < `T` ></span></span>|<span data-ttu-id="0ca49-4260">stobj `class`</span><span class="sxs-lookup"><span data-stu-id="0ca49-4260">stobj `class`</span></span>|<span data-ttu-id="0ca49-4261">Stocke une valeur de type `class` à partir de la pile en mémoire.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4261">Stores a value of type `class` from the stack into memory.</span></span>|  
  
 <span data-ttu-id="0ca49-4262">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4262">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4263">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4263">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-4264">Un objet de type de valeur de type `class` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4264">A value type object of type `class` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-4265">L’objet et l’adresse sont dépilés de la pile ; l’objet de type valeur est stocké à l’adresse.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4265">The object and the address are popped from the stack; the value type object is stored at the address.</span></span>  
  
 <span data-ttu-id="0ca49-4266">Le `stobj` instruction copie l’objet de type valeur vers l’adresse spécifiée par l’adresse (un pointeur de type `native int`, `*`, ou `&`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-4266">The `stobj` instruction copies the value type object into the address specified by the address (a pointer of type `native int`, `*`, or `&`).</span></span> <span data-ttu-id="0ca49-4267">Le nombre d’octets copiés dépend de la taille de la classe représentée par `class`, un jeton de métadonnées représentant un type valeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4267">The number of bytes copied depends on the size of the class represented by `class`, a metadata token representing a value type.</span></span>  
  
 <span data-ttu-id="0ca49-4268">L’opération de la `stobj` instruction peut être modifiée par une instruction <xref:System.Reflection.Emit.OpCodes.Volatile> ou <xref:System.Reflection.Emit.OpCodes.Unaligned> instruction de préfixe.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4268">The operation of the `stobj` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="0ca49-4269"><xref:System.TypeLoadException> est levée si la classe est introuvable.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4269"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="0ca49-4270">Cela est généralement détecté lorsque les instructions de langage MSIL (Microsoft Intermediate Language) sont converties en code natif plutôt qu’au moment de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4270">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.</span></span>  
  
 <span data-ttu-id="0ca49-4271">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stobj` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4271">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stobj` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4272">ILGenerator.Emit (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4272">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stsfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stsfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4273">Remplace la valeur d'un champ statique par une valeur de la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4273">Replaces the value of a static field with a value from the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4274">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4274">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4275">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4275">Format</span></span>|<span data-ttu-id="0ca49-4276">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4276">Assembly Format</span></span>|<span data-ttu-id="0ca49-4277">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4277">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4278">80 < `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-4278">80 < `T` ></span></span>|<span data-ttu-id="0ca49-4279">stsfld `field`</span><span class="sxs-lookup"><span data-stu-id="0ca49-4279">stsfld `field`</span></span>|<span data-ttu-id="0ca49-4280">Remplace la valeur dans `field` avec une valeur fournie.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4280">Replaces the value in `field` with a supplied value.</span></span>|  
  
 <span data-ttu-id="0ca49-4281">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4281">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4282">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4282">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-4283">Une valeur est dépilée et stockée dans `field`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4283">A value is popped from the stack and stored in `field`.</span></span>  
  
 <span data-ttu-id="0ca49-4284">La `stsfld` instruction remplace la valeur d’un champ statique avec une valeur de la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4284">The `stsfld` instruction replaces the value of a static field with a value from the stack.</span></span> <span data-ttu-id="0ca49-4285">`field` est un jeton de métadonnées qui doit faire référence à un membre de champ statique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4285">`field` is a metadata token that must refer to a static field member.</span></span>  
  
 <span data-ttu-id="0ca49-4286">Le `stsfld` instruction peut-être être précédée <xref:System.Reflection.Emit.OpCodes.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4286">The `stsfld` instruction may be prefixed by <xref:System.Reflection.Emit.OpCodes.Volatile>.</span></span>  
  
 <span data-ttu-id="0ca49-4287"><xref:System.MissingFieldException> est levée si le champ est introuvable dans les métadonnées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4287"><xref:System.MissingFieldException> is thrown if field is not found in the metadata.</span></span> <span data-ttu-id="0ca49-4288">Cette option est généralement activée lorsque des instructions de langage MSIL (Microsoft Intermediate Language) en code natif, pas en cours d’exécution.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4288">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="0ca49-4289">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `stsfld` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4289">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stsfld` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4290">ILGenerator.Emit (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4290">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4291">Soustrait une valeur d'une autre et exécute un push du résultat dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4291">Subtracts one value from another and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4292">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4292">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4293">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4293">Format</span></span>|<span data-ttu-id="0ca49-4294">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4294">Assembly Format</span></span>|<span data-ttu-id="0ca49-4295">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4295">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4296">59</span><span class="sxs-lookup"><span data-stu-id="0ca49-4296">59</span></span>|<span data-ttu-id="0ca49-4297">sub</span><span class="sxs-lookup"><span data-stu-id="0ca49-4297">sub</span></span>|<span data-ttu-id="0ca49-4298">Soustrait une valeur d’un autre, en retournant une nouvelle valeur numérique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4298">Subtracts one value from another, returning a new numeric value.</span></span>|  
  
 <span data-ttu-id="0ca49-4299">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4299">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4300">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4300">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-4301">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4301">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-4302">`value2` et `value1` sont dépilés de la pile ; `value2` est soustraite de `value1`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4302">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1`.</span></span>  
  
4.  <span data-ttu-id="0ca49-4303">Le résultat est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4303">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-4304">Dépassement de capacité n’est pas détecté pour les opérations sur les entiers (pour la gestion du dépassement de capacité, consultez <xref:System.Reflection.Emit.OpCodes.Sub_Ovf>).</span><span class="sxs-lookup"><span data-stu-id="0ca49-4304">Overflow is not detected for integer operations (for proper overflow handling, see <xref:System.Reflection.Emit.OpCodes.Sub_Ovf>).</span></span>  
  
 <span data-ttu-id="0ca49-4305">Soustraction de nombres entiers encapsule, au lieu de saturer.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4305">Integer subtraction wraps, rather than saturates.</span></span> <span data-ttu-id="0ca49-4306">Par exemple : entiers 8 bits, où `value1` est définie sur 0 et `value2` est définie sur 1, le résultat « encapsulé » sera 255.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4306">For example: assuming 8-bit integers, where `value1` is set to 0 and `value2` is set to 1, the "wrapped" result will be 255.</span></span>  
  
 <span data-ttu-id="0ca49-4307">Dépassement de capacité à virgule flottante retourne `+inf` (`PositiveInfinity`) ou `-inf` (`NegativeInfinity`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-4307">Floating-point overflow returns `+inf` (`PositiveInfinity`) or `-inf` (`NegativeInfinity`).</span></span>  
  
 <span data-ttu-id="0ca49-4308">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `sub` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4308">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4309">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4309">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4310">Soustrait une valeur entière d'une autre, effectue un contrôle de dépassement de capacité et exécute un push du résultat dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4310">Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4311">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4311">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4312">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4312">Format</span></span>|<span data-ttu-id="0ca49-4313">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4313">Assembly Format</span></span>|<span data-ttu-id="0ca49-4314">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4314">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4315">DA</span><span class="sxs-lookup"><span data-stu-id="0ca49-4315">DA</span></span>|<span data-ttu-id="0ca49-4316">sub.ovf</span><span class="sxs-lookup"><span data-stu-id="0ca49-4316">sub.ovf</span></span>|<span data-ttu-id="0ca49-4317">Soustrait une valeur entière d’un autre avec une vérification de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4317">Subtracts one integer value from another with an overflow check.</span></span>|  
  
 <span data-ttu-id="0ca49-4318">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4318">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4319">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4319">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-4320">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4320">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-4321">`value2` et `value1` sont dépilés de la pile ; `value2` est soustraite de `value1` avec une vérification de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4321">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="0ca49-4322">Le résultat est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4322">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-4323"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4323"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-4324">Cette opération est effectuée sur les entiers signés ; pour les valeurs à virgule flottante, utilisez <xref:System.Reflection.Emit.OpCodes.Sub>.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4324">This operation is performed on signed integers; for floating-point values, use <xref:System.Reflection.Emit.OpCodes.Sub>.</span></span>  
  
 <span data-ttu-id="0ca49-4325">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `sub.ovf` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4325">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4326">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4326">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4327">Soustrait une valeur entière non signée d'une autre, effectue un contrôle de dépassement de capacité et exécute un push du résultat dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4327">Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4328">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4328">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4329">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4329">Format</span></span>|<span data-ttu-id="0ca49-4330">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4330">Assembly Format</span></span>|<span data-ttu-id="0ca49-4331">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4331">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4332">DB</span><span class="sxs-lookup"><span data-stu-id="0ca49-4332">DB</span></span>|<span data-ttu-id="0ca49-4333">Sub.ovf.un</span><span class="sxs-lookup"><span data-stu-id="0ca49-4333">sub.ovf.un</span></span>|<span data-ttu-id="0ca49-4334">Soustrait une valeur d’entier non signé à partir d’un autre avec une vérification de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4334">Subtracts one unsigned integer value from another with an overflow check.</span></span>|  
  
 <span data-ttu-id="0ca49-4335">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4335">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4336">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4336">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-4337">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4337">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-4338">`value2` et `value1` sont dépilés de la pile ; `value2` est soustraite de `value1` avec une vérification de dépassement de capacité.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4338">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="0ca49-4339">Le résultat est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4339">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-4340"><xref:System.OverflowException> est levée si le résultat ne peut pas être représenté dans le type de résultat.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4340"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="0ca49-4341">Cette opération est effectuée sur les entiers signés ; pour les valeurs à virgule flottante, utilisez <xref:System.Reflection.Emit.OpCodes.Sub>.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4341">This operation is performed on signed integers; for floating-point values, use <xref:System.Reflection.Emit.OpCodes.Sub>.</span></span>  
  
 <span data-ttu-id="0ca49-4342">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `sub.ovf.un` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4342">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4343">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4343">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Switch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Switch" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Switch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Switch As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Switch;" />
      <MemberSignature Language="F#" Value=" staticval mutable Switch : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Switch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4344">Implémente un tableau de saut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4344">Implements a jump table.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4345">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4345">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4346">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4346">Format</span></span>|<span data-ttu-id="0ca49-4347">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4347">Assembly Format</span></span>|<span data-ttu-id="0ca49-4348">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4348">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4349">45 < `unsigned int32` >< `int32` >... < `int32` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-4349">45 < `unsigned int32` > < `int32` >... < `int32` ></span></span>|<span data-ttu-id="0ca49-4350">Basculer (`N`, `t1`, `t2`... `tN`)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4350">switch (`N`, `t1`, `t2`... `tN`)</span></span>|<span data-ttu-id="0ca49-4351">Accède à un des `N` valeurs.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4351">Jumps to one of `N` values.</span></span>|  
  
 <span data-ttu-id="0ca49-4352">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4352">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4353">Une valeur est envoyée à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4353">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-4354">La valeur est dépilée et l’exécution est transférée à l’instruction à l’offset indexé par la valeur, où la valeur est inférieure à `N`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4354">The value is popped off the stack and execution is transferred to the instruction at the offset indexed by the value, where the value is less than `N`.</span></span>  
  
 <span data-ttu-id="0ca49-4355">La `switch` instruction implémente un tableau de saut.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4355">The `switch` instruction implements a jump table.</span></span> <span data-ttu-id="0ca49-4356">Le format de l’instruction est une `unsigned int32` représentant le nombre de cibles `N`, suivi par `N` valeurs int32 qui spécifient les cibles de saut.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4356">The format of the instruction is an `unsigned int32` representing the number of targets `N`, followed by `N` int32 values specifying jump targets.</span></span> <span data-ttu-id="0ca49-4357">Ces cibles sont représentées en tant qu’offsets (positifs ou négatifs) à partir du début de l’instruction suivant ce `switch` instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4357">These targets are represented as offsets (positive or negative) from the beginning of the instruction following this `switch` instruction.</span></span>  
  
 <span data-ttu-id="0ca49-4358">Le `switch` instruction Dépile une valeur de la pile et la compare, comme un entier non signé, à `N`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4358">The `switch` instruction pops a value off the stack and compares it, as an unsigned integer, to `N`.</span></span> <span data-ttu-id="0ca49-4359">Si la valeur est inférieure à `N`, l’exécution est transférée à la cible indexée par valeur, où les cibles sont numérotés de 0 (par exemple, une valeur de 0 est la première cible, une valeur de 1 est la deuxième cible et ainsi de suite).</span><span class="sxs-lookup"><span data-stu-id="0ca49-4359">If value is less than `N`, execution is transferred to the target indexed by value, where targets are numbered from 0 (for example, a value of 0 takes the first target, a value of 1 takes the second target, and so on).</span></span> <span data-ttu-id="0ca49-4360">Si la valeur est supérieure ou égale à `N`, l’exécution se poursuit à l’instruction suivante (passage).</span><span class="sxs-lookup"><span data-stu-id="0ca49-4360">If the value is greater than or equal to `N`, execution continues at the next instruction (fall through).</span></span>  
  
 <span data-ttu-id="0ca49-4361">Si l’instruction cible contient un ou plusieurs codes de préfixe, le contrôle peut uniquement être transféré à la première de ces préfixes.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4361">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="0ca49-4362">Le contrôle est transféré dans et hors du `try`, `catch`, `filter`, et `finally` blocs ne peut pas être effectuées par cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4362">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span> <span data-ttu-id="0ca49-4363">(Ces transferts sont strictement limités et doivent plutôt utiliser l’instruction leave).</span><span class="sxs-lookup"><span data-stu-id="0ca49-4363">(Such transfers are severely restricted and must use the leave instruction instead).</span></span>  
  
 <span data-ttu-id="0ca49-4364">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `switch` opcode.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4364">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `switch` opcode.</span></span> <span data-ttu-id="0ca49-4365">Le `Label[]` argument est un tableau d’étiquettes représentant des offsets de 32 bits.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4365">The `Label[]` argument is an array of Labels representing 32-bit offsets.</span></span>  
  
-   <span data-ttu-id="0ca49-4366">ILGenerator.Emit (OpCode, Label[])</span><span class="sxs-lookup"><span data-stu-id="0ca49-4366">ILGenerator.Emit(OpCode, Label[])</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ca49-4367">L’exemple de code suivant illustre l’utilisation de la `Switch` opcode pour générer un tableau de saut à l’aide d’un tableau de <xref:System.Reflection.Emit.Label>.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4367">The following code sample illustrates the use of the `Switch` opcode to generate a jump table using an array of <xref:System.Reflection.Emit.Label>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tailcall">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Tailcall;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Tailcall" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Tailcall As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Tailcall;" />
      <MemberSignature Language="F#" Value=" staticval mutable Tailcall : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4368">Exécute une instruction d'appel de méthode suffixée afin que le frame de pile de la méthode actuelle soit supprimé avant cette exécution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4368">Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4369">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4369">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4370">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4370">Format</span></span>|<span data-ttu-id="0ca49-4371">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4371">Assembly Format</span></span>|<span data-ttu-id="0ca49-4372">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4372">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4373">FE 14</span><span class="sxs-lookup"><span data-stu-id="0ca49-4373">FE 14</span></span>|<span data-ttu-id="0ca49-4374">tail.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4374">tail.</span></span>|<span data-ttu-id="0ca49-4375">L’appel suivant met fin à des méthodes actuelles</span><span class="sxs-lookup"><span data-stu-id="0ca49-4375">Subsequent call terminates current methods</span></span>|  
  
 <span data-ttu-id="0ca49-4376">Il n’existe aucun comportement de transition de pile défini pour cette instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4376">There is no stack transition behavior defined for this instruction.</span></span>  
  
 <span data-ttu-id="0ca49-4377">Le `tail` instruction de préfixe doit précéder immédiatement un <xref:System.Reflection.Emit.OpCodes.Call>, <xref:System.Reflection.Emit.OpCodes.Calli>, ou <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4377">The `tail` prefix instruction must immediately precede a <xref:System.Reflection.Emit.OpCodes.Call>, <xref:System.Reflection.Emit.OpCodes.Calli>, or <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction.</span></span> <span data-ttu-id="0ca49-4378">Il indique que le frame de pile de la méthode actuelle doit être supprimé avant l’exécution de l’instruction d’appel.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4378">It indicates that the current method's stack frame should be removed before the call instruction is executed.</span></span> <span data-ttu-id="0ca49-4379">Il implique également que la valeur retournée par l’appel suivant est également la valeur retournée par la méthode actuelle, et l’appel peut donc être convertie en un saut croisé-method.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4379">It also implies that the value returned from the following call is also the value returned by the current method, and the call can therefore be converted into a cross-method jump.</span></span>  
  
 <span data-ttu-id="0ca49-4380">La pile doit être vide sauf pour les arguments transférés par l’appel suivant.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4380">The stack must be empty except for the arguments being transferred by the following call.</span></span> <span data-ttu-id="0ca49-4381">L’instruction qui suit l’instruction d’appel doit être un ret. Par conséquent, la séquence de code valide uniquement est `tail. call` (ou `calli` ou `callvirt`).</span><span class="sxs-lookup"><span data-stu-id="0ca49-4381">The instruction following the call instruction must be a ret. Thus the only valid code sequence is `tail. call` (or `calli` or `callvirt`).</span></span> <span data-ttu-id="0ca49-4382">Les instructions de langage MSIL (Microsoft Intermediate Language) correctes ne doivent pas créer de branche à la `call` instruction, mais ils peuvent créer une branche à le <xref:System.Reflection.Emit.OpCodes.Ret>.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4382">Correct Microsoft Intermediate Language (MSIL) instructions must not branch to the `call` instruction, but they may branch to the subsequent <xref:System.Reflection.Emit.OpCodes.Ret>.</span></span>  
  
 <span data-ttu-id="0ca49-4383">Le frame actuel ne peut pas être ignoré lorsque le contrôle est transféré à partir du code non approuvé à code de confiance, car cela compromettrait la sécurité d’identité du code.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4383">The current frame cannot be discarded when control is transferred from untrusted code to trusted code, since this would jeopardize code identity security.</span></span> <span data-ttu-id="0ca49-4384">Vérifications de la sécurité de .NET Framework peuvent donc entraîner la `tail` doivent être ignorés, en laissant une norme <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4384">The .NET Framework security checks can therefore cause the `tail` to be ignored, leaving a standard <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span></span> <span data-ttu-id="0ca49-4385">De même, dans l’ordre pour autoriser la sortie d’une région synchronisée après le retour de l’appel, le `tail` est ignoré lorsqu’il est utilisé pour quitter une méthode marquée comme synchronisée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4385">Similarly, in order to allow the exit of a synchronized region to occur after the call returns, the `tail` prefix is ignored when used to exit a method that is marked synchronized.</span></span>  
  
 <span data-ttu-id="0ca49-4386">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `tail` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4386">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `tail` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4387">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4387">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TakesSingleByteArgument">
      <MemberSignature Language="C#" Value="public static bool TakesSingleByteArgument (System.Reflection.Emit.OpCode inst);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TakesSingleByteArgument(valuetype System.Reflection.Emit.OpCode inst) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TakesSingleByteArgument (inst As OpCode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TakesSingleByteArgument(System::Reflection::Emit::OpCode inst);" />
      <MemberSignature Language="F#" Value="static member TakesSingleByteArgument : System.Reflection.Emit.OpCode -&gt; bool" Usage="System.Reflection.Emit.OpCodes.TakesSingleByteArgument inst" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inst" Type="System.Reflection.Emit.OpCode" />
      </Parameters>
      <Docs>
        <param name="inst">
          <span data-ttu-id="0ca49-4388">Instance d'un objet Opcode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4388">An instance of an Opcode object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0ca49-4389">Retourne true ou false si l’opcode fourni utilise un argument à octet unique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4389">Returns true or false if the supplied opcode takes a single byte argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0ca49-4390">
            <see langword="True" /> ou <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4390">
              <see langword="True" /> or <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4391">Cette méthode peut être utilisée pour rechercher les opcodes MSIL qui constituent « court », pour une utilisation dans le code optimisé.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4391">This method can be used to find which MSIL opcodes are "short form", for use in optimized code.</span></span>  
  
 <span data-ttu-id="0ca49-4392">`TakesSingleByteArgument` Retourne `true` si le <xref:System.Reflection.Emit.OpCode> instance accepte un argument à octet unique dans les cas suivants :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4392">`TakesSingleByteArgument` returns `true` if the <xref:System.Reflection.Emit.OpCode> instance takes a single byte argument in the following cases:</span></span>  
  
-   <span data-ttu-id="0ca49-4393">L’opcode exécute une instruction de branchement à une adresse en octets (par exemple, <xref:System.Reflection.Emit.OpCodes.Br_S> et <xref:System.Reflection.Emit.OpCodes.Bgt_S>).</span><span class="sxs-lookup"><span data-stu-id="0ca49-4393">The opcode performs a branch instruction to a byte-sized address (for example, <xref:System.Reflection.Emit.OpCodes.Br_S> and <xref:System.Reflection.Emit.OpCodes.Bgt_S>).</span></span>  
  
-   <span data-ttu-id="0ca49-4394">L’opcode exécute un push d’une valeur d’octet dans la pile (par exemple, <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>).</span><span class="sxs-lookup"><span data-stu-id="0ca49-4394">The opcode pushes a byte value onto the stack (for example, <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>).</span></span>  
  
-   <span data-ttu-id="0ca49-4395">L’opcode fait référence à une variable ou un argument via la « forme abrégée » en octets (par exemple, <xref:System.Reflection.Emit.OpCodes.Ldloc_S> et <xref:System.Reflection.Emit.OpCodes.Stloc_S>).</span><span class="sxs-lookup"><span data-stu-id="0ca49-4395">The opcode references a variable or argument via the byte-sized "short form" (for example, <xref:System.Reflection.Emit.OpCodes.Ldloc_S> and <xref:System.Reflection.Emit.OpCodes.Stloc_S>).</span></span>  
  
 <span data-ttu-id="0ca49-4396">Sinon, il retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4396">Otherwise, it returns `false`.</span></span>  
  
 <span data-ttu-id="0ca49-4397">L’exemple ci-dessous illustre l’utilisation de `TakesSingleByteArgument` en réfléchissant le `OpCodes` classe et test pour voir si chaque `OpCode` champ prend un argument à octet unique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4397">The example below demonstrates the use of `TakesSingleByteArgument` by reflecting on to the `OpCodes` class and testing to see whether each `OpCode` field takes a single-byte argument.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Throw;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Throw" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Throw" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Throw As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Throw;" />
      <MemberSignature Language="F#" Value=" staticval mutable Throw : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Throw" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4398">Lève l'objet exception actuellement situé dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4398">Throws the exception object currently on the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4399">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4399">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4400">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4400">Format</span></span>|<span data-ttu-id="0ca49-4401">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4401">Assembly Format</span></span>|<span data-ttu-id="0ca49-4402">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4402">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4403">7 A</span><span class="sxs-lookup"><span data-stu-id="0ca49-4403">7A</span></span>|<span data-ttu-id="0ca49-4404">throw</span><span class="sxs-lookup"><span data-stu-id="0ca49-4404">throw</span></span>|<span data-ttu-id="0ca49-4405">Lève une exception.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4405">Throws an exception.</span></span>|  
  
 <span data-ttu-id="0ca49-4406">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4406">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4407">Une référence d’objet (une exception) est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4407">An object reference (to an exception) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-4408">La référence d’objet est dépilée de la pile et l’exception levée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4408">The object reference is popped from the stack and the exception thrown.</span></span>  
  
 <span data-ttu-id="0ca49-4409">Le `throw` instruction lève l’objet exception (type `O`) actuellement sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4409">The `throw` instruction throws the exception object (type `O`) currently on the stack.</span></span>  
  
 <span data-ttu-id="0ca49-4410"><xref:System.NullReferenceException> est levé si la référence d’objet est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4410"><xref:System.NullReferenceException> is thrown if the object reference is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-4411">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `throw` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4411">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `throw` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4412">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4412">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unaligned">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unaligned;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unaligned" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unaligned As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unaligned;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unaligned : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4413">Indique qu'une adresse actuellement située en haut de la pile d'évaluation peut ne pas être alignée avec la taille naturelle de l'instruction <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" /> ou <see langword="cpblk" /> qui suit immédiatement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4413">Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" />, or <see langword="cpblk" /> instruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4414">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4414">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4415">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4415">Format</span></span>|<span data-ttu-id="0ca49-4416">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4416">Assembly Format</span></span>|<span data-ttu-id="0ca49-4417">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4417">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4418">FE 12 &LT; `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-4418">FE 12 < `unsigned int8` ></span></span>|<span data-ttu-id="0ca49-4419">non alignés.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4419">unaligned.</span></span> `alignment`|<span data-ttu-id="0ca49-4420">Indique que l’instruction de pointeur suivantes peut-être ne pas être alignée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4420">Indicates that the subsequent pointer instruction may be unaligned.</span></span>|  
  
 <span data-ttu-id="0ca49-4421">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4421">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4422">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4422">An address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-4423">`Unaligned` Spécifie que l’adresse (un pointeur non managé, `native int`) sur la pile peut ne pas être alignée avec la taille naturelle de la suite des `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, ou `cpblk` instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4423">`Unaligned` specifies that the address (an unmanaged pointer, `native int`) on the stack might not be aligned to the natural size of the immediately following `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="0ca49-4424">Autrement dit, pour un <xref:System.Reflection.Emit.OpCodes.Ldind_I4> instruction l’alignement de l’adresse ne peut pas être à une limite de 4 octets.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4424">That is, for a <xref:System.Reflection.Emit.OpCodes.Ldind_I4> instruction the alignment of the address may not be to a 4-byte boundary.</span></span> <span data-ttu-id="0ca49-4425">Pour `initblk` et `cpblk` l’alignement par défaut est dépend de l’architecture (4 octets sur les processeurs 32 bits, 8 octets sur les unités centrales 64 bits).</span><span class="sxs-lookup"><span data-stu-id="0ca49-4425">For `initblk` and `cpblk` the default alignment is architecture dependent (4-byte on 32-bit CPUs, 8-byte on 64-bit CPUs).</span></span> <span data-ttu-id="0ca49-4426">Les générateurs de code qui ne limitent pas leur sortie à une taille de mot de 32 bits doivent utiliser `unaligned` si l’alignement n’est pas connu au moment de la compilation à 8 octets.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4426">Code generators that do not restrict their output to a 32-bit word size must use `unaligned` if the alignment is not known at compile time to be 8-byte.</span></span>  
  
 <span data-ttu-id="0ca49-4427">La valeur de l’alignement doit être 1, 2 ou 4 et signifie que le code généré doit supposer que l’adresse est l’octet, deux octets, ou à quatre octets, respectivement.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4427">The value of alignment must be 1, 2, or 4 and means that the generated code should assume that the address is byte, double-byte, or quad-byte aligned, respectively.</span></span> <span data-ttu-id="0ca49-4428">Notez que temporaire des pointeurs (type `*`) sont toujours alignés.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4428">Note that transient pointers (type `*`) are always aligned.</span></span>  
  
 <span data-ttu-id="0ca49-4429">Tandis que l’alignement d’un `cpblk` instruction nécessite logiquement deux nombres (un pour la source) et l’autre pour la destination, il n’existe aucun impact significatif sur les performances si seul le nombre inférieur est spécifié.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4429">While the alignment for a `cpblk` instruction would logically require two numbers (one for the source and one for the destination), there is no noticeable impact on performance if only the lower number is specified.</span></span>  
  
 <span data-ttu-id="0ca49-4430">Le `unaligned` et `volatile` préfixes peuvent être combinées dans les deux sens.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4430">The `unaligned` and `volatile` prefixes can be combined in either order.</span></span> <span data-ttu-id="0ca49-4431">Ils doivent précéder immédiatement un `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, ou `cpblk` instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4431">They must immediately precede a `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="0ca49-4432">Uniquement les <xref:System.Reflection.Emit.OpCodes.Volatile> est autorisé pour le <xref:System.Reflection.Emit.OpCodes.Ldsfld> et <xref:System.Reflection.Emit.OpCodes.Stsfld> obtenir des instructions.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4432">Only the <xref:System.Reflection.Emit.OpCodes.Volatile> prefix is allowed for the <xref:System.Reflection.Emit.OpCodes.Ldsfld> and <xref:System.Reflection.Emit.OpCodes.Stsfld> instructions.</span></span>  
  
 <span data-ttu-id="0ca49-4433">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> les surcharges de méthode peuvent utiliser le `unaligned` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4433">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `unaligned` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4434">ILGenerator.Emit (OpCode, étiquette)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4434">ILGenerator.Emit(OpCode, Label)</span></span>  
  
-   <span data-ttu-id="0ca49-4435">ILGenerator.Emit (Opcode, Byte)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4435">ILGenerator.Emit(Opcode, Byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unbox : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unbox" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4436">Convertit la représentation boxed d'un type de valeur dans sa forme unboxed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4436">Converts the boxed representation of a value type to its unboxed form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4437">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4437">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4438">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4438">Format</span></span>|<span data-ttu-id="0ca49-4439">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4439">Assembly Format</span></span>|<span data-ttu-id="0ca49-4440">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4440">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4441">79 < `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-4441">79 < `T` ></span></span>|<span data-ttu-id="0ca49-4442">effectuer une conversion unboxing `valType`</span><span class="sxs-lookup"><span data-stu-id="0ca49-4442">unbox `valType`</span></span>|<span data-ttu-id="0ca49-4443">Extrait les données de type valeur à partir de `obj`, ses boxed de représentation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4443">Extracts the value type data from `obj`, its boxed representation.</span></span>|  
  
 <span data-ttu-id="0ca49-4444">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4444">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4445">Une référence d’objet est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4445">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-4446">La référence d’objet est dépilée et unboxed en un pointeur de type valeur.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4446">The object reference is popped from the stack and unboxed to a value type pointer.</span></span>  
  
3.  <span data-ttu-id="0ca49-4447">Le pointeur de type valeur est envoyé à la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4447">The value type pointer is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-4448">Un type valeur a deux représentations distinctes au sein de l’Infrastructure (CLI) :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4448">A value type has two separate representations within the Common Language Infrastructure (CLI):</span></span>  
  
-   <span data-ttu-id="0ca49-4449">Un formulaire « brut » utilisé lorsqu’un type valeur est incorporé dans un autre objet.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4449">A 'raw' form used when a value type is embedded within another object.</span></span>  
  
-   <span data-ttu-id="0ca49-4450">Un formulaire « boxed », où les données dans le type de valeur sont encapsulées (boxed) dans un objet afin qu’il peut exister une entité indépendante.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4450">A 'boxed' form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.</span></span>  
  
 <span data-ttu-id="0ca49-4451">Le `unbox` instruction convertit la référence d’objet (type `O`), le boxed de représentation d’un type valeur, un pointeur de type valeur (un pointeur managé, type `&`), sa forme unboxed.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4451">The `unbox` instruction converts the object reference (type `O`), the boxed representation of a value type, to a value type pointer (a managed pointer, type `&`), its unboxed form.</span></span> <span data-ttu-id="0ca49-4452">Le type de valeur fourni (`valType`) est un jeton de métadonnées indiquant le type du type de valeur contenue dans l’objet converti.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4452">The supplied value type (`valType`) is a metadata token indicating the type of value type contained within the boxed object.</span></span>  
  
 <span data-ttu-id="0ca49-4453">Contrairement aux <xref:System.Reflection.Emit.OpCodes.Box>, qui est nécessaire pour effectuer une copie d’un type de valeur pour une utilisation dans l’objet, `unbox` n’est pas nécessaire pour copier le type de valeur à partir de l’objet.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4453">Unlike <xref:System.Reflection.Emit.OpCodes.Box>, which is required to make a copy of a value type for use in the object, `unbox` is not required to copy the value type from the object.</span></span> <span data-ttu-id="0ca49-4454">En règle générale, il calcule simplement l’adresse du type valeur qui est déjà présent dans l’objet converti.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4454">Typically it simply computes the address of the value type that is already present inside of the boxed object.</span></span>  
  
 <span data-ttu-id="0ca49-4455"><xref:System.InvalidCastException> est levée si l’objet n’est pas converti (boxed) en tant que `valType`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4455"><xref:System.InvalidCastException> is thrown if the object is not boxed as `valType`.</span></span>  
  
 <span data-ttu-id="0ca49-4456"><xref:System.NullReferenceException> est levé si la référence d’objet est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4456"><xref:System.NullReferenceException> is thrown if the object reference is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-4457"><xref:System.TypeLoadException> est levée si la valeur de type `valType` est introuvable.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4457"><xref:System.TypeLoadException> is thrown if the value type `valType` cannot be found.</span></span> <span data-ttu-id="0ca49-4458">Cela est généralement détecté lorsque les instructions de langage MSIL (Microsoft Intermediate Language) sont converties en code natif, plutôt que lors de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4458">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="0ca49-4459">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `unbox` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4459">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `unbox` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4460">ILGenerator.Emit (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4460">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox_Any">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox_Any;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox_Any" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox_Any As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox_Any;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unbox_Any : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4461">Convertit la représentation boxed d'un type spécifié dans l'instruction en forme unboxed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4461">Converts the boxed representation of a type specified in the instruction to its unboxed form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4462">Le tableau suivant répertorie les instructions format hexadécimal et Microsoft intermediate language (MSIL) assembly, ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4462">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4463">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4463">Format</span></span>|<span data-ttu-id="0ca49-4464">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4464">Assembly Format</span></span>|<span data-ttu-id="0ca49-4465">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4465">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4466">A5 &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="0ca49-4466">A5 < `T` ></span></span>|<span data-ttu-id="0ca49-4467">unbox.Any `typeTok`</span><span class="sxs-lookup"><span data-stu-id="0ca49-4467">unbox.any `typeTok`</span></span>|<span data-ttu-id="0ca49-4468">Extraire les données à partir de `obj`, ses boxed de représentation.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4468">Extract the data from `obj`, its boxed representation.</span></span>|  
  
 <span data-ttu-id="0ca49-4469">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4469">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4470">Une référence d’objet `obj` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4470">An object reference `obj` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-4471">La référence d’objet est dépilée et unboxed au type spécifié dans l’instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4471">The object reference is popped from the stack and unboxed to the type specified in the instruction.</span></span>  
  
3.  <span data-ttu-id="0ca49-4472">Le type de référence ou valeur d’objet qui en résulte est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4472">The resulting object reference or value type is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-4473">Lorsqu’il est appliqué à la forme boxed d’un type valeur, le `unbox.any` instruction extrait la valeur contenue dans `obj` (de type `O`) et n’est donc équivalent à `unbox` suivie `ldobj`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4473">When applied to the boxed form of a value type, the `unbox.any` instruction extracts the value contained within `obj` (of type `O`), and is therefore equivalent to `unbox` followed by `ldobj`.</span></span>  
  
 <span data-ttu-id="0ca49-4474">Lorsqu’il est appliqué à un type référence, le `unbox.any` instruction a le même effet que `castclass` `typeTok`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4474">When applied to a reference type, the `unbox.any` instruction has the same effect as `castclass` `typeTok`.</span></span>  
  
 <span data-ttu-id="0ca49-4475">Si l’opérande `typeTok` est un paramètre de type générique, puis le comportement d’exécution est déterminé par le type qui est spécifié pour ce paramètre de type générique.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4475">If the operand `typeTok` is a generic type parameter, then the runtime behavior is determined by the type that is specified for that generic type parameter.</span></span>  
  
 <span data-ttu-id="0ca49-4476"><xref:System.InvalidCastException> est levée si `obj` n’est pas un type boxed.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4476"><xref:System.InvalidCastException> is thrown if `obj` is not a boxed type.</span></span>  
  
 <span data-ttu-id="0ca49-4477"><xref:System.NullReferenceException> est levée si `obj` est une référence null.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4477"><xref:System.NullReferenceException> is thrown if `obj` is a null reference.</span></span>  
  
 <span data-ttu-id="0ca49-4478">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `unbox.any` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4478">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `unbox.any` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4479">ILGenerator.Emit (OpCode, Type)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4479">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Volatile">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Volatile;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Volatile" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Volatile" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Volatile As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Volatile;" />
      <MemberSignature Language="F#" Value=" staticval mutable Volatile : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Volatile" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4480">Spécifie qu'une adresse actuellement située en haut de la pile d'évaluation peut être volatile et que les résultats de la lecture de cet emplacement ne peuvent pas être mis en cache ou que plusieurs magasins situés à cet emplacement ne peuvent pas être supprimés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4480">Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4481">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4481">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4482">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4482">Format</span></span>|<span data-ttu-id="0ca49-4483">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4483">Assembly Format</span></span>|<span data-ttu-id="0ca49-4484">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4484">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4485">FE 13</span><span class="sxs-lookup"><span data-stu-id="0ca49-4485">FE 13</span></span>|<span data-ttu-id="0ca49-4486">volatile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4486">volatile.</span></span>|<span data-ttu-id="0ca49-4487">Indique que la référence de pointeur suivante est volatile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4487">Indicates that the subsequent pointer reference is volatile.</span></span>|  
  
 <span data-ttu-id="0ca49-4488">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4488">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4489">Une adresse est placée sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4489">An address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-4490">`volatile`.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4490">`volatile`.</span></span> <span data-ttu-id="0ca49-4491">Spécifie que l’adresse est une adresse volatile (en d’autrement dit, il peut être référencé d’en externe pour le thread en cours d’exécution) et les résultats de la lecture qu’emplacement ne peut pas être mis en cache ou que plusieurs magasins situés à cet emplacement ne peut pas être supprimées.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4491">specifies that the address is a volatile address (that is, it can be referenced externally to the current thread of execution) and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</span></span> <span data-ttu-id="0ca49-4492">Marquer un accès en tant que `volatile` n’affecte que cet accès unique ; d’autres accès au même emplacement doivent être marqués séparément.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4492">Marking an access as `volatile` affects only that single access; other accesses to the same location must be marked separately.</span></span> <span data-ttu-id="0ca49-4493">Accès aux emplacements volatiles ne doivent pas être effectuée atomiquement.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4493">Access to volatile locations need not be performed atomically.</span></span>  
  
 <span data-ttu-id="0ca49-4494">Le <xref:System.Reflection.Emit.OpCodes.Unaligned> et `volatile` préfixes peuvent être combinées dans les deux sens.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4494">The <xref:System.Reflection.Emit.OpCodes.Unaligned> and `volatile` prefixes can be combined in either order.</span></span> <span data-ttu-id="0ca49-4495">Ils doivent précéder immédiatement un `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, ou `cpblk` instruction.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4495">They must immediately precede a `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="0ca49-4496">Uniquement les `volatile` est autorisé pour le <xref:System.Reflection.Emit.OpCodes.Ldsfld> et <xref:System.Reflection.Emit.OpCodes.Stsfld> obtenir des instructions.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4496">Only the `volatile` prefix is allowed for the <xref:System.Reflection.Emit.OpCodes.Ldsfld> and <xref:System.Reflection.Emit.OpCodes.Stsfld> instructions.</span></span>  
  
 <span data-ttu-id="0ca49-4497">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `volatile` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4497">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `volatile` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4498">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4498">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Xor;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Xor" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Xor" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Xor As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Xor;" />
      <MemberSignature Language="F#" Value=" staticval mutable Xor : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Xor" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0ca49-4499">Calcule l'opération de bits XOR des deux premières valeurs de la pile d'évaluation en exécutant un push du résultat dans la pile d'évaluation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0ca49-4499">Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ca49-4500">Le tableau suivant répertorie les instructions hexadécimal et format d’assembly de langage MSIL (Microsoft Intermediate Language), ainsi que d’un bref résumé de référence :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4500">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="0ca49-4501">Format</span><span class="sxs-lookup"><span data-stu-id="0ca49-4501">Format</span></span>|<span data-ttu-id="0ca49-4502">Format d’assembly</span><span class="sxs-lookup"><span data-stu-id="0ca49-4502">Assembly Format</span></span>|<span data-ttu-id="0ca49-4503">Description </span><span class="sxs-lookup"><span data-stu-id="0ca49-4503">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="0ca49-4504">61</span><span class="sxs-lookup"><span data-stu-id="0ca49-4504">61</span></span>|<span data-ttu-id="0ca49-4505">xor</span><span class="sxs-lookup"><span data-stu-id="0ca49-4505">xor</span></span>|<span data-ttu-id="0ca49-4506">Calcule l’opération de bits XOR des deux valeurs entières et retourne un entier.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4506">Computes the bitwise XOR of two integer values and returns an integer.</span></span>|  
  
 <span data-ttu-id="0ca49-4507">Le comportement de transition de pile, dans un ordre séquentiel, est :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4507">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="0ca49-4508">`value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4508">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="0ca49-4509">`value2` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4509">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="0ca49-4510">`value2` et `value1` sont dépilés à partir de la pile et leurs opérations de bits XOR est calculée.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4510">`value2` and `value1` are popped from the stack and their bitwise XOR computed.</span></span>  
  
4.  <span data-ttu-id="0ca49-4511">L’opération de bits XOR de `value2` et `value1` est placé sur la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4511">The bitwise XOR of `value2` and `value1` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="0ca49-4512">La `xor` instruction calcule l’opération de bits XOR des deux premières valeurs de la pile et laisse le résultat dans la pile.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4512">The `xor` instruction computes the bitwise XOR of the top two values on the stack and leaves the result on the stack.</span></span>  
  
 <span data-ttu-id="0ca49-4513">`Xor` est une opération spécifique aux entiers.</span><span class="sxs-lookup"><span data-stu-id="0ca49-4513">`Xor` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="0ca49-4514">Ce qui suit <xref:System.Reflection.Emit.ILGenerator.Emit%2A> surcharge de méthode permettre utiliser le `xor` opcode :</span><span class="sxs-lookup"><span data-stu-id="0ca49-4514">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `xor` opcode:</span></span>  
  
-   <span data-ttu-id="0ca49-4515">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="0ca49-4515">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>