<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="UnmanagedMarshal.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac546fc4e13279b8ca823d2162a58c8f9ff13114e65.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46fc4e13279b8ca823d2162a58c8f9ff13114e65</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>Represents the class that describes how to marshal a field from managed to unmanaged code.</source>
          <target state="translated">Représente la classe qui décrit comment marshaler un champ d'un code managé à un code non managé.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>This class cannot be inherited.</source>
          <target state="translated">Cette classe ne peut pas être héritée.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>The code example shows the workaround for this obsolete type.</source>
          <target state="translated">L’exemple de code montre la solution de contournement pour ce type obsolète.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>Marshaling is the process of packaging and unpackaging parameters so remote procedure calls can occur.</source>
          <target state="translated">Marshaling étant le processus d’empaquetage et de décompactage des paramètres des appels de procédure distante peuvent se produire.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>During marshaling, a field might undergo a format conversion when the format of the managed type is different from the format of the corresponding unmanaged type.</source>
          <target state="translated">Lors du marshaling, un champ peut subir une conversion de format quand le format du type managé est différent du format du type non managé correspondant.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>For example, you might want to marshal a <ph id="ph1">`String`</ph> type as an unmanaged BSTR.</source>
          <target state="translated">Par exemple, vous souhaiterez peut-être marshaler un <ph id="ph1">`String`</ph> type en BSTR non managé.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>Some format conversions are handled automatically by the runtime.</source>
          <target state="translated">Certaines conversions de format sont gérées automatiquement par le runtime.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>To override the default behavior, you must use the <ph id="ph1">`UnmanagedMarshal`</ph> class to define the format conversion.</source>
          <target state="translated">Pour substituer le comportement par défaut, vous devez utiliser le <ph id="ph1">`UnmanagedMarshal`</ph> classe pour définir la conversion de format.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>The following code example shows replacement code for the obsolete <ph id="ph1">&lt;xref:System.Reflection.Emit.UnmanagedMarshal&gt;</ph> type.</source>
          <target state="translated">L’exemple de code suivant montre le code de remplacement pour l’obsolète <ph id="ph1">&lt;xref:System.Reflection.Emit.UnmanagedMarshal&gt;</ph> type.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>The example emits a single-module assembly named <ph id="ph1">`EmitMarshalAs.dll`</ph>, containing a type named <ph id="ph2">`Sample`</ph>.</source>
          <target state="translated">L’exemple émet un assembly de module unique nommé <ph id="ph1">`EmitMarshalAs.dll`</ph>, qui contient un type nommé <ph id="ph2">`Sample`</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>The type has a method named <ph id="ph1">`Test`</ph>, with one parameter of type <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Le type a une méthode nommée <ph id="ph1">`Test`</ph>, avec un paramètre de type <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>The code example applies the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> with <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType.BStr?displayProperty=nameWithType&gt;</ph> to the parameter.</source>
          <target state="translated">L’exemple de code applique la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> avec <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType.BStr?displayProperty=nameWithType&gt;</ph> au paramètre.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.UnmanagedMarshal">
          <source>You can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to examine the emitted assembly and observe that the parameter is marked <ph id="ph1">`marshal(bstr)`</ph>.</source>
          <target state="translated">Vous pouvez utiliser la <bpt id="p1">[</bpt>Ildasm.exe (désassembleur IL)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> pour examiner l’assembly émis et observer que le paramètre est marqué comme <ph id="ph1">`marshal(bstr)`</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.BaseType">
          <source>Gets an unmanaged base type.</source>
          <target state="translated">Obtient un type de base non managé.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.BaseType">
          <source>This property is read-only.</source>
          <target state="translated">Cette propriété est en lecture seule.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.BaseType">
          <source>An <ph id="ph1">&lt;see langword="UnmanagedType" /&gt;</ph> object.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see langword="UnmanagedType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.BaseType">
          <source>The unmanaged type is not an <ph id="ph1">&lt;see langword="LPArray" /&gt;</ph> or a <ph id="ph2">&lt;see langword="SafeArray" /&gt;</ph>.</source>
          <target state="translated">Le type non managé n'est ni <ph id="ph1">&lt;see langword="LPArray" /&gt;</ph> ni <ph id="ph2">&lt;see langword="SafeArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>The number of elements in the fixed-length array.</source>
          <target state="translated">Nombre d'éléments dans le tableau de longueur fixe.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>Specifies a fixed-length array (ByValArray) to marshal to unmanaged code.</source>
          <target state="translated">Spécifie un tableau de longueur fixe (ByValArray) à marshaler en code non managé.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> object.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>The <ph id="ph1">`DefineByValArray`</ph> method is not a simple native marshal.</source>
          <target state="translated">Le <ph id="ph1">`DefineByValArray`</ph> méthode n’est pas un marshaling natif simple.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>Only unmanaged marshal constructs can be made using these static constructors.</source>
          <target state="translated">Uniquement des constructions de marshaling non managé peuvent être effectuées à l’aide de ces constructeurs statiques.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>Marshaling an array is a more complex process than marshaling an integer parameter.</source>
          <target state="translated">Marshaling d’un tableau est un processus plus complexe que le marshaling d’un paramètre de type entier.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>Array members are copied in a specific order so that the other side can reconstruct the array exactly.</source>
          <target state="translated">Membres de tableau sont copiés dans un ordre spécifique afin que l’autre côté peut reconstruire le tableau exactement.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)">
          <source>The argument is not a simple native type.</source>
          <target state="translated">L'argument n'est pas un type natif simple.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>The number of elements in the fixed array buffer.</source>
          <target state="translated">Nombre d'éléments dans la mémoire tampon de tableau de longueur fixe.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>Specifies a string in a fixed array buffer (ByValTStr) to marshal to unmanaged code.</source>
          <target state="translated">Spécifie une chaîne dans une mémoire tampon de tableau de longueur fixe (ByValTStr) à marshaler en code non managé.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> object.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>The <ph id="ph1">`DefineByValStr`</ph> method is not a simple native marshal.</source>
          <target state="translated">Le <ph id="ph1">`DefineByValStr`</ph> méthode n’est pas un marshaling natif simple.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>Only unmanaged marshal constructs can be made using these static constructors.</source>
          <target state="translated">Uniquement des constructions de marshaling non managé peuvent être effectuées à l’aide de ces constructeurs statiques.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>Marshaling an array is a more complex process than marshaling an integer parameter.</source>
          <target state="translated">Marshaling d’un tableau est un processus plus complexe que le marshaling d’un paramètre de type entier.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>Array members are copied in a specific order so that the other side can reconstruct the array exactly.</source>
          <target state="translated">Membres de tableau sont copiés dans un ordre spécifique afin que l’autre côté peut reconstruire le tableau exactement.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)">
          <source>The argument is not a simple native type.</source>
          <target state="translated">L'argument n'est pas un type natif simple.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The unmanaged type to which to marshal the array.</source>
          <target state="translated">Type non managé vers lequel le tableau doit être marshalé.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Specifies an <ph id="ph1">&lt;see langword="LPArray" /&gt;</ph> to marshal to unmanaged code.</source>
          <target state="translated">Spécifie un <ph id="ph1">&lt;see langword="LPArray" /&gt;</ph> à marshaler en code non managé.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The length of an <ph id="ph1">&lt;see langword="LPArray" /&gt;</ph> is determined at runtime by the size of the actual marshaled array.</source>
          <target state="translated">La longueur d'un <ph id="ph1">&lt;see langword="LPArray" /&gt;</ph> est déterminée par la taille du tableau réellement marshalé au moment de l'exécution.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> object.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The <ph id="ph1">`DefineLPArray`</ph> method is not a simple native marshal.</source>
          <target state="translated">Le <ph id="ph1">`DefineLPArray`</ph> méthode n’est pas un marshaling natif simple.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Only unmanaged marshal constructs can be made using these static constructors.</source>
          <target state="translated">Uniquement des constructions de marshaling non managé peuvent être effectuées à l’aide de ces constructeurs statiques.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Marshaling an array is a more complex process than marshaling an integer parameter.</source>
          <target state="translated">Marshaling d’un tableau est un processus plus complexe que le marshaling d’un paramètre de type entier.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Array members are copied in a specific order so that the other side can reconstruct the array exactly.</source>
          <target state="translated">Membres de tableau sont copiés dans un ordre spécifique afin que l’autre côté peut reconstruire le tableau exactement.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The argument is not a simple native type.</source>
          <target state="translated">L'argument n'est pas un type natif simple.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The base type or the <ph id="ph1">&lt;see langword="UnmanagedType" /&gt;</ph> of each element of the array.</source>
          <target state="translated">Type de base ou <ph id="ph1">&lt;see langword="UnmanagedType" /&gt;</ph> de chaque élément du tableau.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Specifies a <ph id="ph1">&lt;see langword="SafeArray" /&gt;</ph> to marshal to unmanaged code.</source>
          <target state="translated">Spécifie un <ph id="ph1">&lt;see langword="SafeArray" /&gt;</ph> à marshaler en code non managé.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> object.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The <ph id="ph1">`DefineSafeArray`</ph> method is not a simple native marshal.</source>
          <target state="translated">Le <ph id="ph1">`DefineSafeArray`</ph> méthode n’est pas un marshaling natif simple.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Only unmanaged marshal constructs can be made using these static constructors.</source>
          <target state="translated">Uniquement des constructions de marshaling non managé peuvent être effectuées à l’aide de ces constructeurs statiques.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Marshaling an array is a more complex process than marshaling an integer parameter.</source>
          <target state="translated">Marshaling d’un tableau est un processus plus complexe que le marshaling d’un paramètre de type entier.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>Array members are copied in a specific order so that the other side can reconstruct the array exactly.</source>
          <target state="translated">Membres de tableau sont copiés dans un ordre spécifique afin que l’autre côté peut reconstruire le tableau exactement.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)">
          <source>The argument is not a simple native type.</source>
          <target state="translated">L'argument n'est pas un type natif simple.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>The unmanaged type to which the type is to be marshaled.</source>
          <target state="translated">Type non managé vers lequel le type doit être marshalé.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>Specifies a given type that is to be marshaled to unmanaged code.</source>
          <target state="translated">Spécifie un type donné à marshaler en code non managé.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph> object.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.UnmanagedMarshal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph> passed to this method must be a simple native type.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph> transmis à cette méthode doit être un type natif simple.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>None of the following values may be used: <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType.ByValTStr?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType.SafeArray?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.UnmanagedType.ByValArray?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Runtime.InteropServices.UnmanagedType.LPArray?displayProperty=nameWithType&gt;</ph>, or <ph id="ph5">&lt;xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Aucune des valeurs suivantes peut être utilisée : <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType.ByValTStr?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType.SafeArray?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.UnmanagedType.ByValArray?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Runtime.InteropServices.UnmanagedType.LPArray?displayProperty=nameWithType&gt;</ph>, ou <ph id="ph5">&lt;xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>Only unmanaged marshal constructs can be made using this method.</source>
          <target state="translated">Uniquement des constructions de marshaling non managé peuvent être effectuées à l’aide de cette méthode.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)">
          <source>The argument is not a simple native type.</source>
          <target state="translated">L'argument n'est pas un type natif simple.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.ElementCount">
          <source>Gets a number element.</source>
          <target state="translated">Obtient un élément numérique.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.ElementCount">
          <source>This property is read-only.</source>
          <target state="translated">Cette propriété est en lecture seule.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.ElementCount">
          <source>An integer indicating the element count.</source>
          <target state="translated">Entier indiquant le nombre d'éléments.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.ElementCount">
          <source>There is an <ph id="ph1">`ElementCount`</ph> only if there is a <ph id="ph2">`NativeTypeFixedArray`</ph>.</source>
          <target state="translated">Il existe un <ph id="ph1">`ElementCount`</ph> uniquement s’il existe un <ph id="ph2">`NativeTypeFixedArray`</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.ElementCount">
          <source>The argument is not an unmanaged element count.</source>
          <target state="translated">L'argument n'est pas un nombre d'éléments non managés.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType">
          <source>Indicates an unmanaged type.</source>
          <target state="translated">Indique un type non managé.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType">
          <source>This property is read-only.</source>
          <target state="translated">Cette propriété est en lecture seule.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType">
          <source>An <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.UnmanagedType" /&gt;</ph> object.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.UnmanagedType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType">
          <source>The <ph id="ph1">`GetUnmanagedType`</ph> property is an accessor function for the native type.</source>
          <target state="translated">Le <ph id="ph1">`GetUnmanagedType`</ph> propriété est une fonction d’accesseur pour le type natif.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
          <source>Gets a GUID.</source>
          <target state="translated">Obtient un GUID.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
          <source>This property is read-only.</source>
          <target state="translated">Cette propriété est en lecture seule.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
          <source>A <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> object.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
          <source>This property always returns Guid.Empty.</source>
          <target state="translated">Cette propriété retourne toujours Guid.Empty.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
          <source>This property might be removed in a future release.</source>
          <target state="translated">Cette propriété peut être supprimée dans une version ultérieure.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid">
          <source>The argument is not a custom marshaler.</source>
          <target state="translated">L'argument n'est pas un marshaleur personnalisé.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>